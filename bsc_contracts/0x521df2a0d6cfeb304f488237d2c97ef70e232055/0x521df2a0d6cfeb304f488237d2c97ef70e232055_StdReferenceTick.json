{"SourceCode": "{\"AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IAccessControl.sol\\\";\\nimport \\\"Context.sol\\\";\\nimport \\\"Strings.sol\\\";\\nimport \\\"ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn\\u0027t allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role\\u0027s admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address =\\u003e bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 =\\u003e RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role\\u0027s admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn\\u0027t perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``\\u0027s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``\\u0027s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role\\u0027s admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IStdReference.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.13;\\n\\ninterface IStdReference {\\n    /// A structure returned whenever someone requests for standard reference data.\\n    struct ReferenceData {\\n        uint256 rate; // base/quote exchange rate, multiplied by 1e18.\\n        uint256 lastUpdatedBase; // UNIX epoch of the last time when base price gets updated.\\n        uint256 lastUpdatedQuote; // UNIX epoch of the last time when quote price gets updated.\\n    }\\n\\n    /// Returns the price data for the given base/quote pair. Revert if not available.\\n    function getReferenceData(string memory _base, string memory _quote) external view returns (ReferenceData memory);\\n\\n    /// Similar to getReferenceData, but with multiple base/quote pairs at once.\\n    function getReferenceDataBulk(string[] memory _bases, string[] memory _quotes) external view returns (ReferenceData[] memory);\\n}\\n\"},\"StdReferenceBase.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.13;\\n\\nimport {IStdReference} from \\\"IStdReference.sol\\\";\\n\\nabstract contract StdReferenceBase is IStdReference {\\n    function getReferenceData(string memory _base, string memory _quote) public view virtual override returns (ReferenceData memory);\\n\\n    function getReferenceDataBulk(string[] memory _bases, string[] memory _quotes) public view override returns (ReferenceData[] memory) {\\n        require(_bases.length == _quotes.length, \\\"BAD_INPUT_LENGTH\\\");\\n        uint256 len = _bases.length;\\n        ReferenceData[] memory results = new ReferenceData[](len);\\n        for (uint256 idx = 0; idx \\u003c len; idx++) {\\n            results[idx] = getReferenceData(_bases[idx], _quotes[idx]);\\n        }\\n        return results;\\n    }\\n}\\n\"},\"StdReferenceTick.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.13;\\n\\nimport {StdReferenceBase} from \\\"StdReferenceBase.sol\\\";\\nimport {AccessControl} from \\\"AccessControl.sol\\\";\\n\\ncontract StdReferenceTick is AccessControl, StdReferenceBase {\\n    bytes32 public constant RELAYER_ROLE = keccak256(\\\"RELAYER_ROLE\\\");\\n    bytes32 public constant LISTER_ROLE = keccak256(\\\"LISTER_ROLE\\\");\\n    bytes32 public constant DELISTER_ROLE = keccak256(\\\"DELISTER_ROLE\\\");\\n    bytes32 private constant USD = keccak256(bytes(\\\"USD\\\"));\\n    uint256 public constant MID_TICK = 262144;\\n\\n    struct Price {\\n        uint256 tick;\\n        string symbol;\\n    }\\n\\n    uint256 public totalSymbolsCount = 0;\\n\\n    // storage\\n    // 31|3|(timeOffset(18)+tick(19))*6|\\n    mapping(uint256 =\\u003e uint256) public refs;\\n    mapping(string =\\u003e uint256) public symbolsToIDs;\\n    mapping(uint256 =\\u003e string) public idsToSymbols;\\n\\n    constructor(address admin) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        _grantRole(RELAYER_ROLE, admin);\\n        _grantRole(LISTER_ROLE, admin);\\n        _grantRole(DELISTER_ROLE, admin);\\n    }\\n\\n    function _extractSlotTime(uint256 val) private pure returns (uint256 t) {\\n        unchecked {\\n            t = (val \\u003e\\u003e 225) \\u0026 ((1 \\u003c\\u003c 31) - 1);\\n        }\\n    }\\n\\n    function _extractSize(uint256 val) private pure returns (uint256 s) {\\n        unchecked {\\n            s = (val \\u003e\\u003e 222) \\u0026 ((1 \\u003c\\u003c 3) - 1);\\n        }\\n    }\\n\\n    function _extractTick(uint256 val, uint256 shiftLen) private pure returns (uint256 tick) {\\n        unchecked {\\n            tick = (val \\u003e\\u003e shiftLen) \\u0026 ((1 \\u003c\\u003c 19) - 1);\\n        }\\n    }\\n\\n    function _extractTimeOffset(uint256 val, uint256 shiftLen) private pure returns (uint256 offset) {\\n        unchecked {\\n            offset = (val \\u003e\\u003e shiftLen) \\u0026 ((1 \\u003c\\u003c 18) - 1);\\n        }\\n    }\\n\\n    function _setTime(uint256 val, uint256 time) private pure returns (uint256 newVal) {\\n        unchecked {\\n            newVal = (val \\u0026 (type(uint256).max \\u003e\\u003e 31)) | (time \\u003c\\u003c 225);\\n        }\\n    }\\n\\n    function _setSize(uint256 val, uint256 size) private pure returns (uint256 newVal) {\\n        unchecked {\\n            newVal = (val \\u0026 ((type(uint256).max \\u003c\\u003c (37 * (6 - size))) - ((((1 \\u003c\\u003c 3) - 1)) \\u003c\\u003c 222))) | (size \\u003c\\u003c 222);\\n        }\\n    }\\n\\n    function _setTimeOffset(uint256 val, uint256 timeOffset, uint256 shiftLen) private pure returns (uint256 newVal) {\\n        unchecked {\\n            newVal = ((val \\u0026 ~(uint256((1 \\u003c\\u003c 18) - 1) \\u003c\\u003c (shiftLen + 19))) | (timeOffset \\u003c\\u003c (shiftLen + 19)));\\n        }\\n    }\\n\\n    function _setTicksAndTimeOffset(uint256 val, uint256 timeOffset, uint256 tick, uint256 shiftLen) private pure returns (uint256 newVal) {\\n        unchecked {\\n            newVal = (val \\u0026 (~(uint256((1 \\u003c\\u003c 37) - 1) \\u003c\\u003c shiftLen))) | (((timeOffset \\u003c\\u003c 19) | (tick \\u0026 ((1 \\u003c\\u003c 19) - 1))) \\u003c\\u003c shiftLen);\\n        }\\n    }\\n\\n    function _getTickAndTime(uint256 slot, uint8 idx) private view returns (uint256 tick, uint256 lastUpdated) {\\n        unchecked {\\n            uint256 sVal = refs[slot];\\n            uint256 idx_x_37 = idx * 37;\\n            return (_extractTick(sVal, 185 - idx_x_37), _extractTimeOffset(sVal, 204 - idx_x_37) + _extractSlotTime(sVal));\\n        }\\n    }\\n\\n    function getSlotAndIndex(string memory symbol) public view returns (uint256 slot, uint8 idx) {\\n        unchecked {\\n            uint256 id = symbolsToIDs[symbol];\\n            require(id != 0, \\\"getSlotAndIndex: FAIL_SYMBOL_NOT_AVAILABLE\\\");\\n            return ((id - 1) / 6, uint8((id - 1) % 6));\\n        }\\n    }\\n\\n    function getTickAndTime(string memory symbol) public view returns (uint256 tick, uint256 lastUpdated) {\\n        unchecked {\\n            if (keccak256(bytes(symbol)) == USD) {\\n                (tick, lastUpdated) = (MID_TICK, block.timestamp);\\n            } else {\\n                (uint256 slot, uint8 idx) = getSlotAndIndex(symbol);\\n                (tick, lastUpdated) = _getTickAndTime(slot, idx);\\n                require(tick != 0, \\\"getTickAndTime: FAIL_TICK_0_IS_AN_EMPTY_PRICE\\\");\\n            }\\n        }\\n    }\\n\\n    function getReferenceData(string memory _base, string memory _quote) public view override returns (ReferenceData memory r) {\\n        uint256 baseTick;\\n        uint256 quoteTick;\\n        (baseTick, r.lastUpdatedBase) = getTickAndTime(_base);\\n        (quoteTick, r.lastUpdatedQuote) = getTickAndTime(_quote);\\n        require(baseTick + MID_TICK \\u003e quoteTick, \\\"getReferenceData: FAIL_PRICE_RATIO_TOO_LOW\\\");\\n        require(baseTick \\u003c MID_TICK + quoteTick, \\\"getReferenceData: FAIL_PRICE_RATIO_TOO_HIGH\\\");\\n        r.rate = _getPriceFromTick((baseTick + MID_TICK) - quoteTick);\\n    }\\n\\n    function _getPriceFromTick(uint256 x) private pure returns (uint256 y) {\\n        unchecked {\\n            require(x != 0, \\\"_getPriceFromTick: FAIL_TICK_0_IS_AN_EMPTY_PRICE\\\");\\n            require(x \\u003c (1 \\u003c\\u003c 19), \\\"_getPriceFromTick: FAIL_TICK_OUT_OF_RANGE\\\");\\n            y = 649037107316853453566312041152512;\\n            if (x \\u003c MID_TICK) {\\n                x = MID_TICK - x;\\n                if (x \\u0026 0x01 != 0) y = (y * 649102011027585138911668672356627) \\u003e\\u003e 109;\\n                if (x \\u0026 0x02 != 0) y = (y * 649166921228687897425559839223862) \\u003e\\u003e 109;\\n                if (x \\u0026 0x04 != 0) y = (y * 649296761104602847291923925447306) \\u003e\\u003e 109;\\n                if (x \\u0026 0x08 != 0) y = (y * 649556518769447606681106054382372) \\u003e\\u003e 109;\\n                if (x \\u0026 0x10 != 0) y = (y * 650076345896668132522271100656030) \\u003e\\u003e 109;\\n                if (x \\u0026 0x20 != 0) y = (y * 651117248505878973533694452870408) \\u003e\\u003e 109;\\n                if (x \\u0026 0x40 != 0) y = (y * 653204056474534657407624669811404) \\u003e\\u003e 109;\\n                if (x \\u0026 0x80 != 0) y = (y * 657397758286396885483233885325217) \\u003e\\u003e 109;\\n                if (x \\u0026 0x0100 != 0) y = (y * 665866108005128170549362417755489) \\u003e\\u003e 109;\\n                if (x \\u0026 0x0200 != 0) y = (y * 683131470899774684431604377857106) \\u003e\\u003e 109;\\n                if (x \\u0026 0x0400 != 0) y = (y * 719016834742958293196733842540130) \\u003e\\u003e 109;\\n                if (x \\u0026 0x0800 != 0) y = (y * 796541835305874991615834691778664) \\u003e\\u003e 109;\\n                if (x \\u0026 0x1000 != 0) y = (y * 977569522974447437629335387266319) \\u003e\\u003e 109;\\n                if (x \\u0026 0x2000 != 0) y = (y * 1472399900522103311842374358851872) \\u003e\\u003e 109;\\n                if (x \\u0026 0x4000 != 0) y = (y * 3340273526146976564083509455290620) \\u003e\\u003e 109;\\n                if (x \\u0026 0x8000 != 0) y = (y * 17190738562859105750521122099339319) \\u003e\\u003e 109;\\n                if (x \\u0026 0x010000 != 0) y = (y * 455322953040804340936374685561109626) \\u003e\\u003e 109;\\n                if (x \\u0026 0x020000 != 0) y = (y * 319425483117388922324853186559947171877) \\u003e\\u003e 109;\\n                y = 649037107316853453566312041152512000000000000000000 / y;\\n            } else {\\n                x = x - MID_TICK;\\n                if (x \\u0026 0x01 != 0) y = (y * 649102011027585138911668672356627) \\u003e\\u003e 109;\\n                if (x \\u0026 0x02 != 0) y = (y * 649166921228687897425559839223862) \\u003e\\u003e 109;\\n                if (x \\u0026 0x04 != 0) y = (y * 649296761104602847291923925447306) \\u003e\\u003e 109;\\n                if (x \\u0026 0x08 != 0) y = (y * 649556518769447606681106054382372) \\u003e\\u003e 109;\\n                if (x \\u0026 0x10 != 0) y = (y * 650076345896668132522271100656030) \\u003e\\u003e 109;\\n                if (x \\u0026 0x20 != 0) y = (y * 651117248505878973533694452870408) \\u003e\\u003e 109;\\n                if (x \\u0026 0x40 != 0) y = (y * 653204056474534657407624669811404) \\u003e\\u003e 109;\\n                if (x \\u0026 0x80 != 0) y = (y * 657397758286396885483233885325217) \\u003e\\u003e 109;\\n                if (x \\u0026 0x0100 != 0) y = (y * 665866108005128170549362417755489) \\u003e\\u003e 109;\\n                if (x \\u0026 0x0200 != 0) y = (y * 683131470899774684431604377857106) \\u003e\\u003e 109;\\n                if (x \\u0026 0x0400 != 0) y = (y * 719016834742958293196733842540130) \\u003e\\u003e 109;\\n                if (x \\u0026 0x0800 != 0) y = (y * 796541835305874991615834691778664) \\u003e\\u003e 109;\\n                if (x \\u0026 0x1000 != 0) y = (y * 977569522974447437629335387266319) \\u003e\\u003e 109;\\n                if (x \\u0026 0x2000 != 0) y = (y * 1472399900522103311842374358851872) \\u003e\\u003e 109;\\n                if (x \\u0026 0x4000 != 0) y = (y * 3340273526146976564083509455290620) \\u003e\\u003e 109;\\n                if (x \\u0026 0x8000 != 0) y = (y * 17190738562859105750521122099339319) \\u003e\\u003e 109;\\n                if (x \\u0026 0x010000 != 0) y = (y * 455322953040804340936374685561109626) \\u003e\\u003e 109;\\n                if (x \\u0026 0x020000 != 0) y = (y * 319425483117388922324853186559947171877) \\u003e\\u003e 109;\\n                y = (y * 1e18) / 649037107316853453566312041152512;\\n            }\\n        }\\n    }\\n\\n    function getPriceFromTick(uint256 x) public pure returns (uint256 y) {\\n        y = _getPriceFromTick(x);\\n    }\\n\\n    /**\\n     * @dev Grants `RELAYER_ROLE` to `accounts`.\\n     *\\n     * If each `account` had not been already granted `RELAYER_ROLE`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``RELAYER_ROLE``\\u0027s admin role.\\n     */\\n    function grantRelayers(address[] calldata accounts) external onlyRole(getRoleAdmin(RELAYER_ROLE)) {\\n        for (uint256 idx = 0; idx \\u003c accounts.length; idx++) {\\n            _grantRole(RELAYER_ROLE, accounts[idx]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `RELAYER_ROLE` from `accounts`.\\n     *\\n     * If each `account` had already granted `RELAYER_ROLE`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``RELAYER_ROLE``\\u0027s admin role.\\n     */\\n    function revokeRelayers(address[] calldata accounts) external onlyRole(getRoleAdmin(RELAYER_ROLE)) {\\n        for (uint256 idx = 0; idx \\u003c accounts.length; idx++) {\\n            _revokeRole(RELAYER_ROLE, accounts[idx]);\\n        }\\n    }\\n\\n    function listing(string[] calldata symbols) public onlyRole(LISTER_ROLE) {\\n        require(symbols.length != 0, \\\"listing: FAIL_SYMBOLS_IS_EMPTY\\\");\\n\\n        uint256 _totalSymbolsCount = totalSymbolsCount;\\n        uint256 sid = _totalSymbolsCount / 6;\\n        uint256 sVal = refs[sid];\\n        uint256 sSize = _extractSize(sVal);\\n\\n        for (uint256 i = 0; i \\u003c symbols.length; i++) {\\n            require(keccak256(bytes(symbols[i])) != USD, \\\"listing: FAIL_USD_CANT_BE_SET\\\");\\n            require(symbolsToIDs[symbols[i]] == 0, \\\"listing: FAIL_SYMBOL_IS_ALREADY_SET\\\");\\n\\n            uint256 slotID = _totalSymbolsCount / 6;\\n\\n            _totalSymbolsCount++;\\n            symbolsToIDs[symbols[i]] = _totalSymbolsCount;\\n            idsToSymbols[_totalSymbolsCount] = symbols[i];\\n\\n            if (sid != slotID) {\\n                refs[sid] = sVal;\\n\\n                sid = slotID;\\n                sVal = refs[sid];\\n                sSize = _extractSize(sVal);\\n            }\\n\\n            sSize++;\\n            sVal = _setSize(sVal, sSize);\\n        }\\n\\n        refs[sid] = sVal;\\n        totalSymbolsCount = _totalSymbolsCount;\\n    }\\n\\n    function delisting(string[] calldata symbols) public onlyRole(DELISTER_ROLE) {\\n        uint256 _totalSymbolsCount = totalSymbolsCount;\\n        uint256 slotID1;\\n        uint256 slotID2;\\n        uint256 sVal1;\\n        uint256 sVal2;\\n        uint256 sSize;\\n        uint256 shiftLen;\\n        uint256 lastSegment;\\n        uint256 time;\\n        string memory lastSymbol;\\n        for (uint256 i = 0; i \\u003c symbols.length; i++) {\\n            uint256 id = symbolsToIDs[symbols[i]];\\n            require(id != 0, \\\"delisting: FAIL_SYMBOL_NOT_AVAILABLE\\\");\\n\\n            lastSymbol = idsToSymbols[_totalSymbolsCount];\\n\\n            symbolsToIDs[lastSymbol] = id;\\n            idsToSymbols[id] = lastSymbol;\\n\\n            slotID1 = (_totalSymbolsCount - 1) / 6;\\n            slotID2 = (id - 1) / 6;\\n            sVal1 = refs[slotID1];\\n            sSize = _extractSize(sVal1);\\n            lastSegment = (sVal1 \\u003e\\u003e (37 * (6 - sSize))) \\u0026 ((1 \\u003c\\u003c 37) - 1);\\n            shiftLen = 37 * (5 - ((id - 1) % 6));\\n\\n            if (slotID1 == slotID2) {\\n                sVal1 = (sVal1 \\u0026 (type(uint256).max - (((1 \\u003c\\u003c 37) - 1) \\u003c\\u003c shiftLen))) | (lastSegment \\u003c\\u003c shiftLen);\\n            } else {\\n                sVal2 = refs[slotID2];\\n\\n                time = _extractSlotTime(sVal1) + (lastSegment \\u003e\\u003e 19);\\n                require(time \\u003e= _extractSlotTime(sVal2), \\\"delisting: FAIL_LAST_TIMESTAMP_IS_LESS_THAN_TARGET_TIMESTAMP\\\");\\n                time -= _extractSlotTime(sVal2);\\n                require(time \\u003c 1 \\u003c\\u003c 18, \\\"delisting: FAIL_DELTA_TIME_EXCEED_3_DAYS\\\");\\n                lastSegment = (time \\u003c\\u003c 19) | (lastSegment \\u0026 ((1 \\u003c\\u003c 19) - 1));\\n\\n                refs[slotID2] = (sVal2 \\u0026 (type(uint256).max - (((1 \\u003c\\u003c 37) - 1) \\u003c\\u003c shiftLen))) | (lastSegment \\u003c\\u003c shiftLen);\\n            }\\n\\n            refs[slotID1] = _setSize(sVal1, sSize - 1);\\n\\n            delete symbolsToIDs[symbols[i]];\\n            delete idsToSymbols[_totalSymbolsCount];\\n\\n            _totalSymbolsCount--;\\n        }\\n\\n        totalSymbolsCount = _totalSymbolsCount;\\n    }\\n\\n    function relay(uint256 time, uint256 requestID, Price[] calldata ps) external onlyRole(RELAYER_ROLE) {\\n        unchecked {\\n            uint256 id;\\n            uint256 sid = type(uint256).max;\\n            uint256 nextSID;\\n            uint256 sTime;\\n            uint256 sVal;\\n            uint256 shiftLen;\\n            for (uint256 i = 0; i \\u003c ps.length; i++) {\\n                id = symbolsToIDs[ps[i].symbol];\\n                require(id != 0, \\\"relay: FAIL_SYMBOL_NOT_AVAILABLE\\\");\\n\\n                nextSID = (id - 1) / 6;\\n                if (sid != nextSID) {\\n                    if (sVal != 0) refs[sid] = sVal;\\n\\n                    sVal = refs[nextSID];\\n                    sid = nextSID;\\n                    sTime = _extractSlotTime(sVal);\\n                }\\n\\n                shiftLen = 204 - (37 * ((id - 1) % 6));\\n                if (sTime + _extractTimeOffset(sVal, shiftLen) \\u003c time) {\\n                    require(time \\u003c sTime + (1 \\u003c\\u003c 18), \\\"relay: FAIL_DELTA_TIME_EXCEED_3_DAYS\\\");\\n                    sVal = _setTicksAndTimeOffset(sVal, time - sTime, ps[i].tick, shiftLen - 19);\\n                }\\n            }\\n\\n            if (sVal != 0) refs[sid] = sVal;\\n        }\\n    }\\n\\n    function relayRebase(uint256 time, uint256 requestID, Price[] calldata ps) external onlyRole(RELAYER_ROLE) {\\n        unchecked {\\n            uint256 id;\\n            uint256 nextID;\\n            uint256 sVal;\\n            uint256 sTime;\\n            uint256 sSize;\\n            uint256 shiftLen;\\n            uint256 timeOffset;\\n            uint256 i;\\n            while (i \\u003c ps.length) {\\n                id = symbolsToIDs[ps[i].symbol];\\n                require(id != 0, \\\"relayRebase: FAIL_SYMBOL_NOT_AVAILABLE\\\");\\n                require((id - 1) % 6 == 0, \\\"relayRebase: FAIL_INVALID_FIRST_IDX\\\");\\n                sVal = refs[(id - 1) / 6];\\n                (sTime, sSize) = (_extractSlotTime(sVal), _extractSize(sVal));\\n                require(sTime \\u003c time, \\\"relayRebase: FAIL_NEW_TIME_\\u003c=_CURRENT\\\");\\n                shiftLen = 204;\\n                timeOffset = _extractTimeOffset(sVal, shiftLen);\\n                shiftLen = shiftLen - 19;\\n                sVal = sTime + timeOffset \\u003c= time\\n                    ? _setTicksAndTimeOffset(sVal, 0, ps[i].tick, shiftLen)\\n                    : _setTimeOffset(sVal, (sTime + timeOffset) - time, shiftLen);\\n                require(i + sSize \\u003c= ps.length, \\\"relayRebase: FAIL_INCONSISTENT_SIZES\\\");\\n                for (uint256 j = i + 1; j \\u003c i + sSize; j++) {\\n                    nextID = symbolsToIDs[ps[j].symbol];\\n                    require(nextID != 0, \\\"relayRebase: FAIL_SYMBOL_NOT_AVAILABLE\\\");\\n                    require(nextID + i == id + j, \\\"relayRebase: FAIL_INVALID_IDX_ORDER\\\");\\n                    shiftLen = shiftLen - 18;\\n                    timeOffset = _extractTimeOffset(sVal, shiftLen);\\n                    shiftLen = shiftLen - 19;\\n                    sVal = sTime + timeOffset \\u003c= time\\n                        ? _setTicksAndTimeOffset(sVal, 0, ps[j].tick, shiftLen)\\n                        : _setTimeOffset(sVal, (sTime + timeOffset) - time, shiftLen);\\n                }\\n                refs[(id - 1) / 6] = _setTime(sVal, time);\\n                i += sSize;\\n            }\\n        }\\n    }\\n}\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp \\u003e\\u003e= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELISTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LISTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MID_TICK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"delisting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"getPriceFromTick\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_base\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_quote\",\"type\":\"string\"}],\"name\":\"getReferenceData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedQuote\",\"type\":\"uint256\"}],\"internalType\":\"struct IStdReference.ReferenceData\",\"name\":\"r\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_bases\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_quotes\",\"type\":\"string[]\"}],\"name\":\"getReferenceDataBulk\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedQuote\",\"type\":\"uint256\"}],\"internalType\":\"struct IStdReference.ReferenceData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getSlotAndIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"idx\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTickAndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tick\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"grantRelayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idsToSymbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"listing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tick\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct StdReferenceTick.Price[]\",\"name\":\"ps\",\"type\":\"tuple[]\"}],\"name\":\"relay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tick\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct StdReferenceTick.Price[]\",\"name\":\"ps\",\"type\":\"tuple[]\"}],\"name\":\"relayRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"revokeRelayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"symbolsToIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSymbolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StdReferenceTick", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004f0dd797a16660358ede064fc0bd045ec989be1b", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2b92459c65398fbf771381f0efabb6e6ca0018d3dc578e8654445f2ca410a776"}