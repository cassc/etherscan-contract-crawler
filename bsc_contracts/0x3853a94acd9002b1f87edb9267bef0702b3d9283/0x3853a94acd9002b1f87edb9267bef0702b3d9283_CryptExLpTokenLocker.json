{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/lplocker/CryptExLpTokenLocker.sol\": {\r\n      \"content\": \"/*\\n\\n        \u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\\n        \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\\n        \u2588\u2588\u2551\u2591\u2591\u255a\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2554\u255d\u2591\\n        \u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2591\u2588\u2588\u2554\u2588\u2588\u2557\u2591\\n        \u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2557\\n        \u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\\n\\nThis contract for locking and vesting liquidity tokens. Locked liquidity cannot be removed from DEX\\nuntil the specified unlock date has been reached. Supports several dexes.\\n\\nVersion 4\\n\\n \u2022 website:                           https://cryptexlock.me\\n \u2022 medium:                            https://medium.com/cryptex-locker\\n \u2022 Telegram Announcements Channel:    https://t.me/CryptExAnnouncements\\n \u2022 Telegram Main Channel:             https://t.me/cryptexlocker\\n \u2022 Twitter Page:                      https://twitter.com/ExLocker\\n \u2022 Reddit:                            https://www.reddit.com/r/CryptExLocker/\\n\\n*/\\n\\n// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IPancakeFactory.sol\\\";\\nimport \\\"../interfaces/IPancakePair.sol\\\";\\nimport \\\"../interfaces/IFeesCalculator.sol\\\";\\nimport \\\"../interfaces/IMigrator.sol\\\";\\nimport \\\"../LockAndVestBase.sol\\\";\\n\\ncontract CryptExLpTokenLockerV4 is LockAndVestBase {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using Address for address;\\n\\n    mapping(address => bool) public isFactorySupported;\\n    IMigrator public migrator;\\n\\n    struct TokenLock {\\n        address lpToken;\\n        address owner;\\n        uint256 tokenAmount;\\n        uint256 unlockTime;\\n        uint256 lockedCrx;\\n    }\\n\\n    mapping(uint256 => TokenLock) public tokenLocks;\\n\\n    mapping(address => EnumerableSet.UintSet) private userLocks;\\n\\n    event OnTokenLock(\\n        uint256 indexed lockId,\\n        address indexed tokenAddress,\\n        address indexed owner,\\n        uint256 amount,\\n        uint256 unlockTime\\n    );\\n    event OnLockMigration(uint256 indexed lockId, address indexed migrator);\\n\\n    modifier onlyLockOwner(uint256 lockId) {\\n        TokenLock storage lock = tokenLocks[lockId];\\n        require(\\n            lock.owner == address(msg.sender),\\n            \\\"NO ACTIVE LOCK OR NOT OWNER\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        address[] memory supportedFactories,\\n        address _feesCalculator,\\n        address payable _feesReceiver,\\n        address _feeToken\\n    ) {\\n        feesCalculator = IFeesCalculator(_feesCalculator);\\n        feeReceiver = _feesReceiver;\\n        feeToken = IERC20(_feeToken);\\n\\n        for (uint256 i = 0; i < supportedFactories.length; ++i) {\\n            for (uint256 j = i + 1; j < supportedFactories.length; ++j) {\\n                require(\\n                    supportedFactories[i] != supportedFactories[j],\\n                    \\\"WRONG FACTORIES\\\"\\n                );\\n            }\\n\\n            require(\\n                _checkIfAddressIsFactory(supportedFactories[i]),\\n                \\\"WRONG FACTORIES\\\"\\n            );\\n            isFactorySupported[supportedFactories[i]] = true;\\n        }\\n    }\\n\\n    /**\\n     * @notice allow/disallow factory for locking and vesting\\n     * @param factory factory address\\n     * @param value false - disallow,\\n     *              true  - allow\\n     */\\n    function setIsFactorySupported(address factory, bool value)\\n        external\\n        onlyOwner\\n    {\\n        require(_checkIfAddressIsFactory(factory), \\\"WRONG FACTORY\\\");\\n        isFactorySupported[factory] = value;\\n    }\\n\\n    function _proceedLock(\\n        address token,\\n        address withdrawer,\\n        uint256 amountToLock,\\n        uint256 unlockTime,\\n        uint256 crxToLock,\\n        bool needToCheck\\n    ) internal virtual override returns (uint256 lockId) {\\n        if (needToCheck) {\\n            require(isLpToken(token), \\\"NOT DEX PAIR\\\");\\n        }\\n\\n        TokenLock memory lock = TokenLock({\\n            lpToken: token,\\n            owner: withdrawer,\\n            tokenAmount: amountToLock,\\n            unlockTime: unlockTime,\\n            lockedCrx: crxToLock\\n        });\\n\\n        lockId = lockNonce++;\\n        tokenLocks[lockId] = lock;\\n\\n        userLocks[withdrawer].add(lockId);\\n\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amountToLock);\\n        emit OnTokenLock(lockId, token, withdrawer, amountToLock, unlockTime);\\n        return lockId;\\n    }\\n\\n    function isLpToken(address lpToken) private view returns (bool) {\\n        if (!lpToken.isContract()) {\\n            return false;\\n        }\\n\\n        IPancakePair pair = IPancakePair(lpToken);\\n        address factory;\\n        try pair.factory() returns (address _factory) {\\n            factory = _factory;\\n        } catch (bytes memory) {\\n            return false;\\n        }\\n\\n        if (!isFactorySupported[factory]) {\\n            return false;\\n        }\\n\\n        address factoryPair = IPancakeFactory(factory).getPair(\\n            pair.token0(),\\n            pair.token1()\\n        );\\n        return factoryPair == lpToken;\\n    }\\n\\n    /**\\n     * @notice increase unlock time of already locked tokens\\n     * @param newUnlockTime new unlock time (unix time in seconds)\\n     */\\n    function extendLockTime(uint256 lockId, uint256 newUnlockTime)\\n        external\\n        nonReentrant\\n        onlyLockOwner(lockId)\\n    {\\n        require(newUnlockTime > block.timestamp, \\\"UNLOCK TIME IN THE PAST\\\");\\n        require(\\n            newUnlockTime < 10000000000,\\n            \\\"INVALID UNLOCK TIME, MUST BE UNIX TIME IN SECONDS\\\"\\n        );\\n        TokenLock storage lock = tokenLocks[lockId];\\n        require(lock.unlockTime < newUnlockTime, \\\"NOT INCREASING UNLOCK TIME\\\");\\n        lock.unlockTime = newUnlockTime;\\n        emit OnLockDurationIncreased(lockId, newUnlockTime);\\n    }\\n\\n    /**\\n     * @notice add tokens to an existing lock\\n     * @param amountToIncrement tokens amount to add\\n     * @param feePaymentMode fee payment mode\\n     */\\n    function increaseLockAmount(\\n        uint256 lockId,\\n        uint256 amountToIncrement,\\n        uint8 feePaymentMode\\n    ) external payable nonReentrant onlyLockOwner(lockId) {\\n        require(amountToIncrement > 0, \\\"ZERO AMOUNT\\\");\\n        TokenLock storage lock = tokenLocks[lockId];\\n\\n        address _lpToken = lock.lpToken;\\n        (\\n            uint256 actualIncrementAmount,\\n            uint256 crxToLock\\n        ) = _getIncreaseLockAmounts(\\n                _lpToken,\\n                amountToIncrement,\\n                lock.unlockTime,\\n                feePaymentMode\\n            );\\n\\n        lock.tokenAmount = lock.tokenAmount.add(actualIncrementAmount);\\n        lock.lockedCrx = lock.lockedCrx.add(crxToLock);\\n        IERC20(_lpToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            actualIncrementAmount\\n        );\\n        emit OnLockAmountIncreased(lockId, amountToIncrement);\\n    }\\n\\n    /**\\n     * @notice withdraw all tokens from lock. Current time must be greater than unlock time\\n     * @param lockId lock id to withdraw\\n     */\\n    function withdraw(uint256 lockId) external {\\n        TokenLock storage lock = tokenLocks[lockId];\\n        withdrawPartially(lockId, lock.tokenAmount);\\n    }\\n\\n    /**\\n     * @notice withdraw specified amount of tokens from lock. Current time must be greater than unlock time\\n     * @param lockId lock id to withdraw tokens from\\n     * @param amount amount of tokens to withdraw\\n     */\\n    function withdrawPartially(uint256 lockId, uint256 amount)\\n        public\\n        nonReentrant\\n        onlyLockOwner(lockId)\\n    {\\n        TokenLock storage lock = tokenLocks[lockId];\\n        require(lock.tokenAmount >= amount, \\\"AMOUNT EXCEEDS LOCKED\\\");\\n        require(block.timestamp >= lock.unlockTime, \\\"NOT YET UNLOCKED\\\");\\n\\n        address _owner = lock.owner;\\n\\n        IERC20(lock.lpToken).safeTransfer(_owner, amount);\\n\\n        uint256 tokenAmount = lock.tokenAmount.sub(amount);\\n        lock.tokenAmount = tokenAmount;\\n        if (tokenAmount == 0) {\\n            uint256 lockedCrx = lock.lockedCrx;\\n            if (lockedCrx > 0) {\\n                feeToken.safeTransfer(_owner, lockedCrx);\\n            }\\n            //clean up storage to save gas\\n            userLocks[_owner].remove(lockId);\\n            delete tokenLocks[lockId];\\n            emit OnTokenUnlock(lockId);\\n        }\\n        emit OnLockWithdrawal(lockId, amount);\\n    }\\n\\n    /**\\n     * @notice transfer lock ownership to another account. If crxTokens were locked as a paymentFee, the new owner\\n     * will receive them after the unlock\\n     * @param lockId lock id to transfer\\n     * @param newOwner account to transfer lock\\n     */\\n    function transferLock(uint256 lockId, address newOwner)\\n        external\\n        onlyLockOwner(lockId)\\n    {\\n        require(newOwner != address(0), \\\"ZERO NEW OWNER\\\");\\n        TokenLock storage lock = tokenLocks[lockId];\\n        userLocks[lock.owner].remove(lockId);\\n        userLocks[newOwner].add(lockId);\\n        lock.owner = newOwner;\\n        emit OnLockOwnershipTransferred(lockId, newOwner);\\n    }\\n\\n    /**\\n     * @notice get user's locks number\\n     * @param user user's address\\n     */\\n    function userLocksLength(address user) external view returns (uint256) {\\n        return userLocks[user].length();\\n    }\\n\\n    /**\\n     * @notice get user lock id at specified index\\n     * @param user user's address\\n     * @param index index of lock id\\n     */\\n    function userLockAt(address user, uint256 index)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return userLocks[user].at(index);\\n    }\\n\\n    /**\\n     * @notice Sets the migrator contract that will perform the migration in case a new update of Pancake was\\n     * rolled out. Callable only by the owner of this contract.\\n     * @param newMigrator address of the migrator contract\\n     */\\n    function setMigrator(address newMigrator) external onlyOwner {\\n        migrator = IMigrator(newMigrator);\\n    }\\n\\n    /**\\n     * @notice migrates liquidity in case new update of Pancake was rolled out.\\n     * @param lockId id of the lock\\n     * @param migratorContract address of migrator contract that will perform the migration (prevents frontrun attack\\n     * if a locker owner changes the migrator contract before the migration function was mined)\\n     */\\n    function migrate(uint256 lockId, address migratorContract)\\n        external\\n        nonReentrant\\n    {\\n        require(address(migrator) != address(0), \\\"NO MIGRATOR\\\");\\n        require(migratorContract == address(migrator), \\\"WRONG MIGRATOR\\\"); //frontrun prevention\\n\\n        TokenLock storage lock = tokenLocks[lockId];\\n        require(lock.owner == msg.sender, \\\"ONLY LOCK OWNER\\\");\\n        IERC20(lock.lpToken).safeApprove(address(migrator), lock.tokenAmount);\\n        migrator.migrate(\\n            lock.lpToken,\\n            lock.tokenAmount,\\n            lock.unlockTime,\\n            lock.owner\\n        );\\n        emit OnLockMigration(lockId, address(migrator));\\n\\n        userLocks[lock.owner].remove(lockId);\\n        delete tokenLocks[lockId];\\n    }\\n\\n    /**\\n     * @notice recover accidentally sent tokens to the contract. Callable only by contract owner\\n     * @param tokenAddress token address to recover\\n     */\\n    function recoverLockedTokens(address tokenAddress) external onlyOwner {\\n        require(!isLpToken(tokenAddress), \\\"unable to recover LP token\\\");\\n        IERC20 token = IERC20(tokenAddress);\\n        token.safeTransfer(owner(), token.balanceOf(address(this)));\\n    }\\n\\n    function _checkIfAddressIsFactory(address addressCheck)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        if (!addressCheck.isContract()) {\\n            return false;\\n        }\\n        try IPancakeFactory(addressCheck).allPairsLength() returns (uint256) {\\n            return true;\\n        } catch (bytes memory) {\\n            return false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakePair.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeesCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\ninterface IFeesCalculator {\\n\\n    function calculateFees(\\n        address token,\\n        uint256 amount,\\n        uint256 unlockTime,\\n        uint8 paymentMode,\\n        address referrer,\\n        address sender\\n    ) external view\\n    returns(uint256 ethFee, uint256 systemTokenFee, uint256 tokenFee, uint256 lockAmount, uint256 referralPercentScaled);\\n\\n    function calculateIncreaseAmountFees(\\n        address token,\\n        uint256 amount,\\n        uint256 unlockTime,\\n        uint8 paymentMode,\\n        address sender\\n    ) external view\\n    returns(uint256 ethFee, uint256 systemTokenFee, uint256 tokenFee, uint256 lockAmount);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMigrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\ninterface IMigrator {\\n\\n    function migrate(address lpToken, uint256 amount, uint256 unlockTime, address owner) external;\\n\\n}\"\r\n    },\r\n    \"contracts/LockAndVestBase.sol\": {\r\n      \"content\": \"/*\\n\\n        \u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\\n        \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\\n        \u2588\u2588\u2551\u2591\u2591\u255a\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2554\u255d\u2591\\n        \u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2591\u2588\u2588\u2554\u2588\u2588\u2557\u2591\\n        \u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2557\\n        \u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\\n\\n Base functionality for locking and vesting contract.\\n\\n \u2022 website:                           https://cryptexlock.me\\n \u2022 medium:                            https://medium.com/cryptex-locker\\n \u2022 Telegram Announcements Channel:    https://t.me/CryptExAnnouncements\\n \u2022 Telegram Main Channel:             https://t.me/cryptexlocker\\n \u2022 Twitter Page:                      https://twitter.com/ExLocker\\n \u2022 Reddit:                            https://www.reddit.com/r/CryptExLocker/\\n\\n*/\\n\\n// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IFeesCalculator.sol\\\";\\n\\nabstract contract LockAndVestBase is ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    IFeesCalculator public feesCalculator;\\n    address payable public feeReceiver;\\n    IERC20 public feeToken;\\n    uint256 public minimalLockTime;\\n\\n    uint256 internal lockNonce;\\n\\n    event OnFeesCalculatorUpdate(\\n        address lastFeesCalculator,\\n        address newFeesCalculator\\n    );\\n    event OnFeeReceiverUpdate(address lastFeeReceiver, address newFeeReceiver);\\n    event OnFeeTokenUpdate(address newAddress);\\n    event OnMinimalLockTimeChange(\\n        uint256 oldMinimalLockTime,\\n        uint256 newMinimalLockTime\\n    );\\n    event OnTokenUnlock(uint256 indexed lockId);\\n    event OnLockWithdrawal(uint256 indexed lockId, uint256 amount);\\n    event OnLockAmountIncreased(uint256 indexed lockId, uint256 amount);\\n    event OnLockDurationIncreased(\\n        uint256 indexed lockId,\\n        uint256 newUnlockTime\\n    );\\n    event OnLockOwnershipTransferred(\\n        uint256 indexed lockId,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @notice locks BEP20 token until specified time\\n     * @param token token address to lock\\n     * @param amount amount of tokens to lock\\n     * @param unlockTime unix time in seconds after that tokens can be withdrawn\\n     * @param withdrawer account that can withdraw tokens to it's balance\\n     * @param feePaymentMode 0 - pay fees in ETH + % of token,\\n     *                       1 - pay fees in CRX + % of token,\\n     *                       2 - pay fees fully in BNB,\\n     *                       3 - pay fees fully in CRX\\n     *                       4 - pay fees by locking CRX\\n     * @param referrer account of referrer\\n     */\\n    function lockTokens(\\n        address token,\\n        uint256 amount,\\n        uint256 unlockTime,\\n        address payable withdrawer,\\n        uint8 feePaymentMode,\\n        address referrer\\n    ) external payable nonReentrant returns (uint256 lockId) {\\n        require(amount > 0, \\\"ZERO AMOUNT\\\");\\n        require(token != address(0), \\\"ZERO TOKEN\\\");\\n        require(withdrawer != address(0), \\\"ZERO WITHDRAWER\\\");\\n        require(\\n            unlockTime < 10000000000,\\n            \\\"INVALID UNLOCK TIME, MUST BE UNIX TIME IN SECONDS\\\"\\n        );\\n        require(\\n            unlockTime > block.timestamp + minimalLockTime,\\n            \\\"TOO SMALL UNLOCK TIME\\\"\\n        );\\n\\n        (uint256 amountToLock, uint256 crxToLock) = _getLockAmounts(\\n            token,\\n            amount,\\n            unlockTime,\\n            feePaymentMode,\\n            referrer\\n        );\\n\\n        lockId = _proceedLock(\\n            token,\\n            withdrawer,\\n            amountToLock,\\n            unlockTime,\\n            crxToLock,\\n            true\\n        );\\n    }\\n\\n    /**\\n     * @notice token vesting\\n     * @param token token address to lock\\n     * @param amount overall amount of tokens to lock\\n     * @param percents[] array of amount percentage (1e4 = 100%). Sum must be 100%\\n     * @param unlockTimes[] sorted array of unix times in seconds, must be same length as percents[]\\n     * @param withdrawer account that can withdraw tokens to it's balance\\n     * @param feePaymentMode 0 - pay fees in ETH + % of token,\\n     *                       1 - pay fees in CRX + % of token,\\n     *                       2 - pay fees fully in BNB,\\n     *                       3 - pay fees fully in CRX\\n     *                       4 - pay fees by locking CRX\\n     * @param referrer account of referrer\\n     */\\n    function vestTokens(\\n        address token,\\n        uint256 amount,\\n        uint256[] memory percents,\\n        uint256[] memory unlockTimes,\\n        address payable withdrawer,\\n        uint8 feePaymentMode,\\n        address referrer\\n    ) external payable nonReentrant {\\n        require(percents.length == unlockTimes.length, \\\"ARRAY SIZES MISMATCH\\\");\\n        require(percents.length >= 2, \\\"LOW LOCKS COUNT\\\");\\n        require(amount > 0, \\\"ZERO AMOUNT\\\");\\n        require(withdrawer != address(0), \\\"ZERO WITHDRAWER\\\");\\n        require(\\n            unlockTimes[0] > block.timestamp + minimalLockTime,\\n            \\\"TOO SMALL UNLOCK TIME\\\"\\n        );\\n        require(\\n            unlockTimes[unlockTimes.length - 1] < 10000000000,\\n            \\\"INVALID UNLOCK TIME, MUST BE UNIX TIME IN SECONDS\\\"\\n        );\\n\\n        (uint256 amountToLockTotal, uint256 crxToLockTotal) = _getLockAmounts(\\n            token,\\n            amount,\\n            unlockTimes[unlockTimes.length - 1],\\n            feePaymentMode,\\n            referrer\\n        );\\n\\n        uint256 percentsOverall;\\n        uint256 amountToLockRest = amountToLockTotal;\\n        uint256 crxToLockRest = crxToLockTotal;\\n        for (uint256 i = 0; i < unlockTimes.length; ++i) {\\n            percentsOverall += percents[i];\\n            uint256 amountToLockNow;\\n            uint256 crxToLockNow;\\n            if (i < unlockTimes.length - 1) {\\n                require(\\n                    unlockTimes[i] < unlockTimes[i + 1],\\n                    \\\"UNSORTED UNLOCK TIMES\\\"\\n                );\\n\\n                amountToLockNow = amountToLockTotal.mul(percents[i]).div(1e4);\\n                crxToLockNow = crxToLockTotal.mul(percents[i]).div(1e4);\\n\\n                amountToLockRest -= amountToLockNow;\\n                crxToLockRest -= crxToLockNow;\\n            } else {\\n                amountToLockNow = amountToLockRest;\\n                crxToLockNow = crxToLockRest;\\n            }\\n            _proceedLock(\\n                token,\\n                withdrawer,\\n                amountToLockNow,\\n                unlockTimes[i],\\n                crxToLockNow,\\n                i == 0\\n            );\\n        }\\n        require(percentsOverall == 1e4, \\\"INVALID PERCENTS\\\");\\n    }\\n\\n    /**\\n     * @notice sets new contract to calculate fees\\n     * @param newFeesCalculator address of new fees calculator contract\\n     */\\n    function setFeesCalculator(address newFeesCalculator) external onlyOwner {\\n        require(newFeesCalculator != address(0), \\\"ZERO ADDRESS\\\");\\n        address oldFeesCalculator = address(feesCalculator);\\n        feesCalculator = IFeesCalculator(newFeesCalculator);\\n\\n        emit OnFeesCalculatorUpdate(oldFeesCalculator, newFeesCalculator);\\n    }\\n\\n    /**\\n     * @notice sets new beneficiary\\n     * @param newFeeReceiver address of new fees receiver\\n     */\\n    function setFeeReceiver(address payable newFeeReceiver) external onlyOwner {\\n        require(newFeeReceiver != address(0), \\\"ZERO ADDRESS\\\");\\n        address lastFeeReceiver = feeReceiver;\\n        feeReceiver = newFeeReceiver;\\n\\n        emit OnFeeReceiverUpdate(lastFeeReceiver, newFeeReceiver);\\n    }\\n\\n    /**\\n     * @notice initialize fee token\\n     * @param _feeToken address of fee token\\n     */\\n    function setFeeTokenAddress(address _feeToken) external onlyOwner {\\n        require(address(feeToken) == address(0), \\\"already set\\\");\\n        feeToken = IERC20(_feeToken);\\n\\n        emit OnFeeTokenUpdate(_feeToken);\\n    }\\n\\n    /**\\n     * @notice sets new minimal lock time\\n     * @param newMinimalLockTime address of new fees receiver\\n     */\\n    function setMinimalLockTime(uint256 newMinimalLockTime) external onlyOwner {\\n        uint256 oldMinimalLockTime = minimalLockTime;\\n        minimalLockTime = newMinimalLockTime;\\n        emit OnMinimalLockTimeChange(oldMinimalLockTime, newMinimalLockTime);\\n    }\\n\\n    function website() external pure returns (string memory) {\\n        return \\\"https://cryptexlock.me\\\";\\n    }\\n\\n    function _proceedLock(\\n        address token,\\n        address withdrawer,\\n        uint256 amountToLock,\\n        uint256 unlockTime,\\n        uint256 crxToLock,\\n        bool needToCheck\\n    ) internal virtual returns (uint256 lockId);\\n\\n    function _getLockAmounts(\\n        address token,\\n        uint256 amount,\\n        uint256 unlockTime,\\n        uint8 feePaymentMode,\\n        address referrer\\n    ) private returns (uint256 amountToLock, uint256 crxToLock) {\\n        (\\n            uint256 ethFee,\\n            uint256 systemTokenFee,\\n            uint256 tokenFee,\\n            uint256 crxLockAmount,\\n            uint256 refPercentScaled\\n        ) = feesCalculator.calculateFees(\\n                token,\\n                amount,\\n                unlockTime,\\n                feePaymentMode,\\n                referrer,\\n                msg.sender\\n            );\\n        require(tokenFee <= amount.div(100), \\\"TOKEN FEE EXCEEDS 1%\\\");\\n        //safeguard for token fee\\n        _transferFees(\\n            token,\\n            ethFee,\\n            systemTokenFee,\\n            tokenFee,\\n            crxLockAmount,\\n            referrer,\\n            refPercentScaled\\n        );\\n        if (msg.value > ethFee) {\\n            // transfer excess back\\n            _transferBnb(msg.sender, msg.value.sub(ethFee));\\n        }\\n\\n        return (amount.sub(tokenFee), crxLockAmount);\\n    }\\n\\n    function _getIncreaseLockAmounts(\\n        address token,\\n        uint256 amount,\\n        uint256 unlockTime,\\n        uint8 feePaymentMode\\n    ) internal returns (uint256 actualIncrementAmount, uint256 crxToLock) {\\n        (\\n            uint256 ethFee,\\n            uint256 systemTokenFee,\\n            uint256 tokenFee,\\n            uint256 crxLockAmount\\n        ) = feesCalculator.calculateIncreaseAmountFees(\\n                token,\\n                amount,\\n                unlockTime,\\n                feePaymentMode,\\n                msg.sender\\n            );\\n        require(tokenFee <= amount.div(100), \\\"TOKEN FEE EXCEEDS 1%\\\");\\n        //safeguard for token fee\\n        _transferFees(\\n            token,\\n            ethFee,\\n            systemTokenFee,\\n            tokenFee,\\n            crxLockAmount,\\n            address(0),\\n            0\\n        );\\n        if (msg.value > ethFee) {\\n            // transfer excess back\\n            _transferBnb(msg.sender, msg.value.sub(ethFee));\\n        }\\n\\n        return (amount.sub(tokenFee), crxLockAmount);\\n    }\\n\\n    function _transferFees(\\n        address token,\\n        uint256 ethFee,\\n        uint256 systemTokenFee,\\n        uint256 tokenFee,\\n        uint256 crxLockAmount,\\n        address referrer,\\n        uint256 referralPercentScaled\\n    ) internal {\\n        address _feeReceiver = feeReceiver;\\n        IERC20 _feeToken = feeToken;\\n        if (ethFee > 0) {\\n            require(msg.value >= ethFee, \\\"ETH FEES NOT MET\\\");\\n            if (referrer != address(0) && referralPercentScaled > 0) {\\n                uint256 referralFee = ethFee.mul(referralPercentScaled).div(\\n                    1e4\\n                );\\n                _transferBnb(referrer, referralFee);\\n                _transferBnb(_feeReceiver, ethFee.sub(referralFee));\\n            } else {\\n                _transferBnb(_feeReceiver, ethFee);\\n            }\\n        }\\n        if (systemTokenFee > 0) {\\n            require(\\n                address(_feeToken) != address(0),\\n                \\\"TOKEN FEE TYPE NOT SUPPORTED\\\"\\n            );\\n            require(\\n                _feeToken.allowance(msg.sender, address(this)) >=\\n                    systemTokenFee,\\n                \\\"TOKEN FEE NOT MET\\\"\\n            );\\n            if (referrer != address(0) && referralPercentScaled > 0) {\\n                uint256 referralFee = systemTokenFee\\n                    .mul(referralPercentScaled)\\n                    .div(1e4);\\n                _feeToken.safeTransferFrom(msg.sender, referrer, referralFee);\\n                _feeToken.safeTransferFrom(\\n                    msg.sender,\\n                    _feeReceiver,\\n                    systemTokenFee.sub(referralFee)\\n                );\\n            } else {\\n                _feeToken.safeTransferFrom(\\n                    msg.sender,\\n                    _feeReceiver,\\n                    systemTokenFee\\n                );\\n            }\\n        }\\n        if (tokenFee > 0) {\\n            require(\\n                IERC20(token).allowance(msg.sender, address(this)) >= tokenFee,\\n                \\\"LP TOKEN FEE NOT MET\\\"\\n            );\\n            IERC20(token).safeTransferFrom(msg.sender, _feeReceiver, tokenFee);\\n        }\\n        if (crxLockAmount > 0) {\\n            require(\\n                address(_feeToken) != address(0),\\n                \\\"TOKEN FEE TYPE NOT SUPPORTED\\\"\\n            );\\n            _feeToken.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                crxLockAmount\\n            );\\n        }\\n    }\\n\\n    function _transferBnb(address recipient, uint256 amount) private {\\n        (bool res, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(res, \\\"BNB TRANSFER FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"supportedFactories\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_feesCalculator\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feesReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lastFeeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeReceiver\",\"type\":\"address\"}],\"name\":\"OnFeeReceiverUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"OnFeeTokenUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lastFeesCalculator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeesCalculator\",\"type\":\"address\"}],\"name\":\"OnFeesCalculatorUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnLockAmountIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newUnlockTime\",\"type\":\"uint256\"}],\"name\":\"OnLockDurationIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"migrator\",\"type\":\"address\"}],\"name\":\"OnLockMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OnLockOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnLockWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimalLockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimalLockTime\",\"type\":\"uint256\"}],\"name\":\"OnMinimalLockTimeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"OnTokenLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"OnTokenUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newUnlockTime\",\"type\":\"uint256\"}],\"name\":\"extendLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCalculator\",\"outputs\":[{\"internalType\":\"contract IFeesCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"feePaymentMode\",\"type\":\"uint8\"}],\"name\":\"increaseLockAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFactorySupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"feePaymentMode\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"lockTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"migratorContract\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimalLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"recoverLockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"}],\"name\":\"setFeeTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeesCalculator\",\"type\":\"address\"}],\"name\":\"setFeesCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsFactorySupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMigrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimalLockTime\",\"type\":\"uint256\"}],\"name\":\"setMinimalLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLocks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedCrx\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"userLockAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userLocksLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"percents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unlockTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"feePaymentMode\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"vestTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"website\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPartially\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CryptExLpTokenLockerV4", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000800000000000000000000000002a11357abfeb58279e23651b9924b0cc85ca65c8000000000000000000000000e92651c0a980f60a7f352a4cbb06e8a429876d2400000000000000000000000097a30c692ece9c317235d48287d23d358170fc400000000000000000000000000000000000000000000000000000000000000003000000000000000000000000bcfccbde45ce874adcb698cc183debcf17952812000000000000000000000000ca143ce32fe78f1f7019d7d551a6402fc5350c730000000000000000000000000841bd0b734e4f5853f0dd8d7ea041c241fb0da6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}