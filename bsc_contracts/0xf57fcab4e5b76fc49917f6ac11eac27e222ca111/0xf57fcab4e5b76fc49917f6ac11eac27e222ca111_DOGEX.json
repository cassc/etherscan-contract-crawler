{"SourceCode": "/*\r\n                                 ,\u2553\u2584\u2584#\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2584\u2584\u2553,\r\n                            ,\u2584\u2592\u2593\u2580\u2559\u0393              ^\u2559\u2580\u2588\u2592\u2584\u2556\r\n                         \u2584\u2593\u2580\u2559                          \u2559\u2580\u2593\u2584\r\n                      \u2554\u2593\u2580\u0393      \u00b5\u2550\u2518\u0393\u0393\u0393\u00ac       \u00ac\u0393\"\"\u2248\u2584      ^\u2580\u2593\u2584\r\n                    \u2584\u2593\u2580     \u2553\u2534\u0393    ,\u2553\u00ab\u2550\u2248\u207f\u2500\u2500*\u2248\u2550w\u2556,    \u2514\u00b2\u2566     \u2559\u2593\u2592\r\n                  \u2584\u2593\u2580    \u2553\u2518\u00ac  a\u2534\u2590\u2584\u00e6M\u03a6\u0393\u0393\u0393\u0393\u0393\u0393\u0393\u0393\u0393\u0393\u03c4\u00a5w\u2584\u03a3*w,  \"\u2584    \u2559\u2593\u2584\r\n                 \u2593\u2580    \u2553\u2580 ,\u00aa\u2584#\u03a6\u2580\\         ''       \u2584\u2593\u2580W\u2584*\u2565 \u2559\u2584    \u2580\u2593\u2310\r\n               \u2552\u2593\u2580    # \u2584\u2593#\u2593\u2580     `, ,\u00b5\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u00b5 '\u2584\u2580\u2591\u2591^ \u2591\u0393\u2593\u2593\u00bc \u2580    \u2559\u2593\u2584\r\n              \u2552\u2593\u0393    \u2593\u2584\u2593\u2588\u0393']      \u2591\u2320\u2321\u0393\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2321\u2591\u2591    ]\u2591\u2593 \u2580\u2593\u2584\u2580    \u2514\u2593\u2584\r\n              \u2593\u258c    \u256b\u2593\u2593\u0393 ' ] ,  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2265 \u2591\u2591\u2593'  \u2580\u2593\u2593    \u2559\u2593\u2310\r\n             \u256b\u2593   \u00c6^\u2593\u2593      \u258c\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591j\u2593    \u2580\u2593\"W   \u2580\u2593\r\n             \u2593\u0393  \u258c j\u2593      \u2553\u258c\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u0393\u2580\u2310  ' \u2593\u0393 \u255f   \u2593\u2310\r\n            \u2590\u2593   \u255f \u2590\u258c    '\u2584\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591 `\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\"`\"\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u255a    ^\u258c \u2560   \u2593\u258c\r\n            \u2590\u2593   \u2590 \u2590\u2229    \u2593\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591;\u2264\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591;\u2264\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591,\u2560\u2229  j\u258c \u258c   \u2593\u258c\r\n            \u2590\u2593   j\u2310 \u2593   \u2590\u258c\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u256b\u2593,\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u00bc\u2593\u2593\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2590\u258c  \u256b\u2310 \u258c   \u2593\u258c\r\n             \u2593\u2229   \u0398 \u2593\u258c  \u256b\u258c\u2591     \u2591\u2591\u2320\u2580\u2580\u2591\u2591\u2591\u2591\u2591\"\u2591\u2591\u2591\u2591\u2591\u2591\u2321\u2591\u2591\u2591    \u2514\u2591\u2590\u258c ]\u2593\u2591\u2584    \u2593\u0393\r\n             \u2593\u258c     ^\u2593\u2584  \u2593\u00b5\u2591            \u2593\u2593\u2593\u2593\u2593\u2229           ;\u2553\u2593'.\u2593\u0393     \u255f\u2593\r\n             \u2514\u2593\u00b5      \u2593\u2584, \u2580\u2584\u2591         \u2553,,\u2593\u2593\u2593\u2553,\u2584        .\u2591\u2584\u2580 \u2584\u2593\u0393      \u2593\u0393\r\n              \u2590\u2593       \u2580\u2593\u2580\u2588\u2593\u2593\u2584\u2584        *.\u2588\u256b\u2592\u0393*       ,\u2584\u2593\u2593\u2588\u2580\u2593\u2593`      \u2593\u258c\r\n               \u2580\u2593       '\u2580\u2584,  ^\u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u0393' ,\u2584\u2580\u0393       \u2593\u2580\r\n                \u2559\u2593\u2584      \u00c6\u0393\u00ac\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2580\u2580\u0393 \u00bc      \u2553\u2593\u2580\r\n                  \u2580\u2593     \u2591\u2584\u258c \u2559\u2584 \u2580\u00c6\u00c6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00c6\u255d^\u2584\u2580,\u2593\u2584'\u2229    \u2563\u2593`\r\n                   \"\u2593\u2592  \u2584\u2580\u2580\u2593\u2593\u00b5 \u2580           ~.       \u2569 \u2584\u2593\u2593\u2580\u2580\u258c  #\u2593\u0393\r\n                     ^\u2580\u2593\u2584   \u2580\u2593\u2584 \u2580   \u2310\u0393 \u2310\u0393~\u2310\u2500\u2500 ,#\u2592, \u258c \u2563\u2593\u2580   \u2584\u2593\u2580\u0393\r\n                        \u2559\u2580\u2592\u2584 \u2559\u2593\u258c \u2580                \u2593 \u2563\u2593\u258c \u2553\u2592\u2593\u2580\r\n                           \"\u2580\u2593\u2593\u2593\u2584 \u258c              \u2590,\u2590\u2593\u2593\u2593\u2580\u0393\r\n                                \u2559\u2580\u2580\u2580\u2588\u2592\u2592@\u2584\u2584\u2584\u2584@\u2592\u2592\u2588\u2580\u2580\u2580^\r\n\r\n                                                `\"\u207f=\u2265\u2566,\r\n                                                       `\"\u255a\u256c\u2566\u2566\u2556,\r\n                                                             \"\u2559\u256c\u256c\u2592\u2566\u2556             ,,,,,,\r\n         \u2553\u2566\u2566\u2566\u2566\u2553\u2553,       \u2553\u2566\u2566\u2566\u2566\u2566\u2566\u2566\u2566\u2553     ,\u2553\u2566\u2553\u2553\u2553\u2566\u2566\u2553,     \u2566\u2566\u2566\u2566\u2566\u2566\u2566\u2566\u2555   \u2559\u255d\u256c\u256c\u2592\u2566\u2556     \u2553\u2592\u2593\u256c\u256c\u256c\u2593\u2569\r\n                 \u2559\u2592     \u256c\u2310       \u256c\u2310    \u256c\u0393       \u2580                     \u2559\u2592\u256c\u256c\u2593\u2592\u2556\"\u2580\u2592\u256c\u2593\u2569\r\n                  \u256b\u258c    \u256c\u2310       \u256c\u2310    \u256c\u0393   \u2566\u2566\u2566\u2566\u2566     ######            ,\"\u2580\u2593\u2593\u2593\u2593\u2584,\r\n                 ,\u2593\u0393    \u256c\u2310       \u256c\u2310    \u256c\u0393       \u256c\u2310                   \u2553\u2592\u2593\u256c\u2592\u2566 \u2559\u2580\u2593\u2593\u2593\u2593\u2592,\r\n         \u255a\u255d\u255d\u255d\u255d\u255d\u255d\u2568\u2559      \u2559\u2580\u255d\u255d\u255d\u255d\u255d\u255d\u255d\u2580     \u2559\u2580\u255d\u255d\u255d\u255d\u255d\u255d\u255d\u255c     \u255d\u255d\u255d\u255d\u255d\u255d\u255d\u255d\u2569   \u2554\u2592\u256c\u256c\u256c\u256c\u2593\u2569     \u2580\u2593\u2593\u2593\u2593\u2593\u2584\r\n                                                                \u255d\u2580\u2580\u2580\u2580\u2580\u255c          \u2559\u2580\u2580\u2580\u2580\u2580\u03a6\r\n\r\nBuy tax: 14%\r\n5% Buyback\r\n2.5% Marketing\r\n3% LP\r\n2% Reflections\r\n1% Development team\r\n0.5% Project Maintenance\r\n\r\nSell Tax: 17%\r\n6.5% Buyback\r\n3% Marketing\r\n4% LP\r\n2% Reflections\r\n1% Development team\r\n0.5% Project Maintenance\r\n\r\n\u2600\ufe0fGolden Hour & Below Floor Taxes\r\n\r\nHour 1 (& below floor): 40%\r\n20.5% Buyback\r\n7% marketing\r\n5% LP\r\n4% Reflections\r\n3% Development team\r\n0.5% Project Maintenance\r\n\r\nHour 2: 24%\r\n12.5% Buyback\r\n5% Marketing\r\n3% LP\r\n2% Reflections\r\n1% Development team\r\n0.5% Project Maintenance\r\n\r\nSmart contract developed by Alex $Saint\r\nReach on telegram: @Alex_Saint_Dev\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (\r\n      uint8\r\n    );\r\n\r\n  function description()\r\n    external\r\n    view\r\n    returns (\r\n      string memory\r\n    );\r\n\r\n  function version()\r\n    external\r\n    view\r\n    returns (\r\n      uint256\r\n    );\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(\r\n    uint80 _roundId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\nabstract contract IERC20Extented is IERC20 {\r\n    function decimals() external view virtual returns (uint8);\r\n    function name() external view virtual returns (string memory);\r\n    function symbol() external view virtual returns (string memory);\r\n}\r\n\r\ncontract DOGEX is Context, IERC20, IERC20Extented, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = \"Project DogeX\";\r\n    string private constant _symbol = \"$DOGEX\";\r\n    uint8 private constant _decimals = 9;\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => uint256) private sellcooldown;\r\n    mapping(address => uint256) private _sellTotal;\r\n    mapping(address => uint256) private _firstSell;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isContractWallet; // exclude contract wallets maxWalletAmount\r\n    mapping(address => bool) private _isExchange; // used for whitelisting exchange hot wallets\r\n    mapping(address => bool) private _isBridge; //used for whitelisting bridges\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 1000000000000000 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    uint256 public _priceImpact = 2;\r\n    uint256 private previousClose;\r\n    uint256 private _firstBlock;\r\n    uint256 private _botBlocks;\r\n    uint256 public _maxWalletAmount;\r\n    uint256 private _maxSellAmountBNB = 20000000000000000000; // 20 BNB\r\n    uint256 private _minBuyBNB = 10000000000000000; // 0.01 BNB\r\n    uint256 private _minSellBNB = 10000000000000000; // 0.01 BNB\r\n    uint256 private _taxFreeBlocks = 3600; // 1 hour\r\n    uint256 private _cooldownBlocks = 3600; // 1 hour\r\n    uint256 private _taxFreeWindowEnd; // block.timestamp + _taxFreeBlocks\r\n    uint256 public _goldenHourStartBlock = 0;\r\n    bool public _goldenHourStarted = false;\r\n    uint256 private _slideEndBlock = 0;\r\n    bool public _recovered = true;\r\n    uint256 private _threshold = 10;\r\n    uint256 private _floorPercent;\r\n    uint256 private _ath = 0;\r\n    \r\n    uint256 public _floorBuybackFee = 21;\r\n    uint256 public _floorMarketingFee = 7;\r\n    uint256 public _floorLiquidityFee = 5;\r\n    uint256 public _floorReflectionFee = 4;\r\n    uint256 public _floorDevFee = 3;\r\n\r\n    uint256 public _slideBuybackFee = 13;\r\n    uint256 public _slideMarketingFee = 5;\r\n    uint256 public _slideLiquidityFee = 3;\r\n    uint256 public _slideReflectionFee = 2;\r\n    uint256 public _slideDevFee = 1;\r\n\r\n    //  buy fees\r\n    uint256 public _buyBuybackFee = 5;\r\n    uint256 private _previousBuyBuybackFee = _buyBuybackFee;\r\n    uint256 public _buyMarketingFee = 3;\r\n    uint256 private _previousBuyMarketingFee = _buyMarketingFee;\r\n    uint256 public _buyReflectionFee = 2;\r\n    uint256 private _previousBuyReflectionFee = _buyReflectionFee;\r\n    uint256 public _buyLiquidityFee = 3;\r\n    uint256 private _previousBuyLiquidityFee = _buyLiquidityFee;\r\n    uint256 public _buyDevFee = 1;\r\n    uint256 private _previousBuyDevFee = _buyDevFee;\r\n    \r\n    // sell fees\r\n    uint256 public _sellBuybackFee = 7;\r\n    uint256 private _previousSellBuybackFee = _sellBuybackFee;\r\n    uint256 public _sellMarketingFee = 3;\r\n    uint256 private _previousSellMarketingFee = _sellMarketingFee;\r\n    uint256 public _sellReflectionFee = 2;\r\n    uint256 private _previousSellReflectionFee = _sellReflectionFee;\r\n    uint256 public _sellLiquidityFee = 4;\r\n    uint256 private _previousSellLiquidityFee = _sellLiquidityFee;\r\n    uint256 public _sellDevFee = 1;\r\n    uint256 private _previousSellDevFee = _sellDevFee;\r\n  \r\n    struct DynamicTax {\r\n        uint256 buyBuybackFee;\r\n        uint256 buyMarketingFee;\r\n        uint256 buyReflectionFee;\r\n        uint256 buyLiquidityFee;\r\n        uint256 buyDevFee;\r\n        \r\n        uint256 sellBuybackFee;\r\n        uint256 sellMarketingFee;\r\n        uint256 sellReflectionFee;\r\n        uint256 sellLiquidityFee;\r\n        uint256 sellDevFee;\r\n    }\r\n    \r\n    uint256 constant private _projectMaintainencePercent = 5;\r\n    uint256 private _devPercent = 10;\r\n    uint256 private _marketingPercent = 25;\r\n    uint256 private _buybackPercent = 60;\r\n\r\n    struct BuyBreakdown {\r\n        uint256 tTransferAmount;\r\n        uint256 tBuyback;\r\n        uint256 tMarketing;\r\n        uint256 tReflection;\r\n        uint256 tLiquidity;\r\n        uint256 tDev;\r\n    }\r\n\r\n    struct SellBreakdown {\r\n        uint256 tTransferAmount;\r\n        uint256 tBuyback;\r\n        uint256 tMarketing;\r\n        uint256 tReflection;\r\n        uint256 tLiquidity;\r\n        uint256 tDev;\r\n    }\r\n    \r\n    struct FinalFees {\r\n        uint256 tTransferAmount;\r\n        uint256 tBuyback;\r\n        uint256 tMarketing;\r\n        uint256 tReflection;\r\n        uint256 tLiquidity;\r\n        uint256 tDev;\r\n        uint256 rReflection;\r\n        uint256 rTransferAmount;\r\n        uint256 rAmount;\r\n    }\r\n\r\n    mapping(address => bool) private bots;\r\n    address payable private _marketingAddress = payable(0xA5347334AF09Bbc6C2456AB435F54ef8189FA709);\r\n    address payable private _buybackAddress = payable(0x64Ce548B7fe68E7e23892F1f8Ff600595D74484e);\r\n    address payable constant private _projectMaintainence = payable(0xe01F2d85a7f191aCfBd4807c69CfdcE5034f8D28);\r\n    address payable private _developmentAddress = payable(0x4765a8F2402E4769Adfa7B3E54bb30f5dd7702FD);\r\n    address payable constant private _burnAddress = payable(0x000000000000000000000000000000000000dEaD);\r\n    address private presaleRouter;\r\n    address private presaleAddress;\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    uint256 private _maxTxAmount;\r\n\r\n    bool private tradingOpen = false;\r\n    bool private inSwap = false;\r\n    bool private presale = true;\r\n    bool private pairSwapped = false;\r\n    bool private _sellCoolDownEnabled = true;\r\n    bool private _dailyMaxEnabled = true;\r\n\r\n    event EndedPresale(bool presale);\r\n    event UpdatedAllowableDip(uint256 hundredMinusDipPercent);\r\n    event UpdatedHighLowWindows(uint256 GTblock, uint256 LTblock, uint256 blockWindow);\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    event SellOnlyUpdated(bool sellOnly);\r\n    event PercentsUpdated(uint256 _marketingPercent, uint256 _buybackPercent, uint256 _devPercent);\r\n    event FeesUpdated(uint256 _buyBuybackFee, uint256 _buyMarketingFee, uint256 _buyLiquidityFee, uint256 _buyReflectionFee, uint256 _buyDevFee, uint256 _sellBuyBackFee, uint256 _sellMarketingFee, uint256 _sellLiquidityFee, uint256 _sellReflectionFee, uint256 _sellDevFee);\r\n    event PriceImpactUpdated(uint256 _priceImpact);\r\n\r\n    AggregatorV3Interface internal priceFeed;\r\n    address public _oraclePriceFeed = 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE;//rinkeby 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e;// bnb testnet 0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526;// bnb pricefeed 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE;\r\n    bool private priceOracleEnabled = true;\r\n    int private manualETHvalue = 3000 * 10**8;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    constructor() {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);//ropstenn 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //bsc test 0xD99D1c33F9fC3444f8101754aBC46c52416550D1);//bsc main net 0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);\r\n\r\n        priceFeed = AggregatorV3Interface(_oraclePriceFeed);\r\n\r\n        previousClose = 0;\r\n\r\n        _maxTxAmount = _tTotal; // start off transaction limit at 100% of total supply\r\n        _maxWalletAmount = _tTotal.div(1); // 100%\r\n\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_marketingAddress] = true;\r\n        _isExcludedFromFee[_buybackAddress] = true;\r\n        _isContractWallet[_buybackAddress] = true;\r\n        _isContractWallet[_marketingAddress] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() override external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() override external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() override external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) private view returns (uint256) {\r\n        require(rAmount <= _rTotal,\"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (_buyMarketingFee == 0 && _buyBuybackFee == 0 && _buyReflectionFee == 0 && _buyLiquidityFee == 0 && _buyDevFee == 0 && _sellMarketingFee == 0 && _sellBuybackFee == 0 && _sellReflectionFee == 0 && _sellLiquidityFee == 0 && _sellDevFee == 0) return;\r\n        _previousBuyMarketingFee = _buyMarketingFee;\r\n        _previousBuyBuybackFee = _buyBuybackFee;\r\n        _previousBuyReflectionFee = _buyReflectionFee;\r\n        _previousBuyLiquidityFee = _buyLiquidityFee;\r\n        _previousBuyDevFee = _buyDevFee;\r\n\r\n        _previousSellMarketingFee = _sellMarketingFee;\r\n        _previousSellBuybackFee = _sellBuybackFee;\r\n        _previousSellReflectionFee = _sellReflectionFee;\r\n        _previousSellLiquidityFee = _sellLiquidityFee;\r\n        _previousSellDevFee = _sellDevFee;\r\n\r\n        _buyMarketingFee = 0;\r\n        _buyBuybackFee = 0;\r\n        _buyReflectionFee = 0;\r\n        _buyLiquidityFee = 0;\r\n        _buyDevFee = 0;\r\n\r\n        _sellMarketingFee = 0;\r\n        _sellBuybackFee = 0;\r\n        _sellReflectionFee = 0;\r\n        _sellLiquidityFee = 0;\r\n        _sellDevFee = 0;\r\n    }\r\n\r\n    function setBotFee() private {\r\n        _previousBuyMarketingFee = _buyMarketingFee;\r\n        _previousBuyBuybackFee = _buyBuybackFee;\r\n        _previousBuyReflectionFee = _buyReflectionFee;\r\n        _previousBuyDevFee = _buyDevFee;\r\n\r\n        _previousSellMarketingFee = _sellMarketingFee;\r\n        _previousSellBuybackFee = _sellBuybackFee;\r\n        _previousSellReflectionFee = _sellReflectionFee;\r\n        _previousSellDevFee = _sellDevFee;\r\n\r\n        _buyMarketingFee = 45;\r\n        _buyBuybackFee = 45;\r\n        _buyReflectionFee = 0;\r\n        _buyDevFee = 0;\r\n\r\n        _sellMarketingFee = 45;\r\n        _sellBuybackFee = 45;\r\n        _sellReflectionFee = 0;\r\n        _sellDevFee = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        _buyMarketingFee = _previousBuyMarketingFee;\r\n        _buyBuybackFee = _previousBuyBuybackFee;\r\n        _buyReflectionFee = _previousBuyReflectionFee;\r\n        _buyLiquidityFee = _previousBuyLiquidityFee;\r\n        _buyDevFee = _previousBuyDevFee;\r\n\r\n        _sellMarketingFee = _previousSellMarketingFee;\r\n        _sellBuybackFee = _previousSellBuybackFee;\r\n        _sellReflectionFee = _previousSellReflectionFee;\r\n        _sellLiquidityFee = _previousSellLiquidityFee;\r\n        _sellDevFee = _previousSellDevFee;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * Returns the latest price\r\n     */\r\n    function getLatestPrice() external view returns (uint80, int, uint, uint,  uint80) {\r\n        (\r\n            uint80 roundID,\r\n            int price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint80 answeredInRound\r\n        ) = priceFeed.latestRoundData();\r\n\r\n        return (roundID, price, startedAt, timeStamp,  answeredInRound);\r\n    }\r\n\r\n    // calculate price based on pair reserves\r\n    function getTokenPrice() external view returns(uint256) {\r\n        IERC20Extented token0 = IERC20Extented(IUniswapV2Pair(uniswapV2Pair).token0());//dogex\r\n        IERC20Extented token1 = IERC20Extented(IUniswapV2Pair(uniswapV2Pair).token1());//bnb\r\n        (uint112 Res0, uint112 Res1,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n        if(pairSwapped) {\r\n            token0 = IERC20Extented(IUniswapV2Pair(uniswapV2Pair).token1());//dogex\r\n            token1 = IERC20Extented(IUniswapV2Pair(uniswapV2Pair).token0());//bnb\r\n            (Res1, Res0,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n        }\r\n        int latestETHprice = manualETHvalue; // manualETHvalue used if oracle crashes\r\n        if(priceOracleEnabled) {\r\n            (,latestETHprice,,,) = this.getLatestPrice();\r\n        }\r\n        uint256 res1 = (uint256(Res1)*uint256(latestETHprice)*(10**uint256(token0.decimals())))/uint256(token1.decimals());\r\n\r\n        return(res1/uint256(Res0)); // return amount of token1 needed to buy token0\r\n    }\r\n\r\n    // calculate price based on pair reserves\r\n    function getTokenPriceBNB(uint256 amount) external view returns(uint256) {\r\n        IERC20Extented token0 = IERC20Extented(IUniswapV2Pair(uniswapV2Pair).token0());//dogex\r\n        IERC20Extented token1 = IERC20Extented(IUniswapV2Pair(uniswapV2Pair).token1());//bnb\r\n        (uint112 Res0, uint112 Res1,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n        if(pairSwapped) {\r\n            token0 = IERC20Extented(IUniswapV2Pair(uniswapV2Pair).token1());//dogex\r\n            token1 = IERC20Extented(IUniswapV2Pair(uniswapV2Pair).token0());//bnb\r\n            (Res1, Res0,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n        }\r\n\r\n        uint res1 = Res1*(10**token0.decimals());\r\n        return((amount*res1)/(Res0*(10**token0.decimals()))); // return amount of token1 needed to buy token0\r\n    }\r\n    \r\n    function updateFee() private returns(DynamicTax memory) {\r\n        \r\n        DynamicTax memory currentTax;\r\n        \r\n        currentTax.buyBuybackFee = _buyBuybackFee;\r\n        currentTax.buyMarketingFee = _buyMarketingFee;\r\n        currentTax.buyLiquidityFee = _buyLiquidityFee;\r\n        currentTax.buyReflectionFee = _buyReflectionFee;\r\n        currentTax.buyDevFee = _buyDevFee;\r\n        \r\n        currentTax.sellBuybackFee = _sellBuybackFee;\r\n        currentTax.sellMarketingFee = _sellMarketingFee;\r\n        currentTax.sellLiquidityFee = _sellLiquidityFee;\r\n        currentTax.sellReflectionFee = _sellReflectionFee;\r\n        currentTax.sellDevFee = _sellDevFee;\r\n        \r\n        uint256 currentPrice = this.getTokenPrice();\r\n\r\n        if(block.timestamp >= _goldenHourStartBlock && block.timestamp <= _taxFreeWindowEnd) {\r\n            currentTax.buyBuybackFee = 0;\r\n            currentTax.buyMarketingFee = 0;\r\n            currentTax.buyLiquidityFee = 0;\r\n            currentTax.buyReflectionFee = 0;\r\n            currentTax.buyDevFee = 0;\r\n            \r\n            currentTax.sellBuybackFee = _floorBuybackFee;\r\n            currentTax.sellMarketingFee = _floorMarketingFee;\r\n            currentTax.sellLiquidityFee = _floorLiquidityFee;\r\n            currentTax.sellReflectionFee = _floorReflectionFee;\r\n            currentTax.sellDevFee = _floorDevFee;\r\n        }\r\n        else if (block.timestamp > _taxFreeWindowEnd && block.timestamp <= _slideEndBlock) {\r\n            currentTax.buyBuybackFee = _buyBuybackFee;\r\n            currentTax.buyMarketingFee = _buyMarketingFee;\r\n            currentTax.buyLiquidityFee = _buyLiquidityFee;\r\n            currentTax.buyReflectionFee = _buyReflectionFee;\r\n            currentTax.buyDevFee = _buyDevFee;\r\n            \r\n            currentTax.sellBuybackFee = _slideBuybackFee;\r\n            currentTax.sellMarketingFee = _slideMarketingFee;\r\n            currentTax.sellLiquidityFee = _slideLiquidityFee;\r\n            currentTax.sellReflectionFee = _slideReflectionFee;\r\n            currentTax.sellDevFee = _slideDevFee;\r\n        }\r\n        if (block.timestamp > _taxFreeWindowEnd && _goldenHourStarted) {\r\n            _goldenHourStarted = false;\r\n        }\r\n        if (currentPrice > previousClose.mul(uint256(100).add(_threshold)).div(100) && !_recovered && !_goldenHourStarted) {\r\n            _recovered = true;\r\n        }\r\n        if (currentPrice <= previousClose) {\r\n            currentTax.buyBuybackFee = _buyBuybackFee;\r\n            currentTax.buyMarketingFee = _buyMarketingFee;\r\n            currentTax.buyLiquidityFee = _buyLiquidityFee;\r\n            currentTax.buyReflectionFee = _buyReflectionFee;\r\n            currentTax.buyDevFee = _buyDevFee;\r\n        \r\n            currentTax.sellBuybackFee = _floorBuybackFee;\r\n            currentTax.sellMarketingFee = _floorMarketingFee;\r\n            currentTax.sellLiquidityFee = _floorLiquidityFee;\r\n            currentTax.sellReflectionFee = _floorReflectionFee;\r\n            currentTax.sellDevFee = _floorDevFee;\r\n            \r\n            if(block.timestamp >= _goldenHourStartBlock && block.timestamp <= _taxFreeWindowEnd) {\r\n                currentTax.buyBuybackFee = 0;\r\n                currentTax.buyMarketingFee = 0;\r\n                currentTax.buyLiquidityFee = 0;\r\n                currentTax.buyReflectionFee = 0;\r\n                currentTax.buyDevFee = 0;\r\n                \r\n                currentTax.sellBuybackFee = _floorBuybackFee;\r\n                currentTax.sellMarketingFee = _floorMarketingFee;\r\n                currentTax.sellLiquidityFee = _floorLiquidityFee;\r\n                currentTax.sellReflectionFee = _floorReflectionFee;\r\n                currentTax.sellDevFee = _floorDevFee;\r\n            }\r\n            if(!_goldenHourStarted && _recovered) {\r\n                startGoldenHour();\r\n                currentTax.buyBuybackFee = 0;\r\n                currentTax.buyMarketingFee = 0;\r\n                currentTax.buyLiquidityFee = 0;\r\n                currentTax.buyReflectionFee = 0;\r\n                currentTax.buyDevFee = 0;\r\n                \r\n                currentTax.sellBuybackFee = _floorBuybackFee;\r\n                currentTax.sellMarketingFee = _floorMarketingFee;\r\n                currentTax.sellLiquidityFee = _floorLiquidityFee;\r\n                currentTax.sellReflectionFee = _floorReflectionFee;\r\n                currentTax.sellDevFee = _floorDevFee;\r\n                _recovered = false;\r\n            }\r\n        }\r\n        if (currentPrice > _ath) {\r\n            _ath = currentPrice;\r\n        }\r\n        \r\n        return currentTax;\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        bool takeFee = true;\r\n        \r\n        DynamicTax memory currentTax;\r\n\r\n        if (from != owner() && to != owner() && !presale && !_isContractWallet[from] && !_isContractWallet[to] && from != address(this) && to != address(this)) {\r\n            require(tradingOpen);\r\n            if (from != presaleRouter && from != presaleAddress) {\r\n                require(amount <= _maxTxAmount);\r\n            }\r\n            if ((from == uniswapV2Pair || _isExchange[from]) && to != address(uniswapV2Router) && !_isExchange[to]) {//buys\r\n                if (block.timestamp <= _firstBlock.add(_botBlocks) && from != presaleRouter && from != presaleAddress) {\r\n                    bots[to] = true;\r\n                }\r\n                \r\n                uint256 bnbAmount = this.getTokenPriceBNB(amount);\r\n                \r\n                require(bnbAmount >= _minBuyBNB, \"you must buy at least min BNB worth of token\");\r\n                require(balanceOf(to).add(amount) <= _maxWalletAmount, \"wallet balance after transfer must be less than max wallet amount\");\r\n                \r\n                currentTax = updateFee();\r\n                \r\n            }\r\n            \r\n            if (!inSwap && from != uniswapV2Pair && !_isExchange[from]) { //sells, transfers\r\n                require(!bots[from] && !bots[to]);\r\n                \r\n                if (!_isBridge[from] && !_isBridge[to]) {\r\n                    if ((to == uniswapV2Pair || _isExchange[to]) && _sellCoolDownEnabled) {\r\n                        require(sellcooldown[from] < block.timestamp);\r\n                        sellcooldown[from] = block.timestamp.add(_cooldownBlocks);\r\n                    }\r\n                    \r\n                    uint256 bnbAmount = this.getTokenPriceBNB(amount);\r\n                    \r\n                    require(bnbAmount >= _minSellBNB, \"you must buy at least the min BNB worth of token\");\r\n                    \r\n                    if(_dailyMaxEnabled) {\r\n                        if(block.timestamp.sub(_firstSell[from]) > (1 days)) {\r\n                            _firstSell[from] = block.timestamp;\r\n                            _sellTotal[from] = 0;\r\n                        }\r\n                        require(_sellTotal[from].add(bnbAmount) <= _maxSellAmountBNB, \"you cannot sell more than the max BNB amount per day\");\r\n                        _sellTotal[from] += bnbAmount;\r\n                    }\r\n                    else {\r\n                        require(bnbAmount <= _maxSellAmountBNB, 'you cannot sell more than the max BNB amount per transaction');\r\n                    }\r\n                    \r\n                    require(amount <= balanceOf(uniswapV2Pair).mul(_priceImpact).div(100)); // price impact limit\r\n                    \r\n                    if(to != uniswapV2Pair && !_isExchange[to]) {\r\n                        require(balanceOf(to).add(amount) <= _maxWalletAmount, \"wallet balance after transfer must be less than max wallet amount\");\r\n                    }\r\n\r\n                    currentTax = updateFee();\r\n                    \r\n                    uint256 contractTokenBalance = balanceOf(address(this));\r\n                    if (contractTokenBalance > 0) {\r\n\r\n                        uint256 autoLPamount = _sellLiquidityFee.mul(contractTokenBalance).div(_sellBuybackFee.add(_sellMarketingFee).add(_sellLiquidityFee).add(_sellDevFee));\r\n                        swapAndLiquify(autoLPamount);\r\n                    \r\n                        swapTokensForEth(contractTokenBalance.sub(autoLPamount));\r\n                    }\r\n                    uint256 contractETHBalance = address(this).balance;\r\n                    if (contractETHBalance > 0) {\r\n                        sendETHToFee(address(this).balance);\r\n                    }\r\n                    \r\n                }\r\n            }\r\n        }\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || presale || _isBridge[to] || _isBridge[from]) {\r\n            restoreAllFee();\r\n            takeFee = false;\r\n        }\r\n\r\n        if (bots[from] || bots[to]) {\r\n            restoreAllFee();\r\n            setBotFee();\r\n            takeFee = true;\r\n        }\r\n\r\n        if (presale) {\r\n            require(from == owner() || from == presaleRouter || from == presaleAddress);\r\n        }\r\n        \r\n        _tokenTransfer(from, to, amount, takeFee, currentTax);\r\n        restoreAllFee();\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n    \r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n              address(this),\r\n              tokenAmount,\r\n              0, // slippage is unavoidable\r\n              0, // slippage is unavoidable\r\n              owner(),\r\n              block.timestamp\r\n          );\r\n    }\r\n  \r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        // split the contract balance into halves\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        // capture the contract's current BNB balance.\r\n        // this is so that we can capture exactly the amount of BNB that the\r\n        // swap creates, and not make the liquidity event include any BNB that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for BNB\r\n        swapTokensForEth(half); // <- this breaks the BNB -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much BNB did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to pancakeswap\r\n        addLiquidity(otherHalf, newBalance);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _marketingAddress.transfer(amount.mul(_marketingPercent).div(100));\r\n        _buybackAddress.transfer(amount.mul(_buybackPercent).div(100));\r\n        _developmentAddress.transfer(amount.mul(_devPercent).div(100));\r\n        _projectMaintainence.transfer(amount.mul(_projectMaintainencePercent).div(100));\r\n    }\r\n\r\n    function openTrading(uint256 botBlocks, uint256 floorPercent) private {\r\n        uint256 currentPrice = this.getTokenPrice();\r\n        _floorPercent = floorPercent;\r\n        _ath = currentPrice.mul(_floorPercent).div(100);\r\n        previousClose = _ath;\r\n        _firstBlock = block.timestamp;\r\n        _botBlocks = botBlocks;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function manualswap() external {\r\n        require(_msgSender() == _marketingAddress);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n\r\n    function manualsend() external {\r\n        require(_msgSender() == _marketingAddress);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee, DynamicTax memory currentTax) private {\r\n        if (!takeFee) { \r\n                currentTax.buyBuybackFee = 0;\r\n                currentTax.buyMarketingFee = 0;\r\n                currentTax.buyLiquidityFee = 0;\r\n                currentTax.buyReflectionFee = 0;\r\n                currentTax.buyDevFee = 0;\r\n                \r\n                currentTax.sellBuybackFee = 0;\r\n                currentTax.sellMarketingFee = 0;\r\n                currentTax.sellLiquidityFee = 0;\r\n                currentTax.sellReflectionFee = 0;\r\n                currentTax.sellDevFee = 0;\r\n        }\r\n        if (sender == uniswapV2Pair || _isExchange[sender]){\r\n            _transferStandardBuy(sender, recipient, amount, currentTax);\r\n        }\r\n        else {\r\n            _transferStandardSell(sender, recipient, amount, currentTax);\r\n        }\r\n    }\r\n\r\n    function _transferStandardBuy(address sender, address recipient, uint256 tAmount, DynamicTax memory currentTax) private {\r\n        FinalFees memory buyFees;\r\n        buyFees = _getValuesBuy(tAmount, currentTax);\r\n        _rOwned[sender] = _rOwned[sender].sub(buyFees.rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(buyFees.rTransferAmount);\r\n        _takeBuyback(buyFees.tBuyback);\r\n        _takeMarketing(buyFees.tMarketing);\r\n        _reflectFee(buyFees.rReflection, buyFees.tReflection);\r\n        _takeLiquidity(buyFees.tLiquidity);\r\n        _takeDev(buyFees.tDev);\r\n        emit Transfer(sender, recipient, buyFees.tTransferAmount);\r\n    }\r\n\r\n    function _transferStandardSell(address sender, address recipient, uint256 tAmount, DynamicTax memory currentTax) private {\r\n        FinalFees memory sellFees;\r\n        sellFees = _getValuesSell(tAmount, currentTax);\r\n        _rOwned[sender] = _rOwned[sender].sub(sellFees.rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(sellFees.rTransferAmount);\r\n        if (recipient == _burnAddress) {\r\n            _tOwned[recipient] = _tOwned[recipient].add(sellFees.tTransferAmount);\r\n        }\r\n        _takeBuyback(sellFees.tBuyback);\r\n        _takeMarketing(sellFees.tMarketing);\r\n        _reflectFee(sellFees.rReflection, sellFees.tReflection);\r\n        _takeLiquidity(sellFees.tLiquidity);\r\n        _takeDev(sellFees.tDev);\r\n        emit Transfer(sender, recipient, sellFees.tTransferAmount);\r\n    }\r\n\r\n    function _reflectFee(uint256 rReflection, uint256 tReflection) private {\r\n        _rTotal = _rTotal.sub(rReflection);\r\n        _tFeeTotal = _tFeeTotal.add(tReflection);\r\n    }\r\n\r\n    function _takeBuyback(uint256 tBuyback) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rBuyback = tBuyback.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rBuyback);\r\n    }\r\n\r\n    function _takeMarketing(uint256 tMarketing) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rMarketing = tMarketing.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rMarketing);\r\n    }\r\n\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n    }\r\n    \r\n    function _takeDev(uint256 tDev) private  {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rDev = tDev.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rDev);\r\n    }\r\n    receive() external payable {}\r\n\r\n    // Sell GetValues\r\n    function _getValuesSell(uint256 tAmount, DynamicTax memory currentTax) private view returns (FinalFees memory) {\r\n        SellBreakdown memory sellFees = _getTValuesSell(tAmount, currentTax.sellBuybackFee, currentTax.sellMarketingFee, currentTax.sellReflectionFee, currentTax.sellLiquidityFee, currentTax.sellDevFee);\r\n        FinalFees memory finalFees;\r\n        uint256 currentRate = _getRate();\r\n        (finalFees.rAmount, finalFees.rTransferAmount, finalFees.rReflection) = _getRValuesSell(tAmount, sellFees.tBuyback, sellFees.tMarketing, sellFees.tReflection, sellFees.tLiquidity, sellFees.tDev, currentRate);\r\n        finalFees.tBuyback = sellFees.tBuyback;\r\n        finalFees.tMarketing = sellFees.tMarketing;\r\n        finalFees.tReflection = sellFees.tReflection;\r\n        finalFees.tLiquidity = sellFees.tLiquidity;\r\n        finalFees.tDev = sellFees.tDev;\r\n        finalFees.tTransferAmount = sellFees.tTransferAmount;\r\n        return (finalFees);\r\n    }\r\n\r\n    function _getTValuesSell(uint256 tAmount, uint256 buybackFee, uint256 marketingFee, uint256 reflectionFee, uint256 liquidityFee, uint256 devFee) private pure returns (SellBreakdown memory) {\r\n        SellBreakdown memory tsellFees;\r\n        tsellFees.tBuyback = tAmount.mul(buybackFee).div(100);\r\n        tsellFees.tMarketing = tAmount.mul(marketingFee).div(100);\r\n        tsellFees.tReflection = tAmount.mul(reflectionFee).div(100);\r\n        tsellFees.tLiquidity = tAmount.mul(liquidityFee).div(100);\r\n        tsellFees.tDev = tAmount.mul(devFee).div(100);\r\n        tsellFees.tTransferAmount = tAmount.sub(tsellFees.tBuyback).sub(tsellFees.tMarketing);\r\n        tsellFees.tTransferAmount -= tsellFees.tReflection;\r\n        tsellFees.tTransferAmount -= tsellFees.tLiquidity;\r\n        tsellFees.tTransferAmount -= tsellFees.tDev;\r\n        return (tsellFees);\r\n    }\r\n\r\n    function _getRValuesSell(uint256 tAmount, uint256 tBuyback, uint256 tMarketing, uint256 tReflection, uint256 tLiquidity, uint256 tDev, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rBuyback = tBuyback.mul(currentRate);\r\n        uint256 rMarketing = tMarketing.mul(currentRate);\r\n        uint256 rReflection = tReflection.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rDev = tDev.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rBuyback).sub(rMarketing).sub(rReflection);\r\n        rTransferAmount -= rLiquidity;\r\n        rTransferAmount -= rDev;\r\n        return (rAmount, rTransferAmount, rReflection);\r\n    }\r\n\r\n    // Buy GetValues\r\n    function _getValuesBuy(uint256 tAmount, DynamicTax memory currentTax) private view returns (FinalFees memory) {\r\n        BuyBreakdown memory buyFees = _getTValuesBuy(tAmount, currentTax.buyBuybackFee, currentTax.buyMarketingFee, currentTax.buyReflectionFee, currentTax.buyLiquidityFee, currentTax.buyDevFee);\r\n        FinalFees memory finalFees;\r\n        uint256 currentRate = _getRate();\r\n        (finalFees.rAmount, finalFees.rTransferAmount, finalFees.rReflection) = _getRValuesBuy(tAmount, buyFees.tBuyback, buyFees.tMarketing, buyFees.tReflection, buyFees.tLiquidity, buyFees.tDev, currentRate);\r\n        finalFees.tBuyback = buyFees.tBuyback;\r\n        finalFees.tMarketing = buyFees.tMarketing;\r\n        finalFees.tReflection = buyFees.tReflection;\r\n        finalFees.tLiquidity = buyFees.tLiquidity;\r\n        finalFees.tDev = buyFees.tDev;\r\n        finalFees.tTransferAmount = buyFees.tTransferAmount;\r\n        return (finalFees);\r\n    }\r\n\r\n    function _getTValuesBuy(uint256 tAmount, uint256 buybackFee, uint256 marketingFee, uint256 reflectionFee, uint256 liquidityFee, uint256 devFee) private pure returns (BuyBreakdown memory) {\r\n        BuyBreakdown memory tbuyFees;\r\n        tbuyFees.tBuyback = tAmount.mul(buybackFee).div(100);\r\n        tbuyFees.tMarketing = tAmount.mul(marketingFee).div(100);\r\n        tbuyFees.tReflection = tAmount.mul(reflectionFee).div(100);\r\n        tbuyFees.tLiquidity = tAmount.mul(liquidityFee).div(100);\r\n        tbuyFees.tDev = tAmount.mul(devFee).div(100);\r\n        tbuyFees.tTransferAmount = tAmount.sub(tbuyFees.tBuyback).sub(tbuyFees.tMarketing);\r\n        tbuyFees.tTransferAmount -= tbuyFees.tReflection;\r\n        tbuyFees.tTransferAmount -= tbuyFees.tLiquidity;\r\n        tbuyFees.tTransferAmount -= tbuyFees.tDev;\r\n        return (tbuyFees);\r\n    }\r\n\r\n    function _getRValuesBuy(uint256 tAmount, uint256 tBuyback, uint256 tMarketing, uint256 tReflection, uint256 tLiquidity, uint256 tDev, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rBuyback = tBuyback.mul(currentRate);\r\n        uint256 rMarketing = tMarketing.mul(currentRate);\r\n        uint256 rReflection = tReflection.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rDev = tDev.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rBuyback).sub(rMarketing).sub(rReflection);\r\n        rTransferAmount -= rLiquidity;\r\n        rTransferAmount -= rDev;\r\n        return (rAmount, rTransferAmount, rReflection);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (_rOwned[_burnAddress] > rSupply || _tOwned[_burnAddress] > tSupply) return (_rTotal, _tTotal);\r\n        rSupply = rSupply.sub(_rOwned[_burnAddress]);\r\n        tSupply = tSupply.sub(_tOwned[_burnAddress]);\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner() {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) external onlyOwner() {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function removeBot(address account) external onlyOwner() {\r\n        bots[account] = false;\r\n    }\r\n\r\n    function addBot(address account) external onlyOwner() {\r\n        bots[account] = true;\r\n    }\r\n    \r\n    function excludeFromContractWallet(address account) public onlyOwner() {\r\n        _isContractWallet[account] = true;\r\n    }\r\n\r\n    function includeInContractWallet(address account) external onlyOwner() {\r\n        _isContractWallet[account] = false;\r\n    }\r\n    \r\n    function includeInExchange(address account) external onlyOwner() {\r\n        _isExchange[account] = true;\r\n    }\r\n    \r\n    function excludeFromExchange(address account) external onlyOwner() {\r\n        _isExchange[account] = false;\r\n    }\r\n\r\n    function includeInBridge(address account) external onlyOwner() {\r\n        _isBridge[account] = true;\r\n    }\r\n    \r\n    function excludeFromBridge(address account) external onlyOwner() {\r\n        _isBridge[account] = false;\r\n    }\r\n    \r\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\r\n        require(maxTxAmount > 0, \"Amount must be greater than 0\");\r\n        require(maxTxAmount <= _tTotal, \"Amount must be less than or equal to totalSupply\");\r\n        _maxTxAmount = maxTxAmount;\r\n        emit MaxTxAmountUpdated(_maxTxAmount);\r\n    }\r\n\r\n    function setMaxWalletAmount(uint256 maxWalletAmount) external onlyOwner() {\r\n        require(maxWalletAmount > 0, \"Amount must be greater than 0\");\r\n        require(maxWalletAmount <= _tTotal, \"Amount must be less than or equal to totalSupply\");\r\n        _maxWalletAmount = maxWalletAmount;\r\n    }\r\n    \r\n    function setPercents(uint256 marketingPercent, uint256 buybackPercent, uint256 devPercent) external onlyOwner() {\r\n        require(marketingPercent.add(buybackPercent).add(devPercent) == 95, \"Sum of percents must equal 95\");\r\n        _marketingPercent = marketingPercent;\r\n        _buybackPercent = buybackPercent;\r\n        _devPercent = devPercent;\r\n        emit PercentsUpdated(_marketingPercent, _buybackPercent, _devPercent);\r\n    }\r\n\r\n    function setTaxes(uint256 buyMarketingFee, uint256 buyBuybackFee, uint256 buyReflectionFee, uint256 buyLiquidityFee, uint256 buyDevFee, uint256 sellMarketingFee, uint256 sellBuybackFee, uint256 sellReflectionFee, uint256 sellLiquidityFee, uint256 sellDevFee) external onlyOwner() {\r\n        uint256 buyTax = buyMarketingFee.add(buyBuybackFee).add(buyReflectionFee);\r\n        buyTax += buyLiquidityFee.add(buyDevFee);\r\n        uint256 sellTax = sellMarketingFee.add(sellBuybackFee).add(sellReflectionFee);\r\n        sellTax += sellLiquidityFee.add(sellDevFee);\r\n        require(buyTax < 50, \"Sum of sell fees must be less than 50\");\r\n        require(sellTax < 50, \"Sum of buy fees must be less than 50\");\r\n        _buyMarketingFee = buyMarketingFee;\r\n        _buyBuybackFee = buyBuybackFee;\r\n        _buyReflectionFee = buyReflectionFee;\r\n        _buyLiquidityFee = buyLiquidityFee;\r\n        _buyDevFee = buyDevFee;\r\n        _sellMarketingFee = sellMarketingFee;\r\n        _sellBuybackFee = sellBuybackFee;\r\n        _sellReflectionFee = sellReflectionFee;\r\n        _sellLiquidityFee = sellLiquidityFee;\r\n        _sellDevFee = sellDevFee;\r\n        \r\n        _previousBuyMarketingFee = _buyMarketingFee;\r\n        _previousBuyBuybackFee = _buyBuybackFee;\r\n        _previousBuyReflectionFee = _buyReflectionFee;\r\n        _previousBuyLiquidityFee = _buyLiquidityFee;\r\n        _previousBuyDevFee = _buyDevFee;\r\n        _previousSellMarketingFee = _sellMarketingFee;\r\n        _previousSellBuybackFee = _sellBuybackFee;\r\n        _previousSellReflectionFee = _sellReflectionFee;\r\n        _previousSellLiquidityFee = _sellLiquidityFee;\r\n        _previousSellDevFee = _sellDevFee;\r\n        \r\n        emit FeesUpdated(_buyBuybackFee, _buyMarketingFee, _buyLiquidityFee, _buyReflectionFee, _buyDevFee, _sellBuybackFee, _sellMarketingFee, _sellLiquidityFee, _sellReflectionFee, _sellDevFee);\r\n    }\r\n\r\n    function setPriceImpact(uint256 priceImpact) external onlyOwner() {\r\n        require(priceImpact <= 100, \"max price impact must be less than or equal to 100\");\r\n        require(priceImpact > 0, \"cant prevent sells, choose value greater than 0\");\r\n        _priceImpact = priceImpact;\r\n        emit PriceImpactUpdated(_priceImpact);\r\n    }\r\n\r\n    function setManualETHvalue(uint256 val) external onlyOwner() {\r\n        manualETHvalue = int(val.mul(10**8));//18));\r\n    }\r\n\r\n    function updateOraclePriceFeed(address feed) external onlyOwner() {\r\n        _oraclePriceFeed = feed;\r\n    }\r\n\r\n    function setPresaleRouterAndAddress(address router, address wallet) external onlyOwner() {\r\n        presaleRouter = router;\r\n        presaleAddress = wallet;\r\n        excludeFromFee(presaleRouter);\r\n        excludeFromFee(presaleAddress);\r\n    }\r\n\r\n    function endPresale(uint256 botBlocks, uint256 floorPercent) external onlyOwner() {\r\n        require(presale == true, \"presale already ended\");\r\n        presale = false;\r\n        openTrading(botBlocks, floorPercent);\r\n        emit EndedPresale(presale);\r\n    }\r\n\r\n    function enablePriceOracle() external onlyOwner() {\r\n        require(priceOracleEnabled == false, \"price oracle already enabled\");\r\n        priceOracleEnabled = true;\r\n    }\r\n\r\n    function disablePriceOracle() external onlyOwner() {\r\n        require(priceOracleEnabled == true, \"price oracle already disabled\");\r\n        priceOracleEnabled = false;\r\n    }\r\n\r\n    function setFloor() external onlyOwner() {\r\n        previousClose = _ath.mul(_floorPercent).div(100);\r\n        _ath = previousClose;\r\n    }\r\n    \r\n    function setFloorPercent(uint256 floorPercent) external onlyOwner() {\r\n        require(floorPercent > 0 && floorPercent <= 100, 'floorPercent needs to be between 0 and 100');\r\n        _floorPercent = floorPercent;\r\n    }\r\n    function updateTaxFreeBlocks(uint256 taxFreeBlocks) external onlyOwner() {\r\n        _taxFreeBlocks = taxFreeBlocks;\r\n    }\r\n\r\n    function updatePairSwapped(bool swapped) external onlyOwner() {\r\n        pairSwapped = swapped;\r\n    }\r\n    \r\n    function updateMinBuySellBNB(uint256 minBuyBNB, uint256 minSellBNB) external onlyOwner() {\r\n        _minBuyBNB = minBuyBNB;\r\n        _minSellBNB = minSellBNB;\r\n    }\r\n    \r\n    function updateMaxSellAmountBNB(uint256 maxSellBNB) external onlyOwner() {\r\n        _maxSellAmountBNB = maxSellBNB;\r\n    }\r\n    \r\n    function startGoldenHour() private {\r\n        _goldenHourStartBlock = block.timestamp;\r\n        _goldenHourStarted = true;\r\n        _taxFreeWindowEnd = block.timestamp.add(_taxFreeBlocks);\r\n        _slideEndBlock = _taxFreeWindowEnd.add(_taxFreeBlocks);\r\n    }\r\n\r\n    function enableSellCoolDown() external onlyOwner() {\r\n        require(!_sellCoolDownEnabled, \"already enabled\");\r\n        _sellCoolDownEnabled = true;\r\n    }\r\n    \r\n    function disableSellCoolDown() external onlyOwner() {\r\n        require(_sellCoolDownEnabled, \"already disabled\");\r\n        _sellCoolDownEnabled = false;\r\n    }\r\n    \r\n    function enableDailyMax() external onlyOwner() {\r\n        require(!_dailyMaxEnabled, 'already enabled');\r\n        _dailyMaxEnabled = true;\r\n    }\r\n    \r\n    function disableDailyMax() external onlyOwner() {\r\n        require(_dailyMaxEnabled, 'already diabled');\r\n        _dailyMaxEnabled = false;\r\n    }\r\n    \r\n    function setFloorFees(uint256 floorMarketingFee, uint256 floorBuybackFee, uint256 floorReflectionFee, uint256 floorLiquidityFee, uint256 floorDevFee) external onlyOwner() {\r\n        require(floorMarketingFee.add(floorBuybackFee).add(floorReflectionFee).add(floorLiquidityFee).add(floorDevFee) < 50, \"sum of fees must be less than 50\");\r\n        _floorMarketingFee = floorMarketingFee;\r\n        _floorBuybackFee = floorBuybackFee;\r\n        _floorReflectionFee = floorReflectionFee;\r\n        _floorLiquidityFee = floorLiquidityFee;\r\n        _floorDevFee = floorDevFee;\r\n    }\r\n    \r\n    function setSlideFees(uint256 slideMarketingFee, uint256 slideBuybackFee, uint256 slideReflectionFee, uint256 slideLiquidityFee, uint256 slideDevFee) external onlyOwner() {\r\n        require(slideMarketingFee.add(slideBuybackFee).add(slideReflectionFee).add(slideLiquidityFee).add(slideDevFee) < 50, \"sum of fees must be less than 50\");\r\n        _slideMarketingFee = slideMarketingFee;\r\n        _slideBuybackFee = slideBuybackFee;\r\n        _slideReflectionFee = slideReflectionFee;\r\n        _slideLiquidityFee = slideLiquidityFee;\r\n        _slideDevFee = slideDevFee;\r\n    }\r\n    \r\n    function setCoolDownBlocks(uint256 cooldownBlocks) external onlyOwner() {\r\n        _cooldownBlocks = cooldownBlocks;\r\n    }\r\n    \r\n    function updateBuyBackAddress(address payable buybackAddress) external onlyOwner() {\r\n        _buybackAddress = buybackAddress;\r\n    }\r\n    \r\n    function updateMarketingAddress(address payable marketingAddress) external onlyOwner() {\r\n        _marketingAddress = marketingAddress;\r\n    }\r\n    \r\n    function updateDevelopmentAddress(address payable developmentAddress) external onlyOwner() {\r\n        _developmentAddress = developmentAddress;\r\n    }\r\n    \r\n    function getRemainingSellLimit(address payable account) external view returns (uint256) {\r\n        if (_dailyMaxEnabled) {\r\n            return _maxSellAmountBNB.sub(_sellTotal[account]);\r\n        }\r\n        return _maxSellAmountBNB;\r\n    }\r\n    \r\n    function getTimeLimit(address payable account) external view returns (uint256) {\r\n        if (_sellCoolDownEnabled && !_dailyMaxEnabled) {\r\n            if(sellcooldown[account] < block.timestamp) {\r\n                return block.timestamp.sub(sellcooldown[account]); // seconds remaining until cooldown is over\r\n            }\r\n            return 0; // not in cooldown, can sell now\r\n        }\r\n        else if (_sellCoolDownEnabled && _dailyMaxEnabled) {\r\n            if (_maxSellAmountBNB.sub(_sellTotal[account]) > 0) {\r\n                if (sellcooldown[account] > block.timestamp) {\r\n                    return sellcooldown[account].sub(block.timestamp); // seconds remaining until cooldown is over\r\n                }\r\n                else {\r\n                    return 0; // not in cooldown, can sell now\r\n                }\r\n            }\r\n            else {\r\n                if (block.timestamp > _firstSell[account].add(1 days)) {\r\n                    return 0; // it's been more than 24 hours, can sell now\r\n                }\r\n                else {\r\n                    return (uint256(1 days).add(_firstSell[account])).sub(block.timestamp); // seconds remaining until 24 hours have passed\r\n                }\r\n            }\r\n            \r\n        }\r\n        else {\r\n            return 0; // can sell now\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"presale\",\"type\":\"bool\"}],\"name\":\"EndedPresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyBuybackFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyReflectionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyDevFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellBuyBackFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellReflectionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellDevFee\",\"type\":\"uint256\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_marketingPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buybackPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_devPercent\",\"type\":\"uint256\"}],\"name\":\"PercentsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_priceImpact\",\"type\":\"uint256\"}],\"name\":\"PriceImpactUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sellOnly\",\"type\":\"bool\"}],\"name\":\"SellOnlyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hundredMinusDipPercent\",\"type\":\"uint256\"}],\"name\":\"UpdatedAllowableDip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"GTblock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LTblock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockWindow\",\"type\":\"uint256\"}],\"name\":\"UpdatedHighLowWindows\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyBuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyReflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_floorBuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_floorDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_floorLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_floorMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_floorReflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_goldenHourStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_goldenHourStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_oraclePriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_priceImpact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_recovered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellReflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_slideBuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_slideDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_slideLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_slideMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_slideReflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableDailyMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disablePriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableSellCoolDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableDailyMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enablePriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSellCoolDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"botBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floorPercent\",\"type\":\"uint256\"}],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromContractWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRemainingSellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTimeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokenPriceBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInContractWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cooldownBlocks\",\"type\":\"uint256\"}],\"name\":\"setCoolDownBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFloor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"floorMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floorBuybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floorReflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floorLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floorDevFee\",\"type\":\"uint256\"}],\"name\":\"setFloorFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"floorPercent\",\"type\":\"uint256\"}],\"name\":\"setFloorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setManualETHvalue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buybackPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devPercent\",\"type\":\"uint256\"}],\"name\":\"setPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setPresaleRouterAndAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceImpact\",\"type\":\"uint256\"}],\"name\":\"setPriceImpact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slideMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slideBuybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slideReflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slideLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slideDevFee\",\"type\":\"uint256\"}],\"name\":\"setSlideFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBuybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyReflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyDevFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellBuybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellReflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellDevFee\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"buybackAddress\",\"type\":\"address\"}],\"name\":\"updateBuyBackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"developmentAddress\",\"type\":\"address\"}],\"name\":\"updateDevelopmentAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingAddress\",\"type\":\"address\"}],\"name\":\"updateMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSellBNB\",\"type\":\"uint256\"}],\"name\":\"updateMaxSellAmountBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBuyBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSellBNB\",\"type\":\"uint256\"}],\"name\":\"updateMinBuySellBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"}],\"name\":\"updateOraclePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swapped\",\"type\":\"bool\"}],\"name\":\"updatePairSwapped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFreeBlocks\",\"type\":\"uint256\"}],\"name\":\"updateTaxFreeBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DOGEX", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7ba6cfac08c6c8d36a00540745b696cfbfaca87fc4434190edfa51e12b0d6cb0"}