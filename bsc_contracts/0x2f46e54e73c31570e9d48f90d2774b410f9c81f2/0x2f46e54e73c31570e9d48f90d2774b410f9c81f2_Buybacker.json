{"SourceCode": "// File: contracts/interface/IPancakeRouter02.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPancakeRouter02 {\r\n    function swapExactTokensForTokens(uint amountIn,uint amountOutMin,address[] calldata path,address to,uint deadline) external returns (uint[] memory amounts);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n// File: contracts/Buybacker.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IrecoverFund {\r\n      function buybackeAndBurn(uint256 amtIn, uint256 minut) external;\r\n      function balance() external returns(uint256);\r\n      function endtime() external returns(uint256);\r\n}\r\n\r\ncontract Buybacker {\r\n      address public recoverFund;\r\n      address public operator;\r\n      address public pancakeRouter;\r\n      address public tokenIn; //USDC, LUCA\r\n      address public tokenOut;\r\n      mapping(uint256=>uint256) public cost; \r\n\r\n      uint256 constant dailyMaxCost = 30000e18;\r\n\r\n      event BuybackeEvent(uint256 indexed dayIndex,uint256 timestamp, uint256 amount);\r\n\r\n      constructor(address _recoverFund, address _router, address usdc, address luca, address _operator){\r\n            recoverFund = _recoverFund;\r\n            pancakeRouter = _router;\r\n            operator = _operator;\r\n            tokenIn = usdc;\r\n            tokenOut = luca;\r\n      }\r\n\r\n      function calculateAmountOutMin(uint amountIn) public view returns (uint) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = tokenIn;\r\n            path[1] = tokenOut;\r\n            uint[] memory amounts = IPancakeRouter02(pancakeRouter).getAmountsOut(amountIn, path);\r\n            return amounts[1]; \r\n      }\r\n\r\n\r\n      function execBuyback(uint256 amt) external{\r\n            require(block.timestamp > IrecoverFund(recoverFund).endtime(),\"Only after recoverFund end\");\r\n            require(msg.sender == operator, \"Only operator is allowed\");\r\n            require(amt > 0, \"Invalid amount\");\r\n\r\n            uint256 balance = IrecoverFund(recoverFund).balance();\r\n            uint256 amount =  amt * 1e18;\r\n            if (amount > balance) amount = balance;\r\n\r\n            uint256 day = block.timestamp / 1 days ;\r\n            cost[day] += amount;\r\n            require(cost[day] <= dailyMaxCost, \"Out of daily max cost\");\r\n\r\n            IrecoverFund(recoverFund).buybackeAndBurn(amount, calculateAmountOutMin(amount));\r\n            emit BuybackeEvent(day, block.timestamp, amount);    \r\n      }\r\n      \r\n\r\n      function execBuyback(uint256 amtIn, uint256 minOut) external{\r\n            require(block.timestamp > IrecoverFund(recoverFund).endtime(),\"Only after recoverFund end\");\r\n            require(msg.sender == operator, \"Only operator is allowed\");\r\n            require(amtIn > 0, \"Invalid amount\");\r\n\r\n            uint256 balance = IrecoverFund(recoverFund).balance();\r\n\r\n            if (amtIn > balance) amtIn = balance;\r\n\r\n            uint256 day = block.timestamp / 1 days ;\r\n            cost[day] += amtIn;\r\n            require(cost[day] <= dailyMaxCost, \"Out of daily max cost\");\r\n\r\n            IrecoverFund(recoverFund).buybackeAndBurn(amtIn, minOut);\r\n            emit BuybackeEvent(day, block.timestamp, amtIn);    \r\n      }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recoverFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"luca\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dayIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuybackeEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"calculateAmountOutMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"execBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amtIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"execBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOut\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Buybacker", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000cba0d4bd0a6adada793592823524c1ccb670ecd100000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d00000000000000000000000051e6ac1533032e72e92094867fd5921e3ea1bfa0000000000000000000000000c482d0067ea86fbd24cfe398f2215d8720e09d47", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ec030d201d9c191b87e085433dbac4f1adb10ab908ecd1a1535e00f275eb9c42"}