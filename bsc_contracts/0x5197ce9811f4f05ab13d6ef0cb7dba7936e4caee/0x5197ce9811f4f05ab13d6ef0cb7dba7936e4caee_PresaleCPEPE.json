{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable  {\r\n    address payable public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor ()  {\r\n        _owner = payable(msg.sender);\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface Token {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n}\r\n\r\n\r\ncontract PresaleCPEPE is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    address public tokenAddr;\r\n    \r\n    uint256 public tokenPriceBNB = 14e11;  //1BNB=14e11 CPEPE TOKEN \r\n    uint256 public tokenDecimal = 18;\r\n    uint256 public maticDecimal = 18;\r\n    uint256 public totalTransaction;\r\n    uint256 public totalHardCap;\r\n    uint256 public minContribution = 1e15; //0.001\r\n    uint256 public maxContribution = 10e24; //10`6\r\n    uint256 public hardCap = 10e22; \r\n    uint256 public amountRaisedBNB;\r\n\r\n    \r\n\r\n    event TokenTransfer(address beneficiary, uint amount);\r\n    event amountTransfered(address indexed fromAddress,address contractAddress,address indexed toAddress, uint256 indexed amount);\r\n    event TokenDeposited(address indexed beneficiary, uint amount);\r\n    event BnbDeposited(address indexed beneficiary, uint amount);\r\n    \r\n    mapping(address => uint256) public balances;\r\n    mapping(address => bool) public whitelisted;\r\n    mapping(address => uint256) public tokenExchanged;\r\n\r\n    bool public whitelist = false;\r\n    bool public claim = false;\r\n \r\n\r\n    constructor(address _tokenAddr)  {\r\n        tokenAddr = _tokenAddr;\r\n    }\r\n   \r\n    /* This Function Will Airdrop ETH to Multiple Users */\r\n    function transferCrypto(uint256[] memory amounts, address payable[] memory receivers) payable public  onlyOwner returns (bool){\r\n        uint total = 0;\r\n        require(amounts.length == receivers.length);\r\n        require(receivers.length <= 100); //maximum receievers can be 100\r\n        for(uint j = 0; j < amounts.length; j++) {\r\n            total = total.add(amounts[j]);\r\n        }\r\n        require(total <= msg.value);\r\n            \r\n        for(uint i = 0; i< receivers.length; i++){\r\n            receivers[i].transfer(amounts[i]);\r\n            emit amountTransfered(msg.sender,address(this) ,receivers[i],amounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    /* This Function will Airdrop Tokens to Multiple Users */\r\n    function AirdropTokens(address[] memory _recipients, uint256[] memory _amount) public onlyOwner returns (bool) {\r\n        uint total = 0;\r\n        require(_recipients.length == _amount.length);\r\n        require(_recipients.length <= 100); //maximum receievers can be 100\r\n        for(uint j = 0; j < _amount.length; j++) {\r\n            total = total.add(_amount[j]);\r\n        }        \r\n\r\n        for (uint i = 0; i < _recipients.length; i++) {\r\n            require(_recipients[i] != address(0),\"Address should not be Zero\");\r\n            balances[_recipients[i]] = _amount[i];\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /* This Function will whitelist Addresses for presale */\r\n    function whitelistAddress(address[] memory _recipients) public onlyOwner returns (bool) {\r\n        require(_recipients.length <= 100); //maximum receievers can be 500\r\n        for (uint i = 0; i < _recipients.length; i++) {\r\n            whitelisted[_recipients[i]] = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /* This Function will Remove Whitelist addresss */\r\n    function RemoveWhitelist(address[] memory _recipients) public onlyOwner returns (bool) {\r\n        require(_recipients.length <= 100); //maximum receievers can be 500\r\n        for (uint i = 0; i < _recipients.length; i++) {\r\n            whitelisted[_recipients[i]] = false;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n\r\n    /* This function will deposit Tokens in the smart contract (Token must be approved first) */    \r\n    function depositTokens(uint256  _amount) public returns (bool) {\r\n        require(_amount <= Token(tokenAddr).balanceOf(msg.sender),\"Token Balance of user is less\");\r\n        require(Token(tokenAddr).transferFrom(msg.sender,address(this), _amount));\r\n        emit TokenDeposited(msg.sender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /* This will deposit BNB to Contract */\r\n    function depositCrypto() payable public returns (bool){\r\n        uint256 amount = msg.value;\r\n        address userAddress = msg.sender;\r\n        emit BnbDeposited(userAddress, amount);\r\n        return true;\r\n    }\r\n    \r\n    /* This function will accept BNB directly sent to the address */\r\n    receive() payable external {\r\n        ExchangeBNBforToken(msg.sender, msg.value);\r\n    }\r\n\r\n    /* This Function will exchange BNB to Token */    \r\n    function ExchangeBNBforToken(address _addr, uint256 _amount) private {\r\n        uint256 amount = _amount;\r\n        address userAdd = _addr;\r\n        uint256 bnbAmount = 0;\r\n         balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n        \r\n        if(whitelist){\r\n            require(whitelisted[userAdd],\"User is not Whitelisted\");\r\n        }\r\n        require(totalHardCap < hardCap, \"BNB Hardcap Reached\");\r\n        require(balances[msg.sender] >= minContribution && balances[msg.sender] <= maxContribution,\"Contribution should satisfy min max case\");\r\n        totalTransaction.add(1);\r\n        totalHardCap.add(_amount);\r\n        bnbAmount = ((amount.mul(10 ** uint256(tokenDecimal)).div(tokenPriceBNB)).mul(10 ** uint256(tokenDecimal))).div(10 ** uint256(tokenDecimal));\r\n        tokenExchanged[userAdd] += bnbAmount;\r\n        \r\n        emit BnbDeposited(msg.sender,msg.value);\r\n    }\r\n\r\n\r\n    /* This Function will exchange BNB to Token in Mannual Call */\r\n   function buyToken() public payable {\r\n            uint256 amount = msg.value;\r\n            address userAdd = msg.sender;\r\n            uint256 bnbAmount = 0;\r\n            balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n\r\n            if (whitelist) {\r\n                require(whitelisted[userAdd], \"User is not Whitelisted\");\r\n            }\r\n            require(totalHardCap < hardCap, \"BNB Hardcap Reached\");\r\n            require(balances[msg.sender] >= minContribution && balances[msg.sender] <= maxContribution, \"Contribution should satisfy min max case\");\r\n            totalTransaction.add(1);\r\n            totalHardCap.add(amount);\r\n            amountRaisedBNB = amountRaisedBNB + (msg.value);\r\n            \r\n            bnbAmount = amount.mul(tokenPriceBNB); // Updated calculation\r\n            \r\n            Token(tokenAddr).transfer(userAdd, bnbAmount);\r\n            emit TokenTransfer(userAdd, bnbAmount);\r\n            emit BnbDeposited(msg.sender, msg.value);\r\n}\r\n\r\n\r\n    \r\n    /* ONLY OWNER FUNCTIONS */\r\n\r\n    /* This Function will be used to turn on or off whitelisting process */\r\n    function turnWhitelist() public onlyOwner returns (bool success)  {\r\n        if (whitelist) {\r\n            whitelist = false;\r\n        } else {\r\n            whitelist = true;\r\n        }\r\n        return true;\r\n        \r\n    }\r\n\r\n    /* This Function will be used to turn on or off claim process */\r\n    function claimIn() public onlyOwner returns (bool success)  {\r\n        if (claim) {\r\n            claim = false;\r\n        } else {\r\n            claim = true;\r\n        }\r\n        return true;\r\n        \r\n    }\r\n    \r\n    /* Update Token Price */\r\n    function updateTokenPrice(uint256 newTokenValue) public onlyOwner {\r\n        tokenPriceBNB = newTokenValue;\r\n    }\r\n\r\n    /* Update Hard Cap */\r\n    function updateHardCap(uint256 newHardcapValue) public onlyOwner {\r\n        hardCap = newHardcapValue;\r\n    }\r\n\r\n    /* Update Min Max Contribution */\r\n    function updateTokenContribution(uint256 min, uint256 max) public onlyOwner {\r\n        minContribution = min;\r\n        maxContribution = max;\r\n    }\r\n    \r\n    /* Update Token Decimal */\r\n    function updateTokenDecimal(uint256 newDecimal) public onlyOwner {\r\n        tokenDecimal = newDecimal;\r\n    }\r\n\r\n    /* Update Token Address */\r\n    function updateTokenAddress(address newTokenAddr) public onlyOwner {\r\n        tokenAddr = newTokenAddr;\r\n    }\r\n\r\n    /* Withdraw Remaining token after sale */\r\n    function withdrawTokens(address beneficiary) public onlyOwner {\r\n        require(Token(tokenAddr).transfer(beneficiary, Token(tokenAddr).balanceOf(address(this))));\r\n    }\r\n\r\n    /* Withdraw Crypto remaining in contract */\r\n    function withdrawCrypto(address payable beneficiary) public onlyOwner {\r\n        beneficiary.transfer(address(this).balance);\r\n    }\r\n\r\n    /* ONLY OWNER FUNCTION ENDS HERE */\r\n\r\n\r\n    /* VIEW FUNCTIONS */\r\n\r\n    /* View Token Balance */\r\n    function tokenBalance() public view returns (uint256){\r\n        return Token(tokenAddr).balanceOf(address(this));\r\n    }\r\n\r\n    /* View BNB Balance */\r\n    function bnbBalance() public view returns (uint256){\r\n        return address(this).balance;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BnbDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"amountTransfered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"AirdropTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"RemoveWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaisedBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCrypto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenExchanged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"}],\"name\":\"transferCrypto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newHardcapValue\",\"type\":\"uint256\"}],\"name\":\"updateHardCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenAddr\",\"type\":\"address\"}],\"name\":\"updateTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"updateTokenContribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDecimal\",\"type\":\"uint256\"}],\"name\":\"updateTokenDecimal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTokenValue\",\"type\":\"uint256\"}],\"name\":\"updateTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"whitelistAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawCrypto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PresaleCPEPE", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000018f213f2bd2772851f5d3991a4df0c318968292b", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3ba7360e0afc6be47234d66d2d6140bd0eaad060cdd38e020459a4aeb5eb1f7b"}