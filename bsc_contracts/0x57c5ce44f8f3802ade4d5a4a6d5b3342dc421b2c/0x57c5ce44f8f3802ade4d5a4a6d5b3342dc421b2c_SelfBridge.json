{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\n/** \r\n *  SourceUnit: d:\\Direct Projects\\Self\\self\\rufi-sandbox\\contracts\\contracts\\Bridge.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [////IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * ////IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\Direct Projects\\Self\\self\\rufi-sandbox\\contracts\\contracts\\Bridge.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * ////IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\Direct Projects\\Self\\self\\rufi-sandbox\\contracts\\contracts\\Bridge.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * ////IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\Direct Projects\\Self\\self\\rufi-sandbox\\contracts\\contracts\\Bridge.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"../IERC20.sol\";\r\n////import \"../extensions/draft-IERC20Permit.sol\";\r\n////import \"../../../utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\Direct Projects\\Self\\self\\rufi-sandbox\\contracts\\contracts\\Bridge.sol\r\n*/\r\n\r\n/////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: GPL-3.0\r\npragma solidity 0.8.19;\r\n\r\n/// @dev Ethereum Natural Language Specification Format (NatSpec).\r\n\r\n/// @title SelfBridge\r\n/// @author Luis Panadero with help of Master Rufi and the ideas of Don\r\n/// @notice v0.2.0\r\n/// @notice 19 may 2023\r\n/// @notice SelfBridge is created for bridging SELF tokens between EVM chains BSC and ETH.\r\n/// @notice The contract is based on the LIFE bridge contracts.\r\n/// @custom:experimental This is an experimental contract.\r\n/// @custom:The contract has not been tested in any sense. The frontend DAPP and API are created now.\r\n/// @dev Function calls are implemented without a check on side effects.\r\n/// @dev This contract is a fork of an existing bridge contract, we expect this contract to perform well.\r\n/// @dev This contract is meant to work with integrating SELF DAPP and SELF API\r\n/// @notice contact our SELF team to discuss, comment or flag issues or potential vulnerabilities. \r\n/// @notice also do contact may you have some inspiring ideas for web3 innnovations or SELF integrations.\r\n\r\n/// @notice this comments will be removed from production version\r\n\r\n/// @notice Requirements\r\n/**\r\n * 1. Create a bridge for SELF holders to transfer between BSC and ETH\r\n * 2. Tokens are owned by admin, there is not burn or mint.\r\n * 3. Contracts need to be secure.. scaleable.. decentraled(max) \r\n * 4. Use Life bridge as an examplek this bridge is operational for over a year.\r\n * 5. Implement a free structure, that can be altered over time\r\n * 6. Do it fast ...friday is audit!\r\n * 7. Create the code free of bugs, so we can skip the testing phase! :)\r\n*/\r\n\r\n/// @notice How the contact works\r\n/**\r\n * This is how the brige works. \r\n * SelfBridge is created for bridging SELF tokens between EVM chains BSC and ETH. \r\n * Web3: Both chains have bridge contract and a SELF token contract. \r\n * Web2: There is a BRIDGE DAPP and a BRIDGE API.\r\n * The BRIDGE DAPP triggers the outbound transfer of tokens on 1 chain. The BRIDGE API listens for transactions, and \r\n * triggers the inbound transfer on the other chain.\r\n * The outbound transfer is a token.transferFrom routine (by allowance). This means the SELF holders has to approve the outbound\r\n * transaction (SELF DAPP). After approval, the BridgeContract has allowance to transfer the tokens on behalf of the SELF holder.\r\n * After the actual transfer of SELF tokens to chain A. Node BRIDGE API listens for transaction receipts and fires getTransactionReceipt.\r\n * BRIDGE API actually holds the admin private keys in order to be able to directly executed admin routines on contract, for direct \r\n * transfer. \r\n * The BRIDGE API then calls the inbound routine on chain B, and the tokens are transferred in return to the SELF holders balance on the\r\n * other chain. \r\n * \r\n * This is the programflow\r\n * Holder.balance -->  BRIDGE DAPP --> chainA.outbound()  --> transfer chainA --> BRIDGE API listener --> chainB.inbound() --> transfer chainB --> Holder.balance\r\n * Check for a detailed schema the SELF Bridge Relay drawing.\r\n * \r\n * Are the tokens minted or burned?\r\n * Tokens are not minted / burned. The SelfBridge contracts holds the number of tokens required for transferring. The Admin has the control\r\n * of the totalSupply for both contracts. Admin should monitor the supply on both chains. If there is insufficient balance, the BRIDGE DAPP should\r\n * notice and disable the bridge outbound.\r\n * \r\n * What is the BRIDGE DAPP or BRIDGE API is inactive or in error state\r\n * If the BRIDGE DAPP is down, the holder can not execute the outbound routine. For the case that BRIDGE API is inactive or  error state. The \r\n * BRIDGE DAPP is noted and the outbound routine will be disabled.\r\n * \r\n * Last minute update v0.20\r\n *      - implemented specific routine for the fee collection\r\n *      - also addedd transfer_fee status\r\n * As the contract is owner of the tokens, there is only 1 supply(balance) of SELF tokens .... \r\n * Admin controls the amount of tokens to be supplied in the contract.\r\n * This makes the contract less vulnerable.. as the stake is only the maximum supply (and not a mint function for the token itself) \r\n * For the sake of extra security.. we added a shutdown flag. this routine can be set by both the API or admin.. Admin can only reset \r\n * If the external API .. or admin sets the flag. bridging stops immediate \r\n * \r\n * Happy bridging!!\r\n *  \r\n */ \r\n\r\n/**SELF Team - Notes for dev team;\r\n * take these considerations into account while developing SELF style\r\n1. Use descriptive names for variables, functions, and classes to make the code more readable and understandable:\r\n2. Keep functions and classes small and focused on a single task. This helps in easier maintenance, testing and reuse:\r\n3. Use comments to explain complex logic, assumptions, and the intent of the code:\r\n4. Write self-documenting code, using code constructs and design patterns that convey intent and functionality without the need for comments:\r\n5. Use consistent indentation and formatting to make the code easy to read and navigate:\r\n6. Avoid duplication of code by extracting common functionality into reusable functions or classes:\r\n7. Follow the SOLID principles of object-oriented design to write code that is easy to modify and maintain:\r\n8. Write unit tests to ensure that the code is working as expected, and to catch any regressions that may be introduced during future development:\r\n9. Use version control to keep track of changes to the codebase and to collaborate with other developers:\r\n10. Continuously refactor the code to keep it clean and maintainable, even as requirements and business needs change:*/\r\n\r\n////import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract SelfBridge {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @dev constants\r\n    string public constant title = 'SelfBridge v0.2.0';\r\n\r\n    /// @dev Tokens\r\n    IERC20 public selfToken; \r\n\r\n    /// @dev Decimals\r\n    uint256 public selfDecimals;\r\n\r\n    /// @dev Admin controls bridge routines from self.api\r\n    address public admin;\r\n\r\n    /// @dev Agent controls emergency routines from self.api and future applications\r\n    address public agent;\r\n\r\n    /// @dev minimum bridge is x SELF\r\n    uint256 public minBridge;\r\n    \r\n    /// @dev maximum bridge is x SELF to avoid overBridging !\r\n    uint256 public maxBridge;\r\n\r\n    /// @dev fee % per bridge. to divide by 1e3\r\n    /// @notice example: fee of 200 --> means 200 / 1000 --> 0.2% fee\r\n    uint256 public bridgeFee;\r\n\r\n    /// @dev total collected fee from the holders\r\n    uint256 public collectedFee;\r\n\r\n    /// @dev total transferred fee from the balance of contract to balance of admin\r\n    uint256 public transferredFee;\r\n\r\n    /// @dev ShutDown Flag will disable the bridging in case of maintenance, shutdown or other emergency\r\n    bool public shutDownFlag; \r\n\r\n\r\n    /// Events\r\n    event tokensOutBound(address indexed holder, uint256 amount);\r\n    event tokensInBound(address indexed holder, uint256 amount);\r\n    event deposited(uint256 amount);\r\n    event Withdrawn(uint256 amount);\r\n    event feeTransferred(uint256 amount);\r\n    event feeUpdated(uint256 newBridgeFee);\r\n    event adminUpdated(address indexed admin);\r\n    event agentUpdated(address indexed agent);\r\n    event shutdownActivated(bool flag);\r\n\r\n    /// @dev constructor init\r\n    /// @param _selfToken is SELF\r\n    constructor(address _selfToken) {\r\n        /// @dev do some checks\r\n        require(_selfToken != address(0), \"Invalid _selfToken address\");\r\n\r\n        // @dev selfToken is SELF .. default decimals is 18 \r\n        selfToken = IERC20(_selfToken);\r\n\r\n        /// @dev decimals for selfToken\r\n        selfDecimals = 18;\r\n\r\n        ///@dev minimum bridge is 10 SELF\r\n        minBridge = 10 * (10 ** selfDecimals);\r\n    \r\n        ///@dev maximum bridge is 100_000 SELF : avoid overBridging !\r\n        maxBridge = 100_000 * (10 ** selfDecimals);\r\n\r\n        /// @dev fee collected from holders init\r\n        collectedFee = 0;\r\n\r\n        /// @dev fee transferred to balance of admin init\r\n        transferredFee = 0;\r\n\r\n        /// @dev the admin that holds the tokens for both chains\r\n        admin = msg.sender;\r\n\r\n        /// @dev the agent that controls the emergency routines\r\n        agent = msg.sender;\r\n\r\n        /// @dev the shutdown flag is disabled by default\r\n        shutDownFlag = false;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"only the admin can executed this routine\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAgent() {\r\n        require(msg.sender == agent, \"only the agent can executed this routine\");\r\n        _;\r\n    }\r\n\r\n\r\n    /// @dev outBound\r\n    /// @param _amount is the amount of tokens to bridge \r\n    /// @notice this is a transfer by allowance, so spender (CONTRACT) has to be approved on token contract\r\n    /// @notice frontend needs to check the other chain for sufficient supply!\r\n    function outBound(uint256 _amount) external {\r\n        require(!shutDownFlag, \"Bridge has ShutDown Status\");\r\n        require(_amount >= minBridge, \"Amount must be higher than 10 \");\r\n        require(_amount <= maxBridge, \"Amount must be lower than 100_000 \");\r\n        require(selfToken.allowance(msg.sender, address(this)) >= _amount, \"Must approve token transfer first\");\r\n        require(selfToken.balanceOf(msg.sender) >= _amount, \"Insufficient balance\");\r\n\r\n        /// @dev calculate fee\r\n        /// @info correct value by decimals:  2(percentage) + 3(feeCorrection) = 1e5 \r\n        uint256 fee = (_amount * bridgeFee) / (10 ** 5);\r\n\r\n        /// @dev transfer tokens from sender to contract\r\n        selfToken.transferFrom(msg.sender, address(this), (_amount - fee));\r\n\r\n        /// @dev sum total fee\r\n        collectedFee += fee; \r\n\r\n        // send out event\r\n        emit tokensOutBound(msg.sender, _amount);\r\n    }\r\n\r\n    /// @dev inBound\r\n    /// @param _amount is the amount of tokens to return to the SELF-holder\r\n    /// @param _to is the address of the SELF-holder that will receive the tokens \r\n    /// @notice this is a direct transfer by the contract \r\n    /// @notice this is an external tranfer initiated by the SELF-API(to, amount)\r\n    function inBound(address _to, uint256 _amount) external onlyAdmin{\r\n        require(selfToken.balanceOf(address(this)) >= _amount, \"Insufficient balance\");\r\n\r\n        /// @dev transfer tokens from contract to inBound.to\r\n        selfToken.transfer(_to, _amount);\r\n\r\n        // send out event\r\n        emit tokensInBound(_to, _amount);\r\n    }\r\n\r\n    /// @dev deposit\r\n    /// @param _amount is the amount of tokens to store in contract.balance\r\n    /// @notice this routine is called by admin to deposit SELF tokens to contract \r\n    function deposit(uint256 _amount) external onlyAdmin {\r\n        require(_amount >= minBridge, \"Amount must be higher than 10 \");\r\n        require(selfToken.allowance(msg.sender, address(this)) >= _amount, \"Must approve token transfer first\");\r\n\r\n        /// @dev transfer tokens from admin to contract\r\n        selfToken.transferFrom(msg.sender, address(this), _amount);\r\n\r\n        // send out event\r\n        emit deposited(_amount);\r\n    }\r\n\r\n    /// @dev withdraw\r\n    /// @param _amount is the amount of tokens to withdraw from contract.balance\r\n    /// @notice this routine is called by admin to remove SELF tokens from contract \r\n    function withdraw(uint256 _amount) external onlyAdmin{\r\n        require(_amount >= minBridge, \"Amount must be higher than 10 \");\r\n        require(selfToken.balanceOf(address(this)) >= _amount, \"Insufficient balance\");\r\n\r\n        /// @dev transfer tokens from contract to admin\r\n        selfToken.transfer(admin, _amount);\r\n\r\n        // send out event\r\n        emit Withdrawn(_amount);\r\n    }\r\n\r\n    /// @dev transferFee\r\n    /// @notice tranfer collected fee to the balance of admin \r\n    function transferFee() external onlyAdmin{\r\n        /// @dev calculate pending fee to be collected\r\n        uint256 amount = collectedFee - transferredFee;\r\n\r\n        /// @dev set requirements\r\n        require(amount >= 0, \"Pending fee collected must be higher than 0 \");\r\n        require(amount > selfToken.balanceOf(address(this)) , \"Unsufficient balance for fee transfer\");\r\n\r\n        /// @dev direct transfer by contract\r\n        selfToken.transfer(admin, amount);\r\n\r\n        /// @dev update new saldo for fee transferred\r\n        transferredFee = collectedFee;\r\n\r\n        // send out event\r\n        emit feeTransferred(amount);\r\n    }   \r\n\r\n    /// @dev setBridgeFee\r\n    /// @param _newBridgeFee is the fee % per bridge. to divide by 1e3  \r\n    /// @notice be careful change bridgee, as this being deducted from the bridge routine on behalf of holder\r\n    function setBridgeFee(uint256 _newBridgeFee) external onlyAdmin {\r\n        /// @notice overwrite public variable\r\n        bridgeFee = _newBridgeFee;\r\n\r\n        // send out event\r\n        emit feeUpdated(_newBridgeFee);\r\n    }\r\n\r\n    /// @dev changeAdmin\r\n    /// @param _newAdmin is the address of the new Admin\r\n    /// @notice admin controls the external balances of SELF and controls overall processes\r\n    function changeAdmin(address _newAdmin) external onlyAdmin {\r\n        /// @notice overwrite public variable\r\n        admin = _newAdmin;\r\n\r\n        // send out event\r\n        emit adminUpdated(_newAdmin);\r\n    }\r\n\r\n    /// @dev changeAgent\r\n    /// @param _newAgent is the address of the new Agent\r\n    /// @notice agent is the external automated routine (oracle?) that can disable the bridge\r\n    function changeAgent(address _newAgent) external onlyAdmin {\r\n        /// @notice overwrite public variable\r\n        agent = _newAgent;\r\n\r\n        // send out event\r\n        emit agentUpdated(_newAgent);\r\n    }\r\n\r\n    /// @dev setShutDownFlag\r\n    /// @param _flag admin can set the shutdown flag to true or false\r\n    /// @notice admin can set reset the shutdown status after or during emergency\r\n    function setShutDownFlag(bool _flag) external onlyAdmin {\r\n        /// @dev set global shutdown status\r\n        shutDownFlag = _flag;\r\n\r\n        // send out event\r\n        emit shutdownActivated(_flag);\r\n    }\r\n\r\n    /// @dev totalSupply\r\n    /// @notice all available tokens for bridge and fee are on contracts balance \r\n    function totalSupply() public view returns (uint) {\r\n        /// check supply on selfToken contract\r\n        return selfToken.balanceOf(address(this));\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_selfToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"adminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"feeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBridgeFee\",\"type\":\"uint256\"}],\"name\":\"feeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"shutdownActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokensInBound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokensOutBound\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAgent\",\"type\":\"address\"}],\"name\":\"changeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"inBound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBridge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBridge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"outBound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBridgeFee\",\"type\":\"uint256\"}],\"name\":\"setBridgeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setShutDownFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutDownFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"title\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferredFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SelfBridge", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000308299bb3f6a7274ad82bfcff0739c88aafa3ad7", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6aa9a64133bb6fbaf9c816fca3c44f452795d6d8485918bfdff6f7af5e7363b7"}