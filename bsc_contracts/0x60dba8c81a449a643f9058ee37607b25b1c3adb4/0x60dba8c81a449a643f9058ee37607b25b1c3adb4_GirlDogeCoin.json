{"SourceCode": "pragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b; require(c >= a, \"SafeMath: addition overflow\"); return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage); uint256 c = a - b; return c;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0; uint256 c = a * b; require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function renounceOwnership() external virtual onlyOwner() {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) external virtual onlyOwner() {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() external view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    function lock(uint256 time) external virtual onlyOwner() {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = now + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n    \r\n    function unlock() external virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(now > _lockTime , \"Contract is _totalMiddleSupply until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline)  external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// REFLECTION V2 IS ALIVE ! Supported by GirlDoge Team \r\n\r\ncontract GirlDogeCoin is Context, IERC20, Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    uint256 private constant MAXIMUM_VALUE = ~uint256(0);\r\n    uint256 private constant _totalSupply = 1000000 * 10**6 * 10**9; // 1 TRI\r\n    \r\n    mapping (address => uint256) private _totalTopSupply; // == REFLECTIONS !\r\n    mapping (address => uint256) private _totalMiddleSupply; \r\n    uint256 private _totalBottomSupply = (MAXIMUM_VALUE - (MAXIMUM_VALUE % _totalSupply)); \r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    \r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n   \r\n    uint256 private _totalFees;\r\n    \r\n    uint256 public _taxFee = 5;\r\n    uint256 private _previousTaxFee = _taxFee;\r\n    \r\n    uint256 public _liquidityFee = 3;\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\r\n    \r\n    uint256 public _campaignFee = 2;\r\n    uint256 private _previousCampaingFee = _campaignFee;\r\n    address public _campaignAddress;\r\n    \r\n    uint256 private numTokensSellToAddToLiquidity = 500 * 10**6 *  10**9; // 500 MI\r\n    uint256 public _maxTxAmount = 5001 * 10**6 * 10**9; // 5 BILLIONS\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    \r\n    bool public EJECT_PROTOCOL = false;\r\n    bool private inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    \r\n    uint8 private _decimals = 9;\r\n    string private _name = \"Girl Doge Coin\";\r\n    string private _symbol = \"GirlDoge\";\r\n    \r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity );\r\n    event ProtocolChanged( uint256 block, bool ejectProtocol );\r\n    event ManualWithdrawToLiquify( address owner, uint256 ethReceived );\r\n\r\n    modifier feePolicy(bool freeFee) {\r\n        if(freeFee){\r\n            removeAllFee();\r\n            _;\r\n            restoreAllFee();\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n    \r\n    \r\n    modifier lockTheSwapToLiquify { inSwapAndLiquify = true; _; inSwapAndLiquify = false; }\r\n    \r\n    constructor () public {\r\n        _totalTopSupply[_msgSender()] = _totalBottomSupply;\r\n        \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n         \r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        \r\n        uniswapV2Router = _uniswapV2Router;\r\n        \r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        \r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() external view returns (string memory) { \r\n        return _name; \r\n    }\r\n\r\n    function symbol() external view returns (string memory) { \r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals; \r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) { \r\n        return _totalSupply;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount); return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount); return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"<0\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0));\r\n        require(spender != address(0));\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function totalFees() external view returns (uint256) {\r\n        return _totalFees;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) external view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function isExcludedFromReward(address account) external view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n    \r\n    // control 00\r\n    \r\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner() { \r\n        require( taxFee < 21 );\r\n        _taxFee = taxFee; \r\n    }\r\n    \r\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\r\n        require( liquidityFee < 21 );\r\n        _liquidityFee = liquidityFee;\r\n    }\r\n    \r\n    // control 01\r\n    \r\n    function setCampaignFeePercent(uint256 campaignFee) external onlyOwner() { \r\n        require( campaignFee < 21 );\r\n        _campaignFee = campaignFee; \r\n    }\r\n    \r\n    function setCampaignAddress(address _campaign_address) external onlyOwner() { \r\n        _campaignAddress = _campaign_address; \r\n    }\r\n\r\n    // control 02\r\n    \r\n    function excludeFromFee(address account) external onlyOwner() {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) external onlyOwner() {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n    \r\n    // control 03\r\n    \r\n    function excludeFromReward(address account) external onlyOwner() {\r\n        \r\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Swap router.');\r\n        \r\n        require(_isExcluded[account] == false, \"Already excluded\");\r\n        \r\n        if(_totalTopSupply[account] > 0) {\r\n            \r\n            _totalMiddleSupply[account] = _getTokens(_totalTopSupply[account]);\r\n        \r\n        }\r\n        \r\n        _isExcluded[account] = true;\r\n        \r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        \r\n        require(_isExcluded[account] == true, \"Already included\");\r\n        \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            \r\n            if (_excluded[i] == account) {\r\n                \r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                \r\n                _totalMiddleSupply[account] = 0;\r\n                \r\n                _isExcluded[account] = false;\r\n                \r\n                _excluded.pop();\r\n                \r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // control 04\r\n\r\n    function removeAllFee() private {\r\n        if(_taxFee == 0 && _liquidityFee == 0 && _campaignFee == 0) return;\r\n        _previousTaxFee = _taxFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n        _previousCampaingFee = _campaignFee;\r\n        _taxFee = 0;\r\n        _liquidityFee = 0;\r\n        _campaignFee = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n        _campaignFee = _previousCampaingFee;\r\n    }\r\n    \r\n    // control 05 \r\n    \r\n     function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n         require( maxTxPercent != 0 ); // very important require \r\n        _maxTxAmount = _totalSupply.mul(maxTxPercent).div( 10**2 );\r\n    }\r\n    \r\n    // external\r\n\r\n    function burnTokensAndIncreaseReward(uint256 _tAmount) external {\r\n        \r\n        address sender = _msgSender();\r\n        \r\n        require(_isExcluded[sender] == false);\r\n        \r\n        uint256 _amount = _getAmountREFLECTIONS(_tAmount);\r\n        \r\n        _totalTopSupply[sender] = _totalTopSupply[sender].sub(_amount);\r\n        \r\n        _totalBottomSupply = _totalBottomSupply.sub(_amount);\r\n        \r\n        _totalFees = _totalFees.add(_tAmount);\r\n\r\n    }\r\n\r\n    // helpers 00\r\n    \r\n    function calculatePercent( uint256 _tAmount, uint _scopeFee ) private pure returns (uint256) {\r\n        return _tAmount.mul(_scopeFee).div( 10 ** 2 );\r\n    }\r\n    \r\n    // REFLECTION V2 IS ALIVE ! t.me/girldoge \r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _totalMiddleSupply[account]; // fridge\r\n        return _getTokens(_totalTopSupply[account]);\r\n    }\r\n\r\n    function _getTokens(uint256 _amount) private view returns(uint256) {\r\n        require(_amount <= _totalBottomSupply, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return  _amount.div(currentRate);\r\n    }\r\n\r\n    // GET'S\r\n\r\n    function _getAmountREFLECTIONS(uint256 _amount) private view returns(uint256){\r\n        return _amount.mul(_getRate());\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 bottomSupply, uint256 tokenSupply) = _getCurrentSupply();\r\n        return bottomSupply.div(tokenSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 bottomSupply = _totalBottomSupply;\r\n        uint256 tSupply = _totalSupply;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_totalTopSupply[_excluded[i]] > bottomSupply || _totalMiddleSupply[_excluded[i]] > tSupply) return (_totalBottomSupply, _totalSupply);\r\n            bottomSupply = bottomSupply.sub(_totalTopSupply[_excluded[i]]);\r\n            tSupply = tSupply.sub(_totalMiddleSupply[_excluded[i]]);\r\n        }\r\n        if (bottomSupply < _totalBottomSupply.div(_totalSupply)) return (_totalBottomSupply, _totalSupply);\r\n        return (bottomSupply, tSupply);\r\n    }\r\n\r\n    // \r\n    \r\n    receive() external payable {}\r\n    \r\n    function _taxValues( uint256 _tAmount, uint256 currentRate ) private view returns( uint256, uint256) {\r\n            uint _tAmountTax = calculatePercent( _tAmount , _taxFee );\r\n            uint _amountTax = _tAmountTax.mul( currentRate );\r\n            return ( _amountTax , _tAmountTax );\r\n    }\r\n    \r\n    function _liquidityValues(  uint256 _tAmount , uint256 currentRate ) private view returns( uint256, uint256) {\r\n            uint _tAmountLiq = calculatePercent( _tAmount , _liquidityFee );\r\n            uint _amountLiq = _tAmountLiq.mul( currentRate );\r\n            return ( _amountLiq , _tAmountLiq );\r\n    }\r\n\r\n    function _campaignValues( uint256 _tAmount, uint256 currentRate ) private view returns( uint256, uint256) {\r\n            uint _tAmountCamp = calculatePercent( _tAmount , _campaignFee );\r\n            uint _amountCamp = _tAmountCamp.mul( currentRate );\r\n            return ( _amountCamp , _tAmountCamp );\r\n    }\r\n\r\n    // TRANSFER CONCERNS //\r\n    \r\n    function _transfer( address from, address to, uint256  tAmount ) private {\r\n        \r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        \r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        \r\n        require( tAmount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        if(from != owner() && to != owner()) {\r\n            require( tAmount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n        }\r\n        \r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is uniswap pair.\r\n        \r\n        if(EJECT_PROTOCOL == false){\r\n        \r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                \r\n                if(contractTokenBalance >= _maxTxAmount) {\r\n                    contractTokenBalance = _maxTxAmount;\r\n                }\r\n                \r\n                bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\r\n                \r\n                \r\n                if ( overMinTokenBalance && !inSwapAndLiquify && from != uniswapV2Pair && swapAndLiquifyEnabled ) {\r\n                    \r\n                    contractTokenBalance = numTokensSellToAddToLiquidity;\r\n                  \r\n                    swapAndLiquify(contractTokenBalance);\r\n                }\r\n                \r\n                \r\n                bool freeFee;\r\n        \r\n                if(_isExcludedFromFee[from] || _isExcludedFromFee[to] ){\r\n                    freeFee = true;\r\n                }\r\n                 _transferPipeline(from ,to , tAmount ,freeFee);\r\n            \r\n        } else {\r\n\r\n                _transferPipeline(from ,to , tAmount ,true);\r\n\r\n        }\r\n        \r\n        \r\n       \r\n    }\r\n    \r\n    // Disclaimer t.me/girldoge\r\n    // In the future, when the currency appreciates, we will be able to choose (community) \r\n    // whether we want to keep the current rate system or create a uniform system equal\r\n    // to the old currencies, eg Dogecoin. This can be interesting for us to grow in other \r\n    // areas without many obstacles related to fees that can often make ideas and projects\r\n    // unfeasible. As we said, it will be a future decision of a future community.\r\n    \r\n    \r\n    function ejectProtocol() external onlyOwner() {\r\n        EJECT_PROTOCOL = true;    \r\n        emit ProtocolChanged( block.number , true );\r\n    }\r\n    \r\n    function revertProtocol() external onlyOwner(){\r\n        EJECT_PROTOCOL = false;\r\n        emit ProtocolChanged( block.number , false );\r\n    }\r\n      \r\n\r\n    function _transferPipeline(address sender, address recipient, uint256 _tAmount,bool freeFee) private feePolicy(freeFee) {\r\n        \r\n        if(freeFee) {\r\n          return _freeFeeTransfer(sender,recipient, _tAmount);\r\n        }\r\n        \r\n        \r\n        uint256 current_rate = _getRate();\r\n        \r\n        if( !_isExcluded[sender] && !_isExcluded[recipient]){\r\n            \r\n            return _transferStandard(sender,recipient, _tAmount , current_rate );\r\n            \r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            \r\n            return _transferToExcluded(sender, recipient, _tAmount , current_rate );\r\n        \r\n        } else if ( _isExcluded[sender] && !_isExcluded[recipient] ) {\r\n            \r\n            return _transferFromExcluded(sender, recipient, _tAmount, current_rate );\r\n            \r\n        } else {\r\n            \r\n            return _transferBothExcluded(sender, recipient, _tAmount, current_rate );\r\n             \r\n        }\r\n        \r\n     \r\n    }\r\n    \r\n    function _getFeeValuesForOneTransfer(uint256 _tAmount, uint256 currentRate ) private view returns( uint256 , uint256 , uint256 , uint256, uint256 , uint256 ) {\r\n        \r\n        ( uint _amountTax, uint _tAmountTax ) = _taxValues( _tAmount,  currentRate );\r\n\r\n        ( uint _amountLiq , uint _tAmountLiq ) = _liquidityValues( _tAmount, currentRate );\r\n        \r\n        ( uint _amountCamp, uint _tAmountCamp ) = _campaignValues( _tAmount,  currentRate );\r\n         \r\n        return ( _amountTax , _tAmountTax, _amountLiq , _tAmountLiq , _amountCamp , _tAmountCamp );\r\n        \r\n    }\r\n    \r\n    function _freeFeeTransfer(address sender, address recipient, uint256 _tAmount) private {\r\n    \r\n        uint256 _amount = _tAmount.mul(_getRate()); \r\n        \r\n        if( !_isExcluded[sender] && !_isExcluded[recipient] ){\r\n            _totalTopSupply[sender] = _totalTopSupply[sender].sub(_amount);\r\n            _totalTopSupply[recipient] = _totalTopSupply[recipient].add(_amount);\r\n            return;\r\n            \r\n        } else if( !_isExcluded[sender] && _isExcluded[recipient] ){\r\n            _totalTopSupply[sender] = _totalTopSupply[sender].sub(_amount);\r\n            _totalTopSupply[recipient] = _totalTopSupply[recipient].add(_amount);\r\n            _totalMiddleSupply[recipient] = _totalMiddleSupply[recipient].add(_tAmount);\r\n            return;\r\n            \r\n        } else if( _isExcluded[sender] && !_isExcluded[recipient] ){\r\n            _totalTopSupply[sender] = _totalTopSupply[sender].sub(_amount);\r\n            _totalMiddleSupply[sender] = _totalMiddleSupply[sender].sub(_tAmount);\r\n            _totalTopSupply[recipient] = _totalTopSupply[recipient].add(_amount);\r\n         \r\n            return;\r\n        } else {\r\n            _totalTopSupply[sender] = _totalTopSupply[sender].sub(_amount);\r\n            _totalMiddleSupply[sender] = _totalMiddleSupply[sender].sub(_tAmount);\r\n            _totalTopSupply[recipient] = _totalTopSupply[recipient].add(_amount);\r\n            _totalMiddleSupply[recipient] = _totalMiddleSupply[recipient].add(_tAmount);\r\n            return;\r\n        }  \r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 _tAmount ,uint256 current_rate ) private {\r\n     \r\n      uint256 _amount = _tAmount.mul(current_rate); \r\n\r\n      ( uint _amountTax, uint _tAmountTax , uint _amountLiq , uint _tAmountLiq, uint _amountCamp, uint _tAmountCamp  ) = _getFeeValuesForOneTransfer( _tAmount, current_rate );\r\n      \r\n    _totalTopSupply[sender] = _totalTopSupply[sender].sub(_amount);\r\n\r\n    _totalTopSupply[recipient] = _totalTopSupply[recipient].add(_amount.sub(_amountLiq).sub(_amountTax).sub(_amountCamp));\r\n\r\n      deductions( _amountTax , _tAmountTax ,_amountLiq , _tAmountLiq ,  _amountCamp,  _tAmountCamp );\r\n    \r\n     uint _tAmountSubtracted = _tAmount.sub(_tAmountLiq).sub(_tAmountTax).sub(_tAmountCamp);\r\n    \r\n      emit Transfer( sender, recipient, _tAmountSubtracted );\r\n \r\n    }\r\n    \r\n    function _transferToExcluded(address sender, address recipient, uint256 _tAmount ,  uint256 current_rate ) private {\r\n     \r\n      uint256 _amount = _tAmount.mul(current_rate); \r\n\r\n      ( uint _amountTax, uint _tAmountTax  , uint _amountLiq , uint _tAmountLiq, uint _amountCamp, uint _tAmountCamp ) = _getFeeValuesForOneTransfer( _tAmount, current_rate );\r\n\r\n\r\n      _totalTopSupply[sender] = _totalTopSupply[sender].sub(_amount);\r\n\r\n\r\n      _totalTopSupply[recipient] = _totalTopSupply[recipient].add(_amount.sub(_amountLiq).sub(_amountTax).sub(_amountCamp));\r\n\r\n      uint _tAmountSubtracted = _tAmount.sub(_tAmountLiq).sub(_tAmountTax).sub(_tAmountCamp);\r\n\r\n      _totalMiddleSupply[recipient] =  _totalMiddleSupply[recipient].add(_tAmountSubtracted);\r\n      \r\n      deductions(  _amountTax , _tAmountTax,_amountLiq , _tAmountLiq, _amountCamp, _tAmountCamp  );\r\n    \r\n      emit Transfer(sender, recipient, _tAmountSubtracted ); \r\n     }\r\n     \r\n    function _transferFromExcluded(address sender, address recipient, uint256 _tAmount ,  uint256 current_rate ) private {\r\n\r\n      uint256 _amount = _tAmount.mul(current_rate); \r\n\r\n      ( uint _amountTax, uint _tAmountTax , uint _amountLiq , uint _tAmountLiq, uint _amountCamp, uint _tAmountCamp  ) = _getFeeValuesForOneTransfer( _tAmount, current_rate );\r\n\r\n      _totalTopSupply[sender] = _totalTopSupply[sender].sub(_amount);\r\n      \r\n      _totalMiddleSupply[sender] =  _totalMiddleSupply[sender].sub(_tAmount);\r\n\r\n      _totalTopSupply[recipient] = _totalTopSupply[recipient].add(_amount.sub(_amountLiq).sub(_amountTax).sub(_amountCamp));\r\n      \r\n      deductions( _amountTax , _tAmountTax ,_amountLiq , _tAmountLiq, _amountCamp, _tAmountCamp );\r\n\r\n      uint _tAmountSubtracted = _tAmount.sub(_tAmountLiq).sub(_tAmountTax).sub(_tAmountCamp);\r\n\r\n      emit Transfer(sender, recipient, _tAmountSubtracted); \r\n     }\r\n    \r\n    function _transferBothExcluded(address sender, address recipient, uint256 _tAmount,  uint256 current_rate ) private {\r\n\r\n      uint256 _amount = _tAmount.mul(current_rate); \r\n\r\n      ( uint _amountTax, uint _tAmountTax , uint _amountLiq , uint _tAmountLiq, uint _amountCamp, uint _tAmountCamp  ) = _getFeeValuesForOneTransfer( _tAmount, current_rate );\r\n\r\n      _totalTopSupply[sender] = _totalTopSupply[sender].sub(_amount);\r\n      \r\n      _totalMiddleSupply[sender] =  _totalMiddleSupply[sender].sub(_tAmount);\r\n      \r\n      _totalTopSupply[recipient] = _totalTopSupply[recipient].add(_amount.sub(_amountLiq).sub(_amountTax).sub(_amountCamp));\r\n\r\n\r\n     uint _tAmountSubtracted = _tAmount.sub(_tAmountLiq).sub(_tAmountTax).sub(_tAmountCamp);\r\n\r\n     _totalMiddleSupply[recipient] =  _totalMiddleSupply[recipient].add(_tAmountSubtracted);\r\n      \r\n     deductions( _amountTax , _tAmountTax ,_amountLiq , _tAmountLiq, _amountCamp, _tAmountCamp );\r\n    \r\n      emit Transfer(sender, recipient, _tAmountSubtracted); \r\n     }\r\n\r\n    function deductions(  uint _amountTax , uint _tAmountTax, uint _amountLiq, uint _tAmountLiq, uint _amountCamp, uint _tAmountCamp ) private {\r\n         _reflectFee(_amountTax, _tAmountTax);\r\n         _setLiquidity( _amountLiq, _tAmountLiq );\r\n         _setCampaign(_amountCamp, _tAmountCamp );\r\n    }\r\n\r\n    function _reflectFee(uint256 _amount, uint256 _tAmount) private {\r\n        _totalBottomSupply = _totalBottomSupply.sub( _amount );\r\n        _totalFees = _totalFees.add( _tAmount );\r\n    }\r\n    \r\n    function _setLiquidity(uint256 _amount, uint _tAmount ) private {\r\n        _totalTopSupply[address(this)] = _totalTopSupply[address(this)].add(_amount);\r\n        if(_isExcluded[address(this)]){\r\n            _totalMiddleSupply[address(this)] = _totalMiddleSupply[address(this)].add(_tAmount);\r\n        }        \r\n    }\r\n    \r\n    function _setCampaign( uint _amount, uint _tAmount ) private {\r\n         _totalTopSupply[_campaignAddress] = _totalTopSupply[_campaignAddress].add(_amount);\r\n        if(_isExcluded[_campaignAddress]){\r\n            _totalMiddleSupply[_campaignAddress] = _totalMiddleSupply[_campaignAddress].add(_tAmount);\r\n        }       \r\n    }\r\n\r\n    // SWAP CONCERNS //\r\n    \r\n    // Creates a Withdraw function to fixed a bad behavior from the Swap logic legacy \r\n    // More about this error in our legacy code SSS-O3 Page 11 -> https://certik-public-assets.s3.amazonaws.com/CertiK+Audit+Report+for+SafeMoon.pdf\r\n    \r\n    // An event is emitted and the withdraw resources is set at liquidity pool manually.\r\n    // How the execution of each transaction already sends the balances direct to the pool liquidity, doesnt\r\n    // have the risk of acummulates a lot BNB's on the contract and only the remains of BNB, which were not able to enter the pool\r\n    \r\n    function withdrawToManualLiquify() external onlyOwner() {\r\n        (bool success,) = _msgSender().call{ value: address(this).balance }(\"\");\r\n        require(success, \"Withdraw failed.\");\r\n        emit ManualWithdrawToLiquify( _msgSender() , address(this).balance );\r\n    }\r\n    \r\n     function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n    \r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwapToLiquify {\r\n        // split the contract balance into halves\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidity(otherHalf, newBalance);\r\n        \r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function setRouterAddress(address newRouter) public onlyOwner() {\r\n     \r\n        IUniswapV2Router02 _newPancakeRouter = IUniswapV2Router02(newRouter);\r\n        \r\n        uniswapV2Pair = IUniswapV2Factory(_newPancakeRouter.factory()).createPair(address(this), _newPancakeRouter.WETH());\r\n        \r\n        uniswapV2Router = _newPancakeRouter;\r\n    }\r\n\r\n   \r\n\r\n\r\n    \r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"ManualWithdrawToLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"ejectProtocol\",\"type\":\"bool\"}],\"name\":\"ProtocolChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EJECT_PROTOCOL\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_campaignAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_campaignFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tAmount\",\"type\":\"uint256\"}],\"name\":\"burnTokensAndIncreaseReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ejectProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revertProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_campaign_address\",\"type\":\"address\"}],\"name\":\"setCampaignAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignFee\",\"type\":\"uint256\"}],\"name\":\"setCampaignFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToManualLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GirlDogeCoin", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "2", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1bc87ffa1174e6f6da909d14834e8660ea6de070858c7e2c3c732297563a34d1"}