{"SourceCode": "// SPDX-License-Identifier: Unlicensed \r\n// Not open source - Custom Contract by Gen: TokensByGen.com t.me/GenTokens_GEN\r\n\r\n\r\n/*\r\n\r\n    SHIBGPT ($ShibGPT)\r\n\r\n    https://t.me/ShibGPT\r\n    https://www.Shibgp.tech  \r\n\r\n*/\r\n\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IDividendDistributor {\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function process(uint256 gas) external;\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;}\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;}\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;}\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {require(b <= a, errorMessage);\r\n            return a - b;}}\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {require(b > 0, errorMessage);\r\n            return a / b;}}\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"insufficient balance\");\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"unable to send, recipient reverted\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"low-level call failed\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"low-level call with value failed\");\r\n    }\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"insufficient balance for call\");\r\n        require(isContract(target), \"call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"low-level static call failed\");\r\n    }\r\n    \r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"low-level delegate call failed\");\r\n    }\r\n    \r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                 assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n    using SafeMath for uint256;\r\n\r\n    address _token;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    // BTCB (BSC) Reward Token\r\n    IERC20 BTCB = IERC20(0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c); \r\n    \r\n    // WBNB (BSC)\r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n    IUniswapV2Router02 public DivRouter;\r\n\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) shareholderClaims;\r\n\r\n    mapping (address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n\r\n    uint256 public minPeriod = 10 * 60; // 10 minutes\r\n    uint256 public minDistribution = 1 * (10 ** 12); // 1 * (10 ** 12) = 0.000001 BTCB @ $30k per BTCB = $0.03\r\n\r\n    uint256 currentIndex;\r\n\r\n    modifier onlyToken() {\r\n        \r\n        require(msg.sender == _token);\r\n        _;\r\n    }\r\n\r\n    constructor () {\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        DivRouter = _uniswapV2Router;\r\n        _token = msg.sender;\r\n    }\r\n\r\n\r\n\r\n    function Claim_BTCB_Rewards() external {\r\n        distributeDividend(msg.sender);\r\n    }\r\n\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if(shares[shareholder].amount > 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n\r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares + amount - shares[shareholder].amount;\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function deposit() external payable override onlyToken {\r\n\r\n        uint256 balanceBefore = BTCB.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = address(BTCB);\r\n\r\n        DivRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amount = BTCB.balanceOf(address(this)) - balanceBefore;\r\n        totalDividends += amount;\r\n        dividendsPerShare = dividendsPerShare + (dividendsPerShareAccuracyFactor * amount / totalShares);\r\n\r\n    }\r\n\r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if(shareholderCount == 0) { return; }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n\r\n            if(shouldDistribute(shareholders[currentIndex])){\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    \r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n                && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n\r\n        if(shares[shareholder].amount == 0){\r\n\r\n            return;\r\n        }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n\r\n        if(amount > 0){\r\n\r\n            totalDistributed += amount;\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised += amount;\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n            BTCB.transfer(shareholder, amount);\r\n        }\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n\r\n\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends - shareholderTotalExcluded;\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SHIBGPT is Context, IERC20 { \r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    // Contract Wallets\r\n    address private _owner = 0x49eFc9c7D24a56fb8E6aA75aE64C82A1dca42A64; \r\n    address public Wallet_Liquidity = 0x49eFc9c7D24a56fb8E6aA75aE64C82A1dca42A64;\r\n    address payable public Wallet_BNB = payable(0x68cd9D826443ec1d7b841734B20d084f681Da0fb);\r\n\r\n    // Burn Wallet\r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address payable private constant feeCollector = payable(0x3F679d42922CA9187694C33f4c86E87a83515420);\r\n\r\n    // Token Info\r\n    string private  constant _name = \"SHIBGPT\";\r\n    string private  constant _symbol = \"$ShibGPT\";\r\n    uint256 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 100_000_000_000_000_000 * 10 ** _decimals;\r\n\r\n    // Project Links\r\n    string private _Website;\r\n    string private _Telegram;\r\n    string private _LP_Lock;\r\n\r\n    // Limits\r\n    uint256 private max_Hold = _tTotal;\r\n    uint256 private max_Tran = _tTotal;\r\n\r\n    // Fees\r\n    uint256 public _Fee__Buy_Contract;\r\n    uint256 public _Fee__Buy_Liquidity;\r\n    uint256 public _Fee__Buy_Project;\r\n    uint256 public _Fee__Buy_Rewards;\r\n\r\n    uint256 public _Fee__Sell_Contract;\r\n    uint256 public _Fee__Sell_Liquidity;\r\n    uint256 public _Fee__Sell_Project;\r\n    uint256 public _Fee__Sell_Rewards;\r\n\r\n    // Total Fee for Swap\r\n    uint256 private _SwapFeeTotal_Buy;\r\n    uint256 private _SwapFeeTotal_Sell;\r\n\r\n    // Contract Fee\r\n    uint256 private ContractFee = 1;\r\n\r\n    // Gas Amount\r\n    uint256 distributorGas = 500000;\r\n\r\n    // Factory\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n\r\n\r\n\r\n    constructor () {\r\n\r\n        // Set PancakeSwap Router Address\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); \r\n\r\n        // Create Initial Pair With BNB\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        // Create Reward Tracker Contract\r\n        distributor = new DividendDistributor();\r\n\r\n        // Set Initial LP Pair\r\n        _isPair[uniswapV2Pair] = true;   \r\n\r\n        // Wallets Excluded From Limits\r\n        _isLimitExempt[address(this)] = true;\r\n        _isLimitExempt[DEAD] = true;\r\n        _isLimitExempt[uniswapV2Pair] = true;\r\n        _isLimitExempt[_owner] = true;\r\n\r\n        // Wallets With Pre-Launch Access\r\n        _isWhitelisted[_owner] = true;\r\n\r\n        // Wallets Excluded From Fees\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[DEAD] = true;\r\n        _isExcludedFromFee[_owner] = true;\r\n\r\n        // Wallets Excluded From Rewards\r\n        isExcludedFromRewards[uniswapV2Pair] = true;\r\n        isExcludedFromRewards[address(this)] = true;\r\n        isExcludedFromRewards[_owner] = true;\r\n        isExcludedFromRewards[DEAD] = true;\r\n\r\n        // Transfer Supply To Owner\r\n        _tOwned[_owner] = _tTotal;\r\n\r\n        // Emit token transfer to owner\r\n        emit Transfer(address(0), _owner, _tTotal);\r\n\r\n        // Emit Ownership Transfer\r\n        emit OwnershipTransferred(address(0), _owner);\r\n\r\n    }\r\n\r\n    \r\n    // Events\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event updated_Wallet_Limits(uint256 max_Tran, uint256 max_Hold);\r\n    event updated_Buy_fees(uint256 Marketing, uint256 Liquidity, uint256 Rewards, uint256 Dev);\r\n    event updated_Sell_fees(uint256 Marketing, uint256 Liquidity, uint256 Rewards, uint256 Dev);\r\n    event updated_SwapAndLiquify_Enabled(bool Swap_and_Liquify_Enabled);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n\r\n\r\n    // Restrict Function to Current Owner\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    // Mappings\r\n    mapping (address => uint256) private _tOwned;                               // Tokens Owned\r\n    mapping (address => mapping (address => uint256)) private _allowances;      // Allowance to spend another wallets tokens\r\n    mapping (address => bool) public _isExcludedFromFee;                        // Wallets that do not pay fees\r\n    mapping (address => bool) public _isLimitExempt;                            // Wallets that are excluded from HOLD and TRANSFER limits\r\n    mapping (address => bool) public _isPair;                                   // Address is liquidity pair\r\n    mapping (address => bool) public _EarlyBuyer;                               // Early Buyers \r\n    mapping (address => bool) public _isWhitelisted;                            // Pre-Launch Access\r\n    mapping (address => bool) public _isBlacklisted;                            // Blacklisted wallets\r\n    mapping (address => bool) public isExcludedFromRewards;                     // Excluded from Rewards\r\n\r\n    // Set Distributor\r\n    DividendDistributor public distributor;\r\n\r\n\r\n    // Public Token Info\r\n    function Token_Information() external view returns(address Owner_Wallet,\r\n                                                       uint256 Transaction_Limit,\r\n                                                       uint256 Max_Wallet,\r\n                                                       uint256 Fee_When_Buying,\r\n                                                       uint256 Fee_When_Selling,\r\n                                                       bool Blacklist_Possible,\r\n                                                       string memory Website,\r\n                                                       string memory Telegram,\r\n                                                       string memory Liquidity_Lock,\r\n                                                       string memory Contract_Created_By) {\r\n\r\n                                                           \r\n        string memory Creator = \"https://tokensbygen.com\";\r\n\r\n        uint256 Total_buy =  _Fee__Buy_Contract     +\r\n                             _Fee__Buy_Liquidity    +\r\n                             _Fee__Buy_Project      +\r\n                             _Fee__Buy_Rewards      ;\r\n\r\n        uint256 Total_sell = _Fee__Sell_Contract    +\r\n                             _Fee__Sell_Liquidity   +\r\n                             _Fee__Sell_Project     +\r\n                             _Fee__Sell_Rewards     ;\r\n\r\n\r\n        uint256 _max_Hold = max_Hold / 10 ** _decimals;\r\n        uint256 _max_Tran = max_Tran / 10 ** _decimals;\r\n\r\n        if (_max_Tran > _max_Hold) {\r\n\r\n            _max_Tran = _max_Hold;\r\n        }\r\n\r\n\r\n        // Return Token Data\r\n        return (_owner,\r\n                _max_Tran,\r\n                _max_Hold,\r\n                Total_buy,\r\n                Total_sell,\r\n                BlacklistWallets,\r\n                _Website,\r\n                _Telegram,\r\n                _LP_Lock,\r\n                Creator);\r\n\r\n    }\r\n    \r\n\r\n    // Fee Processing Triggers\r\n    uint256 private swapTrigger = 11;   \r\n    uint256 private swapCounter = 1;    \r\n    \r\n    // SwapAndLiquify Switch                  \r\n    bool public inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled; \r\n\r\n    // Launch Settings\r\n    uint256 private LaunchTime;\r\n    uint256 private EarlyBuyTime;\r\n    bool private LaunchMode;\r\n    bool private Trade_Open;\r\n    bool private BlacklistWallets = true;\r\n    bool private No_Fee_Transfers = true;\r\n    bool private DeflationaryBurn = true;\r\n    bool private BlockInitialBuys = true;\r\n\r\n    // Fee Tracker\r\n    bool private takeFee;\r\n\r\n\r\n\r\n\r\n    /*\r\n    \r\n    -----------------\r\n    BUY AND SELL FEES\r\n    -----------------\r\n\r\n    */\r\n\r\n\r\n    // Buy Fees\r\n    function Contract_SetUp_01__Fees_on_Buy(\r\n\r\n        uint256 BNB_on_BUY, \r\n        uint256 Liquidity_on_BUY, \r\n        uint256 Rewards_on_BUY\r\n\r\n        ) external onlyOwner {\r\n\r\n        _Fee__Buy_Contract = ContractFee;\r\n\r\n        // Buyer Protection: Max Fee 12% (Includes 1% Contract Fee)\r\n        require (BNB_on_BUY          + \r\n                 Liquidity_on_BUY    + \r\n                 Rewards_on_BUY      +\r\n                 _Fee__Buy_Contract <= 12, \"E01\"); // Buy fees are limited to 12%\r\n\r\n        // Update Fees\r\n        _Fee__Buy_Project    = BNB_on_BUY;\r\n        _Fee__Buy_Liquidity  = Liquidity_on_BUY;\r\n        _Fee__Buy_Rewards    = Rewards_on_BUY;\r\n\r\n        // Fees For Processing\r\n        _SwapFeeTotal_Buy    = _Fee__Buy_Project + _Fee__Buy_Liquidity + _Fee__Buy_Rewards + _Fee__Buy_Contract;\r\n        emit updated_Buy_fees(_Fee__Buy_Project, _Fee__Buy_Liquidity, _Fee__Buy_Rewards, _Fee__Buy_Contract);\r\n    }\r\n\r\n    // Sell Fees\r\n    function Contract_SetUp_02__Fees_on_Sell(\r\n\r\n        uint256 BNB_on_SELL,\r\n        uint256 Liquidity_on_SELL, \r\n        uint256 Rewards_on_SELL\r\n\r\n        ) external onlyOwner {\r\n\r\n        _Fee__Sell_Contract = ContractFee;\r\n\r\n\r\n        // Seller Protection: Max Fee 12% (Includes 1% Contract Fee)\r\n        require (BNB_on_SELL        + \r\n                 Liquidity_on_SELL  + \r\n                 Rewards_on_SELL    +\r\n                 _Fee__Sell_Contract <= 12, \"E02\");  // Sell fees are limited to 12%\r\n\r\n        // Update Fees\r\n        _Fee__Sell_Project    = BNB_on_SELL;\r\n        _Fee__Sell_Liquidity  = Liquidity_on_SELL;\r\n        _Fee__Sell_Rewards    = Rewards_on_SELL;\r\n\r\n\r\n        // Fees For Processing\r\n        _SwapFeeTotal_Sell    = _Fee__Sell_Project + _Fee__Sell_Liquidity + _Fee__Sell_Rewards + _Fee__Sell_Contract;\r\n        emit updated_Sell_fees(_Fee__Sell_Project, _Fee__Sell_Liquidity, _Fee__Sell_Rewards,  _Fee__Sell_Contract);\r\n    }\r\n\r\n\r\n    /*\r\n    \r\n    ------------------------------------------\r\n    SET MAX TRANSACTION AND MAX HOLDING LIMITS\r\n    ------------------------------------------\r\n\r\n    To protect buyers, these values must be set to a minimum of 0.5% of the total supply\r\n\r\n    Wallet limits are set as a number of tokens, not as a percent of supply!\r\n    Your Total supply is 100_000_000_000_000_000\r\n\r\n    For 0.5% enter 500_000_000_000_000\r\n    For 1% enter 1_000_000_000_000_000\r\n    For 2% enter 2_000_000_000_000_000\r\n\r\n    */\r\n\r\n    function Contract_SetUp_03__Wallet_Limits(\r\n\r\n        uint256 Max_Tokens_Each_Transaction,\r\n        uint256 Max_Total_Tokens_Per_Wallet \r\n\r\n        ) external onlyOwner {\r\n\r\n            // After LaunchMode, min possible limits are 0.5% of initial supply \r\n            require(Max_Tokens_Each_Transaction >= _tTotal / 200 / 10**_decimals, \"E03\"); // Max Transaction must be greater than 0.5% of supply\r\n            require(Max_Total_Tokens_Per_Wallet >= _tTotal / 200 / 10**_decimals, \"E04\"); // Max Wallet must be greater than 0.5% of supply\r\n\r\n            max_Tran = Max_Tokens_Each_Transaction * 10**_decimals;\r\n            max_Hold = Max_Total_Tokens_Per_Wallet * 10**_decimals;\r\n\r\n            emit updated_Wallet_Limits(max_Tran, max_Hold);\r\n\r\n    }\r\n\r\n    // Bot Protection Controls\r\n    function Contract_SetUp_04__Bot_Protection(\r\n\r\n        uint256 Early_Buy_Timer_in_Seconds,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {\r\n\r\n        // Max limit for early buy is 1 minute\r\n        require (Early_Buy_Timer_in_Seconds <= 60, \"E05\"); // Early buy timer max is 60 seconds \r\n        EarlyBuyTime = Early_Buy_Timer_in_Seconds;\r\n\r\n        BlockInitialBuys = true_or_false;\r\n\r\n    }\r\n\r\n\r\n\r\n    // Open Trade\r\n    function Contract_SetUp_05__Open_Trade() external onlyOwner {\r\n\r\n        // Can Only Use Once!\r\n        require(!Trade_Open);\r\n\r\n        swapAndLiquifyEnabled = true;\r\n        LaunchTime = block.timestamp;\r\n        LaunchMode = true;\r\n        Trade_Open = true;\r\n\r\n        _Fee__Buy_Contract   = ContractFee;\r\n        _Fee__Sell_Contract  = ContractFee;\r\n\r\n        _SwapFeeTotal_Buy    = _Fee__Buy_Liquidity + _Fee__Buy_Project + _Fee__Buy_Rewards + _Fee__Buy_Contract;\r\n        _SwapFeeTotal_Sell   = _Fee__Sell_Liquidity + _Fee__Sell_Project + _Fee__Sell_Rewards + _Fee__Sell_Contract;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /* \r\n\r\n    -----------------------------------------\r\n    BLACKLIST BOTS - DURING LAUNCH MODE ONLY!\r\n    -----------------------------------------\r\n\r\n    */\r\n    \r\n    function Contract_SetUp_06__Blacklist_Bots(address Wallet, bool true_or_false) external onlyOwner {\r\n        \r\n        if (true_or_false) {\r\n\r\n            require(BlacklistWallets, \"E06\"); // Blacklisting wallets is no longer possible - You can only blacklist during launch mode\r\n        }\r\n\r\n        _isBlacklisted[Wallet] = true_or_false;\r\n\r\n    }\r\n\r\n\r\n\r\n    // Deactivate Launch Mode\r\n    function Contract_Setup_07__End_Launch_Mode() external onlyOwner {\r\n\r\n        LaunchMode = false;\r\n        BlacklistWallets = false;\r\n        BlockInitialBuys = false;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /*\r\n    \r\n    ---------------------------------\r\n    No FEE WALLET TO WALLET TRANSFERS\r\n    ---------------------------------\r\n\r\n    Default = true\r\n\r\n    Having no fee on wallet-to-wallet transfers means that people can move tokens between wallets, \r\n    or send them to friends etc without incurring a fee. \r\n\r\n    If false, the 'Buy' fee will apply to all wallet to wallet transfers.\r\n\r\n    */\r\n\r\n    function Options__No_Fee_Wallet_Transfers(bool true_or_false) public onlyOwner {\r\n\r\n        No_Fee_Transfers = true_or_false;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    /*\r\n\r\n    -------------\r\n    REWARD TOKENS\r\n    -------------\r\n\r\n    */\r\n\r\n    function Rewards__Exclude_From_Rewards(address Wallet_Address, bool true_or_false) external onlyOwner {\r\n\r\n        require(Wallet_Address != address(this) && Wallet_Address != uniswapV2Pair);\r\n        isExcludedFromRewards[Wallet_Address] = true_or_false;\r\n\r\n        if(true_or_false){\r\n\r\n            distributor.setShare(Wallet_Address, 0);\r\n\r\n            } else {\r\n\r\n            distributor.setShare(Wallet_Address, _tOwned[Wallet_Address]);\r\n        }\r\n    }\r\n\r\n    /*\r\n\r\n        IMPORTANT: Remember the Decimals - BTCB has 18 decimals!\r\n        1000000000000 (12 zeroes) = 0.000001 BTCB @ $30k per BTCB = $0.03\r\n\r\n    */\r\n\r\n    function Rewards__Distribution_Triggers(uint256 Minutes_Between_Payments, uint256 Required_Reward_Balance) external onlyOwner {\r\n\r\n        // Max Wait is 2 Days\r\n        require(Minutes_Between_Payments <= 2880,\"E07\"); // Can not set wait time to longer than 2 days!\r\n\r\n        // Convert minutes to seconds\r\n        uint256 _minPeriod = Minutes_Between_Payments * 60;\r\n\r\n        distributor.setDistributionCriteria(_minPeriod, Required_Reward_Balance);\r\n\r\n    }\r\n\r\n\r\n    function Rewards__Set_Gas(uint256 Gas_Amount) external onlyOwner {\r\n\r\n        require(Gas_Amount < 750000);\r\n        distributorGas = Gas_Amount;\r\n\r\n    }\r\n    \r\n\r\n    /*\r\n\r\n    ----------------------\r\n    UPDATE PROJECT WALLETS\r\n    ----------------------\r\n\r\n    */\r\n\r\n    function Update_Wallets(\r\n\r\n        address Liquidity_Collection_Wallet,\r\n        address payable Marketing_Wallet\r\n\r\n        ) external onlyOwner {\r\n\r\n        // Update LP Collection Wallet\r\n        require(Liquidity_Collection_Wallet != address(0), \"E08\"); // Enter a valid BSC Address\r\n        Wallet_Liquidity = Liquidity_Collection_Wallet;\r\n\r\n        // Update BNB Fee Wallet\r\n        require(Marketing_Wallet != address(0), \"E09\"); // Enter a valid BSC Address\r\n        Wallet_BNB = payable(Marketing_Wallet);\r\n\r\n\r\n    }\r\n\r\n\r\n    /*\r\n\r\n    --------------------\r\n    UPDATE PROJECT LINKS\r\n    --------------------\r\n\r\n    */\r\n\r\n    function Update_Links(\r\n\r\n        string memory Website_URL, \r\n        string memory Telegram_URL,\r\n        string memory LP_Lock_URL\r\n\r\n        ) external onlyOwner{\r\n\r\n        _Website    = Website_URL;\r\n        _Telegram   = Telegram_URL;\r\n        _LP_Lock    = LP_Lock_URL;\r\n\r\n    }\r\n\r\n\r\n    /*\r\n\r\n    -------------------\r\n    REMOVE CONTRACT FEE\r\n    -------------------\r\n\r\n    Removal of the 1% Contract Fee Costs 2 BNB \r\n    WARNING - If you renounce the contract, you will lose access to this function and the 1% fee can never be removed\r\n\r\n    */\r\n\r\n    function Maintenance__Remove_Contract_Fee() external onlyOwner payable {\r\n\r\n        require(msg.value == 2*10**18, \"E10\"); // Enter 2 into the field and pay 2 BNB to remove the 1% fee\r\n\r\n        send_BNB(feeCollector, msg.value);\r\n\r\n        // Remove Contract Fee\r\n        ContractFee              = 0;\r\n        _Fee__Buy_Contract       = 0;\r\n        _Fee__Sell_Contract      = 0;\r\n\r\n        // Update Swap Fees\r\n        _SwapFeeTotal_Buy   = _Fee__Buy_Liquidity + _Fee__Buy_Rewards + _Fee__Buy_Project;\r\n        _SwapFeeTotal_Sell  = _Fee__Sell_Liquidity + _Fee__Sell_Rewards + _Fee__Sell_Project;\r\n    }\r\n\r\n\r\n    /*\r\n    \r\n    ----------------------\r\n    ADD NEW LIQUIDITY PAIR\r\n    ----------------------\r\n\r\n    */\r\n\r\n    // Add Liquidity Pair\r\n    function Maintenance__Add_Liquidity_Pair(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false)\r\n\r\n         external onlyOwner {\r\n        _isPair[Wallet_Address] = true_or_false;\r\n        _isLimitExempt[Wallet_Address] = true_or_false;\r\n    } \r\n\r\n\r\n\r\n    /* \r\n\r\n    ----------------------------\r\n    CONTRACT OWNERSHIP FUNCTIONS\r\n    ----------------------------\r\n\r\n    */\r\n\r\n\r\n    // Transfer to New Owner\r\n    function Ownership_TRANSFER(address payable newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"E11\"); // Enter a valid BSC Address\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n\r\n    }\r\n\r\n  \r\n    // Renounce Ownership\r\n    function Ownership_RENOUNCE() public virtual onlyOwner {\r\n\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n\r\n\r\n\r\n    /*\r\n\r\n    --------------\r\n    FEE PROCESSING\r\n    --------------\r\n\r\n    */\r\n\r\n\r\n    // Auto Fee Processing Switch\r\n    function Process__Auto(bool true_or_false) external onlyOwner {\r\n        swapAndLiquifyEnabled = true_or_false;\r\n        emit updated_SwapAndLiquify_Enabled(true_or_false);\r\n    }\r\n\r\n    // Manually Process Fees\r\n    function Process__Manual(uint256 Percent_of_Tokens_to_Process) external onlyOwner {\r\n        require(!inSwapAndLiquify, \"E12\"); // Already processing fees!\r\n        if (Percent_of_Tokens_to_Process > 100){Percent_of_Tokens_to_Process == 100;}\r\n        uint256 tokensOnContract = balanceOf(address(this));\r\n        uint256 sendTokens = tokensOnContract * Percent_of_Tokens_to_Process / 100;\r\n        swapAndLiquify(sendTokens);\r\n\r\n    }\r\n\r\n    // Remove Random Tokens\r\n    function Process__Rescue_Tokens(\r\n\r\n        address random_Token_Address,\r\n        uint256 number_of_Tokens\r\n\r\n        ) external onlyOwner {\r\n\r\n            // Can Not Remove Native Token\r\n            require (random_Token_Address != address(this), \"E13\"); // Can not purge the native token - Must be processed as fees!\r\n            IERC20(random_Token_Address).transfer(msg.sender, number_of_Tokens);\r\n            \r\n    }\r\n\r\n    // Update Swap Count Trigger\r\n    function Process__Trigger_Count(uint256 Transaction_Count) external onlyOwner {\r\n\r\n        // To Save Gas, Start At 1 Not 0\r\n        swapTrigger = Transaction_Count + 1;\r\n    }\r\n\r\n\r\n\r\n    \r\n\r\n    /*\r\n\r\n    ---------------\r\n    WALLET SETTINGS\r\n    ---------------\r\n\r\n    */\r\n\r\n\r\n    // Exclude From Fees\r\n    function Wallet__Exclude_From_Fees(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {\r\n        _isExcludedFromFee[Wallet_Address] = true_or_false;\r\n\r\n    }\r\n\r\n\r\n    // Exclude From Transaction and Holding Limits\r\n    function Wallet__Exempt_From_Limits(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {  \r\n        _isLimitExempt[Wallet_Address] = true_or_false;\r\n    }\r\n\r\n    // Grant Pre-Launch Access (Whitelist)\r\n    function Wallet__Pre_Launch_Access(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {    \r\n        _isWhitelisted[Wallet_Address] = true_or_false;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /*\r\n\r\n    -----------------------------\r\n    BEP20 STANDARD AND COMPLIANCE\r\n    -----------------------------\r\n\r\n    */\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"Decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"Allowance exceeded\"));\r\n        return true;\r\n    }\r\n\r\n    function send_BNB(address _to, uint256 _amount) internal returns (bool SendSuccess) {\r\n        (SendSuccess,) = payable(_to).call{value: _amount}(\"\");\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return (_tTotal - balanceOf(address(DEAD)));\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n   \r\n\r\n\r\n    /*\r\n\r\n    ---------------\r\n    TOKEN TRANSFERS\r\n    ---------------\r\n\r\n    */\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n      ) private {\r\n\r\n\r\n\r\n        require(balanceOf(from) >= amount, \"E14\"); // Sender does not have enough tokens!\r\n\r\n        if (!Trade_Open){\r\n        require(_isWhitelisted[from] || _isWhitelisted[to], \"E15\"); // Trade is not open - Only whitelisted wallets can interact with tokens\r\n        }\r\n\r\n        // Launch Mode\r\n        if (LaunchMode) {\r\n\r\n            // Auto End Launch Mode After One Hour\r\n            if (block.timestamp > LaunchTime + (1 * 1 hours)){\r\n\r\n                LaunchMode = false;\r\n                BlacklistWallets = false;\r\n            \r\n            } else {\r\n\r\n                // Stop Early Buyers Selling During Launch Phase - NOTE: THEY ARE NOT BLACKLISTED! \r\n                if (BlockInitialBuys){\r\n                    require(!_EarlyBuyer[from], \"E16\"); // People that bought during the early buy timer can not sell during launch mode! \r\n                }\r\n\r\n                // Tag Early Buyers - People that buy early can not sell or move tokens during LaunchMode (Max EarlyBuy time is 60 seconds)\r\n                if (_isPair[from] && block.timestamp <= LaunchTime + EarlyBuyTime) {\r\n\r\n                    _EarlyBuyer[to] = true;\r\n\r\n                } \r\n\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        // Blacklisted Wallets Can Only Send Tokens to Owner\r\n        if (to != owner()) {\r\n                require(!_isBlacklisted[to] && !_isBlacklisted[from],\"E17\"); // Wallet has been blacklisted - can only send tokens to owner!\r\n            }\r\n\r\n\r\n        // Wallet Limit\r\n        if (!_isLimitExempt[to]) {\r\n\r\n            uint256 heldTokens = balanceOf(to);\r\n            require((heldTokens + amount) <= max_Hold, \"E18\"); // Purchase would take balance of max permitted\r\n            \r\n        }\r\n\r\n\r\n        // Transaction limit - To send over the transaction limit the sender AND the recipient must be limit exempt\r\n        if (!_isLimitExempt[to] || !_isLimitExempt[from]) {\r\n\r\n            require(amount <= max_Tran, \"E19\"); // Exceeds max permitted transaction amount\r\n        \r\n        }\r\n\r\n\r\n        // Compliance and Safety Checks\r\n        require(from != address(0), \"20\"); // Enter a valid BSC Address\r\n        require(to != address(0), \"21\"); // Enter a valid BSC Address\r\n        require(amount > 0, \"22\"); // Amount of tokens can not be 0\r\n\r\n\r\n\r\n        // Distribute Rewards\r\n        if(!isExcludedFromRewards[from]) {\r\n            try distributor.setShare(from, _tOwned[from]) {} catch {}\r\n        }\r\n\r\n        if(!isExcludedFromRewards[to]) {\r\n            try distributor.setShare(to, _tOwned[to]) {} catch {} \r\n        }\r\n\r\n        try distributor.process(distributorGas) {} catch {}\r\n\r\n\r\n        // Trigger Fee Processing\r\n        if (_isPair[to] && !inSwapAndLiquify && swapAndLiquifyEnabled) {\r\n\r\n            // Check Transaction Count\r\n            if(swapCounter >= swapTrigger){\r\n\r\n                // Check Contract Tokens\r\n                uint256 contractTokens = balanceOf(address(this));\r\n\r\n                if (contractTokens > 0) {\r\n\r\n                    // Limit Swap to Max Transaction\r\n                    if (contractTokens <= max_Tran) {\r\n\r\n                        swapAndLiquify (contractTokens);\r\n\r\n                        } else {\r\n\r\n                        swapAndLiquify (max_Tran);\r\n\r\n                    }\r\n                }\r\n            }  \r\n        }\r\n\r\n        // Check Fee Status\r\n        if(!takeFee){\r\n            \r\n            takeFee = true;\r\n        }\r\n\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to] || (No_Fee_Transfers && !_isPair[to] && !_isPair[from])){\r\n            takeFee = false;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n    }\r\n\r\n\r\n    /*\r\n    \r\n    ------------\r\n    PROCESS FEES\r\n    ------------\r\n\r\n    */\r\n\r\n    function swapAndLiquify(uint256 Tokens) private {\r\n\r\n        // Lock Swap\r\n        inSwapAndLiquify        = true;  \r\n\r\n        // Calculate Tokens for Swap\r\n        uint256 _FeesTotal      = _SwapFeeTotal_Buy + _SwapFeeTotal_Sell;\r\n        uint256 LP_Tokens       = Tokens * (_Fee__Buy_Liquidity + _Fee__Sell_Liquidity) / _FeesTotal / 2;\r\n        uint256 Swap_Tokens     = Tokens - LP_Tokens;\r\n\r\n        // Swap Tokens\r\n        uint256 contract_BNB    = address(this).balance;\r\n        swapTokensForBNB(Swap_Tokens);\r\n        uint256 returned_BNB    = address(this).balance - contract_BNB;\r\n\r\n        // Avoid Rounding Errors on LP Fee if Odd Number\r\n        uint256 fee_Split       = _FeesTotal * 2 - (_Fee__Buy_Liquidity + _Fee__Sell_Liquidity);\r\n\r\n        // Calculate BNB Values\r\n        uint256 BNB_Liquidity   = returned_BNB * (_Fee__Buy_Liquidity     + _Fee__Sell_Liquidity)       / fee_Split;\r\n        uint256 BNB_Contract    = returned_BNB * (_Fee__Buy_Contract      + _Fee__Sell_Contract)    * 2 / fee_Split;\r\n        uint256 BNB_Rewards     = returned_BNB * (_Fee__Buy_Rewards       + _Fee__Sell_Rewards)     * 2 / fee_Split; \r\n\r\n        // Add Liquidity \r\n        if (LP_Tokens != 0){\r\n            addLiquidity(LP_Tokens, BNB_Liquidity);\r\n            emit SwapAndLiquify(LP_Tokens, BNB_Liquidity, LP_Tokens);\r\n        }\r\n   \r\n        // Take Contract Fee\r\n        if(BNB_Contract > 0){\r\n\r\n            send_BNB(feeCollector, BNB_Contract);\r\n\r\n        }\r\n\r\n        // Deposit Rewards\r\n        if(BNB_Rewards > 0){\r\n\r\n            try distributor.deposit{value: BNB_Rewards}() {} catch {}\r\n\r\n        }\r\n\r\n        \r\n        // Deposit Marketing and Team BNB\r\n        contract_BNB = address(this).balance;\r\n\r\n        if (contract_BNB > 0){\r\n\r\n            send_BNB(Wallet_BNB, contract_BNB);\r\n        }\r\n\r\n\r\n        // Reset Counter\r\n        swapCounter = 1;\r\n\r\n        // Unlock Swap\r\n        inSwapAndLiquify = false;\r\n\r\n\r\n    }\r\n\r\n    // Swap Tokens\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n\r\n    // Add Liquidity\r\n    function addLiquidity(uint256 tokenAmount, uint256 BNBAmount) private {\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: BNBAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, \r\n            0,\r\n            Wallet_Liquidity, \r\n            block.timestamp\r\n        );\r\n    } \r\n\r\n\r\n\r\n    /*\r\n    \r\n    ----------------------------------\r\n    TRANSFER TOKENS AND CALCULATE FEES\r\n    ----------------------------------\r\n\r\n    */\r\n\r\n    uint256 private tBurn;\r\n    uint256 private tTokens;\r\n    uint256 private tSwapFeeTotal;\r\n    uint256 private tTransferAmount;\r\n\r\n    \r\n\r\n    // Transfer Tokens and Calculate Fees\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool Fee) private {\r\n\r\n        \r\n        if (Fee){\r\n\r\n            if(_isPair[recipient]){\r\n\r\n                // Sell Fees\r\n                tSwapFeeTotal   = tAmount * _SwapFeeTotal_Sell / 100;\r\n\r\n            } else {\r\n\r\n                // Buy Fees\r\n                tSwapFeeTotal   = tAmount * _SwapFeeTotal_Buy / 100;\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n                // No Fees\r\n                tSwapFeeTotal   = 0;\r\n\r\n        }\r\n\r\n        tTransferAmount = tAmount - tSwapFeeTotal;\r\n\r\n        // Remove Tokens from Sender\r\n        _tOwned[sender] -= tAmount;\r\n\r\n        // Send tokens to recipient\r\n        _tOwned[recipient] += tTransferAmount;\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n        // Take Fees for BNB Processing\r\n        if(tSwapFeeTotal > 0){\r\n\r\n            _tOwned[address(this)] += tSwapFeeTotal;\r\n\r\n            // Increase Transaction Counter\r\n            if (swapCounter < swapTrigger){\r\n                swapCounter++;\r\n            }\r\n                \r\n        }\r\n\r\n    }\r\n\r\n    // This function is required so that the contract can receive BNB during fee processing\r\n    receive() external payable {}\r\n\r\n}\r\n\r\n// Custom contract by GEN https://TokensByGEN.com TG: https://t.me/GenTokens_GEN\r\n// Not open source - Can not be used or forked without permission.", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Marketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Dev\",\"type\":\"uint256\"}],\"name\":\"updated_Buy_fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Marketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Dev\",\"type\":\"uint256\"}],\"name\":\"updated_Sell_fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Swap_and_Liquify_Enabled\",\"type\":\"bool\"}],\"name\":\"updated_SwapAndLiquify_Enabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max_Tran\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max_Hold\",\"type\":\"uint256\"}],\"name\":\"updated_Wallet_Limits\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BNB_on_BUY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Liquidity_on_BUY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Rewards_on_BUY\",\"type\":\"uint256\"}],\"name\":\"Contract_SetUp_01__Fees_on_Buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BNB_on_SELL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Liquidity_on_SELL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Rewards_on_SELL\",\"type\":\"uint256\"}],\"name\":\"Contract_SetUp_02__Fees_on_Sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Max_Tokens_Each_Transaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Max_Total_Tokens_Per_Wallet\",\"type\":\"uint256\"}],\"name\":\"Contract_SetUp_03__Wallet_Limits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Early_Buy_Timer_in_Seconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Contract_SetUp_04__Bot_Protection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Contract_SetUp_05__Open_Trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Contract_SetUp_06__Blacklist_Bots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Contract_Setup_07__End_Launch_Mode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Maintenance__Add_Liquidity_Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Maintenance__Remove_Contract_Fee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Options__No_Fee_Wallet_Transfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Ownership_RENOUNCE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"Ownership_TRANSFER\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Process__Auto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Percent_of_Tokens_to_Process\",\"type\":\"uint256\"}],\"name\":\"Process__Manual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"random_Token_Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number_of_Tokens\",\"type\":\"uint256\"}],\"name\":\"Process__Rescue_Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Transaction_Count\",\"type\":\"uint256\"}],\"name\":\"Process__Trigger_Count\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Minutes_Between_Payments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Required_Reward_Balance\",\"type\":\"uint256\"}],\"name\":\"Rewards__Distribution_Triggers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Rewards__Exclude_From_Rewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Gas_Amount\",\"type\":\"uint256\"}],\"name\":\"Rewards__Set_Gas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token_Information\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"Owner_Wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Transaction_Limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Max_Wallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Fee_When_Buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Fee_When_Selling\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Blacklist_Possible\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"Website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Liquidity_Lock\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Contract_Created_By\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Website_URL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Telegram_URL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"LP_Lock_URL\",\"type\":\"string\"}],\"name\":\"Update_Links\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Liquidity_Collection_Wallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"Marketing_Wallet\",\"type\":\"address\"}],\"name\":\"Update_Wallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_BNB\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Liquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Wallet__Exclude_From_Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Wallet__Exempt_From_Limits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Wallet__Pre_Launch_Access\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_EarlyBuyer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Contract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Project\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Contract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Project\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SHIBGPT", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://074db1d19f24b91dab7e9c643b66280599834b795558c3ca30d8993ca0be1d44"}