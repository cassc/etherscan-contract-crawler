{"SourceCode": "pragma solidity >=0.7.0 <0.9.0;\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface ERC20{\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract Exchange {\r\n\r\n\taddress owner;\r\n\tstruct referralRecord { bool hasDeposited; address referringAddress; uint256 unclaimedRewards1To2; uint256 referrals1To2AtLevel0;  uint256 referrals1To2CountAtLevel0; uint256 referrals1To2AtLevel1; uint256 referrals1To2CountAtLevel1; uint256 referrals1To2AtLevel2; uint256 referrals1To2CountAtLevel2; uint256 referrals1To2AtLevel3; uint256 referrals1To2CountAtLevel3; }\r\n\tmapping(address => referralRecord) public referralRecordMap;\r\n\r\n    struct Deposit { bool hasDeposited; uint256 depositedAmount; }\r\n    mapping(address => Deposit) public depositors;\r\n\r\n\tuint256 public minExchange1To2amtInTermsOfCoinBEP20USDT = uint256(50000000000000000000);\r\n\tuint256 public exchange1To2rate = uint256(100000000000000000000);\r\n\tuint256 public tax1To2rate = uint256(0);\r\n\tuint256 public from1To2AmtInBank = uint256(0);\r\n\tuint256 public totalUnclaimedRewards1To2 = uint256(0);\r\n\tuint256 public totalClaimedRewards1To2 = uint256(0);\r\n\tevent Exchanged (address indexed tgt);\r\n\r\n\tconstructor() {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t//This function allows the owner to specify an address that will take over ownership rights instead. Please double check the address provided as once the function is executed, only the new owner will be able to change the address back.\r\n\tfunction changeOwner(address _newOwner) public onlyOwner {\r\n\t\towner = _newOwner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\t\r\n\r\n/**\r\n * This function allows the owner to change the value of minExchange1To2amtInTermsOfCoinBEP20USDT.\r\n * Notes for _minExchange1To2amtInTermsOfCoinBEP20USDT : 1 Coin BEP20USDT is represented by 10^18.\r\n*/\r\n\tfunction changeValueOf_minExchange1To2amtInTermsOfCoinBEP20USDT (uint256 _minExchange1To2amtInTermsOfCoinBEP20USDT) external onlyOwner {\r\n\t\t minExchange1To2amtInTermsOfCoinBEP20USDT = _minExchange1To2amtInTermsOfCoinBEP20USDT;\r\n\t}\r\n\r\n\t\r\n\r\n/**\r\n * This function allows the owner to change the value of exchange1To2rate.\r\n * Notes for _exchange1To2rate : Number of Coin BEP20USDT (1 Coin BEP20USDT is represented by 10^18) to 1 Coin MX (represented by 1).\r\n*/\r\n\tfunction changeValueOf_exchange1To2rate (uint256 _exchange1To2rate) external onlyOwner {\r\n\t\t exchange1To2rate = _exchange1To2rate;\r\n\t}\r\n\r\n\t\r\n\r\n/**\r\n * This function allows the owner to change the value of tax1To2rate.\r\n * Notes for _tax1To2rate : 10000 is one percent\r\n*/\r\n\tfunction changeValueOf_tax1To2rate (uint256 _tax1To2rate) external onlyOwner {\r\n\t\t tax1To2rate = _tax1To2rate;\r\n\t}\r\n\r\n\r\n    function getDepositorInfo(address depositor)\r\n        external\r\n        view\r\n        returns (bool hasDeposited, uint256 depositedAmount)\r\n    {\r\n        return (depositors[depositor].hasDeposited, depositors[depositor].depositedAmount);\r\n    }\r\n\r\n/**\r\n * Function exchange1To2\r\n * Minimum Exchange Amount : Variable minExchange1To2amtInTermsOfCoinBEP20USDT\r\n * The function takes in 1 variable, (zero or a positive integer) v0. It can be called by functions both inside and outside of this contract. It does the following :\r\n * checks that v0 is greater than or equals to minExchange1To2amtInTermsOfCoinBEP20USDT\r\n * creates an internal variable referralAllocation with initial value addReferral1To2 with variable _amt as v0\r\n * calls ERC20(Address 0x55d398326f99059fF775485246999027B3197955)'s at transferFrom function  with variable sender as (the address that called this function), variable recipient as (the address of this contract), variable amount as v0\r\n * updates from1To2AmtInBank as (from1To2AmtInBank) + (((v0) * (tax1To2rate) * (100)) / (100000000))\r\n * checks that (ERC20(Address 0x4b042ECda98B0D11f3eE097023270e882673aA53)'s at balanceOf function  with variable recipient as (the address of this contract)) is greater than or equals to (((((v0) * ((1000000) - (tax1To2rate))) / (1000000)) * (exchange1To2rate)) / (1000000000000000000))\r\n * calls ERC20(Address 0x4b042ECda98B0D11f3eE097023270e882673aA53)'s at transfer function  with variable recipient as (the address that called this function), variable amount as (((((v0) * ((1000000) - (tax1To2rate))) / (1000000)) * (exchange1To2rate)) / (1000000000000000000))\r\n * emits event Exchanged with inputs the address that called this function\r\n*/\r\n\tfunction exchange1To2(uint256 v0) public {\r\n\t\trequire((v0 >= minExchange1To2amtInTermsOfCoinBEP20USDT), \"Too little exchanged\");\r\n\r\n        if (!depositors[msg.sender].hasDeposited) {\r\n            depositors[msg.sender].hasDeposited = true;\r\n            depositors[msg.sender].depositedAmount = v0;\r\n        }\r\n\t\tuint256 referralAllocation = addReferral1To2(v0);\r\n\t\tERC20(address(0x55d398326f99059fF775485246999027B3197955)).transferFrom(msg.sender, address(this), v0);\r\n\t\tfrom1To2AmtInBank  = (from1To2AmtInBank + ((v0 * tax1To2rate * uint256(100)) / uint256(100000000)));\r\n\t\trequire((ERC20(address(0x7eC614542AC60764eC4f3AE19173DECaf87aC16d)).balanceOf(address(this)) >= ((((v0 * (uint256(1000000) - tax1To2rate)) / uint256(1000000)) * exchange1To2rate) / uint256(1000000000000000000))), \"Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.\");\r\n\t\tERC20(address(0x7eC614542AC60764eC4f3AE19173DECaf87aC16d)).transfer(msg.sender, ((((v0 * (uint256(1000000) - tax1To2rate)) / uint256(1000000)) * exchange1To2rate) / uint256(1000000000000000000)));\r\n\t\temit Exchanged(msg.sender);\r\n\t}\r\n\r\n/**\r\n * Function withdrawReferral1To2\r\n * The function takes in 1 variable, (zero or a positive integer) _amt. It can be called by functions both inside and outside of this contract. It does the following :\r\n * checks that (referralRecordMap with element the address that called this function with element unclaimedRewards1To2) is greater than or equals to _amt\r\n * updates referralRecordMap (Element the address that called this function) (Entity unclaimedRewards1To2) as (referralRecordMap with element the address that called this function with element unclaimedRewards1To2) - (_amt)\r\n * updates totalUnclaimedRewards1To2 as (totalUnclaimedRewards1To2) - (_amt)\r\n * updates totalClaimedRewards1To2 as (totalClaimedRewards1To2) + (_amt)\r\n * checks that (ERC20(Address 0x55d398326f99059fF775485246999027B3197955)'s at balanceOf function  with variable recipient as (the address of this contract)) is greater than or equals to _amt\r\n * calls ERC20(Address 0x55d398326f99059fF775485246999027B3197955)'s at transfer function  with variable recipient as (the address that called this function), variable amount as _amt\r\n*/\r\n\tfunction withdrawReferral1To2(uint256 _amt) public {\r\n\t\trequire((referralRecordMap[msg.sender].unclaimedRewards1To2 >= _amt), \"Insufficient referral rewards to withdraw\");\r\n\t\treferralRecordMap[msg.sender].unclaimedRewards1To2  = (referralRecordMap[msg.sender].unclaimedRewards1To2 - _amt);\r\n\t\ttotalUnclaimedRewards1To2  = (totalUnclaimedRewards1To2 - _amt);\r\n\t\ttotalClaimedRewards1To2  = (totalClaimedRewards1To2 + _amt);\r\n\t\trequire((ERC20(address(0x55d398326f99059fF775485246999027B3197955)).balanceOf(address(this)) >= _amt), \"Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.\");\r\n\t\tERC20(address(0x55d398326f99059fF775485246999027B3197955)).transfer(msg.sender, _amt);\r\n\t}\r\n\r\n\r\n\tfunction addReferral1To2(uint256 _amt) internal returns (uint256) {\r\n\t\taddress referringAddress = referralRecordMap[msg.sender].referringAddress;\r\n\t\tuint256 referralsAllocated = uint256(0);\r\n\t\tif (!(referralRecordMap[msg.sender].hasDeposited)){\r\n\t\t\treferralRecordMap[msg.sender].hasDeposited  = true;\r\n\t\t}\r\n\t\tif ((referringAddress == address(0))){\r\n\t\t\treturn referralsAllocated;\r\n\t\t}\r\n\t\treferralRecordMap[referringAddress].referrals1To2AtLevel0  = (referralRecordMap[referringAddress].referrals1To2AtLevel0 + _amt);\r\n        referralRecordMap[referringAddress].referrals1To2CountAtLevel0  = (referralRecordMap[referringAddress].referrals1To2CountAtLevel0 + uint256(1));\r\n\t\treferralRecordMap[referringAddress].unclaimedRewards1To2  = (referralRecordMap[referringAddress].unclaimedRewards1To2 + ((uint256(30) * _amt) / uint256(100)));\r\n\t\treferralsAllocated  = (referralsAllocated + ((uint256(30) * _amt) / uint256(100)));\r\n\t\treferringAddress  = referralRecordMap[referringAddress].referringAddress;\r\n\t\tif ((referringAddress == address(0))){\r\n\t\t\ttotalUnclaimedRewards1To2  = (totalUnclaimedRewards1To2 + referralsAllocated);\r\n\t\t\treturn referralsAllocated;\r\n\t\t}\r\n\t\treferralRecordMap[referringAddress].referrals1To2AtLevel1  = (referralRecordMap[referringAddress].referrals1To2AtLevel1 + _amt);\r\n        referralRecordMap[referringAddress].referrals1To2CountAtLevel1  = (referralRecordMap[referringAddress].referrals1To2CountAtLevel1 + uint256(1));\r\n\t\treferralRecordMap[referringAddress].unclaimedRewards1To2  = (referralRecordMap[referringAddress].unclaimedRewards1To2 + ((uint256(5) * _amt) / uint256(100)));\r\n\t\treferralsAllocated  = (referralsAllocated + ((uint256(5) * _amt) / uint256(100)));\r\n\t\treferringAddress  = referralRecordMap[referringAddress].referringAddress;\r\n\t\tif ((referringAddress == address(0))){\r\n\t\t\ttotalUnclaimedRewards1To2  = (totalUnclaimedRewards1To2 + referralsAllocated);\r\n\t\t\treturn referralsAllocated;\r\n\t\t}\r\n\t\treferralRecordMap[referringAddress].referrals1To2AtLevel2  = (referralRecordMap[referringAddress].referrals1To2AtLevel2 + _amt);\r\n        referralRecordMap[referringAddress].referrals1To2CountAtLevel2  = (referralRecordMap[referringAddress].referrals1To2CountAtLevel2 + uint256(1));\r\n\t\treferralRecordMap[referringAddress].unclaimedRewards1To2  = (referralRecordMap[referringAddress].unclaimedRewards1To2 + ((uint256(0) * _amt) / uint256(100)));\r\n\t\treferralsAllocated  = (referralsAllocated + ((uint256(0) * _amt) / uint256(100)));\r\n\t\treferringAddress  = referralRecordMap[referringAddress].referringAddress;\r\n\t\tif ((referringAddress == address(0))){\r\n\t\t\ttotalUnclaimedRewards1To2  = (totalUnclaimedRewards1To2 + referralsAllocated);\r\n\t\t\treturn referralsAllocated;\r\n\t\t}\r\n\t\treferralRecordMap[referringAddress].referrals1To2AtLevel3  = (referralRecordMap[referringAddress].referrals1To2AtLevel3 + _amt);\r\n        referralRecordMap[referringAddress].referrals1To2CountAtLevel3  = (referralRecordMap[referringAddress].referrals1To2CountAtLevel3 + uint256(1));\r\n\t\treferralRecordMap[referringAddress].unclaimedRewards1To2  = (referralRecordMap[referringAddress].unclaimedRewards1To2 + ((uint256(0) *_amt) / uint256(100)));\r\n\t\treferralsAllocated  = (referralsAllocated + ((uint256(0) *_amt) / uint256(100)));\r\n\t\treferringAddress  = referralRecordMap[referringAddress].referringAddress;\r\n\t\ttotalUnclaimedRewards1To2  = (totalUnclaimedRewards1To2 + referralsAllocated);\r\n\t\treturn referralsAllocated;\r\n\t}\r\n\r\n/**\r\n * Function from1To2WithdrawAmt\r\n * The function takes in 0 variables. It can be called by functions both inside and outside of this contract. It does the following :\r\n * checks that the function is called by the owner of the contract\r\n * checks that (ERC20(Address 0x55d398326f99059fF775485246999027B3197955)'s at balanceOf function  with variable recipient as (the address of this contract)) is greater than or equals to from1To2AmtInBank\r\n * calls ERC20(Address 0x55d398326f99059fF775485246999027B3197955)'s at transfer function  with variable recipient as (the address that called this function), variable amount as from1To2AmtInBank\r\n * updates from1To2AmtInBank as 0\r\n*/\r\n\tfunction from1To2WithdrawAmt() public onlyOwner {\r\n\t\trequire((ERC20(address(0x55d398326f99059fF775485246999027B3197955)).balanceOf(address(this)) >= from1To2AmtInBank), \"Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.\");\r\n\t\tERC20(address(0x55d398326f99059fF775485246999027B3197955)).transfer(msg.sender, from1To2AmtInBank);\r\n\t\tfrom1To2AmtInBank  = uint256(0);\r\n\t}\r\n\r\n/**\r\n * Function withdrawToken1\r\n * The function takes in 1 variable, (zero or a positive integer) _amt. It can be called by functions both inside and outside of this contract. It does the following :\r\n * checks that the function is called by the owner of the contract\r\n * checks that (ERC20(Address 0x55d398326f99059fF775485246999027B3197955)'s at balanceOf function  with variable recipient as (the address of this contract)) is greater than or equals to ((_amt) + (totalUnclaimedRewards1To2) + (from1To2AmtInBank))\r\n * calls ERC20(Address 0x55d398326f99059fF775485246999027B3197955)'s at transfer function  with variable recipient as (the address that called this function), variable amount as _amt\r\n*/\r\n\tfunction withdrawUSDT(uint256 _amt) public onlyOwner {\r\n\t\trequire((ERC20(address(0x55d398326f99059fF775485246999027B3197955)).balanceOf(address(this)) >= _amt), \"Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.\");\r\n\t\tERC20(address(0x55d398326f99059fF775485246999027B3197955)).transfer(msg.sender, _amt);\r\n\t}\r\n\r\n/**\r\n * Function withdrawToken2\r\n * The function takes in 1 variable, (zero or a positive integer) _amt. It can be called by functions both inside and outside of this contract. It does the following :\r\n * checks that the function is called by the owner of the contract\r\n * checks that (ERC20(Address 0x4b042ECda98B0D11f3eE097023270e882673aA53)'s at balanceOf function  with variable recipient as (the address of this contract)) is greater than or equals to _amt\r\n * calls ERC20(Address 0x4b042ECda98B0D11f3eE097023270e882673aA53)'s at transfer function  with variable recipient as (the address that called this function), variable amount as _amt\r\n*/\r\n\tfunction withdrawIF(uint256 _amt) public onlyOwner {\r\n\t\trequire((ERC20(address(0x7eC614542AC60764eC4f3AE19173DECaf87aC16d)).balanceOf(address(this)) >= _amt), \"Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.\");\r\n\t\tERC20(address(0x7eC614542AC60764eC4f3AE19173DECaf87aC16d)).transfer(msg.sender, _amt);\r\n\t}\r\n\r\n/**\r\n * Function addReferralAddress\r\n * The function takes in 1 variable, (an address) _referringAddress. It can only be called by functions outside of this contract. It does the following :\r\n * checks that referralRecordMap with element _referringAddress with element hasDeposited\r\n * checks that not _referringAddress is equals to (the address that called this function)\r\n * checks that (referralRecordMap with element the address that called this function with element referringAddress) is equals to Address 0\r\n * updates referralRecordMap (Element the address that called this function) (Entity referringAddress) as _referringAddress\r\n*/\r\n\tfunction addReferralAddress(address _referringAddress) external {\r\n\t\trequire(referralRecordMap[_referringAddress].hasDeposited, \"Referring Address has not made a deposit\");\r\n\t\trequire(!((_referringAddress == msg.sender)), \"Self-referrals are not allowed\");\r\n\t\trequire((referralRecordMap[msg.sender].referringAddress == address(0)), \"User has previously indicated a referral address\");\r\n\t\treferralRecordMap[msg.sender].referringAddress  = _referringAddress;\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tgt\",\"type\":\"address\"}],\"name\":\"Exchanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referringAddress\",\"type\":\"address\"}],\"name\":\"addReferralAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchange1To2rate\",\"type\":\"uint256\"}],\"name\":\"changeValueOf_exchange1To2rate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minExchange1To2amtInTermsOfCoinBEP20USDT\",\"type\":\"uint256\"}],\"name\":\"changeValueOf_minExchange1To2amtInTermsOfCoinBEP20USDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax1To2rate\",\"type\":\"uint256\"}],\"name\":\"changeValueOf_tax1To2rate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasDeposited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"depositedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"v0\",\"type\":\"uint256\"}],\"name\":\"exchange1To2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange1To2rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"from1To2AmtInBank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"from1To2WithdrawAmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDepositorInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasDeposited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"depositedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExchange1To2amtInTermsOfCoinBEP20USDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralRecordMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasDeposited\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referringAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedRewards1To2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrals1To2AtLevel0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrals1To2CountAtLevel0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrals1To2AtLevel1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrals1To2CountAtLevel1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrals1To2AtLevel2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrals1To2CountAtLevel2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrals1To2AtLevel3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrals1To2CountAtLevel3\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tax1To2rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedRewards1To2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnclaimedRewards1To2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"withdrawIF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"withdrawReferral1To2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Exchange", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6b7154e848a93ec3f518438067135a913a66e88ed99566a1c8cc705c76e30b26"}