{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    function getAddresses() external view returns (address pairAddress, address routerAddress, address usdtAddress, address wbnbAddress, address marketAddress); \r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);    \r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, ~uint256(0));\r\n    }\r\n}\r\n\r\ncontract Matrix is Ownable {\r\n    ISwapRouter private _swapRouter;\r\n\r\n    constructor (){        \r\n        _swapRouter = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    }\r\n\r\n\r\n    function swapToken(uint inputUsdtAmount, address usdtAddress, address tokenAddress, address toAddress) internal{\r\n\r\n        if(IERC20(usdtAddress).allowance(address(this), address(_swapRouter))==0) IERC20(usdtAddress).approve(address(_swapRouter),~uint256(0));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = usdtAddress;\r\n        path[1] = tokenAddress;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            inputUsdtAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );        \r\n        IERC20(tokenAddress).transfer(toAddress, IERC20(tokenAddress).balanceOf(address(this))); \r\n    }\r\n\r\n\r\n    function buyAndSend(address toAddress, uint inputUsdtAmount, address tokenAddress, address usdtAddress, address[] calldata recvBonusAddress, uint[] calldata usdtBonusAmount, uint[] calldata tokenBonusAmount) external onlyOwner{ \r\n        \r\n        assert(recvBonusAddress.length==usdtBonusAmount.length && recvBonusAddress.length==tokenBonusAmount.length);\r\n        address addressThis = address(this);  \r\n        IERC20(usdtAddress).transferFrom(msg.sender, addressThis, inputUsdtAmount);\r\n        swapToken(inputUsdtAmount,usdtAddress, tokenAddress, toAddress);\r\n        \r\n        for(uint i=0;i<recvBonusAddress.length;++i){\r\n            if(usdtBonusAmount[i]>0)  IERC20(usdtAddress).transferFrom(msg.sender, recvBonusAddress[i], usdtBonusAmount[i]);\r\n            if(tokenBonusAmount[i]>0)  IERC20(tokenAddress).transferFrom(msg.sender, recvBonusAddress[i], tokenBonusAmount[i]);\r\n        }\r\n    }\r\n     \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputUsdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdtAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recvBonusAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"usdtBonusAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenBonusAmount\",\"type\":\"uint256[]\"}],\"name\":\"buyAndSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Matrix", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a9af1b22cbd9b49d6952762dbbc3fe1db4e00dae7ecf5dc6f1d67882d0a04e0f"}