{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IToken {\r\n    function bindInvitor(address account, address invitor) external;\r\n\r\n    function getTeamInvitor(address account, uint256 len) external view returns (address[] memory);\r\n\r\n    function _teamNum(address account) external view returns (uint256);\r\n\r\n    function getBinderLength(address account) external view returns (uint256);\r\n\r\n    function _binders(address account, uint256 i) external view returns (address);\r\n\r\n    function getUserTokenInfo(address account) external view returns (\r\n        uint256 tokenBalance, uint256 lastTransferTime\r\n    );\r\n}\r\n\r\nabstract contract AbsPool is Ownable {\r\n    struct PoolInfo {\r\n        uint256 gameId;\r\n        uint256 perAmount;\r\n        uint256 maxLen;\r\n        bool pause;\r\n        bool oneWin;\r\n        uint256 feeRate;\r\n        uint256 lastGameBlockNum;\r\n        uint256 lastSeedIndex;\r\n        uint256 burnRate;\r\n    }\r\n\r\n    struct UserInfo {\r\n        bool active;\r\n        uint256 pendingAmount;\r\n        uint256 lastReleaseTime;\r\n        uint256 releaseAmountPerDay;\r\n        uint256 calAmount;\r\n        uint256 claimedAmount;\r\n        uint256 teamAmount;\r\n        uint256 pendingTeamReward;\r\n        uint256 claimedTeamReward;\r\n        uint256 accPendingAmount;\r\n    }\r\n\r\n    PoolInfo[] private _poolInfo;\r\n    mapping(uint256 => mapping(uint256 => address[])) public _poolAccounts;\r\n    mapping(uint256 => mapping(uint256 => uint256)) public _poolWinSeed;\r\n\r\n    mapping(address => UserInfo) private _userInfo;\r\n\r\n    address private _tokenAddress;\r\n\r\n    mapping(uint256 => uint256) public _teamRewardRate;\r\n    mapping(uint256 => uint256) public _teamRewardCondition;\r\n\r\n    mapping(uint256 => uint256) public _inviteFee;\r\n    uint256 private constant _inviteLen = 2;\r\n    uint256 private constant _teamLen = 20;\r\n    uint256 private constant _maxLevel = 5;\r\n    uint256 public _sameLevelRate = 1000;\r\n\r\n    uint256 private constant _dailyDuration = 1 days;\r\n    uint256 public _releaseDays = 90;\r\n    address public _feeAddress;\r\n    address public _burnAddress = address(0x000000000000000000000000000000000000dEaD);\r\n\r\n    uint256 public _claimTeamFee = 1000;\r\n    uint256 public _lossReleaseRate = 9000;\r\n\r\n    constructor(\r\n        address TokenAddress, address FeeAddress\r\n    ){\r\n        _tokenAddress = TokenAddress;\r\n        uint256 tokenUnit = 10 ** IERC20(_tokenAddress).decimals();\r\n        _createPool(100 * tokenUnit, 10, false, true, 1000, 1000);\r\n        _createPool(1000 * tokenUnit, 10, false, true, 1000, 1000);\r\n        _createPool(10000 * tokenUnit, 10, false, true, 1000, 1000);\r\n        _createPool(100 * tokenUnit, 10, false, false, 1000, 1000);\r\n        _createPool(1000 * tokenUnit, 10, false, false, 1000, 1000);\r\n        _createPool(10000 * tokenUnit, 10, false, false, 1000, 1000);\r\n        _createPool(100 * tokenUnit, 20, true, true, 1000, 1000);\r\n        _createPool(1000 * tokenUnit, 20, true, true, 1000, 1000);\r\n        _createPool(10000 * tokenUnit, 20, false, true, 1000, 1000);\r\n\r\n        _inviteFee[0] = 100;\r\n        _inviteFee[1] = 50;\r\n\r\n        _teamRewardRate[1] = 20;\r\n        _teamRewardRate[2] = 40;\r\n        _teamRewardRate[3] = 60;\r\n        _teamRewardRate[4] = 80;\r\n        _teamRewardRate[5] = 100;\r\n        _teamRewardCondition[1] = 100000 * tokenUnit;\r\n        _teamRewardCondition[2] = 300000 * tokenUnit;\r\n        _teamRewardCondition[3] = 900000 * tokenUnit;\r\n        _teamRewardCondition[4] = 3000000 * tokenUnit;\r\n        _teamRewardCondition[5] = 10000000 * tokenUnit;\r\n\r\n        _rewardCondition = 20000 * tokenUnit;\r\n        _feeAddress = FeeAddress;\r\n    }\r\n\r\n    function _createPool(uint256 perAmount, uint256 maxLen, bool pause, bool oneWin, uint256 feeRate, uint256 burnRate) private {\r\n        _poolInfo.push(PoolInfo({\r\n        gameId : 0,\r\n        perAmount : perAmount,\r\n        maxLen : maxLen,\r\n        pause : pause,\r\n        oneWin : oneWin,\r\n        feeRate : feeRate,\r\n        lastGameBlockNum : 0,\r\n        lastSeedIndex : 0,\r\n        burnRate : burnRate\r\n        }));\r\n    }\r\n\r\n    function join(uint256 index, address invitor) external {\r\n        address account = msg.sender;\r\n        require(tx.origin == account, \"Ori\");\r\n        PoolInfo storage poolInfo = _poolInfo[index];\r\n        require(!poolInfo.pause, \"pause\");\r\n        uint256 gameId = poolInfo.gameId;\r\n\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        address tokenAddress = _tokenAddress;\r\n        if (!userInfo.active) {\r\n            if (_userInfo[invitor].active) {\r\n                IToken(tokenAddress).bindInvitor(account, invitor);\r\n            }\r\n            userInfo.active = true;\r\n        }\r\n\r\n        _poolAccounts[index][gameId].push(account);\r\n\r\n        uint256 perAmount = poolInfo.perAmount;\r\n        _takeToken(tokenAddress, account, address(this), perAmount);\r\n\r\n        _calTeamAmount(tokenAddress, account, perAmount);\r\n\r\n        uint256 blockNum = block.number;\r\n        if (_poolAccounts[index][gameId].length >= poolInfo.maxLen) {\r\n            require(blockNum != poolInfo.lastGameBlockNum, \"NextBlock\");\r\n            _calGame(index, gameId);\r\n            poolInfo.gameId = gameId + 1;\r\n        } else {\r\n            poolInfo.lastGameBlockNum = blockNum;\r\n        }\r\n    }\r\n\r\n    function claimGameReward() public {\r\n        address account = msg.sender;\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        uint256 pending = userInfo.calAmount;\r\n\r\n        uint256 pendingAmount = userInfo.pendingAmount;\r\n        uint256 nowTime = block.timestamp;\r\n        uint256 releaseAmount = getReleaseAmount(userInfo, pendingAmount, nowTime);\r\n        if (releaseAmount > 0) {\r\n            pending += releaseAmount;\r\n            userInfo.pendingAmount = pendingAmount - releaseAmount;\r\n            userInfo.lastReleaseTime = nowTime;\r\n        }\r\n        if (pending > 0) {\r\n            userInfo.calAmount = 0;\r\n            userInfo.claimedAmount += pending;\r\n            _giveToken(_tokenAddress, account, pending);\r\n        }\r\n    }\r\n\r\n    function getReleaseAmount(UserInfo storage userInfo, uint256 pendingAmount, uint256 nowTime) private view returns (uint256 releaseAmount){\r\n        releaseAmount = 0;\r\n        if (pendingAmount > 0) {\r\n            releaseAmount = userInfo.releaseAmountPerDay * (nowTime - userInfo.lastReleaseTime) / _dailyDuration;\r\n            if (releaseAmount > pendingAmount) {\r\n                releaseAmount = pendingAmount;\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimTeamReward() public {\r\n        address account = msg.sender;\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        uint256 pending = userInfo.pendingTeamReward;\r\n        if (pending > 0) {\r\n            userInfo.pendingTeamReward = 0;\r\n            uint256 feeAmount = pending * _claimTeamFee / 10000;\r\n            address tokenAddress = _tokenAddress;\r\n            if (feeAmount > 0) {\r\n                _giveToken(tokenAddress, _feeAddress, feeAmount);\r\n                pending -= feeAmount;\r\n            }\r\n            userInfo.claimedTeamReward += pending;\r\n            _giveToken(tokenAddress, account, pending);\r\n        }\r\n    }\r\n\r\n    function _calTeamAmount(address tokenAddress, address account, uint256 perAmount) private {\r\n        address [] memory invitors = IToken(tokenAddress).getTeamInvitor(account, _teamLen);\r\n        uint256 lastRewardLevel;\r\n        uint256 lastSameLevel;\r\n        uint256 teamReward;\r\n        address invitor;\r\n        for (uint256 i = 0; i < _teamLen;) {\r\n            invitor = invitors[i];\r\n            if (address(0) == invitor) {\r\n                break;\r\n            }\r\n            _userInfo[invitor].teamAmount += perAmount;\r\n            if (i < _inviteLen) {\r\n                uint256 inviteAmount = perAmount * _inviteFee[i] / 10000;\r\n                _userInfo[invitor].pendingTeamReward += inviteAmount;\r\n            }\r\n            uint256 invitorLevel = _getInvitorLevel(invitor, lastRewardLevel);\r\n            if (invitorLevel > lastRewardLevel) {\r\n                uint256 rewardRate = _teamRewardRate[invitorLevel] - _teamRewardRate[lastRewardLevel];\r\n                teamReward = rewardRate * perAmount / 10000;\r\n                lastRewardLevel = invitorLevel;\r\n                _userInfo[invitor].pendingTeamReward += teamReward;\r\n            } else if (invitorLevel > lastSameLevel && invitorLevel == lastRewardLevel) {\r\n                lastSameLevel = invitorLevel;\r\n                _userInfo[invitor].pendingTeamReward += teamReward * _sameLevelRate / 10000;\r\n                if (lastSameLevel >= _maxLevel) {\r\n                    break;\r\n                }\r\n            }\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    function _calGame(uint256 poolId, uint256 gameId) private {\r\n        PoolInfo storage poolInfo = _poolInfo[poolId];\r\n        address[] storage accounts = _poolAccounts[poolId][gameId];\r\n        uint256 seed = uint256(blockhash(poolInfo.lastGameBlockNum));\r\n        if (0 == seed) {\r\n            seed = poolInfo.lastSeedIndex + 1;\r\n            poolInfo.lastSeedIndex = seed;\r\n        }\r\n        _poolWinSeed[poolId][gameId] = seed;\r\n        uint256 len = accounts.length;\r\n        uint256 randomIndex = seed % len;\r\n        uint256 perAmount = poolInfo.perAmount;\r\n        uint256 winAmount = perAmount * len;\r\n        bool oneWin = poolInfo.oneWin;\r\n        uint256 feeAmount;\r\n        uint256 burnAmount;\r\n        if (oneWin) {\r\n            feeAmount = winAmount * poolInfo.feeRate / 10000;\r\n            burnAmount = winAmount * poolInfo.burnRate / 10000;\r\n        } else {\r\n            feeAmount = perAmount * poolInfo.feeRate / 10000;\r\n            burnAmount = perAmount * poolInfo.burnRate / 10000;\r\n        }\r\n        address tokenAddress = _tokenAddress;\r\n        if (feeAmount > 0) {\r\n            _giveToken(tokenAddress, _feeAddress, feeAmount);\r\n        }\r\n        if (burnAmount > 0) {\r\n            _giveToken(tokenAddress, _burnAddress, burnAmount);\r\n        }\r\n        winAmount = winAmount - feeAmount - burnAmount;\r\n        uint256 lossReleaseAmount = perAmount * _lossReleaseRate / 10000;\r\n        if (oneWin) {\r\n            for (uint256 i = 0; i < len;) {\r\n                if (randomIndex == i) {\r\n                    _userInfo[accounts[i]].calAmount += winAmount;\r\n                } else {\r\n                    _addReleaseAmount(accounts[i], lossReleaseAmount);\r\n                }\r\n            unchecked{\r\n                ++i;\r\n            }\r\n            }\r\n        } else {\r\n            winAmount = winAmount / (len - 1);\r\n            for (uint256 i = 0; i < len;) {\r\n                if (randomIndex == i) {\r\n                    _addReleaseAmount(accounts[i], lossReleaseAmount);\r\n                } else {\r\n                    _userInfo[accounts[i]].calAmount += winAmount;\r\n                }\r\n            unchecked{\r\n                ++i;\r\n            }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _addReleaseAmount(address account, uint256 amount) private {\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        uint256 pendingAmount = userInfo.pendingAmount;\r\n        uint256 nowTime = block.timestamp;\r\n        uint256 releaseAmount = getReleaseAmount(userInfo, pendingAmount, nowTime);\r\n        if (releaseAmount > 0) {\r\n            userInfo.calAmount += releaseAmount;\r\n            pendingAmount -= releaseAmount;\r\n        }\r\n\r\n        pendingAmount += amount;\r\n        userInfo.pendingAmount = pendingAmount;\r\n        userInfo.releaseAmountPerDay = pendingAmount / _releaseDays;\r\n        userInfo.lastReleaseTime = nowTime;\r\n        userInfo.accPendingAmount += amount;\r\n    }\r\n\r\n    function _getInvitorLevel(\r\n        address invitor, uint256 lowLevel\r\n    ) private view returns (uint256){\r\n        if (0 == lowLevel) {\r\n            lowLevel = 1;\r\n        }\r\n        uint256 teamAmount = _userInfo[invitor].teamAmount;\r\n        for (uint256 i = lowLevel; i <= _maxLevel;) {\r\n            if (teamAmount < _teamRewardCondition[i]) {\r\n                return i - 1;\r\n            }\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n        return _maxLevel;\r\n    }\r\n\r\n    function _takeToken(address tokenAddress, address account, address to, uint256 amount) private {\r\n        if (0 == amount) {\r\n            return;\r\n        }\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint256 tokenBalance = token.balanceOf(to);\r\n        token.transferFrom(account, to, amount);\r\n        require(token.balanceOf(to) - tokenBalance >= amount, \"TFF\");\r\n    }\r\n\r\n    function _giveToken(address tokenAddress, address account, uint256 amount) private {\r\n        if (0 == amount) {\r\n            return;\r\n        }\r\n        IERC20(tokenAddress).transfer(account, amount);\r\n    }\r\n\r\n    function getBaseInfo() external view returns (\r\n        address tokenAddress, uint256 tokenDecimals, string memory tokenSymbol\r\n    ){\r\n        tokenAddress = _tokenAddress;\r\n        tokenDecimals = IERC20(tokenAddress).decimals();\r\n        tokenSymbol = IERC20(tokenAddress).symbol();\r\n    }\r\n\r\n    function getOriPoolInfo(uint256 poolId) public view returns (\r\n        uint256 gameId,\r\n        uint256 perAmount,\r\n        uint256 maxLen,\r\n        bool pause,\r\n        bool oneWin,\r\n        uint256 feeRate,\r\n        uint256 lastGameBlockNum,\r\n        uint256 lastSeedIndex,\r\n        uint256 burnRate\r\n    ){\r\n        PoolInfo storage poolInfo = _poolInfo[poolId];\r\n        gameId = poolInfo.gameId;\r\n        perAmount = poolInfo.perAmount;\r\n        maxLen = poolInfo.maxLen;\r\n        pause = poolInfo.pause;\r\n        oneWin = poolInfo.oneWin;\r\n        feeRate = poolInfo.feeRate;\r\n        lastGameBlockNum = poolInfo.lastGameBlockNum;\r\n        lastSeedIndex = poolInfo.lastSeedIndex;\r\n        burnRate = poolInfo.burnRate;\r\n    }\r\n\r\n    function getGameInfo(uint256 poolId) public view returns (\r\n        uint256 gameId,\r\n        uint256 perAmount,\r\n        uint256 maxLen,\r\n        bool pause,\r\n        uint256 joinLen\r\n    ){\r\n        PoolInfo storage poolInfo = _poolInfo[poolId];\r\n        gameId = poolInfo.gameId;\r\n        perAmount = poolInfo.perAmount;\r\n        maxLen = poolInfo.maxLen;\r\n        pause = poolInfo.pause;\r\n        joinLen = _poolAccounts[poolId][gameId].length;\r\n    }\r\n\r\n    function getGameInfos(uint256[] memory poolIds) public view returns (\r\n        uint256[] memory gameIds,\r\n        uint256[] memory perAmounts,\r\n        uint256[] memory maxLens,\r\n        bool[] memory pauses,\r\n        uint256[] memory joinLens\r\n    ){\r\n        uint256 len = poolIds.length;\r\n        gameIds = new uint256[](len);\r\n        perAmounts = new uint256[](len);\r\n        maxLens = new uint256[](len);\r\n        pauses = new bool[](len);\r\n        joinLens = new uint256[](len);\r\n        for (uint256 i = 0; i < len; ++i) {\r\n            (gameIds[i], perAmounts[i], maxLens[i], pauses[i], joinLens[i]) = getGameInfo(poolIds[i]);\r\n        }\r\n    }\r\n\r\n    function getPoolLen() public view returns (uint256){\r\n        return _poolInfo.length;\r\n    }\r\n\r\n    function getPoolAccountsLen(uint256 poolId, uint256 gameId) public view returns (uint256){\r\n        return _poolAccounts[poolId][gameId].length;\r\n    }\r\n\r\n    function getPoolAccounts(uint256 poolId, uint256 gameId) public view returns (address[] memory){\r\n        return _poolAccounts[poolId][gameId];\r\n    }\r\n\r\n    function getOriUserInfo(address account) public view returns (\r\n        uint256 pendingAmount,\r\n        uint256 lastReleaseTime,\r\n        uint256 releaseAmountPerDay,\r\n        uint256 calAmount\r\n    ){\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        pendingAmount = userInfo.pendingAmount;\r\n        lastReleaseTime = userInfo.lastReleaseTime;\r\n        releaseAmountPerDay = userInfo.releaseAmountPerDay;\r\n        calAmount = userInfo.calAmount;\r\n    }\r\n\r\n    function getUserInfo(address account) public view returns (\r\n        bool active,\r\n        uint256 accPendingAmount,\r\n        uint256 pendingReleaseAmount,\r\n        uint256 pendingClaimAmount,\r\n        uint256 claimedAmount,\r\n        uint256 tokenBalance,\r\n        uint256 tokenAllowance\r\n    ){\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        active = userInfo.active;\r\n        accPendingAmount = userInfo.accPendingAmount;\r\n        pendingReleaseAmount = userInfo.pendingAmount;\r\n        uint256 releaseAmount = getReleaseAmount(userInfo, pendingReleaseAmount, block.timestamp);\r\n        pendingClaimAmount = userInfo.calAmount + releaseAmount;\r\n        pendingReleaseAmount -= releaseAmount;\r\n        claimedAmount = userInfo.claimedAmount;\r\n        tokenBalance = IERC20(_tokenAddress).balanceOf(account);\r\n        tokenAllowance = IERC20(_tokenAddress).allowance(account, address(this));\r\n    }\r\n\r\n    function getUserTeamInfo(address account) public view returns (\r\n        uint256 teamAmount,\r\n        uint256 pendingTeamReward,\r\n        uint256 claimedTeamReward,\r\n        address invitor,\r\n        uint256 teamNum,\r\n        uint256 binderLen,\r\n        uint256 level\r\n    ){\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        teamAmount = userInfo.teamAmount;\r\n        pendingTeamReward = userInfo.pendingTeamReward;\r\n        claimedTeamReward = userInfo.claimedTeamReward;\r\n        invitor = IToken(_tokenAddress).getTeamInvitor(account, 1)[0];\r\n        teamNum = IToken(_tokenAddress)._teamNum(account);\r\n        binderLen = IToken(_tokenAddress).getBinderLength(account);\r\n        level = _getInvitorLevel(account, 0);\r\n    }\r\n\r\n    function getBinderList(\r\n        address account,\r\n        uint256 start,\r\n        uint256 len\r\n    ) external view returns (\r\n        address[] memory binderList,\r\n        bool[] memory activeList\r\n    ){\r\n        IToken token = IToken(_tokenAddress);\r\n        uint256 binderLen = token.getBinderLength(account);\r\n        if (start > binderLen) {\r\n            start = binderLen;\r\n        }\r\n        if (0 == len || len > binderLen - start) {\r\n            len = binderLen - start;\r\n        }\r\n        binderList = new address[](len);\r\n        activeList = new bool[](len);\r\n        uint256 index = 0;\r\n        for (uint256 i = start; i < start + len; i++) {\r\n            address binder = token._binders(account, i);\r\n            binderList[index] = binder;\r\n            activeList[index] = _userInfo[binder].active;\r\n            index++;\r\n        }\r\n    }\r\n\r\n    function claimBalance(address to, uint256 amount) external onlyOwner {\r\n        address payable addr = payable(to);\r\n        addr.transfer(amount);\r\n    }\r\n\r\n    function claimToken(address erc20Address, address to, uint256 amount) external onlyOwner {\r\n        IERC20 erc20 = IERC20(erc20Address);\r\n        erc20.transfer(to, amount);\r\n    }\r\n\r\n    function setTokenAddress(address adr) external onlyOwner {\r\n        _tokenAddress = adr;\r\n    }\r\n\r\n    function setFeeAddress(address adr) external onlyOwner {\r\n        _feeAddress = adr;\r\n    }\r\n\r\n    function setBurnAddress(address adr) external onlyOwner {\r\n        _burnAddress = adr;\r\n    }\r\n\r\n    function setPoolPause(uint256 i, bool pause) public onlyOwner {\r\n        _poolInfo[i].pause = pause;\r\n    }\r\n\r\n    function setPoolAmount(uint256 i, uint256 amount) public onlyOwner {\r\n        uint256 gameId = _poolInfo[i].gameId;\r\n        require(0 == _poolAccounts[i][gameId].length, \"start\");\r\n        _poolInfo[i].perAmount = amount;\r\n    }\r\n\r\n    function setPoolFeeRate(uint256 i, uint256 fee) public onlyOwner {\r\n        _poolInfo[i].feeRate = fee;\r\n    }\r\n\r\n    function setPoolBurnRate(uint256 i, uint256 burn) public onlyOwner {\r\n        _poolInfo[i].burnRate = burn;\r\n    }\r\n\r\n    function setPoolMaxLen(uint256 i, uint256 max) public onlyOwner {\r\n        require(max > 1, \"min=2\");\r\n        _poolInfo[i].maxLen = max;\r\n    }\r\n\r\n    function addPool(uint256 perAmount, uint256 maxLen, bool pause, bool oneWin, uint256 feeRate, uint256 burnRate) public onlyOwner {\r\n        require(maxLen > 1, \"min=2\");\r\n        _createPool(perAmount, maxLen, pause, oneWin, feeRate, burnRate);\r\n    }\r\n\r\n    function setTeamRewardRate(uint256 i, uint256 r) external onlyOwner {\r\n        _teamRewardRate[i] = r;\r\n    }\r\n\r\n    function setTeamRewardCondition(uint256 i, uint256 c) external onlyOwner {\r\n        _teamRewardCondition[i] = c;\r\n    }\r\n\r\n    function setInviteFee(uint256 i, uint256 f) external onlyOwner {\r\n        _inviteFee[i] = f;\r\n    }\r\n\r\n    function setSameLevelRate(uint256 r) external onlyOwner {\r\n        _sameLevelRate = r;\r\n    }\r\n\r\n    function setReleaseDays(uint256 ds) external onlyOwner {\r\n        _releaseDays = ds;\r\n    }\r\n\r\n    uint256 public _startRewardTime = 0;\r\n    uint256 public _rewardRate = 49938;\r\n    uint256 private constant _rewardFactor = 100000000;\r\n    uint256 public _rewardDuration = 4 hours;\r\n    uint256 public _rewardCondition;\r\n    mapping(address => uint256) private _claimedAprReward;\r\n\r\n    function claimAprReward() public {\r\n        address account = msg.sender;\r\n        require(tx.origin == account, \"Ori\");\r\n        uint256 pendingAprReward = calPendingAprReward(account);\r\n        if (pendingAprReward > 0) {\r\n            _giveToken(_tokenAddress, account, pendingAprReward);\r\n            _claimedAprReward[account] += pendingAprReward;\r\n        }\r\n    }\r\n\r\n    function calPendingAprReward(address account) public view returns (uint256) {\r\n        (uint256 buyAmount, uint256 lastRewardTime) = IToken(_tokenAddress).getUserTokenInfo(account);\r\n        uint256 startTime = _startRewardTime;\r\n        if (0 == startTime) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 rewardRate = _rewardRate;\r\n        if (0 == rewardRate) {\r\n            return 0;\r\n        }\r\n\r\n        if (buyAmount < _rewardCondition) {\r\n            return 0;\r\n        }\r\n        if (lastRewardTime == 0) {\r\n            lastRewardTime = startTime;\r\n        }\r\n\r\n        if (lastRewardTime < startTime) {\r\n            lastRewardTime = startTime;\r\n        }\r\n\r\n        uint256 blockTime = block.timestamp;\r\n        if (blockTime <= lastRewardTime) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 rewardDuration = _rewardDuration;\r\n        uint256 times = (blockTime - lastRewardTime) / rewardDuration;\r\n        uint256 reward;\r\n        uint256 totalReward;\r\n        for (uint256 i; i < times;) {\r\n            reward = buyAmount * rewardRate / _rewardFactor;\r\n            totalReward += reward;\r\n            buyAmount += reward;\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n        return totalReward;\r\n    }\r\n\r\n    function getUserAprReward(address account) public view returns (uint256 claimed, uint256 pending){\r\n        claimed = _claimedAprReward[account];\r\n        pending = calPendingAprReward(account);\r\n    }\r\n\r\n    function setStartRewardTime(uint256 time) external onlyOwner {\r\n        _startRewardTime = time;\r\n    }\r\n\r\n    function startRewardTime() external onlyOwner {\r\n        _startRewardTime = block.timestamp;\r\n    }\r\n\r\n    function setRewardRate(uint256 rate) external onlyOwner {\r\n        _rewardRate = rate;\r\n    }\r\n\r\n    function setRewardCondition(uint256 c) external onlyOwner {\r\n        _rewardCondition = c;\r\n    }\r\n\r\n    function setRewardDuration(uint256 d) external onlyOwner {\r\n        _rewardDuration = d;\r\n    }\r\n\r\n    function setClaimTeamFee(uint256 f) external onlyOwner {\r\n        _claimTeamFee = f;\r\n    }\r\n\r\n    function setLossReleaseRate(uint256 r) external onlyOwner {\r\n        _lossReleaseRate = r;\r\n    }\r\n}\r\n\r\ncontract Game is AbsPool {\r\n    constructor() AbsPool(\r\n        address(0xF0B3F3a8e3C7aB7f8723225f65136aefA20Ec1F8),\r\n        address(0xb8f12fB5B3F73998D2C6715790981f1Cb3A62AF4)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_claimTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_inviteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lossReleaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_poolAccounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_poolWinSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_releaseDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sameLevelRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_teamRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_teamRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLen\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"oneWin\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnRate\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calPendingAprReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAprReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGameReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTeamReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"getBinderList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"binderList\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"activeList\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getGameInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLen\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"joinLen\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"poolIds\",\"type\":\"uint256[]\"}],\"name\":\"getGameInfos\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"gameIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxLens\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"pauses\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"joinLens\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getOriPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLen\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"oneWin\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastGameBlockNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSeedIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOriUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmountPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getPoolAccounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getPoolAccountsLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserAprReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accPendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReleaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserTeamInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingTeamReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTeamReward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"binderLen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"f\",\"type\":\"uint256\"}],\"name\":\"setClaimTeamFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f\",\"type\":\"uint256\"}],\"name\":\"setInviteFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setLossReleaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPoolAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"}],\"name\":\"setPoolBurnRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setPoolFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setPoolMaxLen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"setPoolPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ds\",\"type\":\"uint256\"}],\"name\":\"setReleaseDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"setRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setRewardDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setSameLevelRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setStartRewardTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"setTeamRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setTeamRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startRewardTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Game", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://04926b5f145a8991a6582a664115ae5ba2dc4ed6f9a699b33ada20f955e3bfc3"}