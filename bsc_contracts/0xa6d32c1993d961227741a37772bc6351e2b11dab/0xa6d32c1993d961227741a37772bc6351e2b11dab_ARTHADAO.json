{"SourceCode": "/*\r\n\r\n                       _          \r\n /\\  ._ _|_ |_   _.   | \\  _.  _  \r\n/--\\ |   |_ | | (_|   |_/ (_| (_) \r\n                                  \r\n\r\n                                                              \r\nTG Community - https://t.me/arthadao\r\nJoin the community to find more information before buying.\r\n\r\n*/\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner() {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\nabstract contract IERC20Extented is IERC20 {\r\n    function decimals() external view virtual returns (uint8);\r\n    function name() external view virtual returns (string memory);\r\n    function symbol() external view virtual returns (string memory);\r\n}\r\n\r\ncontract ARTHADAO is Context, IERC20, IERC20Extented, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = \"ARTHA DAO\";\r\n    string private constant _symbol = \"ARTHA\";\r\n    uint8 private constant _decimals = 9;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    uint256 private constant _tTotal = 1000000000 * 10**9;\r\n    uint256 private _firstBlock;\r\n    uint256 private _botBlocks;\r\n    uint256 public _maxWalletAmount;\r\n    uint256 private _maxSell;\r\n    uint256 private _maxBuy;\r\n    uint256 public numTokensToSwap = 1000000 * 10**9;\r\n\r\n    // buy fees\r\n    uint256 public _buyLiquidityFee = 0; // divided by 1000\r\n    uint256 private _previousBuyLiquidityFee = _buyLiquidityFee;\r\n    uint256 public _buyEcosystemFee = 0; // divided by 1000\r\n    uint256 private _previousBuyEcosystemFee = _buyEcosystemFee;\r\n    uint256 public _buyMarketingFee = 0; // divided by 1000\r\n    uint256 private _previousBuyMarketingFee = _buyMarketingFee;\r\n    uint256 public _buyTeamFee = 0; // divided by 1000\r\n    uint256 private _previousBuyTeamFee = _buyTeamFee;\r\n\r\n    // sell fees\r\n    uint256 public _sellLiquidityFee = 0; // divided by 1000\r\n    uint256 private _previousSellLiquidityFee = _sellLiquidityFee;\r\n    uint256 public _sellEcosystemFee = 0; // divided by 1000\r\n    uint256 private _previousSellEcosystemFee = _sellEcosystemFee;\r\n    uint256 public _sellMarketingFee = 0; // divided by 1000\r\n    uint256 private _previousSellMarketingFee = _sellMarketingFee;\r\n    uint256 public _sellTeamFee = 0; // divided by 1000\r\n    uint256 private _previousSellTeamFee = _sellTeamFee;\r\n    uint256 public transferFeeIncreaseFactor = 0; // divided by 100\r\n\r\n    struct FeeBreakdown {\r\n        uint256 tLiquidity;\r\n        uint256 tMarketing;\r\n        uint256 tTeam;\r\n        uint256 tEcosystem;\r\n        uint256 tAmount;\r\n    }\r\n\r\n    mapping(address => bool) private bots;\r\n    address payable private _marketingAddress = payable(0x000000000000000000000000000000000000dEaD);\r\n    address payable private _teamAddress = payable(0x000000000000000000000000000000000000dEaD);\r\n    address payable private _ecosystemAddress = payable(0x000000000000000000000000000000000000dEaD);\r\n    address payable private _lpRecipient = payable(0x000000000000000000000000000000000000dEaD);\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    uint256 private _maxTxAmount;\r\n\r\n    bool public tradingOpen = false;\r\n    bool private inSwap = false;\r\n    bool public canPause = true;\r\n    bool public canBlackList = true;\r\n    bool public canChangeTax = true;\r\n\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    event BuyFeesUpdated(uint256 _buyMarketingFee, uint256 _buyLiquidityFee, uint256 _buyTeamFee, uint256 _buyEcosystemFee);\r\n    event SellFeesUpdated(uint256 _sellMarketingFee, uint256 _sellLiquidityFee, uint256 _sellTeamFee, uint256 _sellEcosystemFee);\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    constructor() {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);\r\n\r\n        _maxTxAmount = _tTotal; // start off transaction limit at 100% of total supply\r\n        _maxWalletAmount = _tTotal; // 100%\r\n        _maxBuy = _tTotal; // 100%\r\n        _maxSell = _tTotal; // 100%\r\n\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() override external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() override external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() override external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function isBot(address account) public view returns (bool) {\r\n        return bots[account];\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        _previousBuyMarketingFee = _buyMarketingFee;\r\n        _previousBuyLiquidityFee = _buyLiquidityFee;\r\n        _previousBuyTeamFee = _buyTeamFee;\r\n        _previousBuyEcosystemFee = _buyEcosystemFee;\r\n        \r\n        _buyMarketingFee = 0;\r\n        _buyLiquidityFee = 0;\r\n        _buyTeamFee = 0;\r\n        _buyEcosystemFee = 0;\r\n\r\n        _previousSellMarketingFee = _sellMarketingFee;\r\n        _previousSellLiquidityFee = _sellLiquidityFee;\r\n        _previousSellTeamFee = _sellTeamFee;\r\n        _previousSellEcosystemFee = _sellEcosystemFee;\r\n        \r\n        _sellMarketingFee = 0;\r\n        _sellLiquidityFee = 0;\r\n        _sellTeamFee = 0;\r\n        _sellEcosystemFee = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        _buyMarketingFee = _previousBuyMarketingFee;\r\n        _buyLiquidityFee = _previousBuyLiquidityFee;\r\n        _buyTeamFee = _previousBuyTeamFee;\r\n        _buyEcosystemFee = _previousBuyEcosystemFee;\r\n\r\n        _sellMarketingFee = _previousSellMarketingFee;\r\n        _sellLiquidityFee = _previousSellLiquidityFee;\r\n        _sellTeamFee = _previousSellTeamFee;\r\n        _sellEcosystemFee = _previousSellEcosystemFee;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        bool takeFee = true;\r\n\r\n        if (from != owner() && to != owner() && from != address(this) && to != address(this)) {\r\n            require(tradingOpen, \"Trading is not active\");\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router)) {//buys\r\n\r\n                if (block.timestamp <= _firstBlock.add(_botBlocks)) {\r\n                    bots[to] = true;\r\n                }\r\n                require(balanceOf(to).add(amount) <= _maxWalletAmount, \"wallet balance after transfer must be less than max wallet amount\");\r\n                require(amount <= _maxBuy, \"Amount exceeds maximum buy limit\");\r\n            }\r\n            \r\n            if (!inSwap && from != uniswapV2Pair && to == uniswapV2Pair) { //sells\r\n                require(!bots[from] && !bots[to]);\r\n                require(amount <= _maxSell, \"Amount exceeds maximum sell limit\");\r\n                \r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n                if (contractTokenBalance >= numTokensToSwap) {\r\n                    if (contractTokenBalance > 0) {\r\n                        if (_sellMarketingFee.add(_sellTeamFee).add(_sellEcosystemFee).add(_sellLiquidityFee) > 0) {\r\n                            uint256 autoLPamount = _sellLiquidityFee.mul(contractTokenBalance).div(_sellMarketingFee.add(_sellTeamFee).add(_sellEcosystemFee).add(_sellLiquidityFee));\r\n                            uint256 minusLP = 0;\r\n                            if (contractTokenBalance >= autoLPamount) {\r\n                                minusLP = contractTokenBalance.sub(autoLPamount);\r\n                            }\r\n                            swapAndLiquify(autoLPamount, minusLP);\r\n                        }\r\n                    }\r\n                    uint256 contractETHBalance = address(this).balance;\r\n                    if (contractETHBalance > 0) {\r\n                        sendETHToFee(address(this).balance);\r\n                    }\r\n                }\r\n                    \r\n            }\r\n\r\n            if(from != uniswapV2Pair && to != uniswapV2Pair) { //transfers\r\n                \r\n                require(balanceOf(to).add(amount) <= _maxWalletAmount, \"wallet balance after transfer must be less than max wallet amount\");\r\n\r\n            }\r\n        }\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n        \r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }   \r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n    \r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n              address(this),\r\n              tokenAmount,\r\n              0, // slippage is unavoidable\r\n              0, // slippage is unavoidable\r\n              _lpRecipient,\r\n              block.timestamp\r\n          );\r\n    }\r\n  \r\n    function swapAndLiquify(uint256 lpAmount, uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 half = lpAmount.div(2);\r\n        uint256 otherHalf = lpAmount.sub(half);\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForEth(contractTokenBalance.add(half));\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n        if (otherHalf > 0) {\r\n            addLiquidity(otherHalf, newBalance.mul(half).div(contractTokenBalance.add(half)));\r\n        }\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        uint256 totalFees = _sellMarketingFee.add(_sellEcosystemFee).add(_sellTeamFee);\r\n        if (totalFees != 0) {\r\n            uint256 marketingPortion = amount.mul(_sellMarketingFee).div(totalFees);\r\n            uint256 teamPortion = amount.mul(_sellTeamFee).div(totalFees);\r\n            uint256 ecoPortion = amount.sub(marketingPortion).sub(teamPortion);\r\n            if (marketingPortion > 0) {\r\n                _marketingAddress.transfer(marketingPortion);\r\n            }\r\n            if (teamPortion > 0) {\r\n                _teamAddress.transfer(teamPortion);\r\n            }\r\n            if (ecoPortion > 0) {\r\n                _ecosystemAddress.transfer(ecoPortion);\r\n            }\r\n        }\r\n    }\r\n\r\n    function openTrading(uint256 botBlocks) external onlyOwner() {\r\n        _firstBlock = block.timestamp;\r\n        _botBlocks = botBlocks;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function enableToken() external onlyOwner() {\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function disableToken() external onlyOwner() {\r\n        require(canPause, \"this contract cannot be paused\");\r\n        tradingOpen = false;\r\n    }\r\n\r\n    function disablePauseAbility() onlyOwner() external {\r\n        canPause = false;\r\n    }\r\n\r\n    function manualswap() external onlyOwner() {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if (contractBalance > 0) {\r\n            swapTokensForEth(contractBalance);\r\n        }\r\n    }\r\n\r\n    function manualsend() external onlyOwner() {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        if (contractETHBalance > 0) {\r\n            payable(address(owner())).transfer(contractETHBalance);\r\n        }\r\n    }\r\n\r\n    function manualSendToken(address token) external onlyOwner() {\r\n        uint256 amount = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).transfer(owner(), amount);\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if (!takeFee) { \r\n                removeAllFee();\r\n        }\r\n        _transferStandard(sender, recipient, amount);\r\n        restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 amount) private {\r\n        FeeBreakdown memory fees;\r\n        if (sender == uniswapV2Pair && recipient != address(uniswapV2Router)) {//buys\r\n            fees.tMarketing = amount.mul(_buyMarketingFee).div(1000);\r\n            fees.tLiquidity = amount.mul(_buyLiquidityFee).div(1000);\r\n            fees.tTeam = amount.mul(_buyTeamFee).div(1000);\r\n            fees.tEcosystem = amount.mul(_buyEcosystemFee).div(1000);\r\n        }\r\n        if (sender != uniswapV2Pair && recipient == uniswapV2Pair) {//sells\r\n            fees.tMarketing = amount.mul(_sellMarketingFee).div(1000);\r\n            fees.tLiquidity = amount.mul(_sellLiquidityFee).div(1000);\r\n            fees.tTeam = amount.mul(_sellTeamFee).div(1000);\r\n            fees.tEcosystem = amount.mul(_sellEcosystemFee).div(1000);\r\n        }\r\n        if (sender != uniswapV2Pair && recipient != uniswapV2Pair) {//transfer\r\n            fees.tMarketing = (amount.mul(_sellMarketingFee).div(1000)).mul(transferFeeIncreaseFactor).div(100);\r\n            fees.tLiquidity = (amount.mul(_sellLiquidityFee).div(1000)).mul(transferFeeIncreaseFactor).div(100);\r\n            fees.tTeam = (amount.mul(_sellTeamFee).div(1000)).mul(transferFeeIncreaseFactor).div(100);\r\n            fees.tEcosystem = (amount.mul(_sellEcosystemFee).div(1000)).mul(transferFeeIncreaseFactor).div(100);\r\n        }\r\n        \r\n        fees.tAmount = amount.sub(fees.tMarketing).sub(fees.tLiquidity).sub(fees.tTeam).sub(fees.tEcosystem);\r\n        \r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(fees.tAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(fees.tMarketing.add(fees.tLiquidity).add(fees.tTeam).add(fees.tEcosystem));\r\n        \r\n        emit Transfer(sender, recipient, fees.tAmount);\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    function excludeFromFee(address account) public onlyOwner() {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) external onlyOwner() {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n    \r\n    function removeBot(address account) external onlyOwner() {\r\n        bots[account] = false;\r\n    }\r\n\r\n    function addBot(address account) external onlyOwner() {\r\n        require(canBlackList, \"this contract cannot blacklist addresses\");\r\n        bots[account] = true;\r\n    }\r\n\r\n    function disableBlackListing() onlyOwner() external {\r\n        canBlackList = false;\r\n    }\r\n    \r\n    function setTransferTransactionMultiplier(uint256 _multiplier) external onlyOwner() {\r\n        transferFeeIncreaseFactor = _multiplier;\r\n    }\r\n\r\n    function setMaxWalletAmount(uint256 maxWalletAmount) external onlyOwner() {\r\n        require(maxWalletAmount >= _tTotal.div(1000), \"Amount must be greater than 0.1% of supply\");\r\n        require(maxWalletAmount <= _tTotal, \"Amount must be less than or equal to totalSupply\");\r\n        _maxWalletAmount = maxWalletAmount;\r\n    }\r\n\r\n    function setBuyTaxes(uint256 marketingFee, uint256 liquidityFee, uint256 teamFee, uint256 ecosystemFee) external onlyOwner() {\r\n        uint256 totalFee = marketingFee.add(liquidityFee).add(teamFee).add(ecosystemFee);\r\n        require(totalFee <= 200, \"Sum of buy fees must be less than or equal to 20%\");\r\n        require(canChangeTax, \"This function is diabled\");\r\n\r\n        _buyMarketingFee = marketingFee;\r\n        _buyLiquidityFee = liquidityFee;\r\n        _buyTeamFee = teamFee;\r\n        _buyEcosystemFee = ecosystemFee;\r\n        \r\n        _previousBuyMarketingFee = _buyMarketingFee;\r\n        _previousBuyLiquidityFee = _buyLiquidityFee;\r\n        _previousBuyTeamFee = _buyTeamFee;\r\n        _previousBuyEcosystemFee = _buyEcosystemFee;\r\n        \r\n        emit BuyFeesUpdated(marketingFee, liquidityFee, teamFee, ecosystemFee);\r\n    }\r\n\r\n    function setSellTaxes(uint256 marketingFee, uint256 liquidityFee, uint256 teamFee, uint256 ecosystemFee) external onlyOwner() {\r\n        uint256 totalFee = marketingFee.add(liquidityFee).add(teamFee).add(ecosystemFee);\r\n        require(totalFee <= 250, \"Sum of sell fees must be less than or equal to 25%\");\r\n        require(canChangeTax, \"This function is diabled\");\r\n\r\n        _sellMarketingFee = marketingFee;\r\n        _sellLiquidityFee = liquidityFee;\r\n        _sellTeamFee = teamFee;\r\n        _sellEcosystemFee = ecosystemFee;\r\n        \r\n        _previousSellMarketingFee = _sellMarketingFee;\r\n        _previousSellLiquidityFee = _sellLiquidityFee;\r\n        _previousSellTeamFee = _sellTeamFee;\r\n        _previousSellEcosystemFee = _sellEcosystemFee;\r\n        \r\n        emit SellFeesUpdated(marketingFee, liquidityFee, teamFee, ecosystemFee);\r\n    }\r\n\r\n    function disableTaxChange() onlyOwner() external {\r\n        canChangeTax = false;\r\n    }\r\n    \r\n    function updateMaxSell(uint256 maxSell) external onlyOwner() {\r\n        require(maxSell >= _tTotal.div(1000) , \"cant make the limit lower than 0.1% of the supply\");\r\n        _maxSell = maxSell;\r\n    }\r\n    \r\n    function updateMaxBuy(uint256 maxBuy) external onlyOwner() {\r\n        require(maxBuy >= _tTotal.div(1000) , \"cant make the limit lower than 0.1% of the supply\");\r\n        _maxBuy = maxBuy;\r\n    }\r\n\r\n    function updateEcosystemAddress(address payable ecosystemAddress) external onlyOwner() {\r\n        _ecosystemAddress = ecosystemAddress;\r\n    }\r\n    \r\n    function updateMarketingAddress(address payable marketingAddress) external onlyOwner() {\r\n        _marketingAddress = marketingAddress;\r\n    }\r\n    \r\n    function updateTeamAddress(address payable teamAddress) external onlyOwner() {\r\n        _teamAddress = teamAddress;\r\n    } \r\n\r\n    function updateLpRecipient(address payable lpRecipient) external onlyOwner() {\r\n        _lpRecipient = lpRecipient;\r\n    }\r\n\r\n    function updateNumTokensToSwap(uint256 numTokens) external onlyOwner() {\r\n        numTokensToSwap = numTokens;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyTeamFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyEcosystemFee\",\"type\":\"uint256\"}],\"name\":\"BuyFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellTeamFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellEcosystemFee\",\"type\":\"uint256\"}],\"name\":\"SellFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyEcosystemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellEcosystemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canChangeTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableBlackListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disablePauseAbility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTaxChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"manualSendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"botBlocks\",\"type\":\"uint256\"}],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ecosystemFee\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ecosystemFee\",\"type\":\"uint256\"}],\"name\":\"setSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"setTransferTransactionMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeIncreaseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ecosystemAddress\",\"type\":\"address\"}],\"name\":\"updateEcosystemAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"lpRecipient\",\"type\":\"address\"}],\"name\":\"updateLpRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingAddress\",\"type\":\"address\"}],\"name\":\"updateMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"}],\"name\":\"updateMaxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSell\",\"type\":\"uint256\"}],\"name\":\"updateMaxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"updateNumTokensToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"teamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ARTHADAO", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://625d575943aa3a326dd9aa57d1ae1281130bd3008e294fac8c1891e6e738b847"}