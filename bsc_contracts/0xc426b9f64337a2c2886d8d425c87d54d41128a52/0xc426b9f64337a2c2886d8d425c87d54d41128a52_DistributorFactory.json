{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DistributorFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IDistributor.sol\\\";\\nimport \\\"./interfaces/IDistributorFactory.sol\\\";\\nimport \\\"./interfaces/ITokenSale.sol\\\";\\nimport \\\"./distributor/MixDistributor.sol\\\";\\nimport \\\"./utils/Operators.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract DistributorFactory is Operators, IDistributorFactory {\\n    ITokenSalePool public tokenSalePool;\\n\\n    constructor(ITokenSalePool _tokenSalePool) {\\n        tokenSalePool = _tokenSalePool;\\n    }\\n\\n    mapping(string => IDistributor) distributors;\\n\\n    function setTokenSalePool(ITokenSalePool _tokenSalePool)\\n        external\\n        override\\n        onlyOperator\\n    {\\n        tokenSalePool = _tokenSalePool;\\n    }\\n\\n    function createDistributor(string calldata _poolID)\\n        public\\n        override\\n        onlyOperator\\n    {\\n        IDistributor distributor;\\n\\n        distributor = new MixDistributor(\\n            ITokenSale(tokenSalePool.getTokenSaleContractAddress(_poolID))\\n        );\\n\\n        distributors[_poolID] = distributor;\\n        tokenSalePool.setDistributor(_poolID, distributor);\\n    }\\n\\n    function createDistributorWithReleaseInfo(\\n        string calldata _poolID,\\n        string[] calldata _campaignIDs,\\n        uint256[] calldata _trancheStartTimestamps,\\n        uint256[] calldata _trancheEndTimestamps,\\n        uint32[] calldata _percentageOfTranches,\\n        IDistributor.TrancheType[] calldata _trancheTypes\\n    ) external override onlyOperator {\\n        createDistributor(_poolID);\\n        setReleaseInfoSameInManyCampaigns(\\n            _poolID,\\n            _campaignIDs,\\n            _trancheStartTimestamps,\\n            _trancheEndTimestamps,\\n            _percentageOfTranches,\\n            _trancheTypes\\n        );\\n    }\\n\\n    function emergencyWithdraw(\\n        string calldata _poolID,\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external override onlyOwner {\\n        distributors[_poolID].emergencyWithdraw(_token, _to, _amount);\\n    }\\n\\n    function withdraw(string calldata _poolID, string calldata _campaignID)\\n        external\\n        override\\n    {\\n        distributors[_poolID].withdraw(_campaignID);\\n    }\\n\\n    function withdrawManyCampaigns(\\n        string calldata _poolID,\\n        string[] calldata _campaignIDs\\n    ) external override {\\n        uint256 total = 0;\\n        for (uint32 i = 0; i < _campaignIDs.length; i++) {\\n            uint256 cWithdrawable = distributors[_poolID].getWithdrawableAmount(\\n                _campaignIDs[i],\\n                tx.origin\\n            );\\n            total += cWithdrawable;\\n            if (cWithdrawable > 0)\\n                distributors[_poolID].withdraw(_campaignIDs[i]);\\n        }\\n        if (total == 0) {\\n            revert(\\\"nothing to withdraw\\\");\\n        }\\n    }\\n\\n    function setReleaseInfo(\\n        string calldata _poolID,\\n        string calldata _campaignID,\\n        uint256[] calldata _trancheStartTimestamps,\\n        uint256[] calldata _trancheEndTimestamps,\\n        uint32[] calldata _percentageOfTranches,\\n        IDistributor.TrancheType[] calldata _trancheTypes\\n    ) public override onlyOperator {\\n        distributors[_poolID].setReleaseInfo(\\n            _campaignID,\\n            _trancheStartTimestamps,\\n            _trancheEndTimestamps,\\n            _percentageOfTranches,\\n            _trancheTypes\\n        );\\n    }\\n\\n    function setReleaseInfoSameInManyCampaigns(\\n        string calldata _poolID,\\n        string[] calldata _campaignIDs,\\n        uint256[] calldata _trancheStartTimestamps,\\n        uint256[] calldata _trancheEndTimestamps,\\n        uint32[] calldata _percentageOfTranches,\\n        IDistributor.TrancheType[] calldata _trancheTypes\\n    ) public override onlyOperator {\\n        for (uint32 i = 0; i < _campaignIDs.length; i++) {\\n            setReleaseInfo(\\n                _poolID,\\n                _campaignIDs[i],\\n                _trancheStartTimestamps,\\n                _trancheEndTimestamps,\\n                _percentageOfTranches,\\n                _trancheTypes\\n            );\\n        }\\n    }\\n\\n    function getWithdrawableAmount(\\n        string calldata _poolID,\\n        string calldata _campaignID,\\n        address _user\\n    ) external view override returns (uint256) {\\n        return distributors[_poolID].getWithdrawableAmount(_campaignID, _user);\\n    }\\n\\n    function getWithdrawableAmountManyCampaigns(\\n        string calldata _poolID,\\n        string[] calldata _campaignIDs,\\n        address _user\\n    ) external view override returns (uint256) {\\n        uint256 withdrawable = 0;\\n        for (uint32 i = 0; i < _campaignIDs.length; i++) {\\n            withdrawable += distributors[_poolID].getWithdrawableAmount(\\n                _campaignIDs[i],\\n                _user\\n            );\\n        }\\n        return withdrawable;\\n    }\\n\\n    function getWithdrawedAmount(\\n        string calldata _poolID,\\n        string calldata _campaignID,\\n        address _user\\n    ) external view override returns (uint256) {\\n        return distributors[_poolID].getWithdrawedAmount(_campaignID, _user);\\n    }\\n\\n    function getWithdrawedAmountManyCampaigns(\\n        string calldata _poolID,\\n        string[] calldata _campaignIDs,\\n        address _user\\n    ) external view override returns (uint256) {\\n        uint256 withdrawed = 0;\\n        for (uint32 i = 0; i < _campaignIDs.length; i++) {\\n            withdrawed += distributors[_poolID].getWithdrawedAmount(\\n                _campaignIDs[i],\\n                _user\\n            );\\n        }\\n        return withdrawed;\\n    }\\n\\n    function getDistributorAddress(string calldata _poolID)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return address(distributors[_poolID]);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IDistributor {\\n    enum TrancheType {\\n        ONCE,\\n        LINEAR\\n    }\\n\\n    function setReleaseInfo(\\n        string calldata _campaignID,\\n        uint256[] calldata _trancheStartTimestamps,\\n        uint256[] calldata _trancheEndTimestamps,\\n        uint32[] calldata _percentageOfTranches,\\n        TrancheType[] calldata _trancheTypes\\n    ) external;\\n\\n    function withdraw(string calldata _campaignID) external;\\n\\n    function emergencyWithdraw(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function getWithdrawableAmount(string calldata _campaignID, address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getWithdrawedAmount(string calldata _campaignID, address _user)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDistributorFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./IDistributor.sol\\\";\\nimport \\\"./ITokenSalePool.sol\\\";\\n\\ninterface IDistributorFactory {\\n    function setTokenSalePool(ITokenSalePool _tokenSalePool) external;\\n\\n    function createDistributor(string calldata _poolID) external;\\n\\n    function createDistributorWithReleaseInfo(\\n        string calldata _poolID,\\n        string[] calldata _campaignIDs,\\n        uint256[] calldata _trancheStartTimestamps,\\n        uint256[] calldata _trancheEndTimestamps,\\n        uint32[] calldata _percentageOfTranches,\\n        IDistributor.TrancheType[] calldata _trancheTypes\\n    ) external;\\n\\n    function emergencyWithdraw(\\n        string calldata _poolID,\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdraw(string calldata _poolID, string calldata _campaignID)\\n        external;\\n\\n    function withdrawManyCampaigns(\\n        string calldata _poolID,\\n        string[] calldata _campaignIDs\\n    ) external;\\n\\n    function setReleaseInfo(\\n        string calldata _poolID,\\n        string calldata _campaignID,\\n        uint256[] calldata _trancheStartTimestamps,\\n        uint256[] calldata _trancheEndTimestamps,\\n        uint32[] calldata _percentageOfTranches,\\n        IDistributor.TrancheType[] calldata _trancheTypes\\n    ) external;\\n\\n    function setReleaseInfoSameInManyCampaigns(\\n        string calldata _poolID,\\n        string[] calldata _campaignIDs,\\n        uint256[] calldata _trancheStartTimestamps,\\n        uint256[] calldata _trancheEndTimestamps,\\n        uint32[] calldata _percentageOfTranches,\\n        IDistributor.TrancheType[] calldata _trancheTypes\\n    ) external;\\n\\n    function getWithdrawableAmount(\\n        string calldata _poolID,\\n        string calldata _campaignID,\\n        address _user\\n    ) external view returns (uint256);\\n\\n    function getWithdrawableAmountManyCampaigns(\\n        string calldata _poolID,\\n        string[] calldata _campaignIDs,\\n        address _user\\n    ) external view returns (uint256);\\n\\n    function getWithdrawedAmount(\\n        string calldata _poolID,\\n        string calldata _campaignID,\\n        address _user\\n    ) external view returns (uint256);\\n\\n    function getWithdrawedAmountManyCampaigns(\\n        string calldata _poolID,\\n        string[] calldata _campaignIDs,\\n        address _user\\n    ) external view returns (uint256);\\n\\n    function getDistributorAddress(string calldata _poolID)\\n        external\\n        view\\n        returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface ITokenSale {\\n    struct Campaign {\\n        bytes32 merkleRoot;\\n        uint64 startTime;\\n        uint64 endTime;\\n        uint256 srcCap;\\n        uint256 rate;\\n        uint256 totalSource;\\n        uint256 totalDest;\\n        bool isFundWithdraw;\\n        IERC20 token;\\n        IERC20 acceptToken;\\n    }\\n\\n    struct UserInfo {\\n        uint256 allocation;\\n        uint256 contribute;\\n    }\\n\\n    function setCampaign(\\n        string calldata _campaignID,\\n        bytes32 _merkleRoot,\\n        uint64 _startTime,\\n        uint64 _endTime,\\n        uint256 _srcCap,\\n        uint256 _dstCap,\\n        IERC20 _acceptToken,\\n        IERC20 _token\\n    ) external;\\n\\n    function setCampaignToken(\\n        string calldata _campaignID,\\n        IERC20 _token\\n    ) external;\\n\\n    function buy(\\n        string calldata _campaignID,\\n        uint128 _index,\\n        uint256 _maxCap,\\n        uint256 _amount,\\n        bytes32[] calldata _merkleProof\\n    ) external payable;\\n\\n    function withdrawSaleFund(string calldata _campaignID, address _to)\\n        external;\\n\\n    function emergencyWithdraw(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function getUserInfo(string calldata _campaignID, address _user)\\n        external\\n        view\\n        returns (UserInfo memory);\\n\\n    function getCampaign(string calldata _campaignID)\\n        external\\n        view\\n        returns (Campaign memory);\\n\\n    function getCampaignIds() external view returns (string[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/distributor/MixDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./BaseDistributor.sol\\\";\\n\\ncontract MixDistributor is BaseDistributor {\\n    using SafeERC20 for IERC20;\\n\\n    struct ReleaseInfo {\\n        uint256[] trancheStartTimestamps;\\n        uint256[] trancheEndTimestamps;\\n        uint32[] percentageOfTranches;\\n        TrancheType[] trancheTypes;\\n    }\\n\\n    mapping(string => mapping(address => uint256)) claimedAmount;\\n    mapping(string => ReleaseInfo) releaseInfo;\\n\\n    ITokenSale public tokenSale;\\n\\n    constructor(ITokenSale _tokenSale) {\\n        tokenSale = _tokenSale;\\n    }\\n\\n    function setReleaseInfo(\\n        string calldata _campaignID,\\n        uint256[] calldata _trancheStartTimestamps,\\n        uint256[] calldata _trancheEndTimestamps,\\n        uint32[] calldata _percentageOfTranches,\\n        TrancheType[] calldata _trancheTypes\\n    ) external override onlyOwner {\\n        ReleaseInfo storage info = releaseInfo[_campaignID];\\n        // require(\\n        //     info.trancheStartTimestamps.length == 0,\\n        //     \\\"already set tranches\\\"\\n        // );\\n        uint32 i;\\n        uint32 percentageSum = 0;\\n        require(\\n            (_trancheStartTimestamps.length == _percentageOfTranches.length) &&\\n                (_trancheStartTimestamps.length ==\\n                    _trancheEndTimestamps.length) &&\\n                (_trancheStartTimestamps.length == _trancheTypes.length),\\n            \\\"number of timestamps must be equal to number of tranches\\\"\\n        );\\n        for (i = 0; i < _percentageOfTranches.length; i++)\\n            percentageSum += _percentageOfTranches[i];\\n        require(\\n            percentageSum == 100,\\n            \\\"total percentage of claiming token must be 100\\\"\\n        );\\n        info.trancheStartTimestamps = _trancheStartTimestamps;\\n        info.trancheEndTimestamps = _trancheEndTimestamps;\\n        info.percentageOfTranches = _percentageOfTranches;\\n        info.trancheTypes = _trancheTypes;\\n        emit ReleaseInfoSet(\\n            _campaignID,\\n            _trancheStartTimestamps,\\n            _trancheEndTimestamps,\\n            _percentageOfTranches,\\n            _trancheTypes\\n        );\\n    }\\n\\n    function getWithdrawableAmount(string calldata _campaignID, address _user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _getWithdrawableAmount(_campaignID, _user);\\n    }\\n\\n    function getWithdrawedAmount(string calldata _campaignID, address _user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return claimedAmount[_campaignID][_user];\\n    }\\n\\n    function withdraw(string calldata _campaignID)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        address _user = tx.origin;\\n        uint256 _amount = _getWithdrawableAmount(_campaignID, _user);\\n        ITokenSale.Campaign memory campaign = tokenSale.getCampaign(\\n            _campaignID\\n        );\\n        claimedAmount[_campaignID][_user] += _amount;\\n        _safeTransfer(campaign.token, _user, _amount);\\n        emit Withdraw(_user, _campaignID, _amount);\\n    }\\n\\n    function _getWithdrawableAmount(string calldata _campaignID, address _user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        ReleaseInfo memory _info = releaseInfo[_campaignID];\\n        if (block.timestamp < _info.trancheStartTimestamps[0]) {\\n            return 0;\\n        }\\n        ITokenSale.UserInfo memory userInfo = tokenSale.getUserInfo(\\n            _campaignID,\\n            _user\\n        );\\n        uint256 totalClaimable = 0;\\n        for (uint32 i = 0; i < _info.trancheStartTimestamps.length; i++) {\\n            if (block.timestamp >= _info.trancheStartTimestamps[i]) {\\n                if (_info.trancheTypes[i] == TrancheType.ONCE) {\\n                    totalClaimable +=\\n                        (userInfo.allocation * _info.percentageOfTranches[i]) /\\n                        100;\\n                } else if (_info.trancheTypes[i] == TrancheType.LINEAR) {\\n                    uint256 timestamp = _min(\\n                        block.timestamp,\\n                        _info.trancheEndTimestamps[i]\\n                    );\\n                    totalClaimable +=\\n                        (((userInfo.allocation *\\n                            (timestamp - _info.trancheStartTimestamps[i])) /\\n                            (_info.trancheEndTimestamps[i] -\\n                                _info.trancheStartTimestamps[i])) *\\n                            _info.percentageOfTranches[i]) /\\n                        100;\\n                }\\n            }\\n        }\\n\\n        return totalClaimable - claimedAmount[_campaignID][_user];\\n    }\\n\\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        if (_a < _b) return _a;\\n        return _b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Operators.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract Operators is Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet operators;\\n\\n    event OperatorsAdded(address[] _operators);\\n    event OperatorsRemoved(address[] _operators);\\n\\n    constructor() {}\\n\\n    modifier onlyOperator() {\\n        require(\\n            isOperator(_msgSender()) || (owner() == _msgSender()),\\n            \\\"caller is not operator\\\"\\n        );\\n        _;\\n    }\\n\\n    function addOperators(address[] calldata _operators) external onlyOwner {\\n        for (uint256 i = 0; i < _operators.length; i++) {\\n            operators.add(_operators[i]);\\n        }\\n        emit OperatorsAdded(_operators);\\n    }\\n\\n    function removeOperators(address[] calldata _operators) external onlyOwner {\\n        for (uint256 i = 0; i < _operators.length; i++) {\\n            operators.remove(_operators[i]);\\n        }\\n        emit OperatorsRemoved(_operators);\\n    }\\n\\n    function isOperator(address _operator) public view returns (bool) {\\n        return operators.contains(_operator);\\n    }\\n\\n    function numberOperators() external view returns (uint256) {\\n        return operators.length();\\n    }\\n\\n    function operatorAt(uint256 i) external view returns (address) {\\n        return operators.at(i);\\n    }\\n\\n    function getAllOperators()\\n        external\\n        view\\n        returns (address[] memory _operators)\\n    {\\n        _operators = new address[](operators.length());\\n        for (uint256 i = 0; i < _operators.length; i++) {\\n            _operators[i] = operators.at(i);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenSalePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./ITokenSale.sol\\\";\\nimport \\\"./IDistributor.sol\\\";\\n\\ninterface ITokenSalePool {\\n    struct Pool {\\n        string poolID;\\n        string poolName;\\n        uint256 poolCreationTime;\\n        ITokenSale tokenSale;\\n        IDistributor distributor;\\n    }\\n\\n    function createPool(\\n        string calldata _poolID,\\n        string calldata _poolName,\\n        uint256 _poolCreationTime\\n    ) external;\\n\\n    function setDistributor(string calldata _poolID, IDistributor _distributor)\\n        external;\\n\\n    function setCampaign(\\n        string calldata _poolID,\\n        string calldata _campaignID,\\n        bytes32 _merkleRoot,\\n        uint64 _startTime,\\n        uint64 _endTime,\\n        uint256 _srcCap,\\n        uint256 _dstCap,\\n        IERC20 _acceptToken,\\n        IERC20 _token\\n    ) external;\\n\\n    function setCampaignToken(\\n        string calldata _poolID,\\n        string calldata _campaignID,\\n        IERC20 _token\\n    ) external;\\n\\n    function setCampaignTokenOfPool(string calldata _poolID, IERC20 _token)\\n        external;\\n\\n    function buy(\\n        string calldata _poolID,\\n        string calldata _campaignID,\\n        uint128 _index,\\n        uint256 _maxCap,\\n        uint256 _amount,\\n        bytes32[] calldata _merkleProof\\n    ) external payable;\\n\\n    function withdrawSaleFund(\\n        string calldata _poolID,\\n        string calldata _campaignID,\\n        address _to\\n    ) external;\\n\\n    function withdrawSaleFundOfPool(string calldata _poolID, address _to)\\n        external;\\n\\n    function emergencyWithdraw(\\n        string calldata _poolID,\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function getUserInfo(\\n        string calldata _poolID,\\n        string calldata _campaignID,\\n        address _user\\n    ) external view returns (ITokenSale.UserInfo memory);\\n\\n    function getCampaignIds(string calldata _poolID)\\n        external\\n        view\\n        returns (string[] memory);\\n\\n    function getCampaign(string calldata _poolID, string calldata _campaignID)\\n        external\\n        view\\n        returns (ITokenSale.Campaign memory);\\n\\n    function getTokenSaleContractAddress(string calldata _poolID)\\n        external\\n        view\\n        returns (address);\\n\\n    function getDistributorAddress(string calldata _poolID)\\n        external\\n        view\\n        returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/distributor/BaseDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../interfaces/ITokenSale.sol\\\";\\nimport \\\"../interfaces/IDistributor.sol\\\";\\n\\nabstract contract BaseDistributor is IDistributor, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    event ReleaseInfoSet(\\n        string _campaignID,\\n        uint256[] trancheStartTimestamps,\\n        uint256[] trancheEndTimestamps,\\n        uint32[] percentageOfTranches,\\n        TrancheType[] trancheTypes\\n    );\\n\\n    event Withdraw(address user, string _campaignID, uint256 _amount);\\n\\n    constructor() {}\\n\\n    function emergencyWithdraw(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external override onlyOwner {\\n        _safeTransfer(_token, _to, _amount);\\n    }\\n\\n    function _safeTransfer(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_token == IERC20(address(0))) {\\n            (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n            require(success, \\\"transfer failed\\\");\\n        } else {\\n            _token.safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    function withdraw(string calldata _campaignID) external virtual override {}\\n\\n    function setReleaseInfo(\\n        string calldata _campaignID,\\n        uint256[] calldata _trancheStartTimestamps,\\n        uint256[] calldata _trancheEndTimestamps,\\n        uint32[] calldata _percentageOfTranches,\\n        TrancheType[] calldata _trancheTypes\\n    ) external virtual override onlyOwner {}\\n\\n    function getWithdrawableAmount(string calldata _campaignID, address _user)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {}\\n\\n    function getWithdrawedAmount(string calldata _campaignID, address _user)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ITokenSalePool\",\"name\":\"_tokenSalePool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"OperatorsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"OperatorsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"addOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolID\",\"type\":\"string\"}],\"name\":\"createDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolID\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_campaignIDs\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_trancheStartTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_trancheEndTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_percentageOfTranches\",\"type\":\"uint32[]\"},{\"internalType\":\"enum IDistributor.TrancheType[]\",\"name\":\"_trancheTypes\",\"type\":\"uint8[]\"}],\"name\":\"createDistributorWithReleaseInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolID\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolID\",\"type\":\"string\"}],\"name\":\"getDistributorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_campaignID\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolID\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_campaignIDs\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawableAmountManyCampaigns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_campaignID\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolID\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_campaignIDs\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawedAmountManyCampaigns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOperators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"operatorAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"removeOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_campaignID\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_trancheStartTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_trancheEndTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_percentageOfTranches\",\"type\":\"uint32[]\"},{\"internalType\":\"enum IDistributor.TrancheType[]\",\"name\":\"_trancheTypes\",\"type\":\"uint8[]\"}],\"name\":\"setReleaseInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolID\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_campaignIDs\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_trancheStartTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_trancheEndTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_percentageOfTranches\",\"type\":\"uint32[]\"},{\"internalType\":\"enum IDistributor.TrancheType[]\",\"name\":\"_trancheTypes\",\"type\":\"uint8[]\"}],\"name\":\"setReleaseInfoSameInManyCampaigns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITokenSalePool\",\"name\":\"_tokenSalePool\",\"type\":\"address\"}],\"name\":\"setTokenSalePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSalePool\",\"outputs\":[{\"internalType\":\"contract ITokenSalePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_campaignID\",\"type\":\"string\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolID\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_campaignIDs\",\"type\":\"string[]\"}],\"name\":\"withdrawManyCampaigns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DistributorFactory", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f581446c123ae8e7ebd89b7d95386530b4209c20", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}