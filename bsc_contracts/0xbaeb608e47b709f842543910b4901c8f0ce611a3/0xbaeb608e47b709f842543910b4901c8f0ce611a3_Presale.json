{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract Presale {\r\n    address public owner;\r\n    IERC20 public token;\r\n    IERC20 public usdt;\r\n\r\n    uint256 public startTime;\r\n    uint256[10] public pricesInUsdt = [10000000000000000000, 5000000000000000000, 3333333333333333500, 2500000000000000000, 2000000000000000000, 1666666666666666700, 1428571428571428600, 1250000000000000000, 1111111111111111200, 1000000000000000000]; // Prices for each time interval\r\n    uint256 public constant INCREMENT_INTERVAL = 30 days; // 1 minute in seconds\r\n    uint256 public constant bnb_price = 250; // 1 minute in seconds\r\n    uint256 public tokenPurchased = 0;\r\n    constructor(address _token, address _usdt) {\r\n        owner = 0x26F4a4B3BE6F5cd4c8a705b8ec6Cd7C6394d926b;\r\n        token = IERC20(_token);\r\n        usdt = IERC20(_usdt);\r\n        startTime = block.timestamp;\r\n\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n    function currentPrice() public view returns (uint256) {\r\n        if (block.timestamp < startTime) {\r\n            return pricesInUsdt[0]; // Convert to wei\r\n        }\r\n\r\n        uint256 minutesSinceStart = (block.timestamp - startTime) / INCREMENT_INTERVAL;\r\n        if (minutesSinceStart >= pricesInUsdt.length) {\r\n            return pricesInUsdt[pricesInUsdt.length - 1]; // Convert to wei\r\n        }\r\n\r\n        return pricesInUsdt[minutesSinceStart]; // Convert to wei\r\n    }\r\n\r\n   \r\n    function buyTokens(uint256 usdtAmountInWei) external {\r\n\r\n        uint256 currentPrices = currentPrice();\r\n        uint256 tokensToBuy = (usdtAmountInWei * currentPrices)/1000000000000000000;\r\n\r\n        require(token.balanceOf(address(this)) >= tokensToBuy/1000000000000000000, \"Not enough tokens in the contract\");\r\n\r\n        usdt.transferFrom(msg.sender, address(this), usdtAmountInWei);\r\n        token.transfer(msg.sender, tokensToBuy/1000000000000000000);\r\n        tokenPurchased += tokensToBuy/1000000000000000000;\r\n    }\r\n  function buyTokensNative() external payable  {\r\n        uint256 currentPrices = currentPrice();\r\n        uint256 tokensToBuyinDollar = msg.value * bnb_price;\r\n    uint256 tokensToBuy = (tokensToBuyinDollar * currentPrices)/1000000000000000000;\r\n\r\n        token.transfer(msg.sender, tokensToBuy/1000000000000000000);\r\n         address payable contractOwner = payable(owner);\r\n        contractOwner.transfer(msg.value);\r\n                tokenPurchased += tokensToBuy/1000000000000000000;\r\n\r\n    }\r\n    function withdrawFunds() external onlyOwner {\r\n        usdt.transfer(owner, usdt.balanceOf(address(this)));\r\n    }\r\n\r\n    function withdrawTokens() external onlyOwner {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(balance > 0, \"Presale: No tokens to withdraw\");\r\n\r\n        token.transfer(owner, balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"INCREMENT_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnb_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmountInWei\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokensNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pricesInUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f7dbd865569332dee5ec3d43ac4e9989988cb50e00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8f360f14f763117187ebd78cd329113b4a6f40917110ac48e0565f2e526e3e6c"}