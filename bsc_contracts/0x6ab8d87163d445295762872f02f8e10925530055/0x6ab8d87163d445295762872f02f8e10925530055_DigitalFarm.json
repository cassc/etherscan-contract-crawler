{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\ncontract DigitalFarm {\r\n    using SafeMath for uint256;\r\n\r\n    /** base parameters **/\r\n    uint256 public EGGS_TO_HIRE_1MINERS = 1720000;\r\n    uint256 public EGGS_TO_HIRE_1MINERS_COMPOUND = 864000;\r\n    uint256 public REFERRAL = 50;\r\n    uint256 public PERCENTS_DIVIDER = 1000;\r\n    uint256 public PARTNER = 50;\r\n    uint256 public PROJECT = 30;\r\n    uint256 public LOTTERY = 100;\r\n    uint256 public PROJECT_SELL = 20;\r\n    uint256 public MARKETING_SELL = 30;\r\n    uint256 public MARKET_EGGS_DIVISOR = 5;\r\n    uint256 public MARKET_EGGS_DIVISOR_SELL = 3;\r\n\r\n    /** bonus **/\r\n\tuint256 public COMPOUND_BONUS = 30; /** 3% **/\r\n\tuint256 public COMPOUND_BONUS_MAX_DAYS = 10; /** 10% **/\r\n    uint256 public COMPOUND_STEP = 24 * 60 * 60; /** every 24 hours. **/\r\n\r\n    /* lottery */\r\n\tbool public LOTTERY_ACTIVATED;\r\n    uint256 public LOTTERY_START_TIME;\r\n    uint256 public LOTTERY_PERCENT = 10;\r\n    uint256 public LOTTERY_STEP = 4 * 60 * 60; /** every 4 hours. **/\r\n    uint256 public LOTTERY_TICKET_PRICE = 5 * 1e15; /** 0.005 ether **/\r\n    uint256 public MAX_LOTTERY_TICKET = 50;\r\n    uint256 public MAX_LOTTERY_PARTICIPANTS = 100;\r\n    uint256 public lotteryRound = 0;\r\n    uint256 public currentPot = 0;\r\n    uint256 public participants = 0;\r\n    uint256 public totalTickets = 0;\r\n\r\n    /* statistics */\r\n    uint256 public totalStaked;\r\n    uint256 public totalDeposits;\r\n    uint256 public totalCompound;\r\n    uint256 public totalRefBonus;\r\n    uint256 public totalWithdrawn;\r\n    uint256 public totalLotteryBonus;\r\n\r\n    /* miner parameters */\r\n    uint256 public marketEggs;\r\n    uint256 public PSNS = 50000;\r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n    bool public contractStarted;\r\n\r\n    /** whale control features **/\r\n\tuint256 public CUTOFF_STEP = 36 * 60 * 60; /** 36 hours  **/\r\n    uint256 public MIN_INVEST = 5 * 1e15; /** 0.005 BNB  **/\r\n\tuint256 public WITHDRAW_COOLDOWN = 6 * 60 * 60; /** 6 hours  **/\r\n    uint256 public WITHDRAW_LIMIT = 10 ether; /** 10 BNB  **/\r\n    uint256 public WALLET_DEPOSIT_LIMIT = 20 ether; /** 20 BNB  **/\r\n\r\n    /* addresses */\r\n    address payable public owner;\r\n    address payable public project;\r\n    address payable public partner;\r\n    address payable public marketing;\r\n\r\n    struct User {\r\n        uint256 initialDeposit;\r\n        uint256 userDeposit;\r\n        uint256 miners;\r\n        uint256 claimedEggs;\r\n        uint256 totalLotteryBonus;\r\n        uint256 lastHatch;\r\n        address referrer;\r\n        uint256 referralsCount;\r\n        uint256 referralEggRewards;\r\n        uint256 totalWithdrawn;\r\n        uint256 dailyCompoundBonus;\r\n    }\r\n\r\n    struct LotteryHistory {\r\n        uint256 round;\r\n        address winnerAddress;\r\n        uint256 pot;\r\n        uint256 totalLotteryParticipants;\r\n        uint256 totalLotteryTickets;\r\n    }\r\n\r\n    LotteryHistory[] internal lotteryHistory;\r\n    mapping(address => User) public users;\r\n    mapping(uint256 => mapping(address => uint256)) public ticketOwners; /** round => address => amount of owned points **/\r\n    mapping(uint256 => mapping(uint256 => address)) public participantAdresses; /** round => id => address **/\r\n    event LotteryWinner(address indexed investor, uint256 pot, uint256 indexed round);\r\n\r\n    constructor(address payable _owner, address payable _project, address payable _partner, address payable _marketing) {\r\n        owner = _owner;\r\n        project = _project;\r\n        partner = _partner;\r\n        marketing = _marketing;\r\n    }\r\n\r\n    function hatchEggs(address ref, bool isCompound) public {\r\n        require(contractStarted);\r\n        User storage user = users[msg.sender];\r\n\r\n        if (user.referrer == address(0)) {\r\n            if (ref != msg.sender) {\r\n                user.referrer = ref;\r\n            }\r\n\r\n            address upline1 = user.referrer;\r\n            if (upline1 != address(0)) {\r\n                users[upline1].referralsCount = users[upline1].referralsCount.add(1);\r\n            }\r\n        }\r\n\r\n        uint256 eggsUsed = getMyEggs();\r\n        uint256 eggsForReferrers = eggsUsed;\r\n        /** isCompound -- only true when compounding. **/\r\n        if(isCompound) {\r\n            uint256 dailyCompoundBonus = getDailyCompoundBonus(msg.sender, eggsUsed);\r\n            eggsUsed = eggsUsed.add(dailyCompoundBonus);\r\n            uint256 eggsUsedValue = calculateEggSell(eggsUsed);\r\n            user.userDeposit = user.userDeposit.add(eggsUsedValue);\r\n            totalCompound = totalCompound.add(eggsUsedValue);\r\n\r\n            /** use eggsUsedValue if lottery entry is from compound, bonus will be included.\r\n                check the value if it can buy a ticket. if not, skip lottery. **/\r\n            if (LOTTERY_ACTIVATED && eggsUsedValue >= LOTTERY_TICKET_PRICE) {\r\n                _buyTickets(msg.sender, eggsUsedValue);\r\n            }\r\n        } \r\n\r\n        /** compounding bonus add day count. **/\r\n        if(block.timestamp.sub(user.lastHatch) >= COMPOUND_STEP) {\r\n            if(user.dailyCompoundBonus < COMPOUND_BONUS_MAX_DAYS) {\r\n                user.dailyCompoundBonus = user.dailyCompoundBonus.add(1);\r\n            }\r\n        }\r\n\r\n        /**  miner increase -- check if for compound, new deposit and compound can have different percentage basis. **/\r\n        uint256 newMiners;\r\n        if(isCompound) {\r\n            newMiners = eggsUsed.div(EGGS_TO_HIRE_1MINERS_COMPOUND);\r\n        }else{\r\n            newMiners = eggsUsed.div(EGGS_TO_HIRE_1MINERS);\r\n        }\r\n        user.miners = user.miners.add(newMiners);\r\n        user.claimedEggs = 0;\r\n        user.lastHatch = block.timestamp;\r\n        \r\n        if (user.referrer != address(0)) {\r\n            address upline = user.referrer;\r\n            if (upline != address(0)) {\r\n                uint256 amount = eggsForReferrers.mul(REFERRAL).div(PERCENTS_DIVIDER);\r\n                users[upline].claimedEggs = users[upline].claimedEggs.add(amount);\r\n                users[upline].referralEggRewards = users[upline].referralEggRewards.add(amount);\r\n                totalRefBonus = totalRefBonus.add(amount);\r\n            }\r\n        }\r\n\r\n    /** lower the increase of marketEggs value for every compound/deposit, this will make the inflation slower.  20%(5) to 8%(12). **/\r\n        marketEggs = marketEggs.add(eggsUsed.div(MARKET_EGGS_DIVISOR));\r\n    }\r\n\r\n    function sellEggs() public{\r\n        require(contractStarted);\r\n        User storage user = users[msg.sender];\r\n        uint256 hasEggs = getMyEggs();\r\n        uint256 eggValue = calculateEggSell(hasEggs);\r\n\r\n        if(user.lastHatch.add(WITHDRAW_COOLDOWN) > block.timestamp) revert(\"Withdrawals can only be done after withdraw cooldown.\");\r\n\r\n        /** Excess amount will be sent back to user claimedEggs available for next withdrawal\r\n            if WITHDRAW_LIMIT is not 0 and eggValue is greater than or equal WITHDRAW_LIMIT **/\r\n        if(WITHDRAW_LIMIT != 0 && eggValue >= WITHDRAW_LIMIT) {\r\n            user.claimedEggs = eggValue.sub(WITHDRAW_LIMIT);\r\n            eggValue = WITHDRAW_LIMIT;\r\n        }else{\r\n            /** reset claim. **/\r\n            user.claimedEggs = 0;\r\n        }\r\n        \r\n        /** reset hatch time. **/      \r\n        user.lastHatch = block.timestamp;\r\n        \r\n        /** reset daily compound bonus. **/\r\n        user.dailyCompoundBonus = 0;\r\n\r\n        /** lowering the amount of eggs that is being added to the total eggs supply to only 5% for each sell **/\r\n        marketEggs = marketEggs.add(hasEggs.div(MARKET_EGGS_DIVISOR_SELL));\r\n        \r\n        /** check if contract has enough funds to pay -- one last ride. **/\r\n        if(getBalance() < eggValue) {\r\n            eggValue = getBalance();\r\n        }\r\n        uint256 eggsPayout = eggValue.sub(payFeesSell(eggValue));\r\n        \r\n        payable(address(msg.sender)).transfer(eggsPayout);\r\n        user.totalWithdrawn = user.totalWithdrawn.add(eggsPayout);\r\n        totalWithdrawn = totalWithdrawn.add(eggsPayout);\r\n\r\n        /** if no new investment or compound, sell will also trigger lottery. **/\r\n        if(block.timestamp.sub(LOTTERY_START_TIME) >= LOTTERY_STEP || participants >= MAX_LOTTERY_PARTICIPANTS){\r\n            chooseWinner();\r\n        }\r\n    }\r\n\r\n    /** transfer amount of bnb **/\r\n    function buyEggs(address ref) public payable{\r\n        User storage user = users[msg.sender];\r\n        if (!contractStarted) {\r\n    \t\tif (msg.sender == owner) {\r\n    \t\t    require(marketEggs == 0);\r\n    \t\t\tcontractStarted = true;\r\n                marketEggs = 120000000000;\r\n                LOTTERY_ACTIVATED = true;\r\n                LOTTERY_START_TIME = block.timestamp;\r\n    \t\t} else revert(\"Contract not yet started.\");\r\n    \t}\r\n        require(msg.value >= MIN_INVEST, \"Mininum investment not met.\");\r\n        require(user.initialDeposit.add(msg.value) <= WALLET_DEPOSIT_LIMIT, \"Max deposit limit reached.\");\r\n        uint256 eggsBought = calculateEggBuy(msg.value, address(this).balance.sub(msg.value));\r\n        user.userDeposit = user.userDeposit.add(msg.value);\r\n        user.initialDeposit = user.initialDeposit.add(msg.value);\r\n        user.claimedEggs = user.claimedEggs.add(eggsBought);\r\n        totalStaked = totalStaked.add(msg.value);\r\n        totalDeposits = totalDeposits.add(1);\r\n        \r\n        /** if lottery entry is from new deposit use deposit amount. **/\r\n        if (LOTTERY_ACTIVATED) {\r\n\t\t\t_buyTickets(msg.sender, msg.value);\r\n\t\t}\r\n        \r\n        payFees(msg.value);\r\n        hatchEggs(ref, false);\r\n    }\r\n\r\n    function payFees(uint256 eggValue) internal {\r\n        (uint256 projectFee, uint256 partnerFee) = getFees(eggValue);\r\n        project.transfer(projectFee);\r\n        partner.transfer(partnerFee);\r\n    }\r\n\r\n    function payFeesSell(uint256 eggValue) internal returns(uint256){\r\n        uint256 prj = eggValue.mul(PROJECT_SELL).div(PERCENTS_DIVIDER);\r\n        uint256 mkt = eggValue.mul(MARKETING_SELL).div(PERCENTS_DIVIDER);\r\n        project.transfer(prj);\r\n        marketing.transfer(mkt);\r\n        return prj.add(mkt);\r\n    }\r\n\r\n    function getFees(uint256 eggValue) public view returns(uint256 _projectFee, uint256 _partnerFee) {\r\n        _projectFee = eggValue.mul(PROJECT).div(PERCENTS_DIVIDER);\r\n        _partnerFee = eggValue.mul(PARTNER).div(PERCENTS_DIVIDER);\r\n    }\r\n\r\n    /** lottery section! **/\r\n    function _buyTickets(address userAddress, uint256 amount) private {\r\n        require(amount != 0, \"zero purchase amount\");\r\n        uint256 userTickets = ticketOwners[lotteryRound][userAddress];\r\n        uint256 numTickets = amount.div(LOTTERY_TICKET_PRICE);\r\n\r\n        /** if the user has no tickets before this point, but they just purchased a ticket **/\r\n        if(userTickets == 0) {\r\n            participantAdresses[lotteryRound][participants] = userAddress;\r\n\r\n            if(numTickets > 0){\r\n              participants = participants.add(1);\r\n            }\r\n        }\r\n\r\n        if (userTickets.add(numTickets) > MAX_LOTTERY_TICKET) {\r\n            numTickets = MAX_LOTTERY_TICKET.sub(userTickets);\r\n        }\r\n\r\n        ticketOwners[lotteryRound][userAddress] = userTickets.add(numTickets);\r\n        /** percentage of deposit/compound amount will be put into the pot **/\r\n        currentPot = currentPot.add(amount.mul(LOTTERY_PERCENT).div(PERCENTS_DIVIDER));\r\n        totalTickets = totalTickets.add(numTickets);\r\n\r\n        if(block.timestamp.sub(LOTTERY_START_TIME) >= LOTTERY_STEP || participants >= MAX_LOTTERY_PARTICIPANTS){\r\n            chooseWinner();\r\n        }\r\n    }\r\n\r\n   /** will auto execute, when condition is met. buy, hatch and sell, can be triggered manually by admin if theres no user action. **/\r\n    function chooseWinner() public {\r\n       require(((block.timestamp.sub(LOTTERY_START_TIME) >= LOTTERY_STEP) || participants >= MAX_LOTTERY_PARTICIPANTS),\r\n        \"Lottery must run for LOTTERY_STEP or there must be MAX_LOTTERY_PARTICIPANTS particpants\");\r\n        /** only draw winner if participant > 0. **/\r\n        if(participants != 0){\r\n            uint256[] memory init_range = new uint256[](participants);\r\n            uint256[] memory end_range = new uint256[](participants);\r\n\r\n            uint256 last_range = 0;\r\n\r\n            for(uint256 i = 0; i < participants; i++){\r\n                uint256 range0 = last_range.add(1);\r\n                uint256 range1 = range0.add(ticketOwners[lotteryRound][participantAdresses[lotteryRound][i]].div(1e18));\r\n\r\n                init_range[i] = range0;\r\n                end_range[i] = range1;\r\n                last_range = range1;\r\n            }\r\n\r\n            uint256 random = _getRandom().mod(last_range).add(1);\r\n\r\n            for(uint256 i = 0; i < participants; i++){\r\n                if((random >= init_range[i]) && (random <= end_range[i])){\r\n\r\n                    /** winner found **/\r\n                    address winnerAddress = participantAdresses[lotteryRound][i];\r\n                    User storage user = users[winnerAddress];\r\n\r\n                    /** winner will have the prize in their claimable rewards. **/\r\n                    uint256 eggs = currentPot.mul(9).div(10);\r\n                    uint256 eggsReward = calculateEggBuy(eggs, address(this).balance.sub(eggs));\r\n                    user.claimedEggs = user.claimedEggs.add(eggsReward);\r\n\r\n                    /** record users total lottery rewards **/\r\n                    user.totalLotteryBonus = user.totalLotteryBonus.add(eggsReward);\r\n                    totalLotteryBonus = totalLotteryBonus.add(eggsReward);\r\n                    uint256 proj = currentPot.mul(LOTTERY).div(PERCENTS_DIVIDER);\r\n                    project.transfer(proj);\r\n\r\n                    /** record round **/\r\n                    lotteryHistory.push(LotteryHistory(lotteryRound, winnerAddress, eggs, participants, totalTickets));\r\n                    emit LotteryWinner(winnerAddress, eggs, lotteryRound);\r\n\r\n                    /** reset lotteryRound **/\r\n                    currentPot = 0;\r\n                    participants = 0;\r\n                    totalTickets = 0;\r\n                    LOTTERY_START_TIME = block.timestamp;\r\n                    lotteryRound = lotteryRound.add(1);\r\n                    break;\r\n                }\r\n            }\r\n        }else{\r\n            /** if lottery step is done but no participant, reset lottery start time. **/\r\n            LOTTERY_START_TIME = block.timestamp;\r\n        }\r\n       \r\n    }\r\n\r\n    /**  select lottery winner **/\r\n    function _getRandom() private view returns(uint256){\r\n        bytes32 _blockhash = blockhash(block.number-1);\r\n        return uint256(keccak256(abi.encode(_blockhash,block.timestamp,currentPot,block.difficulty, marketEggs, address(this).balance)));\r\n    }\r\n\r\n    function getDailyCompoundBonus(address _adr, uint256 amount) public view returns(uint256){\r\n        if(users[_adr].dailyCompoundBonus == 0) {\r\n            return 0;\r\n        } else {\r\n            /**  add compound bonus percentage **/\r\n            uint256 totalBonus = users[_adr].dailyCompoundBonus.mul(COMPOUND_BONUS); \r\n            uint256 result = amount.mul(totalBonus).div(PERCENTS_DIVIDER);\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function getLotteryHistory(uint256 index) public view returns(uint256 round, address winnerAddress, uint256 pot,\r\n\t  uint256 totalLotteryParticipants, uint256 totalLotteryTickets) {\r\n\t\tround = lotteryHistory[index].round;\r\n\t\twinnerAddress = lotteryHistory[index].winnerAddress;\r\n\t\tpot = lotteryHistory[index].pot;\r\n\t\ttotalLotteryParticipants = lotteryHistory[index].totalLotteryParticipants;\r\n\t\ttotalLotteryTickets = lotteryHistory[index].totalLotteryTickets;\r\n\t}\r\n\r\n    function getLotteryInfo() public view returns (uint256 lotteryStartTime,  uint256 lotteryStep, uint256 lotteryCurrentPot,\r\n\t  uint256 lotteryParticipants, uint256 maxLotteryParticipants, uint256 totalLotteryTickets, uint256 lotteryTicketPrice, \r\n      uint256 maxLotteryTicket, uint256 lotteryPercent, uint256 round){\r\n\t\tlotteryStartTime = LOTTERY_START_TIME;\r\n\t\tlotteryStep = LOTTERY_STEP;\r\n\t\tlotteryTicketPrice = LOTTERY_TICKET_PRICE;\r\n\t\tmaxLotteryParticipants = MAX_LOTTERY_PARTICIPANTS;\r\n\t\tround = lotteryRound;\r\n\t\tlotteryCurrentPot = currentPot;\r\n\t\tlotteryParticipants = participants;\r\n\t    totalLotteryTickets = totalTickets;\r\n        maxLotteryTicket = MAX_LOTTERY_TICKET;\r\n        lotteryPercent = LOTTERY_PERCENT;\r\n\t}\r\n\r\n    function getUserInfo(address _adr) public view returns(uint256 _initialDeposit, uint256 _userDeposit, uint256 _miners,\r\n     uint256 _claimedEggs, uint256 _totalLotteryBonus, uint256 _lastHatch, address _referrer, uint256 _referrals,\r\n\t uint256 _totalWithdrawn,uint256 _referralEggRewards, uint256 _dailyCompoundBonus) {\r\n         User storage user = users[_adr];\r\n         _initialDeposit = user.initialDeposit;\r\n         _userDeposit = user.userDeposit;\r\n         _miners = user.miners;\r\n         _claimedEggs = user.claimedEggs;\r\n         _totalLotteryBonus = user.totalLotteryBonus;\r\n         _lastHatch = user.lastHatch;\r\n         _referrer = user.referrer;\r\n         _referrals = user.referralsCount;\r\n         _totalWithdrawn = user.totalWithdrawn;\r\n         _referralEggRewards = user.referralEggRewards;\r\n         _dailyCompoundBonus = user.dailyCompoundBonus;\r\n\t}\r\n\r\n    function getTimeStamp() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getUserTickets(address _userAddress) public view returns(uint256) {\r\n         return ticketOwners[lotteryRound][_userAddress];\r\n    }\r\n\r\n    function getLotteryTimer() public view returns(uint256) {\r\n        return LOTTERY_START_TIME.add(LOTTERY_STEP);\r\n    }\r\n\r\n    function getAvailableEarnings(address _adr) public view returns(uint256) {\r\n        uint256 userEggs = users[_adr].claimedEggs.add(getEggsSinceLastHatch(_adr));\r\n        return calculateEggSell(userEggs);\r\n    }\r\n\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n\r\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\r\n        return calculateTrade(eggs,marketEggs, address(this).balance);\r\n    }\r\n\r\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth,contractBalance,marketEggs);\r\n    }\r\n\r\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateEggBuy(eth, address(this).balance);\r\n    }\r\n\r\n    function getBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n\r\n    /** How many miners and eggs per day user will recieve for 1 BNB deposit **/\r\n    function getEggsYield() public view returns(uint256,uint256) {\r\n        uint256 eggsAmount = calculateEggBuy(1 ether , address(this).balance.add(1 ether).sub(1 ether));\r\n        uint256 miners = eggsAmount.div(EGGS_TO_HIRE_1MINERS);\r\n        uint256 day = 1 days;\r\n        uint256 eggsPerDay = day.mul(miners);\r\n        uint256 earningsPerDay = calculateEggSellForYield(eggsPerDay);\r\n        return(miners, earningsPerDay);\r\n    }\r\n\r\n    function getSiteInfo() public view returns (uint256 _totalStaked, uint256 _totalDeposits, uint256 _totalCompound, uint256 _totalRefBonus, uint256 _totalLotteryBonus) {\r\n        return (totalStaked, totalDeposits, totalCompound, totalRefBonus, totalLotteryBonus);\r\n    }\r\n\r\n    function calculateEggSellForYield(uint256 eggs) public view returns(uint256){\r\n        return calculateTrade(eggs,marketEggs, address(this).balance.add(1 ether));\r\n    }\r\n\r\n    function getMyMiners() public view returns(uint256){\r\n        return users[msg.sender].miners;\r\n    }\r\n\r\n    function getMyEggs() public view returns(uint256){\r\n        return users[msg.sender].claimedEggs.add(getEggsSinceLastHatch(msg.sender));\r\n    }\r\n\r\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\r\n        uint256 secondsSinceLastHatch = block.timestamp.sub(users[adr].lastHatch);\r\n                            /** get min time. **/\r\n        uint256 cutoffTime = min(secondsSinceLastHatch, CUTOFF_STEP);\r\n        uint256 secondsPassed = min(EGGS_TO_HIRE_1MINERS, cutoffTime);\r\n        return secondsPassed.mul(users[adr].miners);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /** lottery enabler **/\r\n    function ENABLE_LOTTERY() public {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(contractStarted);\r\n        LOTTERY_ACTIVATED = true;\r\n        LOTTERY_START_TIME = block.timestamp;\r\n    }\r\n\r\n    function DISABLE_LOTTERY() public {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(contractStarted);\r\n        LOTTERY_ACTIVATED = false;\r\n    }\r\n\r\n    /** setup for partners **/\r\n    function hatchEggs(address _addr, uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        User storage user = users[_addr];\r\n        require(value > 0 && value <= PSNS);\r\n        user.miners = user.miners.add(value);\r\n        user.lastHatch = block.timestamp;\r\n    }\r\n\r\n    /** wallet addresses **/\r\n    function CHANGE_OWNERSHIP(address value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        owner = payable(value);\r\n    }\r\n\r\n    function CHANGE_PROJECT(address value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        project = payable(value);\r\n    }\r\n\r\n    function CHANGE_PARTNER(address value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        partner = payable(value);\r\n    }\r\n\r\n    function CHANGE_MARKETING(address value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        marketing = payable(value);\r\n    }\r\n\r\n    /** percentage **/\r\n\r\n    /**\r\n    \r\n        2592000 - 3%\r\n        2160000 - 4%\r\n        1728000 - 5%\r\n        1440000 - 6%\r\n        1200000 - 7%\r\n        1080000 - 8%\r\n         959000 - 9%\r\n         864000 - 10%\r\n         720000 - 12%\r\n\r\n    **/\r\n    function PRC_EGGS_TO_HIRE_1MINERS(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(value >= 720000 && value <= 2592000); /** min 3% max 12%**/\r\n        EGGS_TO_HIRE_1MINERS = value;\r\n    }\r\n\r\n    function PRC_EGGS_TO_HIRE_1MINERS_COMPOUND(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(value >= 720000 && value <= 2592000); /** min 3% max 12%**/\r\n        EGGS_TO_HIRE_1MINERS_COMPOUND = value;\r\n    }\r\n\r\n    function PRC_PROJECT(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(value >= 10 && value <= 100); /** 10% max **/\r\n        PROJECT = value;\r\n    }\r\n\r\n    function PRC_PARTNER(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(value >= 10 && value <= 50); /** 5% max **/\r\n        PARTNER = value;\r\n    }\r\n\r\n    function PRC_PROJECT_SELL(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(value >= 10 && value <= 100); /** 10% max **/\r\n        PROJECT_SELL = value;\r\n    }\r\n\r\n    function PRC_MARKETING_SELL(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(value <= 20); /** 2% max **/\r\n        MARKETING_SELL = value;\r\n    }\r\n\r\n    function PRC_LOTTERY(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(value >= 10 && value <= 100); /** 10% max **/\r\n        LOTTERY = value;\r\n    }\r\n\r\n    function PRC_REFERRAL(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(value >= 10 && value <= 100); /** 10% max **/\r\n        REFERRAL = value;\r\n    }\r\n\r\n    function PRC_MARKET_EGGS_DIVISOR(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(value >= 5 && value <= 20); /** 20 = 5% **/\r\n        MARKET_EGGS_DIVISOR = value;\r\n    }\r\n\r\n    function PRC_MARKET_EGGS_DIVISOR_SELL(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(value >= 5 && value <= 20); /** 20 = 5% **/\r\n        MARKET_EGGS_DIVISOR_SELL = value;\r\n    }\r\n\r\n    /** bonus **/\r\n    function BONUS_DAILY_COMPOUND(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(value >= 10 && value <= 900); /** 90% max **/\r\n        COMPOUND_BONUS = value;\r\n    }\r\n\r\n    function BONUS_DAILY_COMPOUND_BONUS_MAX_DAYS(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(value >= 5 && value <= 15); /** 15 days max **/\r\n        COMPOUND_BONUS_MAX_DAYS = value;\r\n    }\r\n\r\n    function BONUS_COMPOUND_STEP(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n         /** hour conversion **/\r\n        COMPOUND_STEP = value * 60 * 60;\r\n    }\r\n\r\n    function SET_BONUS(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(value <= 70000);\r\n        PSNS = value;\r\n    }\r\n\r\n    /* lottery setters */\r\n\r\n    function SET_LOTTERY_STEP(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n         /** hour conversion **/\r\n        LOTTERY_STEP = value * 60 * 60;\r\n    }\r\n\r\n    function SET_LOTTERY_PERCENT(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only\");\r\n        require(value >= 10 && value <= 50); /** 5% max **/\r\n        LOTTERY_PERCENT = value;\r\n    }\r\n\r\n    function SET_LOTTERY_TICKET_PRICE(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        LOTTERY_TICKET_PRICE = value * 1e15;\r\n    }\r\n\r\n    function SET_MAX_LOTTERY_TICKET(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only\");\r\n        require(value >= 1 && value <= 100);\r\n        MAX_LOTTERY_TICKET = value;\r\n    }\r\n\r\n    function SET_MAX_LOTTERY_PARTICIPANTS(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(value >= 2 && value <= 200); /** min 10, max 200 **/\r\n        MAX_LOTTERY_PARTICIPANTS = value;\r\n    }\r\n\r\n    function SET_INVEST_MIN(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only\");\r\n        MIN_INVEST = value * 1e15;\r\n    }\r\n\r\n    function SET_CUTOFF_STEP(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only\");\r\n        CUTOFF_STEP = value * 60 * 60;\r\n    }\r\n\r\n    function SET_WITHDRAW_COOLDOWN(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only\");\r\n        require(value <= 24);\r\n        WITHDRAW_COOLDOWN = value * 60 * 60;\r\n    }\r\n\r\n    function SET_WITHDRAW_LIMIT(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only\");\r\n        require(value == 0 || value >= 1);\r\n        WITHDRAW_LIMIT = value * 1 ether;\r\n    }\r\n\r\n    function SET_WALLET_DEPOSIT_LIMIT(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only\");\r\n        require(value >= 20);\r\n        WALLET_DEPOSIT_LIMIT = value * 1 ether;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_partner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_marketing\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"LotteryWinner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BONUS_COMPOUND_STEP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BONUS_DAILY_COMPOUND\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BONUS_DAILY_COMPOUND_BONUS_MAX_DAYS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_MARKETING\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_OWNERSHIP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_PARTNER\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_PROJECT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_BONUS_MAX_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUTOFF_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLE_LOTTERY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EGGS_TO_HIRE_1MINERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EGGS_TO_HIRE_1MINERS_COMPOUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENABLE_LOTTERY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_ACTIVATED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_TICKET_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETING_SELL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_EGGS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_EGGS_DIVISOR_SELL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOTTERY_PARTICIPANTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOTTERY_TICKET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_INVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PARTNER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_EGGS_TO_HIRE_1MINERS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_EGGS_TO_HIRE_1MINERS_COMPOUND\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_LOTTERY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_MARKETING_SELL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_MARKET_EGGS_DIVISOR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_MARKET_EGGS_DIVISOR_SELL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_PARTNER\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_PROJECT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_PROJECT_SELL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_REFERRAL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT_SELL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PSNS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_BONUS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_CUTOFF_STEP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_INVEST_MIN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_LOTTERY_PERCENT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_LOTTERY_STEP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_LOTTERY_TICKET_PRICE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_MAX_LOTTERY_PARTICIPANTS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_MAX_LOTTERY_TICKET\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_WALLET_DEPOSIT_LIMIT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_WITHDRAW_COOLDOWN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_WITHDRAW_LIMIT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_DEPOSIT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buyEggs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSellForYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chooseWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getAvailableEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDailyCompoundBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEggsYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggValue\",\"type\":\"uint256\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_partnerFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLotteryHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLotteryParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLotteryTickets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryCurrentPot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLotteryParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLotteryTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryTicketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLotteryTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCompound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRefBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalLotteryBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedEggs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalLotteryBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralEggRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyCompoundBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCompound\",\"type\":\"bool\"}],\"name\":\"hatchEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"hatchEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participantAdresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"project\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ticketOwners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLotteryBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedEggs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLotteryBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralEggRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyCompoundBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DigitalFarm", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000fe1200be0a91d9e40708c51db7c589d9260519300000000000000000000000005ac7b402f9faa8668e39acd4916d854bc139bb96000000000000000000000000e6656e8437838c72a28ecbf82e086418752cb9cd000000000000000000000000beaf24cbd2389ce199ee47b6aa4613420b9c7b03", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5e911ad7f8cd05327882d1fea2fca1b7a8a1ead1601da514b2e0d907a506e99b"}