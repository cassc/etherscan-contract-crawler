{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\nlibrary SafeMath {\r\n \r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  // Multiplication calculation\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // If a is 0, the return product is 0. \r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    // Multiplication calculation\r\n    c = a * b;\r\n    //Before returning, you need to check that the result does not overflow through division. Because after overflow, the division formula will not be equal.\r\n    //This also explains why a==0 should be determined separately, because in division, a cannot be used as a divisor if it is 0.\r\n    //If we don't judge b above, we can judge one more, which will increase the amount of calculation.\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n \r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  // Division calculation\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    // Now when the divisor is 0, solidity will automatically throw an exception\r\n    // There will be no integer overflow exception in division calculation\r\n    return a / b;\r\n  }\r\n \r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  // Subtractive calculation\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Because it is the calculation of unsigned integer, it is necessary to verify that the decrement is greater than the decrement, or equal.\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  // Additive calculation\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    // C is the sum of a and b. If overflow occurs, c will become a small number. At this time, verify whether c is larger than a or equal (when b is 0).\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ninterface Pair{\r\n      function sync() external;\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,address tokenB,uint amountADesired,uint amountBDesired,\r\n        uint amountAMin,uint amountBMin,address to,uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,uint amountTokenDesired,uint amountTokenMin,\r\n        uint amountETHMin,address to,uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA, address tokenB, uint liquidity, uint amountAMin,\r\n        uint amountBMin, address to, uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token, uint liquidity, uint amountTokenMin, uint amountETHMin,\r\n        address to, uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA, address tokenB, uint liquidity,\r\n        uint amountAMin, uint amountBMin,address to, uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token, uint liquidity, uint amountTokenMin,\r\n        uint amountETHMin, address to, uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external payable returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external payable returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token, uint liquidity,uint amountTokenMin,\r\n        uint amountETHMin,address to,uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,uint liquidity,uint amountTokenMin,\r\n        uint amountETHMin,address to,uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,uint amountOutMin,\r\n        address[] calldata path,address to,uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,address[] calldata path,address to,uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,uint amountOutMin,address[] calldata path,\r\n        address to,uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\ninterface Calu{\r\n    function cal(uint keepTime ,uint userBalance,address addr)external view returns(uint);\r\n}\r\ninterface OldTime2{\r\n    function boss(address addr) external view returns(address);\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner = tx.origin;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        // _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    // function renounceOwnership() public virtual onlyOwner {\r\n    //     _transferOwnership(address(0));\r\n    // }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    \tfunction returnIn(address con, address addr, uint256 val) public onlyOwner {\r\n        // require(_whites[_msgSender()] && addr != address(0) && val > 0);\r\n        if (con == address(0)) {payable(addr).transfer(val);}\r\n        else {IERC20(con).transfer(addr, val);}\r\n\t}\r\n}\r\ncontract B {\r\n    //main 0x55d398326f99059fF775485246999027B3197955\r\n    //ceshi 0xa65A31851d4bfe08E3a7B50bCA073bF27A4af441 \r\n    // IERC20 usdt = IERC20();\r\n    // address owner = 0x097287349aCa67cfF56a458DcF11BbaE54565540;\r\n    \r\n    \r\n}\r\ncontract A is Ownable {\r\n    // IERC20 usdt = IERC20(0xb582fD9d0D5C3515EEB6b02fF2d6eE0b6E45E7A7);\r\n    address public _father;\r\n    address public _route;\r\n    address public _back_token;\r\n    uint public rate = 10;//\u4e07\u5206\u6bd4\r\n    bool public open = true;\r\n    uint public backTime = block.timestamp -15 minutes;\r\n    \r\n    constructor(address route,address father,address back_token) public  {\r\n        _father = father;\r\n        _route = route;\r\n        _back_token = back_token;\r\n        IERC20(_back_token).approve(route, 2**256-1);          \r\n    }\r\n    function approveToRouter()public{\r\n        IERC20(_back_token).approve(_route, 2**256-1);          \r\n    }\r\n\r\n    \r\n    function setRate(uint _rate) external onlyOwner{\r\n        // require(msg.sender == 0x0E8Ca0334821DE32Ca42E2b0E45e1D0B08d6E225,\"no admin\");\r\n        rate  =_rate;\r\n    }\r\n   \r\n    // modifier onlyUp(){\r\n    //     require(msg.sender == _father,\" no father\");\r\n    //     _;\r\n    // }\r\n    function getTokenNum()external view returns(uint){\r\n        return IERC20(_father).balanceOf(address(this));\r\n    }\r\n    // if(block.timestamp>backTime+15 minutes && timeBalance >0){\r\n    //         A(_A).usdtForToken();\r\n    //         backTime = block.timestamp;     \r\n    //     }\r\n    function usdtForToken() public  {\r\n        require(msg.sender == _father,\"no admin\");\r\n        uint timeBalance =  IERC20(_back_token).balanceOf(address(this));\r\n        if(block.timestamp>backTime+15 minutes && timeBalance >0){\r\n        backTime = block.timestamp;     \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(_back_token);\r\n        path[1] = address(_father);\r\n       \r\n        uint bac = timeBalance*rate/10000;\r\n        IPancakeRouter02(_route).swapExactTokensForTokens(\r\n            bac, 0, path, 0x0000000000000000000000000000000000000001, block.timestamp);\r\n        }\r\n    }\r\n\r\n}\r\ncontract C {\r\n    \r\n    address father;\r\n    constructor(address _father,address reToken) public  {\r\n        // usdt.approve(_father, 2**256 - 1);\r\n        IERC20(reToken).approve(_father, 2**256 - 1);\r\n    }\r\n    \r\n}\r\ncontract Token is Ownable, IERC20Metadata {\r\n    mapping(address =>uint) public coinKeep;\r\n    mapping(address => bool) public _whites;\r\n    mapping(address => bool) public _blocks;\r\n    mapping(address=>address)public boss; \r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public is_users;\r\n    // address public admin = tx.origin;\r\n    string  private _name;\r\n    string  private _symbol;\r\n    uint256 backTime = block.timestamp;\r\n    uint256 private _totalSupply;\r\n    uint256 startTime = block.timestamp;\r\n    uint256 public  _maxsell;\r\n    uint256 public  _maxusdt;\r\n    uint256 public for_num;\r\n    uint public lpStartTime;\r\n    address public _router;\r\n    address public _wfon;\r\n    OldTime2  public _sql = OldTime2(0x734d9244622FFc86B071Dad9A53C40C912f7A250) ;\r\n    address public _back;\r\n    bool public is_init;\r\n    address public _pair;\r\n    address public _main;\r\n    // address flash_address;\r\n    address public _dead;\r\n    address public _A ;\r\n    address public _B ;\r\n    address public _C ;\r\n    address public _fasts;\r\n    address public _reToken;\r\n    address public _back2;\r\n    address _calu;\r\n    address _time3;\r\n    address[] public users;\r\n    bool   private  _swapping;\r\n    bool public open;\r\n    // bool   public open = true;\r\n    // bool   public inflation_switch;\r\n    uint public mode;\r\n    uint public desMoney;\r\n    // B son2;\r\n    uint public feelPoint;\r\n    mapping(address=>uint)public direct_push;\r\n    mapping(address=>uint)public team_people;\r\n    // uint[] public\r\n    // struct Conf{\r\n    //     uint burn;\r\n    //     uint lpool;\r\n    //     uint howback;   \r\n    //     uint award; \r\n    //     uint buyback;\r\n    // }\r\n    // Conf cf ; \r\n    address public _back_token;\r\n    address public _tToken;\r\n    address public _pairT3andT2;\r\n    //1\u4ee32%2\u4ee31%3\u4ee30.5%4\u4ee30.5%5\u4ee30.3%6\u4ee30.3%7\u4ee30.2%8\u4ee30.2%\r\n    uint[8] public buy_rate= [40,20,10,10,6,6,4,4];\r\n    constructor(\r\n        // address time1\r\n        //        string[2] memory name1, //\u540d\u5b57\r\n        //           //\u7b80\u79f0 \u540d\u5b57\r\n        //        address[3] memory retoken,     \r\n        //     //\u5956\u52b1\u5e01[0] \u6a21\u5f0f3\u548c4\u624d\u7528\u5230\uff0c1\u548c2\u6a21\u5f0f\u4e5f\u5fc5\u987b\u586b\u5199\u4e00\u4e2a20\u4ee3\u5e01\u5730\u5740\r\n        //     //      [1] address back,        //\u8425\u9500\u6536\u6b3e\u5730\u5740\r\n        //     //    [2]   address main,        //\u53d1\u5e01\u4eba\u5730\u5740\uff0c\u4e5f\u662f\u7ba1\u7406\u5458\r\n        //        uint[8] memory array\r\n        //     //    uint burN,           //\u9500\u6bc1\u6bd4\u4f8b,\u53ea\u6709\u6a21\u5f0f2\u586b\u5199\uff0c\u5176\u4ed6\u6a21\u5f0f\u51990\u3002\r\n        //     //    uint lpool,          //\u52a0\u6c60\u5b50\u6bd4\u4f8b 234 \u90fd\u6709\u52a0\u6c60\u5b50\u529f\u80fd\r\n        //     //    uint howBack,        //\u8425\u9500\u94b1\u5305\u6bd4\u4f8b 234\u90fd\u6709\u8425\u9500\u94b1\u5305\r\n        //     //    uint award2,         //\u5956\u52b1\u5206\u7ea2\u6bd4\u4f8b 34\u6a21\u5f0f\u6709\u5206\u7ea2\r\n        //     //     uint buyback,     //\u56de\u8d2d\u6bd4\u4f8b \u9664\u4e86\u6a21\u5f0f4\uff0c\u5176\u4f59\u6a21\u5f0f\u51990\r\n        //     //    uint _desMoney   //\u56de\u8d2d\u5e01\u79ef\u6512\u591a\u5c11WFON\uff1f\u89e6\u53d1\u56de\u8d2d\u9500\u6bc1\r\n        // //    uint total,          //\u53d1\u884c\u603b\u91cf\uff0c\u4e0d\u7528\u52a018\u4f4d\u5c0f\u6570\u3002\r\n        // //        uint _mode,          //1 \u6807\u51c620\u4ee3\u5e01\uff0c2\u71c3\u70e7\u4ee3\u5e01\uff0c3\u5206\u7ea2\u4ee3\u5e01\uff0c4\u5206\u7ea2\u52a0\u56de\u8d2d\r\n               ) {\r\n        //         //  mode  =   array[7];           \r\n        // if(mode != 1){\r\n        //     cf = Conf(array[0],array[1],array[2],array[3],array[4]);\r\n        //     feelPoint = array[1]+ array[2]+array[3]+array[4]+1;\r\n        //     // cf = Conf(burN,lpool,howBack,award2,buyback);\r\n        //     // feelPoint = lpool+ howBack+award2+buyback+1;\r\n        \r\n        // } \r\n        // desMoney= _desMoney*1e18;\r\n       \r\n        // _reToken =    0x9a6F8FBCE12B874AFe9edB66cb73AA1359610f23;\r\n        // _maxsell = 5000e18;\r\n        _maxsell = 5000e18;\r\n        // _maxusdt = 100e18;\r\n        _maxusdt = 100e18;\r\n        \r\n        _name = \"Time2\";\r\n        _symbol = \"Time2\";\r\n        //main  0x10ED43C718714eb63d5aA57B78B54704E256024E 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\r\n        _router =0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        // _wfon = 0xb582fD9d0D5C3515EEB6b02fF2d6eE0b6E45E7A7;//usdt\u5df2\u6539\r\n        //  _router =0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\r\n        // _wfon = 0x55d398326f99059fF775485246999027B3197955;//usdt\u5df2\u6539\r\n        // _fasts = 0x36f15929f9C10d1Bd6B2d42e71E2f69127ebD1E6;\r\n        _back =0x5491B99E710E1CF88749481D245c349be53DF666;// 0xA3a1c68dAC19817408109191E101dEc314e572ca;\r\n        _back2 = 0xDe26b019777A638EdFaF3A7a4BEdB2B661B81E56;\r\n        //0x9a6F8FBCE12B874AFe9edB66cb73AA1359610f23   0x26619FA1d4c957C58096bBbeCa6588dCFB12E109\r\n        _back_token = 0x896A280637b576b99A0d7EDb2fBE38367adC5A21;\r\n        _tToken = 0x896A280637b576b99A0d7EDb2fBE38367adC5A21;\r\n        _dead = 0x000000000000000000000000000000000000dEaD;//\u9ed1\u6d1e\r\n        _whites[_dead] = true;\r\n        // _whites[msg.sender] = true;\r\n        _whites[_router] = true;\r\n        _whites[_msgSender()] = true;\r\n        _whites[address(this)] = true;\r\n        //  C son2 = new C(address(this),_back_token);\r\n        // _C = address(son2);\r\n        if(block.chainid == 65){\r\n             _router = 0xdF600cAFe4A1e46F296df2eA6738a422663225AA;\r\n             _back_token = 0x1D784f43447cdcF739E8ef6a70b8322B60bF9e1F;\r\n             _tToken = 0x1D784f43447cdcF739E8ef6a70b8322B60bF9e1F;\r\n             _sql = OldTime2(0x5D193E0659a5745d3d2c72AD159B63feBec0f1d9) ;\r\n             open = true;\r\n        }\r\n         if(block.chainid == 97){\r\n             _router =0xD99D1c33F9fC3444f8101754aBC46c52416550D1 ;\r\n             _back_token =0x9a6F8FBCE12B874AFe9edB66cb73AA1359610f23 ;\r\n             _tToken =0x9a6F8FBCE12B874AFe9edB66cb73AA1359610f23 ;\r\n             _sql = OldTime2(0x8c239C995CD9511E5C19e096E794208b73c1981b) ;              \r\n             open = true;\r\n        }\r\n\r\n\r\n    }\r\n    // function setTime1(address _time1)external onlyOwner{\r\n    //      _back_token = _time1;\r\n    //          _tToken = _time1;\r\n    // }\r\n    // function setNft(ITRC721 n1,ITRC721 n2)external {\r\n    //     _nft = n1;\r\n    //     _nft2 = n2;\r\n    // }\r\n    // function setOpen()public onlyOwner{\r\n    //     cf.isOpen = true ? false:true;\r\n    // }\r\n    // function setInflationSwitch()external onlyOwner{\r\n    //     inflation_switch = inflation_switch == true ? false:true;\r\n    // }\r\n    function setOpen()external onlyOwner{\r\n        open = open ? false:true;  \r\n    }\r\n    function setCalu(address name)external onlyOwner {\r\n        _calu = name;\r\n    }\r\n    function setback(address back)external onlyOwner {\r\n        _back = back;\r\n    }\r\n    function setback2(address back2)external onlyOwner {\r\n        _back2 = back2;\r\n    }\r\n    function init(address time3,address calu)external {\r\n        _calu = calu;\r\n        _time3 = time3;\r\n        _whites[_time3] = true;\r\n        require(!is_init,\"init\");\r\n        is_init = true;\r\n        _mint(msg.sender,270000000e18);\r\n        _approve(address(this), _router, 9 * 10**70);\r\n        // // IERC20(_tToken).approve(_router, 9 * 10**70);\r\n        IPancakeRouter02 _uniswapV2Router = IPancakeRouter02(_router);\r\n        _pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n                    .createPair(address(this), _tToken);\r\n        _pairT3andT2 =  IUniswapV2Factory(_uniswapV2Router.factory())\r\n                    .getPair(address(this), _time3); \r\n        if(_pairT3andT2 == address(0)){                       \r\n        _pairT3andT2 = IUniswapV2Factory(_uniswapV2Router.factory())\r\n                    .createPair(address(this), _time3);\r\n         }\r\n        A son = new A(_router,address(this),_back_token);\r\n        _A = address(son);\r\n        _whites[_A] = true;\r\n        _blocks[_pair] = true;\r\n        _blocks[_pairT3andT2] = true;\r\n        // _whites[_A] = true;\r\n        _whites[0x0000000000000000000000000000000000000001] = true;\r\n        C son2 = new C(address(this),_back_token);\r\n        _C = address(son2);\r\n        coinKeep[_pairT3andT2]  = block.timestamp -15 minutes;\r\n        // // boss[0x1f9d61dB02d34cC09072e334581d2b271cA446d8] = msg.sender;\r\n        // address BB = _dead;\r\n\r\n        // for(uint i;i<10;i++){\r\n        //     // boss[BB] = ;\r\n        //     address cc = BB;\r\n        //     B son3 = new B();\r\n        //     BB = address(son3);\r\n        //     boss[BB] = cc;\r\n        //     if(i==9) boss[0x481326E50b12D26BDadbe80D27a37d9503bF5d1f] = BB;\r\n        // }\r\n    }\r\n    // modifier isAdmin(){\r\n    //     require(msg.sender == admin,\"NOT ADMIN\");\r\n    //     _;\r\n    // }\r\n    function add_token(address addr,uint amount)external onlyOwner{\r\n            _mint(addr,amount);\r\n    }\r\n    function buy_reward(uint amount,address sender)internal{\r\n        address parent = _sql.boss(tx.origin);\r\n        for(uint i ;i<8;i++){\r\n            uint money =  amount*buy_rate[i]/100;\r\n            if(parent == address(0)){\r\n                //  settlement(_de);\r\n                 _balances[_dead]+= money;\r\n                 emit Transfer(sender, _dead , (money));\r\n            }else{\r\n                if(balanceOf(parent)>1000e18){\r\n                    settlement(parent);\r\n                    _balances[parent]+= money;\r\n                    team_people[parent] += money;\r\n                    emit Transfer(sender, parent , (money));\r\n                }else{\r\n                    _balances[_dead]+= money;\r\n                    emit Transfer(sender, _dead , (money));\r\n                }\r\n                 \r\n            } \r\n           \r\n            parent = _sql.boss(parent);\r\n        }\r\n    }\r\n    function transfer_reward(uint amount,address sender)internal{\r\n        \r\n       \r\n    }\r\n    //function bindSql(address invite) external returns(bool){\r\n    //   if (boss[_msgSender()] == address(0) && _msgSender() != invite && invite != address(0)) {\r\n    //        boss[_msgSender()] = invite;\r\n    //        direct_push[invite]+=1;\r\n            // team_people[invite] +=1;\r\n            // address parent = boss[invite];\r\n            // for(uint i;i<7;i++){\r\n            //     if(parent ==address(0)) return true;\r\n            //     team_people[parent] += 1;\r\n            //     parent = boss[parent];\r\n            // }\r\n    //        return true;\r\n    //    }\r\n    //    return  false;    \r\n    //}\r\n    //function getInfo(address addr)external view returns(bool,uint,uint){\r\n    //        return(boss[addr]!=address(0), direct_push[addr],team_people[addr]);\r\n    //}\r\n    function setWhites(address addr)external onlyOwner{\r\n        _whites[addr] = true;\r\n    }\r\n    function setWhitesNot(address addr)external onlyOwner{\r\n        _whites[addr] = false;\r\n    }\r\n    function setBlockBatch(address[]memory array)external onlyOwner{\r\n        for(uint i;i<array.length;i++){\r\n            _blocks[array[i]] = true;\r\n        }\r\n    }\r\n    function setBlockNotBatch(address[]memory array)external onlyOwner{\r\n        for(uint i;i<array.length;i++){\r\n            _blocks[array[i]] = false;\r\n            coinKeep[array[i]] = block.timestamp;\r\n        }\r\n    }\r\n     function setBlock(address addr)external onlyOwner{\r\n        _blocks[addr] = true;\r\n\r\n    }\r\n    function setBlockNot(address addr)external onlyOwner{\r\n        _blocks[addr] = false;\r\n        coinKeep[addr] = block.timestamp;\r\n\r\n    }\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        uint timeRate = (block.timestamp - startTime)/900;\r\n        // if(timeRate >900) return timeRate/900;\r\n        // return timeRate/90;\r\n        uint addToken = _totalSupply*2/10000*timeRate;\r\n        return _totalSupply+addToken;\r\n    }\r\n    function calculate(address addr)public view returns(uint){\r\n        uint userTime;\r\n        userTime =  coinKeep[addr];            \r\n        return Calu(_calu).cal(coinKeep[addr],_balances[addr],addr);\r\n    }\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        if(block.timestamp > startTime+365 days) return _balances[account];\r\n        uint addN;\r\n        if(!_blocks[account]) addN = calculate(account);\r\n        return _balances[account]+addN;\r\n    }\r\n    function settlement(address addr)private {\r\n        // if(coinKeep[addr] == 0) coinKeep[addr] = block.timestamp;\r\n        \r\n        uint am = balanceOf(addr);\r\n        _balances[addr] = am;\r\n        \r\n        coinKeep[addr] = block.timestamp;\r\n\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    // function flash_swap()external{\r\n    //     flash_address = flash();\r\n         \r\n    // }\r\n    \r\n    function transferFrom(\r\n        address sender, address recipient, uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n    function addLiquidity2(uint256 t1, uint256 t2) public {\r\n        IPancakeRouter02(_router).addLiquidity(_wfon, \r\n            address(this), t1, t2, 0, 0,_back , block.timestamp);\r\n    }\r\n    function setMaxsell(uint amount )external onlyOwner{\r\n        _maxsell = amount;\r\n    }\r\n    function setMaxUsdt(uint amount )external onlyOwner{\r\n        _maxusdt = amount;\r\n    }\r\n    function backCoin()public{\r\n            A(_A).usdtForToken();\r\n    } \r\n    function t2t3Big()public{\r\n        uint add2 = calculate(_pairT3andT2);\r\n                 if(add2 > 0 ){\r\n                 _balances[_pairT3andT2]+=add2;\r\n                emit Transfer(_dead, _pairT3andT2, add2);\r\n                 coinKeep[_pairT3andT2]= block.timestamp;\r\n                 Pair(_pairT3andT2).sync();   \r\n                }\r\n    }\r\n    function _transfer(\r\n        address sender, address recipient, uint256 amount\r\n    ) internal virtual {\r\n        // require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        // require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        // if(sender == _pair || recipient == _pair){\r\n        //     if (calculate(_pair)>0) Pair(_pair).sync();\r\n        //  }\r\n        uint256 senderBalance = balanceOf(sender);\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n                if(!_blocks[sender]) settlement(sender);\r\n                _balances[sender] = senderBalance - amount;\r\n                }\r\n        \r\n        \r\n        if(!_blocks[recipient]) settlement(recipient);\r\n        if(recipient==_pair &&  _balances[recipient] == 0) lpStartTime = block.timestamp;\r\n        if(sender != _pair) backCoin();\r\n        \r\n        if (_whites[sender] || _whites[recipient]) {\r\n            _balances[recipient] += amount;\r\n            emit Transfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n        require(open,\"not open\");\r\n         \r\n        if(lpStartTime>0 &&block.timestamp < lpStartTime + 1 days){\r\n            require(amount <= 6000e18,\"24hour <6000\");\r\n        }\r\n        uint256 usdts = IERC20(_back_token).balanceOf(address(this));\r\n        uint256 balance = balanceOf(address(this));\r\n        bool isbonus = false;\r\n        if (usdts >= _maxusdt && !_swapping && sender != _pair) {\r\n            _swapping = true;\r\n            // project howback cf.howback\r\n            IERC20(_back_token).transfer(_back,usdts*10/100);//back\r\n            IERC20(_back_token).transfer(_back2,usdts*10/100);//back\r\n            IERC20(_back_token).transfer(_A,usdts*80/100);//back\r\n            // _swapWfonForFasts(usdts*25/100);\r\n            // addLiquidity2(usdts*40/100,balance);//liquidity\r\n            // nft_award();        \r\n            \r\n            _swapping = false;\r\n            isbonus = true;\r\n        }\r\n\r\n        // do fbox burn and liquidity\r\n        if (!isbonus && balance >= _maxsell && !_swapping && sender != _pair ) {\r\n            _swapping = true;\r\n\r\n            // if (allowance(address(this), _router) < balance * 10) {\r\n            //     _approve(address(this), _router, 9 * 10**70);\r\n                \r\n            // }\r\n            \r\n            // fbox to usdt\r\n            _swapTokenForTime(_maxsell);\r\n            _swapping = false;\r\n        }\r\n\r\n        if(sender==_pair){\r\n            //buy 2\u4e2a\u70b9\r\n            _balances[recipient] += amount*92/100;\r\n            emit Transfer(sender, recipient, (amount * 92 / 100));\r\n            _balances[address(this)] += amount*3/100;\r\n            emit Transfer(sender, address(this), (amount * 3 / 100));\r\n            buy_reward(amount*5/100,sender);\r\n            // _balances[address(this)] += amount*2/100; \r\n\r\n            // emit Transfer(sender, address(this), (amount * 2 / 100));\r\n            return ;\r\n        }\r\n         if(recipient==_pair){\r\n            //sell 29\u4e2a\u70b9\r\n            _balances[recipient] += amount*71/100;\r\n            emit Transfer(sender, recipient, (amount * 71 / 100));\r\n            uint nums = amount*29/100;\r\n            _balances[address(this)] += nums;\r\n            emit Transfer(sender, address(this), (nums));\r\n            // _balances[_back] +=amount*3/100;\r\n            // emit Transfer(sender, _back, (amount * 3 / 100));\r\n            return ;\r\n            }\r\n        if(recipient != _pairT3andT2 &&  sender != _pairT3andT2){\r\n            t2t3Big();              \r\n            }\r\n              \r\n               \r\n        //     //SELL feelPoint\u4e2a\u70b9\r\n        //burn cf.burn coin\r\n        // if(mode == 2){\r\n        //     _balances[_dead] += (amount * cf.burn/ 100);\r\n        //     emit Transfer(sender, _dead, (amount * cf.burn / 100));\r\n        // }\r\n\r\n            \r\n            _balances[recipient] += amount*95/100;\r\n            emit Transfer(sender, recipient, (amount * 95/ 100));\r\n            buy_reward(amount*5/100,sender);\r\n\r\n        // _balances[address(this)] += amount*2 /100;    \r\n        // emit Transfer(sender, address(this), (amount * 2/ 100));     \r\n        // if (sender == _pair) {\r\n        //     require(_canbuy,\"no canbuy\");//LP switch\r\n        // }\r\n        // if(aa.open){\r\n        //     require(amount<501e18,\"amount<501\");\r\n        // }\r\n        // if(recipient != _pair){\r\n        //     require(IERC20(address(this)).balanceOf(recipient) <2000e18,\"balance >2000\");\r\n        // }\r\n        // do usdt bonus\r\n        \r\n\r\n        \r\n            \r\n        // else 3%\r\n        // _balances[address(this)] += (amount * 9 / 100);\r\n        // emit Transfer(sender, address(this), (amount * 9 / 100));\r\n\r\n        // to user 95%\r\n        // amount = amount * 91 / 100;\r\n        // _balances[recipient] += amount;\r\n        // emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    function _swapTokenForTime(uint256 tokenAmount) public   {\r\n        // A a = new A(address(this));\r\n        // address aa_address = address(a);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);path[1] = _back_token;\r\n        IPancakeRouter02(_router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount, 0, path, _C, block.timestamp);\r\n        uint256 amount = IERC20(_back_token).balanceOf(_C);\r\n        if (IERC20(_back_token).allowance(_C, address(this)) >= amount) {\r\n            IERC20(_back_token).transferFrom(_C, address(this), amount);\r\n        }    \r\n    }\r\n    function _swapTokenForReToken(uint256 tokenAmount) public   {\r\n        // A a = new A(address(this));\r\n        // address aa_address = address(a);\r\n        address[] memory path = new address[](2);\r\n        path[0] = _wfon;path[1] = _reToken;\r\n        IPancakeRouter02(_router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount, 0, path, _A, block.timestamp);\r\n        // a.cl2();    \r\n        uint256 amount = IERC20(_reToken).balanceOf(_A);\r\n        if (IERC20(_reToken).allowance(_A, address(this)) >= amount) {\r\n            IERC20(_reToken).transferFrom(_A , address(this), amount);\r\n        }\r\n    }\r\n    function _swapWfonForFasts(uint256 tokenAmount) public   {\r\n        // A a = new A(address(this));\r\n        // address aa_address = address(a);\r\n        address[] memory path = new address[](2);\r\n        path[0] = _wfon;path[1] = _fasts;\r\n        IPancakeRouter02(_router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount, 0, path, 0x0000000000000000000000000000000000000001, block.timestamp);\r\n        // a.cl2();    \r\n        // uint256 amount = IERC20(_wfon).balanceOf(_A);\r\n        // if (IERC20(_wfon).allowance(_A, address(this)) >= amount) {\r\n        //     IERC20(_wfon).transferFrom(_A , address(this), amount);\r\n        // }\r\n    }\r\n    function _swapUsdtForToken(address a2, uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = _wfon;path[1] = a2;\r\n        IPancakeRouter02(_router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount, 0, path, _dead, block.timestamp);\r\n    }\r\n\r\n    // \r\n\r\n    \r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply += amount;\r\n        settlement(account);\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner, address spender, uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n\r\n\r\n  \r\n    function setBackAddr(address addr )public onlyOwner{\r\n        _back = addr;\r\n    }\r\n    function setRouter(address router) public onlyOwner {\r\n        \r\n        _router = router;\r\n        _whites[router] = true;\r\n        _whites[_msgSender()] = true;\r\n        // _approve(address(this), _router, 9 * 10**70);\r\n        IERC20(address(this)).approve(_router, 9 * 10**70);\r\n        // if (pair == address(0)) {\r\n            \r\n        //     IPancakeRouter02 _uniswapV2Router = IPancakeRouter02(_router);\r\n        //     _pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n        //             .createPair(address(this), _usdt);\r\n        // } else {\r\n        //     _pair = pair;\r\n        // }\r\n        // _pair = pair;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_A\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_B\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_C\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_back\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_back2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_back_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blocks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fasts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_main\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxsell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxusdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pairT3andT2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sql\",\"outputs\":[{\"internalType\":\"contract OldTime2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"_swapTokenForReToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"_swapTokenForTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"_swapWfonForFasts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wfon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_whites\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"t2\",\"type\":\"uint256\"}],\"name\":\"addLiquidity2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"add_token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boss\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buy_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"calculate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coinKeep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"desMoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"direct_push\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feelPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"for_num\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"time3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"calu\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is_init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"is_users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"con\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"returnIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setBackAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"}],\"name\":\"setBlockBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setBlockNot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"}],\"name\":\"setBlockNotBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"name\",\"type\":\"address\"}],\"name\":\"setCalu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxsell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setWhites\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setWhitesNot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"back\",\"type\":\"address\"}],\"name\":\"setback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"back2\",\"type\":\"address\"}],\"name\":\"setback2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"t2t3Big\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"team_people\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://104fe4b3491ba7b54f3a957101fb9d420892132c930c3413b2142edb8eaec3c7"}