{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"./interfaces/IRouter.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract Staking is Ownable, ReentrancyGuard {\\n    uint256 private constant DENOMINATOR = 1000;\\n    uint256 private constant DAY_DURATION = 86400;\\n    uint8 private constant EPOCH = 27;\\n\\n    address public immutable S_TOKEN;\\n    address public immutable R_TOKEN;\\n    address public immutable USDT;\\n    address public immutable ROUTER;\\n    uint256 public immutable START;\\n\\n    BonusStatus public bonusStatus;\\n    uint256 public bonusAmount;\\n\\n    uint256 public allTimeTotalMined;\\n    uint256 public totalStakers;\\n    address[] public stakers;\\n\\n    uint256 public lastBonusUpdate;\\n\\n    uint256 private _yesterdayShares;\\n    uint256 private _todayShares;\\n\\n    mapping(address => bool) public canDeposit;\\n    mapping(address => StakeRecord) public stakingInfo;\\n    mapping(uint256 => DepositRecord) public rewardDeposits;\\n\\n    mapping(address => uint256) private _stakersIndexies;\\n    mapping(uint256 => uint256) private _rewardDeposits;\\n    mapping(uint256 => bool) private _changerVarsShares;\\n    mapping(uint256 => BonusStatus) private _bonusStatusDays;\\n    mapping(address => mapping(uint256 => uint256)) private _amountHistory; //user address => (day => amount)\\n    mapping(address => mapping(uint256 => uint256)) private _stakeDays;\\n\\n    struct StakeRecord {\\n        uint256 start;\\n        uint256 update;\\n        uint256 bonusStart;\\n        uint256 bonusUpdate;\\n        uint256 amount;\\n    }\\n\\n    struct DepositRecord {\\n        uint256 amountOfReward;\\n        uint256 amountOfShares;\\n    }\\n\\n    struct DaysAmounts {\\n        uint256 day;\\n        uint256 amount;\\n    }\\n\\n    struct BonusStatus {\\n        bool enabled;\\n        uint256[] day;\\n        uint256[] percent;\\n    }\\n\\n    event AddBonuses(uint256 amount);\\n    event WithdrawBonesus(uint256 amount);\\n    event Stake(uint256 day, address user, uint256 amount);\\n    event Unstake(uint256 day, address user, uint256 amount);\\n    event RewardDeposit(uint256 day, uint256 amount);\\n\\n    constructor(\\n        address _sToken,\\n        address _rToken,\\n        address _usdt,\\n        address _router,\\n        address _back\\n    ) {\\n        require(\\n            _sToken != address(0) &&\\n                _rToken != address(0) &&\\n                _usdt != address(0) &&\\n                _router != address(0) &&\\n                _back != address(0),\\n            \\\"Address 0x00...\\\"\\n        );\\n        S_TOKEN = _sToken;\\n        R_TOKEN = _rToken;\\n        USDT = _usdt;\\n        ROUTER = _router;\\n        START = block.timestamp;\\n\\n        canDeposit[_back] = true;\\n\\n        bonusStatus.day = new uint256[](5);\\n        bonusStatus.percent = new uint256[](5);\\n    }\\n\\n    /** @dev Function for backend to put reward to the contract\\n     * @notice reward put into the contract, swaps into S_TOKEN and shares between users\\n     * @param amount amount of reward token\\n     */\\n    function rewardTokenDonation(uint256 amount, uint256 amountMin)\\n        external\\n        nonReentrant\\n    {\\n        _updateSharesVars();\\n\\n        address sender = _msgSender();\\n        require(amount > 0 && _yesterdayShares > 0 && amountMin > 0, \\\"ZERO\\\");\\n        require(canDeposit[sender], \\\"Only back\\\");\\n        uint256 today = _currentDay();\\n        require(rewardDeposits[today].amountOfReward == 0, \\\"Once per day\\\");\\n\\n        allTimeTotalMined += amount;\\n        _rewardDeposits[today] = amount;\\n\\n        IERC20(R_TOKEN).transferFrom(sender, address(this), amount);\\n        IERC20(R_TOKEN).approve(ROUTER, amount);\\n        address[] memory path = new address[](3);\\n        path[0] = R_TOKEN;\\n        path[1] = USDT;\\n        path[2] = S_TOKEN;\\n\\n        uint256[] memory arr = IRouter(ROUTER).swapExactTokensForTokens(\\n            amount,\\n            amountMin,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n        rewardDeposits[today] = DepositRecord(arr[2], _yesterdayShares);\\n        _yesterdayShares += arr[2];\\n\\n        emit RewardDeposit(today, arr[2]);\\n    }\\n\\n    /** @dev Function to stake tokens\\n     * @param amount amount of S_TOKEN for staking\\n     */\\n    function stake(uint256 amount) external nonReentrant {\\n        address sender = _msgSender();\\n        uint256 today = _currentDay();\\n        require(amount > 0, \\\"ZERO\\\");\\n\\n        _updateSharesVars();\\n\\n        _todayShares += amount;\\n\\n        StakeRecord storage info = stakingInfo[sender];\\n\\n        if (info.amount == 0) {\\n            info.start = today;\\n            info.update = today;\\n            totalStakers++;\\n            _stakersIndexies[sender] = stakers.length;\\n            stakers.push(sender);\\n        } else recalculate(sender, true);\\n\\n        info.bonusStart = today;\\n        info.amount += amount;\\n\\n        _stakeDays[sender][today] += amount;\\n\\n        IERC20(S_TOKEN).transferFrom(sender, address(this), amount);\\n\\n        emit Stake(today, sender, amount);\\n    }\\n\\n    /** @dev Function to unstake tokens\\n     * @param amount amount of S_TOKEN for unstaking\\n     */\\n    function unstake(uint256 amount) external nonReentrant {\\n        _updateSharesVars();\\n\\n        address sender = _msgSender();\\n        recalculate(sender, true);\\n\\n        uint256 today = _currentDay();\\n        StakeRecord memory info = stakingInfo[sender];\\n        require(\\n            amount > 0 && amount <= info.amount,\\n            \\\"Not enough (try to do recalc. transaction) or zero amt\\\"\\n        );\\n\\n        if (\\n            rewardDeposits[today].amountOfReward == 0 &&\\n            today > 0 &&\\n            info.start < today\\n        )\\n            require(\\n                info.update == today - 1,\\n                \\\"Do recalc.() before call this func\\\"\\n            );\\n        else\\n            require(info.update == today, \\\"Do recalc.() before call this func\\\");\\n\\n        if (amount == info.amount) {\\n            uint256 stakersIndex = _stakersIndexies[sender];\\n            uint256 lastIndex = stakers.length - 1;\\n            if (stakersIndex == lastIndex) stakers.pop();\\n            else {\\n                address lastStaker = stakers[lastIndex];\\n                _stakersIndexies[lastStaker] = stakersIndex;\\n                stakers[stakersIndex] = lastStaker;\\n                stakers.pop();\\n            }\\n\\n            delete (stakingInfo[sender]);\\n            for (uint256 i = info.start; i <= today; i++) {\\n                delete (_amountHistory[sender][i]);\\n            }\\n            totalStakers--;\\n        } else {\\n            StakeRecord storage infoPart = stakingInfo[sender];\\n            infoPart.bonusStart = today;\\n            infoPart.amount -= amount;\\n        }\\n        uint256 todayStake = _stakeDays[sender][today];\\n        if (todayStake > 0) {\\n            if (todayStake >= amount) {\\n                _todayShares -= amount;\\n                _stakeDays[sender][today] -= amount;\\n            } else {\\n                _todayShares -= todayStake;\\n                _stakeDays[sender][today] = 0;\\n                _yesterdayShares -= (amount - todayStake);\\n            }\\n        } else _yesterdayShares -= amount;\\n\\n        if (totalStakers == 0) {\\n            bonusAmount += _yesterdayShares;\\n            _yesterdayShares = 0;\\n        }\\n        IERC20(S_TOKEN).transfer(sender, amount);\\n\\n        emit Unstake(today, sender, amount);\\n    }\\n\\n    /** @dev Function to change bonus system (enable/disable bonuses; set new periodes/percents)\\n     * @notice Only for owner\\n     * @param _status new bonus status\\n     * @param _days array of new periodes values (length == 5)\\n     * @param _percent array of new percent values (length == 5)\\n     */\\n    function setBonusVars(\\n        bool _status,\\n        uint256[] memory _days,\\n        uint256[] memory _percent\\n    ) external onlyOwner {\\n        uint256 len = _days.length;\\n        require(len == _percent.length && 5 == len, \\\"Wrong params\\\");\\n        uint256 i;\\n        if (_status) {\\n            for (i; i < len; i++) {\\n                if (i > 0)\\n                    require(_days[i] > _days[i - 1], \\\"Sort _days[] array\\\");\\n            }\\n        }\\n        _updateSharesVars();\\n        uint256 today = _currentDay();\\n        BonusStatus storage _bonusStatus = _bonusStatusDays[today];\\n        _bonusStatus.enabled = _status;\\n        _bonusStatus.day = _days;\\n        _bonusStatus.percent = _percent;\\n        bonusStatus = BonusStatus(_status, _days, _percent);\\n    }\\n\\n    /** @dev Function to add bonus tokens\\n     * @notice Only for owner\\n     * @param amount amount of S_TOKEN to put to the contract as bonuses\\n     */\\n    function addBonusTokens(uint256 amount) external onlyOwner nonReentrant {\\n        require(amount > 0, \\\"ZERO\\\");\\n        bonusAmount += amount;\\n        IERC20(S_TOKEN).transferFrom(_msgSender(), address(this), amount);\\n\\n        emit AddBonuses(amount);\\n    }\\n\\n    /** @dev Function to withdraw bonus tokens\\n     * @notice Only for owner\\n     * @param amount amount of bonuses to withdraw from the contract\\n     */\\n    function withdrawBonusTokens(uint256 amount)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(amount > 0 && bonusAmount >= amount, \\\"Wrong amount\\\");\\n        bonusAmount -= amount;\\n        IERC20(S_TOKEN).transfer(_msgSender(), amount);\\n\\n        emit WithdrawBonesus(amount);\\n    }\\n\\n    /** @dev Function to change can-deposit status\\n     * @notice Only for owner\\n     * @param back address to change status\\n     */\\n    function addOrRemoveBack(address back) external onlyOwner {\\n        canDeposit[back] = !canDeposit[back];\\n    }\\n\\n    /** @dev Function to update bonuses history if 'out of gas' problem will arisen\\n     * @notice It's recommend to call this function every 100 days of inactivity\\n     */\\n    function updateHistory() external {\\n        uint256 today = _currentDay();\\n        require(today > lastBonusUpdate, \\\"History is actual\\\");\\n        uint256 endDay = (today - lastBonusUpdate < EPOCH)\\n            ? today\\n            : lastBonusUpdate + EPOCH;\\n        for (uint256 i = lastBonusUpdate; i <= endDay; i++) {\\n            _bonusStatusDays[i].enabled = bonusStatus.enabled;\\n            _bonusStatusDays[i].day = bonusStatus.day;\\n            _bonusStatusDays[i].percent = bonusStatus.percent;\\n        }\\n        lastBonusUpdate = endDay;\\n    }\\n\\n    /** @dev Function for calculation of the reward table\\n     * @param user user address\\n     * @param startDay the beginning day for calculation\\n     * @param endDay the stop day for calculation\\n     * @return arr an array of rewards in [startDay, endDay] interval\\n     */\\n    function calculationRewardTable(\\n        address user,\\n        uint256 startDay,\\n        uint256 endDay\\n    ) external view returns (uint256[] memory arr) {\\n        StakeRecord memory info = stakingInfo[user];\\n        require(\\n            info.start <= startDay &&\\n                endDay <= _currentDay() &&\\n                startDay <= endDay,\\n            \\\"Wrong interval\\\"\\n        );\\n        if (info.amount == 0) {\\n            arr = new uint256[](0);\\n            return arr;\\n        }\\n\\n        arr = new uint256[](endDay - startDay + 1);\\n        (, , , DaysAmounts[] memory _dayAmounts) = _calculation(user);\\n\\n        uint256 len;\\n\\n        if (info.update > endDay) {\\n            for (uint256 i = startDay; i <= endDay; i++) {\\n                if (i == info.start) arr[len] = 0;\\n                else arr[len] = _amountHistory[user][i];\\n                len++;\\n            }\\n        } else {\\n            for (uint256 i = startDay; i <= info.update; i++) {\\n                if (i == info.start) arr[len] = 0;\\n                else arr[len] = _amountHistory[user][i];\\n                len++;\\n            }\\n            if (_dayAmounts.length > 0) {\\n                uint256 i;\\n                uint256 counter;\\n                if (startDay > _dayAmounts[0].day) {\\n                    i = startDay;\\n                    counter = startDay - _dayAmounts[0].day;\\n                } else i = _dayAmounts[0].day;\\n                for (i; i <= endDay; i++) {\\n                    arr[len] = _dayAmounts[counter].amount;\\n                    counter++;\\n                    len++;\\n                }\\n            }\\n        }\\n    }\\n\\n    /** @dev Function that returns bonusStatus variable value\\n     */\\n    function displayBonusScheme()\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        return (bonusStatus.enabled, bonusStatus.day, bonusStatus.percent);\\n    }\\n\\n    /** @dev If bonus history is not actual, this function returns a number of updateHistory() calls you should do before other transactions\\n     */\\n    function epochNum() external view returns (uint256) {\\n        return (_currentDay() - lastBonusUpdate) / EPOCH;\\n    }\\n\\n    /** @dev Shows the actual stakers addresses array\\n     */\\n    function getStakers() external view returns (address[] memory) {\\n        return stakers;\\n    }\\n\\n    /** @dev Shows the actual total staker's balance\\n     */\\n    function totalStake() external view returns (uint256) {\\n        return IERC20(S_TOKEN).balanceOf(address(this)) - bonusAmount;\\n    }\\n\\n    /** @dev Shows today's reward in R_TOKEN\\n     */\\n    function todayReward() external view returns (uint256) {\\n        return _rewardDeposits[currentDay()];\\n    }\\n\\n    /** @dev Shows user's bonus day&percent\\n     * @param user user's address\\n     */\\n    function userBonusStatus(address user)\\n        external\\n        view\\n        returns (uint256 day, uint256 perc)\\n    {\\n        uint256 duration = currentDay() - stakingInfo[user].bonusStart;\\n        if (bonusStatus.day[0] > duration || stakingInfo[user].amount == 0)\\n            return (0, 0);\\n        uint256 i;\\n        while (i < 5) {\\n            if (bonusStatus.day[i] <= duration) {\\n                day = bonusStatus.day[i];\\n                perc = bonusStatus.percent[i];\\n            }\\n            i++;\\n        }\\n    }\\n\\n    /** @dev Function to restake rewards and bonuses\\n     * @param bonusRestake true if user wants to restake bonuses; false if user wants to withdraw bonuses\\n     */\\n    function recalculate(address sender, bool bonusRestake) public {\\n        _updateSharesVars();\\n\\n        StakeRecord storage info = stakingInfo[sender];\\n        require(info.amount > 0, \\\"You're not staker\\\");\\n        (\\n            uint256 result,\\n            uint256 update,\\n            uint256 bonus,\\n            DaysAmounts[] memory _daysAmounts\\n        ) = _calculation(sender);\\n\\n        info.update = update;\\n        info.amount = result;\\n\\n        if (bonus > 0) {\\n            require(bonusAmount >= bonus, \\\"Not enough bonuses\\\");\\n            bonusAmount -= bonus;\\n            info.bonusUpdate = update;\\n            if (!bonusRestake) {\\n                IERC20(S_TOKEN).transfer(sender, bonus);\\n            } else {\\n                _yesterdayShares += bonus;\\n                info.amount += bonus;\\n            }\\n        }\\n\\n        uint256 len = _daysAmounts.length;\\n        if (len > 0) {\\n            for (uint256 i; i < len; i++) {\\n                _amountHistory[sender][_daysAmounts[i].day] = _daysAmounts[i]\\n                    .amount;\\n            }\\n        }\\n    }\\n\\n    /** @dev Function to watch user staking info\\n     * @param user user address\\n     * @return _sum stake+rewards+bonuses\\n     * @return _bonus bonuses\\n     * @return _stake stake+rewards\\n     */\\n    function userStake(address user)\\n        public\\n        view\\n        returns (\\n            uint256 _sum,\\n            uint256 _bonus,\\n            uint256 _stake\\n        )\\n    {\\n        (_stake, , _bonus, ) = _calculation(user);\\n        _sum = _stake + _bonus;\\n    }\\n\\n    /** @dev Shows the current contract day\\n     */\\n    function currentDay() public view returns (uint256) {\\n        return _currentDay();\\n    }\\n\\n    function _currentDay() private view returns (uint256) {\\n        return (block.timestamp - START) / DAY_DURATION;\\n    }\\n\\n    function _calculation(address user)\\n        private\\n        view\\n        returns (\\n            uint256 result,\\n            uint256 update,\\n            uint256 bonus,\\n            DaysAmounts[] memory _daysAmounts\\n        )\\n    {\\n        uint256 today = _currentDay();\\n\\n        StakeRecord memory info = stakingInfo[user];\\n\\n        if (info.amount == 0) return (0, 0, 0, _daysAmounts);\\n        if (today == 0 || info.start == today || info.update + 1 > today)\\n            return (info.amount, info.update, 0, _daysAmounts);\\n\\n        result = info.amount;\\n        uint256 i = info.update + 1;\\n        uint256 endDay = ((today - i) > 110) ? (110 + i) : today;\\n        _daysAmounts = new DaysAmounts[](endDay - i + 1);\\n\\n        uint256 reward;\\n\\n        BonusStatus memory _bonusStatus;\\n\\n        for (i; i <= endDay; i++) {\\n            //REWARD\\n            if (rewardDeposits[i].amountOfReward > 0) {\\n                reward =\\n                    (result * rewardDeposits[i].amountOfReward) /\\n                    rewardDeposits[i].amountOfShares;\\n                result += reward;\\n            } else reward = 0;\\n\\n            //BONUS\\n            _bonusStatus = (i <= lastBonusUpdate)\\n                ? _bonusStatusDays[i]\\n                : bonusStatus;\\n\\n            if (\\n                i >= (_bonusStatus.day[0] + info.bonusStart) &&\\n                i > info.bonusUpdate &&\\n                _bonusStatus.enabled &&\\n                reward > 0\\n            ) {\\n                uint8 j;\\n                while (i >= (_bonusStatus.day[j] + info.bonusStart)) {\\n                    j++;\\n                    if (j == 5) break;\\n                }\\n\\n                bonus += (reward * _bonusStatus.percent[j - 1]) / DENOMINATOR;\\n            }\\n\\n            _daysAmounts[i - info.update - 1] = DaysAmounts(i, reward);\\n        }\\n        if (rewardDeposits[endDay].amountOfReward > 0) update = endDay;\\n        else update = endDay - 1;\\n    }\\n\\n    function _updateSharesVars() private {\\n        uint256 today = _currentDay();\\n        if (!_changerVarsShares[today]) {\\n            _changerVarsShares[today] = true;\\n            _yesterdayShares += _todayShares;\\n            _todayShares = 0;\\n\\n            for (uint256 i = lastBonusUpdate; i <= today; i++) {\\n                _bonusStatusDays[i].enabled = bonusStatus.enabled;\\n                _bonusStatusDays[i].day = bonusStatus.day;\\n                _bonusStatusDays[i].percent = bonusStatus.percent;\\n            }\\n\\n            lastBonusUpdate = today;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRouter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRouter {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_back\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddBonuses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawBonesus\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"R_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"S_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addBonusTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"back\",\"type\":\"address\"}],\"name\":\"addOrRemoveBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTimeTotalMined\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDay\",\"type\":\"uint256\"}],\"name\":\"calculationRewardTable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"arr\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"displayBonusScheme\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBonusUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bonusRestake\",\"type\":\"bool\"}],\"name\":\"recalculate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMin\",\"type\":\"uint256\"}],\"name\":\"rewardTokenDonation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"_days\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percent\",\"type\":\"uint256[]\"}],\"name\":\"setBonusVars\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"update\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"todayReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateHistory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userBonusStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_sum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBonusTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000410a56541bd912f9b60943fcb344f1e3d6f095670000000000000000000000007130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000006e7c8dbcee107ab5b3547f99a4a337ffec3d512e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}