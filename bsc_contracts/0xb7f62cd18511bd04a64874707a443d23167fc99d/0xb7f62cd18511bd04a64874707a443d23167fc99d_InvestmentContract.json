{"SourceCode": "// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n// File: Investment.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// import \"@pancakeswap/pancakeswap-lib/contracts/interfaces/IPancakeRouter02.sol\";\r\ninterface IERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\ncontract InvestmentContract {\r\n    //check deploy\r\n    //1 timestamps for daily Rewards\r\n    //2 Address of tokens\r\n    //3 address of router\r\n    address public owner;\r\n\r\n    uint256 public totalUsers;\r\n    bool public returnInBusd = true;\r\n    uint256 public MIN_AMT = 100;\r\n    uint256 totalDeposits;\r\n    //0x782e720D674dBb4f77F63c118Faf98d9bC573136\r\n    //0x55d398326f99059fF775485246999027B3197955\r\n    address public AIMB = 0x782e720D674dBb4f77F63c118Faf98d9bC573136;\r\n    address public BUSD = 0x55d398326f99059fF775485246999027B3197955;\r\n    IERC20 public token = IERC20(AIMB);\r\n    IERC20 public usdt = IERC20(BUSD);\r\n    // IUniswapV2Factory factory =\r\n    //     IUniswapV2Factory(0x1097053Fd2ea711dad45caCcc45EfF7548fCB362);\r\n    //0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73\r\n\r\n    struct User {\r\n        uint256 depositAmount;\r\n        uint256 depositTime;\r\n        uint256 totalEarnings;\r\n        uint256 dailyRewardsTime;\r\n        uint256 withdrawalAmount;\r\n        address referred_by;\r\n        uint256 level1;\r\n        uint256 level2;\r\n        uint256 level3;\r\n        uint256 max_cap;\r\n    }\r\n    uint256 public MAX_CAP = 300;\r\n\r\n    mapping(address => User) public users;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function deposit(\r\n        address _user,\r\n        address _referral,\r\n        uint256 _amount\r\n    ) external {\r\n        User storage user = users[_user];\r\n        uint256 usdtAmount = returnUsdtAmount(_amount);\r\n        require(\r\n            usdtAmount >= (MIN_AMT * 1e18),\r\n            \"Amount is less than minimum amount\"\r\n        );\r\n        require(\r\n            token.transferFrom(_user, address(this), _amount),\r\n            \"USDT transfer failed\"\r\n        );\r\n        if (_referral != address(0) && _referral != msg.sender) {\r\n            User storage referrer = users[_referral];\r\n            // referee(_referral, _amount);\r\n            user.referred_by = _referral;\r\n            if (\r\n                referrer.totalEarnings <= referrer.max_cap &&\r\n                referrer.depositAmount > 0\r\n            ) {\r\n                referrer.totalEarnings += ((_amount * 5) / 100);\r\n                referrer.withdrawalAmount += ((_amount * 5) / 100);\r\n                if (returnInBusd) {\r\n                    require(\r\n                        usdt.transfer(\r\n                            _referral,\r\n                            returnUsdtAmount(((_amount * 5) / 100))\r\n                        ),\r\n                        \"Transfer Failed\"\r\n                    );\r\n                } else {\r\n                    require(\r\n                        token.transfer(_referral, ((_amount * 5) / 100)),\r\n                        \"Transfer Failed\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        // Update user data\r\n        user.max_cap = (_amount * 300) / 100;\r\n        user.dailyRewardsTime = block.timestamp + 24 hours;\r\n        user.depositAmount += _amount;\r\n        if (user.depositTime <= 0) {\r\n            user.depositTime = block.timestamp;\r\n        }\r\n        //  user.dailyRewardsTime+=(block.timestamp+24 hours);\r\n        totalDeposits += _amount;\r\n        totalUsers++;\r\n    }\r\n\r\n    function EarnDailyRewards() external {\r\n        User storage user = users[msg.sender];\r\n        require(\r\n            block.timestamp <=\r\n                user.depositTime +\r\n                    (getPlanDuration(user.depositTime) * 24 * 60 * 60),\r\n            \"Deposit is matured \"\r\n        );\r\n        require(user.depositAmount > 0, \"No active deposit\");\r\n        require(user.totalEarnings <= user.max_cap, \"Already Reached Max Cap\");\r\n        require(\r\n            block.timestamp > user.dailyRewardsTime,\r\n            \"Already Claimed ,Please come back after 24 hours\"\r\n        );\r\n        referee(\r\n            user.referred_by,\r\n            ((calculateROI(user.depositAmount) * user.depositAmount) / 10000) *\r\n                calculateDaysBetween(user.dailyRewardsTime, block.timestamp)\r\n        );\r\n        uint256 earningAmount = ((user.depositAmount *\r\n            (calculateROI(user.depositAmount))) / 10000)*calculateDaysBetween(user.dailyRewardsTime, block.timestamp);\r\n        user.withdrawalAmount += earningAmount;\r\n        user.dailyRewardsTime = block.timestamp + 24 hours;\r\n        if (returnInBusd) {\r\n            require(\r\n                usdt.transfer(msg.sender, returnUsdtAmount(earningAmount)),\r\n                \"trasnferFailded\"\r\n            );\r\n        } else {\r\n            require(\r\n                token.transfer(msg.sender, earningAmount),\r\n                \"trasnferFailded\"\r\n            );\r\n        }\r\n        user.totalEarnings += earningAmount;\r\n    }\r\n\r\n    function priceOfToken() public view returns (uint256) {\r\n        IUniswapV2Router02 router = IUniswapV2Router02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n        address[] memory path = new address[](2);\r\n        path[0] = AIMB;\r\n        path[1] = BUSD;\r\n        uint256[] memory amountsOut = router.getAmountsOut(1e18, path); // 1e18 is the amount of Token A (in wei)\r\n        return amountsOut[1]; // The price of Token A in terms of Token B\r\n        // return 318841499845546159;\r\n    }\r\n\r\n    function returnUsdtAmount(uint256 AIMBamount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 price = priceOfToken();\r\n        uint256 finalAmount = (price * AIMBamount) / 10**18;\r\n        return finalAmount;\r\n    }\r\n\r\n    function withdraw() external {\r\n        User storage user = users[msg.sender];\r\n        require(user.depositAmount > 0, \"No active deposit\");\r\n        require(\r\n            block.timestamp >=\r\n                user.depositTime +\r\n                    (getPlanDuration(user.depositTime) * 24 * 60 * 60),\r\n            \"Deposit is not matured yet\"\r\n        );\r\n\r\n        uint256 totalEarnings = user.totalEarnings - user.withdrawalAmount;\r\n        require(totalEarnings > 0, \"No earnings to withdraw\");\r\n        // uint256 withdrawalFee = (totalEarnings * 5) / 100;\r\n        uint256 netWithdrawalAmount = totalEarnings - (totalEarnings * 5) / 100;\r\n        user.totalEarnings = 0;\r\n        user.withdrawalAmount += netWithdrawalAmount;\r\n        // totalWithdrawn += netWithdrawalAmount;\r\n        // Transfer USDT tokens to the user\r\n        if (returnInBusd) {\r\n            require(\r\n                usdt.transfer(\r\n                    msg.sender,\r\n                    returnUsdtAmount(netWithdrawalAmount)\r\n                ),\r\n                \"USDT transfer failed\"\r\n            );\r\n        } else {\r\n            require(\r\n                token.transfer(msg.sender, netWithdrawalAmount),\r\n                \"USDT transfer failed\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function withdrawStakedAmount() external {\r\n        User storage user = users[msg.sender];\r\n        require(\r\n            block.timestamp >= user.depositTime + 365 days,\r\n            \"Staked amount will be realsed after 365 days of deposit\"\r\n        );\r\n        require(\r\n            token.transfer(msg.sender, user.depositAmount),\r\n            \"Amount transfer failed\"\r\n        );\r\n    }\r\n\r\n    function getPlanDuration(uint256 _depositAmount)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (_depositAmount < 2500 * 10**18) {\r\n            return 300 days;\r\n        } else if (_depositAmount < 10000 * 10**18) {\r\n            return 240 days;\r\n        } else {\r\n            return 200 days;\r\n        }\r\n    }\r\n\r\n    function calculateROI(uint256 _depositAmount)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 planDuration = getPlanDuration(_depositAmount);\r\n        if (planDuration == 300 days) {\r\n            return 100;\r\n        } else if (planDuration == 240 days) {\r\n            return 125;\r\n        } else {\r\n            return 150;\r\n        }\r\n    }\r\n\r\n    function referee(address ref_add, uint256 _amount) internal  returns (bool) {\r\n        require(ref_add != msg.sender, \" You cannot refer yourself \");\r\n        address level1 = users[msg.sender].referred_by;\r\n        address level2 = users[level1].referred_by;\r\n        address level3 = users[level2].referred_by;\r\n        if (\r\n            (level1 != msg.sender) &&\r\n            (level1 != address(0)) &&\r\n            users[level1].depositAmount > 0\r\n        ) {\r\n            users[level1].level1 += ((_amount * 15) / 100);\r\n            if (returnInBusd) {\r\n                require(\r\n                    usdt.transfer(\r\n                        level1,\r\n                        returnUsdtAmount((_amount * 15) / 100)\r\n                    ),\r\n                    \"Transfer Failer\"\r\n                );\r\n            } else {\r\n                require(\r\n                    token.transfer(level1, (_amount * 15) / 100),\r\n                    \"Transfer Failer\"\r\n                );\r\n            }\r\n        }\r\n        if (\r\n            (level2 != msg.sender) &&\r\n            (level2 != address(0)) &&\r\n            users[level2].depositAmount > 0\r\n        ) {\r\n            users[level2].level2 += ((_amount * 10) / 100);\r\n            if (returnInBusd) {\r\n                require(\r\n                    usdt.transfer(\r\n                        level2,\r\n                        returnUsdtAmount((_amount * 10) / 100)\r\n                    ),\r\n                    \"Transfer Failer\"\r\n                );\r\n            } else {\r\n                require(\r\n                    token.transfer(level2, (_amount * 10) / 100),\r\n                    \"Transfer Failer\"\r\n                );\r\n            }\r\n        }\r\n        if (\r\n            (level3 != msg.sender) &&\r\n            (level3 != address(0)) &&\r\n            users[level3].depositAmount > 0\r\n        ) {\r\n            users[level3].level3 += ((_amount * 5) / 100);\r\n            if (returnInBusd) {\r\n                require(\r\n                    usdt.transfer(\r\n                        level3,\r\n                        returnUsdtAmount((_amount * 5) / 100)\r\n                    ),\r\n                    \"Transfer Failer\"\r\n                );\r\n            } else {\r\n                require(\r\n                    token.transfer(level3, (_amount * 5) / 100),\r\n                    \"Transfer Failer\"\r\n                );\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function withdrawBusd(uint256 _amount) external onlyOwner {\r\n        // require(msg.sender==owner,\"Only owner\");\r\n        require(\r\n            usdt.transfer(owner, _amount),\r\n            \"Succesfull Transfer\"\r\n        );\r\n    }\r\n\r\n    function withdrawAimb(uint256 _amount) external onlyOwner {\r\n        // require(msg.sender==owner,\"Only owner\");\r\n        require(\r\n            token.transfer(owner, _amount),\r\n            \"Succesfull Transfer\"\r\n        );\r\n    }\r\n\r\n    function AddStake(\r\n        address _user,\r\n        uint256 _amount,\r\n        address _referral\r\n    ) external onlyOwner {\r\n        User storage user = users[_user];\r\n        if (_referral != address(0) && _referral != msg.sender) {\r\n            user.referred_by = _referral;\r\n        }\r\n        // Update user data\r\n        user.max_cap = (_amount * 300) / 100;\r\n        user.dailyRewardsTime = block.timestamp + 24 hours;\r\n        user.depositAmount += _amount;\r\n        user.depositTime = block.timestamp;\r\n        totalDeposits += _amount;\r\n        // user.dailyRewardsTime += (block.timestamp + 24 hours);\r\n        totalUsers++;\r\n    }\r\n\r\n    function changeMINamount(uint256 amount) external onlyOwner {\r\n        MIN_AMT = amount;\r\n    }\r\n\r\n    function changeReturnInBUSD(bool value) external onlyOwner {\r\n        returnInBusd = value;\r\n    }\r\n\r\n    function calculateDaysBetween(uint256 timestamp1, uint256 timestamp2)\r\n        public \r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            timestamp1 <= timestamp2,\r\n            \"Timestamp1 should be less than or equal to Timestamp2\"\r\n        );\r\n\r\n        // Calculate the difference in seconds\r\n        uint256 timeDifference = timestamp2+ 24 hours - timestamp1;\r\n\r\n        // Convert seconds to days (86400 seconds in a day)\r\n        //86400\r\n        uint256 daysDifference = timeDifference / 86400;\r\n\r\n        return daysDifference;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AIMB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"AddStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EarnDailyRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_AMT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp2\",\"type\":\"uint256\"}],\"name\":\"calculateDaysBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeMINamount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"changeReturnInBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnInBusd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"AIMBamount\",\"type\":\"uint256\"}],\"name\":\"returnUsdtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyRewardsTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referred_by\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_cap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAimb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBusd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InvestmentContract", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bc2157679ceeb8a62ff64762425ec202b0ea62d8f8f50287362b9ab9604fd33a"}