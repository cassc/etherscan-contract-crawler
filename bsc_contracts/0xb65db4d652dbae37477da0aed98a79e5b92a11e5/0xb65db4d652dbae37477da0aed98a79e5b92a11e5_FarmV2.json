{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/farms-v2/FarmV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./FarmV2Factory.sol\\\";\\nimport \\\"./extensions/FarmV2Depositable.sol\\\";\\nimport \\\"./extensions/FarmV2Withdrawable.sol\\\";\\n\\ncontract FarmV2 is FarmV2Depositable, FarmV2Withdrawable, FarmV2Factory {\\n    /**\\n     * @dev The contract constructor.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow constructor\\n     */\\n    constructor(Configuration memory config_) {\\n        _config = config_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/farms-v2/FarmV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.16;\\n\\nimport \\\"./FarmV2Context.sol\\\";\\n\\nabstract contract FarmV2Factory is FarmV2Context {\\n    /**\\n     * @dev Set the stake tokens lock status.\\n     */\\n    function setLockStatus(bool status) external onlyOwner {\\n        _config.isLocked = status;\\n    }\\n\\n    /**\\n     * @dev Set the maximum depositable amount per account.\\n     */\\n    function setMaxDeposit(uint256 amount) external onlyOwner {\\n        _config.maxDeposit = amount;\\n    }\\n\\n    /**\\n     * @dev Change the current rewards rate.\\n     */\\n    function setRewardsRate(uint256 value) external onlyOwner {\\n        if (value <= 0) {\\n            revert InvalidAmount();\\n        }\\n\\n        _config.rewardsRate = value;\\n    }\\n\\n    /**\\n     * @dev Set the pool start time.\\n     */\\n    function setStartTime(uint256 time) external onlyOwner {\\n        _config.startAt = time;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/farms-v2/extensions/FarmV2Depositable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../FarmV2Context.sol\\\";\\n\\n// solhint-disable not-rely-on-time\\nabstract contract FarmV2Depositable is FarmV2Context {\\n    /**\\n     * @dev Emit when the account deposit tokens to the pool.\\n     */\\n    event Deposited(address indexed account, uint256 indexed amount);\\n\\n    /**\\n     * @dev Deposit the tokens to the pool and start earning.\\n     */\\n    function deposit(uint256 amount) external virtual nonReentrant {\\n        if (!isStarted()) {\\n            revert PoolIsNotStarted();\\n        }\\n\\n        address account = _msgSender();\\n\\n        if (amount <= 0 || amount > maxDeposit(account)) {\\n            revert InvalidAmount();\\n        }\\n\\n        // Transfer tokens to this contract.\\n        uint256 balanceBefore = stakeTokenBalance();\\n\\n        // slither-disable-next-line reentrancy-no-eth,reentrancy-benign\\n        if (!stakeToken().transferFrom(account, address(this), amount)) {\\n            revert TransferFailed();\\n        }\\n\\n        uint256 balanceAfter = stakeTokenBalance();\\n\\n        // Get the real deposited amount if the stake token has fee.\\n        unchecked {\\n            if (balanceAfter <= balanceBefore) {\\n                revert TransferFailed();\\n            }\\n\\n            uint256 realAmount = balanceAfter - balanceBefore;\\n\\n            if (realAmount < amount) {\\n                amount = realAmount;\\n            }\\n        }\\n\\n        // Save deposit informations.\\n        _deposits[account].push(\\n            Deposit({\\n                amount: amount,\\n                claimed: 0,\\n                harvested: 0,\\n                time: block.timestamp,\\n                lastWithdrawAt: block.timestamp,\\n                isEnded: false\\n            })\\n        );\\n\\n        unchecked {\\n            _balances[account] += amount;\\n            _totalStaked += amount;\\n        }\\n\\n        emit Deposited(account, amount);\\n    }\\n\\n    /**\\n     * @dev Calculator the maximum depositable amount.\\n     */\\n    function available() public view virtual returns (uint256 result) {\\n        uint256 pool = rewardsPool();\\n\\n        if (pool <= 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // slither-disable-next-line divide-before-multiply\\n            result = (pool * 10**decimals()) / ((apr() / 100 / YEAR) * duration());\\n\\n            // Round the result to ensure the earned tokens always\\n            // less than rewards pool.\\n            uint256 denominators = 10**rewardsToken().decimals();\\n\\n            // slither-disable-next-line divide-before-multiply\\n            result = denominators * (result / denominators);\\n\\n            // Div result for rewards rate.\\n            result = (result * 10**decimals()) / rewardsRate();\\n        }\\n\\n        unchecked {\\n            uint256 totalStaked_ = totalStaked();\\n\\n            if (result <= totalStaked_) {\\n                return 0;\\n            }\\n\\n            result -= totalStaked_;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the maximum depositable amount of the account.\\n     */\\n    function maxDeposit(address account) public view virtual returns (uint256) {\\n        uint256 balance = stakeToken().balanceOf(account);\\n        uint256 depositablePerAccount = maxDepositPerAccount();\\n        uint256 depositable = Math.min(balance, available());\\n\\n        if (depositablePerAccount > 0) {\\n            uint256 staked = balanceOf(account);\\n\\n            if (staked >= depositablePerAccount) {\\n                return 0;\\n            }\\n\\n            unchecked {\\n                depositablePerAccount -= staked;\\n            }\\n\\n            return Math.min(depositablePerAccount, depositable);\\n        }\\n\\n        return depositable;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/farms-v2/extensions/FarmV2Withdrawable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.16;\\n\\nimport \\\"./FarmV2Earnable.sol\\\";\\n\\n// solhint-disable not-rely-on-time\\nabstract contract FarmV2Withdrawable is FarmV2Earnable {\\n    /**\\n     * @dev Emit when the account withdraw deposited tokens from the pool.\\n     */\\n    event Withdrawed(address indexed account, uint256 indexed amount);\\n\\n    /**\\n     * @dev Withdraw the deposited tokens from the pool.\\n     */\\n    function withdraw(uint256 amount) external virtual nonReentrant {\\n        if (amount <= 0) {\\n            revert InvalidAmount();\\n        }\\n\\n        address account = _msgSender();\\n        uint256 amount_ = amount;\\n\\n        (Deposit[] memory deposits_, uint256 apr_, uint256 duration_, bool isLocked_) = (\\n            _deposits[account],\\n            apr(),\\n            duration(),\\n            isLocked()\\n        );\\n\\n        unchecked {\\n            for (uint256 i = 0; i < deposits_.length; ++i) {\\n                Deposit memory deposit_ = deposits_[i];\\n\\n                // If tokens is not unlocked, skip to next deposit.\\n                if (isLocked_ && block.timestamp < deposit_.time + duration_) {\\n                    continue;\\n                }\\n\\n                if (deposit_.amount <= 0) {\\n                    continue;\\n                }\\n\\n                // Update deposit informations.\\n                deposit_.claimed = _earned(deposit_, apr_, duration_);\\n\\n                if (deposit_.claimed > 0) {\\n                    _totalClaimed += deposit_.claimed;\\n                }\\n\\n                deposit_.harvested = 0;\\n                deposit_.lastWithdrawAt = block.timestamp;\\n\\n                // Update the deposit ended status to ensure next withdraw\\n                // not recalculate earned on remaining amount.\\n                if (deposit_.lastWithdrawAt >= deposit_.time + duration_) {\\n                    deposit_.isEnded = true;\\n                }\\n\\n                // Update amount.\\n                if (amount_ >= deposit_.amount) {\\n                    amount_ -= deposit_.amount;\\n                    deposit_.amount = 0;\\n                } else {\\n                    deposit_.amount -= amount_;\\n                    amount_ = 0;\\n                }\\n\\n                _deposits[account][i] = deposit_;\\n\\n                if (amount_ < deposit_.amount) {\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if (amount_ != 0) {\\n            revert InsufficientBalance();\\n        }\\n\\n        unchecked {\\n            _balances[account] -= amount;\\n            _totalStaked -= amount;\\n            _totalWithdrawed += amount;\\n        }\\n\\n        // Transfer tokens to the account.\\n        if (!stakeToken().transfer(account, amount)) {\\n            revert TransferFailed();\\n        }\\n\\n        emit Withdrawed(account, amount);\\n    }\\n\\n    /**\\n     * @dev Returns the maximum withdrawable tokens.\\n     */\\n    function withdrawable(address account) external view virtual returns (uint256 amount) {\\n        uint256 balance = balanceOf(account);\\n\\n        if (!isLocked() || balance <= 0) {\\n            return balance;\\n        }\\n\\n        (Deposit[] memory deposits_, uint256 duration_) = (_deposits[account], duration());\\n\\n        for (uint256 i = 0; i < deposits_.length; ++i) {\\n            unchecked {\\n                if (block.timestamp < deposits_[i].time + duration_) {\\n                    continue;\\n                }\\n\\n                amount += deposits_[i].amount;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/farms-v2/FarmV2Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract FarmV2Context is ReentrancyGuard, Ownable {\\n    error InsufficientBalance();\\n    error TransferFailed();\\n    error PoolIsNotEmpty();\\n    error PoolIsNotStarted();\\n    error InvalidAmount();\\n\\n    struct Configuration {\\n        uint256 apr;\\n        uint256 duration;\\n        bool isLocked;\\n        uint256 maxDeposit;\\n        uint256 rewardsRate;\\n        uint256 startAt;\\n        IERC20Metadata rewardsToken;\\n        IERC20Metadata stakeToken;\\n    }\\n\\n    struct Deposit {\\n        uint256 amount;\\n        uint256 claimed;\\n        uint256 harvested;\\n        uint256 time;\\n        uint256 lastWithdrawAt;\\n        bool isEnded;\\n    }\\n\\n    uint256 internal constant YEAR = 365 days;\\n\\n    Configuration internal _config;\\n\\n    uint256 internal _totalStaked;\\n    uint256 internal _totalHarvested;\\n    uint256 internal _totalWithdrawed;\\n    uint256 internal _totalClaimed;\\n\\n    mapping(address => uint256) internal _balances;\\n    mapping(address => Deposit[]) internal _deposits;\\n\\n    /**\\n     * @dev Returns the total deposits struct of the account.\\n     */\\n    function getDeposits(address account) external view virtual returns (Deposit[] memory) {\\n        return _deposits[account];\\n    }\\n\\n    /**\\n     * @dev Returns the current APR of this pool.\\n     */\\n    function apr() public view virtual returns (uint256) {\\n        return _config.apr;\\n    }\\n\\n    /**\\n     * @dev Returns the current staked token of the account.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to simulator float number.\\n     */\\n    function decimals() public pure virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Returns the pool duration.\\n     *\\n     * The duration is used for lock the staked tokens if enabled\\n     * and calculator the earned tokens.\\n     */\\n    function duration() public view virtual returns (uint256) {\\n        return _config.duration;\\n    }\\n\\n    /**\\n     * @dev Determines if the staked tokens will be locked.\\n     */\\n    function isLocked() public view virtual returns (bool) {\\n        return _config.isLocked;\\n    }\\n\\n    /**\\n     * @dev Returns balance of the rewards pool.\\n     */\\n    function rewardsPool() public view virtual returns (uint256 balance) {\\n        balance = rewardsTokenBalance();\\n\\n        if (rewardsToken() == stakeToken()) {\\n            unchecked {\\n                uint256 staked = totalStaked();\\n\\n                if (balance < staked) {\\n                    return 0;\\n                }\\n\\n                balance -= staked;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current rewards rate.\\n     */\\n    function rewardsRate() public view virtual returns (uint256) {\\n        return _config.rewardsRate;\\n    }\\n\\n    /**\\n     * @dev Returns the rewards token address.\\n     */\\n    function rewardsToken() public view virtual returns (IERC20Metadata) {\\n        return _config.rewardsToken;\\n    }\\n\\n    /**\\n     * @dev Returns the stake token address.\\n     */\\n    function stakeToken() public view virtual returns (IERC20Metadata) {\\n        return _config.stakeToken;\\n    }\\n\\n    /**\\n     * @dev Returns the pool start time.\\n     */\\n    function startAt() public view virtual returns (uint256) {\\n        return _config.startAt;\\n    }\\n\\n    /**\\n     * @dev Returns the total staked tokens.\\n     */\\n    function totalStaked() public view virtual returns (uint256) {\\n        return _totalStaked;\\n    }\\n\\n    /**\\n     * @dev Determines if the current pool is started.\\n     */\\n    function isStarted() internal view virtual returns (bool) {\\n        return block.timestamp >= startAt(); // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /**\\n     * @dev Returns the maximum depositable amount per account.\\n     */\\n    function maxDepositPerAccount() internal view virtual returns (uint256) {\\n        return _config.maxDeposit;\\n    }\\n\\n    /**\\n     * @dev Returns the rewards token balance of current contract.\\n     */\\n    function rewardsTokenBalance() internal view virtual returns (uint256) {\\n        return rewardsToken().balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the stake token balance of current contract.\\n     */\\n    function stakeTokenBalance() internal view virtual returns (uint256) {\\n        return stakeToken().balanceOf(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/farms-v2/extensions/FarmV2Earnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.16;\\n\\nimport \\\"../FarmV2Context.sol\\\";\\n\\n// solhint-disable not-rely-on-time\\nabstract contract FarmV2Earnable is FarmV2Context {\\n    /**\\n     * @dev Emit when the account harvested successfully.\\n     */\\n    event Harvested(address indexed account, uint256 indexed amount);\\n\\n    /**\\n     * @dev Harvest all earned tokens of the sender.\\n     */\\n    function harvest() external virtual nonReentrant {\\n        address account = _msgSender();\\n        uint256 earned_;\\n\\n        (Deposit[] memory deposits_, uint256 apr_, uint256 duration_) = (_deposits[account], apr(), duration());\\n\\n        unchecked {\\n            for (uint256 i = 0; i < deposits_.length; ++i) {\\n                uint256 earnedByDeposit = _earned(deposits_[i], apr_, duration_);\\n\\n                if (earnedByDeposit > 0) {\\n                    _deposits[account][i].harvested += earnedByDeposit - deposits_[i].claimed;\\n                    _deposits[account][i].claimed = 0;\\n                }\\n\\n                earned_ += earnedByDeposit;\\n            }\\n\\n            earned_ /= 10**decimals();\\n        }\\n\\n        if (earned_ <= 0) {\\n            revert InsufficientBalance();\\n        }\\n\\n        if (!rewardsToken().transfer(account, earned_)) {\\n            revert TransferFailed();\\n        }\\n\\n        unchecked {\\n            _totalHarvested += earned_;\\n        }\\n\\n        emit Harvested(account, earned_);\\n    }\\n\\n    /**\\n     * @dev Returns the total earned tokens of the account.\\n     */\\n    function earned(address account) external view virtual returns (uint256 earned_) {\\n        (Deposit[] memory deposits_, uint256 apr_, uint256 duration_) = (_deposits[account], apr(), duration());\\n\\n        for (uint256 i = 0; i < deposits_.length; ++i) {\\n            unchecked {\\n                earned_ += _earned(deposits_[i], apr_, duration_);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculator the earned tokens of the deposit by specified APR\\n     * and duration.\\n     *\\n     * Calculation formula:\\n     *  + Rewards Per Seconds (RPS): amount * (APR / 365 days)%\\n     *  + Stake Time: now - stake start time\\n     *  + Earned: (RPS * min(Stake Time, duration) + claimed) - harvested\\n     */\\n    function _earned(\\n        Deposit memory deposit_,\\n        uint256 apr_,\\n        uint256 duration_\\n    ) internal view virtual returns (uint256 earned_) {\\n        uint256 amount = deposit_.amount;\\n\\n        if (amount <= 0 || deposit_.isEnded) {\\n            return deposit_.claimed;\\n        }\\n\\n        // Calculator the stake time.\\n        uint256 stakeTime = duration_;\\n\\n        unchecked {\\n            uint256 end = deposit_.time + duration_;\\n\\n            if (deposit_.lastWithdrawAt < end) {\\n                if (block.timestamp < end) {\\n                    end = block.timestamp;\\n                }\\n\\n                stakeTime = end - deposit_.lastWithdrawAt;\\n            }\\n        }\\n\\n        // Calculator the deposit amount by rewards rate.\\n        unchecked {\\n            amount = (amount * rewardsRate()) / 10**decimals();\\n\\n            if (amount <= 0) {\\n                return deposit_.claimed;\\n            }\\n        }\\n\\n        // Calculator earned tokens.\\n        unchecked {\\n            earned_ = ((amount * stakeTime * apr_) / YEAR / 100) + deposit_.claimed;\\n\\n            if (earned_ <= deposit_.harvested) {\\n                return 0;\\n            }\\n\\n            earned_ -= deposit_.harvested;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"internalType\":\"struct FarmV2Context.Configuration\",\"name\":\"config_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolIsNotEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolIsNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"apr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"earned_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnded\",\"type\":\"bool\"}],\"internalType\":\"struct FarmV2Context.Deposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setLockStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setRewardsRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FarmV2", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000410d586a20a4c000000000000000000000000000000000000000000000000000000000000000278d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d3c21bcecceda10000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000632732700000000000000000000000008ec217b71905a46afb18350c58dc7b7d90f73f280000000000000000000000008ec217b71905a46afb18350c58dc7b7d90f73f28", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}