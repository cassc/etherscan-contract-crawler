{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transferFrom( address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract CoinTransfer is  Ownable {\r\n    address private feeAddress;\r\n    uint256 private feePercentage = 2;\r\n     address[] private nonDeductibleFeeAddresses;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    modifier onlyAllowedAddresses() {\r\n        require(\r\n            msg.sender == owner() || isNonDeductibleFeeAddress(msg.sender),\r\n            \"Only the owner or allowed addresses can call this function\"\r\n        );\r\n        _;\r\n    }\r\n       function addNonDeductibleFeeAddress(address _address) external onlyOwner {\r\n        require(_address != address(0), \"Invalid address\");\r\n        nonDeductibleFeeAddresses.push(_address);\r\n    }\r\n     function removeNonDeductibleFeeAddress(address _address) external onlyOwner {\r\n        for (uint256 i = 0; i < nonDeductibleFeeAddresses.length; i++) {\r\n            if (nonDeductibleFeeAddresses[i] == _address) {\r\n                nonDeductibleFeeAddresses[i] = nonDeductibleFeeAddresses[nonDeductibleFeeAddresses.length - 1];\r\n                nonDeductibleFeeAddresses.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    function isNonDeductibleFeeAddress(address _address) public view returns (bool) {\r\n        for (uint256 i = 0; i < nonDeductibleFeeAddresses.length; i++) {\r\n            if (nonDeductibleFeeAddresses[i] == _address) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    constructor(address _feeAddress) {\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    function setFeePercentage(uint256 _percentage) external onlyOwner {\r\n        require(_percentage <= 100, \"Percentage must be between 0 and 100\");\r\n        feePercentage = _percentage;\r\n    }\r\n\r\n    function getPercentage() public view returns (uint256) {\r\n        return feePercentage;\r\n    }\r\n\r\n    function transfer(address _tokenAddress,address _receiver,uint256 _amount) external {\r\n        require(_receiver != address(0), \"Invalid receiver address\");\r\n\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        require(token.balanceOf(msg.sender) >= _amount, \"Insufficient balance\");\r\n\r\n        uint256 feeAmount = (_amount * feePercentage) / 100;\r\n        uint256 remainingAmount = _amount - feeAmount;\r\n\r\n        require(token.balanceOf(msg.sender) >= _amount, \"Insufficient balance\");\r\n        require(token.allowance(msg.sender, address(this)) >= _amount,\"Not enough allowance\");\r\n        require(token.transferFrom(msg.sender, _receiver, remainingAmount),\"Transfer to receiver failed\");\r\n        require(token.transferFrom(msg.sender, feeAddress, feeAmount),\"Transfer of fee failed\");\r\n        emit Transfer(msg.sender, _receiver, _amount);\r\n    }\r\n\r\n       function _transfer(address _tokenAddress, address _receiver, uint256 _amount) external onlyAllowedAddresses{\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        require(token.balanceOf(msg.sender) >= _amount, \"Insufficient balance\");\r\n        require(token.allowance(msg.sender, address(this)) >= _amount, \"Not enough allowance\");\r\n        require(token.transferFrom(msg.sender, _receiver, _amount), \"Transfer failed\");\r\n         emit Transfer(msg.sender, _receiver, _amount);\r\n    }\r\n\r\n    function setFeeAddress(address _feeAddress) external returns (bool) {\r\n        require(msg.sender == owner(), \"Only Owner can set the fees\");\r\n        feeAddress = _feeAddress;\r\n        return true;\r\n    }\r\n\r\n    function getFeeAddress() public view returns (address) {\r\n        return feeAddress;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addNonDeductibleFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isNonDeductibleFeeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeNonDeductibleFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CoinTransfer", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000005afdb7866a4bd8d1b9233fa953c1fdf2b5ee1ade", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b141bb15cef2f5b65fa610e009beef9acd7f18df5cfd5706765a8bfc8c88440b"}