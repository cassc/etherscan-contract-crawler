{"SourceCode": "contract BEP20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract BEP20 is BEP20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value) returns (bool);\r\n  function approve(address spender, uint value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/*\r\nAnyone can approve tokens to this contract \r\nThat user can then call the multisend method to send out payments\r\n\r\nEach payment needs a unique PaymentId (scoped by msg.sender to prevent frontrunning) or else the send will fail\r\nThis is designed to make it easier to ensure that double-payments dont occur \r\n*/\r\ncontract UniqueBatchedPayments  {\r\n\r\n    mapping(bytes32 => bool) successfulPayments;\r\n\r\n \r\n\r\n\r\n    function paymentSuccessful(address sender, bytes32 paymentId) public constant returns (bool){\r\n        \r\n        bytes32 scopedPaymentId = keccak256(abi.encodePacked(sender,paymentId));\r\n        \r\n        return (successfulPayments[scopedPaymentId] == true);\r\n    }\r\n \r\n   \r\n\r\n     //tokens need to be in msg.senders account and approved to this contract \r\n    function multisend(address _tokenAddr, bytes32 paymentId, address[] dests, uint256[] values) \r\n    returns (uint256)\r\n     {  \r\n         \r\n        bytes32 scopedPaymentId = keccak256(abi.encodePacked(msg.sender,paymentId));\r\n\r\n        require(dests.length > 0);\r\n        require(values.length >= dests.length);\r\n        require(successfulPayments[scopedPaymentId] != true);\r\n\r\n        uint256 i = 0;\r\n        while (i < dests.length) {\r\n           require(BEP20(_tokenAddr).transferFrom(msg.sender, dests[i], values[i]));\r\n           i += 1;\r\n        }\r\n\r\n        successfulPayments[scopedPaymentId] = true;\r\n\r\n        return (i);\r\n\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // The contract does not accept BNB\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function () public payable {\r\n\r\n        revert();\r\n\r\n\r\n    }\r\n    \r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"paymentId\",\"type\":\"bytes32\"},{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multisend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"paymentId\",\"type\":\"bytes32\"}],\"name\":\"paymentSuccessful\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "UniqueBatchedPayments", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://8005e31257ebda0f2f2c63ac061cad9b8f4b4ce49da291bcf25999501e8e1fc4"}