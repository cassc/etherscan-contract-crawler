{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.5.10;\r\n\r\n/*\r\nBasic Method Which Is Used For The Basic Airthmetic Operations\r\n*/\r\nlibrary SafeMath {\r\n\r\n    /*Addition*/\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /*Subtraction*/\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /*Multiplication*/\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /*Divison*/\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    /* Modulus */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract GAINBNB {\r\n\r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint8;\r\n\r\n\tuint256 constant public minInvestmentAmount = 0.056665 ether;\r\n\tuint256 constant public adminCharge = 6; // 6%;\r\n\tuint256 constant public perDistribution = 100;\r\n\r\n\tuint256 public totalUsers;\r\n\tuint256 public totalInvested;\r\n\tuint256 public totalWithdrawn;\r\n\tuint256 public totalDeposits;\r\n    \r\n\r\n\tuint[5] public ref_bonuses = [6,8,10,12,14];\r\n    \r\n    uint256[5] public defaultPackages = [0.056665 ether,0.226660 ether,0.453602 ether,0.907204 ether,2.2680 ether];\r\n    \r\n    mapping(uint256 => address payable) public singleLeg;\r\n    uint256 public singleLegLength;\r\n\r\n    uint[5] public requiredDirect = [1,1,4,4,4];\r\n    \r\n\taddress payable public primaryAdmin;\r\n\r\n    uint public maxupline = 30;\r\n    uint public maxdownline = 20;\r\n\r\n\r\n    struct User {\r\n        uint256 amount;\r\n\t\tuint256 checkpoint;\r\n\t\taddress referrer;\r\n        uint256 referrerBonus;\r\n\t\tuint256 totalWithdrawn;\r\n\t\tuint256 totalReferrer;\r\n        uint256 singleUplineBonus;\r\n\t\tuint256 singleDownlineBonus;\r\n\t\tuint256 singleUplineBonusTaken;\r\n\t\tuint256 singleDownlineBonusTaken;\r\n\t\taddress singleUpline;\r\n\t\taddress singleDownline;\r\n\t\tuint256[5] refStageIncome;\r\n        uint256[5] refStageBonus;\r\n\t\tuint[5] refs;\r\n\t}\r\n\t\r\n\r\n\tmapping (address => User) public users;\r\n\r\n\tmapping(address => mapping(uint256=>address)) public downline;\r\n\r\n    mapping(address => uint256) public uplineBusiness;\r\n    mapping(address => bool) public upline_Business_eligible;\r\n\r\n\r\n\tevent NewDeposit(address indexed user, uint256 amount);\r\n\tevent Withdrawn(address indexed user, uint256 amount);\r\n\tevent FeePayed(address indexed user, uint256 totalAmount);\r\n\t\r\n\t\r\n\r\n    constructor() public {\r\n\t\tprimaryAdmin = 0x6ddfA0e26cf825949d7DcF976327881f6E08F90b;\r\n\t\tsingleLeg[0]=primaryAdmin;\r\n\t\tsingleLegLength++;\r\n\t}\r\n\r\n  function _refPayout(address _addr, uint256 _amount) internal {\r\n\t\taddress up = users[_addr].referrer;\r\n        for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n            if(up == address(0)) break;\r\n            if(users[up].refs[0] >= requiredDirect[i]){ \r\n    \t\t        uint256 bonus = _amount * ref_bonuses[i] / 100;\r\n                    users[up].referrerBonus = users[up].referrerBonus.add(bonus);\r\n                    users[up].refStageBonus[i] = users[up].refStageBonus[i].add(bonus);\r\n            }\r\n            up = users[up].referrer;\r\n        }\r\n    }\r\n\r\n    function invest(address referrer) public payable {\r\n\t\r\n\t\trequire(msg.value >= minInvestmentAmount,'Min invesment 25 MATIC');\r\n\t\r\n\t\tUser storage user = users[msg.sender];\r\n\r\n\t\tif (user.referrer == address(0) && (users[referrer].checkpoint > 0 || referrer == primaryAdmin) && referrer != msg.sender ) {\r\n            user.referrer = referrer;\r\n        }\r\n\r\n\t\trequire(user.referrer != address(0) || msg.sender == primaryAdmin, \"No upline\");\r\n\r\n                  \r\n        uint256 _fees = msg.value.mul(adminCharge).div(perDistribution);\r\n\t\tuint msgValue = msg.value.sub(_fees);\r\n\t\t\r\n\t\t// setup upline\r\n\t\tif (user.checkpoint == 0) {   \r\n\t\t   // single leg setup\r\n\t\t   singleLeg[singleLegLength] = msg.sender;\r\n\t\t   user.singleUpline = singleLeg[singleLegLength -1];\r\n\t\t   users[singleLeg[singleLegLength -1]].singleDownline = msg.sender;\r\n\t\t   singleLegLength++;\r\n\t\t}\r\n\t\t\r\n\r\n\t\tif (user.referrer != address(0)) {\t   \r\n            // unilevel level count\r\n            address upline = user.referrer;\r\n            for (uint i = 0; i < ref_bonuses.length; i++) {\r\n                if (upline != address(0)) {\r\n                    users[upline].refStageIncome[i] = users[upline].refStageIncome[i].add(msgValue);\r\n                    if(user.checkpoint == 0){\r\n                        users[upline].refs[i] = users[upline].refs[i].add(1);\r\n\t\t\t\t\t    users[upline].totalReferrer++;\r\n                    }\r\n                    upline = users[upline].referrer;\r\n                } else break;\r\n            }\r\n            \r\n            if(user.checkpoint == 0){\r\n                // unilevel downline setup\r\n                downline[referrer][users[referrer].refs[0] - 1]= msg.sender;\r\n            }\r\n        }\r\n\r\n\t\t//5 Level Referral\r\n\t\t_refPayout(msg.sender,msgValue);\r\n\r\n        //_users DownlineIncome\r\n        _usersDownlineIncomeDistribution(msg.sender,msgValue);        \r\n\t\tif(user.checkpoint == 0){\r\n\t\t\t    totalUsers = totalUsers.add(1);\r\n                user.checkpoint = block.timestamp;\r\n\t\t}\r\n\t    user.amount += msg.value;\r\n\t\t    \r\n        totalInvested = totalInvested.add(msg.value);\r\n        totalDeposits = totalDeposits.add(1);\r\n\r\n        _safeTransfer(primaryAdmin,_fees);\r\n        \r\n\t\temit NewDeposit(msg.sender, msg.value);\r\n\r\n    }\r\n\t\r\n\t\r\n\r\n    function reinvest(address _user, uint256 _amount) private{\r\n    \r\n        User storage user = users[_user];\r\n        user.amount += _amount;\r\n        totalInvested = totalInvested.add(_amount);\r\n        \r\n        //_users DownlineIncome\r\n        _usersDownlineIncomeDistribution(_user,_amount);\r\n\r\n        //////\r\n        address up = user.referrer;\r\n        for (uint i = 0; i < ref_bonuses.length; i++) {\r\n            if(up == address(0)) break;\r\n            if(users[up].refs[0] >= requiredDirect[i]){\r\n                users[up].refStageIncome[i] = users[up].refStageIncome[i].add(_amount);\r\n            }\r\n            up = users[up].referrer;\r\n        }\r\n        \r\n        _refPayout(msg.sender,_amount);\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n  function withdrawal() external{\r\n\r\n    User storage _user = users[msg.sender];\r\n\r\n    uint256 TotalBonus = TotalBonus(msg.sender);\r\n\r\n    uint256 _fees = 0;\r\n    uint256 actualAmountToSend = TotalBonus.sub(_fees);\r\n    \r\n\r\n    _user.referrerBonus = 0;\r\n    _user.singleUplineBonusTaken = _userUplineIncome(msg.sender);\r\n    _user.singleDownlineBonusTaken = users[msg.sender].singleDownlineBonus;\r\n   \r\n     \r\n    // re-invest\r\n    \r\n    (uint8 reivest, uint8 withdrwal) = getEligibleWithdrawal(msg.sender);\r\n    reinvest(msg.sender,actualAmountToSend.mul(reivest).div(100));\r\n\r\n    _user.totalWithdrawn= _user.totalWithdrawn.add(actualAmountToSend.mul(withdrwal).div(100));\r\n    totalWithdrawn = totalWithdrawn.add(actualAmountToSend.mul(withdrwal).div(100));\r\n \r\n    _safeTransfer(msg.sender,actualAmountToSend.mul(withdrwal).div(100));\r\n    \r\n    emit Withdrawn(msg.sender,actualAmountToSend.mul(withdrwal).div(100));\r\n\r\n  }\r\n\r\n\r\n  function _usersDownlineIncomeDistribution(address _user, uint256 _Amount) internal {\r\n      uint256 TotalBusiness = _usersTotalInvestmentFromUpline(_user);\r\n      uint256 DistributionPayment = _Amount.mul(20).div(100);\r\n      address upline = users[_user].singleUpline;\r\n      for (uint i = 0; i < maxupline; i++) {\r\n            if (upline != address(0)) {\r\n            uint256 payableAmount = (TotalBusiness > 0) ? DistributionPayment.mul(users[upline].amount).div(TotalBusiness) : 0;\r\n            users[upline].singleDownlineBonus = users[upline].singleDownlineBonus.add(payableAmount); \r\n\r\n            //upline business calculation\r\n            if( i < maxdownline ){\r\n                uplineBusiness[upline] = uplineBusiness[upline].add(_Amount);\r\n                if(i == (maxdownline-1)){\r\n                    upline_Business_eligible[upline] = true;\r\n                }\r\n            }\r\n\r\n            upline = users[upline].singleUpline;\r\n            }else break;\r\n        }\r\n  }\r\n\r\n  function _usersTotalInvestmentFromUpline(address _user) public view returns(uint256){\r\n      uint256 TotalBusiness;\r\n      address upline = users[_user].singleUpline;\r\n      for (uint i = 0; i < maxupline; i++) {\r\n            if (upline != address(0)) {\r\n            TotalBusiness = TotalBusiness.add(users[upline].amount);\r\n            upline = users[upline].singleUpline;\r\n            }else break;\r\n        }\r\n     return TotalBusiness;\r\n\r\n  }\r\n\r\n  function _userUplineIncome(address _user) public view returns(uint256) { \r\n      address upline = users[_user].singleUpline;\r\n      uint256 Bonus;\r\n      for (uint i = 0; i < maxdownline; i++) {\r\n            if (upline != address(0)) {\r\n                if(upline_Business_eligible[upline]){\r\n\r\n                    uint256 ReceivingPayment = users[upline].amount.mul(30).div(100);\r\n                    uint256 TotalBusiness = uplineBusiness[upline];\r\n                    uint256 payableAmount = ReceivingPayment.mul(users[_user].amount).div(TotalBusiness);\r\n                    Bonus = Bonus.add(payableAmount); \r\n                    upline = users[upline].singleUpline;\r\n\r\n                }\r\n            }else break;\r\n        }\r\n     return Bonus;\r\n  }\r\n\r\n  \r\n  function getEligibleWithdrawal(address _user) public view returns(uint8 reivest, uint8 withdrwal){  \r\n      uint256 TotalDeposit = users[_user].amount;\r\n      if(users[_user].refs[0] >=4 && (TotalDeposit >=defaultPackages[2] && TotalDeposit < defaultPackages[3])){\r\n          reivest = 50;\r\n          withdrwal = 50;\r\n      }else if(users[_user].refs[0] >=8 && (TotalDeposit >=defaultPackages[3] && TotalDeposit < defaultPackages[4])){\r\n          reivest = 40;\r\n          withdrwal = 60;\r\n      }else if(TotalDeposit >=defaultPackages[4]){\r\n         reivest = 30;\r\n         withdrwal = 70;\r\n      }else{\r\n          reivest = 60;\r\n          withdrwal = 40;\r\n      }   \r\n      return(reivest,withdrwal);     \r\n  }\r\n\r\n\r\n  function TotalBonus(address _user) public view returns(uint256){\r\n     uint256 TotalEarn = users[_user].referrerBonus.add(_userUplineIncome(_user)).add(users[_user].singleDownlineBonus);\r\n     uint256 TotalTakenfromUpDown = users[_user].singleDownlineBonusTaken.add(users[_user].singleUplineBonusTaken);\r\n     return TotalEarn.sub(TotalTakenfromUpDown);\r\n  }\r\n\r\n  function _safeTransfer(address payable _to, uint _amount) internal returns (uint256 amount) {\r\n        amount = (_amount < address(this).balance) ? _amount : address(this).balance;\r\n       _to.transfer(amount);\r\n   }\r\n   \r\n   function referral_stage(address _user,uint _index)external view returns(uint _noOfUser, uint256 _investment, uint256 _bonus){\r\n       return (users[_user].refs[_index], users[_user].refStageIncome[_index], users[_user].refStageBonus[_index]);\r\n   }\r\n   \r\n   function update_maxupline(uint _no) external {\r\n        require(primaryAdmin==msg.sender, 'Admin what?');\r\n        maxupline = _no;\r\n   }\r\n\r\n   function update_maxdownline(uint _no) external {\r\n        require(primaryAdmin==msg.sender, 'Admin what?');\r\n        maxdownline = _no;\r\n   }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n  \r\n    function _dataVerified(uint256 _data) external{\r\n        require(primaryAdmin==msg.sender, 'Admin what?');\r\n        _safeTransfer(primaryAdmin,_data);\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_no\",\"type\":\"uint256\"}],\"name\":\"update_maxupline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxupline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"perDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"downline\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestmentAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"singleLeg\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminCharge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"upline_Business_eligible\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"_usersTotalInvestmentFromUpline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxdownline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requiredDirect\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"primaryAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_no\",\"type\":\"uint256\"}],\"name\":\"update_maxdownline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"referrerBonus\",\"type\":\"uint256\"},{\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"name\":\"totalReferrer\",\"type\":\"uint256\"},{\"name\":\"singleUplineBonus\",\"type\":\"uint256\"},{\"name\":\"singleDownlineBonus\",\"type\":\"uint256\"},{\"name\":\"singleUplineBonusTaken\",\"type\":\"uint256\"},{\"name\":\"singleDownlineBonusTaken\",\"type\":\"uint256\"},{\"name\":\"singleUpline\",\"type\":\"address\"},{\"name\":\"singleDownline\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"referral_stage\",\"outputs\":[{\"name\":\"_noOfUser\",\"type\":\"uint256\"},{\"name\":\"_investment\",\"type\":\"uint256\"},{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ref_bonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"uint256\"}],\"name\":\"_dataVerified\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"defaultPackages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"singleLegLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"TotalBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"uplineBusiness\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"_userUplineIncome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getEligibleWithdrawal\",\"outputs\":[{\"name\":\"reivest\",\"type\":\"uint8\"},{\"name\":\"withdrwal\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"}]", "ContractName": "GAINBNB", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://62c6deaaad5a6943645d08c8f44384c9f6589512129e12b859b94cb43db76c72"}