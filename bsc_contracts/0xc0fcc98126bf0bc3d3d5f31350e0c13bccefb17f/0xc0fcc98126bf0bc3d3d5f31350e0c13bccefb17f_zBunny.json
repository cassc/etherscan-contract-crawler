{"SourceCode": "//SPDX-License-Identifier: Unlicensed\r\n\r\n/**\r\n  * zBunny requirements:\r\n  *     1. 10% fee for each transaction\r\n  *         1). 4% for farming pool\r\n  *         2). 4% fee is distributed to each holding address which is include in BNB+CAKE reward pool\r\n  *         3). 1% is used to add liquidity\r\n  *         4). 1% for destruction\r\n  *     2. The reward storage method is BNB, which will be exchanged for 80% Cake + 20% BNB when claim\r\n  *     3. Anti-whale\r\n  *         Transactions (sell/buy and wallet transfer) that trade more than 0.1%(default) of the total supply will be rejected.\r\n  *         This will protect price movement as well. The transaction though can be carried out through our dAPP feature of disruptive transfers.\r\n  *         Whales who make a transfer (between 2 wallets) that is larger than 0.1% of the total supply will be charged for 1 BNB.\r\n  *         These 1 BNB go straight to the pool in the Earn BNB+CAKE feature.\r\n  *     4. Collection cycle\r\n  *         The default is 6 hours. When the address balance increases, it will be extended by 6 hours from the current time.\r\n  */\r\n\r\npragma solidity >=0.6.8;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IBEP20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by revert+ing the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an BNB balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n}\r\n\r\n\r\nlibrary Utils {\r\n    using SafeMath for uint256;\r\n\r\n    function swapTokensForEth(\r\n        address routerAddress,\r\n        address bunnyAddress,\r\n        uint256 tokenAmount\r\n    ) public {\r\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(routerAddress);\r\n\r\n        // generate the pancake pair path of token -> weth\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = bunnyAddress;\r\n        path[2] = pancakeRouter.WETH();\r\n\r\n        // make the swap swapExactTokensForETH\r\n        pancakeRouter.swapExactTokensForETH(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp + 360\r\n        );\r\n    }\r\n\r\n    // exchange tokens from BNB\r\n    function swapETHForTokens(\r\n        address routerAddress,\r\n        address recipient,\r\n        uint256 ethAmount,\r\n        address tokenAddress\r\n    ) public {\r\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(routerAddress);\r\n\r\n        // generate the pancake pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = pancakeRouter.WETH();\r\n        path[1] = tokenAddress;\r\n\r\n        // make the swap\r\n        pancakeRouter.swapExactETHForTokens{value: ethAmount}(\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(recipient),\r\n            block.timestamp + 360\r\n        );\r\n    }\r\n\r\n    // exchange tokens from other tokens\r\n    function swapExactTokensForTokens(\r\n        address routerAddress,\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address tokenOutAddress,\r\n        address to\r\n    ) public {\r\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(routerAddress);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = tokenOutAddress;\r\n\r\n        pancakeRouter.swapExactTokensForTokens(\r\n            amountIn,\r\n            amountOutMin,\r\n            path,\r\n            to,\r\n            block.timestamp + 360);\r\n    }\r\n\r\n    // add liquidity\r\n    function addLiquidity(\r\n        address routerAddress,\r\n        address tokenAddress,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        address to\r\n    ) public{\r\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(routerAddress);\r\n        pancakeRouter.addLiquidity(\r\n            address(this),\r\n            tokenAddress,\r\n            amountADesired,\r\n            amountBDesired,\r\n            0,\r\n            0,\r\n            to,\r\n            block.timestamp + 360);\r\n    }\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Leaves the contract without owner. It will not be possible to call\r\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n    *\r\n    * NOTE: Renouncing ownership will leave the contract without an owner,\r\n    * thereby removing any functionality that is only available to the owner.\r\n    */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = now + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unLock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(now > _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () public {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier isHuman() {\r\n        require(tx.origin == msg.sender, \"sorry humans only\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ncontract zBunny is Context, IBEP20, Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    // 210 billion\r\n    uint256 private _totalSupply = 21e28;\r\n    string private _name = \"zBunny\";\r\n    string private _symbol = \"zBunny\";\r\n    uint8 private _decimals = 18;\r\n    uint256 private constant BALANCE_ZERO = 0;\r\n    uint256 private constant DOUBLE = 2;\r\n\r\n    // bunny foundation address\r\n    address payable public foundationAddress = 0x894946d395d8147Fefcc3BD0cC8A42c9ef807eC4;\r\n\r\n    // pancakeSwap router address\r\n    address payable public constant routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    // BUNNY token address\r\n    address public constant BUNNYAddress = 0xC9849E6fdB743d08fAeE3E34dd2D1bc69EA11a51;\r\n\r\n    // WBNB token address\r\n    address public constant BNBAddress   = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n    // USDT token address\r\n    address public constant USDTAddress  = address(0x0055d398326f99059ff775485246999027b3197955);\r\n\r\n    // CAKE token address\r\n    address public constant CAKEAddress = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82;\r\n\r\n    // burn address\r\n    address public constant burnAddress = address(0x000000000000000000000000000000000000dEaD);\r\n\r\n    // farm pool contract address\r\n    address public farmAddress;\r\n\r\n\r\n    // every account information\r\n    struct account{\r\n        address addr;\r\n        uint256 balance;\r\n        uint256 rewardBNB;\r\n        uint256 nextAvailableClaimDate;\r\n    }\r\n    mapping(address => account) public _accounts;\r\n    address[] addresses;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    // If your address is in the mapping, and the value of ture will waive the 10% fee\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    // If your address is in the mapping, and the value of ture\uff0cyou will be allowed to make large transfers at no extra charge\r\n    mapping(address => bool) private _isExcludedFromMaxTx;\r\n\r\n    // If you transfer all your balance out, there will be no reward for holding coins at that address for 50 years\r\n    // If you want to continue to claim your prize, just change your address\r\n    mapping(address => bool) private _isExcluded;\r\n    address[] excluded;\r\n\r\n    IPancakeRouter02 public immutable pancakeRouter;\r\n    address public immutable pancakePair;\r\n\r\n    // Innovation for protocol by zBunny Team\r\n    uint256 public rewardCycleBlock = 6 hours;\r\n    \r\n    // 50 years locked\r\n    uint256 public constant FIFTY_YEARS = 50 * 365 days;\r\n\r\n    // should be 0.1% per transaction, will be set at activateContract() function\r\n    uint256 public _maxTxAmount = _totalSupply;\r\n\r\n    // if transfer amount larger than 0.1%, take 1 bnb to reward\r\n    uint256 public disruptiveCoverageFee = 1 ether;\r\n\r\n    //transfer fee 10%\r\n    uint256 public _taxFee = 10;\r\n    //4$ reward to lp pool\r\n    uint256 public _taxFee2Farm = 4;\r\n    //burned  1%\r\n    uint256 public _taxFee2Burn = 1;\r\n    // if in exclude list remove fee, and set after action\r\n    uint256 private _previousTaxFee = _taxFee;\r\n\r\n    //if reward lager than 1 bnb, take 20% to foundation\r\n    uint256 public rewardThreshold = 1 ether;\r\n\r\n    // 0.001% max tx amount will trigger swap and add liquidity\r\n    uint256 public minTokenNumberToSell = _totalSupply.mul(1).div(10000).div(10);\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n\r\n    event ClaimBNBAndCAKESuccessfully(\r\n        address recipient,\r\n        uint256 ethReceived,\r\n        uint256 nextAvailableClaimDate\r\n    );\r\n\r\n    constructor () public {\r\n        // parameters: address , balance , lastRewardBlockNum , rewardBNB , nextAvailableClaimDate\r\n        _accounts[_msgSender()] = account(_msgSender(), _totalSupply, BALANCE_ZERO, block.timestamp.add(rewardCycleBlock));\r\n\r\n        IPancakeRouter02 _pancakeRouter = IPancakeRouter02(routerAddress);\r\n        // set the rest of the contract variables\r\n        pancakeRouter = _pancakeRouter;\r\n\r\n        // Create a pancake pair for this new token\r\n        address pancakePair_ = IPancakeFactory(_pancakeRouter.factory()).createPair(address(this), BUNNYAddress);\r\n        pancakePair = pancakePair_;\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        // exclude from max tx\r\n        _isExcludedFromMaxTx[owner()] = true;\r\n        _isExcludedFromMaxTx[address(this)] = true;\r\n        _isExcludedFromMaxTx[burnAddress] = true;\r\n        _isExcludedFromMaxTx[address(0)] = true;\r\n\r\n        // exclude from reward\r\n        _excludeFromReward(pancakePair_);\r\n        _excludeFromReward(burnAddress);\r\n        _excludeFromReward(address(this));\r\n       \r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account_) public view override returns (uint256) {\r\n        return _accounts[account_].balance;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount, 0);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount, 0);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    // set farm contract address\r\n    function setFarmAddress(address farmAddress_) public onlyOwner {\r\n        farmAddress = farmAddress_;\r\n    }\r\n\r\n    // Set the address to be locked for 50 years and cannot receive income\r\n    function excludeFromReward(address account_) external onlyOwner{\r\n        _excludeFromReward(account_);\r\n    }\r\n\r\n    // total liquidity pool\r\n    function totalLiquidityPool() external view returns(uint256 swapTotalValue){\r\n        swapTotalValue = lpInUSDT();\r\n    }\r\n\r\n    function lpInUSDT() internal view returns(uint256 lpValue){\r\n        address[] memory path = new address[](3);\r\n        path[0] = BUNNYAddress;\r\n        path[1] = BNBAddress;\r\n        path[2] = USDTAddress;\r\n\r\n        //calc 1 bunny value\r\n        uint[] memory amounts = pancakeRouter.getAmountsOut(1 ether, path);\r\n        //total bunny value\r\n        lpValue = amounts[path.length - 1].mul(LPPoolValue()).div(1 ether);\r\n    }\r\n\r\n    //get lp's bunny amount by pair address\r\n    function LPPoolValue() private view returns(uint256 value){\r\n        value = IBEP20(BUNNYAddress).balanceOf(pancakePair).mul(DOUBLE);\r\n    }\r\n    \r\n    function _excludeFromReward(address account_) internal {\r\n        require(!_isExcluded[account_], \"Account is already excluded from reward\");\r\n        _isExcluded[account_] = true;\r\n        excluded.push(account_);\r\n        _accounts[account_].nextAvailableClaimDate = block.timestamp.add(FIFTY_YEARS);\r\n    }\r\n\r\n    // Add back rewards\r\n    function includeInReward(address account_) external onlyOwner {\r\n        require(_isExcluded[account_], \"Account is already included in reward\");\r\n        _isExcluded[account_] = false;\r\n        for(uint i = 0; i < excluded.length; i++) {\r\n            if(excluded[i] == account_){\r\n                excluded[i] = excluded[excluded.length - 1];\r\n                excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function isExcludedFromReward(address account_) external view returns (bool) {\r\n        return _isExcluded[account_];\r\n    }\r\n\r\n    // exclude from fee, if you are on this whitelist, you will be exempted from 10% fee.\r\n    function excludeFromFee(address account_) external onlyOwner {\r\n        require(!_isExcludedFromFee[account_], \"Account is already excluded from fee\");\r\n        _isExcludedFromFee[account_] = true;\r\n    }\r\n\r\n    // include from fee\uff0c your transfer will be charged 10% fee\r\n    function includeInFee(address account_) external onlyOwner {\r\n        require(_isExcludedFromFee[account_], \"Account is already included in fee\");\r\n        _isExcludedFromFee[account_] = false;\r\n    }\r\n\r\n    function isExcludedFromFee(address account_) external view returns (bool) {\r\n        return _isExcludedFromFee[account_];\r\n    }\r\n\r\n    // exclude from max tx, if you are on this whitelist, you will be able to make large transfers.\r\n    function excludeFromMaxTx(address address_, bool value) external onlyOwner {\r\n        _isExcludedFromMaxTx[address_] = value;\r\n    }\r\n\r\n    // include from max tx\uff0c you will not be able to make large transfers, if you make a large transfer, 1BNB will be charged.\r\n    function updateTaxFeePercent(uint256 taxFee) external onlyOwner {\r\n        _taxFee = taxFee;\r\n    }\r\n\r\n    //to receive BNB from pancakeRouter when swapping\r\n    receive() external payable {}\r\n\r\n    // remove 10% fee\r\n    function removeAllFee() private {\r\n        if (_taxFee == 0) return;\r\n        _previousTaxFee = _taxFee;\r\n        _taxFee = 0;\r\n    }\r\n\r\n    // restore 10% fee\r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n    }\r\n\r\n    // query how much BNB + CAKE rewards you will get.\r\n    function queryReward() external view returns(uint256 BNBReward, uint256 CAKEReward){\r\n        if(_accounts[_msgSender()].rewardBNB == 0) return (0,0);\r\n        BNBReward = _accounts[_msgSender()].rewardBNB.div(5);\r\n        CAKEReward = _accounts[_msgSender()].rewardBNB.sub(BNBReward);\r\n        address[] memory path = new address[](2);\r\n        path[0] = pancakeRouter.WETH();\r\n        path[1] = CAKEAddress;\r\n        uint[] memory result = pancakeRouter.getAmountsOut(CAKEReward,path);\r\n        CAKEReward = result[1];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    // If your account does not exist, a new account will be created.\r\n    function addNewAccount(address account_) private {\r\n        if(_accounts[account_].addr == address(0)){\r\n            _accounts[account_] = account(account_, BALANCE_ZERO, BALANCE_ZERO, block.timestamp.add(rewardCycleBlock));\r\n            addresses.push(account_);\r\n        }\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 value\r\n    ) private {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(from != to, \"BEP20: from and to address equals\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(amount < _totalSupply, \"Transfer amount must be less than total supply\");\r\n\r\n        // If your account does not exist, a new account will be created.\r\n        addNewAccount(to);\r\n\r\n        // Determine whether it is a large transfer\r\n        ensureMaxTxAmount(from, to, amount, value);\r\n\r\n        // swap and liquify\r\n        swapAndLiquify(from, to);\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool isTakeFee = true;\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            isTakeFee = false;\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, isTakeFee);\r\n    }\r\n\r\n    // Determine whether it is a large transfer\r\n    function ensureMaxTxAmount(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 value\r\n    ) private view{\r\n        //  default will be false         default will be false\r\n        if (!_isExcludedFromMaxTx[from] && !_isExcludedFromMaxTx[to]) {\r\n            if (value < disruptiveCoverageFee) {\r\n                // if not larger than max tx amount, it is a normal transfer action\r\n                require(amount < _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // swap and liquify\r\n    function swapAndLiquify(address from, address to) private{\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is pancake pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        contractTokenBalance = contractTokenBalance >= _maxTxAmount ? _maxTxAmount : contractTokenBalance;\r\n\r\n        bool shouldSell = contractTokenBalance >= minTokenNumberToSell;\r\n\r\n        if (\r\n            shouldSell &&\r\n            from != pancakePair &&\r\n            !(from == address(this) && to == address(pancakePair)) // swap 1 time\r\n        ) {\r\n            // to farming\r\n            uint256 farmingFeeBalance = 0;\r\n            if(farmAddress != address(0)){\r\n                farmingFeeBalance = contractTokenBalance.mul(_taxFee2Farm).div(100);\r\n                toFarm(farmingFeeBalance);\r\n            }\r\n\r\n            // to reward & swap\r\n            uint256 rewardAndSwapFeeBalance= contractTokenBalance.sub(farmingFeeBalance);\r\n            toRewardAndSwap(rewardAndSwapFeeBalance);\r\n        }\r\n    }\r\n\r\n    // 4% fee will be transfer to farming pool.\r\n    function toFarm(uint256 amount_) private {\r\n        require(farmAddress != address(0), \"Error: farmAddress cann`t equals address zero\");\r\n        Utils.swapExactTokensForTokens(\r\n            routerAddress,\r\n            amount_,\r\n            0, // accept any amount of tokens\r\n            BUNNYAddress,\r\n            farmAddress\r\n        );\r\n    }\r\n\r\n\r\n    // 4%(reward) + 1%(add liquidity) = 5%\r\n    function toRewardAndSwap(uint256 amount_) private {\r\n        // 4% BUNNY to reward\r\n        // 0.5% BUNNY and 0.5% zBunny to swap\r\n        // 4.5% * 2 = 9%\r\n        uint256 swapRate = 9;\r\n        uint256 tokenForSwapAmount = amount_.mul(swapRate).div(10);\r\n        uint256 tokenForLiquidityAmount = amount_.sub(tokenForSwapAmount);\r\n\r\n        uint256 beforeSwapBNB = address(this).balance;\r\n        // swap Token to BNB\r\n        Utils.swapTokensForEth(\r\n            routerAddress,\r\n            BUNNYAddress,\r\n            tokenForSwapAmount\r\n        );\r\n\r\n        uint256 afterSwapBNB = address(this).balance;\r\n        uint256 swapBNB = afterSwapBNB.sub(beforeSwapBNB); // 9/10\r\n\r\n        // add zBunny-Bunny liquidity\r\n        uint256 liquidityBNB = swapBNB.div(9);   // 1/10\r\n        addLiquify(tokenForLiquidityAmount, liquidityBNB);\r\n\r\n        // return the last bnb by swap\r\n        uint256 rewardBNB = swapBNB.sub(liquidityBNB);  // 8/10  4%\r\n\r\n        //refresh accounts' rewards\r\n        updateAccountRewards(rewardBNB);\r\n    }\r\n\r\n    // add liquidity\r\n    function addLiquify(uint256 tokenAmount_, uint256 liquidityBNB_) private{\r\n        // swap BNB to BUNNY\r\n        Utils.swapETHForTokens(\r\n            routerAddress,\r\n            address(this),\r\n            liquidityBNB_,\r\n            BUNNYAddress\r\n        );\r\n        \r\n        // add liquidity\r\n        uint256 liquidityBUNNY = IBEP20(BUNNYAddress).balanceOf(address(this));\r\n        Utils.addLiquidity(\r\n            routerAddress,\r\n            BUNNYAddress,\r\n            tokenAmount_,\r\n            liquidityBUNNY,\r\n            owner()\r\n        );\r\n    }\r\n\r\n    function updateAccountRewards(uint256 rewardBNB) private{\r\n        if(rewardBNB == 0)  return;\r\n\r\n        // Exclude address balances that do not distribute rewards within 50 years.\r\n        uint256 totalEffective = calculateEffectiveTotalSupply();\r\n\r\n        // distribute reward\r\n        for(uint256 i = 0; i < addresses.length; i++) {\r\n            if(_isExcluded[addresses[i]]){\r\n                continue;\r\n            }\r\n            uint256 rewardBNB2Person = _accounts[addresses[i]].balance.mul(rewardBNB).div(totalEffective);\r\n            _accounts[addresses[i]].rewardBNB = _accounts[addresses[i]].rewardBNB.add(rewardBNB2Person);\r\n        }\r\n    }\r\n\r\n    // Exclude address balances that do not distribute rewards within 50 years.\r\n    function calculateEffectiveTotalSupply() private view returns(uint256 totalEffective){\r\n        totalEffective = _totalSupply;\r\n        for(uint i = 0; i < excluded.length; i++) {\r\n            totalEffective = totalEffective.sub(_accounts[excluded[i]].balance);\r\n        }\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool isTakeFee) private {\r\n        if (!isTakeFee)  removeAllFee();\r\n\r\n        // If you transfer all your balance out, there will be no reward for holding coins at that address for 50 years\r\n        if(amount == balanceOf(sender)){\r\n\r\n            _accounts[sender].nextAvailableClaimDate = block.timestamp.add(FIFTY_YEARS);\r\n\r\n            //remove reward from this address, and distribute to other holders\r\n            updateAccountRewards(_accounts[sender].rewardBNB);\r\n            _accounts[sender].rewardBNB = 0;\r\n        }\r\n\r\n        // top up claim cycle\r\n        refreshClaimCycleAfterTransfer(recipient);\r\n\r\n        // 10% * amount = fee\r\n        uint256 fee = distributeFee(amount);\r\n\r\n        uint256 receiveAmount = amount.sub(fee);\r\n        _accounts[sender].balance = _accounts[sender].balance.sub(amount);\r\n        _accounts[recipient].balance = _accounts[recipient].balance.add(receiveAmount);\r\n\r\n        if (!isTakeFee) restoreAllFee();\r\n\r\n        emit Transfer(sender,recipient,receiveAmount);\r\n    }\r\n\r\n    // 10% fee for distribution\u3002\r\n    function distributeFee(uint256 amount) private returns(uint256 fee){\r\n        // 10% fee, and distribute\r\n        fee = amount.mul(_taxFee).div(100);\r\n        // if exclude from fee ,remove all fee\r\n        if(fee == 0) return 0;\r\n\r\n        _accounts[address(this)].balance = _accounts[address(this)].balance.add(fee);\r\n        emit Transfer(_msgSender(), address(this), fee);\r\n\r\n        // 1% burn   9% remain and swap later\r\n        uint256 fee2Burn = amount.mul(_taxFee2Burn).div(100);\r\n        _accounts[address(this)].balance = _accounts[address(this)].balance.sub(fee2Burn);\r\n        _accounts[burnAddress].balance = _accounts[burnAddress].balance.add(fee2Burn);\r\n        emit Transfer(address(this), burnAddress, fee2Burn);\r\n    }\r\n\r\n    //reset claim cycle(default 6 hours)\r\n    function refreshClaimCycleAfterTransfer(address recipient) private {\r\n        _accounts[recipient].nextAvailableClaimDate = block.timestamp.add(rewardCycleBlock);\r\n    }\r\n\r\n    // Define large transfers, if transfer amount larger than 0.1%(default), take 1 bnb to reward\r\n    function setMaxTxRate(uint256 maxTxRate) public onlyOwner {\r\n        _maxTxAmount = _totalSupply.mul(maxTxRate).div(10000);\r\n    }\r\n\r\n    // claim reward : 80% CAKE + 20% BNB\r\n    function claimReward() isHuman nonReentrant public {\r\n        require(_accounts[_msgSender()].nextAvailableClaimDate <= block.timestamp, 'Error: next available not reached');\r\n        require(_accounts[_msgSender()].rewardBNB <= address(this).balance, 'Error: out of reward');\r\n        require(_accounts[_msgSender()].rewardBNB > 0, 'Error: none of reward');\r\n\r\n        // reward threshold\r\n        uint256 reward = _accounts[_msgSender()].rewardBNB;\r\n        _accounts[_msgSender()].rewardBNB = _accounts[_msgSender()].rewardBNB.sub(reward);\r\n        \r\n        if (reward >= rewardThreshold) {\r\n            uint256 foundationAmount = reward.div(5);\r\n            (bool success, ) = address(foundationAddress).call{ value: foundationAmount }(\"\");\r\n            require(success, \"Address: unable to send value, charity may have reverted\");\r\n            reward = reward.sub(foundationAmount);\r\n        }\r\n\r\n        // reward: 80% CAKE  20% BNB\r\n        uint256 BNBReward = reward.div(5);\r\n        uint256 CAKERewardFromBNB = reward.sub(BNBReward);\r\n\r\n        // update rewardCycleBlock\r\n        refreshClaimCycleAfterTransfer(_msgSender());\r\n        emit ClaimBNBAndCAKESuccessfully(_msgSender(), reward, _accounts[_msgSender()].nextAvailableClaimDate);\r\n\r\n        // Swap CAKE to account\r\n        swapCAKE(CAKERewardFromBNB);\r\n\r\n        (bool sent,) = address(_msgSender()).call{value : BNBReward}(\"\");\r\n        require(sent, 'Error: Cannot withdraw reward');\r\n    }\r\n\r\n    // swap CAKE from BNB\r\n    function swapCAKE(uint256 amount_) private{\r\n        Utils.swapETHForTokens(\r\n            routerAddress,\r\n            _msgSender(),\r\n            amount_,\r\n            CAKEAddress\r\n        );\r\n    }\r\n\r\n    // disruptive transfer\r\n    // if transfer amount greater than max tx amount ,1 BNB will be take\r\n    function disruptiveTransfer(address recipient, uint256 amount) public payable returns (bool) {\r\n        require(amount > _maxTxAmount, \"disruptive transfer must greater than maxTxAmount.\");\r\n        _transfer(_msgSender(), recipient, amount, msg.value);\r\n        // if transfer amount greater than max tx amount ,1 BNB will distribute to every one who include in reward\r\n        updateAccountRewards(msg.value);\r\n        return true;\r\n    }\r\n\r\n    // activate contract, set initial values of necessary parameters\r\n    function activateContract() public onlyOwner {\r\n        // reward claim\r\n        rewardCycleBlock = 6 hours;\r\n\r\n        // protocol\r\n        disruptiveCoverageFee = 1 ether;\r\n\r\n        //calc max tx amount\r\n        setMaxTxRate(10);\r\n\r\n        // approve contract\r\n        _approve(address(this), address(pancakeRouter), 2 ** 256 - 1);\r\n        TransferHelper.safeApprove(pancakeRouter.WETH(), address(pancakeRouter), 2 ** 256 - 1);\r\n        TransferHelper.safeApprove(BUNNYAddress, address(pancakeRouter), 2 ** 256 - 1);\r\n    }\r\n\r\n    // update reward cycle(default 6 hours)\r\n    function updateRewardCycleBlock(uint256 newCycle_) public onlyOwner {\r\n        rewardCycleBlock = newCycle_;\r\n    }\r\n\r\n    // update foundation address\r\n    function updateFoundationAddress(address payable foundationAddress_) public onlyOwner {\r\n        foundationAddress = foundationAddress_;\r\n    }\r\n\r\n    function migrateTokentoFoundation() public onlyOwner {\r\n        removeAllFee();\r\n        _transfer(address(this), foundationAddress, balanceOf(address(this)), 0);\r\n        restoreAllFee();\r\n    }\r\n\r\n    function migrateBnbtoFoundation() public onlyOwner {\r\n        (bool success, ) = address(foundationAddress).call{ value: address(this).balance }(\"\");\r\n        require(success, \"Address: unable to send value, foundation may have reverted\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextAvailableClaimDate\",\"type\":\"uint256\"}],\"name\":\"ClaimBNBAndCAKESuccessfully\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNBAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUNNYAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAKEAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIFTY_YEARS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_accounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextAvailableClaimDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee2Burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee2Farm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disruptiveCoverageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"disruptiveTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateBnbtoFoundation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateTokentoFoundation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenNumberToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"BNBReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"CAKEReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCycleBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress_\",\"type\":\"address\"}],\"name\":\"setFarmAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxRate\",\"type\":\"uint256\"}],\"name\":\"setMaxTxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidityPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTotalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"foundationAddress_\",\"type\":\"address\"}],\"name\":\"updateFoundationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCycle_\",\"type\":\"uint256\"}],\"name\":\"updateRewardCycleBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"updateTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "zBunny", "CompilerVersion": "v0.6.8+commit.0bbfe453", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "Utils:3e046db9e752e735e29812c6ce5f16dc5666db7b", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3de06d40773f5e0fcc5f8783fae5e8d3ae64431d203d54b235c8965bb9f67b70"}