{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity 0.8.7;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File contracts/BridgeBsc.sol\r\n\r\npragma solidity 0.8.7;\r\n\r\n\r\n\r\n\r\n/** @title This bridge operates on the Binance Smart Chain blockchain. It locks BabyDoge, initiated by a user,\r\n    * and subject to a flat fee in BNB and a percentage fee in BabyDoge. Unlock is initiated through an external bot and\r\n    * processed on a different blockchain.\r\n    */\r\ncontract BridgeBsc is Ownable, ReentrancyGuard {\r\n    uint256 public nonce;\r\n    uint256 public feeReleaseThreshold = 0.1 ether;\r\n    uint256 public unlockFee = 0.0001 ether;\r\n    mapping(IERC20 => TokenConfig) private _tokenConfig;\r\n    mapping(IERC20 => mapping(address => uint256)) private _balances;\r\n    mapping(uint256 => bool) private _processedNonces;\r\n    IERC20 private _sokuToken;\r\n    IERC20 private _sutekuToken;\r\n    bool public paused = false;\r\n    address payable private _unlocker_bot;\r\n    address private _pauser_bot;\r\n    uint256 constant private DAILY_TRANSFER_INTERVAL_ONE_DAY = 86400;\r\n    uint256 private _dailyTransferNextTimestamp = block.timestamp + DAILY_TRANSFER_INTERVAL_ONE_DAY;\r\n    address private _newProposedOwner;\r\n    uint256 private _newOwnerConfirmationTimestamp = block.timestamp;\r\n\r\n    enum ErrorType {UnexpectedRequest, NoBalanceRequest, MigrateBridge}\r\n\r\n    event BridgeTransfer(\r\n        address indexed token,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 date,\r\n        uint256 nonce\r\n    );\r\n\r\n    event BridgeTokensUnlocked(\r\n        address indexed token,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 date\r\n    );\r\n\r\n    event FeesReleasedToOwner(\r\n        uint256 amount,\r\n        uint256 date\r\n    );\r\n\r\n    struct TokenConfig{\r\n        uint256 maximumTransferAmount;\r\n        uint256 collectedFees;\r\n        uint256 unlockTokenPercentageFee;\r\n        uint256 dailyLockTotal;\r\n        uint256 dailyWithdrawTotal;\r\n        uint256 dailyTransferLimit;\r\n        bool exists;\r\n    }\r\n\r\n    event UnexpectedRequest(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 date,\r\n        ErrorType indexed error\r\n    );\r\n\r\n    /** @dev Creates a cross-blockchain bridge.\r\n      * @param soku -- BEP20 token to bridge.\r\n      * @param suteku -- BEP20 token to bridge.\r\n      * @param unlockerBot -- address of account that mints/burns.\r\n      * @param pauserBot -- address of account that pauses bridge in emergencies.\r\n      */\r\n    constructor(address soku, address suteku, address payable unlockerBot, address pauserBot) {\r\n        require(soku!=address(0) && suteku!=address(0) && unlockerBot != address(0) && pauserBot!= address(0) );\r\n        _unlocker_bot = unlockerBot;\r\n        _pauser_bot = pauserBot;\r\n        _sokuToken = IERC20(soku);\r\n        _sutekuToken = IERC20(suteku);\r\n        configTokens();\r\n    }\r\n\r\n    function configTokens() internal{\r\n        _tokenConfig[_sokuToken] = TokenConfig({\r\n            maximumTransferAmount :10000000000000000000000000,\r\n            collectedFees:0,\r\n            unlockTokenPercentageFee:0,\r\n            dailyLockTotal:0,\r\n            dailyWithdrawTotal:0,\r\n            dailyTransferLimit:1000000000000000000000000000,\r\n            exists:true\r\n        });\r\n\r\n        _tokenConfig[_sutekuToken] = TokenConfig({\r\n            maximumTransferAmount:10000000000000000000000000,\r\n            collectedFees:0,\r\n            unlockTokenPercentageFee:0,\r\n            dailyLockTotal:0,\r\n            dailyWithdrawTotal:0,\r\n            dailyTransferLimit:1000000000000000000000000000,\r\n            exists:true\r\n        });\r\n    }  \r\n\r\n    modifier Pausable() {\r\n        require( !paused, \"Bridge: Paused.\");\r\n        _;\r\n    }\r\n\r\n    modifier OnlyUnlocker() {\r\n        require(msg.sender == _unlocker_bot, \"Bridge: You can't call this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier OnlyPauserAndOwner() {\r\n        require((msg.sender == _pauser_bot || msg.sender == owner()), \"Bridge: You can't call this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySokuTokens(IERC20 token) {\r\n        require(\r\n            address(token) == address(_sutekuToken) || \r\n            address(token) == address(_sokuToken), \"Bridge: Token not authorized.\");\r\n        _;\r\n    }\r\n\r\n    function resetTransferCounter(IERC20 token) internal {\r\n        _dailyTransferNextTimestamp = block.timestamp + DAILY_TRANSFER_INTERVAL_ONE_DAY;\r\n        TokenConfig storage config = _tokenConfig[token];\r\n        config.dailyLockTotal = 0;\r\n        config.dailyWithdrawTotal = 0;\r\n    }\r\n\r\n    /** @dev Locks tokens to bridge. External bot initiates unlock on other blockchain.\r\n      * @param amount -- Amount of BabyDoge to lock.\r\n      */\r\n    function lock(IERC20 token, uint256 amount) external onlySokuTokens(token) Pausable {\r\n        address sender = msg.sender;\r\n        require(_tokenConfig[token].exists == true, \"Bridge: access denied.\");\r\n        require(token.balanceOf(sender) >= amount, \"Bridge: Account has insufficient balance.\");\r\n        TokenConfig storage config = _tokenConfig[token];\r\n        require(amount <= config.maximumTransferAmount, \"Bridge: Please reduce the amount of tokens.\");\r\n\r\n        if (block.timestamp >= _dailyTransferNextTimestamp) {\r\n            resetTransferCounter(token);\r\n        }\r\n\r\n        config.dailyLockTotal = config.dailyLockTotal + amount;\r\n\r\n        if(config.dailyLockTotal > config.dailyTransferLimit) {\r\n            revert(\"Bridge: Daily transfer limit reached.\");\r\n        }\r\n\r\n        require(token.transferFrom(sender, address(this), amount), \"Bridge: Transfer failed.\");\r\n\r\n        emit BridgeTransfer(\r\n            address(token),\r\n            sender,\r\n            address(this),\r\n            amount,\r\n            block.timestamp,\r\n            nonce\r\n        );\r\n        \r\n        nonce++;\r\n    }\r\n\r\n    // Verificar limite transacao\r\n    function release(IERC20 token, address to, uint256 amount, uint256 otherChainNonce) \r\n    external OnlyUnlocker() onlySokuTokens(token) Pausable {\r\n        require(!_processedNonces[otherChainNonce], \"Bridge: Transaction processed.\");\r\n        require(to != address(0), \"Bridge: access denied.\");\r\n        TokenConfig storage config = _tokenConfig[token];\r\n        require(amount <= config.maximumTransferAmount, \"Bridge: Transfer blocked.\");\r\n        _processedNonces[otherChainNonce] = true;\r\n\r\n        _balances[token][to] = _balances[token][to] + amount; \r\n    }\r\n\r\n    function getFee() view public returns (uint256 result) {\r\n        return unlockFee;\r\n    }\r\n\r\n    function withdraw(IERC20 token) external onlySokuTokens(token) payable Pausable {\r\n        require(msg.value >= unlockFee, \"You need to spend more ETH\"); // otherwise reverts\r\n        address claimer = msg.sender;\r\n        uint256 claimerBalance = _balances[token][claimer];\r\n        require(claimerBalance > 0, \"Bridge: No balance.\");\r\n    \r\n        TokenConfig storage config = _tokenConfig[token];\r\n\r\n        if (block.timestamp >= _dailyTransferNextTimestamp) {\r\n            resetTransferCounter(token);\r\n        }\r\n\r\n        config.dailyWithdrawTotal = config.dailyWithdrawTotal + claimerBalance;\r\n\r\n        if(config.dailyWithdrawTotal > config.dailyTransferLimit) {\r\n            revert(\"Bridge: Daily transfer limit reached.\");\r\n        }\r\n\r\n        if(claimerBalance > token.balanceOf(address(this))) {\r\n            revert('Bridge: No funds in the bridge.');\r\n        }\r\n\r\n        if (claimerBalance >= config.dailyTransferLimit) {\r\n            pauseBridge(msg.sender, address(this), claimerBalance);\r\n            revert('Bridge: Paused.');\r\n        }\r\n\r\n        _balances[token][claimer] = _balances[token][claimer] - claimerBalance;\r\n\r\n        if (config.unlockTokenPercentageFee > 0) {\r\n            uint256 amountFee = (claimerBalance * config.unlockTokenPercentageFee) / 100;\r\n            claimerBalance = claimerBalance - amountFee;\r\n            config.collectedFees = config.collectedFees + amountFee;\r\n        }\r\n        \r\n        require(token.transfer(claimer, claimerBalance), \"Bridge: Transfer failed\");\r\n\r\n\r\n        if (address(this).balance >= feeReleaseThreshold) {\r\n            uint256 amountReleased = address(this).balance;\r\n            (bool success, ) = _unlocker_bot.call{value : amountReleased}(\"Releasing fee to unlocker\");\r\n            require(success, \"Transfer failed.\");\r\n            emit FeesReleasedToOwner(amountReleased, block.timestamp);\r\n        }\r\n\r\n        emit BridgeTokensUnlocked(address(token), address(this), msg.sender, claimerBalance, block.timestamp);\r\n    } \r\n\r\n    function getTokenConfig(IERC20 token) public view onlySokuTokens(token) returns (TokenConfig memory) {\r\n        return _tokenConfig[token];\r\n    }\r\n\r\n    function setTokenConfig(\r\n        IERC20 token, \r\n        uint256 maximumTransferAmount, \r\n        uint256 unlockTokenPercentageFee,\r\n        uint256 dailyTransferLimit) external onlySokuTokens(token) onlyOwner() {\r\n            TokenConfig storage config = _tokenConfig[token];   \r\n            config.maximumTransferAmount = maximumTransferAmount;\r\n            config.unlockTokenPercentageFee = unlockTokenPercentageFee;\r\n            config.dailyTransferLimit = dailyTransferLimit;\r\n    }\r\n\r\n    function resetDailyTotals(IERC20 token) external onlySokuTokens(token) onlyOwner() {\r\n        resetTransferCounter(token);\r\n    }\r\n    \r\n    function setUnlockFee(uint256 fee) external onlyOwner() {\r\n        require(fee < 0.5 ether, \"Bridge: Gotta be smaller then 0.5 bnb\") ;\r\n        unlockFee = fee;\r\n    }\r\n\r\n    function getBalance(IERC20 token) public view onlySokuTokens(token) returns (uint256 balance) {\r\n        return _balances[token][msg.sender];\r\n    }\r\n\r\n    function setTokenPercentageFee(IERC20 token, uint256 tokenFee) external onlyOwner() onlySokuTokens(token) {\r\n        require(tokenFee < 25, \"Bridge: Gotta be smaller then 25\") ;\r\n        TokenConfig storage config = _tokenConfig[token];   \r\n        require(config.exists, \"Bridge: Token not found\");\r\n        config.unlockTokenPercentageFee = tokenFee;\r\n    }\r\n\r\n    function setFeeReleaseThreshold(uint256 amount) external onlyOwner() {\r\n        require(amount > 0, \"Bridge: Can't be zero\");\r\n        feeReleaseThreshold = amount;\r\n    }\r\n\r\n    function withdrawBNB() external onlyOwner() {\r\n        uint256 amountReleased = address(this).balance;\r\n        (bool success, ) = owner().call{value : amountReleased}(\"Releasing eth to owner\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    function withdrawERC20(IERC20 token) external onlyOwner() nonReentrant {\r\n        require(address(token) != address(0), \"Bridge: Can't be zero\");\r\n        require(token.balanceOf(address(this)) >= 0, \"Bridge: Account has insufficient balance.\");\r\n        require(token.transfer(owner(), token.balanceOf(address(this))), \"Bridge: Transfer failed.\");\r\n    }\r\n\r\n    function withdrawCollectedFees(IERC20 token) external onlyOwner() onlySokuTokens(token) nonReentrant {\r\n        TokenConfig storage config = _tokenConfig[token];   \r\n        require(config.exists, \"Bridge: Token not found\");\r\n        require(token.balanceOf(address(this)) >= config.collectedFees, \"Bridge: Account has insufficient balance.\");\r\n        require(token.transfer(owner(), config.collectedFees), \"Bridge: Transfer failed.\");\r\n        config.collectedFees = 0;\r\n    }\r\n\r\n    function setUnlocker(address _unlocker) external onlyOwner {\r\n        require(_unlocker != _unlocker_bot, \"This address is already set as unlocker.\");\r\n        _unlocker_bot = payable(_unlocker);\r\n    }\r\n\r\n    function setPauser(address _pauser) external onlyOwner {\r\n        require(_pauser != _pauser_bot, \"This address is already set as pauser.\");\r\n        _pauser_bot = _pauser;\r\n    }\r\n\r\n    function setPausedState(bool state) external onlyOwner() {\r\n        paused = state;\r\n    }\r\n\r\n    function pauseBridge(address from, address to, uint256 amount) internal {\r\n        paused = true;\r\n\r\n        emit UnexpectedRequest(\r\n            from,\r\n            to,\r\n            amount,\r\n            block.timestamp,\r\n            ErrorType.UnexpectedRequest\r\n        );\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"soku\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"suteku\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"unlockerBot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauserBot\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"BridgeTokensUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"BridgeTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"FeesReleasedToOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum BridgeBsc.ErrorType\",\"name\":\"error\",\"type\":\"uint8\"}],\"name\":\"UnexpectedRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"feeReleaseThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maximumTransferAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectedFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTokenPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyLockTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyWithdrawTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyTransferLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct BridgeBsc.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"otherChainNonce\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"resetDailyTotals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setFeeReleaseThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setPausedState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"}],\"name\":\"setPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maximumTransferAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTokenPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyTransferLimit\",\"type\":\"uint256\"}],\"name\":\"setTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenFee\",\"type\":\"uint256\"}],\"name\":\"setTokenPercentageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setUnlockFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unlocker\",\"type\":\"address\"}],\"name\":\"setUnlocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawCollectedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BridgeBsc", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000e4b5ea0259eb3d66e6fcb7cc8785817f8490a53000000000000000000000000198800af50914004a9e9d19ca18c0b24587a50cf000000000000000000000000ff1b8770501a2ce0e0a2fc1ae3d0e13bf441ab1b000000000000000000000000ff1b8770501a2ce0e0a2fc1ae3d0e13bf441ab1b", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8e7b330db75cd6b3c934291deca9acb31ad8bb2683361cfebc4f5a39e03493ac"}