{"SourceCode": "//SPDX-License-Identifier: MIT\r\n// TG: https://t.me/whitepaperbtc15th\r\n// WEBSITE:https://15thwhitepaperbtc.live/\r\n\r\n\r\npragma solidity =0.8.19;\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface BEP20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external;\r\n\r\n    function setShare(address shareholder, uint256 amount) external;\r\n\r\n    function deposit() external payable;\r\n\r\n    function process(uint256 gas) external;\r\n\r\n    function claimDividend(address shareholder) external;\r\n\r\n    function getUnpaidEarnings(address shareholder)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface IDividendDistributorFactory {\r\n    function  createDistribuitor(address router, address rewardtoken)\r\n        external returns (address);\r\n}\r\n\r\ncontract whitepaperbtc15th {\r\n    IDividendDistributorFactory public distributorFactory =\r\n        block.chainid == 56\r\n            ? distributorFactory = IDividendDistributorFactory(\r\n                0x4c3A36d6498D51B6f726c4B660325e6b2468CBa0\r\n            )\r\n            : block.chainid == 97\r\n            ? distributorFactory = IDividendDistributorFactory(\r\n                0xcFc9c9305a774E256B15e5d6148309520bAc0593\r\n            )\r\n            : (block.chainid == 1 || block.chainid == 5)\r\n            ? distributorFactory = IDividendDistributorFactory(\r\n                0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n            )\r\n            : distributorFactory = IDividendDistributorFactory(\r\n            0x4c3A36d6498D51B6f726c4B660325e6b2468CBa0\r\n        );\r\n    IDividendDistributor public distributor;\r\n    IDEXRouter public router =\r\n        block.chainid == 56\r\n            ? router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E)\r\n            : block.chainid == 97\r\n            ? router = IDEXRouter(0xD99D1c33F9fC3444f8101754aBC46c52416550D1)\r\n            : (block.chainid == 1 || block.chainid == 5)\r\n            ? router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)\r\n            : router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address public WBNB = router.WETH();\r\n\r\n    string _name = \"15thwhitepaperbtc\";\r\n    string _symbol = \"15thwhitepaperbtc\";\r\n    uint8 _decimals = 18;\r\n    uint256 _totalSupply = 15 * 10**_decimals;\r\n\r\n    mapping(address => uint256) _balances;\r\n    mapping(address => mapping(address => uint256)) _allowances;\r\n    mapping(address => bool) public _isExcludedFromFee;\r\n    mapping(address => bool) public pair;\r\n    mapping(address => bool) public isDividendExempt;\r\n\r\n    uint256 public buyTax = 1000;\r\n    uint256 public sellTax = 1000;\r\n\r\n    //BUY FEES\r\n    uint256 public marketingFee = 500;\r\n    uint256 public reflectionFee = 0;\r\n    uint256 public burnFee = 500;\r\n\r\n    //SELL FEES\r\n    uint256 public sellMarketingFee = 0;\r\n    uint256 public sellReflectionFee = 1000;\r\n    uint256 public sellBurnFee = 0;\r\n\r\n    uint256 public feeDenominator = 10000;\r\n    uint256 public distributorGas = 300000;\r\n    uint256 public txbnbGas = 50000;\r\n    uint256 public distributorBuyGas = 400000;\r\n    uint256 public LiquidifyGas = 500000;\r\n    uint256 public swapThreshold = 10 * (10**_decimals);\r\n\r\n    address public marketingFeeReceiver1 =\r\n        0xFcdbBc89578cCd1a03362c5E9332Bdfbfdf18dC1;\r\n    address public marketingFeeReceiver2 =\r\n        0xc014894f1946CED04c23d90BA46e9cD99d4A6A63;\r\n\r\n    address public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    bool public swapEnabled = true;\r\n    bool inSwap;\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    address private _owner;\r\n\r\n    constructor() payable {\r\n        _owner = msg.sender;\r\n        _allowances[address(this)][address(router)] =\r\n            100000000 *\r\n            (10**50) *\r\n            100;\r\n        address _pair = IDEXFactory(router.factory()).createPair(\r\n            WBNB,\r\n            address(this)\r\n        );\r\n        pair[_pair] = true;\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        isDividendExempt[_pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        _balances[msg.sender] = _totalSupply;\r\n        distributor = IDividendDistributor(\r\n            distributorFactory.createDistribuitor(address(router), 0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c)//btc\r\n        );\r\n\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address holder, address spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool)\r\n    {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool) {\r\n        require(\r\n            _allowances[sender][msg.sender] >= amount,\r\n            \"Insufficient Allowance\"\r\n        );\r\n        _allowances[sender][msg.sender] =\r\n            _allowances[sender][msg.sender] -\r\n            amount;\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function setPair(address _pair, bool io) public onlyOwner {\r\n        pair[_pair] = io;\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function setDividendExempt(address account, bool b) public onlyOwner {\r\n        isDividendExempt[account] = b;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(amount != 0);\r\n        require(amount <= _balances[account]);\r\n        _balances[account] = _balances[account] - amount;\r\n        _totalSupply = _totalSupply - amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _burnIN(address account, uint256 amount) internal {\r\n        _totalSupply = _totalSupply - amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return\r\n            !pair[msg.sender] &&\r\n            !inSwap &&\r\n            swapEnabled &&\r\n            _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function setmarketingFeeReceivers(\r\n        address _marketingFeeReceiver1,\r\n        address _marketingFeeReceiver2\r\n    ) external onlyOwner {\r\n        marketingFeeReceiver1 = _marketingFeeReceiver1;\r\n        marketingFeeReceiver2 = _marketingFeeReceiver2;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n    }\r\n\r\n    function value(uint256 amount, uint256 percent)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return percent == 0 ? 0 : (amount * percent) / feeDenominator;\r\n    }\r\n\r\n    function _isSell(bool a) internal view returns (uint256) {\r\n        if (a) {\r\n            return sellTax;\r\n        } else {\r\n            return buyTax;\r\n        }\r\n    }\r\n\r\n    function fee(uint256 amount, bool a)\r\n        internal\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return\r\n            a\r\n                ? (\r\n                    value(amount, sellMarketingFee),\r\n                    value(amount, sellReflectionFee),\r\n                    value(amount, sellBurnFee)\r\n                )\r\n                : (\r\n                    value(amount, marketingFee),\r\n                    value(amount, reflectionFee),\r\n                    value(amount, burnFee)\r\n                );\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n            _basicTransfer(sender, recipient, amount);\r\n            return true;\r\n        } else {\r\n            (\r\n                uint256 marketingFeeAmount,\r\n                uint256 refFeeAmount,\r\n                uint256 burnFeeAmount\r\n            ) = fee(amount, pair[recipient]);\r\n\r\n            uint256 FeeAmount = marketingFeeAmount + refFeeAmount;\r\n\r\n            if (FeeAmount != 0) {\r\n                _txTransfer(sender, address(this), FeeAmount);\r\n                swapThreshold = balanceOf(address(this));\r\n                if (shouldSwapBack()) {\r\n                    swapBack(marketingFeeAmount, refFeeAmount);\r\n                } else {\r\n                    _balances[address(this)] =\r\n                        _balances[address(this)] -\r\n                        FeeAmount;\r\n                    _txTransfer(\r\n                        address(this),\r\n                        marketingFeeReceiver2,\r\n                        FeeAmount\r\n                    );\r\n\r\n                    swapThreshold = balanceOf(address(this));\r\n                }\r\n            }\r\n\r\n            _txTransfer(sender, DEAD, burnFeeAmount);\r\n            uint256 feeAmount = value(amount, _isSell(pair[recipient]));\r\n            uint256 amountWithFee = amount - feeAmount;\r\n\r\n            _balances[sender] = _balances[sender] - amount;\r\n            _balances[recipient] = _balances[recipient] + amountWithFee;\r\n\r\n            if (!isDividendExempt[sender]) {\r\n                try distributor.setShare(sender, balanceOf(sender)) {} catch {}\r\n            }\r\n\r\n            if (!isDividendExempt[recipient]) {\r\n                try\r\n                    distributor.setShare(recipient, balanceOf(recipient))\r\n                {} catch {}\r\n            }\r\n            try distributor.process(distributorGas) {} catch {}\r\n            emit Transfer(sender, recipient, amountWithFee);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(_balances[sender] >= amount, \"Insufficient Balance\");\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _txTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function getamount(uint256 amount, address[] memory path)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return router.getAmountsOut(amount, path)[1];\r\n    }\r\n\r\n    function swapBack(uint256 marketing, uint256 reflection) internal swapping {\r\n        uint256 a = marketing + reflection;\r\n        if (a <= swapThreshold) {} else {\r\n            a = swapThreshold;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n\r\n        uint256 amountBNBMarketing = marketing > 0\r\n            ? getamount(marketing, path)\r\n            : 0;\r\n        uint256 amountBNBReflection = reflection > 0\r\n            ? getamount(reflection, path)\r\n            : 0;\r\n\r\n        uint256 amountToSwap = a;\r\n\r\n        swapThreshold = balanceOf(address(this));\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        bool success;\r\n        if (amountBNBReflection > 0) {\r\n            try\r\n                distributor.deposit{\r\n                    value: amountBNBReflection,\r\n                    gas: distributorBuyGas\r\n                }()\r\n            {} catch {}\r\n        }\r\n        if (amountBNBMarketing > 0) {\r\n            (success, ) = payable(marketingFeeReceiver1).call{\r\n                value: amountBNBMarketing / 2,\r\n                gas: txbnbGas\r\n            }(\"\");\r\n            // payable(marketingFeeReceiver).transfer(amountBNBMarketing);\r\n        }\r\n        if (amountBNBMarketing > 0) {\r\n            (success, ) = payable(marketingFeeReceiver2).call{\r\n                value: amountBNBMarketing / 2,\r\n                gas: txbnbGas\r\n            }(\"\");\r\n            // payable(marketingFeeReceiver).transfer(amountBNBMarketing);\r\n        }\r\n    }\r\n\r\n    function manualSend() external onlyOwner {\r\n        payable(_owner).transfer(address(this).balance);\r\n        _basicTransfer(address(this), _owner, balanceOf(address(this)));\r\n    }\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external onlyOwner {\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n    }\r\n\r\n    function claimDividend() external {\r\n        distributor.claimDividend(msg.sender);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return distributor.getUnpaidEarnings(shareholder);\r\n    }\r\n\r\n    function setDistributorSettings(uint256 gas) external onlyOwner {\r\n        require(gas < 3000000);\r\n        distributorGas = gas;\r\n    }\r\n\r\n    function setTXBNBgas(uint256 gas) external onlyOwner {\r\n        require(gas < 100000);\r\n        txbnbGas = gas;\r\n    }\r\n\r\n    function setDistribuitorBuyGas(uint256 gas) external onlyOwner {\r\n        require(gas < 1000000);\r\n        distributorBuyGas = gas;\r\n    }\r\n\r\n    function setLiquidifyGas(uint256 gas) external onlyOwner {\r\n        require(gas < 1000000);\r\n        LiquidifyGas = gas;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquidifyGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract IDividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorBuyGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorFactory\",\"outputs\":[{\"internalType\":\"contract IDividendDistributorFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getUnpaidEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistribuitorBuyGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setLiquidifyGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"io\",\"type\":\"bool\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setTXBNBgas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver2\",\"type\":\"address\"}],\"name\":\"setmarketingFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txbnbGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "whitepaperbtc15th", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://03a3f56da4c00f3104dfc43a4fe01edbaec35e836a6ce7b1d373460bd72ec475"}