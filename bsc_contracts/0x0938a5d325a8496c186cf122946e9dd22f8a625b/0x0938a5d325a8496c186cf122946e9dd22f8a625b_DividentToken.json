{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/tokens/dividentToken/DividentToken.sol\": {\r\n      \"content\": \"// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n// pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\n// Dependency file: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\r\\n\\r\\n// pragma solidity ^0.8.0;\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\n// Dependency file: @openzeppelin/contracts/utils/Context.sol\\r\\n\\r\\n// pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    uint8 private _decimals;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(\\r\\n        address account\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(\\r\\n            currentAllowance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender] + addedValue\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(\\r\\n            currentAllowance >= subtractedValue,\\r\\n            \\\"ERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(\\r\\n            senderBalance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\\r\\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\\r\\n\\r\\n// pragma solidity ^0.8.0;\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// Dependency file: @openzeppelin/contracts/utils/math/SafeMath.sol\\r\\n\\r\\n// pragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// Dependency file: @openzeppelin/contracts/proxy/Clones.sol\\r\\n\\r\\n// pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\r\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\r\\n *\\r\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\r\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\r\\n *\\r\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\r\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\r\\n * deterministic method.\\r\\n *\\r\\n * _Available since v3.4._\\r\\n */\\r\\nlibrary Clones {\\r\\n    /**\\r\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\r\\n     *\\r\\n     * This function uses the create opcode, which should never revert.\\r\\n     */\\r\\n    function clone(address implementation) internal returns (address instance) {\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            mstore(\\r\\n                ptr,\\r\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\r\\n            )\\r\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\r\\n            mstore(\\r\\n                add(ptr, 0x28),\\r\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\r\\n            )\\r\\n            instance := create(0, ptr, 0x37)\\r\\n        }\\r\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\r\\n     *\\r\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\r\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\r\\n     * the clones cannot be deployed twice at the same address.\\r\\n     */\\r\\n    function cloneDeterministic(\\r\\n        address implementation,\\r\\n        bytes32 salt\\r\\n    ) internal returns (address instance) {\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            mstore(\\r\\n                ptr,\\r\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\r\\n            )\\r\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\r\\n            mstore(\\r\\n                add(ptr, 0x28),\\r\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\r\\n            )\\r\\n            instance := create2(0, ptr, 0x37, salt)\\r\\n        }\\r\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\r\\n     */\\r\\n    function predictDeterministicAddress(\\r\\n        address implementation,\\r\\n        bytes32 salt,\\r\\n        address deployer\\r\\n    ) internal pure returns (address predicted) {\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            mstore(\\r\\n                ptr,\\r\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\r\\n            )\\r\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\r\\n            mstore(\\r\\n                add(ptr, 0x28),\\r\\n                0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000\\r\\n            )\\r\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\r\\n            mstore(add(ptr, 0x4c), salt)\\r\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\r\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\r\\n     */\\r\\n    function predictDeterministicAddress(\\r\\n        address implementation,\\r\\n        bytes32 salt\\r\\n    ) internal view returns (address predicted) {\\r\\n        return predictDeterministicAddress(implementation, salt, address(this));\\r\\n    }\\r\\n}\\r\\n\\r\\n// Dependency file: contracts/interfaces/IUniswapV2Factory.sol\\r\\n\\r\\n// pragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\n// Dependency file: contracts/interfaces/IUniswapV2Router02.sol\\r\\n\\r\\n// pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function WETC() external pure returns (address);\\r\\n\\r\\n    function WHT() external pure returns (address);\\r\\n\\r\\n    function WROSE() external pure returns (address);\\r\\n\\r\\n    function WAVAX() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\r\\n\\r\\n    function addLiquidityAVAX(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\r\\n\\r\\n    function addLiquidityETC(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\r\\n\\r\\n    function addLiquidityROSE(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETCSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForROSESupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n// Dependency file: @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\r\\n\\r\\n// pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20Upgradeable {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\n// Dependency file: @openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\r\\n\\r\\n// pragma solidity ^0.8.0;\\r\\n\\r\\n// import \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\n// Dependency file: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\r\\n\\r\\n// pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n */\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     */\\r\\n    bool private _initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private _initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        require(\\r\\n            _initializing || !_initialized,\\r\\n            \\\"Initializable: contract is already initialized\\\"\\r\\n        );\\r\\n\\r\\n        bool isTopLevelCall = !_initializing;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n            _initialized = true;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// Dependency file: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\r\\n\\r\\n// pragma solidity ^0.8.0;\\r\\n// import \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract ContextUpgradeable is Initializable {\\r\\n    function __Context_init() internal initializer {\\r\\n        __Context_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Context_init_unchained() internal initializer {}\\r\\n\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\\r\\n// Dependency file: @openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\r\\n\\r\\n// pragma solidity ^0.8.0;\\r\\n\\r\\n// import \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20Upgradeable is\\r\\n    Initializable,\\r\\n    ContextUpgradeable,\\r\\n    IERC20Upgradeable,\\r\\n    IERC20MetadataUpgradeable\\r\\n{\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    function __ERC20_init(\\r\\n        string memory name_,\\r\\n        string memory symbol_\\r\\n    ) internal initializer {\\r\\n        __Context_init_unchained();\\r\\n        __ERC20_init_unchained(name_, symbol_);\\r\\n    }\\r\\n\\r\\n    function __ERC20_init_unchained(\\r\\n        string memory name_,\\r\\n        string memory symbol_\\r\\n    ) internal initializer {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(\\r\\n        address account\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(\\r\\n            currentAllowance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender] + addedValue\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(\\r\\n            currentAllowance >= subtractedValue,\\r\\n            \\\"ERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(\\r\\n            senderBalance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    uint256[45] private __gap;\\r\\n}\\r\\n\\r\\n// Dependency file: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\r\\n\\r\\n// pragma solidity ^0.8.0;\\r\\n\\r\\n// import \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    function __Ownable_init() internal initializer {\\r\\n        __Context_init_unchained();\\r\\n        __Ownable_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Ownable_init_unchained() internal initializer {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\\r\\n// Dependency file: contracts/interfaces/IUniswapV2Pair.sol\\r\\n\\r\\n// pragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(\\r\\n        address to\\r\\n    ) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\n// Dependency file: contracts/libs/SafeMathInt.sol\\r\\n\\r\\n// pragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title SafeMathInt\\r\\n * @dev Math operations for int256 with overflow safety checks.\\r\\n */\\r\\nlibrary SafeMathInt {\\r\\n    int256 private constant MIN_INT256 = int256(1) << 255;\\r\\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a * b;\\r\\n\\r\\n        // Detect overflow when multiplying MIN_INT256 with -1\\r\\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\\r\\n        require((b == 0) || (c / b == a));\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Division of two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // Prevent overflow when dividing MIN_INT256 by -1\\r\\n        require(b != -1 || a != MIN_INT256);\\r\\n\\r\\n        // Solidity already throws when dividing by 0.\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtracts two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a - b;\\r\\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a + b;\\r\\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts to absolute value, and fails on overflow.\\r\\n     */\\r\\n    function abs(int256 a) internal pure returns (int256) {\\r\\n        require(a != MIN_INT256);\\r\\n        return a < 0 ? -a : a;\\r\\n    }\\r\\n\\r\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\r\\n        require(a >= 0);\\r\\n        return uint256(a);\\r\\n    }\\r\\n}\\r\\n\\r\\n// Dependency file: contracts/libs/SafeMathUint.sol\\r\\n\\r\\n// pragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title SafeMathUint\\r\\n * @dev Math operations with safety checks that revert on error\\r\\n */\\r\\nlibrary SafeMathUint {\\r\\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\\r\\n        int256 b = int256(a);\\r\\n        require(b >= 0);\\r\\n        return b;\\r\\n    }\\r\\n}\\r\\n\\r\\n// Dependency file: contracts/tokens/IterableMapping.sol\\r\\n\\r\\n// pragma solidity 0.8.17;\\r\\n\\r\\nlibrary IterableMapping {\\r\\n    // Iterable mapping from address to uint;\\r\\n    struct Map {\\r\\n        address[] keys;\\r\\n        mapping(address => uint256) values;\\r\\n        mapping(address => uint256) indexOf;\\r\\n        mapping(address => bool) inserted;\\r\\n    }\\r\\n\\r\\n    function get(Map storage map, address key) public view returns (uint256) {\\r\\n        return map.values[key];\\r\\n    }\\r\\n\\r\\n    function getIndexOfKey(\\r\\n        Map storage map,\\r\\n        address key\\r\\n    ) public view returns (int256) {\\r\\n        if (!map.inserted[key]) {\\r\\n            return -1;\\r\\n        }\\r\\n        return int256(map.indexOf[key]);\\r\\n    }\\r\\n\\r\\n    function getKeyAtIndex(\\r\\n        Map storage map,\\r\\n        uint256 index\\r\\n    ) public view returns (address) {\\r\\n        return map.keys[index];\\r\\n    }\\r\\n\\r\\n    function size(Map storage map) public view returns (uint256) {\\r\\n        return map.keys.length;\\r\\n    }\\r\\n\\r\\n    function set(Map storage map, address key, uint256 val) public {\\r\\n        if (map.inserted[key]) {\\r\\n            map.values[key] = val;\\r\\n        } else {\\r\\n            map.inserted[key] = true;\\r\\n            map.values[key] = val;\\r\\n            map.indexOf[key] = map.keys.length;\\r\\n            map.keys.push(key);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function remove(Map storage map, address key) public {\\r\\n        if (!map.inserted[key]) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        delete map.inserted[key];\\r\\n        delete map.values[key];\\r\\n\\r\\n        uint256 index = map.indexOf[key];\\r\\n        uint256 lastIndex = map.keys.length - 1;\\r\\n        address lastKey = map.keys[lastIndex];\\r\\n\\r\\n        map.indexOf[lastKey] = index;\\r\\n        delete map.indexOf[key];\\r\\n\\r\\n        map.keys[index] = lastKey;\\r\\n        map.keys.pop();\\r\\n    }\\r\\n}\\r\\n\\r\\n// Dependency file: contracts/tokens/DividendTracker.sol\\r\\n\\r\\n// pragma solidity 0.8.17;\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n// import \\\"contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\n// import \\\"contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\n// import \\\"contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\n// import \\\"contracts/libs/SafeMathInt.sol\\\";\\r\\n// import \\\"contracts/libs/SafeMathUint.sol\\\";\\r\\n// import \\\"contracts/tokens/IterableMapping.sol\\\";\\r\\n\\r\\n/// @title Dividend-Paying Token Interface\\r\\n/// @author Roger Wu (https://github.com/roger-wu)\\r\\n/// @dev An interface for a dividend-paying token contract.\\r\\ninterface DividendPayingTokenInterface {\\r\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n    /// @param _owner The address of a token holder.\\r\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n    function dividendOf(address _owner) external view returns (uint256);\\r\\n\\r\\n    /// @notice Withdraws the ether distributed to the sender.\\r\\n    /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\\r\\n    ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\\r\\n    function withdrawDividend() external;\\r\\n\\r\\n    /// @dev This event MUST emit when ether is distributed to token holders.\\r\\n    /// @param from The address which sends ether to this contract.\\r\\n    /// @param weiAmount The amount of distributed ether in wei.\\r\\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\\r\\n\\r\\n    /// @dev This event MUST emit when an address withdraws their dividend.\\r\\n    /// @param to The address which withdraws ether from this contract.\\r\\n    /// @param weiAmount The amount of withdrawn ether in wei.\\r\\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\\r\\n}\\r\\n\\r\\n/// @title Dividend-Paying Token Optional Interface\\r\\n/// @author Roger Wu (https://github.com/roger-wu)\\r\\n/// @dev OPTIONAL functions for a dividend-paying token contract.\\r\\ninterface DividendPayingTokenOptionalInterface {\\r\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n    /// @param _owner The address of a token holder.\\r\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n    function withdrawableDividendOf(\\r\\n        address _owner\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\\r\\n    /// @param _owner The address of a token holder.\\r\\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\\r\\n    function withdrawnDividendOf(\\r\\n        address _owner\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /// @notice View the amount of dividend in wei that an address has earned in total.\\r\\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\r\\n    /// @param _owner The address of a token holder.\\r\\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\\r\\n    function accumulativeDividendOf(\\r\\n        address _owner\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\\r\\n/// @title Dividend-Paying Token\\r\\n/// @author Roger Wu (https://github.com/roger-wu)\\r\\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute ether\\r\\n///  to token holders as dividends and allows token holders to withdraw their dividends.\\r\\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\\r\\ncontract DividendPayingToken is\\r\\n    ERC20Upgradeable,\\r\\n    OwnableUpgradeable,\\r\\n    DividendPayingTokenInterface,\\r\\n    DividendPayingTokenOptionalInterface\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using SafeMathUint for uint256;\\r\\n    using SafeMathInt for int256;\\r\\n\\r\\n    address public rewardToken;\\r\\n\\r\\n    // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\\r\\n    // For more discussion about choosing the value of `magnitude`,\\r\\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\\r\\n    uint256 internal constant magnitude = 2 ** 128;\\r\\n\\r\\n    uint256 internal magnifiedDividendPerShare;\\r\\n\\r\\n    // About dividendCorrection:\\r\\n    // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\\r\\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\\r\\n    // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\\r\\n    //   `dividendOf(_user)` should not be changed,\\r\\n    //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\\r\\n    // To keep the `dividendOf(_user)` unchanged, we add a correction term:\\r\\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\\r\\n    //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\\r\\n    //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\\r\\n    // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\\r\\n    mapping(address => int256) internal magnifiedDividendCorrections;\\r\\n    mapping(address => uint256) internal withdrawnDividends;\\r\\n\\r\\n    uint256 public totalDividendsDistributed;\\r\\n\\r\\n    function __DividendPayingToken_init(\\r\\n        address _rewardToken,\\r\\n        string memory _name,\\r\\n        string memory _symbol\\r\\n    ) internal initializer {\\r\\n        __Ownable_init();\\r\\n        __ERC20_init(_name, _symbol);\\r\\n        rewardToken = _rewardToken;\\r\\n    }\\r\\n\\r\\n    function distributeCAKEDividends(uint256 amount) public onlyOwner {\\r\\n        require(totalSupply() > 0);\\r\\n\\r\\n        if (amount > 0) {\\r\\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\\r\\n                (amount).mul(magnitude) / totalSupply()\\r\\n            );\\r\\n            emit DividendsDistributed(msg.sender, amount);\\r\\n\\r\\n            totalDividendsDistributed = totalDividendsDistributed.add(amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraws the ether distributed to the sender.\\r\\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\r\\n    function withdrawDividend() public virtual override {\\r\\n        _withdrawDividendOfUser(payable(msg.sender));\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraws the ether distributed to the sender.\\r\\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\r\\n    function _withdrawDividendOfUser(\\r\\n        address payable user\\r\\n    ) internal returns (uint256) {\\r\\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\\r\\n        if (_withdrawableDividend > 0) {\\r\\n            withdrawnDividends[user] = withdrawnDividends[user].add(\\r\\n                _withdrawableDividend\\r\\n            );\\r\\n            emit DividendWithdrawn(user, _withdrawableDividend);\\r\\n            bool success = IERC20(rewardToken).transfer(\\r\\n                user,\\r\\n                _withdrawableDividend\\r\\n            );\\r\\n\\r\\n            if (!success) {\\r\\n                withdrawnDividends[user] = withdrawnDividends[user].sub(\\r\\n                    _withdrawableDividend\\r\\n                );\\r\\n                return 0;\\r\\n            }\\r\\n\\r\\n            return _withdrawableDividend;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n    /// @param _owner The address of a token holder.\\r\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n    function dividendOf(address _owner) public view override returns (uint256) {\\r\\n        return withdrawableDividendOf(_owner);\\r\\n    }\\r\\n\\r\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n    /// @param _owner The address of a token holder.\\r\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n    function withdrawableDividendOf(\\r\\n        address _owner\\r\\n    ) public view override returns (uint256) {\\r\\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\\r\\n    }\\r\\n\\r\\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\\r\\n    /// @param _owner The address of a token holder.\\r\\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\\r\\n    function withdrawnDividendOf(\\r\\n        address _owner\\r\\n    ) public view override returns (uint256) {\\r\\n        return withdrawnDividends[_owner];\\r\\n    }\\r\\n\\r\\n    /// @notice View the amount of dividend in wei that an address has earned in total.\\r\\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\r\\n    /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\\r\\n    /// @param _owner The address of a token holder.\\r\\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\\r\\n    function accumulativeDividendOf(\\r\\n        address _owner\\r\\n    ) public view override returns (uint256) {\\r\\n        return\\r\\n            magnifiedDividendPerShare\\r\\n                .mul(balanceOf(_owner))\\r\\n                .toInt256Safe()\\r\\n                .add(magnifiedDividendCorrections[_owner])\\r\\n                .toUint256Safe() / magnitude;\\r\\n    }\\r\\n\\r\\n    /// @dev Internal function that transfer tokens from one address to another.\\r\\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\\r\\n    /// @param from The address to transfer from.\\r\\n    /// @param to The address to transfer to.\\r\\n    /// @param value The amount to be transferred.\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal virtual override {\\r\\n        require(false);\\r\\n\\r\\n        int256 _magCorrection = magnifiedDividendPerShare\\r\\n            .mul(value)\\r\\n            .toInt256Safe();\\r\\n        magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from]\\r\\n            .add(_magCorrection);\\r\\n        magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(\\r\\n            _magCorrection\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Internal function that mints tokens to an account.\\r\\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\\r\\n    /// @param account The account that will receive the created tokens.\\r\\n    /// @param value The amount that will be created.\\r\\n    function _mint(address account, uint256 value) internal override {\\r\\n        super._mint(account, value);\\r\\n\\r\\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\\r\\n            account\\r\\n        ].sub((magnifiedDividendPerShare.mul(value)).toInt256Safe());\\r\\n    }\\r\\n\\r\\n    /// @dev Internal function that burns an amount of the token of a given account.\\r\\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\\r\\n    /// @param account The account whose tokens will be burnt.\\r\\n    /// @param value The amount that will be burnt.\\r\\n    function _burn(address account, uint256 value) internal override {\\r\\n        super._burn(account, value);\\r\\n\\r\\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\\r\\n            account\\r\\n        ].add((magnifiedDividendPerShare.mul(value)).toInt256Safe());\\r\\n    }\\r\\n\\r\\n    function _setBalance(address account, uint256 newBalance) internal {\\r\\n        uint256 currentBalance = balanceOf(account);\\r\\n\\r\\n        if (newBalance > currentBalance) {\\r\\n            uint256 mintAmount = newBalance.sub(currentBalance);\\r\\n            _mint(account, mintAmount);\\r\\n        } else if (newBalance < currentBalance) {\\r\\n            uint256 burnAmount = currentBalance.sub(newBalance);\\r\\n            _burn(account, burnAmount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract DividendTracker is OwnableUpgradeable, DividendPayingToken {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeMathInt for int256;\\r\\n    using IterableMapping for IterableMapping.Map;\\r\\n\\r\\n    IterableMapping.Map private tokenHoldersMap;\\r\\n    uint256 public lastProcessedIndex;\\r\\n\\r\\n    mapping(address => bool) public excludedFromDividends;\\r\\n\\r\\n    mapping(address => uint256) public lastClaimTimes;\\r\\n\\r\\n    uint256 public claimWait;\\r\\n    uint256 public minimumTokenBalanceForDividends;\\r\\n\\r\\n    event ExcludeFromDividends(address indexed account);\\r\\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\r\\n\\r\\n    event Claim(\\r\\n        address indexed account,\\r\\n        uint256 amount,\\r\\n        bool indexed automatic\\r\\n    );\\r\\n\\r\\n    function initialize(\\r\\n        address rewardToken_,\\r\\n        uint256 minimumTokenBalanceForDividends_\\r\\n    ) external initializer {\\r\\n        DividendPayingToken.__DividendPayingToken_init(\\r\\n            rewardToken_,\\r\\n            \\\"DividendTracker\\\",\\r\\n            \\\"DividendTracker\\\"\\r\\n        );\\r\\n        claimWait = 3600;\\r\\n        minimumTokenBalanceForDividends = minimumTokenBalanceForDividends_;\\r\\n    }\\r\\n\\r\\n    function _transfer(address, address, uint256) internal pure override {\\r\\n        require(false, \\\"DividendTracker transfers are not allowed\\\");\\r\\n    }\\r\\n\\r\\n    function withdrawDividend() public pure override {\\r\\n        require(false, \\\"DividendTracker withdrawDividend is disabled.\\\");\\r\\n    }\\r\\n\\r\\n    function excludeFromDividends(address account) external onlyOwner {\\r\\n        require(!excludedFromDividends[account]);\\r\\n        excludedFromDividends[account] = true;\\r\\n\\r\\n        _setBalance(account, 0);\\r\\n        tokenHoldersMap.remove(account);\\r\\n\\r\\n        emit ExcludeFromDividends(account);\\r\\n    }\\r\\n\\r\\n    function isExcludedFromDividends(\\r\\n        address account\\r\\n    ) public view returns (bool) {\\r\\n        return excludedFromDividends[account];\\r\\n    }\\r\\n\\r\\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\\r\\n        require(\\r\\n            newClaimWait >= 3600 && newClaimWait <= 86400,\\r\\n            \\\"ClaimWait must be between 1 to 24 hours\\\"\\r\\n        );\\r\\n        require(\\r\\n            newClaimWait != claimWait,\\r\\n            \\\"Cannot update newClaimWait to the same value\\\"\\r\\n        );\\r\\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\\r\\n        claimWait = newClaimWait;\\r\\n    }\\r\\n\\r\\n    function updateMinimumTokenBalanceForDividends(\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        minimumTokenBalanceForDividends = amount;\\r\\n    }\\r\\n\\r\\n    function getLastProcessedIndex() external view returns (uint256) {\\r\\n        return lastProcessedIndex;\\r\\n    }\\r\\n\\r\\n    function getNumberOfTokenHolders() external view returns (uint256) {\\r\\n        return tokenHoldersMap.keys.length;\\r\\n    }\\r\\n\\r\\n    function getAccount(\\r\\n        address _account\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            address account,\\r\\n            int256 index,\\r\\n            int256 iterationsUntilProcessed,\\r\\n            uint256 withdrawableDividends,\\r\\n            uint256 totalDividends,\\r\\n            uint256 lastClaimTime,\\r\\n            uint256 nextClaimTime,\\r\\n            uint256 secondsUntilAutoClaimAvailable\\r\\n        )\\r\\n    {\\r\\n        account = _account;\\r\\n\\r\\n        index = tokenHoldersMap.getIndexOfKey(account);\\r\\n\\r\\n        iterationsUntilProcessed = -1;\\r\\n\\r\\n        if (index >= 0) {\\r\\n            if (uint256(index) > lastProcessedIndex) {\\r\\n                iterationsUntilProcessed = index.sub(\\r\\n                    int256(lastProcessedIndex)\\r\\n                );\\r\\n            } else {\\r\\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length >\\r\\n                    lastProcessedIndex\\r\\n                    ? tokenHoldersMap.keys.length.sub(lastProcessedIndex)\\r\\n                    : 0;\\r\\n\\r\\n                iterationsUntilProcessed = index.add(\\r\\n                    int256(processesUntilEndOfArray)\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        withdrawableDividends = withdrawableDividendOf(account);\\r\\n        totalDividends = accumulativeDividendOf(account);\\r\\n\\r\\n        lastClaimTime = lastClaimTimes[account];\\r\\n\\r\\n        nextClaimTime = lastClaimTime > 0 ? lastClaimTime.add(claimWait) : 0;\\r\\n\\r\\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp\\r\\n            ? nextClaimTime.sub(block.timestamp)\\r\\n            : 0;\\r\\n    }\\r\\n\\r\\n    function getAccountAtIndex(\\r\\n        uint256 index\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            int256,\\r\\n            int256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        if (index >= tokenHoldersMap.size()) {\\r\\n            return (address(0), -1, -1, 0, 0, 0, 0, 0);\\r\\n        }\\r\\n\\r\\n        address account = tokenHoldersMap.getKeyAtIndex(index);\\r\\n\\r\\n        return getAccount(account);\\r\\n    }\\r\\n\\r\\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\\r\\n        if (lastClaimTime > block.timestamp) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        return block.timestamp.sub(lastClaimTime) >= claimWait;\\r\\n    }\\r\\n\\r\\n    function setBalance(\\r\\n        address payable account,\\r\\n        uint256 newBalance\\r\\n    ) external onlyOwner {\\r\\n        if (excludedFromDividends[account]) {\\r\\n            return;\\r\\n        }\\r\\n        if (newBalance >= minimumTokenBalanceForDividends) {\\r\\n            _setBalance(account, newBalance);\\r\\n            tokenHoldersMap.set(account, newBalance);\\r\\n        } else {\\r\\n            _setBalance(account, 0);\\r\\n            tokenHoldersMap.remove(account);\\r\\n        }\\r\\n        processAccount(account, true);\\r\\n    }\\r\\n\\r\\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\\r\\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\\r\\n\\r\\n        if (numberOfTokenHolders == 0) {\\r\\n            return (0, 0, lastProcessedIndex);\\r\\n        }\\r\\n\\r\\n        uint256 _lastProcessedIndex = lastProcessedIndex;\\r\\n\\r\\n        uint256 gasUsed = 0;\\r\\n\\r\\n        uint256 gasLeft = gasleft();\\r\\n\\r\\n        uint256 iterations = 0;\\r\\n        uint256 claims = 0;\\r\\n\\r\\n        while (gasUsed < gas && iterations < numberOfTokenHolders) {\\r\\n            _lastProcessedIndex++;\\r\\n\\r\\n            if (_lastProcessedIndex >= tokenHoldersMap.keys.length) {\\r\\n                _lastProcessedIndex = 0;\\r\\n            }\\r\\n\\r\\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\\r\\n\\r\\n            if (canAutoClaim(lastClaimTimes[account])) {\\r\\n                if (processAccount(payable(account), true)) {\\r\\n                    claims++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            iterations++;\\r\\n\\r\\n            uint256 newGasLeft = gasleft();\\r\\n\\r\\n            if (gasLeft > newGasLeft) {\\r\\n                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\\r\\n            }\\r\\n\\r\\n            gasLeft = newGasLeft;\\r\\n        }\\r\\n\\r\\n        lastProcessedIndex = _lastProcessedIndex;\\r\\n\\r\\n        return (iterations, claims, lastProcessedIndex);\\r\\n    }\\r\\n\\r\\n    function processAccount(\\r\\n        address payable account,\\r\\n        bool automatic\\r\\n    ) public onlyOwner returns (bool) {\\r\\n        uint256 amount = _withdrawDividendOfUser(account);\\r\\n\\r\\n        if (amount > 0) {\\r\\n            lastClaimTimes[account] = block.timestamp;\\r\\n            emit Claim(account, amount, automatic);\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\\r\\n// Dependency file: contracts/BaseToken.sol\\r\\n\\r\\n// pragma solidity 0.8.17;\\r\\n\\r\\nenum TokenType {\\r\\n    standard,\\r\\n    liquidityGenerator,\\r\\n    dividentToken\\r\\n}\\r\\n\\r\\nabstract contract BaseToken {\\r\\n    event TokenCreated(\\r\\n        address indexed owner,\\r\\n        address indexed token,\\r\\n        TokenType tokenType,\\r\\n        uint256 version\\r\\n    );\\r\\n}\\r\\n\\r\\n// Root file: contracts/tokens/DividentToken.sol\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ncontract DividentToken is ERC20, Ownable, BaseToken {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 public constant VERSION = 2;\\r\\n\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n    address public uniswapV2Pair;\\r\\n\\r\\n    bool private swapping;\\r\\n\\r\\n    DividendTracker public dividendTracker;\\r\\n\\r\\n    address public rewardToken;\\r\\n\\r\\n    uint256 public swapTokensAtAmount;\\r\\n\\r\\n    uint256 public tokenRewardsFee;\\r\\n    uint256 public liquidityFee;\\r\\n    uint256 public marketingFee;\\r\\n    uint256 public totalFees;\\r\\n\\r\\n    address public _marketingWalletAddress;\\r\\n\\r\\n    uint256 public gasForProcessing;\\r\\n\\r\\n    // exlcude from fees and max transaction amount\\r\\n    mapping(address => bool) private _isExcludedFromFees;\\r\\n\\r\\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\\r\\n    // could be subject to a maximum transfer amount\\r\\n    mapping(address => bool) public automatedMarketMakerPairs;\\r\\n\\r\\n    event ExcludeFromFees(address indexed account);\\r\\n    event ExcludeMultipleAccountsFromFees(address[] accounts);\\r\\n\\r\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n\\r\\n    event GasForProcessingUpdated(\\r\\n        uint256 indexed newValue,\\r\\n        uint256 indexed oldValue\\r\\n    );\\r\\n\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n\\r\\n    event SendDividends(uint256 tokensSwapped, uint256 amount);\\r\\n\\r\\n    event ProcessedDividendTracker(\\r\\n        uint256 iterations,\\r\\n        uint256 claims,\\r\\n        uint256 lastProcessedIndex,\\r\\n        bool indexed automatic,\\r\\n        uint256 gas,\\r\\n        address indexed processor\\r\\n    );\\r\\n\\r\\n    event swapedETHForTokens(uint256 eth, uint256 tokens, address receiver);\\r\\n\\r\\n    event addLiquidityETH(uint256 eth, uint256 tokens, address receiver);\\r\\n\\r\\n    event transferTokens(uint256 _value, address receiver);\\r\\n\\r\\n    event rejected(string reason);\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint256 totalSupply_,\\r\\n        uint8 decimal_,\\r\\n        address dividendTrackerAddress_,\\r\\n        address[3] memory addrs, // reward, router, marketing wallet\\r\\n        uint256[3] memory feeSettings, // rewards, liquidity, marketing\\r\\n        uint256 minimumTokenBalanceForDividends_,\\r\\n        address serviceFeeReceiver_,\\r\\n        uint256 serviceFee_\\r\\n    ) payable ERC20(name_, symbol_, decimal_) {\\r\\n        rewardToken = addrs[0];\\r\\n        _marketingWalletAddress = addrs[2];\\r\\n\\r\\n        tokenRewardsFee = feeSettings[0];\\r\\n        liquidityFee = feeSettings[1];\\r\\n        marketingFee = feeSettings[2];\\r\\n        totalFees = tokenRewardsFee.add(liquidityFee).add(marketingFee);\\r\\n        require(totalFees <= 25, \\\"Total fee is over 25%\\\");\\r\\n        swapTokensAtAmount = totalSupply_.div(1000); // 0.1%\\r\\n        gasForProcessing = 300000;\\r\\n\\r\\n        dividendTracker = DividendTracker(\\r\\n            payable(Clones.clone(dividendTrackerAddress_))\\r\\n        );\\r\\n        dividendTracker.initialize(\\r\\n            rewardToken,\\r\\n            minimumTokenBalanceForDividends_\\r\\n        );\\r\\n\\r\\n        uniswapV2Router = IUniswapV2Router02(addrs[1]);\\r\\n\\r\\n        //Create a pair for this new token\\r\\n        address nativeCurrency = address(0);\\r\\n        if (block.chainid == 61) {\\r\\n            //etc\\r\\n            nativeCurrency = uniswapV2Router.WETC();\\r\\n        } else if (block.chainid == 128) {\\r\\n            //heco chain\\r\\n            nativeCurrency = uniswapV2Router.WHT();\\r\\n        } else if (block.chainid == 42262) {\\r\\n            //oasis\\r\\n            nativeCurrency = uniswapV2Router.WROSE();\\r\\n        } else if (block.chainid == 43114 || block.chainid == 43113) {\\r\\n            //avalance\\r\\n            nativeCurrency = uniswapV2Router.WAVAX();\\r\\n        } else {\\r\\n            nativeCurrency = uniswapV2Router.WETH();\\r\\n        }\\r\\n\\r\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\\r\\n            address(this),\\r\\n            nativeCurrency\\r\\n        );\\r\\n\\r\\n        if (block.chainid == 56) {\\r\\n            emit transferTokens(address(this).balance, address(0));\\r\\n            address coinscopeAddress = address(\\r\\n                0xD41C4805A9A3128f9F7A7074Da25965371Ba50d5\\r\\n            );\\r\\n\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = nativeCurrency;\\r\\n            path[1] = coinscopeAddress;\\r\\n\\r\\n            uint256 swapAmount = (serviceFee_ * 5) / 100;\\r\\n\\r\\n            try\\r\\n                uniswapV2Router.swapExactETHForTokens{value: swapAmount}(\\r\\n                    0,\\r\\n                    path,\\r\\n                    address(this),\\r\\n                    block.timestamp\\r\\n                )\\r\\n            {\\r\\n                IERC20 coinscopeToken = IERC20(coinscopeAddress);\\r\\n                uint256 coinscopeBalance = coinscopeToken.balanceOf(\\r\\n                    address(this)\\r\\n                );\\r\\n                emit swapedETHForTokens(\\r\\n                    swapAmount,\\r\\n                    coinscopeBalance,\\r\\n                    address(this)\\r\\n                );\\r\\n                if (coinscopeBalance > 0) {\\r\\n                    uint256 ownerTokens = coinscopeBalance / 100;\\r\\n                    uint256 contractBalance = address(this).balance;\\r\\n                    coinscopeToken.transfer(msg.sender, ownerTokens);\\r\\n                    emit transferTokens(ownerTokens, msg.sender);\\r\\n                    coinscopeBalance = coinscopeToken.balanceOf(address(this));\\r\\n                    coinscopeToken.approve(\\r\\n                        address(uniswapV2Router),\\r\\n                        coinscopeBalance\\r\\n                    );\\r\\n                    address feeReceiver = serviceFeeReceiver_;\\r\\n                    try\\r\\n                        uniswapV2Router.addLiquidityETH{\\r\\n                            value: address(this).balance\\r\\n                        }(\\r\\n                            coinscopeAddress,\\r\\n                            coinscopeBalance,\\r\\n                            0, // slippage is unavoidable\\r\\n                            0, // slippage is unavoidable\\r\\n                            feeReceiver,\\r\\n                            block.timestamp\\r\\n                        )\\r\\n                    {\\r\\n                        emit addLiquidityETH(\\r\\n                            contractBalance,\\r\\n                            coinscopeBalance,\\r\\n                            feeReceiver\\r\\n                        );\\r\\n                    } catch {\\r\\n                        emit rejected(\\\"AddLiquidityETH Rejected\\\");\\r\\n                    }\\r\\n                }\\r\\n            } catch {\\r\\n                emit rejected(\\\"SwapExactETHForTokens Rejected\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _setAutomatedMarketMakerPair(uniswapV2Pair, true);\\r\\n\\r\\n        // exclude from receiving dividends\\r\\n        dividendTracker.excludeFromDividends(address(dividendTracker));\\r\\n        dividendTracker.excludeFromDividends(address(this));\\r\\n        dividendTracker.excludeFromDividends(msg.sender);\\r\\n        dividendTracker.excludeFromDividends(address(0xdead));\\r\\n        dividendTracker.excludeFromDividends(address(uniswapV2Router));\\r\\n        // exclude from paying fees or having max transaction amount\\r\\n        _isExcludedFromFees[msg.sender] = true;\\r\\n        _isExcludedFromFees[_marketingWalletAddress] = true;\\r\\n        _isExcludedFromFees[address(this)] = true;\\r\\n\\r\\n        _mint(msg.sender, totalSupply_);\\r\\n\\r\\n        emit TokenCreated(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            TokenType.dividentToken,\\r\\n            VERSION\\r\\n        );\\r\\n\\r\\n        payable(serviceFeeReceiver_).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function setSwapTokensAtAmount(uint256 amount) external onlyOwner {\\r\\n        require(\\r\\n            amount > totalSupply() / 10 ** 5,\\r\\n            \\\"Amount must be greater than 0.001% of total supply\\\"\\r\\n        );\\r\\n        swapTokensAtAmount = amount;\\r\\n    }\\r\\n\\r\\n    function excludeFromFees(address account) external onlyOwner {\\r\\n        require(!_isExcludedFromFees[account], \\\"Account is already excluded\\\");\\r\\n        _isExcludedFromFees[account] = true;\\r\\n\\r\\n        emit ExcludeFromFees(account);\\r\\n    }\\r\\n\\r\\n    function excludeMultipleAccountsFromFees(\\r\\n        address[] calldata accounts\\r\\n    ) external onlyOwner {\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            _isExcludedFromFees[accounts[i]] = true;\\r\\n        }\\r\\n\\r\\n        emit ExcludeMultipleAccountsFromFees(accounts);\\r\\n    }\\r\\n\\r\\n    function setMarketingWallet(address payable wallet) external onlyOwner {\\r\\n        require(wallet != address(0), \\\"Can not be address(0).\\\");\\r\\n        _marketingWalletAddress = wallet;\\r\\n    }\\r\\n\\r\\n    function setTokenRewardsFee(uint256 value) external onlyOwner {\\r\\n        tokenRewardsFee = value;\\r\\n        totalFees = tokenRewardsFee.add(liquidityFee).add(marketingFee);\\r\\n        require(totalFees <= 25, \\\"Total fees can not be over 25%.\\\");\\r\\n    }\\r\\n\\r\\n    function setLiquiditFee(uint256 value) external onlyOwner {\\r\\n        liquidityFee = value;\\r\\n        totalFees = tokenRewardsFee.add(liquidityFee).add(marketingFee);\\r\\n        require(totalFees <= 25, \\\"Total fees can not be over 25%.\\\");\\r\\n    }\\r\\n\\r\\n    function setMarketingFee(uint256 value) external onlyOwner {\\r\\n        marketingFee = value;\\r\\n        totalFees = tokenRewardsFee.add(liquidityFee).add(marketingFee);\\r\\n        require(totalFees <= 25, \\\"Total fees can not be over 25%.\\\");\\r\\n    }\\r\\n\\r\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n        require(\\r\\n            automatedMarketMakerPairs[pair] != value,\\r\\n            \\\"Pair is already set to this address.\\\"\\r\\n        );\\r\\n        automatedMarketMakerPairs[pair] = value;\\r\\n\\r\\n        if (value) {\\r\\n            dividendTracker.excludeFromDividends(pair);\\r\\n        }\\r\\n\\r\\n        emit SetAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function updateGasForProcessing(uint256 newValue) public onlyOwner {\\r\\n        require(\\r\\n            newValue >= 200000 && newValue <= 500000,\\r\\n            \\\"GasForProcessing must be between 200,000 and 500,000.\\\"\\r\\n        );\\r\\n        require(\\r\\n            newValue != gasForProcessing,\\r\\n            \\\"Cannot update gasForProcessing to same value.\\\"\\r\\n        );\\r\\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\\r\\n        gasForProcessing = newValue;\\r\\n    }\\r\\n\\r\\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\\r\\n        dividendTracker.updateClaimWait(claimWait);\\r\\n    }\\r\\n\\r\\n    function getClaimWait() external view returns (uint256) {\\r\\n        return dividendTracker.claimWait();\\r\\n    }\\r\\n\\r\\n    function updateMinimumTokenBalanceForDividends(\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        dividendTracker.updateMinimumTokenBalanceForDividends(amount);\\r\\n    }\\r\\n\\r\\n    function getMinimumTokenBalanceForDividends()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return dividendTracker.minimumTokenBalanceForDividends();\\r\\n    }\\r\\n\\r\\n    function getTotalDividendsDistributed() external view returns (uint256) {\\r\\n        return dividendTracker.totalDividendsDistributed();\\r\\n    }\\r\\n\\r\\n    function isExcludedFromFees(address account) public view returns (bool) {\\r\\n        return _isExcludedFromFees[account];\\r\\n    }\\r\\n\\r\\n    function withdrawableDividendOf(\\r\\n        address account\\r\\n    ) public view returns (uint256) {\\r\\n        return dividendTracker.withdrawableDividendOf(account);\\r\\n    }\\r\\n\\r\\n    function dividendTokenBalanceOf(\\r\\n        address account\\r\\n    ) public view returns (uint256) {\\r\\n        return dividendTracker.balanceOf(account);\\r\\n    }\\r\\n\\r\\n    function excludeFromDividends(address account) external onlyOwner {\\r\\n        dividendTracker.excludeFromDividends(account);\\r\\n    }\\r\\n\\r\\n    function isExcludedFromDividends(\\r\\n        address account\\r\\n    ) public view returns (bool) {\\r\\n        return dividendTracker.isExcludedFromDividends(account);\\r\\n    }\\r\\n\\r\\n    function getAccountDividendsInfo(\\r\\n        address account\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            int256,\\r\\n            int256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        return dividendTracker.getAccount(account);\\r\\n    }\\r\\n\\r\\n    function getAccountDividendsInfoAtIndex(\\r\\n        uint256 index\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            int256,\\r\\n            int256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        return dividendTracker.getAccountAtIndex(index);\\r\\n    }\\r\\n\\r\\n    function processDividendTracker(uint256 gas) external {\\r\\n        (\\r\\n            uint256 iterations,\\r\\n            uint256 claims,\\r\\n            uint256 lastProcessedIndex\\r\\n        ) = dividendTracker.process(gas);\\r\\n        emit ProcessedDividendTracker(\\r\\n            iterations,\\r\\n            claims,\\r\\n            lastProcessedIndex,\\r\\n            false,\\r\\n            gas,\\r\\n            tx.origin\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function claim() external {\\r\\n        dividendTracker.processAccount(payable(msg.sender), false);\\r\\n    }\\r\\n\\r\\n    function getLastProcessedIndex() external view returns (uint256) {\\r\\n        return dividendTracker.getLastProcessedIndex();\\r\\n    }\\r\\n\\r\\n    function getNumberOfDividendTokenHolders() external view returns (uint256) {\\r\\n        return dividendTracker.getNumberOfTokenHolders();\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        require(from != address(0), \\\"Can not transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"Can not transfer to the zero address\\\");\\r\\n\\r\\n        if (amount == 0) {\\r\\n            super._transfer(from, to, 0);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n\\r\\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\\r\\n\\r\\n        if (\\r\\n            canSwap &&\\r\\n            !swapping &&\\r\\n            !automatedMarketMakerPairs[from] &&\\r\\n            from != owner() &&\\r\\n            to != owner() &&\\r\\n            totalFees > 0\\r\\n        ) {\\r\\n            swapping = true;\\r\\n\\r\\n            if (marketingFee > 0) {\\r\\n                uint256 marketingTokens = contractTokenBalance\\r\\n                    .mul(marketingFee)\\r\\n                    .div(totalFees);\\r\\n                swapAndSendToFee(marketingTokens);\\r\\n            }\\r\\n\\r\\n            if (liquidityFee > 0) {\\r\\n                uint256 swapTokens = contractTokenBalance.mul(liquidityFee).div(\\r\\n                    totalFees\\r\\n                );\\r\\n                swapAndLiquify(swapTokens);\\r\\n            }\\r\\n\\r\\n            uint256 sellTokens = balanceOf(address(this));\\r\\n            if (sellTokens > 0) {\\r\\n                swapAndSendDividends(sellTokens);\\r\\n            }\\r\\n\\r\\n            swapping = false;\\r\\n        }\\r\\n\\r\\n        bool takeFee = !swapping;\\r\\n\\r\\n        // if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        if (takeFee && totalFees > 0) {\\r\\n            uint256 fees = amount.mul(totalFees).div(100);\\r\\n            if (automatedMarketMakerPairs[to]) {\\r\\n                fees += amount.mul(1).div(100);\\r\\n            }\\r\\n            amount = amount.sub(fees);\\r\\n\\r\\n            super._transfer(from, address(this), fees);\\r\\n        }\\r\\n\\r\\n        super._transfer(from, to, amount);\\r\\n\\r\\n        try\\r\\n            dividendTracker.setBalance(payable(from), balanceOf(from))\\r\\n        {} catch {}\\r\\n        try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\\r\\n\\r\\n        if (!swapping) {\\r\\n            try dividendTracker.process(gasForProcessing) returns (\\r\\n                uint256 iterations,\\r\\n                uint256 claims,\\r\\n                uint256 lastProcessedIndex\\r\\n            ) {\\r\\n                emit ProcessedDividendTracker(\\r\\n                    iterations,\\r\\n                    claims,\\r\\n                    lastProcessedIndex,\\r\\n                    true,\\r\\n                    gasForProcessing,\\r\\n                    tx.origin\\r\\n                );\\r\\n            } catch {}\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapAndSendToFee(uint256 tokens) private {\\r\\n        uint256 initialCAKEBalance = IERC20(rewardToken).balanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        swapTokensForCake(tokens);\\r\\n        uint256 newBalance = (IERC20(rewardToken).balanceOf(address(this))).sub(\\r\\n            initialCAKEBalance\\r\\n        );\\r\\n        IERC20(rewardToken).transfer(_marketingWalletAddress, newBalance);\\r\\n    }\\r\\n\\r\\n    function swapAndLiquify(uint256 tokens) private {\\r\\n        // split the contract balance into halves\\r\\n        uint256 half = tokens.div(2);\\r\\n        uint256 otherHalf = tokens.sub(half);\\r\\n\\r\\n        // capture the contract's current ETH balance.\\r\\n        // this is so that we can capture exactly the amount of ETH that the\\r\\n        // swap creates, and not make the liquidity event include any ETH that\\r\\n        // has been manually sent to the contract\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n\\r\\n        // swap tokens for ETH\\r\\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\\r\\n\\r\\n        // how much ETH did we just swap into?\\r\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\r\\n\\r\\n        // add liquidity to uniswap\\r\\n        addLiquidity(otherHalf, newBalance);\\r\\n\\r\\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n        // generate the uniswap pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        if (block.chainid == 61) {\\r\\n            //etc\\r\\n            uniswapV2Router.swapExactTokensForETCSupportingFeeOnTransferTokens(\\r\\n                tokenAmount,\\r\\n                0, // accept any amount of ETH\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp\\r\\n            );\\r\\n        } else if (block.chainid == 42262) {\\r\\n            //oasis\\r\\n            uniswapV2Router.swapExactTokensForROSESupportingFeeOnTransferTokens(\\r\\n                tokenAmount,\\r\\n                0, // accept any amount of ETH\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp\\r\\n            );\\r\\n        } else if (block.chainid == 43114 || block.chainid == 43113) {\\r\\n            //avalance\\r\\n            uniswapV2Router.swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\r\\n                tokenAmount,\\r\\n                0, // accept any amount of ETH\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp\\r\\n            );\\r\\n        } else {\\r\\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n                tokenAmount,\\r\\n                0, // accept any amount of ETH\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapTokensForCake(uint256 tokenAmount) private {\\r\\n        address[] memory path = new address[](3);\\r\\n        path[0] = address(this);\\r\\n        if (block.chainid == 61) {\\r\\n            //etc\\r\\n            path[1] = uniswapV2Router.WETC();\\r\\n        } else if (block.chainid == 128) {\\r\\n            //heco chain\\r\\n            path[1] = uniswapV2Router.WHT();\\r\\n        } else if (block.chainid == 42262) {\\r\\n            //oasis\\r\\n            path[1] = uniswapV2Router.WROSE();\\r\\n        } else if (block.chainid == 43114 || block.chainid == 43113) {\\r\\n            //avalance\\r\\n            path[1] = uniswapV2Router.WAVAX();\\r\\n        } else {\\r\\n            path[1] = uniswapV2Router.WETH();\\r\\n        }\\r\\n        path[2] = rewardToken;\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        if (block.chainid == 61) {\\r\\n            //etc\\r\\n            uniswapV2Router.addLiquidityETC{value: ethAmount}(\\r\\n                address(this),\\r\\n                tokenAmount,\\r\\n                0, // slippage is unavoidable\\r\\n                0, // slippage is unavoidable\\r\\n                address(0xdead),\\r\\n                block.timestamp\\r\\n            );\\r\\n        } else if (block.chainid == 42262) {\\r\\n            //oasis\\r\\n            uniswapV2Router.addLiquidityROSE{value: ethAmount}(\\r\\n                address(this),\\r\\n                tokenAmount,\\r\\n                0, // slippage is unavoidable\\r\\n                0, // slippage is unavoidable\\r\\n                address(0xdead),\\r\\n                block.timestamp\\r\\n            );\\r\\n        } else if (block.chainid == 43114 || block.chainid == 43113) {\\r\\n            //avalance\\r\\n            uniswapV2Router.addLiquidityAVAX{value: ethAmount}(\\r\\n                address(this),\\r\\n                tokenAmount,\\r\\n                0, // slippage is unavoidable\\r\\n                0, // slippage is unavoidable\\r\\n                address(0xdead),\\r\\n                block.timestamp\\r\\n            );\\r\\n        } else {\\r\\n            uniswapV2Router.addLiquidityETH{value: ethAmount}(\\r\\n                address(this),\\r\\n                tokenAmount,\\r\\n                0, // slippage is unavoidable\\r\\n                0, // slippage is unavoidable\\r\\n                address(0xdead),\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapAndSendDividends(uint256 tokens) private {\\r\\n        swapTokensForCake(tokens);\\r\\n        uint256 dividends = IERC20(rewardToken).balanceOf(address(this));\\r\\n        bool success = IERC20(rewardToken).transfer(\\r\\n            address(dividendTracker),\\r\\n            dividends\\r\\n        );\\r\\n\\r\\n        if (success) {\\r\\n            dividendTracker.distributeCAKEDividends(dividends);\\r\\n            emit SendDividends(tokens, dividends);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimal_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"dividendTrackerAddress_\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"addrs\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"feeSettings\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"minimumTokenBalanceForDividends_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"serviceFeeReceiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"serviceFee_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"addLiquidityETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"rejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"swapedETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"transferTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumTokenBalanceForDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setLiquiditFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTokenRewardsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMinimumTokenBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DividentToken", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000009795dcf2cfee83456bcd4801eeb7a7f9c7a7551b000000000000000000000000d41c4805a9a3128f9f7a7074da25965371ba50d500000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000009dfedd82602647988cd6d31fcef642693114b43700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000027100000000000000000000000001717afbe81bb09cbd283f18474349efe2c27dced00000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000000000000000000000000004746573740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037473740000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}