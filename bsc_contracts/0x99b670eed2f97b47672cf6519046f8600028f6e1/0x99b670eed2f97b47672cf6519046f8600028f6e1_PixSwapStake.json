{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PixSwapStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\n\\r\\ncontract PixSwapStake is Ownable {\\r\\n    IERC20 public immutable stakingToken;\\r\\n    \\r\\n    uint public constant NINETY_DAYS_IN_SECONDS = 90 * 24 * 60 * 60;\\r\\n\\r\\n    struct Stake {\\r\\n        uint id;\\r\\n        uint amount;\\r\\n        uint stakedTime;\\r\\n        bool withdrawn;\\r\\n    }\\r\\n\\r\\n    uint public monthlyReward = 187;\\r\\n\\r\\n    uint public maxSupply = 8_000_000 * 1e18;\\r\\n\\r\\n    uint public minimumStakeAmount = 10_000 * 1e18;\\r\\n\\r\\n    mapping(address => uint[]) public stakedIdsOf;\\r\\n\\r\\n    mapping(uint => Stake) public stakes;\\r\\n\\r\\n    uint public currentId;\\r\\n    // Total staked\\r\\n    uint public totalSupply;\\r\\n\\r\\n    event Staked(address indexed user, uint id);\\r\\n    event Restaked(address indexed user, uint id);\\r\\n    event Withdrawn(address indexed user, uint id);\\r\\n\\r\\n    constructor(address _stakingToken) {\\r\\n        stakingToken = IERC20(_stakingToken);\\r\\n    }\\r\\n\\r\\n    function setMonthlyReward(uint _monthlyReward) external onlyOwner {\\r\\n        monthlyReward = _monthlyReward;\\r\\n    }\\r\\n\\r\\n    function setMinimumStakeAmount(uint _minimumAmount) external onlyOwner {\\r\\n        minimumStakeAmount = _minimumAmount;\\r\\n    }\\r\\n\\r\\n    function setMaxSupply(uint _maxSupply) external onlyOwner {\\r\\n        maxSupply = _maxSupply;\\r\\n    }\\r\\n\\r\\n    function stake(uint _amount) external {\\r\\n        require(_amount > 0, \\\"amount = 0\\\");\\r\\n        require(totalSupply + _amount < maxSupply, \\\"max supply reached\\\");\\r\\n        require(_amount >= minimumStakeAmount, \\\"amount is less than minimum stake amount\\\");\\r\\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        stakedIdsOf[msg.sender].push(currentId);\\r\\n        stakes[currentId].stakedTime = block.timestamp;\\r\\n        stakes[currentId].amount = _amount; \\r\\n        stakes[currentId].id = currentId;\\r\\n        totalSupply += _amount;\\r\\n        emit Staked(msg.sender,  currentId);\\r\\n        currentId++;\\r\\n    }\\r\\n\\r\\n    function withdraw(uint id) external {\\r\\n        require(block.timestamp - stakes[id].stakedTime >= NINETY_DAYS_IN_SECONDS, \\\"cannot withdraw before 90 days\\\");\\r\\n        require(checkIfSenderOwnsStakeId(id), \\\"sender does not own this stake\\\");\\r\\n        require(!stakes[id].withdrawn, \\\"id has already been withdrawn\\\");\\r\\n        stakes[id].withdrawn = true;\\r\\n        totalSupply -= stakes[id].amount;        \\r\\n        stakingToken.transfer(msg.sender, stakes[id].amount + getRewardsForAmount(stakes[id].amount));\\r\\n        emit Withdrawn(msg.sender, id);\\r\\n    }\\r\\n\\r\\n    function restake(uint id) external {\\r\\n        require(block.timestamp - stakes[id].stakedTime >= NINETY_DAYS_IN_SECONDS, \\\"cannot restake before 90 days\\\");\\r\\n        require(checkIfSenderOwnsStakeId(id), \\\"sender does not own this stake\\\");\\r\\n        require(!stakes[id].withdrawn, \\\"id has already been withdrawn\\\");\\r\\n        stakes[id].withdrawn = true;\\r\\n        stakedIdsOf[msg.sender].push(currentId);\\r\\n        stakes[currentId].stakedTime = block.timestamp;\\r\\n        uint currentReward = getRewardsForAmount(stakes[id].amount);\\r\\n        stakes[currentId].amount = stakes[id].amount + currentReward;\\r\\n        stakes[currentId].id = currentId;\\r\\n        totalSupply += currentReward;\\r\\n        emit Restaked(msg.sender, currentId);\\r\\n        currentId++;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address _account) external view returns (uint) {\\r\\n        uint balance = 0;\\r\\n        for(uint i = 0; i < stakedIdsOf[_account].length; i++){\\r\\n            if(!stakes[stakedIdsOf[_account][i]].withdrawn){\\r\\n                balance += stakes[stakedIdsOf[_account][i]].amount;\\r\\n            }\\r\\n        }\\r\\n        return balance;    \\r\\n    }\\r\\n\\r\\n    function stakesOf(address _account) external view returns (Stake[] memory values) {\\r\\n        values = new Stake[](stakedIdsOf[_account].length);\\r\\n        for(uint i = 0; i < stakedIdsOf[_account].length; i++){\\r\\n            Stake memory currentStake = stakes[stakedIdsOf[_account][i]];\\r\\n            values[i] = currentStake;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkIfSenderOwnsStakeId(uint id) private view returns(bool){\\r\\n        for(uint i = 0; i < stakedIdsOf[msg.sender].length; i++){\\r\\n            if(stakedIdsOf[msg.sender][i] == id){\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function ownerWithdraw(uint _amount) external onlyOwner {\\r\\n        stakingToken.transfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function getRewardsForAmount(uint amount) public view returns (uint) {\\r\\n        return amount * (((1e4 + monthlyReward)**3) - 1e12) / 1e12;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint);\\r\\n\\r\\n    function transfer(address recipient, uint amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Restaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NINETY_DAYS_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRewardsForAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"monthlyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ownerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"restake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_monthlyReward\",\"type\":\"uint256\"}],\"name\":\"setMonthlyReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedIdsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"stakesOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"}],\"internalType\":\"struct PixSwapStake.Stake[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PixSwapStake", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000001af5bb53d00eaf7c689f34f1382d2cb9ed927303", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}