{"SourceCode": "{\"Afterburner.sol\":{\"content\":\"/***\\r\\nAfterburner Finance - DeFi 3.0 Redesigned\\r\\nEARN THE POT OR TRIGGER COMBUSTION\\r\\nAPY: 10,100.00% / Daily ROI: 1.28%\\r\\nStarting Sell Limit: 2% (Adjustable to 1-5)\\r\\nASSURE DEFI KYC + CERTIK AUDIT\\r\\nWebsite: https://afterburner.finance/\\r\\nMedium: https://medium.com/@afterburnerfinance\\r\\nDiscord: https://discord.gg/kR2tMszE\\r\\nTelegram: https://t.me/afterburnerfinance\\r\\nTwitter: https://twitter.com/AfterBurnerDeFi\\r\\n***/\\r\\n\\r\\n/// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.4;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./SafeMathInt.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IPancakeSwapFactory.sol\\\";\\r\\nimport \\\"./IPancakeSwapRouter.sol\\\";\\r\\nimport \\\"./IPancakeSwapPair.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./ERC20Detailed.sol\\\";\\r\\n\\r\\ncontract Afterburner is ERC20Detailed, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeMathInt for int256;\\r\\n\\r\\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\\r\\n    event JackpotAwarded(address indexed receiver, uint256 amount);\\r\\n    event Combustion(uint256 cashedOut, uint256 tokensOut);\\r\\n\\r\\n    string public constant _name = \\\"Afterburner Finance\\\";\\r\\n    string public constant _symbol = \\\"ARB\\\";\\r\\n    uint8 public constant _decimals = 5;\\r\\n\\r\\n    IPancakeSwapPair public pairContract;\\r\\n    mapping(address =\\u003e bool) _isFeeExempt;\\r\\n\\r\\n    modifier validRecipient(address to) {\\r\\n        require(to != address(0x0));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    uint256 public constant DECIMALS = 5;\\r\\n    uint256 public constant MAX_UINT256 = ~uint256(0);\\r\\n    uint8 public constant RATE_DECIMALS = 7;\\r\\n    // At any given time, buy and sell fees can NOT exceed 35%\\r\\n    uint256 private constant TOTAL_FEES_LIMIT = 350;\\r\\n\\r\\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 10**5 * 10**DECIMALS;\\r\\n    uint256 private constant BNB_DECIMALS = 18;\\r\\n    uint256 private constant BUSD_DECIMALS = 18;\\r\\n\\r\\n    uint256 public liquidityFee = 40;\\r\\n    uint256 public MarketingFundFee = 20;\\r\\n    uint256 public treasuryFee = 20;\\r\\n    uint256 public afterburnerFee = 30;\\r\\n\\r\\n    uint256 public afterburnerSellFee = 70;\\r\\n    uint256 public sellFee = 40;\\r\\n\\r\\n    uint256 public totalFee =\\r\\n        liquidityFee.add(treasuryFee).add(MarketingFundFee).add(\\r\\n            afterburnerFee\\r\\n        );\\r\\n    uint256 public constant feeDenominator = 1000;\\r\\n\\r\\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\\r\\n    address constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // mainnet\\r\\n    // address constant BUSD = 0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7; // testnet\\r\\n    uint256 private constant MAX_PCT = 10000;\\r\\n    // PCS takes 0.25% fee on all txs\\r\\n    uint256 private constant ROUTER_FEE = 25;\\r\\n\\r\\n    address public autoLiquidityReceiver;\\r\\n    address public treasuryReceiver;\\r\\n    address public MarketingFundReceiver;\\r\\n    address public pairAddress;\\r\\n    address public buybackWallet;\\r\\n    bool public constant swapEnabled = true;\\r\\n    IPancakeSwapRouter public router;\\r\\n    address public pair;\\r\\n    bool inSwap = false;\\r\\n    modifier swapping() {\\r\\n        inSwap = true;\\r\\n        _;\\r\\n        inSwap = false;\\r\\n    }\\r\\n\\r\\n    uint256 private constant TOTAL_GONS =\\r\\n        MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\\r\\n\\r\\n    uint256 private constant MAX_SUPPLY = 100 * 1e9 * 10**DECIMALS;\\r\\n\\r\\n    uint256 public INDEX;\\r\\n\\r\\n    bool public _autoRebase;\\r\\n    bool public _autoAddLiquidity;\\r\\n    uint256 public _initRebaseStartTime;\\r\\n    uint256 public _lastRebasedTime;\\r\\n    uint256 public _lastAddLiquidityTime;\\r\\n    uint256 public _totalSupply;\\r\\n    uint256 private _gonsPerFragment;\\r\\n    bool public _isRebaseStarted;\\r\\n\\r\\n    uint public ownerRebaseRate;\\r\\n    bool public isOwnerRebaseEnabled;\\r\\n\\r\\n\\r\\n    // 50.00% jackpot cashout to last buyer\\r\\n    uint256 public jackpotCashout = 5000;\\r\\n    // 50.00% of jackpot cashout to last buyer\\r\\n    uint256 public jackpotBuyerShare = 5000;\\r\\n    // Buys \\u003e 0.015 BNB will be eligible for the jackpot\\r\\n    uint256 public jackpotMinBuy = 10 * 10**(BNB_DECIMALS - 2);\\r\\n    // Jackpot time span is initially set to 10 mins\\r\\n    uint256 public jackpotTimespan = 10 * 60;\\r\\n    // Jackpot hard limit, BUSD value\\r\\n    uint256 public jackpotHardLimit = 10000 * 10**(BUSD_DECIMALS);\\r\\n    // Jackpot hard limit buyback share\\r\\n    uint256 public jackpotHardBuyback = 5000;\\r\\n\\r\\n    uint256 public _jackpotGonsTokens = 0;\\r\\n\\r\\n    address private _lastBuyer = address(this);\\r\\n    uint256 private _lastBuyTimestamp = 0;\\r\\n\\r\\n    address private _lastAwarded = address(0);\\r\\n    uint256 private _lastAwardedCash = 0;\\r\\n    uint256 private _lastAwardedTokens = 0;\\r\\n    uint256 private _lastAwardedTimestamp = 0;\\r\\n\\r\\n    uint256 private _lastCombustionCash = 0;\\r\\n    uint256 private _lastCombustionTokens = 0;\\r\\n    uint256 private _lastCombustionTimestamp = 0;\\r\\n\\r\\n    uint256 private _totalJackpotCashedOut = 0;\\r\\n    uint256 private _totalJackpotTokensOut = 0;\\r\\n    uint256 private _totalJackpotBuyer = 0;\\r\\n    uint256 private _totalJackpotBuyback = 0;\\r\\n    uint256 private _totalJackpotBuyerTokens = 0;\\r\\n    uint256 private _totalJackpotBuybackTokens = 0;\\r\\n\\r\\n    bool public isTakeFeeOnNormalTransfer = true;\\r\\n\\r\\n    // Token distribution held by the contract\\r\\n    uint256 public _pendingJackpotBalance = 0;\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _gonBalances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowedFragments;\\r\\n    mapping(address =\\u003e bool) public blacklist;\\r\\n\\r\\n    struct user {\\r\\n        uint256 firstBuy;\\r\\n        uint256 lastSellTime;\\r\\n        uint256 sellAmount;\\r\\n        uint256 lastBuyTime;\\r\\n        uint256 buyAmount;\\r\\n    }\\r\\n\\r\\n    uint256 public TwentyFourhours = 86400;\\r\\n\\r\\n    mapping(address =\\u003e user) public tradeData;\\r\\n    uint256 public maxSellTransactionAmount = 100 * 10**DECIMALS;\\r\\n    uint256 public sellLimitPercent = 1;\\r\\n    uint256 public buyLimitPercent = 10;\\r\\n\\r\\n    constructor()\\r\\n        ERC20Detailed(\\\"Afterburner Finance\\\", \\\"ARB\\\", uint8(DECIMALS))\\r\\n        Ownable()\\r\\n    {\\r\\n        router = IPancakeSwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); // mainnet \\r\\n        // router = IPancakeSwapRouter(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3); // testnet\\r\\n        pair = IPancakeSwapFactory(router.factory()).createPair(\\r\\n            router.WETH(),\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        autoLiquidityReceiver = 0xaea66e289d15dA801d9b8190E2232d387E17a647;\\r\\n        treasuryReceiver = 0xD9a2ECdF77279b98CA2636973CA14feD3528cbc0;\\r\\n        // treasuryReceiver = msg.sender;\\r\\n        MarketingFundReceiver = 0x57C3476143EBC7f204f3e2774519E1dbd495DBEB;\\r\\n        buybackWallet = 0x05bC3662573207af3c375690b757Ac8eE461a2BB;\\r\\n\\r\\n        _allowedFragments[address(this)][address(router)] = uint256(-1);\\r\\n        pairAddress = pair;\\r\\n        pairContract = IPancakeSwapPair(pair);\\r\\n\\r\\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\\r\\n        _gonBalances[treasuryReceiver] = TOTAL_GONS;\\r\\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\r\\n        _initRebaseStartTime = block.timestamp;\\r\\n        _lastRebasedTime = block.timestamp;\\r\\n        _autoRebase = false;\\r\\n        _isRebaseStarted = false;\\r\\n        _autoAddLiquidity = true;\\r\\n        _isFeeExempt[autoLiquidityReceiver] = true;\\r\\n        _isFeeExempt[treasuryReceiver] = true;\\r\\n        _isFeeExempt[MarketingFundReceiver] = true;\\r\\n        _isFeeExempt[buybackWallet] = true;\\r\\n        _isFeeExempt[msg.sender] = true;\\r\\n        _isFeeExempt[address(this)] = true;\\r\\n\\r\\n        INDEX = gonsForBalance(100000);\\r\\n\\r\\n        _transferOwnership(treasuryReceiver);\\r\\n        emit Transfer(address(0x0), treasuryReceiver, _totalSupply);\\r\\n    }\\r\\n\\r\\n    function setRebaseRate(uint _rebaseRate) external onlyOwner {\\r\\n        ownerRebaseRate = _rebaseRate;\\r\\n    }\\r\\n\\r\\n    function toggleOwnerRebase() external onlyOwner {\\r\\n        isOwnerRebaseEnabled = !isOwnerRebaseEnabled;\\r\\n    }\\r\\n\\r\\n    function getLastBuy()\\r\\n        external\\r\\n        view\\r\\n        returns (address lastBuyer, uint256 lastBuyTimestamp)\\r\\n    {\\r\\n        return (_lastBuyer, _lastBuyTimestamp);\\r\\n    }\\r\\n\\r\\n    function getLastAwardedJackpot()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address lastAwarded,\\r\\n            uint256 lastAwardedCash,\\r\\n            uint256 lastAwardedTokens,\\r\\n            uint256 lastAwardedTimestamp\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            _lastAwarded,\\r\\n            _lastAwardedCash,\\r\\n            _lastAwardedTokens,\\r\\n            _lastAwardedTimestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getPendingJackpotBalance()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 pendingJackpotBalance)\\r\\n    {\\r\\n        return (_pendingJackpotBalance);\\r\\n    }\\r\\n\\r\\n    function getPendingJackpotTokens()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 pendingJackpotTokens)\\r\\n    {\\r\\n        return (_jackpotGonsTokens.div(_gonsPerFragment));\\r\\n    }\\r\\n\\r\\n    function getLastCombustion()\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        return (_lastCombustionCash, _lastCombustionTokens, _lastCombustionTimestamp);\\r\\n    }\\r\\n\\r\\n    function getJackpot()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 jackpotTokens, uint256 pendingJackpotAmount)\\r\\n    {\\r\\n        return (\\r\\n            _jackpotGonsTokens.div(_gonsPerFragment),\\r\\n            _pendingJackpotBalance\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getLiquidityBacking(uint256 accuracy)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 liquidityBalance = _gonBalances[pair].div(_gonsPerFragment);\\r\\n        return\\r\\n            accuracy.mul(liquidityBalance.mul(2)).div(getCirculatingSupply());\\r\\n    }\\r\\n\\r\\n    function getCirculatingSupply() public view returns (uint256) {\\r\\n        return\\r\\n            (TOTAL_GONS.sub(_gonBalances[DEAD]).sub(_gonBalances[ZERO])).div(\\r\\n                _gonsPerFragment\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function totalJackpotOut() external view returns (uint256, uint256) {\\r\\n        return (_totalJackpotCashedOut, _totalJackpotTokensOut);\\r\\n    }\\r\\n\\r\\n    function totalJackpotBuyer() external view returns (uint256, uint256) {\\r\\n        return (_totalJackpotBuyer, _totalJackpotBuyerTokens);\\r\\n    }\\r\\n\\r\\n    function totalJackpotBuyback() external view returns (uint256, uint256) {\\r\\n        return (_totalJackpotBuyback, _totalJackpotBuybackTokens);\\r\\n    }\\r\\n\\r\\n    function startRebase() external onlyOwner {\\r\\n        // execute only once\\r\\n        require(!_isRebaseStarted, \\\"Rebase already started\\\");\\r\\n        if (_isRebaseStarted) return;\\r\\n        _initRebaseStartTime = block.timestamp;\\r\\n        _lastRebasedTime = block.timestamp;\\r\\n        _autoRebase = true;\\r\\n        _isRebaseStarted = true;\\r\\n    }\\r\\n\\r\\n    function rebase() internal {\\r\\n        if (inSwap) return;\\r\\n        uint256 rebaseRate;\\r\\n        uint256 deltaTimeFromInit = block.timestamp - _initRebaseStartTime;\\r\\n        uint256 deltaTime = block.timestamp - _lastRebasedTime;\\r\\n        uint256 times = deltaTime.div(15 minutes);\\r\\n        uint256 epoch = times.mul(15);\\r\\n\\r\\n        if (deltaTimeFromInit \\u003e= (3 * 365 days)) {\\r\\n            rebaseRate = 440;\\r\\n        } else if (deltaTimeFromInit \\u003e= (2 * 365 days)) {\\r\\n            rebaseRate = 720;\\r\\n        } else if (deltaTimeFromInit \\u003e= (365 days)) {\\r\\n            rebaseRate = 1000;\\r\\n        } else {\\r\\n            rebaseRate = 1320;\\r\\n        }\\r\\n\\r\\n        if (isOwnerRebaseEnabled) {\\r\\n            rebaseRate = ownerRebaseRate;\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c times; i++) {\\r\\n            _totalSupply = _totalSupply\\r\\n                .mul((10**RATE_DECIMALS).add(rebaseRate))\\r\\n                .div(10**RATE_DECIMALS);\\r\\n        }\\r\\n\\r\\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\r\\n        _lastRebasedTime = _lastRebasedTime.add(times.mul(15 minutes));\\r\\n\\r\\n        pairContract.sync();\\r\\n\\r\\n        emit LogRebase(epoch, _totalSupply);\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 value)\\r\\n        external\\r\\n        override\\r\\n        validRecipient(to)\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transferFrom(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external override validRecipient(to) returns (bool) {\\r\\n        if (_allowedFragments[from][msg.sender] != uint256(-1)) {\\r\\n            _allowedFragments[from][msg.sender] = _allowedFragments[from][\\r\\n                msg.sender\\r\\n            ].sub(value, \\\"Insufficient Allowance\\\");\\r\\n        }\\r\\n        _transferFrom(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _basicTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal returns (bool) {\\r\\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\\r\\n        _gonBalances[from] = _gonBalances[from].sub(gonAmount);\\r\\n        _gonBalances[to] = _gonBalances[to].add(gonAmount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (bool) {\\r\\n        require(!blacklist[sender] \\u0026\\u0026 !blacklist[recipient], \\\"in_blacklist\\\");\\r\\n\\r\\n        bool excludedAccount = _isFeeExempt[sender] || _isFeeExempt[recipient];\\r\\n\\r\\n        if (recipient == pair \\u0026\\u0026 !excludedAccount) {\\r\\n            require(amount \\u003c= maxSellTransactionAmount, \\\"Error amount\\\");\\r\\n\\r\\n            uint256 blkTime = block.timestamp;\\r\\n\\r\\n            uint256 onePercent = balanceOf(sender).mul(sellLimitPercent).div(\\r\\n                100\\r\\n            ); //Should use variable\\r\\n            require(amount \\u003c= onePercent, \\\"ERR: Can\\u0027t sell more than 1%\\\");\\r\\n\\r\\n            if (blkTime \\u003e tradeData[sender].lastSellTime + TwentyFourhours) {\\r\\n                tradeData[sender].lastSellTime = blkTime;\\r\\n                tradeData[sender].sellAmount = amount;\\r\\n            } else if (\\r\\n                (blkTime \\u003c tradeData[sender].lastSellTime + TwentyFourhours) \\u0026\\u0026\\r\\n                ((blkTime \\u003e tradeData[sender].lastSellTime))\\r\\n            ) {\\r\\n                require(\\r\\n                    tradeData[sender].sellAmount + amount \\u003c= onePercent,\\r\\n                    \\\"ERR: Can\\u0027t sell more than 1% in One day\\\"\\r\\n                );\\r\\n                tradeData[sender].sellAmount =\\r\\n                    tradeData[sender].sellAmount +\\r\\n                    amount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (sender == pair \\u0026\\u0026 !excludedAccount) {\\r\\n            uint256 blkTime = block.timestamp;\\r\\n\\r\\n            uint256 onePercent = _totalSupply.mul(buyLimitPercent).div(100); //Should use variable\\r\\n            require(amount \\u003c= onePercent, \\\"ERR: Can\\u0027t buy more than 10%\\\");\\r\\n\\r\\n            if (blkTime \\u003e tradeData[recipient].lastBuyTime + TwentyFourhours) {\\r\\n                tradeData[recipient].lastBuyTime = blkTime;\\r\\n                tradeData[recipient].buyAmount = amount;\\r\\n            } else if (\\r\\n                (blkTime \\u003c tradeData[recipient].lastBuyTime + TwentyFourhours) \\u0026\\u0026\\r\\n                ((blkTime \\u003e tradeData[recipient].lastBuyTime))\\r\\n            ) {\\r\\n                require(\\r\\n                    tradeData[recipient].buyAmount + amount \\u003c= onePercent,\\r\\n                    \\\"ERR: Can\\u0027t buy more than 10% in One day\\\"\\r\\n                );\\r\\n                tradeData[recipient].buyAmount =\\r\\n                    tradeData[recipient].buyAmount +\\r\\n                    amount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (inSwap) {\\r\\n            return _basicTransfer(sender, recipient, amount);\\r\\n        }\\r\\n        if (shouldRebase()) {\\r\\n            rebase();\\r\\n        }\\r\\n\\r\\n        if (shouldAddLiquidity()) {\\r\\n            addLiquidity();\\r\\n        }\\r\\n\\r\\n        if (shouldSwapBack()) {\\r\\n            swapBack();\\r\\n        }\\r\\n\\r\\n        if (_pendingJackpotBalance \\u003e= jackpotHardLimit) {\\r\\n            processCombustion();\\r\\n        } else if (shouldAwardJackpot()) {\\r\\n            awardJackpot();\\r\\n        }\\r\\n\\r\\n        if (sender == pair \\u0026\\u0026 isJackpotEligible(amount)) {\\r\\n            _lastBuyTimestamp = block.timestamp;\\r\\n            _lastBuyer = recipient;\\r\\n        }\\r\\n\\r\\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\\r\\n        _gonBalances[sender] = _gonBalances[sender].sub(gonAmount);\\r\\n        uint256 gonAmountReceived = shouldTakeFee(sender, recipient)\\r\\n            ? takeFee(sender, recipient, gonAmount)\\r\\n            : gonAmount;\\r\\n        _gonBalances[recipient] = _gonBalances[recipient].add(\\r\\n            gonAmountReceived\\r\\n        );\\r\\n\\r\\n        emit Transfer(\\r\\n            sender,\\r\\n            recipient,\\r\\n            gonAmountReceived.div(_gonsPerFragment)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function shouldAwardJackpot() public view returns (bool) {\\r\\n        return\\r\\n            _lastBuyer != address(0) \\u0026\\u0026\\r\\n            _lastBuyer != address(this) \\u0026\\u0026\\r\\n            block.timestamp.sub(_lastBuyTimestamp) \\u003e= jackpotTimespan;\\r\\n    }\\r\\n\\r\\n    function isJackpotEligible(uint256 tokenAmount) public view returns (bool) {\\r\\n        if (jackpotMinBuy == 0) {\\r\\n            return true;\\r\\n        }\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = router.WETH();\\r\\n        path[1] = address(this);\\r\\n\\r\\n        uint256 tokensOut = router\\r\\n        .getAmountsOut(jackpotMinBuy, path)[1].mul(MAX_PCT.sub(ROUTER_FEE)).div(\\r\\n                // We don\\u0027t subtract the buy fee since the tokenAmount is pre-tax\\r\\n                MAX_PCT\\r\\n            );\\r\\n        return tokenAmount \\u003e= tokensOut;\\r\\n    }\\r\\n\\r\\n    function processCombustion() internal swapping {\\r\\n        uint256 cashedOut = _pendingJackpotBalance.mul(jackpotHardBuyback).div(\\r\\n            MAX_PCT\\r\\n        );\\r\\n        uint256 tokensGonsOut = _jackpotGonsTokens.mul(jackpotHardBuyback).div(\\r\\n            MAX_PCT\\r\\n        );\\r\\n        _lastCombustionTokens = tokensGonsOut.div(_gonsPerFragment);\\r\\n\\r\\n        IERC20(BUSD).transfer(buybackWallet, cashedOut);\\r\\n        _basicTransfer(\\r\\n            address(this),\\r\\n            buybackWallet,\\r\\n            tokensGonsOut.div(_gonsPerFragment)\\r\\n        );\\r\\n\\r\\n        emit Combustion(cashedOut, tokensGonsOut.div(_gonsPerFragment));\\r\\n\\r\\n        _lastCombustionCash = cashedOut;\\r\\n        _lastCombustionTimestamp = block.timestamp;\\r\\n\\r\\n        _pendingJackpotBalance = _pendingJackpotBalance.sub(cashedOut);\\r\\n        _jackpotGonsTokens = _jackpotGonsTokens.sub(tokensGonsOut);\\r\\n\\r\\n        _totalJackpotCashedOut = _totalJackpotCashedOut.add(cashedOut);\\r\\n        _totalJackpotBuyback = _totalJackpotBuyback.add(cashedOut);\\r\\n        _totalJackpotTokensOut = _totalJackpotTokensOut.add(\\r\\n            tokensGonsOut.div(_gonsPerFragment)\\r\\n        );\\r\\n        _totalJackpotBuybackTokens = _totalJackpotBuybackTokens.add(\\r\\n            tokensGonsOut.div(_gonsPerFragment)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function awardJackpot() internal swapping {\\r\\n        require(\\r\\n            _lastBuyer != address(0) \\u0026\\u0026 _lastBuyer != address(this),\\r\\n            \\\"No last buyer detected\\\"\\r\\n        );\\r\\n        uint256 cashedOut = _pendingJackpotBalance.mul(jackpotCashout).div(\\r\\n            MAX_PCT\\r\\n        );\\r\\n        uint256 tokensGonsOut = _jackpotGonsTokens.mul(jackpotCashout).div(\\r\\n            MAX_PCT\\r\\n        );\\r\\n        uint256 tokensOut = tokensGonsOut.div(_gonsPerFragment);\\r\\n        uint256 buyerShare = cashedOut.mul(jackpotBuyerShare).div(MAX_PCT);\\r\\n        uint256 tokensToBuyer = tokensOut.mul(jackpotBuyerShare).div(MAX_PCT);\\r\\n        uint256 toBuyback = cashedOut - buyerShare;\\r\\n        uint256 tokensToBuyback = tokensOut - tokensToBuyer;\\r\\n\\r\\n        IERC20(BUSD).transfer(_lastBuyer, buyerShare);\\r\\n        _basicTransfer(address(this), _lastBuyer, tokensToBuyer);\\r\\n        IERC20(BUSD).transfer(buybackWallet, toBuyback);\\r\\n        _basicTransfer(address(this), buybackWallet, tokensToBuyback);\\r\\n\\r\\n        _pendingJackpotBalance = _pendingJackpotBalance.sub(cashedOut);\\r\\n        _jackpotGonsTokens = _jackpotGonsTokens.sub(tokensGonsOut);\\r\\n\\r\\n        _lastAwarded = _lastBuyer;\\r\\n        _lastAwardedCash = cashedOut;\\r\\n        _lastAwardedTimestamp = block.timestamp;\\r\\n        _lastAwardedTokens = tokensToBuyer;\\r\\n\\r\\n        emit JackpotAwarded(_lastBuyer, cashedOut);\\r\\n\\r\\n        _lastBuyer = payable(address(this));\\r\\n        _lastBuyTimestamp = 0;\\r\\n\\r\\n        _totalJackpotCashedOut = _totalJackpotCashedOut.add(cashedOut);\\r\\n        _totalJackpotTokensOut = _totalJackpotTokensOut.add(tokensOut);\\r\\n        _totalJackpotBuyer = _totalJackpotBuyer.add(buyerShare);\\r\\n        _totalJackpotBuyerTokens = _totalJackpotBuyerTokens.add(tokensToBuyer);\\r\\n        _totalJackpotBuyback = _totalJackpotBuyback.add(toBuyback);\\r\\n        _totalJackpotBuybackTokens = _totalJackpotBuybackTokens.add(\\r\\n            tokensToBuyback\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function takeFee(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 gonAmount\\r\\n    ) internal returns (uint256) {\\r\\n        uint256 _totalFee = totalFee;\\r\\n        uint256 _treasuryFee = treasuryFee;\\r\\n        uint256 _afterburnerFee = afterburnerFee;\\r\\n\\r\\n        if (recipient == pair) {\\r\\n            _totalFee = totalFee.add(sellFee).add(afterburnerSellFee);\\r\\n            _treasuryFee = treasuryFee.add(sellFee);\\r\\n            _afterburnerFee = afterburnerFee.add(afterburnerSellFee);\\r\\n        }\\r\\n\\r\\n        uint256 feeAmount = gonAmount.mul(_totalFee).div(feeDenominator);\\r\\n\\r\\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(\\r\\n            gonAmount\\r\\n                .mul(\\r\\n                    _treasuryFee.add(MarketingFundFee).add(afterburnerFee)\\r\\n                )\\r\\n                .div(feeDenominator)\\r\\n        );\\r\\n        _gonBalances[autoLiquidityReceiver] = _gonBalances[\\r\\n            autoLiquidityReceiver\\r\\n        ].add(gonAmount.mul(liquidityFee).div(feeDenominator));\\r\\n\\r\\n        _jackpotGonsTokens = _jackpotGonsTokens.add(\\r\\n            gonAmount.mul(_afterburnerFee).div(feeDenominator)\\r\\n        );\\r\\n\\r\\n        emit Transfer(sender, address(this), feeAmount.div(_gonsPerFragment));\\r\\n        return gonAmount.sub(feeAmount);\\r\\n    }\\r\\n\\r\\n    function addLiquidity() internal swapping {\\r\\n        uint256 autoLiquidityAmount = _gonBalances[autoLiquidityReceiver].div(\\r\\n            _gonsPerFragment\\r\\n        );\\r\\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(\\r\\n            _gonBalances[autoLiquidityReceiver]\\r\\n        );\\r\\n        _gonBalances[autoLiquidityReceiver] = 0;\\r\\n        uint256 amountToLiquify = autoLiquidityAmount.div(2);\\r\\n        uint256 amountToSwap = autoLiquidityAmount.sub(amountToLiquify);\\r\\n\\r\\n        if (amountToSwap == 0) {\\r\\n            return;\\r\\n        }\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = router.WETH();\\r\\n\\r\\n        uint256 balanceBefore = address(this).balance;\\r\\n\\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            amountToSwap,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        uint256 amountETHLiquidity = address(this).balance.sub(balanceBefore);\\r\\n\\r\\n        if (amountToLiquify \\u003e 0 \\u0026\\u0026 amountETHLiquidity \\u003e 0) {\\r\\n            router.addLiquidityETH{value: amountETHLiquidity}(\\r\\n                address(this),\\r\\n                amountToLiquify,\\r\\n                0,\\r\\n                0,\\r\\n                autoLiquidityReceiver,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n        _lastAddLiquidityTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function swapBack() internal swapping {\\r\\n        uint256 amountToSwap = _gonBalances[address(this)].div(\\r\\n            _gonsPerFragment\\r\\n        );\\r\\n\\r\\n        if (amountToSwap == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 balanceBefore = IERC20(BUSD).balanceOf(address(this));\\r\\n        address[] memory path = new address[](3);\\r\\n        path[0] = address(this);\\r\\n        path[1] = router.WETH();\\r\\n        path[2] = BUSD;\\r\\n\\r\\n        router.swapExactTokensForTokens(\\r\\n            amountToSwap,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        uint256 amountBUSDToSend = IERC20(BUSD).balanceOf(address(this)).sub(\\r\\n            balanceBefore\\r\\n        );\\r\\n\\r\\n        _jackpotGonsTokens = 0;\\r\\n\\r\\n        /// Send BUSD to treasury\\r\\n        IERC20(BUSD).transfer(\\r\\n            treasuryReceiver,\\r\\n            amountBUSDToSend.mul(treasuryFee).div(\\r\\n                treasuryFee.add(MarketingFundFee).add(afterburnerFee)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        /// Send BUSD to marketing fund\\r\\n        IERC20(BUSD).transfer(\\r\\n            MarketingFundReceiver,\\r\\n            amountBUSDToSend.mul(MarketingFundFee).div(\\r\\n                treasuryFee.add(MarketingFundFee).add(afterburnerFee)\\r\\n            )\\r\\n        );\\r\\n        /// The remaining BUSD goes to jackpot\\r\\n        _pendingJackpotBalance = _pendingJackpotBalance.add(\\r\\n            amountBUSDToSend.mul(afterburnerFee).div(\\r\\n                treasuryFee.add(MarketingFundFee).add(afterburnerFee)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawAllToTreasury() external swapping onlyOwner {\\r\\n        uint256 amountToSwap = _gonBalances[address(this)].div(\\r\\n            _gonsPerFragment\\r\\n        );\\r\\n        require(\\r\\n            amountToSwap \\u003e 0,\\r\\n            \\\"There is no ARB token deposited in token contract\\\"\\r\\n        );\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = router.WETH();\\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            amountToSwap,\\r\\n            0,\\r\\n            path,\\r\\n            treasuryReceiver,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function shouldTakeFee(address from, address to)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        if(isTakeFeeOnNormalTransfer) {\\r\\n            return !_isFeeExempt[from];\\r\\n        }\\r\\n        return (pair == from || pair == to) \\u0026\\u0026 !_isFeeExempt[from];\\r\\n    }\\r\\n\\r\\n    function shouldRebase() internal view returns (bool) {\\r\\n        return\\r\\n            _autoRebase \\u0026\\u0026\\r\\n            (_totalSupply \\u003c MAX_SUPPLY) \\u0026\\u0026\\r\\n            msg.sender != pair \\u0026\\u0026\\r\\n            !inSwap \\u0026\\u0026\\r\\n            block.timestamp \\u003e= (_lastRebasedTime + 15 minutes);\\r\\n    }\\r\\n\\r\\n    function shouldAddLiquidity() internal view returns (bool) {\\r\\n        return\\r\\n            _autoAddLiquidity \\u0026\\u0026\\r\\n            !inSwap \\u0026\\u0026\\r\\n            msg.sender != pair \\u0026\\u0026\\r\\n            block.timestamp \\u003e= (_lastAddLiquidityTime + 2 days);\\r\\n    }\\r\\n\\r\\n    function shouldSwapBack() internal view returns (bool) {\\r\\n        return !inSwap \\u0026\\u0026 msg.sender != pair;\\r\\n    }\\r\\n\\r\\n    function setTwentyFourHour(uint256 _twentyFourHour) external onlyOwner {\\r\\n        require(\\r\\n            _twentyFourHour \\u003c= 86400 \\u0026\\u0026 _twentyFourHour \\u003e= 60,\\r\\n            \\\"Twenty four hour must be between 60 and 86400 seconds\\\"\\r\\n        );\\r\\n        TwentyFourhours = _twentyFourHour;\\r\\n    }\\r\\n\\r\\n    function setIsTakeFeeOnNormalTransfer(bool _isTakeFeeOnNormalTransfer)\\r\\n        external\\r\\n        onlyOwner {\\r\\n        isTakeFeeOnNormalTransfer = _isTakeFeeOnNormalTransfer;\\r\\n    }\\r\\n\\r\\n    function setMaxSellTransaction(uint256 _maxTxn) external onlyOwner {\\r\\n        require(_maxTxn \\u003e= 100 * 10**DECIMALS, \\\"Max transaction must be greater than 100\\\");\\r\\n        maxSellTransactionAmount = _maxTxn;\\r\\n    }\\r\\n\\r\\n    function setSellLimitPercent(uint256 _percent) external onlyOwner {\\r\\n        require(_percent \\u003c= 100 \\u0026\\u0026 _percent \\u003e= 1, \\\"Percentage must be less than 100 and greater than 1\\\");\\r\\n        sellLimitPercent = _percent;\\r\\n    }\\r\\n\\r\\n    function setBuyLimitPercent(uint256 _percent) external onlyOwner {\\r\\n        require(_percent \\u003c= 100 \\u0026\\u0026 _percent \\u003e= 1, \\\"Percentage must be less than 100 and greater than 1\\\");\\r\\n        buyLimitPercent = _percent;\\r\\n    }\\r\\n\\r\\n    function setBuyFees(\\r\\n        uint256 _liquidityFee,\\r\\n        uint256 _MarketingFundFee,\\r\\n        uint256 _treasuryFee,\\r\\n        uint256 _afterburnerFee,\\r\\n        uint256 _afterburnerSellFee,\\r\\n        uint256 _sellFee\\r\\n    ) external onlyOwner {\\r\\n        uint256 totalBuyFee = _liquidityFee\\r\\n            .add(_MarketingFundFee)\\r\\n            .add(_treasuryFee)\\r\\n            .add(_afterburnerFee);\\r\\n        uint256 totalSellFee = totalBuyFee.add(_afterburnerSellFee).add(_sellFee);\\r\\n        require(\\r\\n            totalSellFee \\u003c= TOTAL_FEES_LIMIT,\\r\\n            \\\"Total fees can not exceed 35%\\\"\\r\\n        );\\r\\n        liquidityFee = _liquidityFee;\\r\\n        MarketingFundFee = _MarketingFundFee;\\r\\n        treasuryFee = _treasuryFee;\\r\\n        afterburnerFee = _afterburnerFee;\\r\\n        afterburnerSellFee = _afterburnerSellFee;\\r\\n        sellFee = _sellFee;\\r\\n    }\\r\\n\\r\\n    function setJackpotCashout(uint256 _jackpotCashout) external onlyOwner {\\r\\n        jackpotCashout = _jackpotCashout;\\r\\n    }\\r\\n\\r\\n    function setAutoRebase(bool _flag) external onlyOwner {\\r\\n        if (_flag) {\\r\\n            _autoRebase = _flag;\\r\\n            _lastRebasedTime = block.timestamp;\\r\\n        } else {\\r\\n            _autoRebase = _flag;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setJackpotHardBuyback(uint256 _hardBuyback) external onlyOwner {\\r\\n        jackpotHardBuyback = _hardBuyback;\\r\\n    }\\r\\n\\r\\n    function setBuyBackWallet(address _wallet) external onlyOwner {\\r\\n        buybackWallet = _wallet;\\r\\n    }\\r\\n\\r\\n    function setJackpotMinBuy(uint256 _minBuy) external onlyOwner {\\r\\n        jackpotMinBuy = _minBuy;\\r\\n    }\\r\\n\\r\\n    function setJackpotTimespan(uint256 _timespan) external onlyOwner {\\r\\n        jackpotTimespan = _timespan;\\r\\n    }\\r\\n\\r\\n    function setJackpotHardLimit(uint256 _hardlimit) external onlyOwner {\\r\\n        jackpotHardLimit = _hardlimit;\\r\\n    }\\r\\n\\r\\n    function setAutoAddLiquidity(bool _flag) external onlyOwner {\\r\\n        if (_flag) {\\r\\n            _autoAddLiquidity = _flag;\\r\\n            _lastAddLiquidityTime = block.timestamp;\\r\\n        } else {\\r\\n            _autoAddLiquidity = _flag;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function allowance(address owner_, address spender)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowedFragments[owner_][spender];\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\\r\\n        if (subtractedValue \\u003e= oldValue) {\\r\\n            _allowedFragments[msg.sender][spender] = 0;\\r\\n        } else {\\r\\n            _allowedFragments[msg.sender][spender] = oldValue.sub(\\r\\n                subtractedValue\\r\\n            );\\r\\n        }\\r\\n        emit Approval(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowedFragments[msg.sender][spender]\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][\\r\\n            spender\\r\\n        ].add(addedValue);\\r\\n        emit Approval(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowedFragments[msg.sender][spender]\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 value)\\r\\n        external\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _allowedFragments[msg.sender][spender] = value;\\r\\n        emit Approval(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function checkFeeExempt(address _addr) external view returns (bool) {\\r\\n        return _isFeeExempt[_addr];\\r\\n    }\\r\\n\\r\\n    function isNotInSwap() external view returns (bool) {\\r\\n        return !inSwap;\\r\\n    }\\r\\n\\r\\n    function manualSync() external {\\r\\n        IPancakeSwapPair(pair).sync();\\r\\n    }\\r\\n\\r\\n    function setFeeReceivers(\\r\\n        address _autoLiquidityReceiver,\\r\\n        address _treasuryReceiver,\\r\\n        address _MarketingFundReceiver\\r\\n    ) external onlyOwner {\\r\\n        autoLiquidityReceiver = _autoLiquidityReceiver;\\r\\n        treasuryReceiver = _treasuryReceiver;\\r\\n        MarketingFundReceiver = _MarketingFundReceiver;\\r\\n    }\\r\\n\\r\\n    function setWhitelist(address _addr, bool _isWhitelisted) external onlyOwner {\\r\\n        _isFeeExempt[_addr] = _isWhitelisted;\\r\\n    }\\r\\n\\r\\n    function setBotBlacklist(address _botAddress, bool _flag)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            isContract(_botAddress),\\r\\n            \\\"only contract address, not allowed exteranlly owned account\\\"\\r\\n        );\\r\\n        blacklist[_botAddress] = _flag;\\r\\n    }\\r\\n\\r\\n    function setPairAddress(address _pairAddress) external onlyOwner {\\r\\n        pairAddress = _pairAddress;\\r\\n    }\\r\\n\\r\\n    function setLP(address _address) external onlyOwner {\\r\\n        pairContract = IPancakeSwapPair(_address);\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function gonsForBalance(uint256 amount) public view returns (uint256) {\\r\\n        return amount.mul(_gonsPerFragment);\\r\\n    }\\r\\n\\r\\n    function balanceForGons(uint256 gons) public view returns (uint256) {\\r\\n        return gons.div(_gonsPerFragment);\\r\\n    }\\r\\n\\r\\n    function index() public view returns (uint256) {\\r\\n        return balanceForGons(INDEX);\\r\\n    }\\r\\n\\r\\n    function balanceOf(address who) public view override returns (uint256) {\\r\\n        return _gonBalances[who].div(_gonsPerFragment);\\r\\n    }\\r\\n\\r\\n    function isContract(address addr) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(addr)\\r\\n        }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\"},\"ERC20Detailed.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.4;\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\nabstract contract ERC20Detailed is IERC20 {\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint8 decimals_\\r\\n    ) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.4;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address who) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\"},\"IPancakeSwapFactory.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.4;\\r\\n\\r\\ninterface IPancakeSwapFactory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"},\"IPancakeSwapPair.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.4;\\r\\n\\r\\ninterface IPancakeSwapPair {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"},\"IPancakeSwapRouter.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.4;\\r\\n\\r\\ninterface IPancakeSwapRouter {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\"},\"Ownable.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.4;\\r\\n\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipRenounced(address indexed previousOwner);\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isOwner() public view returns (bool) {\\r\\n        return msg.sender == _owner;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipRenounced(_owner);\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(newOwner != address(0));\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.4;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"SafeMathInt.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.4;\\r\\n\\r\\nlibrary SafeMathInt {\\r\\n    int256 private constant MIN_INT256 = int256(1) \\u003c\\u003c 255;\\r\\n    int256 private constant MAX_INT256 = ~(int256(1) \\u003c\\u003c 255);\\r\\n\\r\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a * b;\\r\\n\\r\\n        require(c != MIN_INT256 || (a \\u0026 MIN_INT256) != (b \\u0026 MIN_INT256));\\r\\n        require((b == 0) || (c / b == a));\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\r\\n        require(b != -1 || a != MIN_INT256);\\r\\n\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a - b;\\r\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003c= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003e a));\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a + b;\\r\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003e= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003c a));\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function abs(int256 a) internal pure returns (int256) {\\r\\n        require(a != MIN_INT256);\\r\\n        return a \\u003c 0 ? -a : a;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashedOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"}],\"name\":\"Combustion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"JackpotAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MarketingFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MarketingFundReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TwentyFourhours\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_initRebaseStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isRebaseStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_jackpotGonsTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastAddLiquidityTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRebasedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pendingJackpotBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"afterburnerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"afterburnerSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gons\",\"type\":\"uint256\"}],\"name\":\"balanceForGons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimitPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"jackpotTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingJackpotAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastAwardedJackpot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lastAwarded\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastAwardedCash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAwardedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAwardedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lastBuyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastBuyTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastCombustion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingJackpotBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingJackpotBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingJackpotTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingJackpotTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"gonsForBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"isJackpotEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwnerRebaseEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTakeFeeOnNormalTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotBuyerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotCashout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotHardBuyback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotHardLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotMinBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotTimespan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerRebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairContract\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimitPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_botAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setBotBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setBuyBackWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MarketingFundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_afterburnerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_afterburnerSellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setBuyLimitPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MarketingFundReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isTakeFeeOnNormalTransfer\",\"type\":\"bool\"}],\"name\":\"setIsTakeFeeOnNormalTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jackpotCashout\",\"type\":\"uint256\"}],\"name\":\"setJackpotCashout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hardBuyback\",\"type\":\"uint256\"}],\"name\":\"setJackpotHardBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hardlimit\",\"type\":\"uint256\"}],\"name\":\"setJackpotHardLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBuy\",\"type\":\"uint256\"}],\"name\":\"setJackpotMinBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timespan\",\"type\":\"uint256\"}],\"name\":\"setJackpotTimespan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxn\",\"type\":\"uint256\"}],\"name\":\"setMaxSellTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"}],\"name\":\"setPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rebaseRate\",\"type\":\"uint256\"}],\"name\":\"setRebaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setSellLimitPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_twentyFourHour\",\"type\":\"uint256\"}],\"name\":\"setTwentyFourHour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAwardJackpot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleOwnerRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalJackpotBuyback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalJackpotBuyer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalJackpotOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradeData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSellTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBuyTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Afterburner", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://293145a31e23e31cee0e18fe07f8158aa9f35fdd2bc1bae69507e5765cd5cc30"}