{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.17;\r\n\r\ncontract LamonApp is Ownable, ReentrancyGuard {\r\n    address public usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n    IERC20 public token;\r\n\r\n    uint256 private AFFILIATE_PERCENT_USDT = 100; // 10% in units to avoid decimals.\r\n    uint256 public INIT_MIN_DEPOSIT = 5;\r\n    uint256 public INIT_MAX_DEPOSIT = 1000;\r\n    uint256 public INIT_TRADE_FAIR = 0;\r\n    uint256 private INIT_SECOND_PERCENT = 288680;\r\n    uint256 public INIT_MAX_INCOME_MULTIPLIER = 3;\r\n\r\n    address public defaultRef = 0x44488c5Ad94688450BF242d855f588ae53077b1B;\r\n    uint256 public totalInvested;\r\n    uint256 public totalInvestors;\r\n    uint256 public totalFairs;\r\n\r\n    struct User {\r\n        uint256 deposit;\r\n        uint256 reinvested;\r\n        uint256 earned;\r\n        uint256 withdrawn;\r\n        uint256 lamons;\r\n        uint256 timestamp;\r\n        address partner;\r\n        uint256 refsTotal;\r\n        uint256 refs1level;\r\n        uint256 refearnUSDT;\r\n        uint256 percentage;\r\n        uint256 maxEarnings;\r\n        uint256 totalEarnings;\r\n    }\r\n\r\n    struct Fairs {\r\n        uint256 wins;\r\n        uint256 loses;\r\n    }\r\n\r\n    struct TradeFair {\r\n        address player1;\r\n        address player2;\r\n        uint256 lamons;\r\n        uint256 timestamp;\r\n        address winner;\r\n        uint256 roll;\r\n    }\r\n\r\n    mapping(address => User) public user;\r\n    mapping(address => mapping(uint256 => TradeFair)) public tradefair;\r\n    mapping(address => Fairs) public fairs;\r\n    mapping(uint256 => address) public waitingFairs;\r\n\r\n    constructor() {\r\n        token = IERC20(usdt);\r\n    }\r\n\r\n    event ChangeUser(\r\n        address indexed user,\r\n        address indexed partner,\r\n        uint256 amount\r\n    );\r\n\r\n    receive() external payable onlyOwner {}\r\n\r\n    function PlantLamon(uint256 amount, address partner) external nonReentrant {\r\n        require(\r\n            _msgSender() == tx.origin,\r\n            \"Function can only be called by a user account\"\r\n        );\r\n        require(\r\n            amount >= (INIT_MIN_DEPOSIT * 1e18),\r\n            \"Deposit amount lower than minimum\"\r\n        );\r\n        require(\r\n            (user[_msgSender()].deposit + amount) <\r\n                (INIT_MAX_DEPOSIT * 1000000000000000000),\r\n            \"Max deposit limit has been exceeded\"\r\n        );\r\n\r\n        _updateprePayment(_msgSender());\r\n        totalInvested += amount;\r\n        totalInvestors += 1;\r\n\r\n        user[_msgSender()].deposit += amount;\r\n        user[_msgSender()].maxEarnings = amount * INIT_MAX_INCOME_MULTIPLIER;\r\n        user[_msgSender()].totalEarnings = 0;\r\n\r\n\r\n        if (user[_msgSender()].percentage == 0) {\r\n            require(\r\n                partner != _msgSender(),\r\n                \"Cannot set your own address as partner\"\r\n            );\r\n            address ref = user[partner].deposit == 0 ? defaultRef : partner;\r\n            user[ref].refs1level++;\r\n            user[ref].refsTotal++;\r\n            user[user[ref].partner].refsTotal++;\r\n            user[_msgSender()].partner = ref;\r\n            user[_msgSender()].percentage = INIT_SECOND_PERCENT;\r\n        }\r\n\r\n        token.transferFrom(_msgSender(), address(this), amount);\r\n        emit ChangeUser(\r\n            _msgSender(),\r\n            user[_msgSender()].partner,\r\n            user[_msgSender()].deposit\r\n        );\r\n\r\n        // REF\r\n        _traverseTree(user[_msgSender()].partner, amount);\r\n    }\r\n\r\n    function ReinvestLamon(uint256 amount) external nonReentrant {\r\n        require(\r\n            _msgSender() == tx.origin,\r\n            \"Function can only be called by a user account\"\r\n        );\r\n        uint256 fee = (amount * 30) / 1000;\r\n        _updateprePayment(_msgSender());\r\n        user[_msgSender()].lamons -= amount;\r\n        user[_msgSender()].maxEarnings += amount * INIT_MAX_INCOME_MULTIPLIER; \r\n        user[_msgSender()].totalEarnings = 0;\r\n        user[_msgSender()].deposit += amount;\r\n        user[_msgSender()].reinvested += amount;\r\n        emit ChangeUser(\r\n            _msgSender(),\r\n            user[_msgSender()].partner,\r\n            user[_msgSender()].deposit\r\n        );\r\n        user[owner()].lamons += fee;\r\n    }\r\n\r\n    function Withdraw(uint256 amount) external nonReentrant {\r\n        require(\r\n            _msgSender() == tx.origin,\r\n            \"Function can only be called by a user account\"\r\n        );\r\n        _updateprePayment(_msgSender());\r\n        uint256 fee = (amount * 50) / 1000;\r\n        amount -= fee;\r\n        require(amount <= user[_msgSender()].lamons, \"Insufficient funds\");\r\n        require(user[_msgSender()].totalEarnings + amount < user[_msgSender()].maxEarnings, \"Max earnings exceed\");\r\n        user[_msgSender()].lamons -= amount;\r\n        user[_msgSender()].withdrawn += amount;\r\n        user[_msgSender()].totalEarnings += amount; // Track total earnings\r\n        user[_msgSender()].percentage = INIT_SECOND_PERCENT;\r\n        token.transfer(_msgSender(), amount);\r\n        token.transfer(owner(), fee);\r\n    }\r\n\r\n    function checkReward(address account) public view returns (uint256) {\r\n        uint256 RewardTime = block.timestamp - user[account].timestamp;\r\n        RewardTime = (RewardTime >= 86400) ? 86400 : RewardTime;\r\n        uint256 reward = ((((user[account].deposit / 100) * user[account].percentage) /\r\n            10000000000) * RewardTime);\r\n        return reward > user[_msgSender()].maxEarnings ? user[_msgSender()].maxEarnings : reward;\r\n    }\r\n\r\n    function _updateprePayment(address account) internal {\r\n        uint256 pending = checkReward(_msgSender());\r\n        user[account].timestamp = block.timestamp;\r\n        user[account].lamons += pending;\r\n        user[account].earned += pending;\r\n    }\r\n\r\n    function _traverseTree(address account, uint256 value) internal {\r\n        if (value != 0) {\r\n            uint256 feeUSDT = ((value * AFFILIATE_PERCENT_USDT) / 1000);\r\n\r\n            user[account].lamons += feeUSDT;\r\n\r\n            user[account].refearnUSDT += feeUSDT;\r\n\r\n            account = user[account].partner;\r\n        }\r\n    }\r\n\r\n    function changeMaxDeposit(uint256 amount) external onlyOwner {\r\n        INIT_MAX_DEPOSIT = amount;\r\n    }\r\n\r\n    function changeFairStatus(uint256 status) external onlyOwner {\r\n        INIT_TRADE_FAIR = status;\r\n    }\r\n\r\n    // TradeFair\r\n    function createFair(uint256 fairType) public {\r\n        require(INIT_TRADE_FAIR == 1, \"Trade fair is not available\");\r\n        require(fairType < 3, \"Incorrect type\");\r\n        _updateprePayment(_msgSender());\r\n\r\n        address fairCreator = waitingFairs[fairType];\r\n        require(_msgSender() != fairCreator, \"You are already in fair\");\r\n\r\n        if (fairCreator == address(0)) {\r\n            _createFair(fairType);\r\n        } else {\r\n            _joinFair(fairType, fairCreator);\r\n            _fightFair(fairType, fairCreator);\r\n        }\r\n    }\r\n\r\n    function getFairType(uint256 fairType) internal pure returns (uint256) {\r\n        return [5e18, 25e18, 50e18][fairType];\r\n    }\r\n\r\n    function _randomNumber() internal view returns (uint256) {\r\n        uint256 randomnumber = uint256(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    block.timestamp +\r\n                        block.difficulty +\r\n                        ((\r\n                            uint256(keccak256(abi.encodePacked(block.coinbase)))\r\n                        ) / (block.timestamp)) +\r\n                        block.gaslimit +\r\n                        ((uint256(keccak256(abi.encodePacked(_msgSender())))) /\r\n                            (block.timestamp)) +\r\n                        block.number\r\n                )\r\n            )\r\n        );\r\n\r\n        return randomnumber % 100;\r\n    }\r\n\r\n    function _createFair(uint256 fairType) internal {\r\n        tradefair[_msgSender()][fairType].timestamp = block.timestamp;\r\n        tradefair[_msgSender()][fairType].player1 = _msgSender();\r\n        tradefair[_msgSender()][fairType].player2 = address(0);\r\n        tradefair[_msgSender()][fairType].winner = address(0);\r\n        tradefair[_msgSender()][fairType].lamons = getFairType(fairType);\r\n        tradefair[_msgSender()][fairType].roll = 0;\r\n        require(\r\n            user[_msgSender()].lamons >=\r\n                tradefair[_msgSender()][fairType].lamons,\r\n            \"Insuffitient lamon balance\"\r\n        );\r\n        user[_msgSender()].lamons -= tradefair[_msgSender()][fairType].lamons;\r\n        waitingFairs[fairType] = _msgSender();\r\n    }\r\n\r\n    function _joinFair(uint256 fairType, address fairCreator) internal {\r\n        tradefair[fairCreator][fairType].timestamp = block.timestamp;\r\n        tradefair[fairCreator][fairType].player2 = _msgSender();\r\n        user[_msgSender()].lamons -= tradefair[fairCreator][fairType].lamons;\r\n        waitingFairs[fairType] = address(0);\r\n    }\r\n\r\n    function _fightFair(uint256 fairType, address fairCreator) internal {\r\n        uint256 random = _randomNumber();\r\n        uint256 wAmount = tradefair[fairCreator][fairType].lamons * 2;\r\n        uint256 fee = (wAmount * 50) / 1000;\r\n\r\n        address winner = random < 50\r\n            ? tradefair[fairCreator][fairType].player1\r\n            : tradefair[fairCreator][fairType].player2;\r\n        address loser = random >= 50\r\n            ? tradefair[fairCreator][fairType].player1\r\n            : tradefair[fairCreator][fairType].player2;\r\n\r\n        user[winner].lamons += wAmount;\r\n        tradefair[fairCreator][fairType].winner = winner;\r\n        tradefair[fairCreator][fairType].roll = random;\r\n\r\n        fairs[winner].wins++;\r\n        fairs[loser].loses++;\r\n        totalFairs++;\r\n\r\n        user[owner()].lamons += fee;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ChangeUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_MAX_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INIT_MAX_INCOME_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INIT_MIN_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INIT_TRADE_FAIR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"PlantLamon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReinvestLamon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"changeFairStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeMaxDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fairType\",\"type\":\"uint256\"}],\"name\":\"createFair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fairs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loses\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFairs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradefair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lamons\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lamons\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refsTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refs1level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refearnUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarnings\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"waitingFairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LamonApp", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4a5fb80ee0dfd4f00092e585ff221a4d50c5970f0a068111500de4e4e89531f3"}