{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-08-14\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n// CoinAlpha      $ALP on Binance Smart Chain\r\n// Website: https://coinalpha.app/\r\n// Community:\t\r\n// Telegram chanel: https://t.me/coinalpha_app\t\r\n// Twitter: https://twitter.com/CoinAlpha3\r\n// Reddit: https://www.reddit.com/user/coinalpha_app\t\r\n\t\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n* @dev Interface of the BEP20 standard as defined in the EIP.\r\n*/\r\ninterface IBEP20 {\r\n/**\r\n* @dev Returns the amount of tokens in existence.\r\n*/\r\nfunction totalSupply() external view returns (uint256);\r\n\r\n/**\r\n* @dev Returns the amount of tokens owned by `account`.\r\n*/\r\nfunction balanceOf(address account) external view returns (uint256);\r\n\r\n/**\r\n* @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n*\r\n* Returns a boolean value indicating whether the operation succeeded.\r\n*\r\n* Emits a {Transfer} event.\r\n*/\r\nfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n/**\r\n* @dev Returns the remaining number of tokens that `spender` will be\r\n* allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n* zero by default.\r\n*\r\n* This value changes when {approve} or {transferFrom} are called.\r\n*/\r\nfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n/**\r\n* @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n*\r\n* Returns a boolean value indicating whether the operation succeeded.\r\n*\r\n* IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n* that someone may use both the old and the new allowance by unfortunate\r\n* transaction ordering. One possible solution to mitigate this race\r\n* condition is to first reduce the spender's allowance to 0 and set the\r\n* desired value afterwards:\r\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n*\r\n* Emits an {Approval} event.\r\n*/\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n/**\r\n* @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n* allowance mechanism. `amount` is then deducted from the caller's\r\n* allowance.\r\n*\r\n* Returns a boolean value indicating whether the operation succeeded.\r\n*\r\n* Emits a {Transfer} event.\r\n*/\r\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n/**\r\n* @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n* another (`to`).\r\n*\r\n* Note that `value` may be zero.\r\n*/\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n/**\r\n* @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n* a call to {approve}. `value` is the new allowance.\r\n*/\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n* @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n* checks.\r\n*\r\n* Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n* in bugs, because programmers usually assume that an overflow raises an\r\n* error, which is the standard behavior in high level programming languages.\r\n* `SafeMath` restores this intuition by reverting the transaction when an\r\n* operation overflows.\r\n*\r\n* Using this library instead of the unchecked operations eliminates an entire\r\n* class of bugs, so it's recommended to use it always.\r\n*/\r\nlibrary SafeMath {\r\n/**\r\n* @dev Returns the addition of two unsigned integers, reverting on\r\n* overflow.\r\n*\r\n* Counterpart to Solidity's `+` operator.\r\n*\r\n* Requirements:\r\n*\r\n* - Addition cannot overflow.\r\n*/\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nrequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Returns the subtraction of two unsigned integers, reverting on\r\n* overflow (when the result is negative).\r\n*\r\n* Counterpart to Solidity's `-` operator.\r\n*\r\n* Requirements:\r\n*\r\n* - Subtraction cannot overflow.\r\n*/\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n}\r\n\r\n/**\r\n* @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n* overflow (when the result is negative).\r\n*\r\n* Counterpart to Solidity's `-` operator.\r\n*\r\n* Requirements:\r\n*\r\n* - Subtraction cannot overflow.\r\n*/\r\nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b <= a, errorMessage);\r\nuint256 c = a - b;\r\n\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Returns the multiplication of two unsigned integers, reverting on\r\n* overflow.\r\n*\r\n* Counterpart to Solidity's `*` operator.\r\n*\r\n* Requirements:\r\n*\r\n* - Multiplication cannot overflow.\r\n*/\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n// benefit is lost if 'b' is also tested.\r\n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\n\r\nuint256 c = a * b;\r\nrequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Returns the integer division of two unsigned integers. Reverts on\r\n* division by zero. The result is rounded towards zero.\r\n*\r\n* Counterpart to Solidity's `/` operator. Note: this function uses a\r\n* `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n* uses an invalid opcode to revert (consuming all remaining gas).\r\n*\r\n* Requirements:\r\n*\r\n* - The divisor cannot be zero.\r\n*/\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn div(a, b, \"SafeMath: division by zero\");\r\n}\r\n\r\n/**\r\n* @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n* division by zero. The result is rounded towards zero.\r\n*\r\n* Counterpart to Solidity's `/` operator. Note: this function uses a\r\n* `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n* uses an invalid opcode to revert (consuming all remaining gas).\r\n*\r\n* Requirements:\r\n*\r\n* - The divisor cannot be zero.\r\n*/\r\nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b > 0, errorMessage);\r\nuint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n* Reverts when dividing by zero.\r\n*\r\n* Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n* opcode (which leaves remaining gas untouched) while Solidity uses an\r\n* invalid opcode to revert (consuming all remaining gas).\r\n*\r\n* Requirements:\r\n*\r\n* - The divisor cannot be zero.\r\n*/\r\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn mod(a, b, \"SafeMath: modulo by zero\");\r\n}\r\n\r\n/**\r\n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n* Reverts with custom message when dividing by zero.\r\n*\r\n* Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n* opcode (which leaves remaining gas untouched) while Solidity uses an\r\n* invalid opcode to revert (consuming all remaining gas).\r\n*\r\n* Requirements:\r\n*\r\n* - The divisor cannot be zero.\r\n*/\r\nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b != 0, errorMessage);\r\nreturn a % b;\r\n}\r\n}\r\n\r\n/**\r\n* @dev Collection of functions related to the address type\r\n*/\r\nlibrary Address {\r\n/**\r\n* @dev Returns true if `account` is a contract.\r\n*\r\n* [IMPORTANT]\r\n* ====\r\n* It is unsafe to assume that an address for which this function returns\r\n* false is an externally-owned account (EOA) and not a contract.\r\n*\r\n* Among others, `isContract` will return false for the following\r\n* types of addresses:\r\n*\r\n* - an externally-owned account\r\n* - a contract in construction\r\n* - an address where a contract will be created\r\n* - an address where a contract lived, but was destroyed\r\n* ====\r\n*/\r\nfunction isContract(address account) internal view returns (bool) {\r\n// According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n// and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n// for accounts without code, i.e. `keccak256('')`\r\nbytes32 codehash;\r\nbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n// solhint-disable-next-line no-inline-assembly\r\nassembly { codehash := extcodehash(account) }\r\nreturn (codehash != accountHash && codehash != 0x0);\r\n}\r\n\r\n/**\r\n* @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n* `recipient`, forwarding all available gas and reverting on errors.\r\n*\r\n* https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n* of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n* imposed by `transfer`, making them unable to receive funds via\r\n* `transfer`. {sendValue} removes this limitation.\r\n*\r\n* https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n*\r\n* IMPORTANT: because control is transferred to `recipient`, care must be\r\n* taken to not create reentrancy vulnerabilities. Consider using\r\n* {ReentrancyGuard} or the\r\n* https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n*/\r\nfunction sendValue(address payable recipient, uint256 amount) internal {\r\nrequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n(bool success, ) = recipient.call{ value: amount }(\"\");\r\nrequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n}\r\n\r\n/**\r\n* @dev Performs a Solidity function call using a low level `call`. A\r\n* plain`call` is an unsafe replacement for a function call: use this\r\n* function instead.\r\n*\r\n* If `target` reverts with a revert reason, it is bubbled up by this\r\n* function (like regular Solidity function calls).\r\n*\r\n* Returns the raw returned data. To convert to the expected return value,\r\n* use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n*\r\n* Requirements:\r\n*\r\n* - `target` must be a contract.\r\n* - calling `target` with `data` must not revert.\r\n*\r\n* _Available since v3.1._\r\n*/\r\nfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\nreturn functionCall(target, data, \"Address: low-level call failed\");\r\n}\r\n\r\n/**\r\n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n* `errorMessage` as a fallback revert reason when `target` reverts.\r\n*\r\n* _Available since v3.1._\r\n*/\r\nfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\nreturn _functionCallWithValue(target, data, 0, errorMessage);\r\n}\r\n\r\n/**\r\n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n* but also transferring `value` wei to `target`.\r\n*\r\n* Requirements:\r\n*\r\n* - the calling contract must have an ETH balance of at least `value`.\r\n* - the called Solidity function must be `payable`.\r\n*\r\n* _Available since v3.1._\r\n*/\r\nfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\nreturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n}\r\n\r\n/**\r\n* @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n* with `errorMessage` as a fallback revert reason when `target` reverts.\r\n*\r\n* _Available since v3.1._\r\n*/\r\nfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\nrequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\nreturn _functionCallWithValue(target, data, value, errorMessage);\r\n}\r\n\r\nfunction _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\nrequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n// solhint-disable-next-line avoid-low-level-calls\r\n(bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\nif (success) {\r\nreturn returndata;\r\n} else {\r\n// Look for revert reason and bubble it up if present\r\nif (returndata.length > 0) {\r\n// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n// solhint-disable-next-line no-inline-assembly\r\nassembly {\r\nlet returndata_size := mload(returndata)\r\nrevert(add(32, returndata), returndata_size)\r\n}\r\n} else {\r\nrevert(errorMessage);\r\n}\r\n}\r\n}\r\n}\r\nabstract contract Context {\r\nfunction _msgSender() internal view virtual returns (address payable) {\r\nreturn msg.sender;\r\n}\r\n\r\nfunction _msgData() internal view virtual returns (bytes memory) {\r\nthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\nreturn msg.data;\r\n}\r\n}\r\n\r\n/**\r\n* @dev Contract module which provides a basic access control mechanism, where\r\n* there is an account (an owner) that can be granted exclusive access to\r\n* specific functions.\r\n*\r\n* By default, the owner account will be the one that deploys the contract. This\r\n* can later be changed with {transferOwnership}.\r\n*\r\n* This module is used through inheritance. It will make available the modifier\r\n* `onlyOwner`, which can be applied to your functions to restrict their use to\r\n* the owner.\r\n*/\r\ncontract Ownable is Context {\r\naddress private _owner;\r\n\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n/**\r\n* @dev Initializes the contract setting the deployer as the initial owner.\r\n*/\r\nconstructor () internal {\r\naddress msgSender = _msgSender();\r\n_owner = msgSender;\r\nemit OwnershipTransferred(address(0), msgSender);\r\n}\r\n\r\n/**\r\n* @dev Returns the address of the current owner.\r\n*/\r\nfunction owner() public view returns (address) {\r\nreturn _owner;\r\n}\r\n\r\n/**\r\n* @dev Throws if called by any account other than the owner.\r\n*/\r\nmodifier onlyOwner() {\r\nrequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n_;\r\n}\r\n\r\n/**\r\n* @dev Leaves the contract without owner. It will not be possible to call\r\n* `onlyOwner` functions anymore. Can only be called by the current owner.\r\n*\r\n* NOTE: Renouncing ownership will leave the contract without an owner,\r\n* thereby removing any functionality that is only available to the owner.\r\n*/\r\nfunction renounceOwnership() public virtual onlyOwner {\r\nemit OwnershipTransferred(_owner, address(0));\r\n_owner = address(0);\r\n}\r\n\r\n/**\r\n* @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n* Can only be called by the current owner.\r\n*/\r\nfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\nrequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\nemit OwnershipTransferred(_owner, newOwner);\r\n_owner = newOwner;\r\n}\r\n}\r\n\r\ncontract CoinAlpha is Context, IBEP20, Ownable {\r\nusing SafeMath for uint256;\r\nusing Address for address;\r\n\r\nmapping (address => uint256) private _rOwned;\r\nmapping (address => uint256) private _tOwned;\r\nmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\nmapping (address => bool) private _isExcluded;\r\naddress[] private _excluded;\r\n\r\n\r\nuint8 private constant _decimals = 9;\r\nuint256 private constant MAX = ~uint256(0);\r\nstring private constant _name = 'CoinAlpha';\r\nstring private constant _symbol = 'ALP';\r\nuint256 private _tTotal = 1000000000 * 10 ** uint256(_decimals);\r\nuint256 private _rTotal = (MAX - (MAX % _tTotal));\r\nuint256 private _tFeeTotal;\r\nuint256 private _tBurnTotal;\r\nuint256 private _burnFee = 400;\r\nuint256 private _taxFee = 400;\r\n\r\nuint private _max_tx_size = _rTotal;\r\n\r\nconstructor () public {\r\n    _rOwned[_msgSender()] = _rTotal;\r\n    emit Transfer(address(0), _msgSender(), _tTotal);\r\n}\r\n\r\nfunction name() public pure returns (string memory) {\r\n    return _name;\r\n}\r\n\r\nfunction symbol() public pure returns (string memory) {\r\n    return _symbol;\r\n}\r\n\r\nfunction decimals() public pure returns (uint8) {\r\n    return _decimals;\r\n}\r\n\r\nfunction totalSupply() public view override returns (uint256) {\r\n    return _tTotal;\r\n}\r\n\r\nfunction balanceOf(address account) public view override returns (uint256) {\r\n    if (_isExcluded[account]) return _tOwned[account];\r\n    return tokenFromReflection(_rOwned[account]);\r\n}\r\n\r\nfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n}\r\n\r\nfunction allowance(address owner, address spender) public view override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n}\r\n\r\nfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n}\r\n\r\nfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n    return true;\r\n}\r\n\r\nfunction isExcluded(address account) public view returns (bool) {\r\n    return _isExcluded[account];\r\n}\r\n\r\nfunction totalFees() public view returns (uint256) {\r\n    return _tFeeTotal;\r\n}\r\n\r\nfunction totalBurn() public view returns (uint256) {\r\n    return _tBurnTotal;\r\n}\r\n\r\nfunction reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n    require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n    if (!deductTransferFee) {\r\n    (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n    return rAmount;\r\n    } else {\r\n    (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\n    return rTransferAmount;\r\n    }\r\n}\r\nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    return true;\r\n}\r\n\r\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n    return true;\r\n}\r\nfunction tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n    require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n    uint256 currentRate = _getRate();\r\n    return rAmount.div(currentRate);\r\n}\r\n\r\nfunction excludeAccount(address account) external onlyOwner() {\r\n    require(account != 0x1e064B2a37892d05F03738615840A8d4B112415b, 'router.');\r\n    require(!_isExcluded[account], \"Account is already excluded\");\r\n    if(_rOwned[account] > 0) {\r\n    _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n    }\r\n    _isExcluded[account] = true;\r\n    _excluded.push(account);\r\n}\r\n\r\nfunction includeAccount(address account) external onlyOwner() {\r\n    require(_isExcluded[account], \"Account is already excluded\");\r\n    for (uint256 i = 0; i < _excluded.length; i++) {\r\n    if (_excluded[i] == account) {\r\n    _excluded[i] = _excluded[_excluded.length - 1];\r\n    _tOwned[account] = 0;\r\n    _isExcluded[account] = false;\r\n    _excluded.pop();\r\n    break;\r\n    }\r\n    }\r\n}\r\n\r\nfunction deliver(uint256 tAmount) public {\r\n    address sender = _msgSender();\r\n    require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n    (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _rTotal = _rTotal.sub(rAmount);\r\n    _tFeeTotal = _tFeeTotal.add(tAmount);\r\n}\r\nfunction _approve(address owner, address spender, uint256 amount) private {\r\n    require(owner != address(0), \"BEP20: approve from the zero address\");\r\n    require(spender != address(0), \"BEP20: approve to the zero address\");\r\n    \r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n}\r\n\r\nfunction _transfer(address sender, address recipient, uint256 amount) private {\r\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n    require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n    require(amount > 0, \"Transfer amount must be greater than zero\");\r\n    \r\n    \r\n    if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n    _transferFromExcluded(sender, recipient, amount);\r\n    } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n    _transferToExcluded(sender, recipient, amount);\r\n    } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n    _transferStandard(sender, recipient, amount);\r\n    } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n    _transferBothExcluded(sender, recipient, amount);\r\n    } else {\r\n    _transferStandard(sender, recipient, amount);\r\n    }\r\n}\r\n\r\n\r\nfunction _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n    uint256 currentRate = _getRate();\r\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getValues(tAmount);\r\n    uint256 rBurn = tBurn.mul(currentRate);\r\n    _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n    _reflectFee(rFee, rBurn, tFee, tBurn);\r\n    emit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _getRValues(uint256 tAmount, uint256 tFee, uint256 tBurn, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n    uint256 rAmount = tAmount.mul(currentRate);\r\n    uint256 rFee = tFee.mul(currentRate);\r\n    uint256 rBurn = tBurn.mul(currentRate);\r\n    uint256 rTransferAmount = rAmount.sub(rFee).sub(rBurn);\r\n    return (rAmount, rTransferAmount, rFee);\r\n}\r\nfunction _reflectFee(uint256 rFee, uint256 rBurn, uint256 tFee, uint256 tBurn) private {\r\n    _rTotal = _rTotal.sub(rFee).sub(rBurn);\r\n    _tFeeTotal = _tFeeTotal.add(tFee);\r\n    _tBurnTotal = _tBurnTotal.add(tBurn);\r\n    _tTotal = _tTotal.sub(tBurn);\r\n}\r\n\r\nfunction _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n    (uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getTValues(tAmount, _taxFee, _burnFee);\r\n    uint256 currentRate = _getRate();\r\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tBurn, currentRate);\r\n    return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tBurn);\r\n}\r\n\r\nfunction _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n    uint256 currentRate = _getRate();\r\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getValues(tAmount);\r\n    uint256 rBurn = tBurn.mul(currentRate);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n    _reflectFee(rFee, rBurn, tFee, tBurn);\r\n    emit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n    uint256 currentRate = _getRate();\r\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getValues(tAmount);\r\n    uint256 rBurn = tBurn.mul(currentRate);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n    _reflectFee(rFee, rBurn, tFee, tBurn);\r\n    emit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n    uint256 currentRate = _getRate();\r\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getValues(tAmount);\r\n    uint256 rBurn = tBurn.mul(currentRate);\r\n    _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n    _reflectFee(rFee, rBurn, tFee, tBurn);\r\n    emit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _getRate() private view returns(uint256) {\r\n    (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n    return rSupply.div(tSupply);\r\n}\r\n\r\nfunction _getCurrentSupply() private view returns(uint256, uint256) {\r\n    uint256 rSupply = _rTotal;\r\n    uint256 tSupply = _tTotal;\r\n    for (uint256 i = 0; i < _excluded.length; i++) {\r\n    if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n    rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n    tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n    }\r\n    if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n    return (rSupply, tSupply);\r\n}\r\n\r\nfunction _getTValues(uint256 tAmount, uint256 taxFee, uint256 burnFee) private pure returns (uint256, uint256, uint256) {\r\n    uint256 tFee = ((tAmount.mul(taxFee)).div(100)).div(100);\r\n    uint256 tBurn = ((tAmount.mul(burnFee)).div(100)).div(100);\r\n    uint256 tTransferAmount = tAmount.sub(tFee).sub(tBurn);\r\n    return (tTransferAmount, tFee, tBurn);\r\n}\r\n\r\nfunction _getTaxFee() public view returns(uint256) {\r\n    return _taxFee;\r\n}\r\n\r\nfunction _getBurnFee() public view returns(uint256) {\r\n    return _burnFee;\r\n}\r\n\r\nfunction _getMaxTxAmount() public view returns(uint256){\r\n    return _max_tx_size;\r\n}\r\n\r\nfunction _setTaxFee(uint256 taxFee) external onlyOwner() {\r\n    require(taxFee <=400 ); //limit taxFee to 4%\r\n    _taxFee = taxFee;\r\n}\r\n\r\nfunction _setBurnFee(uint256 burnFee) external onlyOwner() {\r\n    require(burnFee <=400 ); //limit burnFee to 4%\r\n    _burnFee = burnFee;\r\n}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_getBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getMaxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"_setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"_setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CoinAlpha", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a92ccc5a1c370b8e1b39aca5db10fd30ac440b9194de8e372b4d82972a1e2a82"}