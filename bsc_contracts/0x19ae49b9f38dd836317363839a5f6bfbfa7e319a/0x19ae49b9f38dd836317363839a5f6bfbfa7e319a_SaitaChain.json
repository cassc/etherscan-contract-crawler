{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: NOLICENSE\\npragma solidity ^0.8.10;\\n\\ninterface IFactory{\\n        function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\"\r\n    },\r\n    \"contracts/Interfaces/IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: NOLICENSE\\npragma solidity ^0.8.10;\\n\\ninterface IRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addTreasuryETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint treasury);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline) external;\\n\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n}\"\r\n    },\r\n    \"contracts/SaitaChain.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: NOLICENSE\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Interfaces/IRouter.sol\\\";\\nimport \\\"./Interfaces/IFactory.sol\\\";\\n\\ncontract SaitaChain is IERC20, Ownable {\\n\\n    mapping(address => uint256) private _rOwned;\\n    mapping(address => uint256) private _tOwned;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) private _isExcludedFromFee;\\n    mapping(address => bool) private _isExcluded;\\n    mapping(address => bool) private _isBot;\\n    mapping(address => bool) private _isPair;\\n\\n    mapping(address => bool) public canAirdrop;\\n\\n    address[] private _excluded;\\n    \\n    bool private swapping;\\n\\n    IRouter public router;\\n    address public pair;\\n\\n    uint8 private constant _decimals = 9;\\n    uint256 private constant MAX = ~uint256(0);\\n\\n    uint256 private _tTotal = 100 * 10**9 * 10**9;\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n\\n    \\n    uint256 public swapTokensAtAmount = 1_000 * 10 ** 6;                                 // for bsc \\n    uint256 public maxTxAmount = 100 * 10**9 * 10**9;\\n    \\n    // Anti Dump //\\n    mapping (address => uint256) public _lastTrade;\\n    bool public coolDownEnabled = false;\\n    uint256 public coolDownTime = 30 seconds;\\n\\n    address public capitalAddress = 0xb3a50a36f988a1D44c248a042A068F822A5FaA29;             //change before mainnet deployment\\n    address public developmentAddress = 0xb3a50a36f988a1D44c248a042A068F822A5FaA29;         //change before mainnet deployment\\n    address public burnAddress = 0x000000000000000000000000000000000000dEaD;\\n\\n    address public BUSD = 0x55d398326f99059fF775485246999027B3197955;                       //change to mainnet\\n\\n    string private constant _name = \\\"SaitaChain\\\";\\n    string private constant _symbol = \\\"STC\\\";\\n\\n\\n    struct Taxes {\\n      uint256 reflection;\\n      uint256 capital;\\n      uint256 development;\\n      uint256 burn;\\n      uint256 treasury;\\n    }\\n\\n    Taxes private buyTax = Taxes(0,0,20,0,0);\\n    Taxes private sellTax = Taxes(0,0,20,0,0);\\n    Taxes private walletToWalletTax = Taxes(0,0,20,0,0);\\n\\n\\n    struct TotFeesPaidStruct {\\n        uint256 reflection;\\n        uint256 capital;\\n        uint256 development;\\n        uint256 burn;\\n        uint256 treasury;\\n    }\\n\\n    TotFeesPaidStruct public totFeesPaid;\\n\\n    struct valuesFromGetValues{\\n      uint256 rAmount;\\n      uint256 rTransferAmount;\\n      uint256 rReflection;\\n      uint256 rCapital;\\n      uint256 rdevelopment;\\n      uint256 rBurn;\\n      uint256 rTreasury;\\n      uint256 tTransferAmount;\\n      uint256 tReflection;\\n      uint256 tCapital;\\n      uint256 tdevelopment;\\n      uint256 tBurn;\\n      uint256 tTreasury;\\n    }\\n    \\n    struct splitETHStruct{\\n        uint256 capital;\\n        uint256 development;\\n    }\\n\\n    splitETHStruct private sellSplitETH = splitETHStruct(0,0);\\n    splitETHStruct private buySplitETH = splitETHStruct(0,0);\\n    splitETHStruct private walletToWalletSplitETH = splitETHStruct(0,0);\\n\\n\\n    struct ETHAmountStruct{\\n        uint256 capital;\\n        uint256 development;\\n    }\\n\\n    ETHAmountStruct public ETHAmount;\\n\\n    event FeesChanged();\\n    event BatchAirDropped(string _batchId);\\n\\n    modifier lockTheSwap {\\n        swapping = true;\\n        _;\\n        swapping = false;\\n    }\\n\\n    modifier addressValidation(address _addr) {\\n        require(_addr != address(0), 'SaitaChain :: Zero address');\\n        _;\\n    }\\n\\n    modifier hasAirdropControl(address _addr) {\\n        require(canAirdrop[_addr], \\\"SaitaChain :: No access\\\");\\n        _;\\n    }\\n\\n    constructor (address routerAddress, address owner_) Ownable(owner_) {\\n        IRouter _router = IRouter(routerAddress);\\n        address _pair = IFactory(_router.factory())\\n            .createPair(address(this), _router.WETH());\\n\\n        router = _router;\\n        pair = _pair;\\n        \\n        addPair(pair);\\n    \\n        excludeFromReward(pair);\\n\\n        _rOwned[owner()] = _rTotal;\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[capitalAddress] = true;\\n        _isExcludedFromFee[burnAddress] = true;\\n        _isExcludedFromFee[developmentAddress] = true;\\n\\n        emit Transfer(address(0), owner(), _tTotal);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcluded[account]) return _tOwned[account];\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    function isExcludedFromReward(address account) public view returns (bool) {\\n        return _isExcluded[account];\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\n        require(rAmount <= _rTotal, \\\"SaitaChain :: Amount must be less than total reflections\\\");\\n        uint256 currentRate =  _getRate();\\n        return rAmount/currentRate;\\n    }\\n\\n    function excludeFromReward(address account) public onlyOwner {\\n        require(!_isExcluded[account], \\\"SaitaChain :: Account is already excluded\\\");\\n        require(_excluded.length <= 200, \\\"SaitaChain :: Invalid length\\\");\\n        require(account != owner(), \\\"SaitaChain :: Owner cannot be excluded\\\");\\n        if(_rOwned[account] > 0) {\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    function includeInReward(address account) external onlyOwner() {\\n        require(_isExcluded[account], \\\"Account is not excluded\\\");\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _tOwned[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n\\n    function excludeFromFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = true;\\n    }\\n\\n    function includeInFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = false;\\n    }\\n\\n\\n    function isExcludedFromFee(address account) public view returns(bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n\\n    function addPair(address _pair) public onlyOwner {\\n        _isPair[_pair] = true;\\n    }\\n\\n    function removePair(address _pair) public onlyOwner {\\n        _isPair[_pair] = false;\\n    }\\n\\n    function isPair(address account) public view returns(bool){\\n        return _isPair[account];\\n    }\\n\\n    function setBuyTaxes(uint256 _reflection, uint256 _capital, uint256 _development, uint256 _burn, uint256 _treasury) public onlyOwner {\\n        buyTax.reflection = _reflection;\\n        buyTax.capital = _capital;\\n        buyTax.development = _development;\\n        buyTax.burn = _burn;\\n        buyTax.treasury = _treasury;\\n        emit FeesChanged();\\n    }\\n\\n    function setSellTaxes(uint256 _reflection, uint256 _capital, uint256 _development, uint256 _burn, uint256 _treasury) public onlyOwner {\\n        sellTax.reflection = _reflection;\\n        sellTax.capital = _capital;\\n        sellTax.development = _development;\\n        sellTax.burn = _burn;\\n        sellTax.treasury = _treasury;\\n        emit FeesChanged();\\n    }\\n\\n    function setWalletToWalletTaxes(uint256 _reflection, uint256 _capital, uint256 _development, uint256 _burn, uint256 _treasury) public onlyOwner {\\n        walletToWalletTax.reflection = _reflection;\\n        walletToWalletTax.capital = _capital;\\n        walletToWalletTax.development = _development;\\n        walletToWalletTax.burn = _burn;\\n        walletToWalletTax.treasury = _treasury;\\n        emit FeesChanged();\\n    }\\n\\n    function setBuySplitETH(uint256 _capital, uint256 _development) public onlyOwner {\\n        buySplitETH.capital = _capital;\\n        buySplitETH.development = _development;\\n        emit FeesChanged();\\n    }\\n\\n    function setSellSplitETH(uint256 _capital, uint256 _development) public onlyOwner {\\n        sellSplitETH.capital = _capital;\\n        sellSplitETH.development = _development;\\n        emit FeesChanged();\\n    }\\n\\n    function setWalletToWalletSplitETH(uint256 _capital, uint256 _development) public onlyOwner {\\n        walletToWalletSplitETH.capital = _capital;\\n        walletToWalletSplitETH.development = _development;\\n        emit FeesChanged();\\n    }\\n\\n    function _reflectReflection(uint256 rReflection, uint256 tReflection) private {\\n        _rTotal -=rReflection;\\n        totFeesPaid.reflection += tReflection;\\n    }\\n\\n    function _takeTreasury(uint256 rTreasury, uint256 tTreasury) private {\\n        totFeesPaid.treasury += tTreasury;\\n        if(_isExcluded[address(this)]) _tOwned[address(this)] += tTreasury;\\n        _rOwned[address(this)] += rTreasury;\\n    }\\n\\n    function _takeCapital(uint256 rCapital, uint256 tCapital) private {\\n        totFeesPaid.capital += tCapital;\\n        if(_isExcluded[capitalAddress]) _tOwned[capitalAddress] += tCapital;\\n        _rOwned[capitalAddress] +=rCapital;\\n    }\\n    \\n    function _takedevelopment(uint256 rdevelopment, uint256 tdevelopment) private {\\n        totFeesPaid.development += tdevelopment;\\n        if(_isExcluded[address(this)]) _tOwned[address(this)] += tdevelopment;\\n        _rOwned[address(this)] += rdevelopment;\\n    }\\n\\n    function _takeBurn(uint256 rBurn, uint256 tBurn) private {\\n        totFeesPaid.burn += tBurn;\\n        if(_isExcluded[burnAddress])_tOwned[burnAddress] += tBurn;\\n        _rOwned[burnAddress] += rBurn;\\n    }\\n\\n    function _getValues(uint256 tAmount, uint8 takeFee) private  returns (valuesFromGetValues memory to_return) {\\n        to_return = _getTValues(tAmount, takeFee);\\n        (to_return.rAmount, to_return.rTransferAmount, to_return.rReflection, to_return.rCapital,to_return.rdevelopment, to_return.rBurn, to_return.rTreasury) = _getRValues(to_return, tAmount, takeFee, _getRate());\\n        return to_return;\\n    }\\n\\n    function _getTValues(uint256 tAmount, uint8 takeFee) private returns (valuesFromGetValues memory s) {\\n        if(takeFee == 0) {\\n          s.tTransferAmount = tAmount;\\n          return s;\\n        } else if(takeFee == 1){\\n            s.tReflection = (tAmount*sellTax.reflection)/1000;\\n            s.tCapital = (tAmount*sellTax.capital)/1000;\\n            s.tdevelopment = tAmount*sellTax.development/1000;\\n            s.tBurn = tAmount*sellTax.burn/1000;\\n            s.tTreasury = tAmount*sellTax.treasury/1000;\\n            if(sellTax.treasury > 0) {\\n                ETHAmount.capital += s.tTreasury*sellSplitETH.capital/sellTax.treasury;\\n                ETHAmount.development += (s.tTreasury*sellSplitETH.development/sellTax.treasury);\\n            }\\n            ETHAmount.development += s.tdevelopment;\\n            s.tTransferAmount = tAmount-s.tReflection-s.tCapital-s.tTreasury-s.tdevelopment-s.tBurn;\\n            return s;\\n        } else if(takeFee == 2) {\\n            s.tReflection = (tAmount*buyTax.reflection)/1000;\\n            s.tCapital = (tAmount*buyTax.capital)/1000;\\n            s.tdevelopment = tAmount*buyTax.development/1000;\\n            s.tBurn = tAmount*buyTax.burn/1000;\\n            s.tTreasury = tAmount*buyTax.treasury/1000;\\n            if(buyTax.treasury > 0) {\\n                ETHAmount.capital += s.tTreasury*buySplitETH.capital/buyTax.treasury;\\n                ETHAmount.development += (s.tTreasury*buySplitETH.development/buyTax.treasury);\\n            }\\n            ETHAmount.development += s.tdevelopment;\\n            s.tTransferAmount = tAmount-s.tReflection-s.tCapital-s.tTreasury-s.tdevelopment-s.tBurn;\\n            return s;\\n        } else {\\n            s.tReflection = tAmount*walletToWalletTax.reflection/1000;\\n            s.tdevelopment = tAmount*walletToWalletTax.development/1000;\\n            s.tBurn = tAmount*walletToWalletTax.burn/1000;\\n            s.tTreasury = tAmount*walletToWalletSplitETH.development/1000;\\n            ETHAmount.development += s.tTreasury + s.tdevelopment;\\n            s.tTransferAmount = tAmount-s.tReflection-s.tTreasury-s.tdevelopment-s.tBurn;\\n        }\\n        \\n    }\\n\\n    function _getRValues(valuesFromGetValues memory s, uint256 tAmount, uint8 takeFee, uint256 currentRate) private pure returns (uint256 rAmount, uint256 rTransferAmount, uint256 rReflection,uint256 rCapital,uint256 rdevelopment,uint256 rBurn,uint256 rTreasury) {\\n        rAmount = tAmount*currentRate;\\n\\n        if(takeFee == 0) {\\n          return(rAmount, rAmount, 0,0,0,0,0);\\n        } else if(takeFee == 1) {\\n            rReflection = s.tReflection*currentRate;\\n            rCapital = s.tCapital*currentRate;\\n            rTreasury = s.tTreasury*currentRate;\\n            rdevelopment = s.tdevelopment*currentRate;\\n            rBurn = s.tBurn*currentRate;\\n            rTransferAmount =  rAmount-rReflection-rCapital-rTreasury-rdevelopment-rBurn;\\n            return (rAmount, rTransferAmount, rReflection,rCapital,rdevelopment,rBurn,rTreasury);\\n        } else if(takeFee == 2) {\\n            rReflection = s.tReflection*currentRate;\\n            rCapital = s.tCapital*currentRate;\\n            rTreasury = s.tTreasury*currentRate;\\n            rdevelopment = s.tdevelopment*currentRate;\\n            rBurn = s.tBurn*currentRate;\\n            rTransferAmount =  rAmount-rReflection-rCapital-rTreasury-rdevelopment-rBurn;\\n            return (rAmount, rTransferAmount, rReflection,rCapital,rdevelopment,rBurn,rTreasury);\\n        } else {\\n            rReflection = s.tReflection*currentRate;\\n            rTreasury = s.tTreasury*currentRate;\\n            rdevelopment = s.tdevelopment*currentRate;\\n            rBurn = s.tBurn*currentRate;\\n            rTransferAmount =  rAmount-rReflection-rTreasury-rdevelopment-rBurn;\\n            return (rAmount, rTransferAmount, rReflection,0,rdevelopment,rBurn,rTreasury);\\n        }\\n\\n    }\\n\\n    function _getRate() private view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply/tSupply;\\n    }\\n\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\\n            rSupply = rSupply-_rOwned[_excluded[i]];\\n            tSupply = tSupply-_tOwned[_excluded[i]];\\n        }\\n\\n        if (rSupply < _rTotal/_tTotal) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Zero amount\\\");\\n        require(amount <= balanceOf(from),\\\"Insufficient balance\\\");\\n        require(!_isBot[from] && !_isBot[to], \\\"SaitaChain :: You are a bot\\\");\\n        require(amount <= maxTxAmount ,\\\"SaitaChain :: Amount is exceeding maxTxAmount\\\");\\n\\n        if (coolDownEnabled) { \\n            uint256 timePassed = block.timestamp - _lastTrade[from];\\n            require(timePassed > coolDownTime, \\\"SaitaChain :: You must wait coolDownTime\\\");\\n        }\\n        \\n        if(!_isExcludedFromFee[from] && !_isExcludedFromFee[to] && !swapping) {       //check this !swapping\\n            if(_isPair[from]) {                         // sell\\n\\n                _tokenTransfer(from, to, amount, 1);\\n\\n            } else if(_isPair[to]) {                    // buy\\n                _tokenTransfer(from, to, amount, 2);\\n            } else {\\n                _tokenTransfer(from, to, amount, 3);\\n            }\\n        } else {\\n            _tokenTransfer(from, to, amount, 0);\\n        }\\n\\n        _lastTrade[from] = block.timestamp;\\n        \\n        if(!swapping && from != pair && to != pair && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\\n            address[] memory path = new address[](3);\\n                path[0] = address(this);\\n                path[1] = router.WETH();\\n                path[2] = BUSD;\\n            uint _amount = router.getAmountsOut(balanceOf(address(this)), path)[2];\\n            if(_amount >= swapTokensAtAmount) swapTokensForETH(balanceOf(address(this)));\\n        }\\n\\n    }\\n\\n\\n    //this method is responsible for taking all fee, if takeFee is true\\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, uint8 takeFee) private {\\n        valuesFromGetValues memory s = _getValues(tAmount, takeFee);\\n\\n        if (_isExcluded[sender] ) {  //from excluded\\n                _tOwned[sender] = _tOwned[sender] - tAmount;\\n        }\\n        if (_isExcluded[recipient]) { //to excluded\\n                _tOwned[recipient] = _tOwned[recipient] + s.tTransferAmount;\\n        }\\n\\n        _rOwned[sender] = _rOwned[sender]-s.rAmount;\\n        _rOwned[recipient] = _rOwned[recipient]+s.rTransferAmount;\\n        \\n        if(s.rReflection > 0 || s.tReflection > 0) _reflectReflection(s.rReflection, s.tReflection);\\n        if(s.rTreasury > 0 || s.tTreasury > 0) {\\n            _takeTreasury(s.rTreasury,s.tTreasury);\\n        }\\n        if(s.rCapital > 0 || s.tCapital > 0){\\n            _takeCapital(s.rCapital, s.tCapital);\\n            emit Transfer(sender, capitalAddress, s.tdevelopment);\\n        }\\n        if(s.rdevelopment > 0 || s.tdevelopment > 0){\\n            _takedevelopment(s.rdevelopment, s.tdevelopment);\\n            emit Transfer(sender, address(this), s.tdevelopment);\\n        }\\n        if(s.rBurn > 0 || s.tBurn > 0){\\n            _takeBurn(s.rBurn, s.tBurn);\\n            emit Transfer(sender, burnAddress, s.tBurn);\\n        }\\n        \\n        emit Transfer(sender, recipient, s.tTransferAmount);\\n        if(s.tTreasury > 0){\\n        emit Transfer(sender, address(this), s.tTreasury);\\n        }\\n    }\\n\\n    function swapTokensForETH(uint256 tokenAmount) private lockTheSwap {\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory path = new address[](2);\\n                path[0] = address(this);\\n                path[1] = router.WETH();\\n\\n        _approve(address(this), address(router), tokenAmount);\\n        // make the swap\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        (bool success, ) = capitalAddress.call{value: (ETHAmount.capital * address(this).balance)/tokenAmount}(\\\"\\\");\\n        require(success, 'SaitaChain :: ETH_TRANSFER_FAILED');\\n        ETHAmount.capital = 0;\\n\\n        (success, ) = developmentAddress.call{value: (ETHAmount.development * address(this).balance)/tokenAmount}(\\\"\\\");\\n        require(success, 'SaitaChain :: ETH_TRANSFER_FAILED');\\n        ETHAmount.development = 0;\\n    }\\n\\n    function updateCapitalWallet(address newWallet) external onlyOwner addressValidation(newWallet) {\\n        require(capitalAddress != newWallet, 'SaitaChain :: Wallet already set');\\n        capitalAddress = newWallet;\\n        _isExcludedFromFee[capitalAddress];\\n    }\\n\\n    function updateBurnWallet(address newWallet) external onlyOwner addressValidation(newWallet) {\\n        require(burnAddress != newWallet, 'SaitaChain :: Wallet already set');\\n        burnAddress = newWallet;\\n        _isExcludedFromFee[burnAddress];\\n    }\\n\\n    function updatedevelopmentWallet(address newWallet) external onlyOwner addressValidation(newWallet) {\\n        require(developmentAddress != newWallet, 'SaitaChain :: Wallet already set');\\n        developmentAddress = newWallet;\\n        _isExcludedFromFee[developmentAddress];\\n    }\\n\\n    function updateStableCoin(address _BUSD) external onlyOwner  addressValidation(_BUSD) {\\n        require(BUSD != _BUSD, 'SaitaChain :: Wallet already set');\\n        BUSD = _BUSD;\\n    }\\n\\n    function updateMaxTxAmt(uint256 amount) external onlyOwner {\\n        require(amount >= 100);\\n        maxTxAmount = amount * 10**_decimals;\\n    }\\n\\n    function updateSwapTokensAtAmount(uint256 amount, uint256 stableTokenDecimal) external onlyOwner {\\n        require(amount >= 0);\\n        swapTokensAtAmount = amount * 10**stableTokenDecimal;\\n    }\\n\\n    function updateCoolDownSettings(bool _enabled, uint256 _timeInSeconds) external onlyOwner{\\n        coolDownEnabled = _enabled;\\n        coolDownTime = _timeInSeconds * 1 seconds;\\n    }\\n\\n    function setAntibot(address account, bool state) external onlyOwner{\\n        require(_isBot[account] != state, 'SaitaChain :: Value already set');\\n        _isBot[account] = state;\\n    }\\n    \\n    function bulkAntiBot(address[] memory accounts, bool state) external onlyOwner {\\n        require(accounts.length <= 100, \\\"SaitaChain :: Invalid\\\");\\n        for(uint256 i = 0; i < accounts.length; i++){\\n            _isBot[accounts[i]] = state;\\n        }\\n    }\\n    \\n    function updateRouterAndPair(address newRouter, address newPair) external onlyOwner {\\n        router = IRouter(newRouter);\\n        pair = newPair;\\n        addPair(pair);\\n    }\\n    \\n    function isBot(address account) public view returns(bool){\\n        return _isBot[account];\\n    }\\n    \\n    function airdropTokens(address[] memory recipients, uint256[] memory amounts, string memory _batchId) external hasAirdropControl(msg.sender) {\\n        require(recipients.length == amounts.length,\\\"SaitaChain :: Invalid size\\\");\\n         address sender = owner();\\n\\n         for(uint256 i; i<recipients.length; i++){\\n            if(balanceOf(recipients[i]) > 0) revert(\\\"SaitaChain :: Already airdropped\\\");\\n            address recipient = recipients[i];\\n            uint256 rAmount = amounts[i]*_getRate();\\n            _rOwned[sender] = _rOwned[sender]- rAmount;\\n            _rOwned[recipient] = _rOwned[recipient] + rAmount;\\n            emit Transfer(sender, recipient, amounts[i]);\\n         }\\n\\n        emit BatchAirDropped(_batchId);\\n\\n        }\\n\\n    //Use this in case ETH are sent to the contract by mistake\\n    function rescueETH(uint256 weiAmount) external onlyOwner{\\n        require(address(this).balance >= weiAmount, \\\"SaitaChain :: insufficient ETH balance\\\");\\n        payable(owner()).transfer(weiAmount);\\n    }\\n    \\n    // Function to allow admin to claim *other* ERC20 tokens sent to this contract (by mistake)\\n    // Owner cannot transfer out catecoin from this smart contract\\n    function rescueAnyERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {\\n        IERC20(_tokenAddr).transfer(_to, _amount);\\n    }\\n\\n    function setAirdropControl(address[] memory _addr, bool[] memory _access) external onlyOwner {\\n        require(_addr.length == _access.length, \\\"SaitaChain :: Different length inputs\\\");\\n        for(uint i = 0; i< _addr.length; i++) {\\n            canAirdrop[_addr[i]] = _access[i];\\n        }\\n    }\\n\\n    receive() external payable {\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": true,\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_batchId\",\"type\":\"string\"}],\"name\":\"BatchAirDropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETHAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"capital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"development\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_batchId\",\"type\":\"string\"}],\"name\":\"airdropTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"bulkAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolDownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolDownTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"removePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueAnyERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_access\",\"type\":\"bool[]\"}],\"name\":\"setAirdropControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setAntibot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_capital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_development\",\"type\":\"uint256\"}],\"name\":\"setBuySplitETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_capital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasury\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_capital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_development\",\"type\":\"uint256\"}],\"name\":\"setSellSplitETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_capital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasury\",\"type\":\"uint256\"}],\"name\":\"setSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_capital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_development\",\"type\":\"uint256\"}],\"name\":\"setWalletToWalletSplitETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_capital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasury\",\"type\":\"uint256\"}],\"name\":\"setWalletToWalletTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totFeesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateBurnWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateCapitalWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_timeInSeconds\",\"type\":\"uint256\"}],\"name\":\"updateCoolDownSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxAmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"updateRouterAndPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BUSD\",\"type\":\"address\"}],\"name\":\"updateStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableTokenDecimal\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updatedevelopmentWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SaitaChain", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009aac13697a077b23af8826789af7b9fdbd13111f0000000000000000000000007e3cb14276d82360946843a19583c7ac8d65df14", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}