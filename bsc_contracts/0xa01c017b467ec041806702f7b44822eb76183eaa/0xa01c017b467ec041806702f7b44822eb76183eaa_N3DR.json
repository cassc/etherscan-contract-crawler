{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/N3DR/N3DR.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../interfaces/IPancakePair.sol\\\";\\nimport \\\"../interfaces/IPancakeFactory.sol\\\";\\nimport \\\"../interfaces/IPancakeRouter.sol\\\";\\n\\nimport \\\"./Farm.sol\\\";\\nimport \\\"./Referral.sol\\\";\\nimport \\\"./Lottery.sol\\\";\\n\\ncontract N3DR is Context, IERC20, IERC20Metadata, Ownable {\\n    ///////////////////////////////////////////////////////////\\n    ////// @openzeppelin/contracts/token/ERC20/ERC20.sol //////\\n    ///////////////////////////////////////////////////////////\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    // constructor(string memory name_, string memory symbol_) {\\n    //     _name = name_;\\n    //     _symbol = symbol_;\\n    // }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function emergencilyTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public onlyOperator {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    // function _transfer(\\n    //     address sender,\\n    //     address recipient,\\n    //     uint256 amount\\n    // ) internal virtual {\\n    //     require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    //     require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    //     _beforeTokenTransfer(sender, recipient, amount);\\n\\n    //     uint256 senderBalance = _balances[sender];\\n    //     require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n    //     unchecked {\\n    //         _balances[sender] = senderBalance - amount;\\n    //     }\\n    //     _balances[recipient] += amount;\\n\\n    //     emit Transfer(sender, recipient, amount);\\n\\n    //     _afterTokenTransfer(sender, recipient, amount);\\n    // }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    ///////////////////////////////////////////////////////////\\n    ////////////////////////// N3DR ///////////////////////////\\n    ///////////////////////////////////////////////////////////\\n\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    bool private _paused;\\n    mapping(address => bool) public operators;\\n\\n    IERC20 public quoteToken;\\n    IPancakeRouter public router;\\n    IPancakePair public pair;\\n\\n    bool private _whitelistLpLock = true; // only the wallets in whitelist can add/remove LP\\n    bool private _whitelistBuyLock = true; // only the wallets in whitelist can buy from LP\\n    bool private _whitelistSellLock = true; // only the wallets in whitelist can sell to LP and not limited by 'sellAfterBuySeconds' rules\\n    mapping(address => bool) private _swapWhitelist;\\n    mapping(address => bool) private _blocklist;\\n\\n    // price protection config\\n    uint256 public taxPriceProtection = 500; // \u2031 additional sell tax to lottery for price protection\\n    uint256 public priceProtectionRate = 2000; // \u2031 rate, price protection turn on if daily price drop rate > this value\\n    uint256 public todayTimeIndex; // Today's timestamp / (24*60*60)\\n    uint256 public todayOpenPrice; // Today's open price, 1e18 units N3DR = how many units quote token\\n    uint256 public sellAfterBuySeconds = 3600; // 1 hour, user can sell N3DR after buy N3DR 1 hour\\n    mapping(address => uint256) public lastBuyTime; // record user last buy N3DR time\\n\\n    address public addressBurn; // address tax to burn\\n    address public addressFarm; // address tax to farm\\n    address public addressLottery; // address tax to lottery\\n    address public addressReferral; // address tax to referral\\n    uint256 public taxBurn = 100; // \u2031 tax to burn\\n    uint256 public taxFarm = 200; // \u2031 tax to farm\\n    uint256 public taxLottery = 300; // \u2031 tax to lottery\\n    uint256 public taxReferral = 400; // \u2031 tax to referral\\n    mapping(address => bool) public isTaxExcluded;\\n    mapping(uint256 => bool) public isTaxTransferTypeExcluded;\\n\\n    bool private _inProgressLp;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _paused = false;\\n        _name = name_;\\n        _symbol = symbol_;\\n        operators[msg.sender] = true;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operators[msg.sender], \\\"Operator: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    modifier lockLp() {\\n        _inProgressLp = true;\\n        _;\\n        _inProgressLp = false;\\n    }\\n\\n    function setPaused(bool paused_) public onlyOwner {\\n        _paused = paused_;\\n    }\\n\\n    function setOperator(address _operator, bool _enabled) public onlyOwner {\\n        operators[_operator] = _enabled;\\n    }\\n\\n    function setRouter(IERC20 _quoteToken, IPancakeRouter _router) public onlyOwner {\\n        quoteToken = _quoteToken;\\n        router = _router;\\n        address _pair = IPancakeFactory(_router.factory()).createPair(address(_quoteToken), address(this));\\n        pair = IPancakePair(_pair);\\n    }\\n\\n    function setWhitelistLock(\\n        bool _lpLock,\\n        bool _buyLock,\\n        bool _sellLock\\n    ) public onlyOwner {\\n        _whitelistLpLock = _lpLock;\\n        _whitelistBuyLock = _buyLock;\\n        _whitelistSellLock = _sellLock;\\n    }\\n\\n    function setSwapAndLpWhitelist(address[] memory _users, bool _enabled) public onlyOwner {\\n        uint256 _len = _users.length;\\n        for (uint256 i = 0; i < _len; i++) {\\n            _swapWhitelist[_users[i]] = _enabled;\\n        }\\n    }\\n\\n    function setBlocklist(address[] memory _users, bool _enabled) public onlyOwner {\\n        uint256 _len = _users.length;\\n        for (uint256 i = 0; i < _len; i++) {\\n            _blocklist[_users[i]] = _enabled;\\n        }\\n    }\\n\\n    function mint(address account, uint256 amount) public onlyOwner {\\n        _mint(account, amount);\\n    }\\n\\n    function setPriceProtection(\\n        uint256 _taxPriceProtection,\\n        uint256 _priceProtectionRate,\\n        uint256 _sellAfterBuySeconds\\n    ) public onlyOwner {\\n        taxPriceProtection = _taxPriceProtection;\\n        priceProtectionRate = _priceProtectionRate;\\n        sellAfterBuySeconds = _sellAfterBuySeconds;\\n    }\\n\\n    function setTaxAddress(\\n        address burn_,\\n        address _farm,\\n        address _lottery,\\n        address _referral\\n    ) public onlyOwner {\\n        addressBurn = burn_;\\n        addressFarm = _farm;\\n        addressLottery = _lottery;\\n        addressReferral = _referral;\\n    }\\n\\n    function setTaxRate(\\n        uint256 burn_,\\n        uint256 _farm,\\n        uint256 _lottery,\\n        uint256 _referral\\n    ) public onlyOwner {\\n        taxBurn = burn_;\\n        taxFarm = _farm;\\n        taxLottery = _lottery;\\n        taxReferral = _referral;\\n    }\\n\\n    function setTaxExcluded(address _from, bool _enabled) public onlyOwner {\\n        isTaxExcluded[_from] = _enabled;\\n    }\\n\\n    function setTaxTransferTypeExcluded(uint256 _transferType, bool _enabled) public onlyOwner {\\n        isTaxTransferTypeExcluded[_transferType] = _enabled;\\n    }\\n\\n    function selfApprove(\\n        IERC20 _token,\\n        address _spender,\\n        uint256 _amount\\n    ) public onlyOwner {\\n        _token.approve(_spender, _amount);\\n    }\\n\\n    function _isLp(address _addr) internal view returns (bool) {\\n        return _addr == address(pair);\\n    }\\n\\n    // 0: normal transfer\\n    // 1: buy from official LP\\n    // 2: sell to official LP\\n    // 3: add official LP\\n    // 4: remove official LP\\n    function _getTransferType(address _from, address _to) internal view returns (uint256) {\\n        if (_isLp(_from) && !_isLp(_to)) {\\n            return _inProgressLp ? 4 : 1;\\n        }\\n\\n        if (!_isLp(_from) && _isLp(_to)) {\\n            return _inProgressLp ? 3 : 2;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function _rawTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal virtual {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        require(!_paused, \\\"ERC20Pausable: token transfer while paused\\\");\\n        require(_from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(_to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(_from, _to, _amount);\\n\\n        uint256 senderBalance = _balances[_from];\\n        require(senderBalance >= _amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[_from] = senderBalance - _amount;\\n        }\\n        _balances[_to] += _amount;\\n\\n        emit Transfer(_from, _to, _amount);\\n\\n        _afterTokenTransfer(_from, _to, _amount);\\n    }\\n\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        updateTodayOpenPrice();\\n\\n        uint256 _amountBurn = 0;\\n        uint256 _amountFarm = 0;\\n        uint256 _amountLottery = 0;\\n        uint256 _amountReferral = 0;\\n        uint256 _transferType = _getTransferType(_from, _to);\\n        (bool _isUp, uint256 _changeRate) = getDailyPriceChange();\\n\\n        require(!_blocklist[_from], \\\"N3DR: forbidden transfer\\\");\\n\\n        // buy\\n        if (_transferType == 1) {\\n            require(!_whitelistBuyLock || _swapWhitelist[_to], \\\"N3DR: forbidden to buy\\\"); // buy Whitelist lock\\n            lastBuyTime[_to] = block.timestamp; // update user last buy time\\n        }\\n\\n        // sell\\n        if (_transferType == 2) {\\n            if (_whitelistSellLock) {\\n                require(_swapWhitelist[_from], \\\"N3DR: forbidden to sell\\\"); // sell Whitelist lock\\n            } else {\\n                // require(lastBuyTime[_from] > 0, \\\"N3DR: forbidden to sell before buy\\\");\\n                // user can sell N3DR after buy N3DR 1 hour\\n                require(\\n                    block.timestamp >= lastBuyTime[_from].add(sellAfterBuySeconds),\\n                    \\\"N3DR: holding time is too short\\\"\\n                );\\n            }\\n\\n            // only can sell 99% of balance\\n            uint256 _balance = _balances[_from];\\n            if (_amount >= _balance) {\\n                _amount = _balance.mul(99).div(100);\\n            }\\n        }\\n\\n        // add LP\\n        if (_transferType == 3) {\\n            require(!_whitelistLpLock || _swapWhitelist[_from], \\\"N3DR: forbidden add LP\\\"); // LP Whitelist lock\\n        }\\n\\n        // remove LP\\n        if (_transferType == 4) {\\n            require(!_whitelistLpLock || _swapWhitelist[_to], \\\"N3DR: forbidden remove LP\\\"); // LP Whitelist lock\\n        }\\n\\n        if (!isTaxExcluded[_from] && !isTaxTransferTypeExcluded[_transferType]) {\\n            _amountBurn = _amount.mul(taxBurn).div(10000);\\n            _amountFarm = _amount.mul(taxFarm).div(10000);\\n            _amountLottery = _amount.mul(taxLottery).div(10000);\\n            _amountReferral = _amount.mul(taxReferral).div(10000);\\n\\n            // additional sell tax if daily price drop rate > 20%\\n            if (_transferType == 2 && !_isUp && _changeRate > priceProtectionRate) {\\n                _amountLottery = _amountLottery.add(_amount.mul(taxPriceProtection).div(10000));\\n            }\\n        }\\n\\n        uint256 amountTax = _amountBurn.add(_amountFarm).add(_amountLottery).add(_amountReferral);\\n        require(_amount > amountTax, \\\"transfer amount is too small\\\");\\n\\n        _rawTransfer(_from, addressBurn, _amountBurn);\\n        _rawTransfer(_from, addressFarm, _amountFarm);\\n        _rawTransfer(_from, addressLottery, _amountLottery);\\n        _rawTransfer(_from, addressReferral, _amountReferral);\\n        _rawTransfer(_from, _to, _amount.sub(amountTax));\\n\\n        Lottery(addressLottery).onTransfer(_to, _amount, _transferType);\\n        Referral(addressReferral).onTransfer(_from, _to, _amount);\\n\\n        if (_amountFarm > 0) Farm(addressFarm).addReward(_amountFarm, 0);\\n\\n        if (_amountReferral > 0) {\\n            // if buy from LP, find referrer by _to/user\\n            Referral(addressReferral).addReward(_transferType == 1 ? _to : _from, _amountReferral);\\n        }\\n    }\\n\\n    function transferNoTax(address _to, uint256 _amount) public onlyOperator {\\n        updateTodayOpenPrice();\\n        _rawTransfer(_msgSender(), _to, _amount);\\n    }\\n\\n    function updateTodayOpenPrice() public {\\n        uint256 _dayTimeIndex = block.timestamp.div(86400);\\n        if (_dayTimeIndex <= todayTimeIndex) {\\n            return;\\n        }\\n\\n        uint256 _price = getPrice();\\n        if (_price == 0) {\\n            return;\\n        }\\n\\n        todayTimeIndex = _dayTimeIndex;\\n        todayOpenPrice = _price;\\n    }\\n\\n    function addLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountADesired,\\n        uint256 _amountBDesired,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin,\\n        address _to,\\n        uint256 _deadline\\n    ) public lockLp {\\n        require(_tokenA != _tokenB, \\\"N3DR: invalid _tokenA\\\");\\n        require(_tokenA == address(this) || _tokenA == address(quoteToken), \\\"N3DR: invalid _tokenA\\\");\\n        require(_tokenB == address(this) || _tokenB == address(quoteToken), \\\"N3DR: invalid _tokenB\\\");\\n\\n        (uint256 _amountMain, uint256 _amountQuote) = _tokenA == address(this)\\n            ? (_amountADesired, _amountBDesired)\\n            : (_amountBDesired, _amountADesired);\\n        (uint256 _amountMainMin, uint256 _amountQuoteMin) = _tokenA == address(this)\\n            ? (_amountAMin, _amountBMin)\\n            : (_amountBMin, _amountAMin);\\n\\n        _rawTransfer(msg.sender, address(this), _amountMain);\\n        quoteToken.safeTransferFrom(msg.sender, address(this), _amountQuote);\\n\\n        (uint256 _amountMainUsed, uint256 _amountQuoteUsed, ) = router.addLiquidity(\\n            address(this),\\n            address(quoteToken),\\n            _amountMain,\\n            _amountQuote,\\n            _amountMainMin,\\n            _amountQuoteMin,\\n            _to,\\n            _deadline\\n        );\\n\\n        _rawTransfer(address(this), msg.sender, _amountMain.sub(_amountMainUsed));\\n        if (_amountQuote > _amountQuoteUsed) {\\n            quoteToken.safeTransfer(msg.sender, _amountQuote.sub(_amountQuoteUsed));\\n        }\\n    }\\n\\n    function removeLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _liquidity,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin,\\n        address _to,\\n        uint256 _deadline\\n    ) public lockLp {\\n        require(_tokenA != _tokenB, \\\"N3DR: invalid _tokenA\\\");\\n        require(_tokenA == address(this) || _tokenA == address(quoteToken), \\\"N3DR: invalid _tokenA\\\");\\n        require(_tokenB == address(this) || _tokenB == address(quoteToken), \\\"N3DR: invalid _tokenB\\\");\\n\\n        (uint256 _amountMainMin, uint256 _amountQuoteMin) = _tokenA == address(this)\\n            ? (_amountAMin, _amountBMin)\\n            : (_amountBMin, _amountAMin);\\n\\n        IERC20 _tokenLp = IERC20(address(pair));\\n        _tokenLp.safeTransferFrom(msg.sender, address(this), _liquidity);\\n        router.removeLiquidity(\\n            address(this),\\n            address(quoteToken),\\n            _liquidity,\\n            _amountMainMin,\\n            _amountQuoteMin,\\n            _to,\\n            _deadline\\n        );\\n    }\\n\\n    // 1e18 units N3DR token = how many units quote token\\n    function getPrice() public view returns (uint256) {\\n        address _token0 = pair.token0();\\n        (uint256 _reserve0, uint256 _reserve1, ) = pair.getReserves();\\n        (uint256 _main, uint256 _quote) = address(quoteToken) == _token0\\n            ? (_reserve1, _reserve0)\\n            : (_reserve0, _reserve1);\\n        return _main == 0 ? 0 : _quote.mul(1e18).div(_main);\\n    }\\n\\n    // \u2031 change rate, return 1000 means price change 10%\\n    function getDailyPriceChange() public view returns (bool _isUp, uint256 _changeRate) {\\n        if (todayOpenPrice == 0) {\\n            return (_isUp, _changeRate);\\n        }\\n\\n        uint256 _lastPrice = getPrice();\\n        _isUp = _lastPrice > todayOpenPrice;\\n        uint256 _change = _isUp ? _lastPrice.sub(todayOpenPrice) : todayOpenPrice.sub(_lastPrice);\\n        _changeRate = _change.mul(10000).div(todayOpenPrice);\\n        return (_isUp, _changeRate);\\n    }\\n\\n    // 1e18 units LP token value = how many units quote token\\n    function getLpPrice() public view returns (uint256) {\\n        uint256 _total = pair.totalSupply();\\n        address _token0 = pair.token0();\\n        (uint256 _reserve0, uint256 _reserve1, ) = pair.getReserves();\\n        uint256 _quote = address(quoteToken) == _token0 ? _reserve0 : _reserve1;\\n        return _total == 0 ? 0 : _quote.mul(2).mul(1e18).div(_total);\\n    }\\n\\n    // get user' LP value in quote token. (including farm deposit)\\n    function getLpValue(address _user) public view returns (uint256) {\\n        uint256 _lpAmount = pair.balanceOf(_user).add(Farm(addressFarm).getUserDepositAmount(_user));\\n        uint256 _lpPrice = getLpPrice();\\n        return _lpAmount.mul(_lpPrice).div(1e18);\\n    }\\n\\n    function rescue(\\n        address _token,\\n        address payable _to,\\n        uint256 _amount\\n    ) public onlyOwner {\\n        if (_token == address(0)) {\\n            (bool success, ) = _to.call{ gas: 23000, value: _amount }(\\\"\\\");\\n            require(success, \\\"transferETH failed\\\");\\n        } else {\\n            IERC20(_token).safeTransfer(_to, _amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport \\\"./IPancakeRouter01.sol\\\";\\n\\ninterface IPancakeRouter is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/N3DR/Farm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Farm is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    struct UserInfo {\\n        uint256 amount; // The Token amount user deposited.\\n        uint256 startTime; // The timestamp user deposited last.\\n        uint256 endTime; // The timestamp deposit token unlock.\\n        uint256 mainRewardTotal; // Total main reward token amount. (update when user deposit/withdraw/takeReward)\\n        uint256 mainRewardTaked; // Taked main reward token amount. (update when user takeReward)\\n        uint256 mainRewardDebt; // Debt main reward token amount. (update when user deposit/withdraw/takeReward)\\n        uint256 lpRewardTotal; // Total LP reward token amount. (update when user deposit/withdraw/takeReward)\\n        uint256 lpRewardTaked; // Taked LP reward token amount. (update when user takeReward)\\n        uint256 lpRewardDebt; // Debt LP reward token amount. (update when user deposit/withdraw/takeReward)\\n    }\\n\\n    struct PoolInfo {\\n        uint256 amount; // The Token amount all users deposited.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. (PreDeposit pool is 0)\\n        uint256 lockHours; // How long deposit token locked. (PreDeposit pool = 100 days, 7 days, 14 days, 28 days)\\n        uint256 mainRewardAmountTotal; // Total main token reward amount. (update every day)\\n        uint256 mainRewardAmountLast; // Last time main token reward amount. (update every day)\\n        uint256 mainRewardRateLast; // Last time main token reward amount per 1e18 deposit token. (update every day)\\n        uint256 mainAccPerShare; // Accumulated main token reward per share, times 1e12.\\n        uint256 lpRewardAmountTotal; // Total LP token reward amount. (update every week)\\n        uint256 lpRewardAmountLast; // Last time LP token reward amount. (update every week)\\n        uint256 lpRewardRateLast; // Last time LP token reward amount per 1e18 deposit token. (update every week)\\n        uint256 lpAccPerShare; // Accumulated LP token reward per share, times 1e12.\\n        bool isLinearRelease; // If release locked deposit token linearly. (Only PreDeposit pool should set true)\\n        bool shareWithPreDeposit; // If share reward with PreDeposit pool. (Only 28 days pool should set true)\\n    }\\n\\n    bool private _paused;\\n    mapping(address => bool) public operators;\\n\\n    IERC20 public depositToken; // Deposit this token to get reward.\\n\\n    IERC20 public mainRewardToken; // Distribute main reward token from transfer tax.\\n    IERC20 public lpRewardToken; // Distribute LP reward token every week.\\n    uint256 public mainRewardPending; // Pending main reward token amount.\\n    uint256 public lpRewardPending; // Pending LP reward token amount.\\n    uint256 public mainRewardDispersed; // Dispersed main reward token amount.\\n    uint256 public lpRewardDispersed; // Dispersed LP reward token amount.\\n\\n    uint256 public preDepositPid; // PreDeposit pool lock 100 days and release linearly.\\n    PoolInfo[] private _pools; // All pools info.\\n    uint256 public totalAllocPoint; // Total allocation points of all pool.\\n    mapping(address => mapping(uint256 => UserInfo)) private _users; // All users info. (user address => pool index => user info)\\n\\n    address[] private _depositedUsers; // All users address who has deposited.\\n    mapping(address => bool) private _depositedUserAdded; // All users address who has deposited.\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event TakeReward(address indexed user, uint256 indexed pid, uint256 mainReward, uint256 lpReward);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    constructor() {\\n        _paused = false;\\n        operators[msg.sender] = true;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operators[msg.sender], \\\"Operator: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    //////////////////////////////////////////\\n    ///////////// admin functions ////////////\\n    //////////////////////////////////////////\\n\\n    function setPaused(bool paused_) public onlyOwner {\\n        _paused = paused_;\\n    }\\n\\n    function setOperator(address _operator, bool _enabled) public onlyOwner {\\n        operators[_operator] = _enabled;\\n    }\\n\\n    function setTokenAddress(\\n        IERC20 _depositToken,\\n        IERC20 _mainRewardToken,\\n        IERC20 _lpRewardToken\\n    ) public onlyOwner {\\n        depositToken = _depositToken;\\n        mainRewardToken = _mainRewardToken;\\n        lpRewardToken = _lpRewardToken;\\n    }\\n\\n    function updateTotalAllocPoint() public onlyOwner {\\n        uint256 _totalAllocPoint = 0;\\n        for (uint256 index = 0; index < _pools.length; index++) {\\n            _totalAllocPoint = _totalAllocPoint.add(_pools[index].allocPoint);\\n        }\\n        totalAllocPoint = _totalAllocPoint;\\n    }\\n\\n    function addPool(\\n        uint256 _allocPoint,\\n        uint256 _lockHours,\\n        bool _isLinearRelease,\\n        bool _shareWithPreDeposit\\n    ) public onlyOwner {\\n        _pools.push(\\n            PoolInfo({\\n                amount: 0,\\n                allocPoint: _allocPoint,\\n                lockHours: _lockHours,\\n                mainRewardAmountTotal: 0,\\n                mainRewardAmountLast: 0,\\n                mainRewardRateLast: 0,\\n                mainAccPerShare: 0,\\n                lpRewardAmountTotal: 0,\\n                lpRewardAmountLast: 0,\\n                lpRewardRateLast: 0,\\n                lpAccPerShare: 0,\\n                isLinearRelease: _isLinearRelease,\\n                shareWithPreDeposit: _shareWithPreDeposit\\n            })\\n        );\\n        updateTotalAllocPoint();\\n    }\\n\\n    function setPool(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint256 _lockHours,\\n        uint256 _mainRewardAmountTotal,\\n        uint256 _mainRewardAmountLast,\\n        uint256 _mainRewardRateLast,\\n        uint256 _lpRewardAmountTotal,\\n        uint256 _lpRewardAmountLast,\\n        uint256 _lpRewardRateLast,\\n        bool _isLinearRelease,\\n        bool _shareWithPreDeposit\\n    ) public onlyOwner {\\n        require(_pid < _pools.length, \\\"Farm: pool index out of range\\\");\\n        _pools[_pid].allocPoint = _allocPoint;\\n        _pools[_pid].lockHours = _lockHours;\\n        _pools[_pid].mainRewardAmountTotal = _mainRewardAmountTotal;\\n        _pools[_pid].mainRewardAmountLast = _mainRewardAmountLast;\\n        _pools[_pid].mainRewardRateLast = _mainRewardRateLast;\\n        _pools[_pid].lpRewardAmountTotal = _lpRewardAmountTotal;\\n        _pools[_pid].lpRewardAmountLast = _lpRewardAmountLast;\\n        _pools[_pid].lpRewardRateLast = _lpRewardRateLast;\\n        _pools[_pid].isLinearRelease = _isLinearRelease;\\n        _pools[_pid].shareWithPreDeposit = _shareWithPreDeposit;\\n        updateTotalAllocPoint();\\n    }\\n\\n    function setPreDepositPid(uint256 _pid) public onlyOwner {\\n        require(_pid < _pools.length, \\\"Farm: pool index out of range\\\");\\n        preDepositPid = _pid;\\n    }\\n\\n    // Transfer reward to this contract firstly, then call this function\\n    function addReward(uint256 _mainReward, uint256 _lpReward) public onlyOperator {\\n        if (_mainReward == 0 && _lpReward == 0) {\\n            return;\\n        }\\n\\n        mainRewardPending = mainRewardPending.add(_mainReward);\\n        lpRewardPending = lpRewardPending.add(_lpReward);\\n    }\\n\\n    function disperseMainReward() public onlyOperator {\\n        if (mainRewardPending == 0 || totalAllocPoint == 0) {\\n            return;\\n        }\\n\\n        uint256 _rewards = 0;\\n\\n        for (uint256 _pid = 0; _pid < _pools.length; _pid++) {\\n            PoolInfo storage _pool = _pools[_pid];\\n            if (_pid == preDepositPid || _pool.allocPoint == 0) {\\n                continue;\\n            }\\n\\n            uint256 _poolReward = mainRewardPending.mul(_pool.allocPoint).div(totalAllocPoint);\\n            uint256 _poolAmount = _pool.amount;\\n            if (_pool.shareWithPreDeposit) {\\n                _poolAmount = _poolAmount.add(_pools[preDepositPid].amount);\\n            }\\n            if (_poolAmount == 0) {\\n                continue;\\n            }\\n\\n            _pool.mainRewardRateLast = _poolReward.mul(1e18).div(_poolAmount);\\n            _pool.mainRewardAmountLast = _pool.mainRewardRateLast.mul(_pool.amount).div(1e18);\\n            _pool.mainRewardAmountTotal = _pool.mainRewardAmountTotal.add(_pool.mainRewardAmountLast);\\n            if (_pool.amount > 0) {\\n                _pool.mainAccPerShare = _pool.mainAccPerShare.add(\\n                    _pool.mainRewardAmountLast.mul(1e12).div(_pool.amount)\\n                );\\n            }\\n\\n            if (_pool.shareWithPreDeposit) {\\n                PoolInfo storage _prePool = _pools[preDepositPid];\\n                _prePool.mainRewardRateLast = _pool.mainRewardRateLast;\\n                _prePool.mainRewardAmountLast = _prePool.mainRewardRateLast.mul(_prePool.amount).div(1e18);\\n                _prePool.mainRewardAmountTotal = _prePool.mainRewardAmountTotal.add(_prePool.mainRewardAmountLast);\\n                if (_prePool.amount > 0) {\\n                    _prePool.mainAccPerShare = _prePool.mainAccPerShare.add(\\n                        _prePool.mainRewardAmountLast.mul(1e12).div(_prePool.amount)\\n                    );\\n                }\\n            }\\n\\n            _rewards = _rewards.add(_poolReward);\\n        }\\n\\n        mainRewardPending = mainRewardPending.sub(_rewards);\\n        mainRewardDispersed = mainRewardDispersed.add(_rewards);\\n    }\\n\\n    function disperseLpReward() public onlyOperator {\\n        if (lpRewardPending == 0 || totalAllocPoint == 0) {\\n            return;\\n        }\\n\\n        uint256 _rewards = 0;\\n\\n        for (uint256 _pid = 0; _pid < _pools.length; _pid++) {\\n            PoolInfo storage _pool = _pools[_pid];\\n            if (_pid == preDepositPid || _pool.allocPoint == 0) {\\n                continue;\\n            }\\n\\n            uint256 _poolReward = lpRewardPending.mul(_pool.allocPoint).div(totalAllocPoint);\\n            uint256 _poolAmount = _pool.amount;\\n            if (_pool.shareWithPreDeposit) {\\n                _poolAmount = _poolAmount.add(_pools[preDepositPid].amount);\\n            }\\n            if (_poolAmount == 0) {\\n                continue;\\n            }\\n\\n            _pool.lpRewardRateLast = _poolReward.mul(1e18).div(_poolAmount);\\n            _pool.lpRewardAmountLast = _pool.lpRewardRateLast.mul(_pool.amount).div(1e18);\\n            _pool.lpRewardAmountTotal = _pool.lpRewardAmountTotal.add(_pool.lpRewardAmountLast);\\n            if (_pool.amount > 0) {\\n                _pool.lpAccPerShare = _pool.lpAccPerShare.add(_pool.lpRewardAmountLast.mul(1e12).div(_pool.amount));\\n            }\\n\\n            if (_pool.shareWithPreDeposit) {\\n                PoolInfo storage _prePool = _pools[preDepositPid];\\n                _prePool.lpRewardRateLast = _pool.lpRewardRateLast;\\n                _prePool.lpRewardAmountLast = _prePool.lpRewardRateLast.mul(_prePool.amount).div(1e18);\\n                _prePool.lpRewardAmountTotal = _prePool.lpRewardAmountTotal.add(_prePool.lpRewardAmountLast);\\n                if (_prePool.amount > 0) {\\n                    _prePool.lpAccPerShare = _prePool.lpAccPerShare.add(\\n                        _prePool.lpRewardAmountLast.mul(1e12).div(_prePool.amount)\\n                    );\\n                }\\n            }\\n\\n            _rewards = _rewards.add(_poolReward);\\n        }\\n\\n        lpRewardPending = lpRewardPending.sub(_rewards);\\n        lpRewardDispersed = lpRewardDispersed.add(_rewards);\\n    }\\n\\n    // deposit for _to but use msg.sender's balance.\\n    function _deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        require(_pid < _pools.length, \\\"Farm: pool index out of range\\\");\\n        PoolInfo storage _pool = _pools[_pid];\\n        UserInfo storage _user = _users[_to][_pid];\\n\\n        depositToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        // settle rewards for previously amount\\n        _user.mainRewardTotal = _user.mainRewardTotal.add(\\n            _user.amount.mul(_pool.mainAccPerShare).div(1e12).sub(_user.mainRewardDebt)\\n        );\\n        _user.lpRewardTotal = _user.lpRewardTotal.add(\\n            _user.amount.mul(_pool.lpAccPerShare).div(1e12).sub(_user.lpRewardDebt)\\n        );\\n\\n        _pool.amount = _pool.amount.add(_amount);\\n        _user.amount = _user.amount.add(_amount);\\n        _user.startTime = block.timestamp;\\n        _user.endTime = block.timestamp + _pool.lockHours.mul(3600);\\n        _user.mainRewardDebt = _user.amount.mul(_pool.mainAccPerShare).div(1e12);\\n        _user.lpRewardDebt = _user.amount.mul(_pool.lpAccPerShare).div(1e12);\\n\\n        if (!_depositedUserAdded[_to]) {\\n            _depositedUsers.push(_to);\\n            _depositedUserAdded[_to] = true;\\n        }\\n\\n        emit Deposit(_to, _pid, _amount);\\n    }\\n\\n    function preDeposit(uint256 _amount, address _to) public onlyOperator {\\n        _deposit(preDepositPid, _amount, _to);\\n    }\\n\\n    function multiPreDeposit(uint256 _amount, address[] memory _toes) public onlyOperator {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        for (uint256 i = 0; i < _toes.length; i++) {\\n            preDeposit(_amount, _toes[i]);\\n        }\\n    }\\n\\n    function rescue(\\n        address _token,\\n        address payable _to,\\n        uint256 _amount\\n    ) public onlyOwner {\\n        if (_token == address(0)) {\\n            (bool success, ) = _to.call{ gas: 23000, value: _amount }(\\\"\\\");\\n            require(success, \\\"transferETH failed\\\");\\n        } else {\\n            IERC20(_token).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    //////////////////////////////////////////\\n    ///////////// user functions /////////////\\n    //////////////////////////////////////////\\n\\n    function deposit(uint256 _pid, uint256 _amount) public whenNotPaused {\\n        require(_pid != preDepositPid, \\\"Farm: pool index wrong\\\");\\n        _deposit(_pid, _amount, msg.sender);\\n    }\\n\\n    function takeReward(uint256 _pid) public whenNotPaused {\\n        PoolInfo memory _pool = _pools[_pid];\\n        UserInfo storage _user = _users[msg.sender][_pid];\\n\\n        uint256 _mainRewardDebt = _user.amount.mul(_pool.mainAccPerShare).div(1e12);\\n        uint256 _lpRewardDebt = _user.amount.mul(_pool.lpAccPerShare).div(1e12);\\n        _user.mainRewardTotal = _user.mainRewardTotal.add(_mainRewardDebt.sub(_user.mainRewardDebt));\\n        _user.lpRewardTotal = _user.lpRewardTotal.add(_lpRewardDebt.sub(_user.lpRewardDebt));\\n        _user.mainRewardDebt = _mainRewardDebt;\\n        _user.lpRewardDebt = _lpRewardDebt;\\n\\n        uint256 _mainReward = _user.mainRewardTotal.sub(_user.mainRewardTaked);\\n        uint256 _lpReward = _user.lpRewardTotal.sub(_user.lpRewardTaked);\\n\\n        if (_mainReward == 0 && _lpReward == 0) {\\n            return;\\n        }\\n\\n        if (_mainReward > 0) {\\n            mainRewardToken.safeTransfer(msg.sender, _mainReward);\\n            _user.mainRewardTaked = _user.mainRewardTaked.add(_mainReward);\\n        }\\n\\n        if (_lpReward > 0) {\\n            lpRewardToken.safeTransfer(msg.sender, _lpReward);\\n            _user.lpRewardTaked = _user.lpRewardTaked.add(_lpReward);\\n        }\\n\\n        emit TakeReward(msg.sender, _pid, _mainReward, _lpReward);\\n    }\\n\\n    function canWithdrawAmount(uint256 _pid, address _user) public view returns (uint256) {\\n        UserInfo memory _u = _users[_user][_pid];\\n        uint256 _amount = 0;\\n        uint256 _now = block.timestamp;\\n\\n        if (_pools[_pid].isLinearRelease && _u.endTime > _u.startTime) {\\n            _amount = _u.amount.mul(_now.sub(_u.startTime)).div(_u.endTime.sub(_u.startTime));\\n        } else {\\n            if (_now > _u.endTime) _amount = _u.amount;\\n        }\\n\\n        return _amount > _u.amount ? _u.amount : _amount;\\n    }\\n\\n    function withdraw(uint256 _pid, uint256 _amount) public whenNotPaused {\\n        require(_pid < _pools.length, \\\"Farm: pool index out of range\\\");\\n        PoolInfo storage _pool = _pools[_pid];\\n        UserInfo storage _user = _users[msg.sender][_pid];\\n\\n        uint256 _canWithdrawAmount = canWithdrawAmount(_pid, msg.sender);\\n        require(_amount <= _canWithdrawAmount, \\\"Farm: withdraw amount too much or time too early\\\");\\n\\n        if (_pool.isLinearRelease) {\\n            _amount = _canWithdrawAmount;\\n            _user.startTime = block.timestamp;\\n        }\\n\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        // settle rewards for previously amount\\n        _user.mainRewardTotal = _user.mainRewardTotal.add(\\n            _user.amount.mul(_pool.mainAccPerShare).div(1e12).sub(_user.mainRewardDebt)\\n        );\\n        _user.lpRewardTotal = _user.lpRewardTotal.add(\\n            _user.amount.mul(_pool.lpAccPerShare).div(1e12).sub(_user.lpRewardDebt)\\n        );\\n\\n        _pool.amount = _pool.amount.sub(_amount);\\n        _user.amount = _user.amount.sub(_amount);\\n        _user.mainRewardDebt = _user.amount.mul(_pool.mainAccPerShare).div(1e12);\\n        _user.lpRewardDebt = _user.amount.mul(_pool.lpAccPerShare).div(1e12);\\n\\n        depositToken.safeTransfer(msg.sender, _amount);\\n        emit Deposit(msg.sender, _pid, _amount);\\n\\n        if (_user.amount == 0) {\\n            takeReward(_pid);\\n        }\\n    }\\n\\n    function poolLength() public view returns (uint256) {\\n        return _pools.length;\\n    }\\n\\n    function pool(uint256 _pid) public view returns (PoolInfo memory) {\\n        require(_pid < _pools.length, \\\"Farm: pool index out of range\\\");\\n        return _pools[_pid];\\n    }\\n\\n    function userLength() public view returns (uint256) {\\n        return _depositedUsers.length;\\n    }\\n\\n    function users(uint256 _startIndex, uint256 _endIndex) public view returns (address[] memory) {\\n        if (_depositedUsers.length == 0) {\\n            return new address[](0);\\n        }\\n\\n        if (_endIndex == 0) {\\n            _endIndex = _depositedUsers.length - 1;\\n        }\\n\\n        address[] memory users_ = new address[](_endIndex - _startIndex + 1);\\n\\n        for (uint256 index = _startIndex; index <= _endIndex; index++) {\\n            users_[index - _startIndex] = _depositedUsers[index];\\n        }\\n\\n        return users_;\\n    }\\n\\n    function userInfo(uint256 _pid, address _user) public view returns (UserInfo memory) {\\n        PoolInfo memory _pool = _pools[_pid];\\n        UserInfo memory user_ = _users[_user][_pid];\\n\\n        uint256 _mainRewardDebt = user_.amount.mul(_pool.mainAccPerShare).div(1e12);\\n        uint256 _lpRewardDebt = user_.amount.mul(_pool.lpAccPerShare).div(1e12);\\n        user_.mainRewardTotal = user_.mainRewardTotal.add(_mainRewardDebt.sub(user_.mainRewardDebt));\\n        user_.lpRewardTotal = user_.lpRewardTotal.add(_lpRewardDebt.sub(user_.lpRewardDebt));\\n        user_.mainRewardDebt = _mainRewardDebt;\\n        user_.lpRewardDebt = _lpRewardDebt;\\n\\n        return user_;\\n    }\\n\\n    function getDepositAmount() public view returns (uint256) {\\n        uint256 _amount = 0;\\n\\n        for (uint256 _pid = 0; _pid < _pools.length; _pid++) {\\n            _amount = _amount.add(_pools[_pid].amount);\\n        }\\n\\n        return _amount;\\n    }\\n\\n    function getUserDepositAmount(address _user) public view returns (uint256) {\\n        uint256 _amount = 0;\\n\\n        for (uint256 _pid = 0; _pid < _pools.length; _pid++) {\\n            _amount = _amount.add(_users[_user][_pid].amount);\\n        }\\n\\n        return _amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/N3DR/Referral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./N3DR.sol\\\";\\nimport \\\"./Lottery.sol\\\";\\n\\ncontract Referral is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    struct RewardInfo {\\n        address user;\\n        uint256 rewardAmount;\\n    }\\n\\n    mapping(address => bool) public operators;\\n\\n    N3DR public mainToken; // N3DR token address.\\n    Lottery public lottery; // Lottery contract address.\\n    uint256 public minRecordReferralAmount; // Record pending referral if referrer transfer to user amount >= this value.\\n    uint256 public minReturnReferralAmount; // Record referral if user transfer to pending referrer amount >= this value.\\n    uint256 public minActiveReferralValue; // Active referral if LP token value in quote token >= this value.\\n    uint256[] public rewardRates; // \u2031 of transfer amount. (#0 means user himself, #1 means user's 1 level referrer, ...)\\n\\n    mapping(address => mapping(address => bool)) public pendingReferrerToUser; // referrer => user => isPending\\n    mapping(address => address) public referrerOfUser; // user => referrer\\n    mapping(address => address[]) public usersOfReferrer; // referrer => user list\\n\\n    uint256 public thisPeriod = 0; // Update every week.\\n    mapping(address => uint256) public rewards; // Reward summary for every referrer.\\n    mapping(uint256 => mapping(address => uint256)) public rewardsOfPeriod; // Reward summary for every referrer and every period.\\n    address[] private _rewardUsers; // All users address who get reward.\\n    mapping(address => bool) private _rewardUserAdded; // All users address who get reward.\\n\\n    event RecordReferral(address indexed user, address indexed referrer);\\n\\n    constructor() {\\n        operators[msg.sender] = true;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operators[msg.sender], \\\"Operator: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    //////////////////////////////////////////\\n    ///////////// admin functions ////////////\\n    //////////////////////////////////////////\\n\\n    function setOperator(address _operator, bool _enabled) public onlyOwner {\\n        operators[_operator] = _enabled;\\n    }\\n\\n    function setConfig(\\n        address _mainToken,\\n        address _lottery,\\n        uint256 _minRecordReferralAmount,\\n        uint256 _minReturnReferralAmount,\\n        uint256 _minActiveReferralValue\\n    ) public onlyOwner {\\n        mainToken = N3DR(_mainToken);\\n        lottery = Lottery(_lottery);\\n        minRecordReferralAmount = _minRecordReferralAmount;\\n        minReturnReferralAmount = _minReturnReferralAmount;\\n        minActiveReferralValue = _minActiveReferralValue;\\n    }\\n\\n    function setRewardRates(uint256[] memory _rewardRates) public onlyOwner {\\n        uint256 _rates = 0;\\n        for (uint256 index = 0; index < _rewardRates.length; index++) {\\n            _rates = _rates.add(_rewardRates[index]);\\n        }\\n\\n        require(_rewardRates[0] == 0, \\\"Referral: wrong reward rates of index 0\\\");\\n        require(_rates <= mainToken.taxReferral(), \\\"Referral: wrong reward rates\\\");\\n        rewardRates = _rewardRates;\\n    }\\n\\n    function setThisPeriod(uint256 _thisPeriod) public onlyOwner {\\n        thisPeriod = _thisPeriod;\\n    }\\n\\n    // Call this function when someone transfer main token.\\n    function onTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) public onlyOperator {\\n        // transfer amount too small\\n        if (_amount < minRecordReferralAmount && _amount < minReturnReferralAmount) {\\n            return;\\n        }\\n\\n        // record referral already\\n        if (referrerOfUser[_from] == _to || referrerOfUser[_to] == _from) {\\n            return;\\n        }\\n\\n        // invalid transfer address\\n        if (_from == _to || _from == address(0) || _to == address(0) || _from.isContract() || _to.isContract()) {\\n            return;\\n        }\\n\\n        if (\\n            _amount >= minReturnReferralAmount &&\\n            pendingReferrerToUser[_to][_from] &&\\n            referrerOfUser[_from] == address(0)\\n        ) {\\n            referrerOfUser[_from] = _to;\\n            usersOfReferrer[_to].push(_from);\\n            emit RecordReferral(_from, _to);\\n            return;\\n        }\\n\\n        if (_amount >= minRecordReferralAmount && !pendingReferrerToUser[_from][_to]) {\\n            pendingReferrerToUser[_from][_to] = true;\\n        }\\n    }\\n\\n    // Transfer reward to this contract firstly, then call this function.\\n    function addReward(address _transferFrom, uint256 _rewardAmount) public onlyOperator {\\n        if (_rewardAmount == 0) {\\n            return;\\n        }\\n\\n        uint256 _remainingReward = _rewardAmount;\\n        uint256 _taxReferral = mainToken.taxReferral();\\n\\n        for (uint256 _level = 1; _level < rewardRates.length; _level++) {\\n            address _referrer = getReferrerByLevel(_transferFrom, _level);\\n            if (_referrer == address(0)) {\\n                break;\\n            }\\n\\n            if (!isActiveUser(_referrer)) {\\n                continue;\\n            }\\n\\n            uint256 _activeUsers = countActiveUsers(_referrer, _level);\\n            if (_activeUsers < _level) {\\n                continue;\\n            }\\n\\n            uint256 _reward = _rewardAmount.mul(rewardRates[_level]).div(_taxReferral);\\n            mainToken.transferNoTax(_referrer, _reward);\\n            _remainingReward = _remainingReward.sub(_reward);\\n\\n            if (_reward > 0) {\\n                rewards[_referrer] = rewards[_referrer].add(_reward);\\n                rewardsOfPeriod[thisPeriod][_referrer] = rewardsOfPeriod[thisPeriod][_referrer].add(_reward);\\n\\n                if (!_rewardUserAdded[_referrer]) {\\n                    _rewardUsers.push(_referrer);\\n                    _rewardUserAdded[_referrer] = true;\\n                }\\n            }\\n        }\\n\\n        mainToken.transferNoTax(address(lottery), _remainingReward);\\n        lottery.tryEndAndDarw();\\n    }\\n\\n    function rescue(\\n        address _token,\\n        address payable _to,\\n        uint256 _amount\\n    ) public onlyOwner {\\n        if (_token == address(0)) {\\n            (bool success, ) = _to.call{ gas: 23000, value: _amount }(\\\"\\\");\\n            require(success, \\\"transferETH failed\\\");\\n        } else {\\n            IERC20(_token).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    //////////////////////////////////////////\\n    ///////////// user functions /////////////\\n    //////////////////////////////////////////\\n\\n    function rewardRatesLength() public view returns (uint256) {\\n        return rewardRates.length;\\n    }\\n\\n    function referralUserLength(address _referrer) public view returns (uint256) {\\n        return usersOfReferrer[_referrer].length;\\n    }\\n\\n    function userLength() public view returns (uint256) {\\n        return _rewardUsers.length;\\n    }\\n\\n    function users(uint256 _startIndex, uint256 _endIndex) public view returns (address[] memory) {\\n        if (_rewardUsers.length == 0) {\\n            return new address[](0);\\n        }\\n\\n        if (_endIndex == 0) {\\n            _endIndex = _rewardUsers.length - 1;\\n        }\\n\\n        address[] memory users_ = new address[](_endIndex - _startIndex + 1);\\n\\n        for (uint256 index = _startIndex; index <= _endIndex; index++) {\\n            users_[index - _startIndex] = _rewardUsers[index];\\n        }\\n\\n        return users_;\\n    }\\n\\n    function userRewards(uint256 _startIndex, uint256 _endIndex) public view returns (RewardInfo[] memory) {\\n        if (_rewardUsers.length == 0) {\\n            return new RewardInfo[](0);\\n        }\\n\\n        if (_endIndex == 0) {\\n            _endIndex = _rewardUsers.length - 1;\\n        }\\n\\n        RewardInfo[] memory _rewards = new RewardInfo[](_endIndex - _startIndex + 1);\\n\\n        for (uint256 index = _startIndex; index <= _endIndex; index++) {\\n            address _user = _rewardUsers[index];\\n            _rewards[index - _startIndex] = RewardInfo({ user: _user, rewardAmount: rewards[_user] });\\n        }\\n\\n        return _rewards;\\n    }\\n\\n    function userRewardsOfPeriod(\\n        uint256 _period,\\n        uint256 _startIndex,\\n        uint256 _endIndex\\n    ) public view returns (RewardInfo[] memory) {\\n        if (_rewardUsers.length == 0) {\\n            return new RewardInfo[](0);\\n        }\\n\\n        if (_endIndex == 0) {\\n            _endIndex = _rewardUsers.length - 1;\\n        }\\n\\n        RewardInfo[] memory _rewards = new RewardInfo[](_endIndex - _startIndex + 1);\\n\\n        for (uint256 index = _startIndex; index <= _endIndex; index++) {\\n            address _user = _rewardUsers[index];\\n            _rewards[index - _startIndex] = RewardInfo({ user: _user, rewardAmount: rewardsOfPeriod[_period][_user] });\\n        }\\n\\n        return _rewards;\\n    }\\n\\n    // return true if the value is present in the list\\n    function _contains(address[] memory _list, address _a) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _list.length; i++) {\\n            if (_list[i] == _a) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getReferrerByLevel(address _user, uint256 _level) public view returns (address) {\\n        address _referrer = address(0);\\n        address[] memory _found = new address[](_level + 1);\\n        _found[0] = _user;\\n\\n        for (uint256 _l = 1; _l <= _level; _l++) {\\n            _referrer = referrerOfUser[_user];\\n            if (_referrer == address(0) || _contains(_found, _referrer)) {\\n                return address(0);\\n            }\\n\\n            _user = _referrer;\\n            _found[_l] = _referrer;\\n        }\\n\\n        return _referrer;\\n    }\\n\\n    function isActiveUser(address _user) public view returns (bool) {\\n        return mainToken.getLpValue(_user) >= minActiveReferralValue;\\n    }\\n\\n    function countActiveUsers(address _referrer, uint256 _limit) public view returns (uint256) {\\n        if (_limit == 0) {\\n            _limit = rewardRates.length;\\n        }\\n\\n        uint256 _count = 0;\\n        address[] memory users_ = usersOfReferrer[_referrer];\\n        for (uint256 index = 0; index < users_.length; index++) {\\n            if (isActiveUser(users_[index])) {\\n                _count++;\\n            }\\n\\n            if (_count >= _limit) {\\n                break;\\n            }\\n        }\\n\\n        return _count;\\n    }\\n\\n    function usersLengthOfReferrer(address _referrer) public view returns (uint256) {\\n        return usersOfReferrer[_referrer].length;\\n    }\\n\\n    function getUsersOfReferrer(\\n        address _referrer,\\n        uint256 _startIndex,\\n        uint256 _endIndex\\n    ) public view returns (address[] memory) {\\n        address[] memory users_ = usersOfReferrer[_referrer];\\n        if (users_.length == 0) {\\n            return new address[](0);\\n        }\\n\\n        if (_endIndex == 0) {\\n            _endIndex = users_.length - 1;\\n        }\\n\\n        address[] memory _users1 = new address[](_endIndex - _startIndex + 1);\\n        for (uint256 i = _startIndex; i <= _endIndex; i++) {\\n            _users1[i - _startIndex] = users_[i];\\n        }\\n\\n        return _users1;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/N3DR/Lottery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\nimport \\\"./N3DR.sol\\\";\\n\\ncontract Lottery is Ownable, VRFConsumerBaseV2 {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    struct OrderInfo {\\n        uint256 id;\\n        address user; // buy order user address\\n        uint256 mainAmount; // buy main token amount\\n        uint256 quoteAmount; // quote token amount for buying main token\\n        uint256 tailNumber; // draw number, (mainAmount / 1e18) % 100\\n        uint256 timestamp; // order block time\\n        uint256 blockNumber; // order block number\\n        uint256 drawDistance; // absolute value of (drawNumber - tailNumber)\\n        uint256 rewardAmount; // reward amount\\n    }\\n\\n    struct LotteryInfo {\\n        uint256 round; // lottery round\\n        uint256 index; // reward index (#0 means the 1st prize, #2 means the 2nd prize, ...)\\n        uint256 mainAmount; // buy main token amount\\n        uint256 quoteAmount; // quote token amount for buying main token\\n        uint256 orderId; // order id\\n        uint256 orderTime; // order block time\\n        uint256 orderBlock; // order block number\\n        uint256 rewardAmount; // reward amount\\n        uint256 rewardTime; // lottery end time\\n        uint256 rewardWithdrawed; // withdrawed reward amount\\n    }\\n\\n    bool private _paused;\\n    mapping(address => bool) public operators;\\n\\n    N3DR public mainToken; // N3DR token address.\\n\\n    // ChainLink config\\n    VRFCoordinatorV2Interface private _vrfCoordinator;\\n    bytes32 private _keyHash;\\n    uint64 private _subId;\\n    uint16 private constant _minConfirmations = 3;\\n    uint32 private constant _callbackGasLimit = 100000;\\n    uint32 private constant _numWords = 1;\\n\\n    uint256 public lastBuyOrderTime; // record the last buy order time\\n    uint256 public rewardPoolCapacity; // reward pool capacity in main token\\n    uint256 public maxRewardPools = 2; // end current round lottery if (MainTokenAmount >= rewardPoolCapacity*maxRewardPools)\\n    uint256 public maxBuyIntervalSeconds = 3600; // 1 hour, end this round lottery if (Now >= lastBuyOrderTime+maxBuyIntervalSeconds)\\n    uint256 public minActiveOrderValue; // active buy order if order value in quote token >= this value.\\n    uint256 public maxCacheActiveOrders = 50; // remove oldest ActiveOrder if the length of cached ActiveOrder > this value.\\n    uint256 public rewardReleaseHours = 168; // 7 days, reward release linearly in 7 days.\\n    uint256 public totalReward; // total reward amount\\n    uint256 public lockedReward; // locked reward amount\\n    uint256[] public rewardRates; // \u2031 of reward amount (#0 means the 1st prize, #2 means the 2nd prize, ...)\\n\\n    uint256 public orderId = 1;\\n    uint256 public lastEndBlock; // avoid end multiple lotteries in one transaction\\n    uint256 public thisRound = 1; // current pending lottery round\\n    uint256 public drawRound = 1; // current darw lottery round\\n    mapping(uint256 => uint256) public rewardPoolOfRound; // lottery round -> reward pool\\n    mapping(uint256 => uint256) public endTimeOfRound; // lottery round -> end timestamp\\n    mapping(uint256 => uint256) public requestIdToRound; // request id -> lottery round\\n    mapping(uint256 => uint256) public randomnessOfRound; // lottery round -> randomness+1\\n    mapping(uint256 => OrderInfo[]) public activeOrders; // lottery round -> active orders\\n    mapping(address => LotteryInfo[]) private _userLotteries; // user -> lotteries\\n\\n    address[] private _lotteryUsers; // All users address who has lotteries.\\n    mapping(address => bool) private _lotteryUserAdded; // All users address who has lotteries.\\n\\n    event NewOrder(uint256 indexed id, uint256 indexed round, address indexed user);\\n    event End(uint256 indexed round, uint256 rewardPool, uint256 activeOrdersLength, uint256 requestId);\\n    event Draw(uint256 indexed round, uint256 rawRandomness, uint256 randomness);\\n    event DisperseReward(uint256 indexed round, address indexed user, uint256 reward);\\n    event TakeReward(address indexed user, uint256 reward);\\n\\n    constructor(address vrfCoordinator_) VRFConsumerBaseV2(vrfCoordinator_) {\\n        _paused = false;\\n        operators[msg.sender] = true;\\n        _vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinator_);\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operators[msg.sender], \\\"Operator: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    //////////////////////////////////////////\\n    ///////////// admin functions ////////////\\n    //////////////////////////////////////////\\n\\n    function setPaused(bool paused_) public onlyOwner {\\n        _paused = paused_;\\n    }\\n\\n    function setOperator(address _operator, bool _enabled) public onlyOwner {\\n        operators[_operator] = _enabled;\\n    }\\n\\n    function setConfig(\\n        address _mainToken,\\n        uint256 _rewardPoolCapacity,\\n        uint256 _maxRewardPools,\\n        uint256 _maxBuyIntervalSeconds,\\n        uint256 _minActiveOrderValue,\\n        uint256 _maxCacheActiveOrders,\\n        uint256 _rewardReleaseHours,\\n        uint256 _totalReward,\\n        uint256 _lockedReward\\n    ) public onlyOwner {\\n        mainToken = N3DR(_mainToken);\\n        rewardPoolCapacity = _rewardPoolCapacity;\\n        maxRewardPools = _maxRewardPools;\\n        maxBuyIntervalSeconds = _maxBuyIntervalSeconds;\\n        minActiveOrderValue = _minActiveOrderValue;\\n        maxCacheActiveOrders = _maxCacheActiveOrders;\\n        rewardReleaseHours = _rewardReleaseHours;\\n        totalReward = _totalReward;\\n        lockedReward = _lockedReward;\\n    }\\n\\n    function setVRFConfig(bytes32 keyHash_, uint64 subId_) public onlyOwner {\\n        _keyHash = keyHash_;\\n        _subId = subId_;\\n    }\\n\\n    function setRewardRates(uint256[] memory _rewardRates) public onlyOwner {\\n        uint256 _rates = 0;\\n        for (uint256 index = 0; index < _rewardRates.length; index++) {\\n            _rates = _rates.add(_rewardRates[index]);\\n        }\\n\\n        require(_rates <= 10000, \\\"Lottery: wrong reward rates\\\");\\n        rewardRates = _rewardRates;\\n    }\\n\\n    // Call this function after someone transfer main token to this contract.\\n    function onTransfer(\\n        address _to,\\n        uint256 _amount,\\n        uint256 _transferType\\n    ) public onlyOperator {\\n        if (_paused) {\\n            return;\\n        }\\n\\n        tryEndAndDarw();\\n\\n        if (_transferType != 1) {\\n            return;\\n        }\\n\\n        lastBuyOrderTime = block.timestamp;\\n\\n        if (_to.isContract()) {\\n            return;\\n        }\\n\\n        uint256 _price = mainToken.getPrice();\\n        uint256 _quoteValue = _amount.mul(_price).div(1e18);\\n        if (_quoteValue < minActiveOrderValue) {\\n            return;\\n        }\\n\\n        OrderInfo[] storage _activeOrders = activeOrders[thisRound];\\n        _activeOrders.push(\\n            OrderInfo({\\n                id: orderId,\\n                user: _to,\\n                mainAmount: _amount,\\n                quoteAmount: _quoteValue,\\n                tailNumber: _amount.div(1e18).mod(100),\\n                timestamp: block.timestamp,\\n                blockNumber: block.number,\\n                drawDistance: 0,\\n                rewardAmount: 0\\n            })\\n        );\\n\\n        emit NewOrder(orderId, thisRound, _to);\\n        orderId++;\\n\\n        // remove first element from _activeOrders\\n        if (_activeOrders.length > maxCacheActiveOrders) {\\n            for (uint256 i = 0; i < _activeOrders.length - 1; i++) {\\n                _activeOrders[i] = _activeOrders[i + 1];\\n            }\\n            _activeOrders.pop();\\n        }\\n    }\\n\\n    function _getWithdrawableRewardByUser(address _user) internal view returns (uint256) {\\n        uint256 _reward = 0;\\n        LotteryInfo[] memory _lotteries = _userLotteries[_user];\\n        for (uint256 i = 0; i < _lotteries.length; i++) {\\n            _reward = _reward.add(getWithdrawableRewardByLottery(_lotteries[i]));\\n        }\\n        return _reward;\\n    }\\n\\n    function _getLotteriesByUser(\\n        address _user,\\n        uint256 _startIndex,\\n        uint256 _endIndex\\n    ) internal view returns (LotteryInfo[] memory) {\\n        LotteryInfo[] memory _allLotteries = _userLotteries[_user];\\n        if (_allLotteries.length == 0) {\\n            return new LotteryInfo[](0);\\n        }\\n\\n        if (_endIndex == 0) {\\n            _endIndex = _allLotteries.length - 1;\\n        }\\n\\n        LotteryInfo[] memory _lotteries = new LotteryInfo[](_endIndex - _startIndex + 1);\\n\\n        for (uint256 index = _startIndex; index <= _endIndex; index++) {\\n            _lotteries[index - _startIndex] = _allLotteries[index];\\n        }\\n\\n        return _lotteries;\\n    }\\n\\n    function rescue(\\n        address _token,\\n        address payable _to,\\n        uint256 _amount\\n    ) public onlyOwner {\\n        if (_token == address(0)) {\\n            (bool success, ) = _to.call{ gas: 23000, value: _amount }(\\\"\\\");\\n            require(success, \\\"transferETH failed\\\");\\n        } else {\\n            IERC20(_token).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal override {\\n        uint256 _round = requestIdToRound[_requestId];\\n        uint256 _randomness = _randomWords[0];\\n        randomnessOfRound[_round] = _randomness.add(1);\\n    }\\n\\n    //////////////////////////////////////////\\n    ///////////// user functions /////////////\\n    //////////////////////////////////////////\\n\\n    function rewardRatesLength() public view returns (uint256) {\\n        return rewardRates.length;\\n    }\\n\\n    function getWithdrawableRewardByUser(address _user) public view returns (uint256) {\\n        return _getWithdrawableRewardByUser(_user);\\n    }\\n\\n    function getLotteriesLengthByUser(address _user) public view returns (uint256) {\\n        return _userLotteries[_user].length;\\n    }\\n\\n    function getLotteriesByUser(\\n        address _user,\\n        uint256 _startIndex,\\n        uint256 _endIndex\\n    ) public view returns (LotteryInfo[] memory) {\\n        return _getLotteriesByUser(_user, _startIndex, _endIndex);\\n    }\\n\\n    function tryEndCurrentRound() public {\\n        if (_paused || !canEnd()) {\\n            return;\\n        }\\n\\n        uint256 _requestId = _vrfCoordinator.requestRandomWords(\\n            _keyHash,\\n            _subId,\\n            _minConfirmations,\\n            _callbackGasLimit,\\n            _numWords\\n        );\\n\\n        uint256 _rewardPool = currentRewardPool();\\n        totalReward = totalReward.add(_rewardPool);\\n        lockedReward = lockedReward.add(_rewardPool);\\n\\n        rewardPoolOfRound[thisRound] = _rewardPool;\\n        endTimeOfRound[thisRound] = block.timestamp;\\n        requestIdToRound[_requestId] = thisRound;\\n        lastEndBlock = block.number;\\n\\n        emit End(thisRound, _rewardPool, activeOrders[thisRound].length, _requestId);\\n        thisRound++;\\n    }\\n\\n    function tryDraw() public {\\n        if (_paused || thisRound <= drawRound) {\\n            return;\\n        }\\n\\n        uint256 _rawRandomness = randomnessOfRound[drawRound];\\n        if (_rawRandomness <= 0) {\\n            return;\\n        }\\n\\n        _rawRandomness = _rawRandomness.sub(1);\\n        uint256 _randomness = _rawRandomness.mod(100);\\n\\n        OrderInfo[] storage _activeOrders = activeOrders[drawRound];\\n\\n        // calculate draw distance\\n        for (uint256 i = 0; i < _activeOrders.length; i++) {\\n            uint256 _tailNumber = _activeOrders[i].tailNumber;\\n            if (_tailNumber > _randomness) {\\n                _activeOrders[i].drawDistance = _tailNumber.sub(_randomness);\\n            } else {\\n                _activeOrders[i].drawDistance = _randomness.sub(_tailNumber);\\n            }\\n        }\\n\\n        // sort _activeOrders by drawDistance ASC and timestamp DESC\\n        for (uint256 i = 0; i < _activeOrders.length; i++) {\\n            for (uint256 j = 0; j < _activeOrders.length - 1 - i; j++) {\\n                if (\\n                    _activeOrders[j].drawDistance > _activeOrders[j + 1].drawDistance ||\\n                    (_activeOrders[j].drawDistance == _activeOrders[j + 1].drawDistance &&\\n                        _activeOrders[j].timestamp < _activeOrders[j + 1].timestamp)\\n                ) {\\n                    OrderInfo memory _tmp = _activeOrders[j];\\n                    _activeOrders[j] = _activeOrders[j + 1];\\n                    _activeOrders[j + 1] = _tmp;\\n                }\\n            }\\n        }\\n\\n        uint256 _drawCount = _activeOrders.length < rewardRates.length ? _activeOrders.length : rewardRates.length;\\n\\n        // sort first _drawCount _activeOrders by quoteAmount DESC and timestamp DESC\\n        for (uint256 i = 0; i < _drawCount; i++) {\\n            for (uint256 j = 0; j < _drawCount - 1 - i; j++) {\\n                if (\\n                    _activeOrders[j].quoteAmount < _activeOrders[j + 1].quoteAmount ||\\n                    (_activeOrders[j].quoteAmount == _activeOrders[j + 1].quoteAmount &&\\n                        _activeOrders[j].timestamp < _activeOrders[j + 1].timestamp)\\n                ) {\\n                    OrderInfo memory _tmp = _activeOrders[j];\\n                    _activeOrders[j] = _activeOrders[j + 1];\\n                    _activeOrders[j + 1] = _tmp;\\n                }\\n            }\\n        }\\n\\n        uint256 _rewardPool = rewardPoolOfRound[drawRound];\\n        uint256 _rewardRemain = _rewardPool;\\n\\n        for (uint256 i = 0; i < rewardRates.length; i++) {\\n            if (i >= _activeOrders.length) {\\n                break;\\n            }\\n\\n            OrderInfo storage _order = _activeOrders[i];\\n            _order.rewardAmount = _rewardPool.mul(rewardRates[i]).div(10000);\\n            LotteryInfo[] storage _lotteries = _userLotteries[_order.user];\\n\\n            _lotteries.push(\\n                LotteryInfo({\\n                    round: drawRound,\\n                    index: i,\\n                    mainAmount: _order.mainAmount,\\n                    quoteAmount: _order.quoteAmount,\\n                    orderId: _order.id,\\n                    orderTime: _order.timestamp,\\n                    orderBlock: _order.blockNumber,\\n                    rewardAmount: _order.rewardAmount,\\n                    rewardTime: block.timestamp,\\n                    rewardWithdrawed: 0\\n                })\\n            );\\n\\n            if (!_lotteryUserAdded[_order.user]) {\\n                _lotteryUsers.push(_order.user);\\n                _lotteryUserAdded[_order.user] = true;\\n            }\\n\\n            _rewardRemain = _rewardRemain.sub(_order.rewardAmount);\\n            emit DisperseReward(drawRound, _order.user, _order.rewardAmount);\\n        }\\n\\n        if (_rewardRemain > 0) {\\n            totalReward = totalReward.sub(_rewardRemain);\\n            lockedReward = lockedReward.sub(_rewardRemain);\\n        }\\n\\n        emit Draw(drawRound, _rawRandomness, _randomness);\\n        drawRound++;\\n    }\\n\\n    function tryEndAndDarw() public {\\n        tryEndCurrentRound();\\n        tryDraw();\\n    }\\n\\n    function getWithdrawableRewardByLottery(LotteryInfo memory _lottery) public view returns (uint256) {\\n        if (_lottery.rewardWithdrawed >= _lottery.rewardAmount) {\\n            return 0;\\n        }\\n\\n        uint256 _now = block.timestamp;\\n        uint256 _amount = _lottery.rewardAmount.mul(_now.sub(_lottery.rewardTime)).div(rewardReleaseHours.mul(3600));\\n        _amount = _amount > _lottery.rewardAmount ? _lottery.rewardAmount : _amount;\\n        _amount = _amount > _lottery.rewardWithdrawed ? _amount.sub(_lottery.rewardWithdrawed) : 0;\\n        return _amount;\\n    }\\n\\n    function takeReward() public whenNotPaused {\\n        if (_getWithdrawableRewardByUser(msg.sender) == 0) {\\n            return;\\n        }\\n\\n        uint256 _rewards = 0;\\n        LotteryInfo[] storage _lotteries = _userLotteries[msg.sender];\\n        for (uint256 i = 0; i < _lotteries.length; i++) {\\n            LotteryInfo storage _lottery = _lotteries[i];\\n            uint256 _reward = getWithdrawableRewardByLottery(_lottery);\\n            _lottery.rewardWithdrawed = _lottery.rewardWithdrawed.add(_reward);\\n            _rewards = _rewards.add(_reward);\\n        }\\n\\n        lockedReward = lockedReward.sub(_rewards);\\n        mainToken.transferNoTax(msg.sender, _rewards);\\n        emit TakeReward(msg.sender, _rewards);\\n    }\\n\\n    function activeOrdersLength(uint256 _round) public view returns (uint256) {\\n        return activeOrders[_round].length;\\n    }\\n\\n    function getActiveOrders(uint256 _round) public view returns (OrderInfo[] memory) {\\n        return activeOrders[_round];\\n    }\\n\\n    function getActiveOrder(uint256 _round, uint256 _index) public view returns (OrderInfo memory) {\\n        OrderInfo[] memory _orders = activeOrders[_round];\\n        if (_index >= _orders.length) {\\n            return\\n                OrderInfo({\\n                    id: 0,\\n                    user: address(0),\\n                    mainAmount: 0,\\n                    quoteAmount: 0,\\n                    tailNumber: 0,\\n                    timestamp: 0,\\n                    blockNumber: 0,\\n                    drawDistance: 0,\\n                    rewardAmount: 0\\n                });\\n        }\\n        return _orders[_index];\\n    }\\n\\n    function pendingReward() public view returns (uint256) {\\n        uint256 _balance = mainToken.balanceOf(address(this));\\n        return _balance > lockedReward ? _balance - lockedReward : 0;\\n    }\\n\\n    function canEnd() public view returns (bool) {\\n        uint256 _pending = pendingReward();\\n        return\\n            block.number != lastEndBlock &&\\n            _pending > 0 &&\\n            rewardPoolCapacity > 0 &&\\n            activeOrders[thisRound].length > 0 &&\\n            (_pending >= rewardPoolCapacity.mul(maxRewardPools) ||\\n                block.timestamp >= lastBuyOrderTime + maxBuyIntervalSeconds);\\n    }\\n\\n    // 1: not start, 2: running, 3: end and wait draw, 4: drawed\\n    function getRoundStatus(uint256 _round) public view returns (uint256) {\\n        if (_round > thisRound) return 1;\\n        if (_round == thisRound) return 2;\\n        if (_round >= drawRound) return 3;\\n        if (_round < drawRound) return 4;\\n        return 0;\\n    }\\n\\n    // current reward pool in main token\\n    function currentRewardPool() public view returns (uint256) {\\n        uint256 _pending = pendingReward();\\n        return _pending > rewardPoolCapacity ? rewardPoolCapacity : _pending;\\n    }\\n\\n    // next reward pool in main token\\n    function nextRewardPool() public view returns (uint256) {\\n        uint256 _pending = pendingReward().sub(currentRewardPool());\\n        return _pending > rewardPoolCapacity ? rewardPoolCapacity : _pending;\\n    }\\n\\n    function getRawRandomness(uint256 _round) public view returns (uint256) {\\n        uint256 _rawRandomness = randomnessOfRound[_round];\\n        if (_rawRandomness <= 0) {\\n            return 0;\\n        }\\n        _rawRandomness = _rawRandomness.sub(1);\\n        return _rawRandomness;\\n    }\\n\\n    function userLength() public view returns (uint256) {\\n        return _lotteryUsers.length;\\n    }\\n\\n    function users(uint256 _startIndex, uint256 _endIndex) public view returns (address[] memory) {\\n        if (_lotteryUsers.length == 0) {\\n            return new address[](0);\\n        }\\n\\n        if (_endIndex == 0) {\\n            _endIndex = _lotteryUsers.length - 1;\\n        }\\n\\n        address[] memory users_ = new address[](_endIndex - _startIndex + 1);\\n\\n        for (uint256 index = _startIndex; index <= _endIndex; index++) {\\n            users_[index - _startIndex] = _lotteryUsers[index];\\n        }\\n\\n        return users_;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeRouter01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressBurn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressLottery\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencilyTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDailyPriceChange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isUp\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_changeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLpValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTaxExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isTaxTransferTypeExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBuyTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProtectionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"selfApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAfterBuySeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setBlocklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused_\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxPriceProtection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceProtectionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellAfterBuySeconds\",\"type\":\"uint256\"}],\"name\":\"setPriceProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"contract IPancakeRouter\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLpWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lottery\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"setTaxAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTaxExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_farm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lottery\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referral\",\"type\":\"uint256\"}],\"name\":\"setTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferType\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTaxTransferTypeExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lpLock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_buyLock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_sellLock\",\"type\":\"bool\"}],\"name\":\"setWhitelistLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxLottery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPriceProtection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"todayOpenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"todayTimeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferNoTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTodayOpenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "N3DR", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000074e656f726465720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044e33445200000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}