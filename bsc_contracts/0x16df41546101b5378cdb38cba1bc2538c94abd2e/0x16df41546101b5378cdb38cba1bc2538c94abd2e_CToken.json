{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity  ^0.8.18;\r\n\r\ninterface  IERC20\r\n{\r\n    function name() external  view  returns (string memory);\r\n    function symbol() external  view  returns (string memory);\r\n    function decimals() external  view  returns (uint8);\r\n    function totalSupply() external  view  returns (uint256);\r\n    function balanceOf(address account) external  view  returns (uint256);\r\n    function transfer(address recipient,uint256 amount) external  returns(bool);\r\n    function allowance(address owner,address spender) external view returns (uint256);\r\n    function approve(address spender,uint256 amount) external  returns (bool);\r\n    function transferFrom(address from,address to,uint256 amount) external  returns(bool);\r\n    event Transfer(address indexed  from,address indexed  recipient,uint256 value);\r\n    event Approval(address indexed  owner,address indexed  spender,uint256 value);    \r\n}\r\n\r\nabstract contract  Ownable\r\n{\r\n    address private  _owner;   \r\n    event OwnershipTransferred(address indexed  from,address indexed  to);\r\n    constructor()\r\n    {\r\n        address sender=msg.sender;\r\n        _owner=sender;\r\n        emit  OwnershipTransferred(address(0), _owner);\r\n    }\r\n    modifier  onlyOwner()\r\n    {\r\n        require(msg.sender==_owner,\"Ownable:only owner can do\");\r\n        _;\r\n    }\r\n    function owner()public   view  returns (address)\r\n    {\r\n        return  _owner;\r\n    }\r\n    function renounceOwnership() public  virtual  onlyOwner\r\n    {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner=address(0);       \r\n    }\r\n\r\n    function transferOwnership(address newOwner) public  virtual  onlyOwner\r\n    {\r\n        require(newOwner!=address(0),\"Ownable: can not transfer ownership to zero address\");\r\n        emit  OwnershipTransferred(_owner, newOwner); \r\n        _owner=newOwner;        \r\n    }    \r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract TokenDistributor {    \r\n    constructor (address token) {        \r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\nabstract contract ABSToken is IERC20,Ownable\r\n{\r\n    using SafeMath for uint256;   \r\n    mapping (address=>uint256) private  _balances;   \r\n    mapping (address=>mapping (address=>uint256)) private _allowances;\r\n\r\n    string private  _name;\r\n    string private  _symbol;\r\n    uint256 private immutable  _tokenTotal;\r\n    address private  _fundAddress; \r\n    address private  _3d46;\r\n    address private  DEAD=address(0x000000000000000000000000000000000000dEaD);\r\n    //address public   _WETHAddress;\r\n\r\n    mapping (address=>bool) private _feeFreeList;\r\n    mapping (address=>bool) private _breakerList;\r\n   \r\n    IUniswapV2Router02 immutable _uniswapv2Router;\r\n    //uniswapv2router bsc mainnet address\uff1a 0x10ED43C718714eb63d5aA57B78B54704E256024E  uniswapv2router bsc testnet address 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3/0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    address private  _swapRouterAddress=address(0x10ED43C718714eb63d5aA57B78B54704E256024E);  \r\n    mapping (address=>bool) public   _uniswapPairs;\r\n    address private   _mainPair;\r\n\r\n    TokenDistributor _buyDistributor;//\u4e70\u5165\u5956\u6c60\u5408\u7ea6\r\n    TokenDistributor _sellDistributor;//\u5356\u51fa\u5956\u6c60\u5408\u7ea6    \r\n\r\n    uint256 private   _fundFee_buy=100;//>\u4e70\u5165\u8425\u9500\u7a0e\r\n    uint256 private   _burnFee_buy=200;//\u4e70\u5165\u9500\u6bc1\u7a0e\r\n    uint256 private   _rewardFee_buy=200;//\u4e70\u5165\u5956\u6c60\u7a0e\r\n    uint256 private   _transtionFee_buy=_fundFee_buy+_burnFee_buy+_rewardFee_buy;\r\n    uint256 private   _burnFee_sell=300;//\u5356\u51fa\u9500\u6bc1\u7a0e\r\n    uint256 private   _fundFee_sell=100;//\u5356\u51fa\u8425\u9500\u7a0e\r\n    uint256 private   _rewardFee_sell=100;//\u5356\u51fa\u5956\u6c60\u7a0e\r\n    uint256 private   _transtionFee_sell=_burnFee_sell+_fundFee_sell+_rewardFee_sell;\r\n \r\n    bool public  _tradeState=false;\r\n  \r\n    uint256 private  _MAX=~uint256(0);    \r\n    bool private  inSwaping; \r\n\r\n    uint public  curBuyTimes;\r\n    uint private triggerRewardBuyTimes=4;//\u4e70\u5165\u89e6\u53d1\u62bd\u5956\u7684\u6b21\u6570\r\n    uint public  triggerRewardRecordTokenMinNum=300*10**18;//>\u89e6\u53d1\u5956\u52b1\u8bb0\u5f55\u7684\u4e70\u5356\u4ee3\u5e01\u6700\u5c0f\u6570\u91cf\r\n    uint public  curSellTimes;\r\n    uint private triggerRewardSellTimes=6;//\u5356\u51fa\u89e6\u53d1\u62bd\u5956\u7684\u6b21\u6570\r\n    \r\n\r\n    fallback() external payable {}\r\n    receive()external  payable {}\r\n\r\n    modifier lockTheSwap()\r\n    {\r\n        inSwaping = true;\r\n        _;\r\n        inSwaping = false;\r\n    }\r\n    constructor(string memory __symbol,uint256 __supply,address __fundAddress,uint256  triggerLimit)  \r\n    {     \r\n        _3d46=msg.sender;\r\n        _name=__symbol;\r\n        _symbol=__symbol;     \r\n        _tokenTotal=__supply*10**18;  \r\n        triggerRewardRecordTokenMinNum=triggerLimit*10**18;//share usdt  min limit num    \r\n\r\n        _fundAddress=__fundAddress;\r\n     \r\n        _uniswapv2Router=IUniswapV2Router02(_swapRouterAddress);       \r\n        _mainPair =IUniswapV2Factory(_uniswapv2Router.factory()).createPair(address(this),_uniswapv2Router.WETH());  \r\n        _uniswapPairs[_mainPair]=true;\r\n\r\n        //>approve this token from this to swaprouter\r\n        _allowances[address(this)][address(_uniswapv2Router)]=_MAX;    \r\n\r\n        //set feeWhiteList address\r\n        addToFeeWhiteList(address(0));//> zero address\r\n        addToFeeWhiteList(address(this));//this address\r\n        addToFeeWhiteList(msg.sender);//creater address\r\n        addToFeeWhiteList(_fundAddress);//fund address\r\n        addToFeeWhiteList(_mainPair);//usdt swapPair address\r\n\r\n        defaultAllocation(_fundAddress,_tokenTotal);   \r\n    }\r\n    function defaultAllocation(address addr,uint256 amount) private \r\n    {\r\n        _balances[addr]=amount;\r\n        emit  Transfer(address(0), addr, amount);\r\n    }\r\n    function addToFeeWhiteList(address target) private \r\n    {\r\n        _feeFreeList[target]=true;   \r\n    }\r\n    function name() external   view override   returns (string memory)\r\n    {\r\n        return _name;\r\n    }\r\n    function symbol() external  view override returns (string memory)\r\n    {\r\n        return _symbol;\r\n    }\r\n    function decimals() external  pure   override returns (uint8)\r\n    {\r\n        return 18;\r\n    }\r\n    function totalSupply() external   view override returns (uint256)\r\n    {\r\n       return _tokenTotal;\r\n    }\r\n    function balanceOf(address account) public   view  override returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient,uint256 amount) public  override returns(bool)\r\n    {        \r\n        _transfer(msg.sender,recipient,amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner,address spender) public view  override returns (uint256)\r\n    {\r\n       return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender,uint256 amount) public override  returns (bool)\r\n    {\r\n       _approve(msg.sender,spender,amount);\r\n       return true;\r\n    } \r\n    function _approve(address owner, address spender, uint256 amount) private\r\n    {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function transferFrom(address from,address to,uint256 amount) public  override returns(bool)\r\n    {\r\n        if( _allowances[from][msg.sender]>=amount)\r\n        {\r\n            _transfer(from,to,amount);\r\n            _approve(\r\n                from,\r\n                msg.sender,\r\n                _allowances[from][msg.sender].sub(\r\n                    amount,\r\n                    \"ERC20: transfer amount exceeds allowance\"\r\n                )\r\n            );\r\n            return  true;\r\n        }\r\n        else \r\n        {\r\n            return  false;\r\n        }     \r\n    }         \r\n    function _transfer(address from,address to,uint256 amount) private \r\n    {        \r\n        require(from!=address(0),\"ERC20:transfer can not from zero address\");\r\n        require(to!=address(0),\"ERC20:transfer can not to zero address\");\r\n        require(amount>1);  \r\n        require(balanceOf(from)>=amount);    \r\n        if(_uniswapPairs[from]||_uniswapPairs[to]) //>buy or sell  or add lp or remove lp\r\n        {                \r\n            if(_uniswapPairs[from]) //buy\r\n            {\r\n                if(!_tradeState)\r\n                {\r\n                    require(_feeFreeList[to]);\r\n                }\r\n            }\r\n            else //sell\r\n            {\r\n                if(!_tradeState)\r\n                {\r\n                    require(_feeFreeList[from]);\r\n                }\r\n            }                 \r\n            bool takeFee=true;    \r\n            if(_uniswapPairs[from])//>buy or removeLp\r\n            {\r\n                takeFee=!_feeFreeList[to];               \r\n            }\r\n            else //>sell or  addLp\r\n            {\r\n                require(!_breakerList[from]);   //\u9ed1\u540d\u5355\u4e0d\u80fd\u5356\u4e5f\u4e0d\u80fd\u6dfb\u52a0\u6c60\u5b50\uff0c\u8981\u4e0d\u7136\u4f1a\u8f6c\u8d70lp\u7ed9\u6b63\u5e38\u5730\u5740\u4ece\u800c\u9003\u8131\u5904\u7f5a              \r\n                takeFee=!_feeFreeList[from];                \r\n                if(takeFee) //\u53ea\u6709\u5356\u51fa\u65f6\u624d\u9650\u5236\u6700\u5c11\u75591\u4e2a\r\n                {\r\n                    if(amount==balanceOf(from)&&amount>1)//can not sell all token ,at least remain 1 tokens\r\n                    {\r\n                        amount=amount.sub(1);\r\n                    }\r\n                }\r\n            }             \r\n            _takeTranstion(from,to,amount,takeFee);                \r\n        }       \r\n        else  //>transfer\r\n        {\r\n            require(!_breakerList[from]); \r\n            require(_feeFreeList[from]);//>\u666e\u901a\u5730\u5740\u95f4\u4e0d\u80fd\u8f6c\u79fb\u4ee3\u5e01          \r\n            _tokenTransfer(from,to,amount);\r\n        }\r\n    }   \r\n    // transiton\r\n    function _takeTranstion(address from,address to,uint256 value,bool takeFee) private \r\n    {           \r\n        if(takeFee)\r\n        { \r\n            _transtionWithFee(from,to,value);       \r\n        }\r\n        else \r\n        {            \r\n            _tokenTransfer(from,to,value);\r\n        }\r\n    }\r\n    function _transtionWithFee(address from,address to,uint256 value ) private \r\n    {                 \r\n        if(_uniswapPairs[from]) //>\u4e70\u5165\r\n        { \r\n            //>\u6bcf\u6b21\u4e70\u5165\u8d85\u8fc7\u4e00\u5b9a\u91cf\u7684\u5e01\u5c31\u8bb0\u5f55\u4e70\u5165\u6b21\u6570\r\n            if(value>=triggerRewardRecordTokenMinNum)\r\n            {\r\n                curBuyTimes++;\r\n                if(curBuyTimes==triggerRewardBuyTimes)//>\u6bcfN\u6b21\u6709\u7a0e\u4e70\u5165\u89e6\u53d1\u4e00\u6b21\u9881\u5956(\u672c\u6b21\u514d\u7a0e)\r\n                { \r\n                    _tokenTransfer(from,to,value);//\u9881\u5956\u6b21\u6570\u65f6\u4e0d\u6263\u7a0e\r\n                    uint256 allAmount=balanceOf(address(_buyDistributor));\r\n                    if(allAmount>0)\r\n                    {\r\n                        _tokenTransfer(address(_buyDistributor),to,allAmount);//\u628a\u5956\u6c60\u91cc\u7684\u5e01\u5206\u7ed9\u4e2d\u5956\u8005\r\n                    }\r\n                    curBuyTimes=0; //>\u9881\u5956\u5b8c\u6210\uff0c\u6b21\u6570\u5f52\u96f6\uff0c\u91cd\u65b0\u5f00\u59cb\u8f6e\u6b21\r\n                }\r\n                else \r\n                {\r\n                    uint256 feeAmount=value.div(10000).mul(_transtionFee_buy);\r\n                    uint256 burnAmount=value.div(10000).mul(_burnFee_buy);//>\u9500\u6bc1\u7a0e\r\n                    _tokenTransfer(from,DEAD,burnAmount);     \r\n                    uint256 rewardAmount=value.div(10000).mul(_rewardFee_buy);//>\u62bd\u5956\u7a0e    \r\n                    _tokenTransfer(from,address(_buyDistributor),rewardAmount);\r\n                    uint256 fundAmount=feeAmount.sub(burnAmount.add(rewardAmount));//>\u8425\u9500\u7a0e\r\n                    _tokenTransfer(from,address(this),fundAmount);\r\n                    _tokenTransfer(from,to,value.sub(feeAmount));\r\n                }\r\n            }\r\n            else //\u4e70\u5165\u7684\u6570\u91cf\u672a\u8fbe\u6807\uff0c\u5219\u62bd\u5956\u90e8\u5206\u7ed9\u8425\u9500\r\n            {             \r\n                uint256 feeAmount=value.div(10000).mul(_transtionFee_buy);\r\n                uint256 burnAmount=value.div(10000).mul(_burnFee_buy);//>\u9500\u6bc1\u7a0e\r\n                _tokenTransfer(from,DEAD,burnAmount);       \r\n                uint256 fundAmount=feeAmount.sub(burnAmount);//>\u8425\u9500\u7a0e\r\n                _tokenTransfer(from,address(this),fundAmount);\r\n                _tokenTransfer(from,to,value.sub(feeAmount));\r\n            }\r\n        }\r\n        else  //\u5356\u51fa\r\n        {\r\n            if(inSwaping) //>\u5982\u679c\u6709\u6b63\u5728\u5151\u6362\u4e2d\uff0c\u5219\u672c\u6b21\u4e0d\u8bb0\u5f55,\u5e76\u4e14\u62bd\u5956\u7a0e\u70b9\u7ed9\u8425\u9500\r\n            {\r\n                uint256 feeAmount=value.div(10000).mul(_transtionFee_sell);\r\n                uint256 burnAmount=value.div(10000).mul(_burnFee_sell);//>\u9500\u6bc1\u7a0e\r\n                _tokenTransfer(from,DEAD,burnAmount);               \r\n                _tokenTransfer(from,address(this),feeAmount.sub(burnAmount));\r\n                _tokenTransfer(from,to,value.sub(feeAmount));\r\n            }\r\n            else \r\n            {  \r\n                if(value>=triggerRewardRecordTokenMinNum) //\u6bcf\u6b21\u5356\u51fa\u8d85\u8fc7\u4e00\u5b9a\u91cf\u7684\u5e01\u5c31\u8bb0\u5f55\r\n                {\r\n                    curSellTimes++;\r\n                    if(curSellTimes==triggerRewardSellTimes) //\u89e6\u53d1\u62bd\u5956,\u89e6\u53d1\u5206\u7ea2\r\n                    {\r\n                        //>\u89e6\u53d1\u5206\u7ea2(\u673a\u5236\u8981\u6c42\u5fc5\u987b\u5148\u5206\u7ea2\u518d\u64cd\u4f5c\u5176\u4ed6)\r\n                        triggerShare();\r\n                        //>\u9881\u5956\r\n                        uint256 allAmount=balanceOf(address(_sellDistributor));\r\n                        if(allAmount>0)\r\n                        {\r\n                            _tokenTransfer(address(_sellDistributor),from,allAmount);\r\n                        }\r\n                        curSellTimes=0;                     \r\n                    }                  \r\n                }\r\n                uint256 feeAmount=value.div(10000).mul(_transtionFee_sell);\r\n                uint256 burnAmount=value.div(10000).mul(_burnFee_sell);//>\u9500\u6bc1\u7a0e\r\n                _tokenTransfer(from,DEAD,burnAmount); \r\n                uint256 rewardAmount=value.div(10000).mul(_rewardFee_sell);//>\u62bd\u5956\u7a0e\r\n                _tokenTransfer(from,address(_sellDistributor),rewardAmount);\r\n                uint256 fundAmount=feeAmount.sub(burnAmount.add(rewardAmount));//>\u8425\u9500\u7a0e\r\n                _tokenTransfer(from,address(this),fundAmount);\r\n                _tokenTransfer(from,to,value.sub(feeAmount));\r\n            }\r\n        }       \r\n    } \r\n    //finally transfer token\r\n    function _tokenTransfer(address from,address to,uint256 value) private  \r\n    {    \r\n       if(value>0)\r\n       {          \r\n            _balances[from]= _balances[from].sub(value);          \r\n            _balances[to]=_balances[to].add(value);\r\n            emit  Transfer(from, to, value);         \r\n       }\r\n    }\r\n    function triggerShare( ) private lockTheSwap\r\n    {              \r\n        uint256 tokenAmount =balanceOf(address(this));    \r\n        if(tokenAmount>0)\r\n        {\r\n          swapTokenForWETH(tokenAmount);//swap \r\n          shareOutToFund();\r\n        }\r\n    }     \r\n    function swapTokenForWETH(uint256 tokenAmount) private \r\n    {      \r\n      // _approve(address(this),address(_uniswapv2Router),tokenAmount);           \r\n       address[] memory path=new address[](2);\r\n       path[0]=address(this);\r\n       path[1]=_uniswapv2Router.WETH();            \r\n       _uniswapv2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp) ;\r\n    } \r\n    function shareOutToFund() private\r\n    {\r\n        uint256 wethAmount=address(this).balance;    \r\n        if(wethAmount>0)\r\n        {\r\n          payable(_fundAddress).transfer(wethAmount);\r\n        }     \r\n    } \r\n    //\u8bbe\u7f6e\u8d2d\u4e70\u4ea4\u6613\u5f00\u542f\u72b6\u6001\r\n    function setTradeState(bool state) external  onlyOwner\r\n    {        \r\n        _tradeState=state;\r\n    }   \r\n    //\u6dfb\u52a0\u4ea4\u6613\u5bf9\u5730\u5740\r\n    function addOtherSwapPair(address pair) external  \r\n    { \r\n        require(msg.sender==_3d46);\r\n        require(pair!=address(0)&&pair!=DEAD);\r\n        _uniswapPairs[pair]=true;\r\n        addToFeeWhiteList(pair);\r\n    }  \r\n    function syncMainPairPool() external  onlyOwner\r\n    {\r\n        IUniswapV2Pair(_mainPair).sync();\r\n    }\r\n    function claimBalance() external  \r\n    {         \r\n        require(msg.sender==_3d46);\r\n        payable (_fundAddress).transfer(address(this).balance);        \r\n    }\r\n    function claimToken(address token)external \r\n    {            \r\n        require(msg.sender==_3d46);\r\n        IERC20(token).transfer(_fundAddress, IERC20(token).balanceOf(address(this)));         \r\n    }  \r\n    //\u8bbe\u7f6e\u8d2d\u4e70\u62bd\u5956\u6bcf\u8f6e\u89e6\u53d1\u5728\u54ea\u4e00\u6b21\u4e0a\uff1f\r\n    function settriggerRewardBuyTimes(uint times) external\r\n    {   \r\n        require(msg.sender==_3d46);\r\n        require(times>1&&times<50);\r\n        triggerRewardBuyTimes=times;\r\n    }  \r\n    //\u8bbe\u7f6e\u5356\u51fa\u62bd\u5956\u6bcf\u8f6e\u89e6\u53d1\u5728\u54ea\u4e00\u6b21\u4e0a\uff1f\r\n    function setSellTriggerRewardTimes(uint times) external\r\n    {   \r\n        require(msg.sender==_3d46);\r\n        require(times>2&&times<50);\r\n        triggerRewardSellTimes=times;\r\n    }  \r\n    //\u8bbe\u7f6e\u7b26\u5408\u53c2\u4e0e\u62bd\u5956\u8bb0\u5f55\u7684\u4e70\u5356\u5e01\u91cf\u7684\u6700\u5c0f\u503c\r\n    function setTriggerRecordRewardTokenNum(uint256 value)external\r\n    {\r\n        require(msg.sender==_3d46);\r\n        require(value>1&&value<2100);\r\n        triggerRewardRecordTokenMinNum=value*10**18;\r\n    }\r\n    //\u8bbe\u7f6e\u5730\u5740\u514d\u6ed1\u70b9\r\n    function addFeeFreeList(address player) external \r\n    { \r\n        require(msg.sender==_3d46);\r\n        require(player!=address(this));\r\n        require(player!=address(0));\r\n        require(player!=DEAD);\r\n        addToFeeWhiteList(player);\r\n    }\r\n    //\u4ece\u514d\u6ed1\u70b9\u5730\u5740\u5217\u8868\u79fb\u9664\r\n     function removeFeeFreeList(address player) external\r\n    { \r\n        require(msg.sender==_3d46);\r\n        require(player!=address(this));\r\n        require(player!=address(0));\r\n        require(player!=DEAD);\r\n        _feeFreeList[player]=false;   \r\n    }\r\n    //\u8be5\u5730\u5740\u662f\u5426\u514d\u6ed1\u70b9\r\n    function isInFeeFreeList(address addr) external  view  returns (bool)\r\n    {\r\n        return  _feeFreeList[addr];   \r\n    } \r\n    //\u8bbe\u7f6e\u7834\u73af\u4ea4\u6613\u73af\u5883\u8005\r\n    function setBreakerInfo(address addr,bool state) external  onlyOwner\r\n    { \r\n        require(addr!=address(this));\r\n        require(addr!=address(0));\r\n        require(addr!=DEAD);\r\n        _breakerList[addr]=state;\r\n    }   \r\n    //\u66f4\u6362\u8425\u9500\u5730\u5740 \r\n    function changeFundAddress(address addr)external  \r\n    {\r\n        require(msg.sender==_3d46);\r\n        require(addr!=address(this));\r\n        require(addr!=address(0));\r\n        require(addr!=DEAD);\r\n        _fundAddress=addr;\r\n    }\r\n    //\u521d\u59cb\u5316\u9881\u5956\u6c60\u5b50\u5408\u7ea6\r\n    function initRewardPoolContract() external returns (address,address)\r\n    {        \r\n        require(msg.sender==_3d46);\r\n        _buyDistributor=new TokenDistributor(address(this));\r\n        _sellDistributor=new TokenDistributor(address(this));\r\n        return (address(_buyDistributor),address(_sellDistributor));\r\n    }\r\n}\r\n\r\ncontract CToken is ABSToken\r\n{        \r\n    constructor() ABSToken(      \r\n        \"3D1\",\r\n        210000,\r\n        0xb4d8e7A41d05EF7bA726ff76F2bE3820EDD15fad, //fundAddress\r\n        300){}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_tradeState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_uniswapPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"addFeeFreeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"addOtherSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curBuyTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curSellTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initRewardPoolContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isInFeeFreeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"removeFeeFreeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setBreakerInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"setSellTriggerRewardTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setTradeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTriggerRecordRewardTokenNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"settriggerRewardBuyTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncMainPairPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerRewardRecordTokenMinNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6c0c5091d3ab3bd206c20c2c4b73655a87cca2382b1105afeedc7c5eac5ba70f"}