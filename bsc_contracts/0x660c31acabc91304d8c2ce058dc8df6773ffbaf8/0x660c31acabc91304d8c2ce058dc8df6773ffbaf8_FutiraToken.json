{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n//This contract compliments contract TJJCcRdGHpjJUPDGTwCJp5CAPNqJMVdGfR on the Tron network. We are issuing 10B tokens on this contract. They are part of the 10B tokens issued on the Tron contract.  This token is meant to be a temporary token till we issue the Futira Coin on the Futira Chain once we build the blockchain supporting our telecommunications networks. Initial investors that founded Futira Ltd LLC in Georgia and Futira s.r.o. in Slovakia are awarded shares that have a one year vesting period 10% released for trading on June 25, 2022; 45% released on October 25, 2022 and 45% released on February 25, 2023. Some investors bought before the deployment of this contract on the Binance chain and will have their tokens not trading till April 25, 2022.\r\n//The total number of Futira Tokens and Futira Coins that are authorized to be issued and trading will not exceed 20B. Futira Ltd LLC and Futira s.r.o. reserve the right to burn the tokens in the original pools at their own discretion.\r\n//The Tron contract was deployed on Jan 1, 2022 and had the issue that we only controlled the escrow via having the right to freeze the accounts holding the Futira token. This is undesirable in the long term.\r\n//We intend to bridge the Futira Token on the Tron network with this one on the Binance network.\r\n//This token is temporary. It is the equivalent of one Futira Coin. Once the Futira Coin is launched and trading, all token holders are encouraged to swap them for coins. \r\n//Futira Ltd LLC and Futira s.r.o. assure a smooth conversion to the coin. Token holders can return the token to an account that will be posted on futiracoin.com to receive the same amount in coins.\r\n//There are many restrictions on the trading of these coins. \r\n//Those that helped found the company and the early investors will be restricted in selling or transferring for up to one year after launch. \r\n//Those buying in the early days of the contract whilst things are uncertain  will be not allowed to sell or transfer their token for two months after launch. \r\n//Those buying after three weeks of the deployment of the contract can sell and transfer immediately after launch.\r\n//There may never be a market for these tokens. We are working diligently to list the token on swap exchanges and to establish a value for them in the market. We cannot guarantee that these efforts will succeed. We will endeavour to generate demand for the token and the coin.\r\n//The issuance of tokens from the main account requires the approval of multiple signatories.\r\n//There is an authorized maximum of twenty billion tokens and coins combined.\r\n//The net proceeds of the sale of the tokens and coins will be used to finance mobile operator networks in developing countries as per www.inovatian.com.\r\n//Please regularly check www.futiracoin.com for updates.\r\n//Together to the moon and beyond!\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/FutiraToken.sol\r\n\r\n// File: contracts/VESTATToken.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n/**\r\n    @title An ERC20 token\r\n    @author Futira coin\r\n*/\r\ncontract FutiraToken is ERC20 {\r\n    mapping(address => bool) public signers;\r\n    uint64 private pendingTransactionID = 1;\r\n    uint64 public TransactionsCount = 0;\r\n    uint64[] public PendingTransactionList;\r\n    uint256 public currentTotalSupply;\r\n    address public owner;\r\n    address public VestingWallet;  \r\n    mapping(uint128 => VestingTransaction) public VestingTransactions;\r\n\r\n    struct VestingTransaction \r\n    {\r\n        address to;\r\n        uint256 amount;\r\n        string status;\r\n        uint256 ExecuteDate;\r\n        uint256 DueDate;\r\n    }\r\n\r\n    event ClaimedToken(address from, address to, uint256 amount);   \r\n    event ApprovedVestingTransaction(address from, address to, uint256 amount);\r\n    event CreatedVestingTransaction(address _to, uint256 _amount, string status, uint256 executeDate, uint256 Due_Date);\r\n    event UpdatedTotalSUpply(string operation, uint256 amount);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Error. Contact info@futiracoin.com for help.\");\r\n        _;    }\r\n\r\n    modifier onlyVestingWallet {\r\n        require(msg.sender == VestingWallet, \"Error. Contact info@futiracoin.com for help.\");\r\n        _;    }\r\n\r\n    modifier onlySigner {\r\n        require(signers[msg.sender] == true, \"Error. Contact info@futiracoin.com for help.\");\r\n        _;    }\r\n\r\n    constructor() ERC20(\"FutiraToken\", \"FUT\") {\r\n        VestingWallet = address(this) ;\r\n        _mint(msg.sender, 1e10 * 10 ** 18);\r\n        owner = msg.sender;\r\n        signers[0x75Df3A4B10a18774c716221270037F55C32F41f4] = true;\r\n        signers[0xFEBF8C088d8B823cAADC93ec40F99E162b50B6FF] = true;\r\n        currentTotalSupply = totalSupply();\r\n    }\r\n\r\n    /** \r\n        @notice Return detail about a pending transaction\r\n        @param _id for the vested transaction\r\n        @return Return address of vested token recipient, amount of vested token, status of the vested token, the due date for the vested token\r\n    */\r\n    function getVestingTransaction(uint128 _id) external view returns(address, uint, string memory, uint) {\r\n        return (VestingTransactions[_id].to, VestingTransactions[_id].amount, VestingTransactions[_id].status, VestingTransactions[_id].DueDate);\r\n    }   \r\n\r\n    /** \r\n        @notice To get number of last pending transaction and count of not signed\r\n        @return the first transaction, the count, the last transaction\r\n    */\r\n   function getcurrentPendingTransactions() external view returns( uint, uint, uint){\r\n        uint count = 0;\r\n        uint FirstTRX = 0;\r\n        uint LastTRX = 0;\r\n        bool setFirst = false;\r\n        for(uint128 i = 0; i<TransactionsCount; i++){\r\n        if( keccak256(abi.encodePacked((VestingTransactions[i].status))) == keccak256(abi.encodePacked((\"pending\")))){   \r\n            count++;\r\n            LastTRX=i;\r\n            if(FirstTRX ==0 && !setFirst){\r\n                FirstTRX=i; \r\n                setFirst = true;\r\n            }\r\n        }    \r\n        }\r\n        return (FirstTRX,count,LastTRX);\r\n    }\r\n\r\n    /**\r\n        @notice To get number of last pending transaction and count of not signed\r\n        @param account of the wallet\r\n        @return Return total amount of vested token, number of transaction\r\n    */\r\n    function getWalletVests(address account) external view virtual  returns (uint, uint) \r\n    { \r\n        uint256 numberofTRX = 0;\r\n        uint256 Total_amount = 0;\r\n       for(uint128 i = 0; i < TransactionsCount; i++)\r\n        {\r\n                if( VestingTransactions[i].to == account && keccak256(abi.encodePacked((VestingTransactions[i].status))) != keccak256(abi.encodePacked((\"successful\"))))\r\n                {\r\n                   Total_amount=Total_amount+VestingTransactions[i].amount;\r\n                   numberofTRX=numberofTRX+1;\r\n                }  }\r\n        return (Total_amount , numberofTRX);\r\n    }\r\n \r\n    /**\r\n        @notice To check whether an ID is in the PendingTransactionList\r\n        @param _id of the vested transaction list\r\n        @return boolean \r\n    */\r\n    function checkVestingTransactionList(uint128 _id) internal view returns(bool)\r\n    {\r\n\r\n            if(keccak256(abi.encodePacked((VestingTransactions[_id].status))) == keccak256(abi.encodePacked((\"pending\"))))\r\n            {  return true; }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n        @notice To approve all pending transaction\r\n        @return boolean\r\n    */\r\n    function approvePendingVestingTransactions() onlySigner external returns(bool)\r\n    {\r\n        uint128 i;\r\n        for( i = 0; i < TransactionsCount; i++)\r\n        {   \r\n                if(keccak256(abi.encodePacked((VestingTransactions[i].status))) == keccak256(abi.encodePacked((\"pending\"))))\r\n                {\r\n                    approvePendingVestingTransaction(i);\r\n                }\r\n            \r\n        }\r\n        if(i > 0){\r\n            return true;\r\n        } \r\n        else{\r\n            return false;\r\n       }    \r\n    }\r\n    \r\n    /**\r\n        @notice To approve a pending transaction\r\n        @param _id of the transaction\r\n        @return booelan\r\n    */\r\n    function approvePendingVestingTransaction(uint128 _id) onlySigner public returns(bool)\r\n    {\r\n       \r\n        bool check = checkVestingTransactionList(_id);\r\n        if(check || _id==0)\r\n        {\r\n            if(block.timestamp < VestingTransactions[_id].ExecuteDate + 3600 && keccak256(abi.encodePacked((VestingTransactions[_id].status))) == keccak256(abi.encodePacked((\"pending\"))))\r\n            {\r\n                if(VestingTransactions[_id].DueDate < block.timestamp ){\r\n                    VestingTransactions[_id].status =\"successful\";\r\n                    _transfer(owner, VestingTransactions[_id].to, VestingTransactions[_id].amount);\r\n                    \r\n                    emit ApprovedVestingTransaction(owner, VestingTransactions[_id].to, VestingTransactions[_id].amount);\r\n                    PendingTransactionList[_id]=0;\r\n                }\r\n                else {\r\n                VestingTransactions[_id].status =\"approved\";\r\n                    _transfer(owner, VestingWallet, VestingTransactions[_id].amount);\r\n\r\n                    emit ApprovedVestingTransaction(owner, VestingWallet, VestingTransactions[_id].amount);\r\n                    PendingTransactionList[_id]=0;\r\n                }\r\n\r\n                \r\n                return true;\r\n            }\r\n            else if (block.timestamp > VestingTransactions[_id].ExecuteDate + 3600 && keccak256(abi.encodePacked((VestingTransactions[_id].status))) == keccak256(abi.encodePacked((\"pending\")))){\r\n                VestingTransactions[_id].status =\"failed\";\r\n                PendingTransactionList[_id]=0;\r\n                    return false;\r\n            }   \r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    /**\r\n        @notice This function will create a pending transaction for signer to sign\r\n        @param _to address of the recipient, _amount to transfer, Due_Date for the transaction apporval\r\n        @return the id of the pending transaction\r\n    */\r\n    function createVestingTransaction(address _to, uint256 _amount, uint256 Due_Date) public onlyOwner returns(uint)\r\n    {\r\n        require(_to != address(0), \"invalid address\");\r\n\r\n        uint64 id =  TransactionsCount;\r\n\r\n        VestingTransactions[id] = VestingTransaction(_to, _amount, \"pending\",block.timestamp, Due_Date);\r\n        PendingTransactionList.push(id+1);\r\n        pendingTransactionID = pendingTransactionID + 1;\r\n        TransactionsCount = TransactionsCount +1;\r\n\r\n        emit CreatedVestingTransaction(_to, _amount, \"pending\", block.timestamp, Due_Date);\r\n        return id;\r\n    }\r\n\r\n    /**\r\n        @notice To collect their token\r\n        @return boolean\r\n    */\r\n    function Claim() external returns (bool)\r\n    {\r\n        bool status = false;\r\n        for(uint128 i = 0; i<TransactionsCount; i++)\r\n        {\r\n            if(VestingTransactions[i].DueDate <= block.timestamp && VestingTransactions[i].to == _msgSender() )\r\n            {\r\n                status = true;\r\n                if(keccak256(abi.encodePacked((VestingTransactions[i].status))) == keccak256(abi.encodePacked((\"approved\"))))\r\n                {\r\n                    address _to = VestingTransactions[i].to;\r\n                    uint256 _amount = VestingTransactions[i].amount;\r\n                    _transfer(VestingWallet, msg.sender, _amount);   \r\n                    VestingTransactions[i].status = \"successful\";\r\n\r\n                    emit ClaimedToken(VestingWallet, _to, _amount);\r\n                }  \r\n            }  \r\n        }\r\n        if (!status)\r\n        {\r\n            revert(\"Error. Contact info@futiracoin.com for help.\");\r\n        }\r\n        return status;\r\n    }\r\n\r\n    /**\r\n        @notice For owner to set the total supply\r\n        @param operation (add/delete), _amount to mint or burn\r\n        @return the total supply\r\n    */\r\n    function setTotalSupply(string memory operation, uint256 _amount) onlyOwner external returns(uint) \r\n    {\r\n        if(keccak256(abi.encodePacked((operation))) == keccak256(abi.encodePacked((\"add\"))))\r\n        {\r\n            _mint(msg.sender, _amount);\r\n            currentTotalSupply += _amount;\r\n        }\r\n        else if(keccak256(abi.encodePacked((operation))) == keccak256(abi.encodePacked((\"delete\"))))\r\n        {\r\n            require(currentTotalSupply >= _amount, \"Error. Contact info@futiracoin.com for help.\");\r\n            _burn(msg.sender, _amount);\r\n            currentTotalSupply -= _amount;\r\n        }\r\n        else\r\n        {\r\n            revert(\"Error. Contact info@futiracoin.com for help.\");\r\n        }  \r\n\r\n        emit UpdatedTotalSUpply(operation, _amount);\r\n        return totalSupply();\r\n    }\r\n\r\n    /**\r\n        @notice to transfer the token from one address to another\r\n        @param recipient address, amount to transfer\r\n        @return boolean\r\n    */\r\n    function transfer(address recipient, uint256 amount) override public returns (bool) {\r\n         require(recipient != address(0), \"invalid address\");\r\n         if(msg.sender==owner){\r\n             createVestingTransaction( recipient, amount, block.timestamp);\r\n            return true;\r\n         }    \r\n         _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }   \r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ApprovedVestingTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executeDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Due_Date\",\"type\":\"uint256\"}],\"name\":\"CreatedVestingTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdatedTotalSUpply\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PendingTransactionList\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TransactionsCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"VestingTransactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ExecuteDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DueDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VestingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_id\",\"type\":\"uint128\"}],\"name\":\"approvePendingVestingTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvePendingVestingTransactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Due_Date\",\"type\":\"uint256\"}],\"name\":\"createVestingTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_id\",\"type\":\"uint128\"}],\"name\":\"getVestingTransaction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getWalletVests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getcurrentPendingTransactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FutiraToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://09fa1fffa76f776699f7be71b78ea7f437bae2c2faac6138f7eb44c4f7bb8769"}