{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PlanpurchaseTCTandBloom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address owner,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n}\\r\\n\\r\\ncontract Planpurchase {\\r\\n    // Global Variables\\r\\n    address payable public owner;\\r\\n    address payable public feeReceiver;\\r\\n    address public multisignatureWalletTCT;\\r\\n    address public multisignatureWalletBloom;\\r\\n    address public swapWallet;\\r\\n    address public binaryWallet;\\r\\n    IERC20 public TCT;\\r\\n    IERC20 public USDT;\\r\\n    uint256 public transactionFee;\\r\\n    uint256 public tctSwapPercentage;\\r\\n    uint256 public binaryPercentage;\\r\\n\\r\\n    // Mapping to store the TCT token distribution for each plan\\r\\n    mapping(uint256 => uint256) public planToTCTAmount;\\r\\n    mapping(uint256 => uint256) public planToUSDTAmount;\\r\\n    \\r\\n\\r\\n    // Constructor to set initial values\\r\\n    // IERC20 _USDT, IERC20 _tctToken\\r\\n    constructor() {\\r\\n        owner = payable(0x5DEa2d358EF0cF83847083489c7c3478e1371eEe); \\r\\n        feeReceiver = payable(0x2EC83E2a9250Eed34545073d9802C6449f83ca2A); \\r\\n        multisignatureWalletTCT = (0x685C4996297568097C3cbfd777B07866AD9B84B9); \\r\\n        multisignatureWalletBloom = (0x2f344145863332F113463517d7bdDA40142ab996); \\r\\n        swapWallet = (0x0620A4d826970e9cF3a9f4995A9513726Ac9C239);\\r\\n        binaryWallet = (0x606A6070bE158961fB590630060DDaBD850B6FaE); \\r\\n        transactionFee = 0.01 ether;\\r\\n        tctSwapPercentage = 10;\\r\\n        binaryPercentage = 17;\\r\\n        USDT = IERC20(0x55d398326f99059fF775485246999027B3197955); \\r\\n        TCT = IERC20(0xb4aE1DfeEf9224F89D48AFBcf9fA49f08DF90f26); \\r\\n\\r\\n        // Set the default TCT token amounts for each plan\\r\\n        planToTCTAmount[0] = 100 ether; // Plan 1: 100 USD\\r\\n        planToTCTAmount[1] = 400 ether; // Plan 2: 400 USD\\r\\n        planToTCTAmount[2] = 500 ether; // Plan 2: 500 USD\\r\\n        planToTCTAmount[3] = 900 ether; // Plan 2: 900 USD\\r\\n        planToTCTAmount[4] = 1000 ether; // Plan 3: 1000 USD\\r\\n        //USDT amounts\\r\\n        planToUSDTAmount[0] = 100 ether; // Plan 1: 100 USD\\r\\n        planToUSDTAmount[1] = 400 ether; // Plan 2: 400 USD\\r\\n        planToUSDTAmount[2] = 500 ether; // Plan 3: 500 USD\\r\\n        planToUSDTAmount[3] = 900 ether; // Plan 4: 900 USD\\r\\n        planToUSDTAmount[4] = 1000 ether; // Plan 5: 1000 USD\\r\\n    }\\r\\n\\r\\n    // Modifier to restrict access to the owner\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Only the owner can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Setter function for owner\\r\\n    function setOwner(address payable _newOwner) public onlyOwner {\\r\\n        owner = _newOwner;\\r\\n    }\\r\\n\\r\\n    // Setter function for fee receiver\\r\\n    function setFeeReceiver(address payable _newFeeReceiver) public onlyOwner {\\r\\n        feeReceiver = _newFeeReceiver;\\r\\n    }\\r\\n\\r\\n    // Setter function for transaction fee\\r\\n    function setTransactionFee(uint256 _newFee) public onlyOwner {\\r\\n        transactionFee = _newFee;\\r\\n    }\\r\\n\\r\\n    // Setter function for tctSwapPercentage\\r\\n    function setTctSwapPercentage(uint256 _newPercentage) public onlyOwner {\\r\\n        tctSwapPercentage = _newPercentage;\\r\\n    }\\r\\n\\r\\n    // Setter function for binaryPercentage\\r\\n    function setBinaryPercentage(uint256 _newPercentage) public onlyOwner {\\r\\n        binaryPercentage = _newPercentage;\\r\\n    }\\r\\n\\r\\n    // Setter function for multisignatureWalletTCT\\r\\n    function setmultisignatureWalletTCT(address _newWallet) public onlyOwner {\\r\\n        multisignatureWalletTCT = _newWallet;\\r\\n    }\\r\\n    \\r\\n    // Setter function for multisignatureWallet\\r\\n    function setmultisignatureWalletBLOOM(address _newWallet) public onlyOwner {\\r\\n        multisignatureWalletBloom = _newWallet;\\r\\n    }\\r\\n\\r\\n    // Setter function for swapWallet\\r\\n    function setSwapWallet(address _newWallet) public onlyOwner {\\r\\n        swapWallet = _newWallet;\\r\\n    }\\r\\n\\r\\n    // Setter function for binaryWallet\\r\\n    function setBinaryWallet(address _newWallet) public onlyOwner {\\r\\n        binaryWallet = _newWallet;\\r\\n    }\\r\\n\\r\\n    // Setter function for TCT token address\\r\\n    function setTCTToken(address _newToken) public onlyOwner {\\r\\n        TCT = IERC20(_newToken);\\r\\n    }\\r\\n\\r\\n    // Setter function for USDT token address\\r\\n    function setUSDTToken(address _newToken) public onlyOwner {\\r\\n        USDT = IERC20(_newToken);\\r\\n    }\\r\\n\\r\\n    function setTCTAmount(uint256 _plan, uint256 _amount) public onlyOwner {\\r\\n        // Owner can set the TCT amount for a specific plan\\r\\n        planToTCTAmount[_plan] = _amount;\\r\\n    }\\r\\n\\r\\n      function setUSDTAmount(uint256 _plan, uint256 _amount) public onlyOwner {\\r\\n        // Owner can set the USDT amount for a specific plan\\r\\n        planToUSDTAmount[_plan] = _amount;\\r\\n    }\\r\\n\\r\\n\\r\\n    function purchasePlan(\\r\\n        uint256 selectedPlan, // Plan selected by the user\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public payable {\\r\\n        require(msg.value == transactionFee, \\\"Incorrect transaction fee\\\");\\r\\n\\r\\n        require(\\r\\n            selectedPlan >= 0 && selectedPlan <= 4,\\r\\n            \\\"Invalid plan selected\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            USDT.transferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                planToUSDTAmount[selectedPlan]\\r\\n            ),\\r\\n            \\\"USDT transfer failed\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            USDT.transfer(recipient, amount),\\r\\n            \\\"USDT transfer to recipient failed\\\"\\r\\n        );\\r\\n\\r\\n        uint256 swapAmount = (planToUSDTAmount[selectedPlan] * tctSwapPercentage) / 100;\\r\\n        uint256 binaryAmount = (planToUSDTAmount[selectedPlan] * binaryPercentage) / 100;\\r\\n\\r\\n        if (swapWallet != address(0)) {\\r\\n            require(\\r\\n                USDT.transfer(swapWallet, swapAmount),\\r\\n                \\\"Swap amount transfer failed\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (binaryWallet != address(0)) {\\r\\n            require(\\r\\n                USDT.transfer(binaryWallet, binaryAmount),\\r\\n                \\\"Binary amount transfer failed\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 tctAmount = planToTCTAmount[selectedPlan];\\r\\n        if (address(TCT) != address(0)) {\\r\\n            require(\\r\\n                TCT.transferFrom(owner, msg.sender, tctAmount),\\r\\n                \\\"TCT transfer failed\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        feeReceiver.transfer(msg.value);\\r\\n\\r\\n        uint256 balance = USDT.balanceOf(address(this));\\r\\n        if (balance > 0) {\\r\\n            require(\\r\\n                USDT.transfer(multisignatureWalletTCT, balance),\\r\\n                \\\"Transfer to multi-sender wallet failed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function purchasePlanBloom(\\r\\n        address [] memory recipient,\\r\\n        uint256 [] memory amount\\r\\n    ) public payable {\\r\\n        require(msg.value == transactionFee, \\\"Incorrect transaction fee\\\");\\r\\n\\r\\n        for(uint i ; i < recipient.length; i++){\\r\\n            USDT.transferFrom(msg.sender, recipient[i], amount[i]);\\r\\n        }\\r\\n\\r\\n\\r\\n        feeReceiver.transfer(msg.value);\\r\\n\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TCT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"binaryPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"binaryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisignatureWalletBloom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisignatureWalletTCT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"planToTCTAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"planToUSDTAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"selectedPlan\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"purchasePlan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipient\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"purchasePlanBloom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPercentage\",\"type\":\"uint256\"}],\"name\":\"setBinaryPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setBinaryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setSwapWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTCTAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"setTCTToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPercentage\",\"type\":\"uint256\"}],\"name\":\"setTctSwapPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setTransactionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setUSDTAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"setUSDTToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setmultisignatureWalletBLOOM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setmultisignatureWalletTCT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tctSwapPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Planpurchase", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}