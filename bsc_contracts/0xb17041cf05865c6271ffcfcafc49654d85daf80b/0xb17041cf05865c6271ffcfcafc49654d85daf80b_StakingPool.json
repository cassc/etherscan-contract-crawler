{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"},\"Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003e= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003c b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a \\u0026 b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity\\u0027s `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value \\u003c= type(uint224).max, \\\"SafeCast: value doesn\\u0027t fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity\\u0027s `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value \\u003c= type(uint128).max, \\\"SafeCast: value doesn\\u0027t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity\\u0027s `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value \\u003c= type(uint96).max, \\\"SafeCast: value doesn\\u0027t fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity\\u0027s `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value \\u003c= type(uint64).max, \\\"SafeCast: value doesn\\u0027t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity\\u0027s `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value \\u003c= type(uint32).max, \\\"SafeCast: value doesn\\u0027t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity\\u0027s `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value \\u003c= type(uint16).max, \\\"SafeCast: value doesn\\u0027t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity\\u0027s `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value \\u003c= type(uint8).max, \\\"SafeCast: value doesn\\u0027t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value \\u003e= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity\\u0027s `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value \\u003e= type(int128).min \\u0026\\u0026 value \\u003c= type(int128).max, \\\"SafeCast: value doesn\\u0027t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity\\u0027s `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value \\u003e= type(int64).min \\u0026\\u0026 value \\u003c= type(int64).max, \\\"SafeCast: value doesn\\u0027t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity\\u0027s `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value \\u003e= type(int32).min \\u0026\\u0026 value \\u003c= type(int32).max, \\\"SafeCast: value doesn\\u0027t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity\\u0027s `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value \\u003e= type(int16).min \\u0026\\u0026 value \\u003c= type(int16).max, \\\"SafeCast: value doesn\\u0027t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity\\u0027s `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value \\u003e= type(int8).min \\u0026\\u0026 value \\u003c= type(int8).max, \\\"SafeCast: value doesn\\u0027t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value \\u003c= uint256(type(int256).max), \\\"SafeCast: value doesn\\u0027t fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler\\u0027s built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c \\u003c a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b \\u003e a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003c= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"},\"StakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\nimport \\\"./Math.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\nimport \\\"./IBEP20.sol\\\";\\n\\n/// @title The ATR Staking contract with 3 staking plans\\n/// @notice This contract is only intended for the Post-ICO staking\\ncontract StakingPool is Ownable {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    uint256 public constant RATES_DENOMINATOR = 1e11;\\n\\n    enum StakingPlan {\\n        ThreeMonths,\\n        SixMonths,\\n        NineMonths\\n    }\\n\\n    struct Stake {\\n        uint256 principal; // Amount staked\\n        uint256 lockTimestamp; // Date at which the stake has been locked\\n        uint256 unlockTimestamp; // Date from which the stake can be unlocked\\n        uint256 withdrawTimestamp;\\n        uint256 withdrawnAmount;\\n        StakingPlan stakingPlan;\\n        bool withdrawn;\\n    }\\n\\n    /// WithdrawRight defines the behavior upon withdrawal BEFORE the end of a lockup period,\\n    /// if the lockup period is over, the stakeholder can withraw no matter what this enum says\\n    /// - None: Cannot withdraw anything BEFORE the end of lockupPeriod (Default)\\n    /// - Principal: Can withdraw ONLY the principal BEFORE the end of lockupPeriod\\n    /// - All: Can withdraw BOTH principal AND compounded intrerest until now BEFORE the end of lockupPeriod\\n    enum WithdrawRight {\\n        None,\\n        Principal,\\n        All\\n    }\\n\\n    struct Stakeholder {\\n        uint256 totalPrincipals;\\n        WithdrawRight withdrawRight;\\n        Stake[] stakes;\\n    }\\n\\n    /// Contains the infos and settings for a single staking plan\\n    struct StakingPlanInfos {\\n        uint256 lockupPeriod;\\n        uint256 dailyRate;\\n        uint256 maxRate;\\n        uint256 totalPrincipals;\\n        WithdrawRight withdrawRight;\\n        bool isAvailable;\\n    }\\n\\n    uint256 public minimumStake;\\n    uint256 public totalPrincipals = 0;\\n    uint256 public maxRewards = 0;\\n    StakingPlanInfos[3] public stakingPlans;\\n    mapping(address =\\u003e Stakeholder) public stakeholderMap;\\n\\n    IBEP20 private _atrToken;\\n\\n    /// @notice Checks that staking is available for a single staking plan\\n    /// @param _plan The staking plan to check for availability\\n    modifier whenStakingAvailable(StakingPlan _plan) {\\n        require(\\n            stakingPlans[uint8(_plan)].isAvailable,\\n            \\\"Staking is not available for this plan\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    /// @notice Checks that the msg.sender can withdraw his {_stakeIndex}th stake\\n    modifier canWithdraw(uint256 _stakeIndex) {\\n        Stakeholder storage stakeholder = stakeholderMap[_msgSender()];\\n        require(\\n            stakeholder.stakes.length \\u003e _stakeIndex,\\n            \\\"No stake at this index\\\"\\n        );\\n\\n        Stake storage stakeStruct = stakeholder.stakes[_stakeIndex];\\n        require(!stakeStruct.withdrawn, \\\"Stake already withdrawn!\\\");\\n\\n        StakingPlanInfos storage stakingPlan = stakingPlans[\\n            uint8(stakeStruct.stakingPlan)\\n        ];\\n\\n        require(\\n            block.timestamp \\u003e= stakeStruct.unlockTimestamp || // Stake is naturally unlocked or\\n                stakeholder.withdrawRight != WithdrawRight.None || // Lock has been removed for this stakeholder or\\n                stakingPlan.withdrawRight != WithdrawRight.None, // Lock has been removed for this plan for some reason\\n            \\\"Cannot withdraw yet\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    event Staked(\\n        address indexed stakeholder,\\n        uint256 principal,\\n        uint256 stakeIndex,\\n        StakingPlan stakingPlan,\\n        uint256 unlockTimestamp\\n    );\\n    event Withdrawn(address indexed stakeholder, uint256 amount);\\n    event ReserveRefilled(uint256 addedAmount, uint256 newTotal);\\n    event ReserveWithdrawn(uint256 withdrawnAmount, uint256 newTotal);\\n    event StakeholderWithdrawRightChanged(\\n        address indexed stakeholder,\\n        WithdrawRight newWithdrawRight\\n    );\\n    event StakingPlanChanged(\\n        StakingPlan stakingPlan,\\n        WithdrawRight withdrawRight,\\n        bool isAvailable\\n    );\\n\\n    /// @dev Sets the value for the ATR token address, this is not hard-coded\\n    /// for testing purposes.\\n    ///\\n    /// It also sets the basic settings for the three plans.\\n    /// @param _token The ATR Token address\\n    constructor(address _token) {\\n        _atrToken = IBEP20(_token);\\n\\n        uint256 DAYS_IN_YEAR = 365 days;\\n        uint256 THREE_MONTHS = DAYS_IN_YEAR.div(4); // 3 months\\n        uint256 SIX_MONTHS = DAYS_IN_YEAR.div(2); // 6 months\\n        uint256 NINE_MONTHS = DAYS_IN_YEAR.mul(3).div(4); // 9 month)s\\n        uint256 THREE_MONTHS_DAILY_RATE = 100_038_298_275; // e^(ln(1.15)/365) * RATES_DENOMINATOR (expected APY = 15%)\\n        uint256 SIX_MONTHS_DAILY_RATE = 100_049_963_589; // e^(ln(1.20)/365) * RATES_DENOMINATOR (expected APY = 20%)\\n        uint256 NINE_MONTHS_DAILY_RATE = 100_061_153_911; // e^(ln(1.25)/365) * RATES_DENOMINATOR (expected APY = 25%)\\n        // e^(ln(1.15)/4) * RATES_DENOMINATOR (expected 3 months rate) used for precise \\u0026 inexpensive calculation\\n        uint256 THREE_MONTHS_MAX_RATE = 103_555_807_634;\\n        // e^(ln(1.20)/2) * RATES_DENOMINATOR (expected 6 months rate) used for precise \\u0026 inexpensive calculation\\n        uint256 SIX_MONTHS_MAX_RATE = 109_544_511_501;\\n        // e^(ln(1.25)/4*3) * RATES_DENOMINATOR (expected 9 months rate) used for precise \\u0026 inexpensive calculation\\n        uint256 NINE_MONTHS_MAX_RATE = 118_217_701_125;\\n\\n        minimumStake = uint256(1_500).mul(10**(_atrToken.decimals())); // 1500 ATR\\n\\n        stakingPlans[0].lockupPeriod = THREE_MONTHS;\\n        stakingPlans[0].dailyRate = THREE_MONTHS_DAILY_RATE;\\n        stakingPlans[0].maxRate = THREE_MONTHS_MAX_RATE;\\n        stakingPlans[0].withdrawRight = WithdrawRight.None;\\n        stakingPlans[0].isAvailable = true;\\n        stakingPlans[0].totalPrincipals = 0;\\n\\n        stakingPlans[1].lockupPeriod = SIX_MONTHS;\\n        stakingPlans[1].dailyRate = SIX_MONTHS_DAILY_RATE;\\n        stakingPlans[1].maxRate = SIX_MONTHS_MAX_RATE;\\n        stakingPlans[1].withdrawRight = WithdrawRight.None;\\n        stakingPlans[1].isAvailable = true;\\n        stakingPlans[1].totalPrincipals = 0;\\n\\n        stakingPlans[2].lockupPeriod = NINE_MONTHS;\\n        stakingPlans[2].dailyRate = NINE_MONTHS_DAILY_RATE;\\n        stakingPlans[2].maxRate = NINE_MONTHS_MAX_RATE;\\n        stakingPlans[2].withdrawRight = WithdrawRight.None;\\n        stakingPlans[2].isAvailable = true;\\n        stakingPlans[2].totalPrincipals = 0;\\n    }\\n\\n    /// @notice Stakes {_principal} with {_stakingPlan} settings.\\n    /// @param _principal The amount to be staked\\n    /// @param _stakingPlan The chosen staking plan\\n    /// Note Staking resets your \\\"WithdrawRight\\\" to the default \\\"None\\\" value.\\n    /// Note You need to approve {_principal} tokens from the ATR contract.\\n    function stake(uint256 _principal, StakingPlan _stakingPlan)\\n        external\\n        whenStakingAvailable(_stakingPlan)\\n    {\\n        require(\\n            _principal \\u003e= minimumStake,\\n            \\\"Principal is under the minimum stake requirement\\\"\\n        );\\n\\n        Stakeholder storage stakeholder = stakeholderMap[_msgSender()];\\n        StakingPlanInfos storage stakingPlan = stakingPlans[\\n            uint8(_stakingPlan)\\n        ];\\n\\n        Stake memory stakeStruct;\\n        stakeStruct.lockTimestamp = block.timestamp;\\n        stakeStruct.unlockTimestamp = block.timestamp.add(\\n            stakingPlan.lockupPeriod\\n        );\\n        stakeStruct.principal = _principal;\\n        stakeStruct.stakingPlan = _stakingPlan;\\n        stakeStruct.withdrawn = false;\\n        stakeStruct.withdrawnAmount = 0;\\n        stakeStruct.withdrawTimestamp = 0;\\n        stakeholder.stakes.push(stakeStruct);\\n\\n        stakeholder.totalPrincipals = stakeholder.totalPrincipals.add(\\n            _principal\\n        );\\n        stakingPlan.totalPrincipals = stakingPlan.totalPrincipals.add(\\n            _principal\\n        );\\n        totalPrincipals = totalPrincipals.add(_principal);\\n        maxRewards = maxRewards.add(\\n            stakingPlan.maxRate.mul(_principal).div(RATES_DENOMINATOR).sub(\\n                _principal\\n            )\\n        );\\n\\n        if (stakeholder.withdrawRight != WithdrawRight.None) {\\n            stakeholder.withdrawRight = WithdrawRight.None;\\n            emit StakeholderWithdrawRightChanged(\\n                _msgSender(),\\n                WithdrawRight.None\\n            );\\n        }\\n\\n        require(\\n            _atrToken.transferFrom(_msgSender(), address(this), _principal),\\n            \\\"Could not stake from the ATR contract\\\"\\n        );\\n        require(\\n            maxRewards \\u003c= reserve(),\\n            \\\"Reserve isn\\u0027t enough to give the maximum rewards for this stake\\\"\\n        );\\n\\n        emit Staked(\\n            _msgSender(),\\n            _principal,\\n            stakeholder.stakes.length.sub(1),\\n            _stakingPlan,\\n            stakeStruct.unlockTimestamp\\n        );\\n    }\\n\\n    /// @notice Withdraws the {_stakeIndex}th stake of the transaction signer.\\n    /// @param _stakeIndex The index of the stake in the Stakeholder struct\\u0027s stakes field\\n    /// Note Three (3) scenarios are possible:\\n    /// - If the unlock period has not been reached, the stakeholder was not granted the permission to\\n    ///   override the period, or the staking plan doesn\\u0027t permit to override the period\\n    ///   the transaction will fail and be reverted\\n    /// - If the unlock period has not been reached and the stakeholder can withdraw only his principal\\n    ///   either thanks to an override for himself or his staking plan, then they will withdraw only\\n    ///   his principal\\n    /// - Otherwise, if the unlock period is reached, the stakeholder has been granted the permission to\\n    ///   override the unlock period fully or the staking plan permits this, the stakeholder will withdraw\\n    ///   both his principal and the compounded interest up to this moment (or the maximum possible for\\n    ///   his plan if they waited further than the staking period)\\n    function withdraw(uint256 _stakeIndex) external canWithdraw(_stakeIndex) {\\n        // Withdrawable balance performs all the checks for us and returns only the withdrawable balance.\\n        uint256 balance = _withdrawableBalance(_msgSender(), _stakeIndex);\\n\\n        Stakeholder storage stakeholder = stakeholderMap[_msgSender()];\\n        Stake storage stakeStruct = stakeholder.stakes[_stakeIndex];\\n        StakingPlanInfos storage stakingPlan = stakingPlans[\\n            uint8(stakeStruct.stakingPlan)\\n        ];\\n\\n        stakeStruct.withdrawn = true;\\n        stakeStruct.withdrawnAmount = balance;\\n        stakeStruct.withdrawTimestamp = block.timestamp;\\n        stakingPlan.totalPrincipals = stakingPlan.totalPrincipals.sub(\\n            stakeStruct.principal\\n        );\\n        totalPrincipals = totalPrincipals.sub(stakeStruct.principal);\\n        stakeholder.totalPrincipals = stakeholder.totalPrincipals.sub(\\n            stakeStruct.principal\\n        );\\n        maxRewards = maxRewards.sub(\\n            stakeStruct\\n                .principal\\n                .mul(stakingPlan.maxRate)\\n                .div(RATES_DENOMINATOR)\\n                .sub(stakeStruct.principal)\\n        );\\n\\n        _withdrawAmount(balance);\\n    }\\n\\n    /// @dev Withdraws {amount} to the transaction signer.\\n    /// Since it is marked as internal and only called by {withdraw} after\\n    /// the necessary checks, it should be safe to assume the stakeholder can indeed\\n    /// withdraw {amount} tokens.\\n    /// @param amount The amount to withdraw.\\n    function _withdrawAmount(uint256 amount) internal {\\n        require(\\n            _atrToken.transfer(_msgSender(), amount),\\n            \\\"Error during token transfer\\\"\\n        );\\n\\n        emit Withdrawn(_msgSender(), amount);\\n    }\\n\\n    /// @notice Sets {_stakingPlan}\\u0027s staking availability to {_newAvailability}\\n    /// @param _stakingPlan The staking plan to update\\n    /// @param _newAvailability The new availability of the plan\\n    ///     - true = available\\n    ///     - false = unavailable\\n    function setStakingPlanAvailability(\\n        StakingPlan _stakingPlan,\\n        bool _newAvailability\\n    ) external onlyOwner {\\n        StakingPlanInfos storage stakingPlan = stakingPlans[\\n            uint8(_stakingPlan)\\n        ];\\n        stakingPlan.isAvailable = _newAvailability;\\n\\n        emit StakingPlanChanged(\\n            _stakingPlan,\\n            stakingPlan.withdrawRight,\\n            _newAvailability\\n        );\\n    }\\n\\n    /// @notice Sets {_stakingPlan}\\u0027s withdraw right to {_newWithdrawRight}\\n    /// @param _stakingPlan The staking plan to update\\n    /// @param _newWithdrawRight The new withdraw right of the plan\\n    function setStakingPlanWithdrawRight(\\n        StakingPlan _stakingPlan,\\n        WithdrawRight _newWithdrawRight\\n    ) external onlyOwner {\\n        StakingPlanInfos storage stakingPlan = stakingPlans[\\n            uint8(_stakingPlan)\\n        ];\\n        stakingPlan.withdrawRight = _newWithdrawRight;\\n\\n        emit StakingPlanChanged(\\n            _stakingPlan,\\n            _newWithdrawRight,\\n            stakingPlan.isAvailable\\n        );\\n    }\\n\\n    /// @notice Sets {_stakeholder}\\u0027s withdraw right to {_newWithdrawRight}\\n    /// @param _stakeholder The stakeholder to update\\n    /// @param _newWithdrawRight The new withdraw right of the stakeholder\\n    function setStakeholderWithdrawRight(\\n        address _stakeholder,\\n        WithdrawRight _newWithdrawRight\\n    ) external onlyOwner {\\n        Stakeholder storage stakeholder = stakeholderMap[_stakeholder];\\n        stakeholder.withdrawRight = _newWithdrawRight;\\n\\n        emit StakeholderWithdrawRightChanged(_stakeholder, _newWithdrawRight);\\n    }\\n\\n    /// @notice Adds {_amount} tokens to the reserve from {_fromAddress}\\n    /// @param _amount The amount to add to the reserve\\n    /// @param _fromAddress The address from which to take the funds\\n    /// Note {_fromAddress} needs to approve {_amount} tokens from the ATR contract\\n    /// Note Sending tokens directly to the contract also works\\n    function addToReserve(uint256 _amount, address _fromAddress)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _atrToken.transferFrom(_fromAddress, address(this), _amount),\\n            \\\"Could not add tokens to the reserve\\\"\\n        );\\n\\n        emit ReserveRefilled(_amount, reserve());\\n    }\\n\\n    /// @notice Withdraws {_amount} tokens from the reserve to {_recipient}\\n    /// @param _amount The amount to withdraw from the reserve\\n    /// @param _recipient The address which will receive the withdrawn funds\\n    /// Note By making use of {reserve} it cannot withdraw anything from the\\n    /// stakeholders principals\\n    function withdrawFromReserve(uint256 _amount, address _recipient)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _amount \\u003c= reserve(),\\n            \\\"Cannot withdraw more than the allocated reserve\\\"\\n        );\\n        require(\\n            reserve().sub(_amount) \\u003e= maxRewards,\\n            \\\"Cannot withdraw an amount that would prevent users to withdraw their stakes\\\"\\n        );\\n        require(\\n            _atrToken.transfer(_recipient, _amount),\\n            \\\"Withdrawal failed from ATR contract\\\"\\n        );\\n\\n        emit ReserveWithdrawn(_amount, reserve());\\n    }\\n\\n    /// @notice Returns {_stakeholder}\\u0027s stakes\\n    /// @param _stakeholder The stakeholder of whow we want to check the stakes\\n    /// @return stakes {_stakeholder}\\u0027s stakes\\n    function stakeholderStakes(address _stakeholder)\\n        external\\n        view\\n        returns (Stake[] memory stakes)\\n    {\\n        return stakeholderMap[_stakeholder].stakes;\\n    }\\n\\n    /// @notice Returns the reserve of the StakingPool, that is the amount of token\\n    /// payable as interests\\n    /// @return reserveBalance The total reserve of the StakingPool\\n    function reserve() public view returns (uint256 reserveBalance) {\\n        return _atrToken.balanceOf(address(this)).sub(totalPrincipals);\\n    }\\n\\n    /// @notice Computes the current withdrawable balance of the {_stakeIndex}th stake of\\n    /// the msg.sender\\n    /// @return balance The current witdrawable balance of the {_stakeIndex}\\u0027th stake of\\n    /// {_stakeholder} (0 means nothing to withdraw yet/at all)\\n    function withdrawableBalance(uint256 _stakeIndex)\\n        public\\n        view\\n        returns (uint256 balance)\\n    {\\n        return withdrawableBalance(_msgSender(), _stakeIndex);\\n    }\\n\\n    /// @notice Computes the current withdrawable balance of the {_stakeIndex}th stake of\\n    /// {_stakeholder}\\n    /// @param _stakeIndex The index of the stake in the Stakeholder struct\\u0027s stakes field\\n    /// @return balance The current witdrawable balance of the {_stakeIndex}\\u0027th stake of\\n    /// {_stakeholder} (0 means nothing to withdraw yet/at all)\\n    function withdrawableBalance(address _stakeholder, uint256 _stakeIndex)\\n        public\\n        view\\n        returns (uint256 balance)\\n    {\\n        Stakeholder storage stakeholder = stakeholderMap[_stakeholder];\\n        if (stakeholder.stakes.length \\u003c= _stakeIndex) return 0;\\n\\n        Stake storage stakeStruct = stakeholder.stakes[_stakeIndex];\\n        if (stakeStruct.withdrawn) return 0;\\n\\n        StakingPlanInfos storage stakingPlan = stakingPlans[\\n            uint8(stakeStruct.stakingPlan)\\n        ];\\n\\n        if (\\n            block.timestamp \\u003c stakeStruct.unlockTimestamp \\u0026\\u0026\\n            stakeholder.withdrawRight == WithdrawRight.None \\u0026\\u0026\\n            stakingPlan.withdrawRight == WithdrawRight.None\\n        ) return 0;\\n\\n        return _withdrawableBalance(_stakeholder, _stakeIndex);\\n    }\\n\\n    /// @notice Computes the current withdrawable balance of the {_stakeIndex}th stake of\\n    /// {_stakeholder}\\n    /// @param _stakeIndex The index of the stake in the Stakeholder struct\\u0027s stakes field\\n    /// @dev This function doesn\\u0027t perform checks and is meant to be used internally after\\n    /// having checked that there is, indeed, a withdrawable balance\\n    function _withdrawableBalance(address _stakeholder, uint256 _stakeIndex)\\n        internal\\n        view\\n        returns (uint256 balance)\\n    {\\n        Stakeholder storage stakeholder = stakeholderMap[_stakeholder];\\n        Stake storage stakeStruct = stakeholder.stakes[_stakeIndex];\\n        StakingPlanInfos storage stakingPlan = stakingPlans[\\n            uint8(stakeStruct.stakingPlan)\\n        ];\\n\\n        if (\\n            block.timestamp \\u003e= stakeStruct.unlockTimestamp ||\\n            stakeholder.withdrawRight == WithdrawRight.All ||\\n            stakingPlan.withdrawRight == WithdrawRight.All\\n        ) {\\n            return compoundedBalance(_stakeholder, _stakeIndex);\\n        }\\n\\n        return stakeStruct.principal;\\n    }\\n\\n    /// @notice Computes the current compounded balance (principal + interests) of the\\n    /// {_stakeIndex}th stake of the msg.sender\\n    /// @param _stakeIndex The index of the stake in the Stakeholder struct\\u0027s stakes field\\n    /// @return balance The current compounded balance (principal + interests) of the\\n    /// {_stakeIndex}th stake of the msg.sender\\n    function compoundedBalance(uint256 _stakeIndex)\\n        public\\n        view\\n        returns (uint256 balance)\\n    {\\n        return compoundedBalance(_msgSender(), _stakeIndex);\\n    }\\n\\n    /// @notice Computes the compounded balance (principal + interests) of the\\n    /// {_stakeIndex}th stake of the msg.sender at {_estimationDate}\\n    /// @param _stakeIndex The index of the stake in the Stakeholder struct\\u0027s stakes field\\n    /// @param _estimationDate The date to which simulate the compounded balance\\n    /// @return balance The compounded balance (principal + interests) of the\\n    /// {_stakeIndex}th stake of the msg.sender at {_estimationDate}\\n    /// Note:\\n    /// - If {_estimationDate} \\u003c {stakeStruct.lockDate} it computes for the current blocks timestamp\\n    /// - If {_estimationDate} \\u003e {stakeStruct.unlockDate} it computes for the {stakeStruct.unlockDate}\\n    function compoundedBalance(uint256 _stakeIndex, uint256 _estimationDate)\\n        public\\n        view\\n        returns (uint256 balance)\\n    {\\n        return compoundedBalance(_msgSender(), _stakeIndex, _estimationDate);\\n    }\\n\\n    /// @notice Computes the current compounded balance (principal + interests) of a {_stakeholder}\\u0027s\\n    /// {_stakeIndex}th stake\\n    /// @param _stakeholder The stakeholder whose balance to check\\n    /// @param _stakeIndex The index of the stake in the Stakeholder struct\\u0027s stakes field\\n    /// @return balance The current compounded balance of a {_stakeholder}\\u0027s\\n    /// {_stakeIndex}th stake\\n    function compoundedBalance(address _stakeholder, uint256 _stakeIndex)\\n        public\\n        view\\n        returns (uint256 balance)\\n    {\\n        return compoundedBalance(_stakeholder, _stakeIndex, 0);\\n    }\\n\\n    /// @notice Computes the compounded balance (principal + interests) of a {_stakeholder}\\u0027s\\n    /// {_stakeIndex}th stake at {_estimationDate}\\n    /// @param _stakeholder The stakeholder whose balance to check\\n    /// @param _stakeIndex The index of the stake in the Stakeholder struct\\u0027s stakes field\\n    /// @param _estimationDate The date to which simulate the compounded balance\\n    /// @return balance The compounded balance of a {_stakeholder}\\u0027s\\n    /// {_stakeIndex}th stake at {_estimationDate}\\n    /// Note:\\n    /// - If {_estimationDate} \\u003c {stakeStruct.lockDate} it computes for the current blocks timestamp\\n    /// - If {_estimationDate} \\u003e {stakeStruct.unlockDate} it computes for the {stakeStruct.unlockDate}\\n    function compoundedBalance(\\n        address _stakeholder,\\n        uint256 _stakeIndex,\\n        uint256 _estimationDate\\n    ) public view returns (uint256 balance) {\\n        Stakeholder storage stakeholder = stakeholderMap[_stakeholder];\\n        require(\\n            stakeholder.stakes.length \\u003e _stakeIndex,\\n            \\\"No stake at this index\\\"\\n        );\\n        Stake storage stakeStruct = stakeholder.stakes[_stakeIndex];\\n        StakingPlanInfos storage stakingPlan = stakingPlans[\\n            uint8(stakeStruct.stakingPlan)\\n        ];\\n\\n        if (_estimationDate \\u003c stakeStruct.lockTimestamp) {\\n            _estimationDate = block.timestamp;\\n        }\\n\\n        if (_estimationDate \\u003e= stakeStruct.unlockTimestamp) {\\n            return\\n                stakeStruct.principal.mul(stakingPlan.maxRate).div(\\n                    RATES_DENOMINATOR\\n                );\\n        }\\n\\n        return\\n            compoundInterest(\\n                stakeStruct.principal,\\n                stakingPlan.dailyRate,\\n                RATES_DENOMINATOR,\\n                _estimationDate.sub(stakeStruct.lockTimestamp).div(1 days)\\n            );\\n    }\\n\\n    /// @notice Computes {_principal} * rate ** {_days} where rate = {_rateNumerator} / {_rateDenominator}\\n    /// @dev This is probably a good surface for optimisation since it is a simple loop\\n    /// @param _principal The amount staked\\n    /// @param _rateNumerator The numerator of the fractionnal rate\\n    /// @param _rateDenominator The denominator of the fractionnal rate\\n    /// @param _days The elapsed days of the simulated stake\\n    /// @return balance The compounded balance of the simulation\\n    function compoundInterest(\\n        uint256 _principal,\\n        uint256 _rateNumerator,\\n        uint256 _rateDenominator,\\n        uint256 _days\\n    ) public pure returns (uint256 balance) {\\n        balance = _principal;\\n        for (uint256 i = 0; i \\u003c _days; i++) {\\n            balance = balance.mul(_rateNumerator).div(_rateDenominator);\\n        }\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotal\",\"type\":\"uint256\"}],\"name\":\"ReserveRefilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotal\",\"type\":\"uint256\"}],\"name\":\"ReserveWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum StakingPool.StakingPlan\",\"name\":\"stakingPlan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StakingPool.WithdrawRight\",\"name\":\"newWithdrawRight\",\"type\":\"uint8\"}],\"name\":\"StakeholderWithdrawRightChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum StakingPool.StakingPlan\",\"name\":\"stakingPlan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum StakingPool.WithdrawRight\",\"name\":\"withdrawRight\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAvailable\",\"type\":\"bool\"}],\"name\":\"StakingPlanChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RATES_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromAddress\",\"type\":\"address\"}],\"name\":\"addToReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"compoundInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_estimationDate\",\"type\":\"uint256\"}],\"name\":\"compoundedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"}],\"name\":\"compoundedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_estimationDate\",\"type\":\"uint256\"}],\"name\":\"compoundedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"}],\"name\":\"compoundedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"},{\"internalType\":\"enum StakingPool.WithdrawRight\",\"name\":\"_newWithdrawRight\",\"type\":\"uint8\"}],\"name\":\"setStakeholderWithdrawRight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingPool.StakingPlan\",\"name\":\"_stakingPlan\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_newAvailability\",\"type\":\"bool\"}],\"name\":\"setStakingPlanAvailability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingPool.StakingPlan\",\"name\":\"_stakingPlan\",\"type\":\"uint8\"},{\"internalType\":\"enum StakingPool.WithdrawRight\",\"name\":\"_newWithdrawRight\",\"type\":\"uint8\"}],\"name\":\"setStakingPlanWithdrawRight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"enum StakingPool.StakingPlan\",\"name\":\"_stakingPlan\",\"type\":\"uint8\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeholderMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPrincipals\",\"type\":\"uint256\"},{\"internalType\":\"enum StakingPool.WithdrawRight\",\"name\":\"withdrawRight\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"stakeholderStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum StakingPool.StakingPlan\",\"name\":\"stakingPlan\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"}],\"internalType\":\"struct StakingPool.Stake[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingPlans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrincipals\",\"type\":\"uint256\"},{\"internalType\":\"enum StakingPool.WithdrawRight\",\"name\":\"withdrawRight\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isAvailable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPrincipals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawFromReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakingPool", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007559c49c3aec50e763a486bb232fa8d0d76078e4", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e6b5420869bb2a70f17123376ce21db0f1e421224586438fe0a103c81bc40569"}