{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/HyperJumpStation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./IFarmActionInitiators.sol\\\";\\nimport \\\"./IHyperswapBreakLP.sol\\\";\\nimport \\\"./IHyperswapPair.sol\\\";\\nimport \\\"./IHyperJumpTokenDistributor.sol\\\";\\n\\ncontract HyperJumpStation is Ownable, ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant TRANSACTION_DEADLINE = 20 * 60 * 1000; // 20 minutes transaction deadline (same default as in UI)\\n  uint256 public constant MAX_TRADE_EMISSION_PERCENTAGE = 2000; // 20.00% maximum configurable trade emission percentage\\n  uint256 public constant MAX_PCT = 10000; // max percentage is  100.00%\\n\\n  // Info of each user.\\n  struct UserInfo {\\n    uint256 amount; // How many tokens the user has provided.\\n    uint256 rewardDebt; // Reward debt. See explanation below.\\n    uint256 tradeAmount;\\n    uint256 tradeRewardDebt;\\n    //\\n    // We do some fancy math here. Basically, any point in time, the amount of ALLOY\\n    // entitled to a user but is pending to be distributed is:\\n    //\\n    //  pending reward = (user.amount * pool.accRewardPerShare) - user.rewardDebt\\n    //\\n    // Whenever a user deposits or withdraws tokens to a pool. Here's what happens:\\n    //   1. The pool's `accRewardPerShare` (and `lastRewardTime`) gets updated.\\n    //   2. User receives the pending reward sent to his/her address.\\n    //   3. User's `amount` gets updated.\\n    //   4. User's `rewardDebt` gets updated.\\n  }\\n  // Info of each user that stakes tokens.\\n  mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n  // Info of each pool.\\n  struct PoolInfo {\\n    address token; // Address of staked token contract.\\n    uint256 totalTradeAmount; // the total of user trade amounts\\n    uint256 totalTradeAmountFloor; // the total of user trade amounts when last claimed\\n    uint256 allocPoint; // How many allocation points assigned to this pool. reward token to distribute per second.\\n    uint256 lastRewardTime; // Last timestamp that reward distribution occured.\\n    uint256 accRewardPerShare; // Accumulated reward per share, times claimable_precision. See below.\\n    uint256 accRewardPerTrade; // Accumulated reward per trade, times claimable_precision. See below.\\n    uint256 startTime; // first time when the pool starts emitting rewards\\n    uint256 endTime; // last time when the pool emits rewards\\n    uint256 claimable_precision; // claimable precision which is 1e12 for a token with 18 decimals, it is 1e24 for a token with 6 decimals and 1e30 for a token with no decimals\\n  }\\n  // Info of each pool.\\n  PoolInfo[] public poolInfo;\\n  // Total allocation points. Must be the sum of all allocation points in all pools.\\n  uint256 public totalAllocPoint = 0;\\n\\n  // Info of each emission receiver.\\n  struct ReceiverInfo {\\n    address receiver; // Address of receiver contract.\\n    uint256 percentage; // percentage of emission assigned to this receiver.\\n  }\\n  // List of emission receivers.\\n  ReceiverInfo[] public receiverInfo;\\n  // Total distribution points. Must be the sum of all distribution points in all pools.\\n  uint256 public totalRecieverPercentage = 0;\\n\\n  IERC20 public hyperJumpToken;\\n  IHyperJumpTokenDistributor public hyperJumpTokenDistributor;\\n\\n  // farm parameters\\n  uint256 public emission_per_second; // emission per second. bsc = 3 sec/block ftm = 1 sec/block\\n  uint256 public minFarmEmissionPercentage;\\n  uint256 public tradeEmissionPercentage;\\n\\n  // pair corresponding pid\\n  mapping(address => uint256) public pidByPair;\\n\\n  // routers which are allowed to mint\\n  mapping(address => bool) public swapminter;\\n  // routers for LP token\\n  mapping(address => address) public lpRouter;\\n\\n  address public burn_contract;\\n  IFarmActionInitiators public actionInitiators;\\n\\n  event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n  event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n  event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n  event DepositFor(address indexed user, uint256 indexed pid, uint256 amount, address indexed ultimateBeneficialOwner);\\n  event WithdrawFor(address indexed user, uint256 indexed pid, uint256 amount, address indexed ultimateBeneficialOwner);\\n  event EmergencyWithdrawFor(address indexed user, uint256 indexed pid, uint256 amount, address indexed ultimateBeneficialOwner);\\n  event BreakLpFor(address indexed user, uint256 indexed pid, uint256 amount, address indexed ultimateBeneficialOwner);\\n\\n  event Claimed(address indexed user, uint256 indexed pid, uint256 amount, uint256 timestamp);\\n  event TradeDeposit(address indexed user, uint256 indexed pid, uint256 amount);\\n  event SyncedEmission(uint256 timestamp, uint256 amount, uint256 seconds_in_period);\\n\\n  function initStation(\\n    IERC20 _hyperJumpToken,\\n    IHyperJumpTokenDistributor _hyperJumpTokenDistributor,\\n    uint256 _emission_per_second,\\n    uint256 _minFarmPercentage,\\n    uint256 _trade_emission_percentage,\\n    uint256 _burn_percentage,\\n    address _burn_contract,\\n    IFarmActionInitiators _actionInitiators\\n  ) external onlyOwner {\\n    require(address(hyperJumpToken) == address(0), \\\"!reinit\\\");\\n    hyperJumpToken = _hyperJumpToken;\\n    hyperJumpTokenDistributor = _hyperJumpTokenDistributor;\\n    emission_per_second = _emission_per_second;\\n    minFarmEmissionPercentage = _minFarmPercentage;\\n    tradeEmissionPercentage = _trade_emission_percentage;\\n\\n    // add receiver BURN_CONTRACT = 20.00% burn percentage as per vote. can be changed later\\n    burn_contract = _burn_contract;\\n    addReceiver(_burn_percentage, burn_contract);\\n    \\n    actionInitiators = _actionInitiators;\\n  }\\n\\n  function poolLength() public view returns (uint256) {\\n    return poolInfo.length;\\n  }\\n\\n  function receiverLength() public view returns (uint256) {\\n    return receiverInfo.length;\\n  }\\n\\n  // we check for dupe pool\\n  function checkForDuplicate(address _token) internal view {\\n    uint256 length = poolInfo.length;\\n    for (uint256 _pid = 0; _pid < length; _pid++) {\\n      require(poolInfo[_pid].token != _token, \\\"!duplicate pool\\\");\\n    }\\n  }\\n\\n  // we check for dupe receiver\\n  function checkForDuplicateReceiver(address _receiver) internal view {\\n    uint256 length = receiverInfo.length;\\n    for (uint256 _rid = 0; _rid < length; _rid++) {\\n      require(receiverInfo[_rid].receiver != _receiver, \\\"addReceiver: !duplicate\\\");\\n    }\\n  }\\n\\n  // Add a new lp to the pool. Can only be called by the owner.\\n  function add(uint256 _allocPoint, address _token, uint256 _start_time, uint256 _end_time, bool _withUpdate) public onlyOwner {\\n    if (_withUpdate) {\\n      massUpdatePools();\\n    }\\n    \\n    // check for duplicate pool\\n    checkForDuplicate(_token);\\n    \\n    uint256 lastRewardTime = (block.timestamp > _start_time) ? block.timestamp : _start_time;\\n    totalAllocPoint = totalAllocPoint + _allocPoint;\\n    uint256 claimable_precision = 10**(30 - IERC20Metadata(_token).decimals());\\n    poolInfo.push(\\n      PoolInfo({\\n        token: _token,\\n        totalTradeAmount: 0,\\n        totalTradeAmountFloor: 0,\\n        allocPoint: _allocPoint,\\n        lastRewardTime: lastRewardTime,\\n        accRewardPerShare: 0,\\n        accRewardPerTrade: 0,\\n        startTime: _start_time,\\n        endTime: _end_time,\\n        claimable_precision: claimable_precision\\n      })\\n    );\\n    pidByPair[_token] = poolLength() - 1;\\n  }\\n\\n  // configure LP router to be able to automate breaking LP on hitting stop loss\\n  function configureLpRouter(address _lp_token, address _lp_router) external onlyOwner {\\n    require(lpRouter[_lp_token] == address(0), \\\"LP router already configured!\\\");\\n    lpRouter[_lp_token] = _lp_router;\\n    IERC20(_lp_token).approve(_lp_router, type(uint256).max);\\n  }\\n\\n  // update the tradeEmissionPercentage\\n  function updateTradeEmissionPercentage(uint256 _new_percentage) external onlyOwner {\\n     require(_new_percentage >= 0 && _new_percentage <= MAX_TRADE_EMISSION_PERCENTAGE, \\\"!allowed trade emission percentage\\\");\\n     massUpdatePools();\\n     tradeEmissionPercentage = _new_percentage;\\n  }\\n  \\n  // Update the given pool's ALLOY allocation point. Can only be called by the owner.\\n  function set(uint256 _pid, uint256 _allocPoint, uint256 _start_time, uint256 _end_time, bool _withUpdate) external onlyOwner {\\n    if (_withUpdate) {\\n      massUpdatePools();\\n    }\\n    totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\\n    poolInfo[_pid].allocPoint = _allocPoint;\\n    poolInfo[_pid].startTime = _start_time;\\n    poolInfo[_pid].endTime = _end_time;\\n  }\\n\\n  /// @dev has a check for dupe receivers. Can only be called by the owner.\\n  function addReceiver(uint256 _percentage, address _receiver) public onlyOwner {\\n    checkForDuplicateReceiver(_receiver);\\n    require(_percentage > 0, \\\"addReceiver: percentage must be more than 0\\\");\\n    require(totalRecieverPercentage + _percentage + minFarmEmissionPercentage <= MAX_PCT, \\\"addReceiver: percentage exceeds 100.00% !\\\");\\n    receiverInfo.push(ReceiverInfo({ receiver: _receiver, percentage: _percentage }));\\n    totalRecieverPercentage += _percentage;\\n  }\\n\\n  // Update the given pool's reward allocation point. Can only be called by the owner.\\n  function setReceiver(uint256 _rid, uint256 _percentage) external onlyOwner {\\n    require(totalRecieverPercentage - receiverInfo[_rid].percentage + _percentage + minFarmEmissionPercentage <= MAX_PCT, \\\"addReceiver: percentage too high!\\\");\\n    totalRecieverPercentage = totalRecieverPercentage - receiverInfo[_rid].percentage + _percentage;\\n    receiverInfo[_rid].percentage = _percentage;\\n  }\\n\\n  // View functions to see pending rewards on frontend.\\n  function pending(uint256 _pid, address _user) public view returns (uint256 pending_farm, uint256 pending_trade) {\\n    PoolInfo storage pool = poolInfo[_pid];\\n    UserInfo storage user = userInfo[_pid][_user];\\n    uint256 total_staked = IERC20(pool.token).balanceOf(address(this));\\n    uint256 accumulatedRewardsPerShare = pool.accRewardPerShare;\\n    uint256 accumulatedRewardsPerTrade = pool.accRewardPerTrade;\\n    uint256 trades_since_last_claim = pool.totalTradeAmount - pool.totalTradeAmountFloor;\\n    if (block.timestamp > pool.lastRewardTime && (total_staked != 0 || trades_since_last_claim != 0)) {\\n      uint256 nr_of_seconds = getRewardableSeconds(pool.lastRewardTime, pool.startTime, pool.endTime);\\n      uint256 total_emission = (totalAllocPoint > 0) ? (emission_per_second * nr_of_seconds * pool.allocPoint) / totalAllocPoint : 0;\\n      uint256 claimable_farm_emission = (total_emission * (MAX_PCT - totalRecieverPercentage - tradeEmissionPercentage)) / MAX_PCT;\\n      uint256 claimable_trade_emission = (total_emission * tradeEmissionPercentage) / MAX_PCT;\\n      if (total_staked != 0) {\\n         accumulatedRewardsPerShare = accumulatedRewardsPerShare + ((claimable_farm_emission * pool.claimable_precision) / total_staked);\\n      }\\n      if (trades_since_last_claim != 0) {\\n         accumulatedRewardsPerTrade = accumulatedRewardsPerTrade + ((claimable_trade_emission * pool.claimable_precision) / trades_since_last_claim);\\n      }\\n    }\\n    pending_farm = ((user.amount * accumulatedRewardsPerShare) / pool.claimable_precision) - user.rewardDebt;\\n    pending_trade = ((user.tradeAmount * accumulatedRewardsPerTrade) / pool.claimable_precision) - user.tradeRewardDebt;\\n  }\\n\\n  // View function to see pending rewards on frontend.\\n  function pendingReward(uint256 _pid, address _user) public view returns (uint256) {\\n    (uint256 pending_farm, uint256 pending_trade) = pending(_pid, _user);\\n    return pending_farm + pending_trade;\\n  }\\n\\n  // check if pid exists\\n  function pidExists(uint256 _pid) public view returns (bool) {\\n    bool exists = 0 <= _pid && _pid < poolLength();\\n    return exists;\\n  }\\n\\n  // Return number of rewardable seconds over the given period.\\n  function getRewardableSeconds(uint256 _from, uint256 _start_time, uint256 _end_time) public view returns (uint256) {\\n    uint256 from_time = (_from > _start_time) ? _from : _start_time;\\n    uint256 to_time = (block.timestamp < _end_time) ? block.timestamp : _end_time;\\n    return (from_time <= _end_time) ? to_time - from_time : 0;\\n  }\\n\\n  function claimPoolRewards(uint256 _pid) internal {\\n    require(pidExists(_pid), \\\"handling non-existing pool!\\\");\\n    PoolInfo storage pool = poolInfo[_pid];\\n    if (block.timestamp <= pool.lastRewardTime) {\\n      return;\\n    }\\n    uint256 total_staked = IERC20(pool.token).balanceOf(address(this));\\n    uint256 trades_since_last_claim = pool.totalTradeAmount - pool.totalTradeAmountFloor;\\n    if (total_staked == 0 && trades_since_last_claim == 0) {\\n      pool.lastRewardTime = block.timestamp;\\n      return;\\n    }\\n    uint256 nr_of_seconds = getRewardableSeconds(pool.lastRewardTime, pool.startTime, pool.endTime);\\n    uint256 total_emission = (totalAllocPoint > 0) ? (emission_per_second * nr_of_seconds * pool.allocPoint) / totalAllocPoint : 0;\\n    uint256 claimable_farm_emission = total_emission;\\n\\n    // mint to traders\\n    uint256 trade_rewards = (total_emission * tradeEmissionPercentage) / MAX_PCT;\\n    if (trades_since_last_claim != 0) {\\n      pool.totalTradeAmountFloor = pool.totalTradeAmount;\\n      pool.accRewardPerTrade = pool.accRewardPerTrade + ((trade_rewards * pool.claimable_precision) / trades_since_last_claim);\\n    } else {\\n      // we will \\\"collect\\\" to a BurnContract, which will burn via the token's burn function\\n      // token has a totalBurned method which registers the amount burned, but only when using the burn function\\n      hyperJumpTokenDistributor.collectTo(burn_contract, trade_rewards);\\n    }\\n    claimable_farm_emission = claimable_farm_emission - trade_rewards; // subtract trade reward emission from claimable emission\\n\\n    // mint to emission receivers\\n    uint256 numReceivers = receiverLength();\\n    for (uint256 _rid = 0; _rid < numReceivers; _rid++) {\\n      uint256 emission_percentage = receiverInfo[_rid].percentage;\\n      uint256 receiver_reward = (total_emission * emission_percentage) / MAX_PCT;\\n      hyperJumpTokenDistributor.collectTo(payable(receiverInfo[_rid].receiver), receiver_reward ); // Mint to receiver address.\\n      claimable_farm_emission = claimable_farm_emission - receiver_reward; // subtract receiver emission from claimable emission\\n    }\\n\\n    // mint claimable emission to farm\\n    uint256 need_to_mint = claimable_farm_emission + trade_rewards;\\n    hyperJumpTokenDistributor.collectTo(payable(address(this)), need_to_mint);\\n    if (total_staked != 0) {\\n       pool.accRewardPerShare = pool.accRewardPerShare + ((claimable_farm_emission * pool.claimable_precision) / total_staked);\\n    }\\n    pool.lastRewardTime = block.timestamp;\\n  }\\n\\n  function transferClaimableRewards(uint256 _pid, address _ultimateBeneficialOwner) internal {\\n    PoolInfo storage pool = poolInfo[_pid];\\n    UserInfo storage user = userInfo[_pid][_ultimateBeneficialOwner];\\n    if (user.amount > 0) {\\n      uint256 claimable_farm_rewards = ((user.amount * poolInfo[_pid].accRewardPerShare) / pool.claimable_precision) - user.rewardDebt;\\n      uint256 claimable_trade_rewards = ((user.tradeAmount * poolInfo[_pid].accRewardPerTrade) / pool.claimable_precision) - user.tradeRewardDebt;\\n      uint256 claimable = claimable_farm_rewards + claimable_trade_rewards;\\n      if (claimable > 0) {\\n        // Check available rewards, just in case if rounding error causes pool to not have enough balance.\\n        uint256 available_rewards = hyperJumpToken.balanceOf(address(this));\\n        uint256 claiming = (claimable < available_rewards) ? claimable : available_rewards;\\n        hyperJumpToken.transfer(address(_ultimateBeneficialOwner), claiming);\\n        emit Claimed(_ultimateBeneficialOwner, _pid, claiming, block.timestamp);\\n      }\\n    }\\n  }\\n\\n  function before_handlePoolRewards(uint256 _pid, address _ultimateBeneficialOwner) internal {\\n    claimPoolRewards(_pid);\\n    transferClaimableRewards(_pid, _ultimateBeneficialOwner);\\n  }\\n  \\n  function after_handlePoolRewards(uint256 _pid, address _ultimateBeneficialOwner) internal {\\n    PoolInfo storage pool = poolInfo[_pid];\\n    UserInfo storage user = userInfo[_pid][_ultimateBeneficialOwner];\\n    // update allocation points when pool ends\\n    if (pool.allocPoint > 0 && block.timestamp > pool.endTime) {\\n        totalAllocPoint -= pool.allocPoint;\\n        pool.allocPoint = 0;\\n    }\\n    user.rewardDebt = (user.amount * pool.accRewardPerShare) / pool.claimable_precision;\\n    user.tradeRewardDebt = (user.tradeAmount * pool.accRewardPerTrade) / pool.claimable_precision;\\n  }\\n\\n  // Update reward variables for a pool\\n  function updatePool(uint256 _pid) public {\\n    before_handlePoolRewards(_pid, msg.sender);\\n    after_handlePoolRewards(_pid, msg.sender);\\n  }\\n\\n  // Update reward variables for all pools. Be careful of gas spending!\\n  function massUpdatePools() public {\\n    uint256 length = poolInfo.length;\\n    for (uint256 pid = 0; pid < length; ++pid) {\\n      updatePool(pid);\\n    }\\n  }\\n\\n  // orchestrator can calls syncEmission when the emission changes because of changes in the main distributor's weights\\n  function syncEmission(uint256 _total_amount, uint256 _seconds_in_period) external onlyOwner {\\n     massUpdatePools();\\n     emission_per_second = _total_amount / _seconds_in_period;\\n     emit SyncedEmission(block.timestamp, _total_amount, _seconds_in_period);\\n  }\\n\\n  // internal deposit function\\n  function internal_deposit(uint256 _pid, uint256 _amount, address _depositor, address _ultimateBeneficialOwner) internal returns (uint256 tokens_deposited) {\\n    before_handlePoolRewards(_pid, _ultimateBeneficialOwner);\\n    PoolInfo storage pool = poolInfo[_pid];\\n    UserInfo storage user = userInfo[_pid][address(_ultimateBeneficialOwner)];\\n    tokens_deposited = 0;\\n    if (_amount > 0) {\\n      // do check for deflationary tokens\\n      uint256 _before = IERC20(pool.token).balanceOf(address(this));\\n      IERC20(pool.token).transferFrom(address(_depositor), address(this), _amount);\\n      tokens_deposited = IERC20(pool.token).balanceOf(address(this)) - _before;\\n      user.amount = user.amount + tokens_deposited;\\n    }\\n    after_handlePoolRewards(_pid, _ultimateBeneficialOwner);\\n    return tokens_deposited;\\n  }\\n\\n  // internal withdraw function\\n  function internal_withdraw(uint256 _pid, uint256 _amount, address _ultimateBeneficialOwner) internal nonReentrant {\\n    before_handlePoolRewards(_pid, _ultimateBeneficialOwner);\\n    PoolInfo storage pool = poolInfo[_pid];\\n    UserInfo storage user = userInfo[_pid][address(_ultimateBeneficialOwner)];\\n    require(user.amount >= _amount, \\\"Withdraw: amount exceeds balance!\\\");\\n    if (_amount > 0) {\\n      user.amount = user.amount - _amount;\\n      IERC20(pool.token).transfer(address(_ultimateBeneficialOwner), _amount);\\n    }\\n    after_handlePoolRewards(_pid, _ultimateBeneficialOwner);\\n  }\\n\\n  // Withdraw without caring about rewards. EMERGENCY ONLY.\\n  function internal_emergencyWithdraw(uint256 _pid, address _ultimateBeneficialOwner) internal nonReentrant returns (uint256 user_amount) {\\n    PoolInfo storage pool = poolInfo[_pid];\\n    UserInfo storage user = userInfo[_pid][address(_ultimateBeneficialOwner)];\\n    user_amount = user.amount;\\n    IERC20(pool.token).transfer(address(_ultimateBeneficialOwner), user.amount);\\n    user.amount = 0;\\n    user.rewardDebt = 0;\\n    return user_amount;\\n  }\\n\\n  // internal break LP function\\n  function internal_break_LP(uint256 _pid, uint256 _amount, address _initiator, address _ultimateBeneficialOwner) internal nonReentrant {\\n    before_handlePoolRewards(_pid, _ultimateBeneficialOwner);\\n    PoolInfo storage pool = poolInfo[_pid];\\n    require(lpRouter[pool.token] != address(0), \\\"!lpRouterConfigured\\\");\\n    UserInfo storage user = userInfo[_pid][address(_ultimateBeneficialOwner)];\\n    require(user.amount >= _amount, \\\"Break LP: amount exceeds balance!\\\");\\n    if (_amount > 0) {\\n      user.amount = user.amount - _amount;\\n      uint256 fee = actionInitiators.calculateBreakLpFee(_initiator, _amount);\\n      UserInfo storage break_lp_fee_receiver = userInfo[_pid][actionInitiators.break_lp_fee_wallet()];\\n      break_lp_fee_receiver.amount += fee;\\n      uint256 lp_to_break = _amount - fee;\\n      address token0 = IHyperswapPair(pool.token).token0();\\n      address token1 = IHyperswapPair(pool.token).token1();\\n      address ubo = _ultimateBeneficialOwner;\\n      uint256 deadline = block.timestamp + TRANSACTION_DEADLINE;\\n      IHyperswapBreakLP(lpRouter[pool.token]).removeLiquidity(\\n        token0,\\n        token1,\\n        lp_to_break,\\n        0,\\n        0,\\n        ubo,\\n        deadline\\n      );\\n    }\\n    after_handlePoolRewards(_pid, _ultimateBeneficialOwner);\\n  }\\n\\n  // Deposit tokens\\n  function deposit(uint256 _pid, uint256 _amount) external nonReentrant {\\n    uint256 _tokens_deposited = internal_deposit(_pid, _amount, msg.sender,msg.sender);\\n    emit Deposit(msg.sender, _pid, _tokens_deposited);\\n  }\\n\\n  // Withdraw tokens\\n  function withdraw(uint256 _pid, uint256 _amount) external {\\n    internal_withdraw(_pid, _amount, msg.sender);\\n    emit Withdraw(msg.sender, _pid, _amount);\\n  }\\n\\n  // Claim yield\\n  function claim(uint256 _pid) external {\\n    internal_withdraw(_pid, 0, msg.sender);\\n  }\\n\\n  // Deposit for someone else\\n  function depositFor(uint256 _pid, uint256 _amount, address _ultimateBeneficialOwner) external nonReentrant {\\n    uint256 _tokens_deposited = internal_deposit(_pid, _amount, msg.sender, _ultimateBeneficialOwner);\\n    emit DepositFor(msg.sender, _pid, _tokens_deposited, _ultimateBeneficialOwner);\\n  }\\n\\n  // Initiate withdraw tokens for someone else (funds are never transfered to the initiator, but always to the ultimate beneficial owner)\\n  function withdrawFor(uint256 _pid, uint256 _amount, address _ultimateBeneficialOwner) external {\\n    require(actionInitiators.withdrawInitiator(msg.sender, _ultimateBeneficialOwner),\\\"!withdrawInitiatorPermission\\\");\\n    internal_withdraw(_pid, _amount, _ultimateBeneficialOwner);\\n    emit WithdrawFor(msg.sender, _pid, _amount, _ultimateBeneficialOwner);\\n  }\\n\\n  // Withdraw without caring about rewards. EMERGENCY ONLY.\\n  function emergencyWithdraw(uint256 _pid) external {\\n    uint256 _user_amount = internal_emergencyWithdraw(_pid, msg.sender);\\n    emit EmergencyWithdraw(msg.sender, _pid, _user_amount);\\n  }\\n\\n  // Initiate withdraw and break LP tokens for someone else (funds are never transfered to the initiator, but always to the ultimate beneficial owner)\\n  function breakLpFor(uint256 _pid, uint256 _amount, address _ultimateBeneficialOwner) external {\\n    require(actionInitiators.breakLpInitiator(msg.sender, _ultimateBeneficialOwner), \\\"!breakLpInitiatorPermission\\\");\\n    internal_break_LP(_pid, _amount, msg.sender, _ultimateBeneficialOwner);\\n    emit BreakLpFor(msg.sender, _pid, _amount, _ultimateBeneficialOwner);\\n  }\\n\\n  // Initiate emergencyWithdraw without caring about rewards for someone else. EMERGENCY ONLY. (funds are never transfered to the initiator, but always to the ultimate beneficial owner)\\n  function emergencyWithdrawFor(uint256 _pid, address _ultimateBeneficialOwner) external {\\n    require(actionInitiators.emergencyWithdrawInitiator(msg.sender, _ultimateBeneficialOwner), \\\"!emergencyWithdrawPermission\\\");\\n    uint256 _user_amount = internal_emergencyWithdraw(_pid, _ultimateBeneficialOwner);\\n    emit EmergencyWithdrawFor(msg.sender, _pid, _user_amount, _ultimateBeneficialOwner);\\n  }\\n\\n  function setSwapMinterAllowed(address _router, bool _allowed) external onlyOwner {\\n    swapminter[_router] = _allowed;\\n  }\\n\\n  function swapMint(address _user, address _pair, uint256 _amount) external {\\n    if (!swapminter[msg.sender]) return;\\n    uint256 pid = pidByPair[_pair];\\n    if (pid == 0 || _amount == 0) return;\\n    PoolInfo storage pool = poolInfo[pid];\\n    UserInfo storage user = userInfo[pid][_user];\\n    pool.totalTradeAmount = pool.totalTradeAmount + _amount;\\n    user.tradeAmount = user.tradeAmount + _amount;\\n  }\\n\\n  function recoverUnsupported(IERC20 _token, uint256 amount, address to) external onlyOwner {\\n     require(_token != hyperJumpToken, \\\"!JUMP\\\");\\n     uint256 length = poolInfo.length;\\n     for (uint256 pid = 0; pid < length; ++pid) {\\n         PoolInfo storage pool = poolInfo[pid];\\n         require(address(_token) != address(pool.token), \\\"pool.token\\\");\\n     }\\n     _token.transfer(to, amount);\\n  }\\n  \\n  // end of contract\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IFarmActionInitiators.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IFarmActionInitiators {\\n   function withdrawInitiator(address initiator, address ultimate_beneficial_owner) external view returns (bool);\\n   function emergencyWithdrawInitiator(address initiator, address ultimate_beneficial_owner) external view returns (bool);\\n   function breakLpInitiator(address initiator, address ultimate_beneficial_owner) external view returns (bool);\\n   function breakLpFee(address) external view returns (uint256);\\n   function break_lp_fee_wallet() external view returns (address);\\n   function calculateBreakLpFee(address _initiator, uint256 _amount) external view returns (uint256);\\n\\n   function registerWithdrawInitiator(address _initiator, bool _allowed) external;\\n   function registerEmergencyWithdrawInitiator(address _initiator, bool _allowed) external;\\n   function registerBreakLpInitiator(address _initiator, bool _allowed) external;\\n   function registerZapContract(address _zap_contract) external;\\n   \\n   function registerBreakLpFeeWallet(address _break_lp_fee_wallet) external;\\n   function registerBreakLpFee(address _initiator, uint256 _fee_percentage) external;   \\n}\"\r\n    },\r\n    \"contracts/IHyperswapBreakLP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IHyperswapBreakLP {\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n}\\n\"\r\n    },\r\n    \"contracts/IHyperswapPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.0;\\n\\ninterface IHyperswapPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"contracts/IHyperJumpTokenDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IHyperJumpTokenDistributor {\\n  function hyperJumpToken() external view returns (address);\\n\\n  function hyperJumpToken_collector() external view returns (address);\\n\\n  function collect(uint256 _amount) external;\\n\\n  function collectTo(address _destination, uint256 _amount) external;\\n\\n  function collected() external view returns (uint256);\\n\\n  function availableInDistributor() external view returns (uint256);\\n\\n  function availableInCollector() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ultimateBeneficialOwner\",\"type\":\"address\"}],\"name\":\"BreakLpFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ultimateBeneficialOwner\",\"type\":\"address\"}],\"name\":\"DepositFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ultimateBeneficialOwner\",\"type\":\"address\"}],\"name\":\"EmergencyWithdrawFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seconds_in_period\",\"type\":\"uint256\"}],\"name\":\"SyncedEmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TradeDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ultimateBeneficialOwner\",\"type\":\"address\"}],\"name\":\"WithdrawFor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PCT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TRADE_EMISSION_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSACTION_DEADLINE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionInitiators\",\"outputs\":[{\"internalType\":\"contract IFarmActionInitiators\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end_time\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"addReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ultimateBeneficialOwner\",\"type\":\"address\"}],\"name\":\"breakLpFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn_contract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lp_router\",\"type\":\"address\"}],\"name\":\"configureLpRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ultimateBeneficialOwner\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ultimateBeneficialOwner\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emission_per_second\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end_time\",\"type\":\"uint256\"}],\"name\":\"getRewardableSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hyperJumpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hyperJumpTokenDistributor\",\"outputs\":[{\"internalType\":\"contract IHyperJumpTokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_hyperJumpToken\",\"type\":\"address\"},{\"internalType\":\"contract IHyperJumpTokenDistributor\",\"name\":\"_hyperJumpTokenDistributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_emission_per_second\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minFarmPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trade_emission_percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn_percentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_burn_contract\",\"type\":\"address\"},{\"internalType\":\"contract IFarmActionInitiators\",\"name\":\"_actionInitiators\",\"type\":\"address\"}],\"name\":\"initStation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFarmEmissionPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending_farm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending_trade\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pidByPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"pidExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTradeAmountFloor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerTrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable_precision\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receiverInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"recoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end_time\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setSwapMinterAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapminter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_total_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seconds_in_period\",\"type\":\"uint256\"}],\"name\":\"syncEmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRecieverPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeEmissionPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new_percentage\",\"type\":\"uint256\"}],\"name\":\"updateTradeEmissionPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeRewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ultimateBeneficialOwner\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HyperJumpStation", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}