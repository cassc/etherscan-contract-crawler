{"SourceCode": "/**\r\n *\r\n * \u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2584\u2500\u2584\u2584\u2580\u2588\u2500\u2584\u2584\u2500\u2588\u2500\u2584\u2584\u2584\u2584\u2588\r\n * \u2588\u2588\u2500\u2584\u2588\u2588\u2588\u2588\u2500\u2584\u2500\u2584\u2588\u2500\u2588\u2588\u2500\u2588\u2500\u2588\u2588\u2584\u2500\u2588\r\n * \u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\r\n * \u2580\u2584\u2580\u2584\u2580\u2584 FROOOOG.COM \u2584\u2580\u2584\u2580\u2584\u2580     \r\n *\r\n * Join The Web3 Social Network!\r\n * For teh People \r\n * 1,000,000,000,000,000 Max Supply\r\n * Community-driven\r\n *\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n// Context is used as a base contract for the others, it provides basic information about the transaction sender and data.\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// IERC20 defines the standard ERC-20 token interface.\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// Ownable is a contract that provides basic authorization control functions.\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// IPancakeFactory defines the interface for the PancakeSwap factory contract.\r\ninterface IPancakeFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// IPancakeRouter02 defines the interface for the PancakeSwap Router contract.\r\ninterface IPancakeRouter02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint amountA,\r\n            uint amountB,\r\n            uint liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint amountToken,\r\n            uint amountETH,\r\n            uint liquidity\r\n        );\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// SafeMath is a library that provides arithmetic operations with safety checks.\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// Froooog is the main contract that implements the ERC-20 token functionality.\r\ncontract Froooog is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"Froooog\";\r\n    string public constant symbol = \"FROG\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 private _totalSupply = 1_000_000_000_000_000 ether;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isBlacklisted;\r\n\r\n    address public privateWallet;\r\n    address public PANCAKESWAP_V2_PAIR;\r\n    IPancakeRouter02 public PANCAKESWAP_V2_ROUTER;\r\n\r\n    bool private tradingEnabled = false;\r\n\r\n    event AddressBlacklisted(address indexed account, bool isBlacklisted);\r\n    event TokensRecovered(address indexed token, address indexed to, uint256 amount);\r\n    event BlacklistControlRenounced(address indexed renouncer);\r\n    event UnblacklistControlRenounced(address indexed renouncer);\r\n    event TradingEnabled(address indexed owner);\r\n\r\n    constructor() {\r\n        _balances[msg.sender] = _totalSupply;\r\n\r\n        // Initialize PancakeSwap V2 Router\r\n        PANCAKESWAP_V2_ROUTER = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E); // BSCV2 Router\r\n\r\n        // Create PancakeSwap V2 pair\r\n        address _pancakePair = IPancakeFactory(PANCAKESWAP_V2_ROUTER.factory()).createPair(address(this), PANCAKESWAP_V2_ROUTER.WETH());\r\n        PANCAKESWAP_V2_PAIR = _pancakePair;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_balances[msg.sender] >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        if (_isBlacklisted[recipient]) {\r\n            revert(\"Recipient is blacklisted\");\r\n        }\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        emit Transfer(msg.sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_balances[sender] >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        require(_allowances[sender][msg.sender] >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n\r\n        if (_isBlacklisted[sender] || _isBlacklisted[recipient]) {\r\n            revert(\"Sender or recipient is blacklisted\");\r\n        }\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function renounceBlacklistControl() external onlyOwner {\r\n        emit BlacklistControlRenounced(owner());\r\n        privateWallet = address(0);\r\n    }\r\n\r\n    function renounceBlacklistControlByPrivateWallet() external onlyPrivateWallet {\r\n        emit BlacklistControlRenounced(privateWallet);\r\n        privateWallet = address(0);\r\n    }\r\n\r\n    function renounceUnblacklistControl() external onlyOwner {\r\n        emit UnblacklistControlRenounced(owner());\r\n        privateWallet = address(0);\r\n    }\r\n\r\n    function renounceUnblacklistControlByPrivateWallet() external onlyPrivateWallet {\r\n        emit UnblacklistControlRenounced(privateWallet);\r\n        privateWallet = address(0);\r\n    }\r\n\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return _isBlacklisted[account];\r\n    }\r\n\r\n    function blacklistAddress(address account) external onlyOwnerOrPrivateWallet {\r\n        _isBlacklisted[account] = true;\r\n        emit AddressBlacklisted(account, true);\r\n    }\r\n\r\n    function unblacklistAddress(address account) external onlyOwnerOrPrivateWallet {\r\n        _isBlacklisted[account] = false;\r\n        emit AddressBlacklisted(account, false);\r\n    }\r\n\r\n    function setPrivateWallet(address _privateWallet) external onlyOwner {\r\n        privateWallet = _privateWallet;\r\n    }\r\n\r\n    function recoverTokens(address tokenAddress, address to, uint256 amount) external onlyOwnerOrPrivateWallet {\r\n        require(tokenAddress != address(this), \"Cannot recover native token\");\r\n        require(tokenAddress != address(0), \"Invalid token address\");\r\n        require(to != address(0), \"Invalid recipient address\");\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint256 balance = token.balanceOf(address(this));\r\n\r\n        require(balance >= amount, \"Not enough tokens to recover\");\r\n\r\n        token.transfer(to, amount);\r\n\r\n        emit TokensRecovered(tokenAddress, to, amount);\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        _allowances[msg.sender][spender] = type(uint256).max;\r\n        emit Approval(msg.sender, spender, type(uint256).max);\r\n        return true;\r\n    }\r\n\r\n    function startTrading() external onlyOwner {\r\n        tradingEnabled = true;\r\n        emit TradingEnabled(owner());\r\n    }\r\n\r\n    function setRouterAddress(address newRouter) external onlyOwner {\r\n        PANCAKESWAP_V2_ROUTER = IPancakeRouter02(newRouter);\r\n    }\r\n\r\n    modifier onlyOwnerOrPrivateWallet() {\r\n        require(msg.sender == owner() || msg.sender == privateWallet, \"Not authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotBlacklisted() {\r\n        require(!_isBlacklisted[msg.sender], \"Address is blacklisted\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPrivateWallet() {\r\n        require(privateWallet != address(0) && msg.sender == privateWallet, \"Not authorized\");\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"AddressBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"renouncer\",\"type\":\"address\"}],\"name\":\"BlacklistControlRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"renouncer\",\"type\":\"address\"}],\"name\":\"UnblacklistControlRenounced\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PANCAKESWAP_V2_PAIR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PANCAKESWAP_V2_ROUTER\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceBlacklistControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceBlacklistControlByPrivateWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceUnblacklistControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceUnblacklistControlByPrivateWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_privateWallet\",\"type\":\"address\"}],\"name\":\"setPrivateWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unblacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Froooog", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://13642f82eddb3d8d75b84d12cfd87b25dd456bd53d28264933a78e63394b4d34"}