{"SourceCode": "/*\r\n\r\nHODL.Finance is built upon the CeDeFi fundamentals of reflection and a nonprofit foundation.\r\nThe $HFT token is the utility token for the HODL.finance ecosystem.\r\n\r\nHODL.Finance features:\r\n   1.) 10% is charged from every transaction.\r\n   2.) 2% of which is redistributed to the holders.\r\n   3.) 2% is used for the sustainability of the LP till 2500 $BNB after going to a marketing treasury.\r\n   4.) 6% is going to a nonprofit foundation for ecosystem innovation.\r\n\r\n /$$   /$$  /$$$$$$  /$$$$$$$  /$$       /$$$$$$$$ /$$$$$$ /$$   /$$  /$$$$$$  /$$   /$$  /$$$$$$  /$$$$$$$$\r\n| $$  | $$ /$$__  $$| $$__  $$| $$      | $$_____/|_  $$_/| $$$ | $$ /$$__  $$| $$$ | $$ /$$__  $$| $$_____/\r\n| $$  | $$| $$  \\ $$| $$  \\ $$| $$      | $$        | $$  | $$$$| $$| $$  \\ $$| $$$$| $$| $$  \\__/| $$\r\n| $$$$$$$$| $$  | $$| $$  | $$| $$      | $$$$$     | $$  | $$ $$ $$| $$$$$$$$| $$ $$ $$| $$      | $$$$$\r\n| $$__  $$| $$  | $$| $$  | $$| $$      | $$__/     | $$  | $$  $$$$| $$__  $$| $$  $$$$| $$      | $$__/\r\n| $$  | $$| $$  | $$| $$  | $$| $$      | $$        | $$  | $$\\  $$$| $$  | $$| $$\\  $$$| $$    $$| $$\r\n| $$  | $$|  $$$$$$/| $$$$$$$/| $$$$$$$$| $$       /$$$$$$| $$ \\  $$| $$  | $$| $$ \\  $$|  $$$$$$/| $$$$$$$$\r\n|__/  |__/ \\______/ |_______/ |________/|__/      |______/|__/  \\__/|__/  |__/|__/  \\__/ \\______/ |________/\r\n\r\n*/\r\n\r\n//SPDX-License-Identifier:Unlicensed\r\npragma solidity 0.8.4;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// https://github.com/binance-chain/bsc-genesis-contract/blob/master/contracts/interface/IBEP20.sol\r\n/**\r\n * @dev Interface of the BEP20 standard, an extended version of ERC20 and is compatible with BEP2 and ERC20.\r\n */\r\ninterface IBEP20 is IERC20{\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the token name.\r\n   */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract HFTtoken is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /******************************************************************\r\n     *          CUSTOM DATA TYPES\r\n     ******************************************************************/\r\n    /*\r\n     * Some wallets are subject for locking of assets for sertain period of time\r\n     * and linear unlocking of particulair amount of asssets later.\r\n     * Unlocking repeats untill the locked balance of the wallet reaches 0\r\n     */\r\n    struct lockedBalanceStruct {\r\n        uint256 rLockedBalance;      // locked balance (tAmount for wallet excluded from fee, rAmount otherwise). decreases after each unlock step\r\n        uint256 nextLockInterval;    // linear multiunlock: duration of single unlocking step\r\n        uint256 lockedUntill;        // moment, utill the wallet is completely locked for transfers\r\n        uint256 rUnlockAmount;       // linear multiunlock: amount of tokens to unlock on each step in rAmount.\r\n                                     // shall be equal to rLockedBalance in case of singleUnlock\r\n    }\r\n    struct rValuesStruct {\r\n        uint256 rAmount;\r\n        uint256 rTransferAmount;\r\n        uint256 rReflection;\r\n        uint256 rLiquidity;\r\n        uint256 rFoundation;\r\n    }\r\n    struct tValuesStruct {\r\n        uint256 tAmount;\r\n        uint256 tTransferAmount;\r\n        uint256 tReflection;\r\n        uint256 tLiquidity;\r\n        uint256 tFoundation;\r\n    }\r\n\r\n    /******************************************************************\r\n     *          MAPPINGS\r\n     ******************************************************************/\r\n    mapping (address => uint256) private rOwned;\r\n    mapping (address => uint256) private tOwned;\r\n    mapping (address => mapping (address => uint256)) private allowances;\r\n    mapping (address => lockedBalanceStruct) lockedBalances;\r\n    mapping (address => bool) private isExcludedFromFee;\r\n    mapping (address => bool) private isExcludedFromReward;\r\n    address[] private excludedFromReward;\r\n    address[] private lockedWallets;\r\n\r\n    /******************************************************************\r\n     *          CONFIGURATION\r\n     ******************************************************************/\r\n    address constant BURN_ADDRESS       = 0x000000000000000000000000000000000000dEaD;\r\n    address constant WALLET_INVESTOR1   = 0x0216b528Fc3Bffc8Cd6C4A243eF5A9d2a5A1924D;\r\n    address constant WALLET_INVESTOR2   = 0x9c2653d038431341932FEaCBCC3D82fCe4082a6f;\r\n    address constant WALLET_INVESTOR3   = 0xD783b025eAa9bad5985C9C3d18D043CA18611184;\r\n    address constant WALLET_INVESTOR4   = 0x43b88dd0399eb25423c24C1B7B089536d1bE7524;\r\n    address constant WALLET_INVESTOR5   = 0x0C5b92D14e7c9c3cE0Dd7A6C7a7a56dE5aB85e65;\r\n    address constant WALLET_INVESTOR6   = 0x147a0461d64B0A6C951b262B770719e18505872e;\r\n    address constant WALLET_INVESTOR7   = 0x5875f93CF665Afb7DfF7bf5a2Bd831C9495DbA33;\r\n    address constant WALLET_INVESTOR8   = 0x31e1f16477D29eC32b4dbA58b3c16D3D5fD2DFCd;\r\n    address constant WALLET_INVESTOR9   = 0x923f574Fe41DdA91D0260f1A155076Bc8B1508E1;\r\n    address constant WALLET_INVESTOR10  = 0x7d1F229A77886902BbAC3B1e398278514448365D;\r\n    address constant WALLET_ADVISORS    = 0xcE6d4fa1FC0D34688786eC393486B397f36b604e;\r\n    address constant WALLET_TEAM        = 0x71E60d9ff7b0e3Ae8c88b7e745AF9E1D674e70d1;\r\n    address constant WALLET_DEV         = 0xC02C70ea459Ad02f16246b87f33b277a5C8B099E;\r\n    address constant WALLET_AIRDROP     = 0x12a0e4F141E2a7FdC9652E4aB6970a0C560A4e5E;\r\n    address constant WALLET_LP_SUPPLY   = 0x4eF11CE49D4336ab764e5Ee3da35fdCD55436Ad5;\r\n    address constant WALLET_BULKSENDER  = 0xFFe2B46e8A5855DDEa901F562Ee51898C9973EC0;\r\n    address walletTreasury              = 0x798A3F02885423420901c843Ff2B8f53a68a300c;\r\n    address walletMarketingTreasury     = 0x12F90e3369c3BeCd48f138E7D19e1521Feece9Fb;\r\n    address walletFoundation            = 0x571A5872a4BA11479780006647AC2a81A7dF1855;\r\n    address constant PANCAKE_V2_ROUTER_ADDRESS     = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    string private constant TOKEN_NAME = \"Hodl Finance\";\r\n    string private constant TOKEN_SYMBOL = \"HFT\";\r\n    uint8 private constant TOKEN_DECIMALS = 9;\r\n    uint256 private constant T_TOTAL = 210000 * 10**6 * 10**TOKEN_DECIMALS;\r\n    uint256 private constant MAX_BNB_TO_ADD_TO_LP = 2200 * 10**18;\r\n    uint256 public constant MAX_TX_AMOUNT = 420 * 10**6 * 10**TOKEN_DECIMALS;\r\n    uint256 private constant NUM_TOKENS_SELL_TO_ADD_TO_LP = 10 * 10**6 * 10**TOKEN_DECIMALS;\r\n    uint256 private constant NUM_TOKENS_SELL_TO_SEND_TO_FOUNDATION = 15 * 10**6 * 10**TOKEN_DECIMALS;\r\n    uint256 private constant MIN_BNB_AMOUNT_TO_SEND_TO_FOUNDATION = 1 * 10**18; //1 bnb\r\n    /*   END OF CONFIGURATION   */\r\n\r\n    bool private inSwapAndLiquify;\r\n    bool private inSwapForFoundation;\r\n\r\n\r\n    /******************************************************************\r\n     *          TOKEN\r\n     ******************************************************************/\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 private idxEFRWalletMarketingTreasury;\r\n    uint256 private idxEFRWalletTreasury;\r\n\r\n    uint256 private rTotal = (MAX - (MAX % T_TOTAL));\r\n    uint256 private tFeeTotal;\r\n\r\n    // TokenFromReflection rate, valid for the moment of distribution. Used for locked wallets, excluded from rewards\r\n    uint256 private initialTokenFromReflectionRate = rTotal.div(T_TOTAL);\r\n\r\n    uint8 public  reflectionFee = 2;\r\n    uint8 private previousReflectionFee = reflectionFee;\r\n\r\n    uint8 public  liquidityFee = 2;\r\n    uint8 private previousLiquidityFee = liquidityFee;\r\n\r\n    uint8 public  foundationFee = 6;\r\n    uint8 private previousFoundationFee = foundationFee;\r\n\r\n    uint256 public numBnbAddedToLiquidity;\r\n\r\n    uint256 public foundationCollectedRBalance;\r\n\r\n    IUniswapV2Router02 public immutable pancakeV2Router;\r\n    address public pancakeV2Pair;\r\n\r\n    /******************************************************************\r\n     *          EVENTS\r\n     ******************************************************************/\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 bnbReceived, uint256 tokensIntoLiquidity);\r\n    event BnbBurned (uint256 _amount);\r\n    event SendToFoundation (uint256 _bnbAmount);\r\n    event ReflectionFeeChanged (uint8 _previousFree, uint8 _newFee);\r\n    event LiquidityFeeChanged (uint8 _previousFree, uint8 _newFee);\r\n    event FoundationFeeChanged (uint8 _previousFree, uint8 _newFee);\r\n    event FoundationWalletChanged(address _previousAddr, address _newAddr);\r\n    event TreasuryWalletChanged(address _previousAddr, address _newAddr);\r\n    event MarketingTreasuryWalletChanged(address _previousAddr, address _newAddr);\r\n\r\n    /******************************************************************\r\n     *          MODIFIERS\r\n     ******************************************************************/\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    modifier lockTheSwapFoundation {\r\n        inSwapForFoundation = true;\r\n        _;\r\n        inSwapForFoundation = false;\r\n    }\r\n\r\n    /******************************************************************\r\n     *          CONSTRUCTOR\r\n     ******************************************************************/\r\n    constructor () {\r\n        assert (NUM_TOKENS_SELL_TO_ADD_TO_LP <= MAX_TX_AMOUNT);\r\n        assert (NUM_TOKENS_SELL_TO_SEND_TO_FOUNDATION <= MAX_TX_AMOUNT);\r\n\r\n        // use PancakeRouter V02\r\n        IUniswapV2Router02 _pancakeV2Router = IUniswapV2Router02(PANCAKE_V2_ROUTER_ADDRESS);\r\n        // Create a pancakeSwap pair for this new token.\r\n        // NOTE: _pancakeV2Router.WETH() gives an address of WBNB contract\r\n        pancakeV2Pair = IUniswapV2Factory(_pancakeV2Router.factory())\r\n            .createPair(address(this), _pancakeV2Router.WETH());\r\n\r\n        // set the rest of the contract variables\r\n        pancakeV2Router = _pancakeV2Router;\r\n\r\n        _initExcludedData();\r\n        _initialDistribution();\r\n    }\r\n\r\n    /******************************************************************\r\n     *          STATE FUNCTIONS\r\n     ******************************************************************/\r\n    /**\r\n     * @dev create data records for wallets, excluded from Rewards and from Fee\r\n     *\r\n     * Requirements: N/A\r\n     *\r\n     */\r\n    function _initExcludedData() private {\r\n        // Mark excluded from Fee wallets\r\n        isExcludedFromFee[address(this)]    = true;\r\n        isExcludedFromFee[walletTreasury]   = true;\r\n        isExcludedFromFee[walletMarketingTreasury]   = true;\r\n        isExcludedFromFee[WALLET_AIRDROP]   = true;\r\n        isExcludedFromFee[WALLET_LP_SUPPLY] = true;\r\n        isExcludedFromFee[WALLET_DEV]       = true;\r\n        isExcludedFromFee[WALLET_ADVISORS]  = true;\r\n        isExcludedFromFee[WALLET_TEAM]      = true;\r\n        isExcludedFromFee[WALLET_BULKSENDER] = true;\r\n\r\n        // Mark excluded from Reward wallets\r\n        // All wallets, which are excluded from reward, shall keep their balances in tAmount.\r\n        excludedFromReward.push(pancakeV2Pair);\r\n        excludedFromReward.push(walletTreasury);\r\n        idxEFRWalletTreasury = excludedFromReward.length - 1;\r\n        excludedFromReward.push(walletMarketingTreasury) ;\r\n        idxEFRWalletMarketingTreasury = excludedFromReward.length - 1;\r\n        excludedFromReward.push(WALLET_AIRDROP);\r\n        excludedFromReward.push(WALLET_LP_SUPPLY);\r\n        excludedFromReward.push(WALLET_DEV);\r\n        excludedFromReward.push(WALLET_ADVISORS);\r\n        excludedFromReward.push(WALLET_TEAM);\r\n        isExcludedFromReward[pancakeV2Pair]    = true;\r\n        isExcludedFromReward[walletTreasury]   = true;\r\n        isExcludedFromReward[walletMarketingTreasury]   = true;\r\n        isExcludedFromReward[WALLET_AIRDROP]   = true;\r\n        isExcludedFromReward[WALLET_LP_SUPPLY] = true;\r\n        isExcludedFromReward[WALLET_DEV]       = true;\r\n        isExcludedFromReward[WALLET_ADVISORS]  = true;\r\n        isExcludedFromReward[WALLET_TEAM]      = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Initial distribution of minted tokens to accounts:\r\n     *      Airdrop:       50%\r\n     *      LpSupply :     10%\r\n     *      Investors:     15% (6 months initial lock, then linear unlock through 24 months every month)\r\n     *      Team:          10% (6 months initial lock, then linear unlock through 24 months every month)\r\n     *      Advisors:       5% (7 days initial lock, then linear unlock through 24 months every month)\r\n     *      Dev/Marketing: 10% (7 days initial lock, then linear unlock through 24 months every month)\r\n     *\r\n     *      If wallet is excluded from rewards, distribution is done in tAmount. Otherwise in rAmount\r\n     *\r\n     * Requirements: initExcludedData() shall be aready executed before this function call\r\n     */\r\n\r\n    /*****************REALWORLD CONFIGURATION *******************************/\r\n    function _initialDistribution() private {\r\n        // Initial distribution\r\n        uint256 rAmountToDistribute;\r\n        uint256 _rToDistribute = rTotal;\r\n\r\n        // 50% goes to _walletAirdrop\r\n        rAmountToDistribute = rTotal.div(100).mul(50);\r\n        _dropInitialTokens(WALLET_AIRDROP, rAmountToDistribute);\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n\r\n        // 10% goes to LpSupply\r\n        rAmountToDistribute = rTotal.div(100).mul(10);\r\n        _dropInitialTokens(WALLET_LP_SUPPLY, rAmountToDistribute);\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n\r\n        // The rest will be distributed as locked funds\r\n        // Create array of locked wallets\r\n        lockedWallets.push(WALLET_INVESTOR1);\r\n        lockedWallets.push(WALLET_INVESTOR2);\r\n        lockedWallets.push(WALLET_INVESTOR3);\r\n        lockedWallets.push(WALLET_INVESTOR4);\r\n        lockedWallets.push(WALLET_INVESTOR5);\r\n        lockedWallets.push(WALLET_INVESTOR6);\r\n        lockedWallets.push(WALLET_INVESTOR7);\r\n        lockedWallets.push(WALLET_INVESTOR8);\r\n        lockedWallets.push(WALLET_INVESTOR9);\r\n        lockedWallets.push(WALLET_INVESTOR10);\r\n        lockedWallets.push(WALLET_TEAM);\r\n        lockedWallets.push(WALLET_ADVISORS);\r\n        lockedWallets.push(WALLET_DEV);\r\n\r\n        assert(lockedWallets.length == 13);\r\n\r\n        // 15% goes to 10 Investors (each get 1.5%)\r\n        rAmountToDistribute = rTotal.div(100).mul(15).div(10);\r\n        // all 10 investors have the same unlock setup\r\n        lockedBalanceStruct memory _lockedInvestorBalance = lockedBalanceStruct(\r\n            rAmountToDistribute,                    // lockedBalance\r\n            30 days,                                // nextLockInterval\r\n            block.timestamp.add(6 * 30 days),            // lockedUntill. Initial lock 6 months\r\n            rAmountToDistribute.div(24)                // unlockAmount - linear unlock period 24 months\r\n        );\r\n        lockedBalances[WALLET_INVESTOR1] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n        lockedBalances[WALLET_INVESTOR2] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n        lockedBalances[WALLET_INVESTOR3] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n        lockedBalances[WALLET_INVESTOR4] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n        lockedBalances[WALLET_INVESTOR5] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n        lockedBalances[WALLET_INVESTOR6] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n        lockedBalances[WALLET_INVESTOR7] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n        lockedBalances[WALLET_INVESTOR8] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n        lockedBalances[WALLET_INVESTOR9] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n        lockedBalances[WALLET_INVESTOR10] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n\r\n        // 10% goes to Dev/marketing\r\n        rAmountToDistribute = rTotal.div(100).mul(10);\r\n        lockedBalances[WALLET_DEV] = lockedBalanceStruct(\r\n            rAmountToDistribute ,                   // lockedBalance\r\n            30 days,                                // nextLockInterval\r\n            block.timestamp + 7 days,               // lockedUntill. Initial lock for 7 days\r\n            rAmountToDistribute.div(24)                // unlockAmount - linear unlock period 24 months\r\n        );\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n\r\n        // 5% goes to Advisors\r\n        rAmountToDistribute = rTotal.div(100).mul(5);\r\n        lockedBalances[WALLET_ADVISORS] = lockedBalanceStruct(\r\n            rAmountToDistribute ,                   // lockedBalance\r\n            30 days,                                // nextLockInterval\r\n            block.timestamp,                        // lockedUntill. No initial lock\r\n            rAmountToDistribute.div(24)                // unlockAmount - linear unlock period 24 months\r\n        );\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n\r\n         // 10% goes to Team\r\n        rAmountToDistribute = rTotal.div(100).mul(10);\r\n        lockedBalances[WALLET_TEAM] = lockedBalanceStruct(\r\n            rAmountToDistribute ,                   // lockedBalance\r\n            30 days,                                // nextLockInterval\r\n            block.timestamp.add(6 * 30 days),          // lockedUntill. Initial lock for 6 months\r\n            rAmountToDistribute.div(24)                // unlockAmount - linear unlock period 24 months\r\n        );\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n\r\n        // Token emission shall be completely distributed\r\n        assert (_rToDistribute == 0);\r\n    }\r\n\r\n\r\n    /********** TEST CONFIGURATION ********************\r\n    function _initialDistribution() private {\r\n        //Initial distribution\r\n        uint256 rAmountToDistribute;\r\n        uint256 _rToDistribute = rTotal;\r\n\r\n        //50% goes to _walletAirdrop\r\n        rAmountToDistribute = rTotal.div(100).mul(50);\r\n        _dropInitialTokens(WALLET_AIRDROP, rAmountToDistribute);   \r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n\r\n        //10% goes to LpSupply\r\n        rAmountToDistribute = rTotal.div(100).mul(10);\r\n        _dropInitialTokens(WALLET_LP_SUPPLY, rAmountToDistribute);   \r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n\r\n        //The rest will be distributed as locked funds\r\n        //Create array of locked wallets\r\n        lockedWallets.push(WALLET_INVESTOR1);\r\n        lockedWallets.push(WALLET_INVESTOR2);\r\n        lockedWallets.push(WALLET_INVESTOR3);\r\n        lockedWallets.push(WALLET_INVESTOR4);\r\n        lockedWallets.push(WALLET_INVESTOR5);\r\n        lockedWallets.push(WALLET_INVESTOR6);\r\n        lockedWallets.push(WALLET_INVESTOR7);\r\n        lockedWallets.push(WALLET_INVESTOR8);\r\n        lockedWallets.push(WALLET_INVESTOR9);\r\n        lockedWallets.push(WALLET_INVESTOR10);\r\n        lockedWallets.push(WALLET_TEAM);\r\n        lockedWallets.push(WALLET_ADVISORS);\r\n        lockedWallets.push(WALLET_DEV);\r\n\r\n        assert(lockedWallets.length == 13);\r\n\r\n        //15% goes to 10 Investors (each get 1.5%)\r\n        rAmountToDistribute = rTotal.div(100).mul(15).div(10);\r\n        //all 10 investors have the same unlock setup\r\n        lockedBalanceStruct memory _lockedInvestorBalance = lockedBalanceStruct(\r\n            rAmountToDistribute,          //lockedBalance\r\n            1 hours,                      //nextLockInterval\r\n            block.timestamp + 1 hours,    //lockedUntill. Initial lock 6 months\r\n            rAmountToDistribute.div(24)   //unlockAmount - linear unlock period 24 months\r\n        );\r\n        lockedBalances[WALLET_INVESTOR1] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n        lockedBalances[WALLET_INVESTOR2] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n        lockedBalances[WALLET_INVESTOR3] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n        lockedBalances[WALLET_INVESTOR4] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n        lockedBalances[WALLET_INVESTOR5] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n        lockedBalances[WALLET_INVESTOR6] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n        lockedBalances[WALLET_INVESTOR7] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n        lockedBalances[WALLET_INVESTOR8] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n        lockedBalances[WALLET_INVESTOR9] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n        lockedBalances[WALLET_INVESTOR10] = _lockedInvestorBalance;\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n\r\n        //10% goes to Dev/marketing\r\n        rAmountToDistribute = rTotal.div(100).mul(10);    \r\n        lockedBalances[WALLET_DEV] = lockedBalanceStruct(\r\n            rAmountToDistribute ,           //lockedBalance\r\n            1 hours,                        //nextLockInterval\r\n            block.timestamp.add(1 hours),       //lockedUntill. No initial lock\r\n            rAmountToDistribute.div(24)        //unlockAmount - linear unlock period 24 months           \r\n        );\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n\r\n        //5% goes to Advisors\r\n        rAmountToDistribute = rTotal.div(100).mul(5);    \r\n        lockedBalances[WALLET_ADVISORS] = lockedBalanceStruct(\r\n            rAmountToDistribute ,           //lockedBalance\r\n            1 hours,                        //nextLockInterval\r\n            block.timestamp,                //lockedUntill. No initial lock\r\n            rAmountToDistribute.div(24)        //unlockAmount - linear unlock period 24 months           \r\n        );\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n\r\n         //10% goes to Team\r\n        rAmountToDistribute = rTotal.div(100).mul(10);        \r\n        lockedBalances[WALLET_TEAM] = lockedBalanceStruct(\r\n            rAmountToDistribute ,           //lockedBalance\r\n            1 hours,                        //nextLockInterval\r\n            block.timestamp + 1 hours,  //lockedUntill. No initial lock\r\n            rAmountToDistribute.div(24)        //unlockAmount - linear unlock period 24 months           \r\n        );\r\n        _rToDistribute = _rToDistribute.sub(rAmountToDistribute);\r\n        \r\n        //Token emission shall be completely distributed\r\n        assert (_rToDistribute == 0);\r\n    }*/\r\n\r\n    /**\r\n     * @dev used for distribution of initial tokens.\r\n     *    _initialTokenFromReflectionRate is used to recalculate tAmount from rAmount\r\n     *\r\n     * Requirements: use only for distribution of tokens\r\n     */\r\n    function _dropInitialTokens(address _addr, uint256 _rDropAmount) private {\r\n        uint256 _balanceDiff = balanceOf(_addr);\r\n        rOwned[_addr] = rOwned[_addr].add(_rDropAmount);\r\n        if (isExcludedFromReward[_addr]) {\r\n            tOwned[_addr] = tOwned[_addr].add(_rDropAmount.div(initialTokenFromReflectionRate));\r\n        }\r\n        _balanceDiff = balanceOf(_addr).sub(_balanceDiff);\r\n        emit Transfer(address(0x0), _addr, _balanceDiff);\r\n    }\r\n\r\n    /**\r\n     * @dev checks unlock conditions and does unlock, if needed.\r\n     *    - for wallets, excluded from rewards, unlock put balance\r\n     *      to _rOwned and _tOwned(upplying initialTokenFromReflectionRate rate) balances\r\n     *    - for other wallets, balance is unlocked just to rOwned balance\r\n     *\r\n     * Requirements: N/A\r\n     */\r\n    function checkFundsUnlock(address _addr) public {\r\n        if (lockedBalances[_addr].rLockedBalance > 0) {\r\n            if (block.timestamp >= lockedBalances[_addr].lockedUntill) {\r\n\r\n                uint256 rDropAmount = lockedBalances[_addr].rUnlockAmount;\r\n                if (rDropAmount > lockedBalances[_addr].rLockedBalance) {\r\n                    rDropAmount = lockedBalances[_addr].rLockedBalance;\r\n                }\r\n                _dropInitialTokens(_addr, rDropAmount);\r\n                lockedBalances[_addr].rLockedBalance = (lockedBalances[_addr].rLockedBalance).sub(rDropAmount);\r\n                // set next unlock time\r\n                if (lockedBalances[_addr].rLockedBalance > 0) {\r\n                    lockedBalances[_addr].lockedUntill = (lockedBalances[_addr].lockedUntill).add(lockedBalances[_addr].nextLockInterval);\r\n                }\r\n                else\r\n                    lockedBalances[_addr].lockedUntill = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev check and do unlock of funds for all locked wallets\r\n     *\r\n     * Requirements: N/A\r\n     */\r\n    function checkFundsUnlockAll() public {\r\n        for (uint256 i = 0; i < lockedWallets.length; i++) {\r\n            checkFundsUnlock(lockedWallets[i]);\r\n        }\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_msgSender(), _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) public override returns (bool) {\r\n        _approve(_msgSender(), _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_sender, _recipient, _amount);\r\n        _approve(_sender, _msgSender(), allowances[_sender][_msgSender()].sub(_amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address _spender, uint256 _addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), _spender, allowances[_msgSender()][_spender].add(_addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), _spender, allowances[_msgSender()][_spender].sub(_subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _takeLiquidity(uint256 _tLiquidity, uint256 _rLiquidity) private {\r\n        rOwned[address(this)] = rOwned[address(this)].add(_rLiquidity);\r\n        if (isExcludedFromReward[address(this)]) {\r\n            tOwned[address(this)] = tOwned[address(this)].add(_tLiquidity);\r\n        }\r\n    }\r\n\r\n    function _takeFoundation(uint256 _tFoundation, uint256 _rFoundation) private {\r\n        rOwned[address(this)] = rOwned[address(this)].add(_rFoundation);\r\n        if (isExcludedFromReward[address(this)]) { // Shall not be excluded\r\n            tOwned[address(this)] = tOwned[address(this)].add(_tFoundation);\r\n        }\r\n        foundationCollectedRBalance = foundationCollectedRBalance.add(_rFoundation);\r\n    }\r\n\r\n    function _removeAllFee() private {\r\n        if (reflectionFee == 0 && liquidityFee == 0 && foundationFee == 0) {\r\n            return;\r\n        }\r\n\r\n        previousReflectionFee = reflectionFee;\r\n        previousLiquidityFee  = liquidityFee;\r\n        previousFoundationFee = foundationFee;\r\n\r\n        reflectionFee = 0;\r\n        liquidityFee = 0;\r\n        foundationFee = 0;\r\n    }\r\n\r\n    function _restoreAllFee() private {\r\n        reflectionFee = previousReflectionFee;\r\n        liquidityFee  = previousLiquidityFee;\r\n        foundationFee = previousFoundationFee;\r\n    }\r\n\r\n    function _approve(address _owner, address _spender, uint256 _amount) private {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev manage balance collected for foundation.\r\n     *\r\n     * Requirements: NUM_TOKENS_SELL_TO_SEND_TO_FOUNDATION <= MAX_TX_AMOUNT\r\n     */\r\n    function _foundation(address _from) private {\r\n        if (\r\n            !inSwapForFoundation &&\r\n            _from != pancakeV2Pair\r\n        ) {\r\n            uint256 contractBalance = balanceOf(address(this));\r\n            uint256 foundationCollectedTokenBalance = tokenFromReflection(foundationCollectedRBalance);\r\n            if (foundationCollectedTokenBalance < contractBalance) {\r\n                contractBalance = foundationCollectedTokenBalance;\r\n            }\r\n\r\n            bool overMinTokenBalance = contractBalance >= NUM_TOKENS_SELL_TO_SEND_TO_FOUNDATION;\r\n            if (overMinTokenBalance) {\r\n                foundationCollectedRBalance = foundationCollectedRBalance.sub(reflectionFromToken(NUM_TOKENS_SELL_TO_SEND_TO_FOUNDATION, false));\r\n                _swapTokensForBnb(NUM_TOKENS_SELL_TO_SEND_TO_FOUNDATION);\r\n            }\r\n        }\r\n\r\n        if (!inSwapForFoundation)\r\n            _sendCollectedBnbToFoundation();\r\n    }\r\n\r\n    /*\r\n     * @dev send all BNB, collected till now from 6% foundation fee to foundation wallet\r\n     */\r\n    function _sendCollectedBnbToFoundation() private {\r\n        if (address(this).balance > MIN_BNB_AMOUNT_TO_SEND_TO_FOUNDATION) {\r\n            emit SendToFoundation(address(this).balance);\r\n            (bool success, ) = payable(walletFoundation).call{value:(address(this).balance)}(\"\");\r\n            require(success, \"Transfer failed.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev manage liquify balance of the token contract.\r\n     *      collected from fee tokens on the balance of the contract are:\r\n     *        - if numTokensSellToAddToLiquidity is available on balance:\r\n     *              - in case total tokens amount  added to liquidityPool from fees does not exceed maxTokensToLuquify:\r\n     *                  - swap half to BNB and add to liquiditypool\r\n     *              - in case total tokens amount  added to liquidityPool from fees exceeds maxTokensToLuquify:\r\n     *                  - send tokens to walletMarketingTreasury\r\n     *\r\n     * Requirements: NUM_TOKENS_SELL_TO_ADD_TO_LP <= MAX_TX_AMOUNT\r\n     */\r\n    function _liquify(address _from) private returns(bool) {\r\n        if (\r\n            !inSwapAndLiquify &&\r\n            _from != pancakeV2Pair   // token buyer is not paying extra gas for this extra operation\r\n        ) {\r\n            uint256 contractTokenBalanceToUse = balanceOf(address(this));\r\n            uint256 foundationCollectedTokenBalance = tokenFromReflection(foundationCollectedRBalance);\r\n            \r\n            if (foundationCollectedTokenBalance <= contractTokenBalanceToUse) {\r\n                contractTokenBalanceToUse = contractTokenBalanceToUse.sub(foundationCollectedTokenBalance);\r\n            }\r\n            \r\n            bool overMinTokenBalance = contractTokenBalanceToUse >= NUM_TOKENS_SELL_TO_ADD_TO_LP;\r\n            if (overMinTokenBalance) {\r\n                contractTokenBalanceToUse = NUM_TOKENS_SELL_TO_ADD_TO_LP;\r\n                if (numBnbAddedToLiquidity < MAX_BNB_TO_ADD_TO_LP) {\r\n                    // add liquidity\r\n                    _swapAndLiquify(contractTokenBalanceToUse);\r\n                }\r\n                else {\r\n                    // transfer collected tokens to walletMarketingTreasury without fee.\r\n                    _tokenTransfer(address(this), walletMarketingTreasury, contractTokenBalanceToUse,false);\r\n                }\r\n                return (true);\r\n            }\r\n        }\r\n        return (false);\r\n    }\r\n\r\n    function _transfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) private {\r\n        require(_from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_amount > 0, \"Transfer amount must be greater than zero\");\r\n        /* exclude from maxTxAmount limitation following transactions:\r\n         *    - from WALLET_AIRDROP (initial distribution of tokens)\r\n         *    - from WALLET_LP_SUPPLY (initial creation of LP)\r\n         *    - taking out liquidity:\r\n         *        - from PancakePair to PancakeRouter(first step of taking liquidity in BNB)\r\n         *        - from PancakeRouter(second step of taking liquidity in BNB)\r\n         */\r\n        if ((_from != WALLET_AIRDROP) &&\r\n            (_from != WALLET_LP_SUPPLY) &&\r\n            (_from != WALLET_BULKSENDER) &&\r\n            !((_from == pancakeV2Pair) && (_to == PANCAKE_V2_ROUTER_ADDRESS)) &&\r\n            (_from != PANCAKE_V2_ROUTER_ADDRESS))\r\n        {\r\n            require(_amount <= MAX_TX_AMOUNT, \"Transfer amount exceeds the maxTxAmount.\");\r\n        }\r\n\r\n        // add collected tokens to liquidity pool.\r\n        bool liquify_executed;\r\n        // skip liquify() and foundation() if Tx is for taking liquidity\r\n        if (!((_from == pancakeV2Pair) && (_to == PANCAKE_V2_ROUTER_ADDRESS)) ||\r\n            (_from == PANCAKE_V2_ROUTER_ADDRESS))\r\n        {\r\n            if (!inSwapForFoundation)\r\n                liquify_executed = _liquify(_from);\r\n            // convert collected tokens to BNB and transfer to Foundation.\r\n            if (!liquify_executed && !inSwapAndLiquify)\r\n                _foundation(_from);\r\n        }\r\n\r\n        // indicates if fee should be deducted from transfer\r\n        bool _takeFee = true;\r\n        // if any account belongs to _isExcludedFromFee account then do not take the fee\r\n        // Also do not take fee when liquidity is taken out\r\n        if (isExcludedFromFee[_from]\r\n            || isExcludedFromFee[_to] ||\r\n            (_from == pancakeV2Pair && _to == PANCAKE_V2_ROUTER_ADDRESS) ||\r\n            _from == PANCAKE_V2_ROUTER_ADDRESS)\r\n        {\r\n            _takeFee = false;\r\n        }\r\n\r\n        // transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(_from,_to, _amount,_takeFee);\r\n    }\r\n\r\n    function _swapAndLiquify(uint256 _amount) private lockTheSwap {\r\n        // split the contract balance into halves\r\n        uint256 half = _amount.div(2);\r\n        uint256 otherHalf = _amount.sub(half);\r\n\r\n        // capture the contract's current BNB balance.\r\n        // this is so that we can capture exactly the amount of BNB that the\r\n        // swap creates, and not make the liquidity event include any BNB that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for BNB\r\n        _swapTokensForBnb(half); // <- this breaks the BNB -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much BNB did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // take in account also part, added in tokens\r\n        numBnbAddedToLiquidity = numBnbAddedToLiquidity.add(newBalance.mul(2));\r\n\r\n        // add liquidity to pancakeswap\r\n        _addLiquidity(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function _swapTokensForBnb(uint256 _tokenAmount) private lockTheSwapFoundation {\r\n        // generate the pancakeswap pair path of token -> wbnb\r\n        address[] memory _path = new address[](2);\r\n        _path[0] = address(this);\r\n        _path[1] = pancakeV2Router.WETH();\r\n\r\n        _approve(address(this), address(pancakeV2Router), _tokenAmount);\r\n\r\n        // make the swap\r\n        pancakeV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _tokenAmount,\r\n            0, // accept any amount of BNB\r\n            _path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _swapBnbForTokens(uint256 _bnbAmount) private {\r\n        // generate the pancakeswap pair path of token -> wbnb\r\n        address[] memory _path = new address[](2);\r\n        _path[0] = pancakeV2Router.WETH();\r\n        _path[1] = address(this);\r\n\r\n        _approve(address(this), address(pancakeV2Router), _bnbAmount);\r\n\r\n        // make the swap\r\n        pancakeV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: _bnbAmount}(\r\n            0, // accept any amount of Tokens\r\n            _path,\r\n            address(this), // Burn tokens on contracts address\r\n            block.timestamp.add(300)\r\n        );\r\n    }\r\n\r\n    function _addLiquidity(uint256 _tokenAmount, uint256 _bnbAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(pancakeV2Router), _tokenAmount);\r\n\r\n        // add the liquidity\r\n        pancakeV2Router.addLiquidityETH{value: _bnbAmount}(\r\n            address(this),\r\n            _tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            BURN_ADDRESS,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * This method is responsible for taking all fee, if takeFee is true\r\n     */\r\n    function _tokenTransfer(address _sender, address _recipient, uint256 _amount,bool _takeFee) private {\r\n        if (!_takeFee)\r\n            _removeAllFee();\r\n\r\n        if (isExcludedFromReward[_sender] && !isExcludedFromReward[_recipient]) {\r\n            _transferFromExcludedFromReward(_sender, _recipient, _amount);\r\n        } else if (!isExcludedFromReward[_sender] && isExcludedFromReward[_recipient]) {\r\n            _transferToExcludedFromReward(_sender, _recipient, _amount);\r\n        } else if (isExcludedFromReward[_sender] && isExcludedFromReward[_recipient]) {\r\n            _transferBothExcludedFromReward(_sender, _recipient, _amount);\r\n        } else {\r\n            _transferStandard(_sender, _recipient, _amount);\r\n        }\r\n\r\n        if (!_takeFee)\r\n            _restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address _sender, address _recipient, uint256 _tAmount) private {\r\n        tValuesStruct memory _tValues;\r\n        rValuesStruct memory _rValues;\r\n        (_rValues, _tValues) = _getValues(_tAmount);\r\n        rOwned[_sender] = rOwned[_sender].sub(_rValues.rAmount);\r\n        rOwned[_recipient] = rOwned[_recipient].add(_rValues.rTransferAmount);\r\n        _takeLiquidity(_tValues.tLiquidity, _rValues.rLiquidity);\r\n        _takeFoundation(_tValues.tFoundation, _rValues.rFoundation);\r\n        _reflectFee(_rValues.rReflection, _tValues.tReflection);\r\n        emit Transfer(_sender, _recipient, _tValues.tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcludedFromReward(address _sender, address _recipient, uint256 _tAmount) private {\r\n        tValuesStruct memory _tValues;\r\n        rValuesStruct memory _rValues;\r\n        (_rValues, _tValues) = _getValues(_tAmount);\r\n        rOwned[_sender] = rOwned[_sender].sub(_rValues.rAmount);\r\n        tOwned[_recipient] = tOwned[_recipient].add(_tValues.tTransferAmount);\r\n        rOwned[_recipient] = rOwned[_recipient].add(_rValues.rTransferAmount);\r\n        _takeLiquidity(_tValues.tLiquidity, _rValues.rLiquidity);\r\n        _takeFoundation(_tValues.tFoundation, _rValues.rFoundation);\r\n        _reflectFee(_rValues.rReflection, _tValues.tReflection);\r\n        emit Transfer(_sender, _recipient, _tValues.tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcludedFromReward(address _sender, address _recipient, uint256 _tAmount) private {\r\n        tValuesStruct memory _tValues;\r\n        rValuesStruct memory _rValues;\r\n        (_rValues, _tValues) = _getValues(_tAmount);\r\n        tOwned[_sender] = tOwned[_sender].sub(_tValues.tAmount);\r\n        rOwned[_sender] = rOwned[_sender].sub(_rValues.rAmount);\r\n        rOwned[_recipient] = rOwned[_recipient].add(_rValues.rTransferAmount);\r\n        _takeLiquidity(_tValues.tLiquidity, _rValues.rLiquidity);\r\n        _takeFoundation(_tValues.tFoundation, _rValues.rFoundation);\r\n        _reflectFee(_rValues.rReflection, _tValues.tReflection);\r\n        emit Transfer(_sender, _recipient, _tValues.tTransferAmount);\r\n    }\r\n\r\n    function _transferBothExcludedFromReward(address _sender, address _recipient, uint256 _tAmount) private {\r\n        tValuesStruct memory _tValues;\r\n        rValuesStruct memory _rValues;\r\n        (_rValues, _tValues) = _getValues(_tAmount);\r\n        tOwned[_sender] = tOwned[_sender].sub(_tValues.tAmount);\r\n        rOwned[_sender] = rOwned[_sender].sub(_rValues.rAmount);\r\n        tOwned[_recipient] = tOwned[_recipient].add(_tValues.tTransferAmount);\r\n        rOwned[_recipient] = rOwned[_recipient].add(_rValues.rTransferAmount);\r\n        _takeLiquidity(_tValues.tLiquidity, _rValues.rLiquidity);\r\n        _takeFoundation(_tValues.tFoundation, _rValues.rFoundation);\r\n        _reflectFee(_rValues.rReflection, _tValues.tReflection);\r\n        emit Transfer(_sender, _recipient, _tValues.tTransferAmount);\r\n    }\r\n\r\n    function setReflectionFee(uint8 _value) external onlyOwner {\r\n        checkFeeInRange(_value, 1, 4);\r\n        uint8 prevFee = reflectionFee;\r\n        reflectionFee = _value;\r\n        checkTotalFeeInRange();\r\n        emit ReflectionFeeChanged(prevFee, reflectionFee);\r\n    }\r\n\r\n    function setLiquidityFee(uint8 _value) external onlyOwner {\r\n        checkFeeInRange(_value, 1, 4);\r\n        uint8 prevFee = liquidityFee;\r\n        liquidityFee = _value;\r\n        checkTotalFeeInRange();\r\n        emit LiquidityFeeChanged(prevFee, liquidityFee);\r\n    }\r\n\r\n    function setFoundationFee(uint8 _value) external onlyOwner {\r\n        checkFeeInRange(_value, 1, 8);\r\n        uint8 prevFee = foundationFee;\r\n        foundationFee = _value;\r\n        checkTotalFeeInRange();\r\n        emit FoundationFeeChanged(prevFee, foundationFee);\r\n    }\r\n    \r\n    \r\n    function setFoundationWallet(address _addr) external onlyOwner {\r\n        emit FoundationWalletChanged(walletFoundation, _addr);\r\n        walletFoundation = _addr;\r\n    }\r\n\r\n    function setTreasuryWallet(address _addr) external onlyOwner {\r\n        emit TreasuryWalletChanged(walletTreasury, _addr);\r\n\r\n        //update isExcludedFromFee\r\n        isExcludedFromFee[walletTreasury] = false;\r\n        isExcludedFromFee[_addr] = true;\r\n        //update isExcludedFromReward\r\n        isExcludedFromReward[walletTreasury] = false;\r\n        isExcludedFromReward[_addr] = true;\r\n        excludedFromReward[idxEFRWalletTreasury] = _addr;\r\n\r\n        walletTreasury = _addr;\r\n\r\n        //For wallet, excluded from reward, rOwned shall be converted to tOwned\r\n        tOwned[walletTreasury] = tokenFromReflection(rOwned[walletTreasury]);\r\n    }\r\n\r\n    function setMarketingTreasuryWallet(address _addr) external onlyOwner {\r\n        emit MarketingTreasuryWalletChanged(walletMarketingTreasury, _addr);\r\n        //update isExcludedFromFee\r\n        isExcludedFromFee[walletMarketingTreasury] = false;\r\n        isExcludedFromFee[_addr] = true;\r\n        //update isExcludedFromReward\r\n        isExcludedFromReward[walletMarketingTreasury] = false;\r\n        isExcludedFromReward[_addr] = true;\r\n        excludedFromReward[idxEFRWalletMarketingTreasury] = _addr;\r\n\r\n        walletMarketingTreasury = _addr;\r\n\r\n        //For wallet, excluded from reward, rOwned shall be converted to tOwned\r\n        tOwned[walletMarketingTreasury] = tokenFromReflection(rOwned[walletMarketingTreasury]);\r\n    }\r\n\r\n    /******************************************************************\r\n     *          VIEW FUNCTIONS\r\n     ******************************************************************/\r\n    function getOwner() public view override returns (address) {\r\n        return owner();\r\n    }\r\n\r\n     /**\r\n     * @dev returns time till next balance unlock for a wallet.\r\n     * returns 0 if wallet is not locked or lock time expired\r\n     *\r\n     * Requirements: N/A\r\n     */\r\n    function getTimeTillNextUnlock(address _addr) public view returns(uint256) {\r\n        if (lockedBalances[_addr].rLockedBalance > 0 &&\r\n            lockedBalances[_addr].lockedUntill > block.timestamp) {\r\n            return ((lockedBalances[_addr].lockedUntill).sub(block.timestamp));\r\n        }\r\n        // Wallet was not in the list of lockedWallets\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev the balance of wallet\r\n     *\r\n     * Requirements: N/A\r\n     */\r\n    function balanceOf(address _account) public view override returns (uint256) {\r\n        if (isExcludedFromReward[_account]) return tOwned[_account];\r\n        return tokenFromReflection(rOwned[_account]);\r\n    }\r\n\r\n    function getExcludedFromReward(address _account) public view returns (bool) {\r\n        return isExcludedFromReward[_account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return tFeeTotal;\r\n    }\r\n\r\n    function reflectionFromToken(uint256 _tAmount, bool _deductTransferFee) public view returns(uint256) {\r\n        require(_tAmount <= T_TOTAL, \"Amount must be less than supply\");\r\n\r\n        tValuesStruct memory _tValues;\r\n        rValuesStruct memory _rValues;\r\n        (_rValues, _tValues) = _getValues(_tAmount);\r\n\r\n        if (!_deductTransferFee) {\r\n            return _rValues.rAmount;\r\n        } else {\r\n            return _rValues.rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 _rAmount) public view returns(uint256) {\r\n        require(_rAmount <= rTotal, \"Amount must be less than total reflections\");\r\n\r\n        uint256 currentRate =  _getRate();\r\n\r\n        return _rAmount.div(currentRate);\r\n    }\r\n\r\n    function _reflectFee(uint256 _rFee, uint256 _tFee) private {\r\n        rTotal = rTotal.sub(_rFee);\r\n        tFeeTotal = tFeeTotal.add(_tFee);\r\n    }\r\n\r\n    function _getValues(uint256 _tAmount) private view returns (rValuesStruct memory, tValuesStruct memory) {\r\n        tValuesStruct memory _tValues = _getTValues(_tAmount);\r\n        //(uint256 rAmount, uint256 rTransferAmount, uint256 rReflection, uint256 rLiquidity, uint256 rFoundation) = _getRValues(tAmount, tReflection, tLiquidity, tFoundation, _getRate());\r\n        rValuesStruct memory _rValues = _getRValues(_tValues, _getRate());\r\n\r\n        return (_rValues, _tValues);\r\n    }\r\n\r\n    function _getTValues(uint256 _tAmount) private view returns (tValuesStruct memory) {\r\n        tValuesStruct memory _tValues;\r\n\r\n        _tValues.tAmount = _tAmount;\r\n        _tValues.tReflection = _tAmount.mul(reflectionFee).div(10**2);\r\n        _tValues.tLiquidity = _tAmount.mul(liquidityFee).div(10**2);\r\n        _tValues.tFoundation = _tAmount.mul(foundationFee).div(10**2);\r\n        _tValues.tTransferAmount = _tAmount.sub(_tValues.tReflection).sub(_tValues.tLiquidity).sub(_tValues.tFoundation);\r\n\r\n        return (_tValues);\r\n    }\r\n\r\n    function _getRValues(tValuesStruct memory _tValues, uint256 _currentRate) private pure returns (rValuesStruct memory) {\r\n        rValuesStruct memory _rValues;\r\n\r\n        _rValues.rAmount = _tValues.tAmount.mul(_currentRate);\r\n        _rValues.rReflection = _tValues.tReflection.mul(_currentRate);\r\n        _rValues.rLiquidity = _tValues.tLiquidity.mul(_currentRate);\r\n        _rValues.rFoundation = _tValues.tFoundation.mul(_currentRate);\r\n        _rValues.rTransferAmount = _rValues.rAmount.sub(_rValues.rReflection).sub(_rValues.rLiquidity).sub(_rValues.rFoundation);\r\n\r\n        return (_rValues);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 _rSupply, uint256 _tSupply) = _getCurrentSupply();\r\n\r\n        return _rSupply.div(_tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 _rSupply = rTotal;\r\n        uint256 _tSupply = T_TOTAL;\r\n\r\n        for (uint256 i = 0; i < excludedFromReward.length; i++) {\r\n            if (rOwned[excludedFromReward[i]] > _rSupply || tOwned[excludedFromReward[i]] > _tSupply) return (rTotal, T_TOTAL);\r\n            _rSupply = _rSupply.sub(rOwned[excludedFromReward[i]]);\r\n            _tSupply = _tSupply.sub(tOwned[excludedFromReward[i]]);\r\n        }\r\n\r\n        if (_rSupply < rTotal.div(T_TOTAL)) return (rTotal, T_TOTAL);\r\n        return (_rSupply, _tSupply);\r\n    }\r\n\r\n    function getExcludedFromFee(address _account) public view returns(bool) {\r\n        return isExcludedFromFee[_account];\r\n    }\r\n\r\n    function name() public pure override returns (string memory) {\r\n        return TOKEN_NAME;\r\n    }\r\n\r\n    function symbol() public pure override returns (string memory) {\r\n        return TOKEN_SYMBOL;\r\n    }\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return TOKEN_DECIMALS;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return T_TOTAL;\r\n    }\r\n    \r\n    function tokensCollectedForFoundation() public view returns (uint256) {\r\n        return (tokenFromReflection(foundationCollectedRBalance));\r\n    }\r\n\r\n    function tokensCollectedForLpAndFoundation() public view returns (uint256) {\r\n        return (balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev get locked balance of a wallet\r\n     *     in case wallet is excluded from reflection rewards, \r\n     *     rAmount is recalculated to tAmount\r\n     *     using _initialTokenFromReflectionRate\r\n     *\r\n     */\r\n    function getLockedBalance(address _addr) public view returns(uint256 _lockedBalance) {\r\n        _lockedBalance = (lockedBalances[_addr].rLockedBalance).div(initialTokenFromReflectionRate);\r\n        return _lockedBalance;\r\n    }\r\n        \r\n    function circulatingSupply() public view returns (uint256 _circulatingSupply) {\r\n        _circulatingSupply = totalSupply();\r\n\r\n        for (uint256 idx = 0; idx < lockedWallets.length; idx++)\r\n            _circulatingSupply = _circulatingSupply.sub(getLockedBalance(lockedWallets[idx]));\r\n\r\n        return _circulatingSupply;\r\n    }\r\n\r\n    function checkTotalFeeInRange() internal view {\r\n        require((foundationFee + liquidityFee + reflectionFee <= 10) && (foundationFee + liquidityFee + reflectionFee >= 3), \"Total fee exceeds 10%\");\r\n    }\r\n\r\n    function checkFeeInRange(uint8 _fee, uint8 _min, uint8 _max) internal pure {\r\n        require((_fee >= _min) && (_fee <= _max), \"Fee out of bounds\");\r\n    }\r\n\r\n    /**\r\n     * To recieve BNB from pancakeV2Router when swaping\r\n     */\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BnbBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_previousFree\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_newFee\",\"type\":\"uint8\"}],\"name\":\"FoundationFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_previousAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"FoundationWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_previousFree\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_newFee\",\"type\":\"uint8\"}],\"name\":\"LiquidityFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_previousAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"MarketingTreasuryWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_previousFree\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_newFee\",\"type\":\"uint8\"}],\"name\":\"ReflectionFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bnbAmount\",\"type\":\"uint256\"}],\"name\":\"SendToFoundation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_previousAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"TreasuryWalletChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TX_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFundsUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkFundsUnlockAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_circulatingSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationCollectedRBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockedBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTimeTillNextUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numBnbAddedToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"setFoundationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setFoundationWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMarketingTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"setReflectionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensCollectedForFoundation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensCollectedForLpAndFoundation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HFTtoken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c241a71a7be279e5dcffba1cc5720ccf2b345b9e55c57a8a15f83855bfcb9c78"}