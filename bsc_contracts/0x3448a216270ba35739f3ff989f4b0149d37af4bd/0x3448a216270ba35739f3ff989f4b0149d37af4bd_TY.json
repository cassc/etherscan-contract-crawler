{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TY.sol\": {\r\n      \"content\": \"/**\\r\\n *Submitted for verification at BscScan.com on 2023-04-15\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ninterface ISwapRouter {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\ninterface ISwapFactory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n}\\r\\ninterface IUniswapV2Pair {\\r\\n    function getReserves() external view returns (uint256 reserve0, uint256 reserve1, uint32 blockTimestampLast);\\r\\n}\\r\\n\\r\\nlibrary EnumerableSet {\\r\\n\\r\\n    struct Set {\\r\\n        bytes32[] _values;\\r\\n        mapping (bytes32 => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) {\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n\\r\\n            bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n            set._values[toDeleteIndex] = lastvalue;\\r\\n\\r\\n            set._indexes[lastvalue] = toDeleteIndex + 1;\\r\\n\\r\\n            set._values.pop();\\r\\n\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n}\\r\\nabstract contract Ownable {\\r\\n    address internal _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () {\\r\\n        address msgSender = msg.sender;\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == msg.sender, \\\"!owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"new is 0\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract TY is IERC20, Ownable {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    uint8 private _decimals;\\r\\n    uint8 private _sellRate;\\r\\n    uint8 private _buyRate;\\r\\n    uint8 private _transferRate;\\r\\n    uint8 private _subLiquidityRate;\\r\\n    uint256 private _lpBonusLimit = 10;\\r\\n    uint256 private _allTyBonus = 0;\\r\\n    uint256 private _marketBonus;\\r\\n\\r\\n    uint32 private _startTradeBlock;\\r\\n    uint256 private _addPriceTokenAmount;\\r\\n    uint256 private _totalSupply;\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n\\r\\n    address private _addressA;\\r\\n    address private _usdtAddress;\\r\\n    address private _routerAddress;\\r\\n    address private _usdtPairAddress;\\r\\n    ISwapRouter public uniswapV2Router;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    mapping(address => uint256) private _balances;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    mapping(address => bool) private _swapPairMap;\\r\\n    mapping(address => uint256) private _lpMap;\\r\\n    mapping(address => uint256) private _tyMap;\\r\\n    address[] private _lpAddress;\\r\\n    EnumerableSet.AddressSet private _excludeFeeSet;\\r\\n    EnumerableSet.AddressSet private _tradeSet;\\r\\n    address[] private _path;\\r\\n\\r\\n    constructor (string memory Name, string memory Symbol, uint256 Supply, address RouterAddress, address UsdtAddress, address addressA){\\r\\n        _name = Name;\\r\\n        _symbol = Symbol;\\r\\n        _decimals = 18;\\r\\n        _usdtAddress = UsdtAddress;\\r\\n        _routerAddress = RouterAddress;\\r\\n        _allowances[address(this)][RouterAddress] = MAX;\\r\\n        uniswapV2Router = ISwapRouter(RouterAddress);\\r\\n        ISwapFactory swapFactory = ISwapFactory(uniswapV2Router.factory());\\r\\n        _usdtPairAddress = swapFactory.createPair(address(this), UsdtAddress);\\r\\n        _swapPairMap[_usdtPairAddress] = true;\\r\\n        _path.push(address(this));\\r\\n        _path.push(UsdtAddress);\\r\\n\\r\\n        uint256 total = Supply * 1e18;\\r\\n        _totalSupply = total;\\r\\n\\r\\n        _addressA = addressA;\\r\\n        _balances[msg.sender] = total;\\r\\n        emit Transfer(address(0), msg.sender, total);\\r\\n\\r\\n        _excludeFeeSet.add(msg.sender);\\r\\n        _excludeFeeSet.add(addressA);\\r\\n        _excludeFeeSet.add(address(this));\\r\\n        _excludeFeeSet.add(RouterAddress);\\r\\n        _excludeFeeSet.add(address(0x000000000000000000000000000000000000dEaD));\\r\\n        _addPriceTokenAmount=1;\\r\\n        _sellRate = 6;\\r\\n        _buyRate = 5;\\r\\n        _transferRate = 5;\\r\\n        _subLiquidityRate = 10;\\r\\n    }\\r\\n\\r\\n    function getAllParams() external view returns (\\r\\n        uint8  sellRate,\\r\\n        uint8  buyRate,\\r\\n        uint8  transferRate,\\r\\n        uint8  subLiquidityRate,\\r\\n        uint32  startTradeBlock,\\r\\n        uint256  addPriceTokenAmount,\\r\\n        address  addressA,\\r\\n        uint256  lpBonusLimit,\\r\\n        uint256  allTyBonus,\\r\\n        uint256  marketBonus\\r\\n    ){\\r\\n        sellRate = _sellRate;\\r\\n        buyRate = _buyRate;\\r\\n        transferRate = _transferRate;\\r\\n        subLiquidityRate = _subLiquidityRate;\\r\\n        startTradeBlock = _startTradeBlock;\\r\\n        addPriceTokenAmount = _addPriceTokenAmount;\\r\\n        addressA = _addressA;\\r\\n        lpBonusLimit = _lpBonusLimit;\\r\\n        allTyBonus = _allTyBonus;\\r\\n        marketBonus = _marketBonus;\\r\\n    }\\r\\n\\r\\n    function pairAddress() external view returns (address) {\\r\\n        return _usdtPairAddress;\\r\\n    }\\r\\n\\r\\n\\r\\n    function usdtAddress() external view returns (address) {\\r\\n        return _usdtAddress;\\r\\n    }\\r\\n\\r\\n    function symbol() external view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function name() external view override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function decimals() external view override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) external view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        if (_allowances[sender][msg.sender] != MAX) {\\r\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _isLiquidity(address from,address to) internal view returns(bool isAdd,bool isDel){\\r\\n        (uint r0,uint r1,) = IUniswapV2Pair(_usdtPairAddress).getReserves();\\r\\n        uint rUsdt = r0;\\r\\n        uint bUsdt = IERC20(_usdtAddress).balanceOf(_usdtPairAddress);\\r\\n        if(address(this)<_usdtAddress){\\r\\n            rUsdt = r1;\\r\\n        }\\r\\n        if( _swapPairMap[to] ){\\r\\n            if( bUsdt >= rUsdt ){\\r\\n                isAdd = bUsdt - rUsdt > _addPriceTokenAmount;\\r\\n            }\\r\\n        }\\r\\n        if( _swapPairMap[from] ){\\r\\n            isDel = bUsdt <= rUsdt;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(amount > 0, \\\"TY: transfer amount must be bg 0\\\");\\r\\n        require(!_tradeSet.contains(from),\\\"from address is blocked\\\");\\r\\n        require(!(_tradeSet.contains(to) && _swapPairMap[from]),\\\"to address buy or remove is blocked\\\");\\r\\n        uint isIn = 0;\\r\\n        for(uint256 s = 0; s < _lpAddress.length; s++){\\r\\n            if(_lpAddress[s] == from){\\r\\n                isIn = 1;\\r\\n            }\\r\\n        }\\r\\n        if(isIn == 0){\\r\\n            _lpMap[from] = 0;\\r\\n            _tyMap[from] = 0;\\r\\n        }else{\\r\\n            //lptongji\\r\\n            uint256 myLp = IERC20(_usdtPairAddress).balanceOf(from);\\r\\n            _lpMap[from] = myLp;\\r\\n        }\\r\\n\\r\\n        if (_excludeFeeSet.contains(from) || _excludeFeeSet.contains(to) ){\\r\\n            _tokenTransfer(from, to, amount);\\r\\n        }else{\\r\\n            require(_startTradeBlock > 0, \\\"TY: trade do not start\\\");\\r\\n            (bool isAddLiquidity, bool isDelLiquidity) = _isLiquidity(from,to);\\r\\n            uint feeRate = _sellRate;\\r\\n            uint marketFee = 0;\\r\\n            uint burnFee = 0;\\r\\n            if(isAddLiquidity || isDelLiquidity){\\r\\n                if(isDelLiquidity) {\\r\\n                    //\u53bb\u9664\u6d41\u52a8\u6027\\r\\n                    feeRate = _subLiquidityRate;\\r\\n                    //\u7ed9\u8425\u9500\\r\\n                    marketFee = amount*feeRate*6/100/10;\\r\\n                    _balances[address(this)] = _balances[address(this)] + marketFee;\\r\\n                    emit Transfer(from, address(this),marketFee);\\r\\n                    _marketBonus = _marketBonus + marketFee;\\r\\n                    //\u9500\u6bc1\\r\\n                    burnFee = amount*feeRate*4/100/10;\\r\\n                    _tokenTransfer(from, address(0x000000000000000000000000000000000000dEaD), burnFee);\\r\\n                    amount = amount*(100-feeRate)/100;\\r\\n\\r\\n                }else{\\r\\n                    //\u6dfb\u52a0\u6d41\u52a8\u6027\\r\\n                    if(isIn == 0){\\r\\n                        _lpAddress.push(from);\\r\\n                    }\\r\\n                }\\r\\n                _tokenTransfer(from, to, amount);\\r\\n            }else{\\r\\n                if(_swapPairMap[from]){\\r\\n                    //\u4e70122\\r\\n                    feeRate = _buyRate;\\r\\n                    marketFee = amount*feeRate*4/100/10;\\r\\n                    burnFee = amount*feeRate*4/100/10;\\r\\n                    _tokenTransfer(from, to, amount*(100-feeRate)/100);\\r\\n                    //\u7ed9\u8425\u9500+\u5206\u7ea2\\r\\n                    _balances[address(this)] = _balances[address(this)] + amount*feeRate*6/100/10;\\r\\n                    emit Transfer(from, address(this), amount*feeRate*6/100/10);\\r\\n                    _marketBonus = _marketBonus + marketFee;\\r\\n                    //lp\u5206\u7ea2\u7d2f\u8ba1,\u5206\u914d,\\r\\n                    if(amount*feeRate*2/100/10 > 0){\\r\\n                        _lpBonus(amount*feeRate*2/100/10);\\r\\n                    }\\r\\n                }else if(_swapPairMap[to]){\\r\\n                    //\u5356222\\r\\n                    marketFee = amount*feeRate/100/3;\\r\\n                    burnFee = amount*feeRate/100/3;\\r\\n\\r\\n                    _tokenTransfer(from, to, amount*(100-feeRate)/100);\\r\\n                    //\u7ed9\u8425\u9500\\r\\n                    _balances[address(this)] = _balances[address(this)] + marketFee*2;\\r\\n                    emit Transfer(from, address(this), marketFee*2);\\r\\n                    _marketBonus = _marketBonus + marketFee;\\r\\n                    //lp\u5206\u7ea2\u7d2f\u8ba1,\u5206\u914d,\\r\\n                    if(amount*feeRate/100/3 > 0){\\r\\n                        _lpBonus(amount*feeRate/100/3);\\r\\n                    }\\r\\n                }else{\\r\\n                    //\u8f6c\u8d26\\r\\n                    feeRate = _transferRate;\\r\\n                    marketFee = amount*feeRate*6/100/10;\\r\\n                    burnFee = amount*feeRate*4/100/10;\\r\\n\\r\\n                    _tokenTransfer(from, to, amount*(100-feeRate)/100);\\r\\n                    //\u7ed9\u8425\u9500\\r\\n                    _tokenTransfer(from, address(this), marketFee);\\r\\n                    _marketBonus = _marketBonus + marketFee;\\r\\n                    //\u89e6\u53d1\u5206\u7ea2\\r\\n                    if(_tyMap[from] > _lpBonusLimit * 1e18){\\r\\n                        //\u5f00\u59cb\u5206\u7ea2\\r\\n                        uniswapV2Router.swapExactTokensForTokens(_tyMap[from], 0, _path, from, block.timestamp+60);\\r\\n                        _tyMap[from] = 0;\\r\\n                    }\\r\\n                    //\u89e6\u53d1\u8425\u9500\\r\\n                    if(_marketBonus > 0){\\r\\n                        uniswapV2Router.swapExactTokensForTokens(_marketBonus, 0, _path, _addressA, block.timestamp+60);\\r\\n                        _marketBonus = 0;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                //\u9500\u6bc1\\r\\n                _tokenTransfer(from, address(0x000000000000000000000000000000000000dEaD), burnFee);\\r\\n\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    function _lpBonus(\\r\\n        uint256 lpFee\\r\\n    ) private {\\r\\n        //\u5c06TY\u7ed9\u5408\u7ea6\\r\\n        uint256 allLp = IERC20(_usdtPairAddress).totalSupply();\\r\\n        _allTyBonus = _allTyBonus + lpFee;\\r\\n\\r\\n        if(allLp > 0){\\r\\n            for(uint i=0;i<_lpAddress.length;i++){\\r\\n                _tyMap[_lpAddress[i]] = _tyMap[_lpAddress[i]] + _allTyBonus * _lpMap[_lpAddress[i]] / allLp;\\r\\n            }\\r\\n            _allTyBonus = 0;\\r\\n        }\\r\\n\\r\\n    }\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        _balances[sender] = _balances[sender] - tAmount;\\r\\n        _balances[recipient] = _balances[recipient] + tAmount;\\r\\n        emit Transfer(sender, recipient, tAmount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function setAddressA(address addr) external onlyOwner {\\r\\n        _addressA = addr;\\r\\n    }\\r\\n\\r\\n    function startTrade() external onlyOwner {\\r\\n        require(0 == _startTradeBlock, \\\"trading\\\");\\r\\n        _startTradeBlock = uint32(block.number);\\r\\n    }\\r\\n\\r\\n    function closeTrade() external onlyOwner {\\r\\n        _startTradeBlock = 0;\\r\\n    }\\r\\n\\r\\n    function updateFeeExclude(address addr, bool isRemove) external onlyOwner {\\r\\n        if(isRemove) _excludeFeeSet.remove(addr);\\r\\n        else _excludeFeeSet.add(addr);\\r\\n    }\\r\\n\\r\\n    function isExcludeFeeAddress(address account) external view returns(bool){\\r\\n        return _excludeFeeSet.contains(account);\\r\\n    }\\r\\n\\r\\n    function getExcludeFeeAddressList() external view returns(address [] memory){\\r\\n        uint size = _excludeFeeSet.length();\\r\\n        address[] memory addrs = new address[](size);\\r\\n        for(uint i=0;i<size;i++) addrs[i]= _excludeFeeSet.at(i);\\r\\n        return addrs;\\r\\n    }\\r\\n\\r\\n    function updateTrade(address addr, bool isRemove) external onlyOwner {\\r\\n        if(isRemove) _tradeSet.remove(addr);\\r\\n        else _tradeSet.add(addr);\\r\\n    }\\r\\n\\r\\n    function isTradeAddress(address account) external view returns(bool){\\r\\n        return _tradeSet.contains(account);\\r\\n    }\\r\\n\\r\\n    function getTradeAddressList() external view returns(address [] memory){\\r\\n        uint size = _tradeSet.length();\\r\\n        address[] memory addrs = new address[](size);\\r\\n        for(uint i=0;i<size;i++) addrs[i]= _tradeSet.at(i);\\r\\n        return addrs;\\r\\n    }\\r\\n\\r\\n    function setSwapPairMap(address addr, bool enable) external onlyOwner {\\r\\n        _swapPairMap[addr] = enable;\\r\\n    }\\r\\n\\r\\n    function setSubLiquidityRate(uint8 rate) external onlyOwner {\\r\\n        _subLiquidityRate = rate;\\r\\n    }\\r\\n\\r\\n    function setSellRate(uint8 rate) external onlyOwner {\\r\\n        _sellRate = rate;\\r\\n    }\\r\\n\\r\\n    function setBuyRate(uint8 rate) external onlyOwner {\\r\\n        _buyRate = rate;\\r\\n    }\\r\\n\\r\\n    function setTransferRate(uint8 rate) external onlyOwner {\\r\\n        _transferRate = rate;\\r\\n    }\\r\\n\\r\\n    function setAddPriceTokenAmount(uint256 amount) external onlyOwner {\\r\\n        _addPriceTokenAmount = amount;\\r\\n    }\\r\\n    function setLpBonusLimit(uint256 amount) external onlyOwner {\\r\\n        _lpBonusLimit = amount;\\r\\n    }\\r\\n    function getLpAddressList() external view returns(address [] memory){\\r\\n        return _lpAddress;\\r\\n    }\\r\\n    function getLpMapList(address from) external view returns(uint256){\\r\\n        return _lpMap[from];\\r\\n    }\\r\\n    function getTyMapList(address from) external view returns(uint256){\\r\\n        return _tyMap[from];\\r\\n    }\\r\\n    function withdrawToken(address tokenContract, address recipient, uint256 amount) external onlyOwner {\\r\\n        IERC20 _tokenContract = IERC20(tokenContract);\\r\\n\\r\\n        // transfer the token from address of this contract\\r\\n        // to address of the user (executing the withdrawToken() function)\\r\\n        _tokenContract.transfer(recipient, amount);\\r\\n    }\\r\\n    function withdrawEth(uint256 amount) public onlyOwner {\\r\\n        require(address(this).balance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        (bool success, ) = payable(owner()).call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"Supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"RouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"UsdtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressA\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllParams\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"sellRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"transferRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"subLiquidityRate\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"startTradeBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"addPriceTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpBonusLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allTyBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcludeFeeAddressList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpAddressList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getLpMapList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradeAddressList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getTyMapList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludeFeeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTradeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAddPriceTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAddressA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rate\",\"type\":\"uint8\"}],\"name\":\"setBuyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLpBonusLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rate\",\"type\":\"uint8\"}],\"name\":\"setSellRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rate\",\"type\":\"uint8\"}],\"name\":\"setSubLiquidityRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rate\",\"type\":\"uint8\"}],\"name\":\"setTransferRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRemove\",\"type\":\"bool\"}],\"name\":\"updateFeeExclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRemove\",\"type\":\"bool\"}],\"name\":\"updateTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TY", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000098968000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000e4009246a16646d017f4f02d3f1e9afa8e1dcab20000000000000000000000000000000000000000000000000000000000000002545900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025459000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}