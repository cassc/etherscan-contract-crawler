{"SourceCode": "// File: @thirdweb-dev/contracts/extension/interface/IContractMetadata.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/// @author thirdweb\r\n\r\n/**\r\n *  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\r\n *  for you contract.\r\n *\r\n *  Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\r\n */\r\n\r\ninterface IContractMetadata {\r\n    /// @dev Returns the metadata URI of the contract.\r\n    function contractURI() external view returns (string memory);\r\n\r\n    /**\r\n     *  @dev Sets contract URI for the storefront-level metadata of the contract.\r\n     *       Only module admin can call this function.\r\n     */\r\n    function setContractURI(string calldata _uri) external;\r\n\r\n    /// @dev Emitted when the contract URI is updated.\r\n    event ContractURIUpdated(string prevURI, string newURI);\r\n}\r\n\r\n// File: @thirdweb-dev/contracts/extension/ContractMetadata.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/// @author thirdweb\r\n\r\n\r\n/**\r\n *  @title   Contract Metadata\r\n *  @notice  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\r\n *           for you contract.\r\n *           Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\r\n */\r\n\r\nabstract contract ContractMetadata is IContractMetadata {\r\n    /// @notice Returns the contract metadata URI.\r\n    string public override contractURI;\r\n\r\n    /**\r\n     *  @notice         Lets a contract admin set the URI for contract-level metadata.\r\n     *  @dev            Caller should be authorized to setup contractURI, e.g. contract admin.\r\n     *                  See {_canSetContractURI}.\r\n     *                  Emits {ContractURIUpdated Event}.\r\n     *\r\n     *  @param _uri     keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")\r\n     */\r\n    function setContractURI(string memory _uri) external override {\r\n        if (!_canSetContractURI()) {\r\n            revert(\"Not authorized\");\r\n        }\r\n\r\n        _setupContractURI(_uri);\r\n    }\r\n\r\n    /// @dev Lets a contract admin set the URI for contract-level metadata.\r\n    function _setupContractURI(string memory _uri) internal {\r\n        string memory prevURI = contractURI;\r\n        contractURI = _uri;\r\n\r\n        emit ContractURIUpdated(prevURI, _uri);\r\n    }\r\n\r\n    /// @dev Returns whether contract metadata can be set in the given execution context.\r\n    function _canSetContractURI() internal view virtual returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev The ETH balance of the account is not enough to perform the operation.\r\n     */\r\n    error AddressInsufficientBalance(address account);\r\n\r\n    /**\r\n     * @dev There's no code at `target` (it is not a contract).\r\n     */\r\n    error AddressEmptyCode(address target);\r\n\r\n    /**\r\n     * @dev A call to an address target failed. The target may have reverted.\r\n     */\r\n    error FailedInnerCall();\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        if (address(this).balance < amount) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason or custom error, it is bubbled\r\n     * up by this function (like regular Solidity function calls). However, if\r\n     * the call reverted with no returned reason, this function reverts with a\r\n     * {FailedInnerCall} error.\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        if (address(this).balance < value) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\r\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\r\n     * unsuccessful call.\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata\r\n    ) internal view returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            // only check if target is a contract if the call was successful and the return data is empty\r\n            // otherwise we already know that it was a contract\r\n            if (returndata.length == 0 && target.code.length == 0) {\r\n                revert AddressEmptyCode(target);\r\n            }\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\r\n     * revert reason or with a default {FailedInnerCall} error.\r\n     */\r\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\r\n     */\r\n    function _revert(bytes memory returndata) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev An operation with an ERC20 token failed.\r\n     */\r\n    error SafeERC20FailedOperation(address token);\r\n\r\n    /**\r\n     * @dev Indicates a failed `decreaseAllowance` request.\r\n     */\r\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        forceApprove(token, spender, oldAllowance + value);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\r\n     * value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\r\n        unchecked {\r\n            uint256 currentAllowance = token.allowance(address(this), spender);\r\n            if (currentAllowance < requestedDecrease) {\r\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\r\n            }\r\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data);\r\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\r\n            revert SafeERC20FailedOperation(address(token));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\r\n    }\r\n}\r\n\r\n// File: contracts/HumanTowerStaker.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract HumanTowerStaker is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct Batch {\r\n        uint256 batchId;\r\n        address staker;\r\n        uint256 amount;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 periodInDays;\r\n        uint256 penaltyPercentage;\r\n        uint256 stakeRewardPercentage;\r\n        uint256 bonusRewardPercentage;\r\n        uint256 totalWallet; // Added totalWallet\r\n    }\r\n\r\n    struct BatchInfo {\r\n        uint256 batchId;\r\n        Batch batchObject;\r\n    }\r\n\r\n    address public deployer;\r\n    IERC20 public hutoToken;\r\n    uint256 public currentBatchId;\r\n    uint256 public totalTokensStaked;\r\n    uint256 public totalWallet; // Added totalWallet tracking\r\n\r\n    mapping(uint256 => Batch) public batches;\r\n\r\n    mapping(uint256 => mapping(address => uint256[4])) public userStakes; // Updated userStakes structure\r\n\r\n    event Staked(\r\n        address indexed staker,\r\n        uint256 indexed batchId,\r\n        uint256 amount,\r\n        uint256 txHash\r\n    );\r\n    event Unstaked(\r\n        address indexed staker,\r\n        uint256 indexed batchId,\r\n        uint256 amount,\r\n        uint256 totalReturn,\r\n        uint256 txHash\r\n    );\r\n\r\n    modifier onlyOwnerOrDeployer() {\r\n        require(\r\n            msg.sender == owner() || msg.sender == deployer,\r\n            \"Not owner or deployer\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        deployer = msg.sender;\r\n        hutoToken = IERC20(0x3885328fBEE8aC4c06e711Fa67af475D2ac6e69D);\r\n    }\r\n\r\n    function updateTokenAddress(address _newTokenAddress) external onlyOwner {\r\n        require(_newTokenAddress != address(0), \"Invalid token address\");\r\n        hutoToken = IERC20(_newTokenAddress);\r\n    }\r\n\r\n\r\n    function createBatch(\r\n        uint256 _periodInDays,\r\n        uint256 _penaltyPercentage,\r\n        uint256 _stakeRewardPercentage,\r\n        uint256 _bonusRewardPercentage,\r\n        uint256 _startTime,\r\n        uint256 _endTime\r\n    ) external onlyOwnerOrDeployer {\r\n        require(_periodInDays > 0, \"Invalid period\");\r\n        require(_penaltyPercentage <= 100, \"Invalid penalty percentage\");\r\n        require(\r\n            _stakeRewardPercentage <= 100,\r\n            \"Invalid stake reward percentage\"\r\n        );\r\n        require(\r\n            _bonusRewardPercentage <= 100,\r\n            \"Invalid bonus reward percentage\"\r\n        );\r\n        require(_startTime < _endTime, \"Invalid start time\");\r\n\r\n        currentBatchId++;\r\n\r\n        Batch memory newBatch = Batch({\r\n            batchId: currentBatchId,\r\n            staker: msg.sender,\r\n            amount: 0,\r\n            startTime: _startTime,\r\n            endTime: _endTime,\r\n            periodInDays: _periodInDays,\r\n            penaltyPercentage: _penaltyPercentage,\r\n            stakeRewardPercentage: _stakeRewardPercentage,\r\n            bonusRewardPercentage: _bonusRewardPercentage,\r\n            totalWallet: 0\r\n        });\r\n\r\n        batches[currentBatchId] = newBatch;\r\n    }\r\n\r\n    function updateBatch(\r\n        uint256 _batchId,\r\n        uint256 _periodInDays,\r\n        uint256 _penaltyPercentage,\r\n        uint256 _stakeRewardPercentage,\r\n        uint256 _bonusRewardPercentage,\r\n        uint256 _startTime,\r\n        uint256 _endTime\r\n    ) external onlyOwnerOrDeployer {\r\n        Batch storage batch = batches[_batchId];\r\n        require(batch.batchId == _batchId, \"Batch does not exist\");\r\n        require(_penaltyPercentage <= 100, \"Invalid penalty percentage\");\r\n        require(\r\n            _stakeRewardPercentage <= 100,\r\n            \"Invalid stake reward percentage\"\r\n        );\r\n        require(\r\n            _bonusRewardPercentage <= 100,\r\n            \"Invalid bonus reward percentage\"\r\n        );\r\n        require(_startTime < _endTime, \"Invalid start time\");\r\n\r\n        batch.periodInDays = _periodInDays;\r\n        batch.startTime = _startTime;\r\n        batch.endTime = _endTime;\r\n        batch.penaltyPercentage = _penaltyPercentage;\r\n        batch.stakeRewardPercentage = _stakeRewardPercentage;\r\n        batch.bonusRewardPercentage = _bonusRewardPercentage;\r\n    }\r\n\r\n    function getBatchInfo(uint256 _batchId)\r\n        external\r\n        view\r\n        returns (Batch memory)\r\n    {\r\n        return batches[_batchId];\r\n    }\r\n\r\n    function stake(uint256 _batchId, uint256 _amount, uint256 _now)  external {\r\n        Batch storage batch = batches[_batchId];\r\n        require(batch.batchId == _batchId, \"Batch does not exist\");\r\n        require(\r\n            batch.startTime <= _now &&\r\n                _now <= batch.endTime,\r\n            \"Batch is not active, you can not stake\"\r\n        );\r\n        require(_amount > 0, \"Invalid amount\");\r\n        require(\r\n            _amount <= hutoToken.balanceOf(msg.sender),\r\n            \"Insufficient balance\"\r\n        );\r\n        require(\r\n            userStakes[_batchId][msg.sender][0] == 0,\r\n            \"Already staked in this batch\"\r\n        ); // Check if user has not already staked in this batch\r\n\r\n        uint256 endTime = batch.startTime + batch.periodInDays * 1 days; // Calculate endTime\r\n\r\n        // Update user stakes mapping\r\n        userStakes[_batchId][msg.sender][0] = _amount; // Staked amount\r\n        userStakes[_batchId][msg.sender][1] = batch.startTime; // StartTime\r\n        userStakes[_batchId][msg.sender][2] = endTime; // EndTime\r\n\r\n        // Approve the HumanTowerStaker contract to spend tokens on behalf of the user\r\n        hutoToken.approve(address(this), _amount);\r\n\r\n        // Transfer tokens from the user to the HumanTowerStaker contract\r\n        hutoToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n        \r\n        batch.amount += _amount;\r\n        totalTokensStaked += _amount;\r\n        batch.totalWallet++; // Increment totalWallet\r\n        totalWallet++; // Increment totalWallet tracking\r\n\r\n        emit Staked(msg.sender, _batchId, _amount, block.number); // Include transaction hash\r\n    }\r\n\r\n    function unstake(uint256 _batchId, uint256 _now) external {\r\n        Batch storage batch = batches[_batchId];\r\n        require(batch.batchId == _batchId, \"Batch does not exist\");\r\n        require(\r\n            userStakes[_batchId][msg.sender][0] > 0,\r\n            \"No stake for this batch\"\r\n        ); // Check if user has staked in this batch\r\n        uint256 reward = (userStakes[_batchId][msg.sender][0] *\r\n            batch.stakeRewardPercentage) / 100;\r\n        uint256 bonusReward = (userStakes[_batchId][msg.sender][0] *\r\n            batch.bonusRewardPercentage) / 100;\r\n        uint256 penalty = ((userStakes[_batchId][msg.sender][0] *\r\n            batch.penaltyPercentage) / 100); // Include penalty\r\n\r\n        uint256 totalReturn = _now <\r\n            userStakes[_batchId][msg.sender][2]\r\n            ? userStakes[_batchId][msg.sender][0] - penalty\r\n            : userStakes[_batchId][msg.sender][0] + reward + bonusReward;\r\n        // Update user stakes mapping\r\n        userStakes[_batchId][msg.sender] = [0, 0, 0];\r\n\r\n        // totalTokensStaked -= batch.amount;\r\n        batch.amount -= userStakes[_batchId][msg.sender][0];\r\n        batch.totalWallet--; // Decrement totalWallet\r\n        // totalWallet--; // Decrement totalWallet tracking\r\n\r\n        hutoToken.safeTransfer(msg.sender, totalReturn);\r\n        emit Unstaked(\r\n            msg.sender,\r\n            _batchId,\r\n            userStakes[_batchId][msg.sender][0],\r\n            totalReturn,\r\n            block.number\r\n        );\r\n    }\r\n\r\n    function getUserStakeForBatch(uint256 _batchId, address _user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        require(_batchId > 0, \"Invalid batch ID\");\r\n\r\n        // Ensure the user has staked in the batch\r\n        require(\r\n            userStakes[_batchId][_user][0] > 0,\r\n            \"User has no stake in this batch\"\r\n        );\r\n\r\n        // Retrieve user's stake information for the batch\r\n        uint256 stakedAmount = userStakes[_batchId][_user][0];\r\n        uint256 startTime = userStakes[_batchId][_user][1];\r\n        uint256 endTime = userStakes[_batchId][_user][2];\r\n\r\n        // Calculate reward, bonusReward, and penalty\r\n        Batch storage batch = batches[_batchId];\r\n        uint256 reward = (stakedAmount * batch.stakeRewardPercentage) / 100;\r\n        uint256 bonusReward = (stakedAmount * batch.bonusRewardPercentage) /\r\n            100;\r\n        uint256 penalty = (stakedAmount * batch.penaltyPercentage) / 100;\r\n\r\n        // Calculate totalReturn\r\n        uint256 totalReturn = stakedAmount + reward + bonusReward;\r\n        uint256 totalReturnWithPenalty = stakedAmount - penalty;\r\n\r\n        return (\r\n            stakedAmount,\r\n            startTime,\r\n            endTime,\r\n            totalReturn,\r\n            totalReturnWithPenalty\r\n        );\r\n    }\r\n\r\n    function getUserStakes(address _user)\r\n        external\r\n        view\r\n        returns (uint256[][] memory)\r\n    {\r\n        uint256[][] memory userStakeList = new uint256[][](currentBatchId); // Array to store stakes for each batch\r\n\r\n        for (uint256 i = 1; i <= currentBatchId; i++) {\r\n            uint256 batchId = i;\r\n            if (userStakes[batchId][_user][0] > 0) {\r\n                userStakeList[i - 1] = new uint256[](4); // Create a memory array for this batch\r\n                userStakeList[i - 1][0] = userStakes[batchId][_user][0]; // Staked amount\r\n                userStakeList[i - 1][1] = userStakes[batchId][_user][1]; // StartTime\r\n                userStakeList[i - 1][2] = userStakes[batchId][_user][2]; // EndTime\r\n                userStakeList[i - 1][3] = userStakes[batchId][_user][batchId]; // batchId\r\n            }\r\n        }\r\n\r\n        return userStakeList;\r\n    }\r\n\r\n    function getTotalTokensStaked() external view returns (uint256) {\r\n        return totalTokensStaked;\r\n    }\r\n\r\n    function getTotalWallet() external view returns (uint256) {\r\n        return totalWallet;\r\n    }\r\n\r\n    function getActiveBatches(uint256 _now) external view returns (uint256[] memory) {\r\n        uint256[] memory activeBatchIds = new uint256[](currentBatchId);\r\n        uint256 activeCount = 0;\r\n\r\n        for (uint256 i = 1; i <= currentBatchId; i++) {\r\n            uint256 batchId = i;\r\n            Batch storage batch = batches[batchId];\r\n\r\n            if (batch.startTime <= _now && _now <= batch.endTime) {\r\n                activeBatchIds[activeCount] = batchId;\r\n                activeCount++;\r\n            }\r\n        }\r\n\r\n        return activeBatchIds;\r\n    }\r\n\r\n    function getUpcomingBatches(uint256 _now) external view returns (uint256[] memory) {\r\n        uint256[] memory upcomingBatchIds = new uint256[](currentBatchId);\r\n        uint256 upcomingCount = 0;\r\n\r\n        for (uint256 i = 1; i <= currentBatchId; i++) {\r\n            uint256 batchId = i;\r\n            Batch storage batch = batches[batchId];\r\n\r\n            if (batch.startTime > _now) {\r\n                upcomingBatchIds[upcomingCount] = batchId;\r\n                upcomingCount++;\r\n            }\r\n        }\r\n\r\n        return upcomingBatchIds;\r\n    }\r\n\r\n    function getPreviousBatches(uint256 _now) external view returns (uint256[] memory) {\r\n        uint256[] memory previousBatchIds = new uint256[](currentBatchId);\r\n        uint256 previousCount = 0;\r\n\r\n        for (uint256 i = 1; i <= currentBatchId; i++) {\r\n            uint256 batchId = i;\r\n            Batch storage batch = batches[batchId];\r\n\r\n            if (batch.endTime < _now) {\r\n                previousBatchIds[previousCount] = batchId;\r\n                previousCount++;\r\n            }\r\n        }\r\n\r\n        return previousBatchIds;\r\n    }\r\n\r\n\r\n\r\n    function _canSetContractURI() internal view virtual returns (bool){\r\n        return msg.sender == deployer;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txHash\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReturn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txHash\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusRewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWallet\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeRewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusRewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"createBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBatchId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"getActiveBatches\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"}],\"name\":\"getBatchInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusRewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWallet\",\"type\":\"uint256\"}],\"internalType\":\"struct HumanTowerStaker.Batch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"getPreviousBatches\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"getUpcomingBatches\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakeForBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakes\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hutoToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeRewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusRewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"updateBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTokenAddress\",\"type\":\"address\"}],\"name\":\"updateTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HumanTowerStaker", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://095153ea6b1d0aa9f5c1fc6b2dabcdb05c9ec3f4eadb61d741315f706acd6526"}