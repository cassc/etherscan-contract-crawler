{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/San.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\\ncontract SanSanHuaLuo13 is Ownable, ReentrancyGuard {\\n    struct Member {\\n        address sponsor;\\n        address[] referrals;\\n        uint8 level;\\n        uint256 totalReferredAmount;\\n        uint256[8] pendingRewards; // \u6bcf\u4e2a\u7b49\u7ea7\u7684\u5f85\u9886\u53d6\u5956\u52b1\\n        uint joinTimestamp; // \u52a0\u5165\u65f6\u95f4\u6233\\n        uint256[8] totallevelRewardAmount;\\n    }\\n    IERC20 public usdt;\\n    IERC20 public nftt;\\n\\n    receive() external payable {}\\n\\n    mapping(address => Member) public members;\\n    mapping(uint8 => uint256) public levelPrice;\\n    mapping(uint8 => uint256) public commissionRate;\\n    mapping(address => address) public inviter;\\n    mapping(address => bool) private _isExcludedFromFees;\\n\\n    uint256 public NFTTpriceRate = 1_000_000_000_000_000;\\n    address public FundToken = address(0xc5D7Ef68a76f534Ede7c3f4A227e46580A86D3f2);\\n\\n    // \u7528\u6237\u7684\u5956\u52b1\u7ed3\u6784\\n    struct RewardInfo {\\n        uint256 totalReward;      // \u603b\u5956\u52b1\\n        uint256 rewardClaimed;    // \u5df2\u9886\u53d6\u7684\u5956\u52b1\\n    }\\n\\n    event CommissionPending(address indexed sponsor, uint8 level, uint256 amount);\\n    event CommissionClaimed(address indexed sponsor, uint8 level, uint256 amount);\\n\\n    // \u7528\u6237\u7684\u5956\u52b1\u6620\u5c04\\n    mapping(address => mapping(uint8 => RewardInfo)) public userRewards;\\n\\n    event CommissionPaid(address indexed sponsor, uint256 amount);\\n    event CommissionPending(address indexed sponsor, uint256 amount);\\n    // \u4e8b\u4ef6\u58f0\u660e\\n    // event MemberJoined(address member, address referrer);\\n    // event MemberLevelUpdated(address member, uint level);\\n    event MemberReplaced(address member, address newMember);\\n    event MemberRemoved(address member);\\n\\n    // \u8bbe\u7f6e\u6bcf\u4e2a\u7b49\u7ea7\u7684\u5956\u52b1\u91d1\u989d\\n    mapping(uint8 => uint256) public levelRewardAmount;\\n    address public USDT_ADDRESS;\\n    address public nftToken;\\n\\n    mapping(uint => uint) public levelRewardPercentage;\\n\\n    uint256 public DAY = 120;\\n\\n    uint256 public totalpendingRewards ;\\n\\n    constructor() {\\n        nftToken = address(0x933e44D39a4E0CABa42D3114E3A7401144F5145B);   //\u4e3b\u7f51\\n        USDT_ADDRESS = address(0x55d398326f99059fF775485246999027B3197955);     //\u4e3b\u7f51\\n\\n        usdt = IERC20(USDT_ADDRESS);\\n        nftt = IERC20(nftToken);\\n\\n        // \u8bbe\u7f6e\u7b49\u7ea7\u4ef7\u683c\\n        levelPrice[1] = 100;\\n        levelPrice[2] = 200;\\n        levelPrice[3] = 400;\\n        levelPrice[4] = 1000;\\n        levelPrice[5] = 4000;\\n        levelPrice[6] = 13000;\\n        // levelPrice[7] = 28000;\\n        // \u8bbe\u7f6e\u5206\u4f63\u6bd4\u4f8b\\n        commissionRate[1] = 50;\\n        commissionRate[2] = 50;\\n        commissionRate[3] = 40;\\n        commissionRate[4] = 40;\\n        commissionRate[5] = 30;\\n        commissionRate[6] = 30;\\n        // commissionRate[7] = 20;\\n\\n        levelRewardAmount[1] = 150;\\n        levelRewardAmount[2] = 900;\\n        levelRewardAmount[3] = 4320;\\n        levelRewardAmount[4] = 32400;\\n        levelRewardAmount[5] = 291600;\\n        levelRewardAmount[6] = 2843100;\\n        // levelRewardAmount[7] = 12247200;\\n\\n        members[msg.sender].sponsor = address(this);\\n        members[address(this)].level = 1;\\n        members[address(this)].sponsor = address(this);\\n    }\\n\\n    function join(address sponsor) public nonReentrant {\\n        require(sponsor != msg.sender,\\\"Cannot bind oneself\\\");\\n        require(members[sponsor].sponsor != address(0),\\\"Cannot bind oneself\\\");\\n        require(members[msg.sender].level == 0, \\\"Already a member\\\");\\n        // checkForSliding(sponsor);\\n        // if(members[sponsor].referrals.length < 3) {\\n        //     members[sponsor].referrals.push(msg.sender);\\n        // } else {\\n        //     inviter[msg.sender] = sponsor;         //\u76f4\u63a8\u5730\u5740\\n        //     // \u5982\u679c\u76f4\u63a5\u63a8\u8350\u4eba\u5df2\u7ecf\u67093\u4e2a\u4e0b\u7ebf\uff0c\u5219\u5bfb\u627e\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u63a8\u8350\u4eba\\n        //     checkForSliding(sponsor);\\n        //     address newSponsor = findNextAvailableSponsor(sponsor);      //\\n        //     members[newSponsor].referrals.push(msg.sender);\\n            \\n        //     sponsor = newSponsor;\\n        // }\\n        checkForSliding(sponsor);\\n        members[msg.sender].sponsor = sponsor;\\n        members[msg.sender].joinTimestamp = block.timestamp;\\n    }\\n\\n    function checkForSliding(address _referrer) private {\\n        for (uint i = 0; i < members[_referrer].referrals.length; i++) {\\n            address referral = members[_referrer].referrals[i];\\n            if (block.timestamp > members[referral].joinTimestamp + DAY && members[referral].level == 0 ) {\\n                // This referral didn't buy a level within a day and will be replaced\\n                removeReferral(_referrer, referral);\\n                break; // Assuming only one referral can be removed at a time\\n            }\\n        }\\n   \\n        for (uint i =1 ; i < members[_referrer].referrals.length; i++) {\\n            address referral = members[_referrer].referrals[i];\\n            if ( members[_referrer].referrals[i - 1 ] == members[_referrer].referrals[(i)]) {\\n                // This referral didn't buy a level within a day and will be replaced\\n                removeReferral(_referrer, referral);\\n                break; // Assuming only one referral can be removed at a time\\n            }\\n        }\\n    } \\n\\n\\n    function removeReferral(address _referrer, address _referral) private {\\n        address[] storage referrals = members[_referrer].referrals;\\n        for (uint i = 0; i < referrals.length; i++) {\\n            if (referrals[i] == _referral) {\\n                referrals[i] = referrals[referrals.length - 1];\\n                referrals.pop();\\n                members[_referral].sponsor = address(0); // Clear the upline relationship\\n                members[_referral].joinTimestamp = 0; // Reset join time as if they never joined\\n                break;\\n            }\\n        }\\n    }\\n\\n    function findNextAvailableSponsor(address sponsor) private  returns(address) {\\n        // require(members[sponsor].referrals.length >= 3, \\\"Sponsor has less than 3 referrals\\\");\\n        for(uint i ; i < members[sponsor].referrals.length; i++) {\\n            address referral = members[sponsor].referrals[i];\\n            if(members[referral].referrals.length < 3 && members[referral].level >=1 ) {\\n                return referral;\\n            }\\n        }\\n\\n        // \u9012\u5f52\u67e5\u627e\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u63a8\u8350\u4eba\\n        for(uint i ; i < members[sponsor].referrals.length; i++) {\\n            address nextSponsor = findNextAvailableSponsor(members[sponsor].referrals[i]);\\n            if(nextSponsor != address(0) && members[nextSponsor].level >=1 ) {\\n                return nextSponsor;\\n            }\\n        }\\n\\n        return address(this);\\n    }\\n\\n    function buyLevel(uint8 _level) public {\\n        require(members[msg.sender].level == _level - 1, \\\"You already have this level\\\");\\n        require(_level > 0 && _level <= 7, \\\"Invalid level\\\");\\n        Member storage member = members[msg.sender];\\n        uint256 LevelPrices = levelPrice[_level];\\n        uint256 commission = NFTTpriceRate * LevelPrices ;\\n        nftt.transferFrom(msg.sender, address(this), commission);\\n        if ( _level == 1) {\\n            address sponsor = member.sponsor; \\n            if (sponsor == address(this)) {\\n                member.sponsor = sponsor;\\n            } else {\\n                if(members[sponsor].referrals.length < 3) {\\n                    members[sponsor].referrals.push(msg.sender);\\n                } else {\\n                    inviter[msg.sender] = sponsor;         //\u76f4\u63a8\u5730\u5740\\n                    // \u5982\u679c\u76f4\u63a5\u63a8\u8350\u4eba\u5df2\u7ecf\u67093\u4e2a\u4e0b\u7ebf\uff0c\u5219\u5bfb\u627e\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u63a8\u8350\u4eba\\n                    \\n                    address newSponsor = findNextAvailableSponsor(sponsor);      //\\n                    members[newSponsor].referrals.push(msg.sender);\\n                    \\n                    member.sponsor = newSponsor;\\n                }\\n            }\\n        }\\n        member.level = _level;\\n        member.totallevelRewardAmount[_level] = levelRewardAmount[_level];\\n        userRewards[msg.sender][_level].totalReward = levelRewardAmount[_level];\\n\\n        // \u652f\u4ed8\u6216\u5f85\u9886\u53d6\u7684\u4f63\u91d1\\n        payOrAccrueCommission(msg.sender, NFTTpriceRate, _level, LevelPrices ,commission);\\n    }\\n\\n    function payOrAccrueCommission(address buyer, uint256 tokenAmount, uint8 _level, uint256 LevelPrices, uint256 commission) private {\\n        address sponsor = members[buyer].sponsor;\\n        uint256 commissionAmount = (levelPrice[_level] * commissionRate[_level]) / 100;\\n        uint i = 1;\\n        while (sponsor != address(0)) { \\n            if (i == _level) {             //      1\\n                if (members[sponsor].level >= _level) {\\n                    if (inviter[msg.sender] != address(0x0) && _level == 1) {\\n                        address  invit = inviter[msg.sender];\\n                        uint256 invitcommission = tokenAmount * 60;\\n                        require(nftt.transfer(invit , invitcommission), \\\"Transfer failed\\\");\\n                    } else {\\n                        nftt.transfer(sponsor, (commission * commissionRate[_level]) /100 );\\n                        userRewards[sponsor][_level].rewardClaimed += commissionAmount;\\n                        emit CommissionPaid(sponsor, commission);\\n                        return ;\\n                    }\\n                } else {\\n                    // uint256 LevelPrices = levelLevelPrices[_level];\\n                    uint256 PRcommission = ( LevelPrices * commissionRate[_level]) / 100;\\n                    // members[sponsor].pendingRewards += commissionAmount;\\n                    members[sponsor].pendingRewards[_level] += PRcommission;\\n                    totalpendingRewards += PRcommission;\\n                    emit CommissionPending(sponsor, PRcommission);\\n                }\\n                members[sponsor].totalReferredAmount += levelPrice[_level] * 1e18;\\n                return ;\\n            }\\n            \\n            sponsor = members[sponsor].sponsor;\\n            i++;\\n        } \\n    }\\n\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\n        _isExcludedFromFees[account] = excluded;\\n    }\\n    \\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _isExcludedFromFees[accounts[i]] = excluded;\\n        }\\n    }\\n\\n    function setSponsor(address user ,address Sponsor, uint8 level ) public onlyOwner {\\n        members[user].sponsor = Sponsor;\\n        members[user].level = level;\\n    }\\n\\n    function setLevelPrice(uint8 level, uint256 price) public onlyOwner {\\n        levelPrice[level] = price;\\n    }\\n\\n    function setCommissionRate(uint8 level, uint256 rate) public onlyOwner {\\n        commissionRate[level] = rate;\\n    }\\n\\n    function setlevelRewardAmount(uint8 level, uint256 rate) public onlyOwner {\\n        levelRewardAmount[level] = rate;\\n    }\\n\\n    function claimPendingRewards(uint8 level) public nonReentrant {\\n        Member storage member = members[msg.sender];\\n        uint256 reward = member.pendingRewards[level];\\n        require(reward > 0, \\\"No pending rewards\\\");\\n        require(member.level >= level, \\\"Not eligible to claim rewards for this level\\\");\\n        member.pendingRewards[level] = 0;\\n        member.totallevelRewardAmount[level] -= reward  ;\\n        userRewards[msg.sender][level].rewardClaimed += reward;\\n        totalpendingRewards -= reward;\\n        require(nftt.transfer(msg.sender, reward * NFTTpriceRate ), \\\"Transfer failed\\\");\\n        emit CommissionClaimed(msg.sender, level, reward * NFTTpriceRate);\\n    }\\n\\n    function setNFTT(address _nftTokenAddress) public onlyOwner {\\n        nftToken = _nftTokenAddress;\\n        nftt = IERC20(nftToken);\\n    }\\n\\n    function setday(uint256 _nftTokenAddress) public onlyOwner {\\n        DAY = _nftTokenAddress;\\n    }\\n\\n    function setNFTTprice(uint _swapNFTTs ) public {\\n        require (_isExcludedFromFees[msg.sender] , \\\"swap failed\\\");  \\n        NFTTpriceRate = _swapNFTTs;\\n    }\\n\\n    function withdrawToken(address _tokenAddress,address _to,uint256 amount) public onlyOwner{\\n        IERC20(_tokenAddress).transfer(_to,amount);\\n    }\\n\\n    function getReferrals(address _member) public view returns(address[] memory) {\\n        return members[_member].referrals;\\n    }\\n\\n    function getReferrals(address _member, address newSponsor) public onlyOwner {\\n        members[_member].referrals.push(newSponsor);\\n    } \\n\\n    //\u5f85\u9886\u53d6\u5956\u52b1\\n    function getPendingRewards(address user, uint8 level) public view returns (uint256) {\\n        require(level >= 1 && level <= 8, \\\"Invalid level\\\");\\n        return members[user].pendingRewards[level];\\n    }\\n\\n    function gettotalPendingRewards(address user, uint8 level) public view returns (uint256) {\\n        require(level >= 1 && level <= 8, \\\"Invalid level\\\");\\n        return members[user].totallevelRewardAmount[level];\\n    }\\n\\n        // \u83b7\u53d6\u5f85\u9886\u53d6\u7684\u5956\u52b1\\n    function getPendingReward(address _user, uint8 _level) public view returns (uint256) {\\n        uint256 total = userRewards[_user][_level].totalReward;\\n        uint256 claimed = userRewards[_user][_level].rewardClaimed;\\n        return total - claimed;\\n    }\\n\\n    // \u83b7\u53d6\u67d0\u4e2a\u7528\u6237\u7684\u76f4\u63a5\u4e0b\u7ea7\u5145\u503c\u603b\u989d\\n    function getDirectReferredInvestment(address user) public view returns (uint256 total) {\\n        address[] memory referrals = members[user].referrals;\\n        for (uint i = 0; i < referrals.length; i++) {\\n            total += members[referrals[i]].totalReferredAmount;\\n        }\\n    }\\n\\n\\n    // \u51fa\u91d1\\n    function AwardTokenSwapUSDT(uint amount) public nonReentrant {\\n        IERC20(nftToken).transferFrom(msg.sender,address(this),amount);\\n        uint256 Sell = token2Usdt(amount);\\n       \\n        IERC20(USDT_ADDRESS).transfer(msg.sender,Sell);\\n    }\\n    // \u5165\u91d1\\n    function USDT2awardTokenSwap(uint256 amount) public nonReentrant {\\n        IERC20(USDT_ADDRESS).transferFrom(msg.sender,address(FundToken),amount);\\n        uint256 usdtSwapToken = usdt2Token(amount);\\n        IERC20(nftToken).transfer(msg.sender,usdtSwapToken);\\n    }\\n    \\n    function setSwapTokensaddress(address _swapTokens) public onlyOwner {\\n        nftToken = _swapTokens;\\n    }\\n\\n    function token2Usdt(uint256 tokenAmount) public view returns(uint256){\\n        return tokenAmount / NFTTpriceRate * 1e18;\\n    }\\n\\n    function usdt2Token(uint256 usdtAmount) public view returns(uint256){\\n        return usdtAmount * NFTTpriceRate / 1e18;\\n    }\\n\\n    function setSwap(address _swapTokens) public onlyOwner {\\n        FundToken = _swapTokens;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CommissionClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CommissionPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CommissionPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"}],\"name\":\"MemberReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AwardTokenSwapUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FundToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFTTpriceRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"USDT2awardTokenSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"buyLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"claimPendingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"commissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDirectReferredInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"getPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newSponsor\",\"type\":\"address\"}],\"name\":\"getReferrals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"getReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"gettotalPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalReferredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setLevelPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftTokenAddress\",\"type\":\"address\"}],\"name\":\"setNFTT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapNFTTs\",\"type\":\"uint256\"}],\"name\":\"setNFTTprice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Sponsor\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"setSponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapTokens\",\"type\":\"address\"}],\"name\":\"setSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapTokens\",\"type\":\"address\"}],\"name\":\"setSwapTokensaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftTokenAddress\",\"type\":\"uint256\"}],\"name\":\"setday\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setlevelRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"token2Usdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalpendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"usdt2Token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"userRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SanSanHuaLuo13", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}