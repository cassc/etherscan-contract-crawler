{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/CryptoDuels/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Burn `amount` tokens and decreasing the total supply.\\r\\n     */\\r\\n    function burn(uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/CryptoDuels/TicketSystemCD.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier:MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @title TicketSystemCD\\n * @author karan (@cryptofluencerr, https://cryptofluencerr.com)\\n * @dev The TicketSystemCD contract is used for purchasing tickets for CryptoDuels.\\n */\\n\\ncontract TicketSystemCD is Ownable, ReentrancyGuard, Pausable {\\n    //============== VARIABLES ==============\\n    IUniswapV2Router02 public pancakeRouter;\\n    IERC20 public GQToken;\\n    uint256 public ticketPrice;\\n    uint256 public teamPercentage;\\n    uint256 public rewardPoolPercentage;\\n    uint256 public burnPercentage;\\n    uint256 public withdrawLimit;\\n    uint256 public ozFees;\\n    address public pancakeRouterAddress;\\n\\n    address public teamAddress;\\n    address public rewardPool;\\n    address public admin;\\n    uint256 decimals;\\n\\n    address private pairAddress;\\n\\n    struct UserInfo {\\n        uint256 ticketBalance;\\n        uint256 lastWithdrawalTime;\\n    }\\n\\n    //============== MAPPINGS ==============\\n    mapping(address => UserInfo) public userInfo;\\n\\n    //============== EVENTS ==============\\n    event TicketPurchased(\\n        address indexed buyer,\\n        uint256 numofTicket,\\n        uint256 amountPaid\\n    );\\n    event TicketWithdrawn(\\n        address indexed user,\\n        uint256 numOfTicket,\\n        uint256 amountRefund\\n    );\\n    event FeesTransfered(\\n        uint256 teamAmount,\\n        uint256 rewardPoolAmount,\\n        uint256 burnAmount\\n    );\\n    event TokenWithdrawn(address indexed owner, uint256 amount);\\n    event SetUserBalance(address indexed user, uint256 amount);\\n    event SetTokenAddress(address tokenAddr);\\n    event SetpairAddress(address pairAddr);\\n    event SetTicketprice(uint256 price);\\n    event SetTeamPercentage(uint256 teamPercent);\\n    event SetRewardPoolPercentage(uint256 rewardPoolPercent);\\n    event SetBurnPercentage(uint256 burnPercent);\\n    event SetWithdrawLimit(uint256 withdrawLimit);\\n    event SetOZFees(uint256 ozFees);\\n    event SetTeamAddress(address teamAddr);\\n    event SetRewardAddress(address rewardPoolAddr);\\n    event SetAdmin(address newAdmin);\\n    event SetRouterAddress(address _routerAddress);\\n\\n    //============== CONSTRUCTOR ==============\\n    constructor() {\\n        decimals = 10 ** 18;\\n        ticketPrice = 1 * decimals;\\n        teamPercentage = (ticketPrice * 1000) / 10000;\\n        rewardPoolPercentage = (ticketPrice * 250) / 10000;\\n        burnPercentage = (ticketPrice * 250) / 10000;\\n        withdrawLimit = 500 * decimals;\\n        ozFees = (2500 * decimals) / 10000;\\n\\n        pancakeRouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\n        pancakeRouter = IUniswapV2Router02(pancakeRouterAddress);\\n        GQToken = IERC20(0xF700D4c708C2be1463E355F337603183D20E0808);\\n        pairAddress = 0x72121d60b0e2F01c0FB7FE32cA24021b42165A40;\\n        admin = 0xbb1220Eb122f85aE0FAf61D89e0727C4962b4506;\\n        teamAddress = 0x81319B34e571d8aE7725bD611bcB8c0b3556bF01;\\n        rewardPool = 0x81319B34e571d8aE7725bD611bcB8c0b3556bF01;\\n\\n        //testnet\\n        // pancakeRouterAddress = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1;\\n        // pancakeRouter = IUniswapV2Router02(pancakeRouterAddress);\\n        // GQToken = IERC20(0xc85F4B2F5c6eAaC450B674A73fC8d15a3cBE4E25);\\n        // admin = 0xa0BD24F30218c5D431319e57d0580dd992879007;\\n        // pairAddress = 0x9142ca64FeE03a183998FE559D6aA85dAB2226f0;\\n        // teamAddress = 0xDb3360F0a406Aa9fBbBd332Fdf64ADb688e9a769;\\n        // rewardPool = 0xDb3360F0a406Aa9fBbBd332Fdf64ADb688e9a769;\\n    }\\n\\n    //============== MODIFIER ==============\\n    /**\\n     * @dev Modifier to ensure only the admin can call the function\\n     */\\n    modifier onlyAdmin() {\\n        require(_msgSender() == admin, \\\"Only admin\\\");\\n        _;\\n    }\\n\\n    //============== VIEW FUNCTIONS ==============\\n    /**\\n     * @dev Function to get GQ price from Pancackeswap\\n     */\\n    function getPrice() public view returns (uint256) {\\n        (uint112 reserve0, uint112 reserve1, ) = IUniswapV2Pair(pairAddress)\\n            .getReserves();\\n        return (uint256(reserve1) * 1e18) / uint256(reserve0);\\n    }\\n\\n    //============== EXTERNAL FUNCTIONS ==============\\n    /**\\n     * @dev Function to Purchase Tickets\\n     * @param numOfTicket to select quantity of tickets to purchase\\n     */\\n    function purchaseTicket(\\n        uint256 numOfTicket\\n    ) external payable whenNotPaused nonReentrant {\\n        require(\\n            numOfTicket >= 1,\\n            \\\"Purchase Ticket: Number of Ticket should be greater than Zero\\\"\\n        );\\n        uint256 amount;\\n        uint256 ticketAmount = (numOfTicket * ticketPrice) / decimals;\\n        uint256 teamAmount = (numOfTicket * teamPercentage) / decimals;\\n        uint256 rewardPoolAmount = (numOfTicket * rewardPoolPercentage) /\\n            decimals;\\n        uint256 burnAmount = (numOfTicket * burnPercentage) / decimals;\\n        uint256 ozFee = (ozFees * getPrice()) / decimals;\\n\\n        amount =\\n            ticketAmount +\\n            teamAmount +\\n            rewardPoolAmount +\\n            burnAmount +\\n            ozFee;\\n\\n        bool success = GQToken.transferFrom(\\n            _msgSender(),\\n            address(this),\\n            amount\\n        );\\n        require(success, \\\"Purchase Ticket: GQ transfer failed.\\\");\\n        feesTransfer(teamAmount, rewardPoolAmount, burnAmount);\\n\\n        swapTokensForEth(ozFee);\\n        uint256 BNBBalance = address(this).balance;\\n        (bool BNBSuccess, ) = admin.call{value: BNBBalance}(\\\"\\\");\\n        require(BNBSuccess, \\\"Purchase Ticket: BNB transfer failed.\\\");\\n\\n        userInfo[_msgSender()].ticketBalance += numOfTicket;\\n\\n        emit TicketPurchased(_msgSender(), numOfTicket, amount);\\n    }\\n\\n    /**\\n     * @dev Function to Withdraw Tickets\\n     * @param numOfTicket to select quantity of tickets to withdraw\\n     */\\n    function withdrawTicket(\\n        uint256 numOfTicket\\n    ) external whenNotPaused nonReentrant {\\n        require(\\n            userInfo[_msgSender()].ticketBalance >= numOfTicket,\\n            \\\"Withdraw Ticket: Insufficient Balance\\\"\\n        );\\n        require(\\n            numOfTicket >= 1,\\n            \\\"Withdraw Ticket: Amount should be greater than Zero\\\"\\n        );\\n        if (userInfo[_msgSender()].lastWithdrawalTime != 0) {\\n            require(\\n                userInfo[_msgSender()].lastWithdrawalTime + 24 hours <=\\n                    block.timestamp,\\n                \\\"Withdraw Ticket: Withdrawal is only allowed once every 24 hours\\\"\\n            );\\n        }\\n\\n        uint256 amount = (numOfTicket * ticketPrice) / decimals;\\n        uint256 teamAmount = (numOfTicket * teamPercentage) / decimals;\\n        uint256 rewardPoolAmount = (numOfTicket * rewardPoolPercentage) /\\n            decimals;\\n        uint256 burnAmount = (numOfTicket * burnPercentage) / decimals;\\n\\n        uint256 balance = GQToken.balanceOf(address(this));\\n        require(\\n            balance >= amount,\\n            \\\"Withdraw Ticket: Not enough balance in the contract\\\"\\n        );\\n        require(\\n            amount <= (withdrawLimit * getPrice()) / decimals,\\n            \\\"Withdraw Ticket: Withdrawal amount exceeds Limit\\\"\\n        );\\n\\n        uint256 ticketAmount = amount -\\n            (teamAmount + rewardPoolAmount + burnAmount);\\n\\n        userInfo[_msgSender()].lastWithdrawalTime = block.timestamp;\\n        userInfo[_msgSender()].ticketBalance -= numOfTicket;\\n\\n        bool success = GQToken.transfer(_msgSender(), ticketAmount);\\n        require(success, \\\"Withdraw Ticket: Return Failed\\\");\\n\\n        feesTransfer(teamAmount, rewardPoolAmount, burnAmount);\\n\\n        emit TicketWithdrawn(_msgSender(), numOfTicket, ticketAmount);\\n    }\\n\\n    /**\\n     * @notice swaps dedicated amount from GQ -> BNB\\n     * @param amount total GQ amount that need to be swapped to BNB\\n     */\\n    function swapTokensForEth(uint256 amount) private {\\n        // Generate the uniswap pair path of GQToken -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(GQToken);\\n        path[1] = pancakeRouter.WETH();\\n\\n        GQToken.approve(address(pancakeRouter), amount);\\n\\n        pancakeRouter.swapExactTokensForETH(\\n            amount,\\n            0,\\n            path,\\n            address(this), // this contract will receive the eth that were swapped from the GQToken\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice will set the router address\\n     * @param _routerAddress pancake router address\\n     */\\n    function setRouterAddress(address _routerAddress) external onlyOwner {\\n        require(\\n            _routerAddress != address(0),\\n            \\\"Set Router Address: Invalid router address\\\"\\n        );\\n        pancakeRouterAddress = _routerAddress;\\n        pancakeRouter = IUniswapV2Router02(_routerAddress);\\n        emit SetRouterAddress(_routerAddress);\\n    }\\n\\n    /**\\n     * @dev Function to Withdraw funds\\n     */\\n    function withdraw() external onlyOwner {\\n        uint256 balance = GQToken.balanceOf(address(this));\\n        require(balance > 0, \\\"Withdraw: Not enough balance in the contract\\\");\\n        bool success;\\n        success = GQToken.transfer(owner(), balance);\\n        require(success, \\\"Withdraw: Withdraw Failed\\\");\\n        emit TokenWithdrawn(owner(), balance);\\n    }\\n\\n    /**\\n     * @dev Function to set the user's ticket balance\\n     * @param user address of user whose balance is to be set\\n     * @param amount The balance change amount to be set\\n     */\\n    function setUserBalance(\\n        address user,\\n        uint256 amount\\n    ) external onlyAdmin whenNotPaused nonReentrant {\\n        require(user != address(0), \\\"Set User Balance: Invalid user address\\\");\\n        userInfo[user].ticketBalance = amount;\\n        emit SetUserBalance(user, amount);\\n    }\\n\\n    /**\\n     * @dev Function to set the admin address\\n     * @param newAdmin The new address to set as the admin\\n     */\\n    function setAdmin(address newAdmin) external onlyOwner {\\n        require(newAdmin != address(0), \\\"Set Admin: Invalid address\\\");\\n        admin = newAdmin;\\n        emit SetAdmin(admin);\\n    }\\n\\n    /**\\n     * @dev Function to set the new GQToken address that is used Purchasing tickets\\n     * @param tokenAdd The new GQToken address\\n     */\\n    function setTokenAddress(address tokenAdd) external onlyOwner {\\n        require(tokenAdd != address(0), \\\"Set Token Address: Invalid address\\\");\\n        GQToken = IERC20(tokenAdd);\\n        emit SetTokenAddress(tokenAdd);\\n    }\\n\\n    /**\\n     * @dev Function to set the new Pair address of GQToken pool\\n     * @param pairAdd The new pair address\\n     */\\n    function setpairAddress(address pairAdd) external onlyOwner {\\n        require(pairAdd != address(0), \\\"Set Pair Address: Invalid address\\\");\\n        pairAddress = pairAdd;\\n        emit SetpairAddress(pairAdd);\\n    }\\n\\n    /**\\n     * @dev Function to set the Ticket Price\\n     * @param newPrice The new tick price in wei for 1 ticket.\\n     */\\n    function setTicketPrice(uint256 newPrice) external onlyOwner {\\n        require(\\n            newPrice > 0,\\n            \\\"Set Ticket Price: New Price should be greater than Zero\\\"\\n        );\\n        ticketPrice = newPrice;\\n        emit SetTicketprice(newPrice);\\n    }\\n\\n    /**\\n     * @dev Function to set the Ticket OpenZepellin Fees.\\n     * @param amount The new limit amount in wei.\\n     */\\n    function setOZFees(uint256 amount) external onlyOwner {\\n        require(amount > 0, \\\"Set OZ Fees: OZ Fees be greater than Zero\\\");\\n        ozFees = amount;\\n        emit SetOZFees(amount);\\n    }\\n\\n    /**\\n     * @dev Function to set the Ticket withdraw limit.\\n     * @param amount The new limit amount in wei.\\n     */\\n    function setWithdrawLimit(uint256 amount) external onlyOwner {\\n        require(\\n            amount > 0,\\n            \\\"Set Withdraw limit: Withdraw limit be greater than Zero\\\"\\n        );\\n        withdrawLimit = amount;\\n        emit SetWithdrawLimit(amount);\\n    }\\n\\n    /**\\n     * @dev Function to set amount that will be transfered to Team\\n     * @param amount The new team share amount in wei for 1 ticket price\\n     */\\n    function setTeamPercentage(uint256 amount) external onlyOwner {\\n        teamPercentage = amount;\\n        emit SetTeamPercentage(amount);\\n    }\\n\\n    /**\\n     * @dev Function to set amount that will be transfered to Reward pool\\n     * @param amount The new reward pool share amount in wei for 1 ticket price\\n     */\\n    function setRewardPoolPercentage(uint256 amount) external onlyOwner {\\n        rewardPoolPercentage = amount;\\n        emit SetRewardPoolPercentage(amount);\\n    }\\n\\n    /**\\n     * @dev Function to set GQToken amount that will be burned.\\n     * @param amount The new burn share amount in wei for 1 ticket price\\n     */\\n    function setBurnPercentage(uint256 amount) external onlyOwner {\\n        burnPercentage = amount;\\n        emit SetBurnPercentage(amount);\\n    }\\n\\n    /**\\n     * @dev Function to set the Team address\\n     * @param newTeamAddress The new address to set as the Team address\\n     */\\n    function setTeamAddress(address newTeamAddress) external onlyOwner {\\n        require(\\n            newTeamAddress != address(0),\\n            \\\"Set Team Address: Invalid address\\\"\\n        );\\n        teamAddress = newTeamAddress;\\n        emit SetTeamAddress(teamAddress);\\n    }\\n\\n    /**\\n     * @dev Function to set the admin address\\n     * @param newRewardPoolAddress The new address to set as the Rewardpool address\\n     */\\n    function setRewardAddress(address newRewardPoolAddress) external onlyOwner {\\n        require(\\n            newRewardPoolAddress != address(0),\\n            \\\"Set Reward Address: Invalid address\\\"\\n        );\\n        rewardPool = newRewardPoolAddress;\\n        emit SetRewardAddress(rewardPool);\\n    }\\n\\n    /**\\n     * @notice Pauses the contract.\\n     * @dev This function can only be called by the contract owner.\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the contract.\\n     * @dev This function can only be called by the contract owner.\\n     */\\n    function unPause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer the fees.\\n     * @param teamAmnt amount to transfer to team.\\n     * @param rewardPoolAmnt amount to transfer to reward pool.\\n     * @param burnAmnt amount to burn tokens.\\n     */\\n    function feesTransfer(\\n        uint256 teamAmnt,\\n        uint256 rewardPoolAmnt,\\n        uint256 burnAmnt\\n    ) internal {\\n        bool teamTransfer = GQToken.transfer(teamAddress, teamAmnt);\\n        require(teamTransfer, \\\"Fees transfer: Team transfer failed\\\");\\n\\n        bool rewardPoolTransfer = GQToken.transfer(rewardPool, rewardPoolAmnt);\\n        require(\\n            rewardPoolTransfer,\\n            \\\"Fees Transfer: RewardPool transfer failed\\\"\\n        );\\n\\n        GQToken.burn(burnAmnt);\\n\\n        emit FeesTransfered(teamAmnt, rewardPoolAmnt, burnAmnt);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPoolAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"FeesTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnPercent\",\"type\":\"uint256\"}],\"name\":\"SetBurnPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ozFees\",\"type\":\"uint256\"}],\"name\":\"SetOZFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardPoolAddr\",\"type\":\"address\"}],\"name\":\"SetRewardAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPoolPercent\",\"type\":\"uint256\"}],\"name\":\"SetRewardPoolPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"name\":\"SetRouterAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teamAddr\",\"type\":\"address\"}],\"name\":\"SetTeamAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teamPercent\",\"type\":\"uint256\"}],\"name\":\"SetTeamPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetTicketprice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"SetTokenAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetUserBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawLimit\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pairAddr\",\"type\":\"address\"}],\"name\":\"SetpairAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numofTicket\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"}],\"name\":\"TicketPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numOfTicket\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRefund\",\"type\":\"uint256\"}],\"name\":\"TicketWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GQToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ozFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numOfTicket\",\"type\":\"uint256\"}],\"name\":\"purchaseTicket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setBurnPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setOZFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardPoolAddress\",\"type\":\"address\"}],\"name\":\"setRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRewardPoolPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTeamAddress\",\"type\":\"address\"}],\"name\":\"setTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTeamPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAdd\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setUserBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setWithdrawLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAdd\",\"type\":\"address\"}],\"name\":\"setpairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawalTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numOfTicket\",\"type\":\"uint256\"}],\"name\":\"withdrawTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TicketSystemCD", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}