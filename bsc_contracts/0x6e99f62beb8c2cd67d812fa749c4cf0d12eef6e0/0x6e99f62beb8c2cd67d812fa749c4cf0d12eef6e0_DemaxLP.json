{"SourceCode": "// Dependency file: contracts/interfaces/IERC20.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n// Dependency file: contracts/libraries/TransferHelper.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/interfaces/ERC2917-Interface.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n// pragma solidity >=0.6.6;\r\n// import '../interfaces/IERC20.sol';\r\n\r\ninterface IERC2917 is IERC20 {\r\n\r\n    /// @dev This emit when interests amount per block is changed by the owner of the contract.\r\n    /// It emits with the old interests amount and the new interests amount.\r\n    event InterestRatePerBlockChanged (uint oldValue, uint newValue);\r\n\r\n    /// @dev This emit when a users' productivity has changed\r\n    /// It emits with the user's address and the the value after the change.\r\n    event ProductivityIncreased (address indexed user, uint value);\r\n\r\n    /// @dev This emit when a users' productivity has changed\r\n    /// It emits with the user's address and the the value after the change.\r\n    event ProductivityDecreased (address indexed user, uint value);\r\n\r\n    /// @dev Return the current contract's interests rate per block.\r\n    /// @return The amount of interests currently producing per each block.\r\n    function interestsPerBlock() external view returns (uint);\r\n\r\n    /// @notice Change the current contract's interests rate.\r\n    /// @dev Note the best practice will be restrict the gross product provider's contract address to call this.\r\n    /// @return The true/fase to notice that the value has successfully changed or not, when it succeed, it will emite the InterestRatePerBlockChanged event.\r\n    function changeInterestRatePerBlock(uint value) external returns (bool);\r\n\r\n    /// @notice It will get the productivity of given user.\r\n    /// @dev it will return 0 if user has no productivity proved in the contract.\r\n    /// @return user's productivity and overall productivity.\r\n    function getProductivity(address user) external view returns (uint, uint);\r\n\r\n    /// @notice increase a user's productivity.\r\n    /// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\r\n    /// @return true to confirm that the productivity added success.\r\n    function increaseProductivity(address user, uint value) external returns (bool);\r\n\r\n    /// @notice decrease a user's productivity.\r\n    /// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\r\n    /// @return true to confirm that the productivity removed success.\r\n    function decreaseProductivity(address user, uint value) external returns (bool);\r\n\r\n    /// @notice take() will return the interests that callee will get at current block height.\r\n    /// @dev it will always calculated by block.number, so it will change when block height changes.\r\n    /// @return amount of the interests that user are able to mint() at current block height.\r\n    function take() external view returns (uint);\r\n\r\n    /// @notice similar to take(), but with the block height joined to calculate return.\r\n    /// @dev for instance, it returns (_amount, _block), which means at block height _block, the callee has accumulated _amount of interests.\r\n    /// @return amount of interests and the block height.\r\n    function takeWithBlock() external view returns (uint, uint);\r\n\r\n    /// @notice mint the avaiable interests to callee.\r\n    /// @dev once it mint, the amount of interests will transfer to callee's address.\r\n    /// @return the amount of interests minted.\r\n    function mint() external returns (uint);\r\n}\r\n// Dependency file: contracts/modules/BaseShareField.sol\r\n\r\n// pragma solidity >=0.6.6;\r\n// import '../interfaces/ERC2917-Interface.sol';\r\n// import '../libraries/SafeMath.sol';\r\n// import '../libraries/TransferHelper.sol';\r\n\r\ncontract BaseShareField {\r\n    using SafeMath for uint;\r\n    \r\n    uint totalProductivity;\r\n    uint accAmountPerShare;\r\n    \r\n    uint public totalShare;\r\n    uint public mintedShare;\r\n    uint public mintCumulation;\r\n    \r\n    address public shareToken;\r\n    \r\n    struct UserInfo {\r\n        uint amount;     // How many tokens the user has provided.\r\n        uint rewardDebt; // Reward debt. \r\n        uint rewardEarn; // Reward earn and not minted\r\n    }\r\n\r\n    mapping(address => UserInfo) public users;\r\n    \r\n    function _setShareToken(address _shareToken) internal {\r\n        shareToken = _shareToken;\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function _update() internal virtual {\r\n        if (totalProductivity == 0) {\r\n            totalShare = totalShare.add(_currentReward());\r\n            return;\r\n        }\r\n        \r\n        uint256 reward = _currentReward();\r\n        accAmountPerShare = accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\r\n        totalShare = totalShare.add(reward);\r\n    }\r\n    \r\n    function _currentReward() internal virtual view returns (uint) {\r\n        return mintedShare.add(IERC20(shareToken).balanceOf(address(this))).sub(totalShare);\r\n    }\r\n    \r\n    // Audit user's reward to be up-to-date\r\n    function _audit(address user) internal virtual {\r\n        UserInfo storage userInfo = users[user];\r\n        if (userInfo.amount > 0) {\r\n            uint pending = userInfo.amount.mul(accAmountPerShare).div(1e12).sub(userInfo.rewardDebt);\r\n            userInfo.rewardEarn = userInfo.rewardEarn.add(pending);\r\n            mintCumulation = mintCumulation.add(pending);\r\n            userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\r\n        }\r\n    }\r\n\r\n    // External function call\r\n    // This function increase user's productivity and updates the global productivity.\r\n    // the users' actual share percentage will calculated by:\r\n    // Formula:     user_productivity / global_productivity\r\n    function _increaseProductivity(address user, uint value) internal virtual returns (bool) {\r\n        require(value > 0, 'PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\r\n\r\n        UserInfo storage userInfo = users[user];\r\n        _update();\r\n        _audit(user);\r\n\r\n        totalProductivity = totalProductivity.add(value);\r\n\r\n        userInfo.amount = userInfo.amount.add(value);\r\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\r\n        return true;\r\n    }\r\n\r\n    // External function call \r\n    // This function will decreases user's productivity by value, and updates the global productivity\r\n    // it will record which block this is happenning and accumulates the area of (productivity * time)\r\n    function _decreaseProductivity(address user, uint value) internal virtual returns (bool) {\r\n        UserInfo storage userInfo = users[user];\r\n        require(value > 0 && userInfo.amount >= value, 'INSUFFICIENT_PRODUCTIVITY');\r\n        \r\n        _update();\r\n        _audit(user);\r\n        \r\n        userInfo.amount = userInfo.amount.sub(value);\r\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\r\n        totalProductivity = totalProductivity.sub(value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function _takeWithAddress(address user) internal view returns (uint) {\r\n        UserInfo storage userInfo = users[user];\r\n        uint _accAmountPerShare = accAmountPerShare;\r\n        // uint256 lpSupply = totalProductivity;\r\n        if (totalProductivity != 0) {\r\n            uint reward = _currentReward();\r\n            _accAmountPerShare = _accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\r\n        }\r\n        return userInfo.amount.mul(_accAmountPerShare).div(1e12).add(userInfo.rewardEarn).sub(userInfo.rewardDebt);\r\n    }\r\n\r\n    // External function call\r\n    // When user calls this function, it will calculate how many token will mint to user from his productivity * time\r\n    // Also it calculates global token supply from last time the user mint to this time.\r\n    function _mint(address user) internal virtual returns (uint) {\r\n        _update();\r\n        _audit(user);\r\n        require(users[user].rewardEarn > 0, \"NOTHING TO MINT\");\r\n        uint amount = users[user].rewardEarn;\r\n        TransferHelper.safeTransfer(shareToken, msg.sender, amount);\r\n        users[user].rewardEarn = 0;\r\n        mintedShare += amount;\r\n        return amount;\r\n    }\r\n\r\n    // Returns how many productivity a user has and global has.\r\n    function getProductivity(address user) public virtual view returns (uint, uint) {\r\n        return (users[user].amount, totalProductivity);\r\n    }\r\n\r\n    // Returns the current gorss product rate.\r\n    function interestsPerBlock() public virtual view returns (uint) {\r\n        return accAmountPerShare;\r\n    }\r\n    \r\n}\r\n// Dependency file: contracts/libraries/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\npragma solidity >=0.6.6;\r\n\r\n// import './libraries/SafeMath.sol';\r\n// import './modules/BaseShareField.sol';\r\n\r\ninterface IDemaxPool {\r\n    function queryReward(address _pair, address _user) external view returns(uint);\r\n    function claimReward(address _pair, address _rewardToken) external;\r\n}\r\n\r\ninterface IDemaxPair {\r\n    function queryReward() external view returns (uint256 rewardAmount, uint256 blockNumber);\r\n    function mintReward() external returns (uint256 userReward);\r\n}\r\n\r\ninterface IDemaxDelegate {\r\n    function addPlayerPair(address _user) external;\r\n}\r\n\r\ninterface IDemaxPlatform{\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 _amountA,\r\n            uint256 _amountB,\r\n            uint256 _liquidity\r\n        );\r\n        \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 _amountToken,\r\n            uint256 _amountETH,\r\n            uint256 _liquidity\r\n        );\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n    \r\n    function pairFor(address tokenA, address tokenB) external view returns (address);\r\n}\r\n\r\ncontract DemaxLP is BaseShareField {\r\n    // ERC20 Start\r\n    \r\n    using SafeMath for uint;\r\n\r\n    string public constant name = 'Burger LP';\r\n    string public constant symbol = 'BLP';\r\n    uint8 public constant decimals = 18;\r\n    uint public totalSupply;\r\n    \r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n\r\n    event Mint(address indexed user, uint amount);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    \r\n    function _mint(address to, uint value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n    \r\n    receive() external payable {\r\n    }\r\n    \r\n    function _burn(address from, uint value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint value) private {\r\n        require(balanceOf[from] >= value, 'ERC20Token: INSUFFICIENT_BALANCE');\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        if (to == address(0)) { // burn\r\n            totalSupply = totalSupply.sub(value);\r\n        }\r\n\r\n        IDemaxDelegate(owner).addPlayerPair(to);\r\n        _mintReward();\r\n        _decreaseProductivity(from, value);\r\n        _increaseProductivity(to, value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint value) external returns (bool) {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool) {\r\n        require(allowance[from][msg.sender] >= value, 'ERC20Token: INSUFFICIENT_ALLOWANCE');\r\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }    \r\n    \r\n    // ERC20 End\r\n    \r\n    \r\n    address public owner;\r\n    address public POOL;\r\n    address public PLATFORM;\r\n    address public tokenA;\r\n    address public tokenB;\r\n    address public WETH;\r\n    \r\n    event AddLiquidity (address indexed user, uint amountA, uint amountB, uint value);\r\n    event RemoveLiquidity (address indexed user, uint amountA, uint amountB, uint value);\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function initialize(address _tokenA, address _tokenB, address _DGAS, address _POOL, address _PLATFORM, address _WETH) external {\r\n        require(msg.sender == owner, \"Demax LP Forbidden\");\r\n        tokenA = _tokenA;\r\n        tokenB = _tokenB;\r\n        _setShareToken(_DGAS);\r\n        PLATFORM = _PLATFORM;\r\n        POOL = _POOL;\r\n        WETH = _WETH;\r\n    }\r\n \r\n    function upgrade(address _PLATFORM) external {\r\n        require(msg.sender == owner, \"Demax LP Forbidden\");\r\n        PLATFORM = _PLATFORM;\r\n    }\r\n\r\n    function approveContract(address token, address spender, uint amount) internal {\r\n        uint allowAmount = IERC20(token).totalSupply();\r\n        if(allowAmount < amount) {\r\n            allowAmount = amount;\r\n        }\r\n        if(IERC20(token).allowance(address(this), spender) < amount) {\r\n            TransferHelper.safeApprove(token, spender, allowAmount);\r\n        }\r\n    }\r\n    \r\n    function addLiquidityETH(\r\n        address user,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        uint256 deadline) external payable returns (\r\n            uint256 _amountToken,\r\n            uint256 _amountETH,\r\n            uint256 _liquidity\r\n        ) {\r\n           require(msg.sender == owner, \"Demax LP Forbidden\");\r\n           require(tokenA == WETH || tokenB == WETH, \"INVALID CALL\");\r\n           address token = tokenA == WETH ? tokenB: tokenA;\r\n           approveContract(token, PLATFORM, amountTokenDesired);\r\n           TransferHelper.safeTransferFrom(token, msg.sender, address(this), amountTokenDesired);\r\n           \r\n           (_amountToken, _amountETH, _liquidity) = IDemaxPlatform(PLATFORM).addLiquidityETH{value: msg.value}(token, amountTokenDesired, amountTokenMin, amountETHMin, deadline);\r\n           \r\n           if(amountTokenDesired > _amountToken) {\r\n                TransferHelper.safeTransfer(token, user, amountTokenDesired.sub(_amountToken));\r\n            }\r\n            \r\n            if(msg.value > _amountETH) {\r\n                TransferHelper.safeTransferETH(user, msg.value.sub(_amountETH));\r\n            }\r\n        _mintReward();\r\n        _mint(user, _liquidity);\r\n        _increaseProductivity(user, _liquidity);\r\n        (uint amountA, uint amountB) = token == tokenA ? (_amountToken, _amountETH): (_amountETH, _amountToken);\r\n        emit AddLiquidity (user, amountA, amountB, _liquidity);\r\n    }\r\n    \r\n    function addLiquidity(\r\n        address user,\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        uint256 deadline) external returns (\r\n            uint256 _amountA,\r\n            uint256 _amountB,\r\n            uint256 _liquidity\r\n        ) {\r\n            require(msg.sender == owner, \"Demax LP Forbidden\");\r\n            approveContract(tokenA, PLATFORM, amountA);\r\n            approveContract(tokenB, PLATFORM, amountB);\r\n            TransferHelper.safeTransferFrom(tokenA, msg.sender, address(this), amountA);\r\n            TransferHelper.safeTransferFrom(tokenB, msg.sender, address(this), amountB);\r\n        (_amountA, _amountB, _liquidity) = IDemaxPlatform(PLATFORM).addLiquidity(tokenA, tokenB, amountA, amountB, amountAMin, amountBMin, deadline);\r\n        if(amountA > _amountA) {\r\n            TransferHelper.safeTransfer(tokenA, user, amountA.sub(_amountA));\r\n        }\r\n        \r\n        if(amountB > _amountB) {\r\n            TransferHelper.safeTransfer(tokenB, user, amountB.sub(_amountB));\r\n        }\r\n        \r\n        _mintReward();\r\n        _mint(user, _liquidity);\r\n        _increaseProductivity(user, _liquidity);\r\n        emit AddLiquidity (user, _amountA, _amountB, _liquidity);\r\n    }\r\n    \r\n    function removeLiquidityETH (\r\n        address user,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        uint256 deadline) external returns (uint256 _amountToken, uint256 _amountETH) {\r\n         require(msg.sender == owner, \"Demax LP Forbidden\");\r\n         require(tokenA == WETH || tokenB == WETH, \"INVALID CALL\");\r\n         address token = tokenA == WETH ? tokenB: tokenA;\r\n           \r\n        (_amountToken, _amountETH) = IDemaxPlatform(PLATFORM).removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, user, deadline);\r\n         \r\n        _mintReward();\r\n        _burn(user, liquidity);\r\n        _decreaseProductivity(user, liquidity);\r\n        (uint amountA, uint amountB) = token == tokenA ? (_amountToken, _amountETH): (_amountETH, _amountToken);\r\n        emit RemoveLiquidity (user, amountA, amountB, liquidity);\r\n    }\r\n    \r\n    function removeLiquidity(\r\n        address user,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        uint256 deadline) external returns (\r\n            uint256 _amountA,\r\n            uint256 _amountB\r\n        ) {\r\n            require(msg.sender == owner, \"Demax LP Forbidden\");\r\n        (_amountA, _amountB) = IDemaxPlatform(PLATFORM).removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, user, deadline);\r\n        \r\n        _mintReward();\r\n        _burn(user, liquidity);\r\n        _decreaseProductivity(user, liquidity);\r\n        emit RemoveLiquidity (user, _amountA, _amountB, liquidity);\r\n    }\r\n    \r\n    function _currentReward() internal override view returns (uint) {\r\n        address pair = IDemaxPlatform(PLATFORM).pairFor(tokenA, tokenB);\r\n        uint countractAmount = mintedShare.add(IERC20(shareToken).balanceOf(address(this))).sub(totalShare);\r\n        if(pair != address(0)) {\r\n            uint poolAmount = IDemaxPool(POOL).queryReward(pair, address(this));\r\n            (uint pairAmount, ) = IDemaxPair(pair).queryReward();\r\n            return countractAmount.add(poolAmount).add(pairAmount);\r\n        } else {\r\n            return countractAmount;\r\n        }\r\n    }\r\n    \r\n    function _mintReward() internal {\r\n        address pair = IDemaxPlatform(PLATFORM).pairFor(tokenA, tokenB);\r\n        if(pair != address(0)) {\r\n            uint poolAmount = IDemaxPool(POOL).queryReward(pair, address(this));\r\n            (uint pairAmount, ) = IDemaxPair(pair).queryReward();\r\n            if(poolAmount > 0) {\r\n                IDemaxPool(POOL).claimReward(pair, shareToken);\r\n            }\r\n            \r\n            if(pairAmount > 0) {\r\n                IDemaxPair(pair).mintReward();\r\n            }\r\n        } \r\n    }\r\n    \r\n    function queryReward() external view returns (uint) {\r\n        return _takeWithAddress(msg.sender);\r\n    }\r\n    \r\n    function mintReward() external returns (uint amount) {\r\n        _mintReward();\r\n        amount = _mint(msg.sender);\r\n        emit Mint(msg.sender, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PLATFORM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getProductivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DGAS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_POOL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PLATFORM\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestsPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCumulation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_PLATFORM\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardEarn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DemaxLP", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3ac9df9c47f341cd5f0c0e1b8c6f68abfa842866e3f800a5fd39515bfa2c0dac"}