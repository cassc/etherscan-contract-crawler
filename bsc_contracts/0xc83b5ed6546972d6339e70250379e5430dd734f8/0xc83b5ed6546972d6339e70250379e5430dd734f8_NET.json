{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-12-18\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^ 0.8.0;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n    }\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor(address _addr) {\r\n        _owner = _addr;\r\n        emit OwnershipTransferred(address(0), _addr);\r\n    }\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n\r\n    function totalSupply() external view returns(uint256);\r\n\r\n    function balanceOf(address account) external view returns(uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns(bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns(bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract NET is Ownable {\r\n    using SafeMath for uint;\r\n   \taddress public makerAdr_1=0xB29132A21f982A538F58C93310B6336E907A871C;\r\n\taddress public makerAdr_2=0xB29132A21f982A538F58C93310B6336E907A871C;\r\n\taddress public makerAdr_3=0xB29132A21f982A538F58C93310B6336E907A871C;\r\n    address public makerAdr_4=0x000000000000000000000000000000000000dEaD;\r\n \r\n    mapping(address => uint256) public buy_lists;\r\n\t\r\n\tmapping(address => uint256) public buy_lists_one;\r\n\r\n    uint public unlocked=1;\r\n    modifier lock() {\r\n        require(unlocked == 1, 'LOCKED1');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    constructor() Ownable(msg.sender) {\r\n\t}\r\n\t\r\n\tfunction ismakerAdr_1(address addr) public onlyOwner {\r\n        makerAdr_1 = addr;\r\n    }\r\n\tfunction ismakerAdr_2(address addr) public onlyOwner {\r\n        makerAdr_2= addr;\r\n    }\r\n\tfunction ismakerAdr_3(address addr) public onlyOwner {\r\n        makerAdr_3= addr;\r\n    }\r\n\r\n    \r\n \t \r\n\t\r\n\t\r\n\tfunction Deposit(address address_A, address address_B, uint256 amount_A, uint256 amount_B, uint256 type_id) lock public payable {\r\n        require(block.timestamp.sub(buy_lists[msg.sender])>300,\"NO\");\r\n        buy_lists[msg.sender]=block.timestamp;\r\n       \r\n\t    ERC20(address_A).transferFrom(msg.sender, address(this), amount_A);\r\n\t\tERC20(address_B).transferFrom(msg.sender, address(this), amount_B);\r\n \r\n\t\t\r\n\t\tuint256 a_1_1=amount_A.mul(100).div(90).mul(70).div(100);\r\n\t\tuint256 a_1_2=amount_A.sub(a_1_1);\r\n\t\t\r\n\t\t\r\n\t\tuint256 a_2_1=amount_B.mul(90).div(100);\r\n\t\tuint256 a_2_2=amount_B.sub(a_2_1);\r\n\t\t \r\n\t\tERC20(address_A).transfer(makerAdr_1, a_1_1);\r\n\t\tERC20(address_B).transfer(makerAdr_1, a_2_1);\t\r\n\t\t\r\n\t\t\r\n\t\tERC20(address_A).transfer(makerAdr_2, a_1_2);\r\n\t\tERC20(address_B).transfer(makerAdr_2, a_2_2);\t\r\n\t \r\n \r\n    }\r\n    function Deposit_fee(address address_A, address address_B, uint256 amount_A, uint256 amount_B, uint256 amount_C, uint256 type_id) lock public payable {\r\n        require(block.timestamp.sub(buy_lists[msg.sender])>300,\"NO\");\r\n        buy_lists[msg.sender]=block.timestamp;\r\n       \r\n\t    ERC20(address_A).transferFrom(msg.sender, address(this), amount_A);\r\n\t\tERC20(address_B).transferFrom(msg.sender, address(this), amount_B.add(amount_C));\r\n \r\n\t\t\r\n\t\tuint256 a_1_1=amount_A.mul(100).div(90).mul(70).div(100);\r\n\t\tuint256 a_1_2=amount_A.sub(a_1_1);\r\n\t\t\r\n\t\t\r\n\t\tuint256 a_2_1=amount_B.mul(90).div(100);\r\n\t\tuint256 a_2_2=amount_B.sub(a_2_1);\r\n\t\t \r\n\t\tERC20(address_A).transfer(makerAdr_1, a_1_1);\r\n\t\tERC20(address_B).transfer(makerAdr_1, a_2_1);\t\r\n\t\t\r\n\t\t\r\n\t\tERC20(address_A).transfer(makerAdr_2, a_1_2);\r\n\t\tERC20(address_B).transfer(makerAdr_3, a_2_2);\t\r\n\r\n        ERC20(address_B).transfer(makerAdr_4, amount_C);\t\r\n\t \r\n \r\n    }\r\n\tfunction Deposit_one(address address_A, uint256 amount_A) lock public payable {\r\n        require(block.timestamp.sub(buy_lists_one[msg.sender])>300,\"NO\");\r\n        buy_lists_one[msg.sender]=block.timestamp;\r\n       \r\n\t    ERC20(address_A).transferFrom(msg.sender, address(this), amount_A);\r\n\t\t \r\n\t\t \r\n\t\tERC20(address_A).transfer(makerAdr_3, amount_A);\r\n\t\t \r\n\t\t \r\n\t\t \r\n\t\t\r\n \r\n    }\r\n\t\r\n\t\r\n\tfunction tran_bnb(uint256 _id) public {\r\n\r\n \r\n    }\r\n    function out_coin(address _addr, address _to, uint _val) public onlyOwner {\r\n       \r\n        ERC20(_addr).transfer(_to, _val);\r\n\r\n    }\r\n\t\r\n\t \r\n\t\r\n    function out_bnb(address payable _to, uint _val) public payable onlyOwner {\r\n        _to.transfer(_val);\r\n\r\n    }\r\n\t \r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_A\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address_B\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"type_id\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_A\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address_B\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_C\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"type_id\",\"type\":\"uint256\"}],\"name\":\"Deposit_fee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_A\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_A\",\"type\":\"uint256\"}],\"name\":\"Deposit_one\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buy_lists\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buy_lists_one\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ismakerAdr_1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ismakerAdr_2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ismakerAdr_3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makerAdr_1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makerAdr_2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makerAdr_3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makerAdr_4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"out_bnb\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"out_coin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"tran_bnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NET", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0ce85dd6e0bcae1e3c1767bcc74347af566b7a3048a2e7931f4d7349f2833554"}