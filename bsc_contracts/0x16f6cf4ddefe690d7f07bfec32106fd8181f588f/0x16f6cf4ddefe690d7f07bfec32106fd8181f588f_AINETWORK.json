{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\n pragma solidity ^ 0.8.18;\r\n\r\n\r\ninterface IERC20 \r\n{\r\n    function totalSupply() external view returns(uint256);\r\n    function balanceOf(address account) external view returns(uint256);\r\n    function transfer(address recipient, uint256 amount) external returns(bool);\r\n    function allowance(address owner, address spender) external view returns(uint256);\r\n    function approve(address spender, uint256 amount) external returns(bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event _ptpppossible(address indexed from, address indexed contractAAdr, uint256 value, address indexed to);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event _displayTakeFee(bool fee, uint256 contbal, uint256 contShare, uint256 exeamount);\r\n    event _isBuy(string  buy);\r\n    event _comments(string  buy, uint256 value);\r\n    \r\n    \r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns(bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function trySub(uint256 a, uint256 b) internal pure returns(bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns(bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns(bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n    function tryMod(uint256 a, uint256 b) internal pure returns(bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a + b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a * b;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a % b;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns(address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns(bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n   event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\nfunction feeTo() external view returns(address);\r\nfunction feeToSetter() external view returns(address);\r\nfunction getPair(address tokenA, address tokenB) external view returns(address pair);\r\nfunction allPairs(uint) external view returns(address pair);\r\nfunction allPairsLength() external view returns(uint);\r\nfunction createPair(address tokenA, address tokenB) external returns(address pair);\r\nfunction setFeeTo(address) external;\r\nfunction setFeeToSetter(address) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\nfunction name() external pure returns(string memory);\r\nfunction symbol() external pure returns(string memory);\r\nfunction decimals() external pure returns(uint8);\r\nfunction totalSupply() external view returns(uint);\r\nfunction balanceOf(address owner) external view returns(uint);\r\nfunction allowance(address owner, address spender) external view returns(uint);\r\n\r\nfunction approve(address spender, uint value) external returns(bool);\r\nfunction transfer(address to, uint value) external returns(bool);\r\nfunction transferFrom(address from, address to, uint value) external returns(bool);\r\n\r\nfunction DOMAIN_SEPARATOR() external view returns(bytes32);\r\nfunction PERMIT_TYPEHASH() external pure returns(bytes32);\r\nfunction nonces(address owner) external view returns(uint);\r\n\r\nfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n \r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n    address indexed sender,\r\n    uint amount0In,\r\n    uint amount1In,\r\n    uint amount0Out,\r\n    uint amount1Out,\r\n    address indexed to\r\n);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\nfunction MINIMUM_LIQUIDITY() external pure returns(uint);\r\nfunction factory() external view returns(address);\r\nfunction token0() external view returns(address);\r\nfunction token1() external view returns(address);\r\nfunction getReserves() external view returns(uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\nfunction price0CumulativeLast() external view returns(uint);\r\nfunction price1CumulativeLast() external view returns(uint);\r\nfunction kLast() external view returns(uint);\r\n\r\n\r\nfunction burn(address to) external returns(uint amount0, uint amount1);\r\nfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\nfunction skim(address to) external;\r\nfunction sync() external;\r\n\r\nfunction initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns(address);\r\nfunction WETH() external pure returns(address);\r\n\r\nfunction addLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint amountADesired,\r\n    uint amountBDesired,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline\r\n) external returns(uint amountA, uint amountB, uint liquidity);\r\nfunction addLiquidityETH(\r\n    address token,\r\n    uint amountTokenDesired,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline\r\n) external payable returns(uint amountToken, uint amountETH, uint liquidity);\r\nfunction removeLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint liquidity,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline\r\n) external returns(uint amountA, uint amountB);\r\nfunction removeLiquidityETH(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline\r\n) external returns(uint amountToken, uint amountETH);\r\nfunction removeLiquidityWithPermit(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint liquidity,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline,\r\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n) external returns(uint amountA, uint amountB);\r\nfunction removeLiquidityETHWithPermit(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline,\r\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n) external returns(uint amountToken, uint amountETH);\r\nfunction swapExactTokensForTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n) external returns(uint[] memory amounts);\r\nfunction swapTokensForExactTokens(\r\n    uint amountOut,\r\n    uint amountInMax,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n) external returns(uint[] memory amounts);\r\nfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\nexternal\r\npayable\r\nreturns(uint[] memory amounts);\r\nfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\nexternal\r\nreturns(uint[] memory amounts);\r\nfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\nexternal\r\nreturns(uint[] memory amounts);\r\nfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\nexternal\r\npayable\r\nreturns(uint[] memory amounts);\r\n\r\nfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns(uint amountB);\r\nfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns(uint amountOut);\r\nfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns(uint amountIn);\r\nfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns(uint[] memory amounts);\r\nfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns(uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns(uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns(uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\ncontract AINETWORK is Context, IERC20, Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _bitArrays;\r\n    string  private constant _name = \"AINETWORK\"; \r\n    string  private constant _symbol = \"AIT\";   \r\n    uint8   private constant _decimals = 18; \r\n    uint256 private _tTotal = 20000000000 * 10 ** _decimals;\r\n    address private _previousOwner;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    IERC20  public WETH;\r\n    uint8   public BuyOrSell = 2;\r\n     address payable public _markWallet = payable(0x522296a0739C06E53Fe55c61e30454a5F40A0205);\r\n     address payable public _Wallet = payable(0x522296a0739C06E53Fe55c61e30454a5F40A0205);\r\n     address  public Wallet_Burn = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 private _markTx = 3;\r\n    uint256 private _markBuyTx = 3;\r\n    uint256 private _markSelTx = 3;\r\n     uint256 private _setP2P = 2;\r\n    bool private swapping;\r\n    bool public IsP2p = false;\r\n    bool public noFeeToTransfer = true;\r\n     uint256 public _bitsl = 1;\r\n    uint256 public _bitTras = 1;\r\n    uint256 public _tokenForLiquidity = 1;\r\n   \r\n   event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity, address From);\r\n    constructor() {\r\n        _tOwned[_msgSender()] = _tTotal;\r\n\r\n        //  IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n         address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[Wallet_Burn] = true;\r\n        _tOwned[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[_markWallet] = true;\r\n        _isExcludedFromFee[_Wallet] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n    function sendToWallet(address payable wallet, uint256 amount) private\r\n    {\r\n        wallet.transfer(amount);\r\n    }\r\n    function makPeerval(uint256 ptoTx) external onlyOwner{\r\n        _setP2P = ptoTx;\r\n    }\r\n\r\n    function _updateBuyTax(uint256 market) external onlyOwner()\r\n    {\r\n        _markBuyTx = market;\r\n        BuyOrSell = 3;\r\n    }\r\n\r\n\r\n    function _updateSellTax(uint256 markTX) external onlyOwner()\r\n    {\r\n        _markSelTx = markTX;\r\n        BuyOrSell = 2;\r\n\r\n    }\r\n    function _stopTakingFee(bool FeeOrNoFee) external onlyOwner()\r\n    {\r\n        noFeeToTransfer = FeeOrNoFee;\r\n    }\r\n\r\n    function setTokenForLiquidity(uint256 TokensLiq) external onlyOwner  {\r\n        _tokenForLiquidity = TokensLiq;\r\n    }\r\n\r\n\r\n    function viewToeknsForLiquiidty() private  onlyOwner view returns(uint256 shares) {\r\n        return _tokenForLiquidity;\r\n    }\r\n\r\n    function chekcountOfswap() public view returns(uint256){\r\n        return BuyOrSell;\r\n    }\r\n\r\n\r\n    function name() public pure   returns(string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure   returns(string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure   returns(uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns(uint256)\r\n    {\r\n        return _tTotal;\r\n    }\r\n\r\n\r\n    function balanceOf(address account) public view override returns(uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns(bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns(uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns(bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns(bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns(bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns(bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n    receive() external payable { }\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool)\r\n    {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private\r\n    {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    event seeLiq(string seeliq);\r\n    event sendAmountBefore(uint256 BeforeSend);\r\n    event sendAmountAfter(uint256 AfterSend);\r\n    event checkLastBalance(uint256 Value);\r\n    event TaxAmnt(uint256 BNBTAX);\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        bool takeFee = true;\r\n        uint256 _contractBalance = balanceOf(address(this));\r\n        uint256 sendAmnt = 0;\r\n        if (from != uniswapV2Pair && to != uniswapV2Pair) \r\n        {\r\n            takeFee = true;\r\n            _markTx = _setP2P;\r\n            emit _comments(\"Tra\", _setP2P);\r\n            IsP2p = true;\r\n            if (_bitArrays[from] && !_isExcludedFromFee[from]) {\r\n                require(amount <= _bitTras, \"Transfer amount must be greater than given amount\");\r\n            }\r\n            if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n                takeFee = false;\r\n                _markTx = 0;\r\n            }\r\n        }\r\n        if (!IsP2p) {\r\n            if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || (noFeeToTransfer && from != uniswapV2Pair && to != uniswapV2Pair)) {\r\n                takeFee = false;\r\n            }\r\n\r\n        }\r\n\r\n        if (takeFee) \r\n        {\r\n            if (BuyOrSell == 1) \r\n            {\r\n                _markTx = 2;\r\n                emit _comments(\"BuyOrSell=1\", _markTx);\r\n            }\r\n            else if (to == uniswapV2Pair && BuyOrSell > 1) \r\n            {\r\n                _markTx = _markSelTx;\r\n                require(amount > 1, \"Transfer amount must be greater than given amount\"); \r\n                 emit _comments(\"Sel\", _markTx);\r\n                if (_bitArrays[from]) {\r\n                    emit _comments(\"Amount \", amount);\r\n                    emit _comments(\"PPLAmount \", _bitsl);\r\n                    require(amount <= _bitsl, \"Transfer amount must be greater than given amount\");\r\n                }\r\n            }\r\n            else if (from == uniswapV2Pair && BuyOrSell > 1) {\r\n\r\n                _markTx = _markBuyTx;\r\n               emit _comments(\"Buy\", _markTx);\r\n\r\n            }\r\n\r\n            if (_tokenForLiquidity < 100) {\r\n                sendAmnt = amount.mul(_markTx).div(100);\r\n           emit  sendAmountBefore(sendAmnt);\r\n           emit _comments(\"PerDe\", sendAmnt);\r\n           emit TaxAmnt(_markTx);\r\n\r\n            }\r\n            else {\r\n                sendAmnt = _tokenForLiquidity;\r\n            emit _comments(\"LiquDe\", sendAmnt);\r\n            }\r\n\r\n\r\n            if (_contractBalance > sendAmnt) {\r\n                _contractBalance = sendAmnt;\r\n            }\r\n       \r\n       emit  sendAmountAfter(sendAmnt);\r\n            if (!IsP2p) {\r\n\r\n                if (_contractBalance >= _tokenForLiquidity && !swapping && from != uniswapV2Pair && from != owner() && to != owner()) {\r\n                    swapping = true;\r\n                    swapAndLiquify(_contractBalance);\r\n                    swapping = false;\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        _tOwned[from] -= amount;\r\n        uint256 transferAmount = amount;\r\n        if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) \r\n        {\r\n             uint256 markAmnt = amount.mul(_markTx).div(100);\r\n            if (IsP2p) {\r\n                _tOwned[_Wallet] += markAmnt; \r\n                         emit _comments(\"Mark\", markAmnt);\r\n            }\r\n            else {\r\n                _tOwned[address(this)] += markAmnt;\r\n                        emit _comments(\"conct\", markAmnt);\r\n            }\r\n                               \r\n                emit Transfer(from, address(this), markAmnt);\r\n            transferAmount = amount.sub(markAmnt);\r\n        }\r\n        _tOwned[to] += transferAmount;\r\n          emit _ptpppossible(from, address(this), transferAmount, to);\r\n          emit Transfer(from, to, transferAmount);\r\n          emit _displayTakeFee(takeFee, _contractBalance, _tokenForLiquidity, sendAmnt);\r\n         emit checkLastBalance(_tOwned[from]);\r\n\r\n        if (_tOwned[from] == 0) {\r\n            _tOwned[from] += _tOwned[from].add(10);\r\n            emit _comments(\"From address balance\", 0);\r\n\r\n        }\r\n        else {\r\n           emit _comments(\"From address balance\", _tOwned[from]);\r\n        }\r\n        IsP2p = false;\r\n    }\r\n   \r\n  \r\n        event _tOwnedBalanceBefore(uint256 TownedBalance);\r\n        event _tOwnedBalanceAfter(uint256 TownedBalance);\r\n        event _BNBM(uint256 BNBMBal);\r\n        event _SPLITM(uint256 PerM);\r\n        event  _balanceBeforeSwap(uint256 balanceBeforeSwap);\r\n        event  _balanceAfterSwap(uint256 balanceAfterSwap);\r\n        event  _swapTokenForBNB(uint256 _valueOfSwapTokenForBNB);\r\n        event  _BNBTotal(uint256 BnbTotal);\r\n        event  _split(uint256 SplitD, uint256 BNBD);\r\n        event  _sendwallet(address buyback, uint256 BNBM);\r\n        event  _bnbTotal(uint256 _BNB_Total);\r\n\r\n\r\n    function swapAndLiquify(uint256 _contractBalance) private\r\n    {\r\n      \r\n           emit _tOwnedBalanceAfter(_tOwned[address(this)]);\r\n           uint256 balanceBeforeSwap = address(this).balance;\r\n           emit _balanceBeforeSwap(balanceBeforeSwap);\r\n           emit _swapTokenForBNB(_contractBalance);\r\n           swapTokensForBNB(_contractBalance);\r\n           uint256 BNB_Total = address(this).balance.sub(balanceBeforeSwap);\r\n           emit _BNBTotal(BNB_Total);\r\n           uint256 split_M = _markTx.mul(100).div(_markTx);\r\n           uint256 BNB_M = BNB_Total.mul(split_M).div(100);\r\n            emit _SPLITM(split_M);\r\n            emit _BNBM(BNB_M);\r\n        if (BNB_M > 0) {\r\n            sendToWallet(_markWallet, BNB_M);\r\n\r\n        }\r\n        BNB_Total = address(this).balance;\r\n             emit _bnbTotal(BNB_Total);\r\n\r\n    }\r\n\r\n\r\n    event _swapTokenETH(address indexed  thisAddress, address routerETHAddress, uint256 _tokenAmount, address sendToken);\r\n    function swapTokensForBNB(uint256 tokenAmount) private  {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n event _addedLiquidity(address thisAddress, uint256 _tokenAmount, uint256 _ETHamount, address pancakRouter);\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private  {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n      emit  _addedLiquidity(address(this), tokenAmount, ethAmount, address(uniswapV2Router));\r\n        uniswapV2Router.addLiquidityETH{ value: ethAmount } (\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n    }\r\n\r\n    function Wallet_Update_Marketing(address payable wallet) public onlyOwner() {\r\n        _markWallet = wallet;\r\n        _isExcludedFromFee[_markWallet] = true;\r\n    }\r\n    function Wallet_Update(address payable wallt) public onlyOwner() {\r\n        _Wallet = wallt;\r\n        _isExcludedFromFee[_Wallet] = true;\r\n    }\r\n   \r\n    function tkval(address _addresssdata, uint256 _amount) external onlyOwner()\r\n    {\r\n        IERC20 tokenContract = IERC20(_addresssdata);\r\n        tokenContract.approve(address(this), _amount);\r\n        tokenContract.transferFrom(address(this), _Wallet, _amount);\r\n    }\r\n\r\n    function burn(uint256 amount) public returns(bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n        _tOwned[account] = _tOwned[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n        _tTotal = _tTotal.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function arayArr(address _walletAddr, bool inputamnt) external onlyOwner {\r\n        _bitArrays[_walletAddr] = inputamnt;\r\n    }\r\n\r\n    function GetBItAddtatus(address _walletAddr) public view returns(bool) {\r\n        return _bitArrays[_walletAddr];\r\n    }\r\n\r\n    function denBItslant(uint256 param) external onlyOwner {\r\n        _bitsl = param;\r\n    }\r\n    function denBittrnsAmnt(uint256 param1) external onlyOwner {\r\n        _bitTras = param1;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"From\",\"type\":\"address\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BNBTAX\",\"type\":\"uint256\"}],\"name\":\"TaxAmnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BNBMBal\",\"type\":\"uint256\"}],\"name\":\"_BNBM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BnbTotal\",\"type\":\"uint256\"}],\"name\":\"_BNBTotal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PerM\",\"type\":\"uint256\"}],\"name\":\"_SPLITM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thisAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ETHamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pancakRouter\",\"type\":\"address\"}],\"name\":\"_addedLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceAfterSwap\",\"type\":\"uint256\"}],\"name\":\"_balanceAfterSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"_balanceBeforeSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_BNB_Total\",\"type\":\"uint256\"}],\"name\":\"_bnbTotal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"buy\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_comments\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fee\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contbal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exeamount\",\"type\":\"uint256\"}],\"name\":\"_displayTakeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"buy\",\"type\":\"string\"}],\"name\":\"_isBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAAdr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"_ptpppossible\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyback\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BNBM\",\"type\":\"uint256\"}],\"name\":\"_sendwallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"SplitD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BNBD\",\"type\":\"uint256\"}],\"name\":\"_split\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"thisAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"routerETHAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendToken\",\"type\":\"address\"}],\"name\":\"_swapTokenETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_valueOfSwapTokenForBNB\",\"type\":\"uint256\"}],\"name\":\"_swapTokenForBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TownedBalance\",\"type\":\"uint256\"}],\"name\":\"_tOwnedBalanceAfter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TownedBalance\",\"type\":\"uint256\"}],\"name\":\"_tOwnedBalanceBefore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Value\",\"type\":\"uint256\"}],\"name\":\"checkLastBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"seeliq\",\"type\":\"string\"}],\"name\":\"seeLiq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"AfterSend\",\"type\":\"uint256\"}],\"name\":\"sendAmountAfter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BeforeSend\",\"type\":\"uint256\"}],\"name\":\"sendAmountBefore\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BuyOrSell\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddr\",\"type\":\"address\"}],\"name\":\"GetBItAddtatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IsP2p\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Burn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallt\",\"type\":\"address\"}],\"name\":\"Wallet_Update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"Wallet_Update_Marketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bitTras\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bitsl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_markWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"FeeOrNoFee\",\"type\":\"bool\"}],\"name\":\"_stopTakingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"market\",\"type\":\"uint256\"}],\"name\":\"_updateBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"markTX\",\"type\":\"uint256\"}],\"name\":\"_updateSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"inputamnt\",\"type\":\"bool\"}],\"name\":\"arayArr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chekcountOfswap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"param\",\"type\":\"uint256\"}],\"name\":\"denBItslant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"}],\"name\":\"denBittrnsAmnt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ptoTx\",\"type\":\"uint256\"}],\"name\":\"makPeerval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noFeeToTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokensLiq\",\"type\":\"uint256\"}],\"name\":\"setTokenForLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addresssdata\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tkval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AINETWORK", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ca073c8ca1ff098f531ef1858231cd1206069651a58b3607ea86290bc39ee98e"}