{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.10 <= 0.8.10;\r\n\r\n// File: @openzeppelin/contracts@4.4.0/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.0/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.0/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.0/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.0/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.0/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.0/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.0/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/KXMarket.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Clock auction for non-fungible tokens.\r\ncontract KXMarket is Pausable, Ownable {\r\n  using SafeERC20 for IERC20;\r\n  //Values 0-10,000 map to 0%-100%\r\n  uint256 public marketFee;\r\n  address public feeTo;\r\n  mapping(address => bool) public acceptPayTokens;\r\n  // Represents an auction on an NFT\r\n  struct Auction {\r\n    // Current owner of NFT\r\n    address seller;\r\n    // Price (in wei) at beginning of auction\r\n    uint128 startingPrice;\r\n    // Price (in wei) at end of auction\r\n    uint128 endingPrice;\r\n    // Duration (in seconds) of auction\r\n    uint64 duration;\r\n    // Time when auction started\r\n    // NOTE: 0 if this auction has been concluded\r\n    uint64 startedAt;\r\n    address payToken;\r\n  }\r\n\r\n  // Map from token ID to their corresponding auction.\r\n  mapping (address => mapping (uint256 => Auction)) public auctions;\r\n\r\n  uint8 constant RECORD_TIMESTAMP_COUNT = 5;\r\n\r\n  struct TradeRecord {\r\n    uint64 buyTimes;\r\n    uint64[RECORD_TIMESTAMP_COUNT] buyTimestamps;\r\n    uint8 buyTimestampIndex;\r\n    uint64 sellTimes;\r\n    uint64[RECORD_TIMESTAMP_COUNT] sellTimestamps;\r\n    uint8 sellTimestampIndex;\r\n  }\r\n\r\n  // Map for account bid record\r\n  mapping (address => mapping(address => TradeRecord)) private tradeRecords;\r\n\r\n  event AuctionCreated(\r\n    address indexed _nftAddress,\r\n    uint256 indexed _tokenId,\r\n    uint256 _startingPrice,\r\n    uint256 _endingPrice,\r\n    uint256 _duration,\r\n    address _seller,\r\n    address _payToken\r\n  );\r\n\r\n  event AuctionSuccessful(\r\n    address indexed _nftAddress,\r\n    uint256 indexed _tokenId,\r\n    uint256 _totalPrice,\r\n    address _winner,\r\n    address _seller,\r\n    address _payToken\r\n  );\r\n\r\n  event AuctionCancelled(\r\n    address indexed _nftAddress,\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n\r\n  constructor(uint256 _marketFee, address _feeTo) {  \r\n    require(_marketFee <= 10000);\r\n    marketFee = _marketFee;\r\n    feeTo = _feeTo;\r\n  }\r\n\r\n  // Modifiers to check that inputs can be safely stored with a certain\r\n  // number of bits. We use constants and multiple modifiers to save gas.\r\n  modifier canBeStoredWith64Bits(uint256 _value) {\r\n    require(_value <= 18446744073709551615);\r\n    _;\r\n  }\r\n\r\n  modifier canBeStoredWith128Bits(uint256 _value) {\r\n    require(_value < 340282366920938463463374607431768211455);\r\n    _;\r\n  }\r\n\r\n  function setMarketFee(uint256 _marketFee) external onlyOwner {\r\n      marketFee = _marketFee;\r\n  }\r\n\r\n  function setMarketFeeTo(address _to) external onlyOwner {\r\n      feeTo = _to;\r\n  }\r\n\r\n  function setAcceptPayToken(address _payToken, bool _accept) public onlyOwner {\r\n    acceptPayTokens[_payToken] = _accept;\r\n  }\r\n  /// @dev Returns auction info for an NFT on auction.\r\n  /// @param _nftAddress - Address of the NFT.\r\n  /// @param _tokenId - ID of NFT on auction.\r\n  function getAuction(\r\n    address _nftAddress,\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      address seller,\r\n      uint256 startingPrice,\r\n      uint256 endingPrice,\r\n      uint256 duration,\r\n      uint256 startedAt,\r\n      address payToken\r\n    )\r\n  {\r\n    Auction storage _auction = auctions[_nftAddress][_tokenId];\r\n    require(_isOnAuction(_auction));\r\n    return (\r\n      _auction.seller,\r\n      _auction.startingPrice,\r\n      _auction.endingPrice,\r\n      _auction.duration,\r\n      _auction.startedAt,\r\n      _auction.payToken\r\n    );\r\n  }\r\n\r\n  /// @dev Returns the current price of an auction.\r\n  /// @param _nftAddress - Address of the NFT.\r\n  /// @param _tokenId - ID of the token price we are checking.\r\n  function getCurrentPrice(\r\n    address _nftAddress,\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    Auction storage _auction = auctions[_nftAddress][_tokenId];\r\n    require(_isOnAuction(_auction));\r\n    return _getCurrentPrice(_auction);\r\n  }\r\n\r\n  function getTradeRecord(\r\n    address _owner,\r\n    address _nftAddress\r\n  )\r\n    external\r\n    view\r\n    returns (TradeRecord memory) {\r\n      return tradeRecords[_owner][_nftAddress];\r\n    }\r\n\r\n  /// @dev Creates and begins a new auction.\r\n  /// @param _nftAddress - address of a deployed contract implementing\r\n  ///  the Nonfungible Interface.\r\n  /// @param _tokenId - ID of token to auction, sender must be owner.\r\n  /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n  /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n  /// @param _duration - Length of time to move between starting\r\n  ///  price and ending price (in seconds).\r\n  function createAuction(\r\n    address _nftAddress,\r\n    uint256 _tokenId,\r\n    uint256 _startingPrice,\r\n    uint256 _endingPrice,\r\n    uint256 _duration,\r\n    address _payToken\r\n  )\r\n    external\r\n    whenNotPaused\r\n    canBeStoredWith128Bits(_startingPrice)\r\n    canBeStoredWith128Bits(_endingPrice)\r\n    canBeStoredWith64Bits(_duration)\r\n  {\r\n    address _seller = msg.sender;\r\n    require(_owns(_nftAddress, _seller, _tokenId));\r\n    require(acceptPayTokens[_payToken], 'KXMarket: wrong pay token');\r\n    _escrow(_nftAddress, _seller, _tokenId);\r\n    Auction memory _auction = Auction(\r\n      _seller,\r\n      uint128(_startingPrice),\r\n      uint128(_endingPrice),\r\n      uint64(_duration),\r\n      uint64(block.timestamp),\r\n      _payToken\r\n    );\r\n    _addAuction(\r\n      _nftAddress,\r\n      _tokenId,\r\n      _auction,\r\n      _seller,\r\n      _payToken\r\n    );\r\n  }\r\n\r\n  /// @dev Bids on an open auction, completing the auction and transferring\r\n  ///  ownership of the NFT if enough Ether is supplied.\r\n  /// @param _nftAddress - address of a deployed contract implementing\r\n  ///  the Nonfungible Interface.\r\n  /// @param _tokenId - ID of token to bid on.\r\n  function bid(\r\n    address _nftAddress,\r\n    uint256 _tokenId,\r\n    uint256 _bidAmount,\r\n    address _payToken\r\n  )\r\n    external\r\n    payable\r\n    whenNotPaused\r\n  {\r\n    // _bid will throw if the bid or funds transfer fails\r\n    uint256 amount = 0;\r\n    if (_payToken == address(0)) {\r\n      amount = msg.value;\r\n    } else {\r\n      require(msg.value == 0, \"KXMarket: Invalid msg.value\");\r\n      amount = _bidAmount;\r\n    }\r\n\r\n    _bid(_nftAddress, _tokenId, amount, _payToken);\r\n    _transfer(_nftAddress, msg.sender, _tokenId);\r\n  }\r\n\r\n  /// @dev Cancels an auction that hasn't been won yet.\r\n  ///  Returns the NFT to original owner.\r\n  /// @notice This is a state-modifying function that can\r\n  ///  be called while the contract is paused.\r\n  /// @param _nftAddress - Address of the NFT.\r\n  /// @param _tokenId - ID of token on auction\r\n  function cancelAuction(address _nftAddress, uint256 _tokenId) external {\r\n    Auction storage _auction = auctions[_nftAddress][_tokenId];\r\n    require(_isOnAuction(_auction));\r\n    require(msg.sender == _auction.seller);\r\n    _cancelAuction(_nftAddress, _tokenId, _auction.seller);\r\n  }\r\n\r\n  /// @dev Cancels an auction when the contract is paused.\r\n  ///  Only the owner may do this, and NFTs are returned to\r\n  ///  the seller. This should only be used in emergencies.\r\n  /// @param _nftAddress - Address of the NFT.\r\n  /// @param _tokenId - ID of the NFT on auction to cancel.\r\n  function cancelAuctionWhenPaused(\r\n    address _nftAddress,\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    whenPaused\r\n    onlyOwner\r\n  {\r\n    Auction storage _auction = auctions[_nftAddress][_tokenId];\r\n    require(_isOnAuction(_auction));\r\n    _cancelAuction(_nftAddress, _tokenId, _auction.seller);\r\n  }\r\n\r\n  /// @dev Returns true if the NFT is on auction.\r\n  /// @param _auction - Auction to check.\r\n  function _isOnAuction(Auction storage _auction) internal view returns (bool) {\r\n    return (_auction.startedAt > 0);\r\n  }\r\n\r\n  /// @dev Gets the NFT object from an address, validating that implementsERC721 is true.\r\n  /// @param _nftAddress - Address of the NFT.\r\n  function _getNftContract(address _nftAddress) internal pure returns (IERC721) {\r\n    IERC721 candidateContract = IERC721(_nftAddress);\r\n    // require(candidateContract.implementsERC721());\r\n    return candidateContract;\r\n  }\r\n\r\n  /// @dev Returns current price of an NFT on auction. Broken into two\r\n  ///  functions (this one, that computes the duration from the auction\r\n  ///  structure, and the other that does the price computation) so we\r\n  ///  can easily test that the price computation works correctly.\r\n  function _getCurrentPrice(\r\n    Auction storage _auction\r\n  )\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    uint256 _secondsPassed = 0;\r\n\r\n    // A bit of insurance against negative values (or wraparound).\r\n    // Probably not necessary (since Ethereum guarantees that the\r\n    // now variable doesn't ever go backwards).\r\n    if (block.timestamp > _auction.startedAt) {\r\n      _secondsPassed = block.timestamp - _auction.startedAt;\r\n    }\r\n\r\n    return _computeCurrentPrice(\r\n      _auction.startingPrice,\r\n      _auction.endingPrice,\r\n      _auction.duration,\r\n      _secondsPassed\r\n    );\r\n  }\r\n\r\n  /// @dev Computes the current price of an auction. Factored out\r\n  ///  from _currentPrice so we can run extensive unit tests.\r\n  ///  When testing, make this function external and turn on\r\n  ///  `Current price computation` test suite.\r\n  function _computeCurrentPrice(\r\n    uint256 _startingPrice,\r\n    uint256 _endingPrice,\r\n    uint256 _duration,\r\n    uint256 _secondsPassed\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    // NOTE: We don't use SafeMath (or similar) in this function because\r\n    //  all of our external functions carefully cap the maximum values for\r\n    //  time (at 64-bits) and currency (at 128-bits). _duration is\r\n    //  also known to be non-zero (see the require() statement in\r\n    //  _addAuction())\r\n    if (_secondsPassed >= _duration) {\r\n      // We've reached the end of the dynamic pricing portion\r\n      // of the auction, just return the end price.\r\n      return _endingPrice;\r\n    } else {\r\n      // Starting price can be higher than ending price (and often is!), so\r\n      // this delta can be negative.\r\n      int256 _totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\r\n\r\n      // This multiplication can't overflow, _secondsPassed will easily fit within\r\n      // 64-bits, and _totalPriceChange will easily fit within 128-bits, their product\r\n      // will always fit within 256-bits.\r\n      int256 _currentPriceChange = _totalPriceChange * int256(_secondsPassed) / int256(_duration);\r\n\r\n      // _currentPriceChange can be negative, but if so, will have a magnitude\r\n      // less that _startingPrice. Thus, this result will always end up positive.\r\n      int256 _currentPrice = int256(_startingPrice) + _currentPriceChange;\r\n\r\n      return uint256(_currentPrice);\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if the claimant owns the token.\r\n  /// @param _nftAddress - The address of the NFT.\r\n  /// @param _claimant - Address claiming to own the token.\r\n  /// @param _tokenId - ID of token whose ownership to verify.\r\n  function _owns(address _nftAddress, address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n    IERC721 _nftContract = _getNftContract(_nftAddress);\r\n    return (_nftContract.ownerOf(_tokenId) == _claimant);\r\n  }\r\n\r\n  /// @dev Adds an auction to the list of open auctions. Also fires the\r\n  ///  AuctionCreated event.\r\n  /// @param _tokenId The ID of the token to be put on auction.\r\n  /// @param _auction Auction to add.\r\n  function _addAuction(\r\n    address _nftAddress,\r\n    uint256 _tokenId,\r\n    Auction memory _auction,\r\n    address _seller,\r\n    address _payToken\r\n  )\r\n    internal\r\n  {\r\n    // Require that all auctions have a duration of\r\n    // at least one minute. (Keeps our math from getting hairy!)\r\n    require(_auction.duration >= 1 minutes);\r\n\r\n    auctions[_nftAddress][_tokenId] = _auction;\r\n\r\n    emit AuctionCreated(\r\n      _nftAddress,\r\n      _tokenId,\r\n      uint256(_auction.startingPrice),\r\n      uint256(_auction.endingPrice),\r\n      uint256(_auction.duration),\r\n      _seller,\r\n      _payToken\r\n    );\r\n  }\r\n\r\n  /// @dev Removes an auction from the list of open auctions.\r\n  /// @param _tokenId - ID of NFT on auction.\r\n  function _removeAuction(address _nftAddress, uint256 _tokenId) internal {\r\n    delete auctions[_nftAddress][_tokenId];\r\n  }\r\n\r\n  /// @dev Cancels an auction unconditionally.\r\n  function _cancelAuction(address _nftAddress, uint256 _tokenId, address _seller) internal {\r\n    _removeAuction(_nftAddress, _tokenId);\r\n    _transfer(_nftAddress, _seller, _tokenId);\r\n    emit AuctionCancelled(_nftAddress, _tokenId);\r\n  }\r\n\r\n  /// @dev Escrows the NFT, assigning ownership to this contract.\r\n  /// Throws if the escrow fails.\r\n  /// @param _nftAddress - The address of the NFT.\r\n  /// @param _owner - Current owner address of token to escrow.\r\n  /// @param _tokenId - ID of token whose approval to verify.\r\n  function _escrow(address _nftAddress, address _owner, uint256 _tokenId) internal {\r\n    IERC721 _nftContract = _getNftContract(_nftAddress);\r\n\r\n    // It will throw if transfer fails\r\n    _nftContract.transferFrom(_owner, address(this), _tokenId);\r\n  }\r\n\r\n  /// @dev Transfers an NFT owned by this contract to another address.\r\n  /// Returns true if the transfer succeeds.\r\n  /// @param _nftAddress - The address of the NFT.\r\n  /// @param _receiver - Address to transfer NFT to.\r\n  /// @param _tokenId - ID of token to transfer.\r\n  function _transfer(address _nftAddress, address _receiver, uint256 _tokenId) internal {\r\n    IERC721 _nftContract = _getNftContract(_nftAddress);\r\n\r\n    // It will throw if transfer fails\r\n    _nftContract.safeTransferFrom(address(this), _receiver, _tokenId);\r\n  }\r\n\r\n  /// @dev Computes market fee of a sale.\r\n  /// @param _price - Sale price of NFT.\r\n  function _computeFee(uint256 _price) internal view returns (uint256) {\r\n    // NOTE: We don't use SafeMath (or similar) in this function because\r\n    //  all of our entry functions carefully cap the maximum values for\r\n    //  currency (at 128-bits), and marketFee <= 10000 (see the require()\r\n    //  statement in the ClockAuction constructor). The result of this\r\n    //  function is always guaranteed to be <= _price.\r\n    return _price * marketFee / 10000;\r\n  }\r\n\r\n  /// @dev Computes the price and transfers winnings.\r\n  /// Does NOT transfer ownership of token.\r\n  function _bid(\r\n    address _nftAddress,\r\n    uint256 _tokenId,\r\n    uint256 _bidAmount,\r\n    address _payToken\r\n  )\r\n    internal\r\n    returns (uint256)\r\n  {\r\n    // Get a reference to the auction struct\r\n    Auction storage _auction = auctions[_nftAddress][_tokenId];\r\n\r\n    // Explicitly check that this auction is currently live.\r\n    // (Because of how Ethereum mappings work, we can't just count\r\n    // on the lookup above failing. An invalid _tokenId will just\r\n    // return an auction object that is all zeros.)\r\n    require(_isOnAuction(_auction));\r\n    require(_payToken == _auction.payToken, 'KXMarket: wrong pay token');\r\n    // Check that the incoming bid is higher than the current\r\n    // price\r\n    uint256 _price = _getCurrentPrice(_auction);\r\n    require(_bidAmount >= _price);\r\n\r\n    // Grab a reference to the seller before the auction struct\r\n    // gets deleted.\r\n    address _seller = _auction.seller;\r\n\r\n    // The bid is good! Remove the auction before sending the fees\r\n    // to the sender so we can't have a reentrancy attack.\r\n    _removeAuction(_nftAddress, _tokenId);\r\n\r\n    // Transfer proceeds to seller (if there are any!)\r\n    if (_price > 0) {\r\n      //  Calculate the fee.\r\n      // (NOTE: _computeFee() is guaranteed to return a\r\n      //  value <= price, so this subtraction can't go negative.)\r\n      uint256 _auctioneerCut = _computeFee(_price);\r\n      uint256 _sellerProceeds = _price - _auctioneerCut;\r\n\r\n      // NOTE: Doing a transfer() in the middle of a complex\r\n      // method like this is generally discouraged because of\r\n      // reentrancy attacks and DoS attacks if the seller is\r\n      // a contract with an invalid fallback function. We explicitly\r\n      // guard against reentrancy attacks by removing the auction\r\n      // before calling transfer(), and the only thing the seller\r\n      // can DoS is the sale of their own asset! (And if it's an\r\n      // accident, they can call cancelAuction(). )\r\n\r\n      // if (payToken == address(0)) {\r\n      //   payable(_seller).transfer(_sellerProceeds);\r\n      // }\r\n\r\n      if (_payToken == address(0)) {\r\n        payable(_seller).transfer(_sellerProceeds);\r\n      } else {\r\n        IERC20(_payToken).safeTransferFrom(\r\n            msg.sender,\r\n            _seller,\r\n            _sellerProceeds\r\n        );\r\n      }  \r\n      // Send market fee \r\n      if (_auctioneerCut > 0) {\r\n        payMarketFee(_auctioneerCut, _payToken);\r\n      }          \r\n    }\r\n\r\n    if (_bidAmount > _price) {\r\n      // Calculate any excess funds included with the bid. If the excess\r\n      // is anything worth worrying about, transfer it back to bidder.\r\n      // NOTE: We checked above that the bid amount is greater than or\r\n      // equal to the price so this cannot underflow.\r\n      uint256 _bidExcess = _bidAmount - _price;\r\n\r\n      // Return the funds. Similar to the previous transfer, this is\r\n      // not susceptible to a re-entry attack because the auction is\r\n      // removed before any transfers occur.\r\n\r\n      if (_payToken == address(0)) {\r\n        payable(msg.sender).transfer(_bidExcess);\r\n      }         \r\n    }\r\n\r\n    // Tell the world!\r\n    emit AuctionSuccessful(\r\n      _nftAddress,\r\n      _tokenId,\r\n      _price,\r\n      msg.sender,\r\n      _seller,\r\n      _payToken\r\n    );\r\n\r\n    // record seller\r\n    TradeRecord storage sellRecord = tradeRecords[_seller][_nftAddress];\r\n    sellRecord.sellTimes++;\r\n\r\n    sellRecord.sellTimestamps[sellRecord.sellTimestampIndex++] = uint64(block.timestamp);\r\n\r\n    if(sellRecord.sellTimestampIndex >= RECORD_TIMESTAMP_COUNT) {\r\n      sellRecord.sellTimestampIndex = 0;\r\n    }\r\n\r\n    // record buyer\r\n    TradeRecord storage buyerRecord = tradeRecords[msg.sender][_nftAddress];\r\n    buyerRecord.buyTimes++;\r\n\r\n    buyerRecord.buyTimestamps[buyerRecord.buyTimestampIndex++] = uint64(block.timestamp);\r\n\r\n    if(buyerRecord.buyTimestampIndex >= RECORD_TIMESTAMP_COUNT) {\r\n      buyerRecord.buyTimestampIndex = 0;\r\n    }\r\n\r\n    return _price;\r\n  }\r\n\r\n  function payMarketFee(uint256 _feeAmount, address _payToken) internal {\r\n      address _feeTo = feeTo;\r\n      if (feeTo == address(0x0)) {\r\n        _feeTo = owner();\r\n      }\r\n\r\n      if (_feeAmount > 0) {\r\n        if (_payToken == address(0)) {\r\n          (bool success, ) = payable(_feeTo).call{ value: _feeAmount }(\"\");\r\n          require(success, \"KXMarket: failed to send ether to owner\");\r\n        } else {\r\n          IERC20(_payToken).safeTransferFrom(\r\n            msg.sender,\r\n            _feeTo,\r\n            _feeAmount\r\n          );\r\n        }            \r\n      }\r\n  }  \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"}],\"name\":\"AuctionSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptPayTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"startingPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endingPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startedAt\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuctionWhenPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"getTradeRecord\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"buyTimes\",\"type\":\"uint64\"},{\"internalType\":\"uint64[5]\",\"name\":\"buyTimestamps\",\"type\":\"uint64[5]\"},{\"internalType\":\"uint8\",\"name\":\"buyTimestampIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"sellTimes\",\"type\":\"uint64\"},{\"internalType\":\"uint64[5]\",\"name\":\"sellTimestamps\",\"type\":\"uint64[5]\"},{\"internalType\":\"uint8\",\"name\":\"sellTimestampIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct KXMarket.TradeRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_accept\",\"type\":\"bool\"}],\"name\":\"setAcceptPayToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketFee\",\"type\":\"uint256\"}],\"name\":\"setMarketFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setMarketFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KXMarket", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000b9b1e3473353e1a9354653ef86de0a46023384fc", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0fc8db1b90caf70f97cc4ccc95eb926cf3a8df695b13065949a16c69469e6f1d"}