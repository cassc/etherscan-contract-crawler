{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IWhitelist {\\n    function UPDATE_WHITELIST_ROLE() external pure returns (bytes32);\\n    function DEFAULT_ADMIN_ROLE() external pure returns (bytes32);\\n    function getUserInfo(address _addrUser, bytes32 _role) external view returns (address, bool, address[] memory);\\n    function updateMultiUserInfo(\\n        address[] memory _listAddrUser,\\n        bytes32[] memory _listRole,\\n        bool[] memory _listValueRole,\\n        address[] memory _listAddrRef,\\n        address[][] memory _listListExtra) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Events.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Library containing events related to the smart contract.\\n */\\nlibrary Events {\\n    /**\\n     * @notice Emitted when a purchase is made.\\n     * @param buyer The address of the buyer.\\n     * @param value The amount of BNB spent.\\n     * @param birBurn The amount of BIR burned.\\n     * @param rateBnbUsd The rate of BNB to USD.\\n     * @param bicForBnbSpending The amount of BIC received for BNB spending.\\n     * @param bicForBirBurning The amount of BIC received for BIR burning.\\n     * @param bgtReceive The amount of BGT received.\\n     * @param bgtReferral The amount of BGT received for referral.\\n     * @param bnbReferral The amount of BNB received for referral.\\n     * @param bicForBnbThreshold The amount of BIC received for passing BNB threshold.\\n     * @param bicForCoreTeam The amount of BIC received for the core team.\\n     * @param timestamp The timestamp of the purchase.\\n     */\\n    event Purchased(\\n        address indexed buyer,\\n        uint256 value,\\n        uint256 birBurn,\\n        uint256 rateBnbUsd,\\n        uint256 bicForBnbSpending,\\n        uint256 bicForBirBurning,\\n        uint256 bgtReceive,\\n        uint256 bgtReferral,\\n        uint256 bnbReferral,\\n        uint256 bicForBnbThreshold,\\n        uint256 bicForCoreTeam,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when payment information is set.\\n     * @param variableName The name of the variable.\\n     * @param newValue The new value of the variable.\\n     * @param timestamp The timestamp of the transaction.\\n     */\\n    event PaymentInfoSet(\\n        bytes32 variableName,\\n        uint256 newValue,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when a new management contract is set.\\n     * @param managementAddress The address of the new management contract.\\n     * @param timestamp The timestamp of the transaction.\\n     */\\n    event ManagementSet(\\n        address managementAddress,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when a new payment contract is set.\\n     * @param paymentAddress The address of the new payment contract.\\n     * @param timestamp The timestamp of the transaction.\\n     */\\n    event PaymentContractSet(\\n        address paymentAddress,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when a new beneficiary is set.\\n     * @param beneficiary The address of the beneficiary.\\n     * @param timestamp The timestamp of the transaction.\\n     */\\n    event BeneficiarySet(\\n        address beneficiary,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when a new whitelist contract is set.\\n     * @param whitelistAddress The address of the new whitelist contract.\\n     * @param timestamp The timestamp of the transaction.\\n     */\\n    event WhitelistContractSet(\\n        address whitelistAddress,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when a token withdrawal is made.\\n     * @param tokenAddress The address of the token.\\n     * @param amount The amount of tokens withdrawn.\\n     * @param timestamp The timestamp of the transaction.\\n     */\\n    event TokenWithdrawn(\\n        address tokenAddress,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when BNB is withdrawn.\\n     * @param amount The amount of BNB withdrawn.\\n     * @param timestamp The timestamp of the transaction.\\n     */\\n    event BnbWithdrawn(\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when a new core team pool is set.\\n     * @param coreTeamPool The address of the core team pool.\\n     * @param timestamp The timestamp of the transaction.\\n     */\\n    event CoreTeamPoolSet(\\n        address coreTeamPool,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when active time is set.\\n     * @param startTime The start time of the sale session.\\n     * @param endTime The end time of the sale session.\\n     * @param timestamp The timestamp of the transaction.\\n     */\\n    event ActiveTimeSet(\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 timestamp\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/modules/management/IManagement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Interface for the Management contract.\\n */\\ninterface IManagement {\\n    /**\\n     * @notice Returns the constant value of the MODERATOR_ROLE.\\n     * @return A bytes32 representing the MODERATOR_ROLE.\\n     */\\n    function MODERATOR_ROLE() external pure returns (bytes32);\\n\\n/**\\n     * @notice Returns the constant value of the WHITELIST_SUPPORTER_ROLE.\\n     * @return A bytes32 representing the WHITELIST_SUPPORTER_ROLE.\\n     */\\n    function WHITELIST_SUPPORTER_ROLE() external pure returns (bytes32);\\n\\n\\n    /**\\n     * @notice Returns the address of beneficiary who receives the BNB.\\n     * @return The address of the beneficiary.\\n     */\\n    function beneficiary() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the core team pool.\\n     * @return The address of the core team pool.\\n     */\\n    function coreTeamPool() external view returns (address);\\n\\n    /**\\n     * @notice Returns the start time of the sale.\\n     * @return The start time of the sale.\\n     */\\n    function startTime() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the end time of the sale.\\n     * @return The end time of the sale.\\n     */\\n    function endTime() external view returns (uint256);\\n\\n    /**\\n     * @notice Sets a new payment contract.\\n     * @param paymentAddress The address of the new payment contract.\\n     */\\n    function setPaymentContract(address paymentAddress) external;\\n\\n    /**\\n     * @notice Sets a new whitelist contract.\\n     * @param whitelistAddress The address of the new whitelist contract.\\n     */\\n    function setWhitelistContract(address whitelistAddress) external;\\n\\n    /**\\n     * @notice Sets a new beneficiary address.\\n     * @param _beneficiary The address of the new beneficiary.\\n     */\\n    function setBeneficiary(address _beneficiary) external;\\n\\n    /**\\n     * @notice Sets a new core team pool address.\\n     * @param _coreTeamPool The address of the new core team pool.\\n     */\\n    function setCoreTeamPool(address _coreTeamPool) external;\\n\\n    /**\\n     * @notice Sets payment information.\\n     * @param variableName The name of the variable to set.\\n     * @param newValue The new value for the variable.\\n     */\\n    function setPaymentInfo(string memory variableName, uint256 newValue) external;\\n\\n    /**\\n     * @notice Sets the active time for the sale.\\n     * @param _startTime The start time of the sale.\\n     * @param _endTime The end time of the sale.\\n     */\\n    function setActiveTime(uint256 _startTime, uint256 _endTime) external;\\n\\n    /**\\n     * @notice Sets the whitelist information required MODERATOR_ROLE.\\n     * @param listAddrUser The list of addresses of the users.\\n     * @param listRole The list of roles to set.\\n     * @param listValueRole The list of values for the roles.\\n     * @param listAddrRef The list of addresses of the referrers.\\n     * @param listListExtra The list of lists of extra addresses.\\n     */\\n    function updateWhitelistInfo(\\n        address[] memory listAddrUser,\\n        bytes32[] memory listRole,\\n        bool[] memory listValueRole,\\n        address[] memory listAddrRef,\\n        address[][] memory listListExtra) external;\\n\\n    /**\\n     * @notice Adds the whitelist information required WHITELIST_SUPPORTER_ROLE.\\n     * @param listAddrUser The list of addresses of the users.\\n     * @param listRole The list of roles to set.\\n     * @param listValueRole The list of values for the roles.\\n     * @param listAddrRef The list of addresses of the referrers.\\n     * @param listListExtra The list of lists of extra addresses.\\n     */\\n    function addWhitelistInfo(\\n        address[] memory listAddrUser,\\n        bytes32[] memory listRole,\\n        bool[] memory listValueRole,\\n        address[] memory listAddrRef,\\n        address[][] memory listListExtra) external;\\n\\n    /**\\n     * @notice Checks if the contract is active.\\n     * @return A boolean value indicating if the contract is active or not.\\n     */\\n    function isActive() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/modules/management/Management.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./IManagement.sol\\\";\\nimport \\\"../payment/IPayment.sol\\\";\\nimport \\\"../../interfaces/IWhitelist.sol\\\";\\nimport \\\"../../libraries/Events.sol\\\";\\n/**\\n * @title Management contract for handling various administrative tasks.\\n */\\ncontract Management is IManagement, AccessControl {\\n    bytes32 public constant MODERATOR_ROLE = keccak256(\\\"MODERATOR_ROLE\\\");\\n    bytes32 public constant WHITELIST_SUPPORTER_ROLE = keccak256(\\\"WHITELIST_SUPPORTER_ROLE\\\");\\n\\n    IPayment public paymentContract;\\n    IWhitelist public whitelistContract;\\n    address public override beneficiary;\\n    address public override coreTeamPool;\\n    uint256 public override startTime;\\n    uint256 public override endTime;\\n\\n    /**\\n     * @notice Constructor initializes the Management contract with beneficiary and core team pool addresses.\\n     * @param _beneficiary The address of the beneficiary.\\n     * @param _coreTeamPool The address of the core team pool.\\n     */\\n    constructor(address _beneficiary, address _coreTeamPool) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(MODERATOR_ROLE, msg.sender);\\n        _setupRole(WHITELIST_SUPPORTER_ROLE, msg.sender);\\n        beneficiary = _beneficiary;\\n        coreTeamPool = _coreTeamPool;\\n    }\\n    modifier onlyModerator() {\\n        require(hasRole(MODERATOR_ROLE, msg.sender), \\\"Management: Only a moderator can take action\\\");\\n        _;\\n    }\\n\\n    modifier onlySupporter() {\\n        require(hasRole(WHITELIST_SUPPORTER_ROLE, msg.sender), \\\"Management: Only a whitelist supporter can take action\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets a new payment contract.\\n     * @param paymentAddress The address of the new payment contract.\\n     */\\n    function setPaymentContract(address paymentAddress) external override onlyModerator {\\n        paymentContract = IPayment(paymentAddress);\\n        emit Events.PaymentContractSet(paymentAddress, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Sets a new whitelist contract.\\n     * @param whitelistAddress The address of the new whitelist contract.\\n     */\\n    function setWhitelistContract(address whitelistAddress) external override onlyModerator {\\n        whitelistContract = IWhitelist(whitelistAddress);\\n        emit Events.WhitelistContractSet(whitelistAddress, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Sets a new beneficiary address.\\n     * @param _beneficiary The address of the new beneficiary.\\n     */\\n    function setBeneficiary(address _beneficiary) external override onlyModerator {\\n        beneficiary = _beneficiary;\\n        emit Events.BeneficiarySet(_beneficiary, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Sets a new core team pool address.\\n     * @param _coreTeamPool The address of the new core team pool.\\n     */\\n    function setCoreTeamPool(address _coreTeamPool) external override onlyModerator {\\n        coreTeamPool = _coreTeamPool;\\n        emit Events.CoreTeamPoolSet(_coreTeamPool, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Sets payment information.\\n     * @param variableName The name of the variable to set.\\n     * @param newValue The new value for the variable.\\n     */\\n    function setPaymentInfo(string memory variableName, uint256 newValue) external override onlyModerator {\\n        bytes32 variableNameHash = keccak256(bytes(variableName));\\n        paymentContract.set(variableNameHash, newValue);\\n        emit Events.PaymentInfoSet(variableNameHash, newValue, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Sets the active time for the sale.\\n     * @param _startTime The start time of the sale.\\n     * @param _endTime The end time of the sale.\\n     */\\n    function setActiveTime(uint256 _startTime, uint256 _endTime) external override onlyModerator {\\n        require(_startTime < _endTime, \\\"Management: Start time must be less than end time\\\");\\n        startTime = _startTime;\\n        endTime = _endTime;\\n        emit Events.ActiveTimeSet(_startTime, _endTime, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Updates whitelist information for multiple users requiring moderator role.\\n     * @param listAddrUser The list of user addresses.\\n     * @param listRole The list of roles to update.\\n     * @param listValueRole The list of values for the roles.\\n     * @param listAddrRef The list of referrer addresses.\\n     * @param listListExtra The list of extra addresses.\\n     */\\n    function updateWhitelistInfo(\\n        address[] memory listAddrUser,\\n        bytes32[] memory listRole,\\n        bool[] memory listValueRole,\\n        address[] memory listAddrRef,\\n        address[][] memory listListExtra) external override onlyModerator {\\n        whitelistContract.updateMultiUserInfo(listAddrUser, listRole, listValueRole, listAddrRef, listListExtra);\\n    }\\n\\n    function _isUpdateReferrer(address user, address referrer) internal view returns (bool) {\\n        (address oldReferrer,,) = whitelistContract.getUserInfo(user, 0x0);\\n        return (oldReferrer != address(0) && oldReferrer != referrer);\\n    }\\n\\n    /**\\n     * @notice Adds whitelist information for multiple users requiring whitelist supporter role.\\n     * @param listAddrUser The list of user addresses.\\n     * @param listRole The list of roles to update.\\n     * @param listValueRole The list of values for the roles.\\n     * @param listAddrRef The list of referrer addresses.\\n     * @param listListExtra The list of extra addresses.\\n     */\\n    function addWhitelistInfo(\\n        address[] memory listAddrUser,\\n        bytes32[] memory listRole,\\n        bool[] memory listValueRole,\\n        address[] memory listAddrRef,\\n        address[][] memory listListExtra) external override onlySupporter {\\n        uint256 lenArray = listAddrUser.length;\\n        for (uint256 i = 0; i < lenArray; i++) {\\n            require(!_isUpdateReferrer(listAddrUser[i], listAddrRef[i]), \\\"Management: Only updateWhitelistInfo can edit the referrer\\\");\\n        }\\n        whitelistContract.updateMultiUserInfo(listAddrUser, listRole, listValueRole, listAddrRef, listListExtra);\\n    }\\n\\n    /**\\n     * @notice Check if the sale is active (between start time and end time).\\n     * @return True if the sale is active, false otherwise.\\n     */\\n    function isActive() external view override returns (bool) {\\n        return (block.timestamp >= startTime) && (block.timestamp <= endTime);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/modules/payment/IPayment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IPayment\\n * @dev Interface for the Payment contract.\\n */\\ninterface IPayment {\\n    /**\\n     * @notice Returns the numerator for the BNB/BIC exchange rate.\\n     * @return The numerator for the BNB/BIC exchange rate.\\n     */\\n    function rateBnbBicNumerator() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the denominator for the BNB/BIC exchange rate.\\n     * @return The denominator for the BNB/BIC exchange rate.\\n     */\\n    function rateBnbBicDenominator() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the number of decimals used for calculations.\\n     * @return The number of decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Returns the address of the management contract.\\n     * @return The address of the management contract.\\n     */\\n    function managementAddress() external view returns (address);\\n\\n    /**\\n     * @notice Returns the BIR burning rate.\\n     * @return The current BIR burning rate.\\n     */\\n    function birBurningRate() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the BNB referral rate.\\n     * @return The current BNB referral rate.\\n     */\\n    function bnbReferralRate() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the BGT referral rate.\\n     * @return The current BGT referral rate.\\n     */\\n    function bgtReferralRate() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the BNB threshold for bonus calculation.\\n     * @return The current BNB threshold for bonus calculation.\\n     */\\n    function bnbThreshold() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the BNB threshold bonus rate.\\n     * @return The current BNB threshold bonus rate.\\n     */\\n    function bnbThresholdBonusRate() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the BIC rate for the core team.\\n     * @return The current BIC rate for the core team.\\n     */\\n    function bicRateForCoreTeam() external view returns (uint256);\\n\\n    /**\\n     * @notice Updates the values of variables in the contract.\\n     * @dev Can only be called by the management contract.\\n     * @param variableName The name of the variable to be updated.\\n     * @param newValue The new value for the variable.\\n     */\\n    function set(bytes32 variableName, uint256 newValue) external;\\n\\n    /**\\n     * @dev Returns the detailed payment information for a transaction involving BNB, BIR, BIC, and BGT.\\n     * @param bnbSpent The amount of BNB spent in the transaction.\\n     * @param birBurn The amount of BIR tokens burned in the transaction.\\n     * @return The payment result.\\n     */\\n    function getPaymentInfo(uint256 bnbSpent, uint256 birBurn) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coreTeamPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_SUPPORTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"listAddrUser\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"listRole\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"listValueRole\",\"type\":\"bool[]\"},{\"internalType\":\"address[]\",\"name\":\"listAddrRef\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"listListExtra\",\"type\":\"address[][]\"}],\"name\":\"addWhitelistInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreTeamPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentContract\",\"outputs\":[{\"internalType\":\"contract IPayment\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setActiveTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coreTeamPool\",\"type\":\"address\"}],\"name\":\"setCoreTeamPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"name\":\"setPaymentContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"variableName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setPaymentInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whitelistAddress\",\"type\":\"address\"}],\"name\":\"setWhitelistContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"listAddrUser\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"listRole\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"listValueRole\",\"type\":\"bool[]\"},{\"internalType\":\"address[]\",\"name\":\"listAddrRef\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"listListExtra\",\"type\":\"address[][]\"}],\"name\":\"updateWhitelistInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistContract\",\"outputs\":[{\"internalType\":\"contract IWhitelist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Management", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000026fd28835377154728d5fc159a0f6681cd11a0060000000000000000000000003dc4bd62602972ba7fd58f10453cadab82e0e426", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}