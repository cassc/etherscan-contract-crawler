{"SourceCode": "/*\r\n    SPDX-License-Identifier: MIT\r\n    A Bankteller Production\r\n    Elephant Money\r\n    Copyright 2023\r\n*/\r\n\r\n/*\r\n    Elephant Money Stampede\r\n\r\n    - A high yield cashhflow engine that earns 0.5% daily on cash (peg adjusted)\r\n    - Immutable contract and yield generation, 100% on-chain\r\n    - Scalable and always open for business\r\n    - Core yield generation is provided by the unstoppable and proven ELEPHANT Treasury buyback program\r\n    - Deposit TRUNK and earn TRUNK rewards\r\n    - Paid out at 0.5% daily of your remaining balance\r\n    - Auto compound rewards on ever deposit \r\n    - Claim at any time down to the second\r\n    - No fees or taxes of any kind\r\n    - Yield is paid by a growing Elephant Treasury\r\n    - 100% of funds are sent to the TRUNK Treasury\r\n    - 1% referral rewards on deposit and yield\r\n    - 200 TRUNK deposit minimum, 1M TRUNK max balance, 2.5M TRUNK max payouts, and 50K TRUNK max daily claim \r\n\r\n    Only at https://elephant.money\r\n\r\n*/\r\n\r\npragma solidity 0.8.18;\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract Context is ReentrancyGuard {\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    bool private _paused;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event RunStatusUpdated(bool indexed paused);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        _paused = false;\r\n        emit RunStatusUpdated(_paused);\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns if paused status\r\n     */\r\n    function isPaused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called when contract is paused\r\n     */\r\n    modifier isRunning() {\r\n        require(\r\n            _paused == false,\r\n            \"Function unavailable because contract is paused\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Pause the contract for functions that check run status\r\n     * Can only be called by the current owner.\r\n     */\r\n    function updateRunStatus(bool paused) public virtual onlyOwner {\r\n        emit RunStatusUpdated(paused);\r\n        _paused = paused;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Whitelist\r\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n * @dev This simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) public whitelist;\r\n\r\n    event WhitelistedAddressAdded(address addr);\r\n    event WhitelistedAddressRemoved(address addr);\r\n\r\n    /**\r\n     * @dev Throws if called by any account that's not whitelisted.\r\n     */\r\n    modifier onlyWhitelisted() {\r\n        require(whitelist[msg.sender], \"not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    function addAddressToWhitelist(address addr)\r\n        public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        if (!whitelist[addr]) {\r\n            whitelist[addr] = true;\r\n            emit WhitelistedAddressAdded(addr);\r\n            success = true;\r\n        }\r\n    }\r\n\r\n    function addAddressesToWhitelist(address[] memory addrs)\r\n        public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            if (addAddressToWhitelist(addrs[i])) {\r\n                success = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeAddressFromWhitelist(address addr)\r\n        public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        if (whitelist[addr]) {\r\n            whitelist[addr] = false;\r\n            emit WhitelistedAddressRemoved(addr);\r\n            success = true;\r\n        }\r\n    }\r\n\r\n    function removeAddressesFromWhitelist(address[] memory addrs)\r\n        public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            if (removeAddressFromWhitelist(addrs[i])) {\r\n                success = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Burns the amount of tokens owned by `msg.sender`.\r\n     */\r\n    function burn(uint256 _value) external;\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface ITRUMPET is IERC20 {\r\n    /** \r\n        Mint TRUMPET Tokens For `recipient` By Depositing TRUNK Into The Contract\r\n            Requirements:\r\n                Approval from the TRUNK prior to purchase\r\n        \r\n        @param numTokens number of TRUNK tokens to mint TRUMPET with\r\n        @param recipient Account to receive minted TRUMPET tokens\r\n        @return tokensMinted number of TRUMPET tokens minted\r\n    */\r\n    function mintWithBacking(uint256 numTokens, address recipient) external returns (uint256);\r\n\r\n    /** \r\n        Burns Sender's TRUMPET Tokens and redeems their value in TRUNK for `recipient`\r\n        @param tokenAmount Number of TRUMPET Tokens To Redeem, Must be greater than 0\r\n        @param recipient Recipient Of TRUNK transfer, Must not be address(0)\r\n    */\r\n    function sellTo(uint256 tokenAmount, address recipient) external returns (uint256);\r\n\r\n} \r\n\r\ninterface ITreasury {\r\n    function withdraw(uint256 tokenAmount) external;\r\n\r\n    function withdrawTo(address _to, uint256 _amount) external;\r\n}\r\n\r\ninterface ISponsorData {\r\n    \r\n    function users(address _user) external view returns (uint256 _pending, uint256 _total);\r\n\r\n    function add(address _user, uint256 _amount) external;\r\n\r\n    function settle(address _user) external;\r\n\r\n    function total_sponsored() external view returns (uint256);\r\n}\r\n\r\ninterface IPcsPeriodicTwapOracle {\r\n\r\n    // performs chained update calculations on any number of pairs\r\n    //whitelisted to avoid DDOS attacks since new pairs will be registered\r\n    function updatePath(address[] memory path) external;\r\n\r\n    //updates all pairs registered \r\n    function updateAll() external returns (uint updatedPairs) ;\r\n    \r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function consultAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\r\n\r\n    // returns the amount out corresponding to the amount in for a given token using the moving average over the time\r\n    // range [now - [windowSize, windowSize - periodSize * 2], now]\r\n    // update must have been called for the bucket corresponding to timestamp `now - windowSize`\r\n    function consult(address tokenIn, uint amountIn, address tokenOut) external view returns (uint amountOut);\r\n\r\n}\r\n\r\n///@dev Simple onchain referral storage\r\ninterface IReferralData {\r\n    \r\n    function updateReferral(address referrer) external ;\r\n\r\n    ///@dev Return the referral of the sender\r\n    function myReferrer() external view returns (address);\r\n\r\n    //@dev Return true if referrer of user is sender\r\n    function isMyReferral(address _user) external view returns (bool);\r\n\r\n    //@dev Return true if user has a referrer\r\n    function hasReferrer(address _user) external view returns (bool);\r\n\r\n    ///@dev Return the referral of a participant\r\n    function referrerOf(address participant) external view returns (address) ;\r\n\r\n    ///@dev Return the referral count of a participant\r\n    function referralCountOf(address _user) external view returns (uint256) ;\r\n}\r\n\r\ninterface IRaffle {\r\n    \r\n    function add(address participant, uint256 amount) external;\r\n\r\n}\r\n\r\ninterface IElephantReserve  {\r\n    \r\n    \r\n    //Mint backed tokens using collateral tokens\r\n    function mint(uint256 collateralAmount) external returns (uint256 backedAmount, uint256 feeAmount); \r\n\r\n    //Estimate is a simple top level estimate that factors the processingFee\r\n    function estimateMint(uint256 collateralAmount) external view returns (uint256 backedAmount, uint256 feeAmount); \r\n    \r\n    //Redeem backed token for collateral and core tokens based on the collateralFactor and collateralizationRatio of the treasuries\r\n    function redeem(uint256 backedAmount) external returns (uint collateralAmount, uint coreAmount, uint adjustedCoreAmount, uint feeAmount); \r\n    \r\n    //Redeems a credit from a whitelisted consumer.  Funds will be pulled from the core treasury\r\n    function redeemCredit(address destination, uint256 creditAmount)  external returns (uint coreAmount, uint adjustedCoreAmount, uint coreAdjustedCreditAmount, uint feeAmount);\r\n    \r\n    //Only whitelisted\r\n    function redeemCreditAsBacked(address destination, uint creditAmount) external returns (uint backedAmount, uint feeAmount); \r\n    \r\n    //Estimates the redemption and uses collateralizationRatio to scale variable core component\r\n    function estimateRedemption(uint256 backedAmount) external view returns (uint collateralAmount, uint coreAmount, uint adjustedCoreAmount, uint coreAdjustedCreditAmount, uint feeAmount, uint totalCollateralValue); \r\n    \r\n    // This function is sensitive to slippage and that isn't a bad thing...\r\n    // Don't dump your core or backed tokens... This is a community project\r\n    function estimateCollateralToCore(uint collateralAmount) external view returns (uint wethAmount, uint coreAmount);\r\n    \r\n    // This function is sensitive to slippage and that isn't a bad thing...\r\n    // Estimates the amount of  core tokens getting transfered to USD collateral tokens\r\n    function estimateCoreToCollateral(uint coreAmount) external view returns (uint wethAmount, uint collateralAmount); \r\n    \r\n    //Returns the ratio of core over collateralization to proportional hard collateral in the treasuries\r\n    function collateralizationRatio() external view returns (uint256 cratio); \r\n\r\n    //Redeem a credit for the rewardpools.  Being sensitive to slippage is OK even though we are pulling from the pools\r\n    function redeemCollateralCreditToWETH(uint256 collateralAmount)  external   returns (uint wethAmount);  \r\n \r\n}\r\n\r\nstruct User {\r\n    \r\n    //Deposit Accounting\r\n    uint256 deposits;\r\n    uint256 deposit_time;\r\n    uint256 payouts;\r\n\r\n}\r\n\r\n\r\ninterface IFlowData {\r\n\r\n    function users(address _user) external view returns (User memory user);\r\n}\r\n\r\nstruct Sponsorship {\r\n\r\n    uint256 pending;\r\n    uint256 total;\r\n\r\n}\r\n\r\n//@dev Tracks summary information for users across all farms\r\nstruct StampedeUser {\r\n    bool exists; //has the user joined\r\n    uint deposits; //total inbound deposits\r\n    uint compound_deposits; //compound deposit; not fresh capital \r\n    uint current_balance; //current balance\r\n    uint payouts;  //total yield payouts across all farms\r\n    uint rewards; //partner rewards\r\n    uint last_time; //last interaction\r\n}\r\n\r\nstruct StampedeGlobals {\r\n    uint256  total_users;\r\n    uint256  total_deposited;\r\n    uint256  total_compound_deposited;\r\n    uint256  total_claimed;\r\n    uint256  total_rewards;\r\n    uint256  total_txs;\r\n    uint256  current_balance;\r\n}\r\n\r\n//@dev Immutable Vault that stores ledger for Elephant Money Futures\r\ncontract StampedeVault is Whitelist {\r\n    mapping(address => StampedeUser) private users; //Asset -> User\r\n\r\n    StampedeGlobals private globals;\r\n\r\n    constructor() Ownable() {}\r\n\r\n\r\n    //@dev Get User info\r\n    function getUser(address _user) external view returns (StampedeUser memory) {\r\n        return users[_user];\r\n    }\r\n\r\n    //@dev Get FuturesGlobal info\r\n    function getGlobals() external view returns (StampedeGlobals memory) {\r\n        return globals;\r\n    }\r\n\r\n    //@dev commit User Info\r\n    function commitUser(address _user, StampedeUser memory _user_data)  onlyWhitelisted isRunning external {\r\n\r\n        //update user\r\n        users[_user].exists = _user_data.exists; \r\n        users[_user].deposits = _user_data.deposits; \r\n        users[_user].compound_deposits = _user_data.compound_deposits;  \r\n        users[_user].current_balance = _user_data.current_balance; \r\n        users[_user].payouts = _user_data.payouts;  \r\n        users[_user].rewards = _user_data.rewards; \r\n        users[_user].last_time = _user_data.last_time;\r\n\r\n    }\r\n\r\n    //@dev commit Globals Info\r\n    function commitGlobals(StampedeGlobals memory _globals) onlyWhitelisted isRunning external {\r\n\r\n        //update globals\r\n        globals.total_users = _globals.total_users;\r\n        globals.total_deposited = _globals.total_deposited;\r\n        globals.total_compound_deposited = _globals.total_compound_deposited;\r\n        globals.total_claimed = _globals.total_claimed;\r\n        globals.total_rewards = _globals.total_rewards;\r\n        globals.total_txs = _globals.total_txs;\r\n        globals.current_balance = _globals.current_balance ;\r\n        \r\n    }\r\n\r\n}\r\n\r\n//@dev  Business logic for Elephan Money Futures\r\n//Engine can be swapped out if upgrades are needed\r\n//Only yield infrastructure and vault can be updated\r\ncontract StampedeEngine is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    AddressRegistry private registry;\r\n\r\n    //Financial Model\r\n    uint256 public constant referenceApr = 182.5e18; //0.5% daily\r\n    uint256 public constant maxBalance = 1000000e18; //1M\r\n    uint256 public constant minimumDeposit = 200e18; //200+ deposits; will compound available rewards\r\n    uint256 public constant maxAvailable = 50000e18; //50K max claim daily, 10 days missed claims \r\n    uint256 public constant maxPayouts = (maxBalance * 5e18) / 2e18; //2.5M\r\n\r\n    \r\n    //Immutable long term network contracts\r\n    ITreasury public  immutable backedTreasury;\r\n    IERC20 public immutable backedToken;\r\n    ITRUMPET internal trumpet;\r\n    \r\n    //Updatable components\r\n    IFlowData public legacyData;\r\n    \r\n    IPcsPeriodicTwapOracle public oracle;\r\n    StampedeVault public vault; \r\n\r\n    //events\r\n    event Migrate(address indexed user, uint current_balance);\r\n    event TransferToTrumpet(address indexed user, uint256 locked_value, uint trumpet);\r\n    event UpdateVault(address prev_vault, address vault);\r\n    event UpdateOracle(address indexed addr);\r\n    event UpdateFlowData(address indexed addr);\r\n\r\n    //@dev Creates a FuturesEngine that contains upgradeable business logic for Futures Vault\r\n    constructor() Ownable() {\r\n\r\n         //init reg\r\n        registry = new AddressRegistry();\r\n\r\n        /* mythx-disable SWC-113 */\r\n\r\n        //setup the core tokens\r\n        backedToken = IERC20(registry.backedAddress());\r\n\r\n        //treasury setup\r\n        backedTreasury = ITreasury(registry.backedTreasuryAddress());\r\n\r\n        trumpet = ITRUMPET(registry.trumpetAddress());\r\n\r\n        oracle = IPcsPeriodicTwapOracle(registry.oracleAddress());\r\n\r\n        vault = StampedeVault(registry.vaultAddress());\r\n\r\n        legacyData = IFlowData(registry.flowDataAddress());\r\n\r\n        /* mythx-enable */\r\n\r\n    }\r\n\r\n    \r\n    ///  Views  ///\r\n\r\n    //@dev Returns if an address is eligible to migrate from v5 to v6\r\n    function eligibleForMigration(address _user) public view returns(bool eligible, uint deposits, uint payouts, uint last_time) {\r\n        \r\n        User memory _legacyUser = legacyData.users(_user);\r\n        StampedeUser memory _stampUser = vault.getUser(_user);\r\n\r\n        //if there is v5 data and no new account its eligible\r\n        if (_legacyUser.deposits > 0 && _stampUser.exists == false) {\r\n            eligible = true;\r\n            last_time = _legacyUser.deposit_time; //allow user to continue to accumulate unclaimed divs\r\n\r\n            //adjust net tracking of v5\r\n            deposits = _legacyUser.deposits * 4 / 3;\r\n            payouts = _legacyUser.payouts * 3 / 4;\r\n            \r\n\r\n        }\r\n\r\n    }\r\n\r\n    //@dev Get User info\r\n    function getUser(address _user)\r\n        external\r\n        view\r\n        returns (StampedeUser memory)\r\n    {\r\n        return vault.getUser(_user);\r\n    }\r\n\r\n    //@dev Get contract snapshot\r\n    function getInfo()\r\n        external\r\n        view\r\n        returns (\r\n            StampedeGlobals memory\r\n        )\r\n    {\r\n        return vault.getGlobals();\r\n    }\r\n\r\n    ////  User Functions ////\r\n\r\n    //@dev migrate account from v5 to v6\r\n    function migrate() isRunning nonReentrant external {\r\n        address _user = msg.sender;\r\n\r\n        StampedeUser memory userData = vault.getUser(_user);\r\n        StampedeGlobals memory globalsData = vault.getGlobals();\r\n\r\n        (bool eligible, uint deposits, uint payouts, uint last_time)  = eligibleForMigration(_user);\r\n\r\n        require(eligible, \"account is not eligible to migrate\");\r\n\r\n        uint balance_surplus;\r\n\r\n        //handle deposits that are more than the max balance\r\n        if (deposits > maxBalance){\r\n            balance_surplus = deposits.safeSub(maxBalance);\r\n            payouts = payouts.safeSub(balance_surplus);\r\n        }\r\n\r\n        //migrate user; compound forgiveness for everyone in v5, no tax impact\r\n        userData.exists = true;\r\n        userData.deposits = deposits;\r\n        userData.current_balance = maxBalance.min(deposits);\r\n        userData.payouts = payouts;\r\n        userData.last_time = last_time;\r\n\r\n        //adjust globals\r\n        globalsData.total_users += 1;\r\n        globalsData.total_deposited += userData.deposits;\r\n        globalsData.total_claimed += userData.payouts;\r\n        globalsData.current_balance += userData.current_balance;\r\n        globalsData.total_txs += 1;\r\n\r\n        //commit updates\r\n        vault.commitUser(_user, userData);\r\n        vault.commitGlobals(globalsData);\r\n\r\n        emit Migrate(_user, userData.current_balance);\r\n    }\r\n\r\n    //@dev Returns tax bracket and adjusted amount based on the bracket \r\n    function available (address _user) public view returns (uint256 _limiterRate, uint256 _adjustedAmount) {\r\n\r\n        //Load data\r\n        StampedeUser memory userData = vault.getUser(_user);\r\n\r\n        //calculate gross available\r\n        uint256 share;\r\n\r\n        if(userData.current_balance > 0) {\r\n            //Using 1e18 we capture all significant digits when calculating available divs\r\n            share = userData.current_balance //payout is asymptotic and uses the current balance\r\n                    * referenceApr //convert to daily apr\r\n                    / (365 * 100e18)\r\n                    / 24 hours; //divide the profit by payout rate and seconds in the day;\r\n            _adjustedAmount = share * block.timestamp.safeSub(userData.last_time);\r\n        }\r\n\r\n        //apply compound rate limiter\r\n        uint256 _comp_surplus = userData.compound_deposits.safeSub(userData.deposits);\r\n\r\n        if (_comp_surplus < 50000e18){\r\n            _limiterRate = 0;\r\n        } else if ( 50000e18 <= _comp_surplus && _comp_surplus < 250000e18 ){\r\n            _limiterRate = 10;\r\n        } else if ( 250000e18 <= _comp_surplus && _comp_surplus < 500000e18 ){\r\n            _limiterRate = 15;\r\n        } else if ( 500000e18 <= _comp_surplus && _comp_surplus < 750000e18 ){\r\n            _limiterRate = 25;\r\n        } else if ( 750000e18 <= _comp_surplus && _comp_surplus < 1000000e18 ){\r\n            _limiterRate = 35;\r\n        } else if (_comp_surplus >= 1000000e18 ){\r\n            _limiterRate = 50;\r\n        }\r\n\r\n        _adjustedAmount = _adjustedAmount * (100 - _limiterRate) / 100;\r\n\r\n        //final scalers and caps\r\n        _adjustedAmount = scaleByPeg(_adjustedAmount); //scale available if we are off peg \r\n        _adjustedAmount = maxAvailable.min(_adjustedAmount); //minimize red candles\r\n\r\n\r\n        // payout greater than the balance just pay the balance\r\n        if(_adjustedAmount > userData.current_balance) {\r\n            _adjustedAmount = userData.current_balance;\r\n        }\r\n\r\n    }\r\n\r\n    //@dev Transfer account to another wallet address\r\n    function transferToTrumpet() nonReentrant external  {\r\n\r\n        address _user = msg.sender;\r\n\r\n        StampedeUser memory userData = vault.getUser(_user);\r\n        StampedeGlobals memory globalsData = vault.getGlobals();\r\n\r\n        (bool eligible,,,) = eligibleForMigration(_user);\r\n\r\n        require(eligible == false, \"account must be migrated\");\r\n\r\n        //Only the owner with balance can migrate to TRUMPET\r\n        require(userData.exists  && userData.current_balance > 0, \"user must exists and have a balance\");\r\n        \r\n        //TVL with claim forgiveness\r\n         (, uint256 _available) = available(_user);\r\n        uint tvl = userData.current_balance + _available;\r\n\r\n        //Mint TRUNK and then create TRUMPET\r\n        backedToken.mint(address(this), tvl);\r\n\r\n        //approve trumpet to transfer tokens\r\n        backedToken.approve(address(trumpet), tvl);\r\n\r\n        //mint & transfer\r\n        uint trumpetAmount = trumpet.mintWithBacking(tvl, _user);\r\n\r\n        //Zero out old account\r\n        userData.exists = true;  //must remain true to avoid migration double spend\r\n        userData.deposits = 0;\r\n        userData.current_balance = 0;\r\n        userData.compound_deposits = 0;\r\n        userData.payouts = 0;\r\n        userData.rewards = 0;\r\n        userData.last_time = 0;\r\n\r\n        //house keeping\r\n        globalsData.total_txs += 1;\r\n\r\n        //commit\r\n        vault.commitUser(_user, userData);\r\n        vault.commitGlobals(globalsData);\r\n\r\n        //log\r\n        emit TransferToTrumpet(_user, tvl, trumpetAmount);\r\n\r\n    }\r\n\r\n    //@dev Scales an amount by how close backed token is to peg\r\n    function scaleByPeg(uint amount) public view returns (uint scaledAmount) {\r\n        address[] memory path = new address[](2);\r\n        uint[] memory amounts = new uint[](2);\r\n\r\n        path[0] = address(backedToken);\r\n        path[1] = registry.collateralAddress();\r\n\r\n        amounts = oracle.consultAmountsOut(amount, path);\r\n\r\n        scaledAmount = amount.min(amounts[1]); //we don't reward over peg\r\n\r\n    }\r\n\r\n}\r\n\r\n//@dev Simple onchain oracle for important Elephant Money smart contracts\r\ncontract AddressRegistry {\r\n    address public constant coreAddress =\r\n        address(0xE283D0e3B8c102BAdF5E8166B73E02D96d92F688); //ELEPHANT\r\n    address public constant coreTreasuryAddress =\r\n        address(0xAF0980A0f52954777C491166E7F40DB2B6fBb4Fc); //ELEPHANT Treasury\r\n    address public constant collateralAddress =\r\n        address(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56); //BUSD\r\n    address public constant collateralTreasuryAddress =\r\n        address(0xCb5a02BB3a38e92E591d323d6824586608cE8cE4); //BUSD Treasury\r\n    address public constant collateralRedemptionAddress =\r\n        address(0xD3B4fB63e249a727b9976864B28184b85aBc6fDf); //BUSD Redemption Pool\r\n    address public constant collateralBufferAddress =\r\n        address(0xd9dE89efB084FfF7900Eac23F2A991894500Ec3E); //BUSD Buffer Pool\r\n    address public constant backedAddress =\r\n        address(0xdd325C38b12903B727D16961e61333f4871A70E0); //TRUNK Stable coin\r\n    address public constant backedTreasuryAddress =\r\n        address(0xaCEf13009D7E5701798a0D2c7cc7E07f6937bfDd); //TRUNK Treasury\r\n    address public constant backedLPAddress =\r\n        address(0xf15A72B15fC4CAeD6FaDB1ba7347f6CCD1E0Aede); //TRUNK/BUSD LP\r\n    address public constant routerAddress =\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address public constant trumpetAddress = \r\n        address(0x574a691D05EeE825299024b2dE584B208647e073); //TRUMPET\r\n    address public constant oracleAddress = \r\n        address(0xb9394B2dD11115721D93A6f05215f81c54893861); //Oracle\r\n    address public constant vaultAddress = \r\n        address(0x6b50811Cd8A084AB1C99C6003ba6df0EDA74C181);\r\n    address public constant flowDataAddress = \r\n        address(0x4C64719E524383662232FDb50dfdaDEFB15c09D9);\r\n    //PCS Factory - 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /* @dev Subtracts two numbers, else returns zero */\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b > a) {\r\n            return 0;\r\n        } else {\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n}\r\n\r\nlibrary TransferHelper {\r\n    /// @notice Transfers tokens from the targeted address to the given destination\r\n    /// @notice Errors with 'STF' if transfer fails\r\n    /// @param token The contract address of the token to be transferred\r\n    /// @param from The originating address from which the tokens will be transferred\r\n    /// @param to The destination address of the transfer\r\n    /// @param value The amount to be transferred\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory notes\r\n    ) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), string.concat('STF', notes));\r\n    }\r\n\r\n    /// @notice Transfers tokens from msg.sender to a recipient\r\n    /// @dev Errors with ST if transfer fails\r\n    /// @param token The contract address of the token which will be transferred\r\n    /// @param to The recipient of the transfer\r\n    /// @param value The value of the transfer\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value,\r\n        string memory notes\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), string.concat('ST', notes));\r\n    }\r\n\r\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\r\n    /// @dev Errors with 'SA' if transfer fails\r\n    /// @param token The contract address of the token to be approved\r\n    /// @param to The target of the approval\r\n    /// @param value The amount of the given token the target will be allowed to spend\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value,\r\n        string memory notes\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), string.concat('SA', notes));\r\n    }\r\n\r\n    /// @notice Transfers ETH to the recipient address\r\n    /// @dev Fails with `STE`\r\n    /// @param to The destination of the transfer\r\n    /// @param value The value to be transferred\r\n    function safeTransferETH(address to, uint256 value, string memory notes) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, string.concat('STE', notes));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"current_balance\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"RunStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"locked_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trumpet\",\"type\":\"uint256\"}],\"name\":\"TransferToTrumpet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"UpdateFlowData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"UpdateOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prev_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"UpdateVault\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_limiterRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adjustedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backedTreasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"eligibleForMigration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"eligible\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total_users\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_compound_deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_txs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"current_balance\",\"type\":\"uint256\"}],\"internalType\":\"struct StampedeGlobals\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compound_deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"current_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_time\",\"type\":\"uint256\"}],\"internalType\":\"struct StampedeUser\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legacyData\",\"outputs\":[{\"internalType\":\"contract IFlowData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPayouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IPcsPeriodicTwapOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referenceApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"scaleByPeg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferToTrumpet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"updateRunStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract StampedeVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StampedeEngine", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cac5be8439a3677b3fd9ef33493b01ab695ea1c58e1afcf12166a7ba1312c74f"}