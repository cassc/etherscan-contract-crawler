{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n   * @dev Multiplies two unsigned integers, reverts on overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath#mul: OVERFLOW\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, \"SafeMath#div: DIVISION_BY_ZERO\");\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath#sub: UNDERFLOW\");\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two unsigned integers, reverts on overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath#add: OVERFLOW\");\r\n\r\n    return c; \r\n  }\r\n\r\n  /**\r\n   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n   * reverts when dividing by zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"SafeMath#mod: DIVISION_BY_ZERO\");\r\n    return a % b;\r\n  }\r\n\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract SingleSidedStakingDNXC is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    struct StakerInfo {\r\n        uint256 amount;\r\n        uint256 startStakeTime;\r\n        uint256 dnxA;\r\n        uint256 dnxB;\r\n        uint256 dnxC;\r\n    }\r\n\r\n    uint256 public stakingStart;\r\n    uint256 public stakingEnd;\r\n    uint256 public stakingClosed;\r\n    \r\n    uint256 public maximumStakedDNXC;       \r\n    uint256 public currentStakedDNXC;\r\n    uint256 public minimumStake;\r\n\r\n    IERC20 dnxcToken;                    // token being staked\r\n    \r\n    mapping(address => StakerInfo) public stakerInfo;\r\n    uint256 internal fee;\r\n    bool paused;\r\n    bool emergencyUnstake;\r\n    \r\n    constructor(uint256 _minimumStake, uint256 _maximumStakedDNXC, uint256 _stakingStart, uint256 _stakingClosed, uint256 _stakingEnd, IERC20 _dnxcToken) \r\n     {\r\n        \r\n        minimumStake = _minimumStake;\r\n        maximumStakedDNXC = _maximumStakedDNXC;\r\n        stakingStart = _stakingStart;\r\n        stakingClosed = _stakingClosed;\r\n        stakingEnd = _stakingEnd;\r\n        paused = true;\r\n        \r\n        dnxcToken = _dnxcToken;\r\n    }\r\n    \r\n    function changePause(bool _pause) onlyOwner public {\r\n        paused = _pause;\r\n    }\r\n    \r\n    function changeEmergency(bool _emergencyUnstake) onlyOwner public {\r\n        emergencyUnstake = _emergencyUnstake;\r\n    }\r\n    \r\n    function changeEndTime(uint256 endTime) public onlyOwner {\r\n      stakingEnd = endTime;\r\n    }\r\n    function changeCloseTime(uint256 closeTime) public onlyOwner {\r\n      stakingClosed = closeTime;\r\n    }\r\n    function changeStartTime(uint256 startTime) public onlyOwner {\r\n      stakingStart = startTime;\r\n    }\r\n\r\n    function changeDNX(uint256 _dnxA, uint256 _dnxB, uint256 _dnxC) public {\r\n        \r\n        StakerInfo storage user = stakerInfo[msg.sender];\r\n        require (user.amount > 0, \"E10\");\r\n\r\n        user.dnxA = _dnxA;\r\n        user.dnxB = _dnxB;\r\n        user.dnxC = _dnxC;\r\n    }\r\n      \r\n    function stake(uint256 _amount, uint256 _dnxA, uint256 _dnxB, uint256 _dnxC) public {\r\n        require (paused == false, \"E09\");\r\n        require (block.timestamp >= stakingStart, \"E07\");\r\n        require (block.timestamp <= stakingClosed, \"E08\");\r\n        require (currentStakedDNXC.add(_amount) <= maximumStakedDNXC, \"E09\");\r\n        \r\n        StakerInfo storage user = stakerInfo[msg.sender];\r\n        require (user.amount.add(_amount) >= minimumStake, \"E01\");\r\n        require (dnxcToken.transferFrom(msg.sender, address(this), _amount), \"E02\");\r\n        \r\n        currentStakedDNXC = currentStakedDNXC.add(_amount);\r\n        \r\n        if (user.amount == 0) {\r\n            user.startStakeTime = block.timestamp;\r\n        }\r\n        \r\n        user.amount = user.amount.add(_amount);\r\n        user.dnxA = _dnxA;\r\n        user.dnxB = _dnxB;\r\n        user.dnxC = _dnxC;\r\n    }\r\n    \r\n    function unstake() public {\r\n        \r\n        require (emergencyUnstake || block.timestamp >= stakingEnd || block.timestamp <= stakingClosed, \"E08\");\r\n        StakerInfo storage user = stakerInfo[msg.sender];\r\n        \r\n        dnxcToken.transfer(\r\n            msg.sender,\r\n            user.amount\r\n        );\r\n        \r\n        currentStakedDNXC = currentStakedDNXC.sub(user.amount);\r\n        user.amount = 0;\r\n        user.dnxA = 0;\r\n        user.dnxB = 0;\r\n        user.dnxC = 0;\r\n    }\r\n    \r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximumStakedDNXC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingClosed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingEnd\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_dnxcToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"closeTime\",\"type\":\"uint256\"}],\"name\":\"changeCloseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dnxA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dnxB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dnxC\",\"type\":\"uint256\"}],\"name\":\"changeDNX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_emergencyUnstake\",\"type\":\"bool\"}],\"name\":\"changeEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"changeEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"changePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"changeStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStakedDNXC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumStakedDNXC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dnxA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dnxB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dnxC\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startStakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dnxA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dnxB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dnxC\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingClosed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SingleSidedStakingDNXC", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000000000000000000000023bbf4b14c2e7ff800000000000000000000000000000000000000000000000000000000000006244a8b000000000000000000000000000000000000000000000000000000000625f06b00000000000000000000000000000000000000000000000000000000062d5adb00000000000000000000000003c1748d647e6a56b37b66fcd2b5626d0461d3aa0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://44314eb280bf92a2598e42031c907f57ab149b2f63ceda7d145d8f7ca74b2b6b"}