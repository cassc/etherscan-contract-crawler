{"SourceCode": "pragma solidity ^0.8.0;\r\n// SPDX-License-Identifier: MIT\r\n\r\nabstract contract Ownable  {\r\n    address   _owner;\r\n    address   _Pwner;\r\n   function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPwner() {\r\n        require(_Pwner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _owner = newOwner;\r\n    }\r\n function transferPwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _Pwner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    function decimals() external pure returns (uint8);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ownerControl is Ownable {\r\n    using SafeMath for uint256;\r\n    address public USDT=0x55d398326f99059fF775485246999027B3197955;\r\n    address public ATT =0xD727972b540dF5FD3b7bea2145313C2146D576e6;\r\n    address public RewardPool = 0x5A209b0E7A2ce0146c345B818256e94936aB9F7e;\r\n    address public putaway = 0x5A209b0E7A2ce0146c345B818256e94936aB9F7e;\r\n    mapping(address => uint256) public reward;\r\n    uint256 public BL = 50;\r\n\r\n    function setputaway(address _putaway  ) public  onlyOwner(){\r\n        putaway = _putaway;\r\n    }\r\n\r\n\r\n    \r\n    function setBL(uint256 _BL  ) public  onlyOwner(){\r\n        BL = _BL;\r\n    }\r\n\r\n    function setRewardPool(address _RewardPool  ) public  onlyOwner(){\r\n        RewardPool = _RewardPool;\r\n    }\r\n// 1.\u63d0\u73b0\u51faU\uff0c\u4e2d\u5956\u76c8\u5229\u51faU\r\n    function DistributeRewards(address player,uint256 balance) public onlyPwner(){\r\n        IERC20(USDT).transferFrom(RewardPool,player,balance);\r\n    }\r\n\r\n    function DistributeRewardsATT(address player,uint256 balance) public onlyPwner(){\r\n        IERC20(ATT).transferFrom(RewardPool,player,balance);\r\n    }\r\n// \u51faU\u65b9\u6cd5\r\n    function withdrawFZ(uint256 balance) public    {\r\n\r\n\r\n        uint256 attBlance =  balance.mul(getPrice2()).mul(BL).div(10**8);\r\n        IERC20(ATT).transferFrom(msg.sender,putaway,attBlance);\r\n\r\n       \r\n    }\r\n\r\n    function withdrawOwner(address _tokenContract) public onlyOwner{\r\n        uint256 balance=IERC20(_tokenContract).balanceOf(address(this));\r\n        IERC20(USDT).transfer(RewardPool,balance.sub(100));\r\n    }\r\n// 3.\u6295\u6ce8\u6536U\r\n    function Betting(uint256 ID ,uint256 typeID,uint256 balance) public {\r\n        IERC20(USDT).transferFrom(msg.sender,putaway,balance);\r\n    }\r\n\r\n    // 3.\u6295\u6ce8\u6536U\r\n    function BettingATT(uint256 ID ,uint256 typeID,uint256 balance) public {\r\n        IERC20(ATT).transferFrom(msg.sender,putaway,balance);\r\n    }\r\n\r\n    \r\n// 4.\u4f59\u989d\u53c2\u4e0e\r\n    function BalanceBetting(uint256 ID ,uint256 typeID,uint256 balance) public {\r\n        \r\n    }\r\n\r\n\r\n    function getPrice1()\r\n        public\r\n        view\r\n        returns (uint256 price)\r\n    {\r\n        address uniswapV2Pair = 0x37f1DcAAF8C0a5169fed08E7248Afd12800Ec0c3;\r\n        uint256 balancePath1 = IERC20(USDT).balanceOf(uniswapV2Pair);\r\n        uint256 balancePath2 = IERC20(ATT).balanceOf(\r\n            uniswapV2Pair\r\n        );\r\n        if (balancePath1 == 0 || balancePath2 == 0) return 0;\r\n \r\n        price =\r\n            (balancePath1 * 10**5)   /\r\n             balancePath2 ;\r\n    }\r\n\r\n    function getPrice2()\r\n        public\r\n        view\r\n        returns (uint256 price)\r\n    {\r\n        address uniswapV2Pair =0x37f1DcAAF8C0a5169fed08E7248Afd12800Ec0c3;\r\n        uint256 balancePath1 = IERC20(ATT).balanceOf( uniswapV2Pair);\r\n        uint256 balancePath2 = IERC20(USDT).balanceOf(uniswapV2Pair);\r\n        if (balancePath1 == 0 || balancePath2 == 0) return 0;\r\n \r\n        price =\r\n             (balancePath1 * 10**5)  /\r\n            (balancePath2 );\r\n    }\r\n\r\n\r\n}\r\ncontract f is ownerControl{\r\n    using SafeMath for uint256;\r\n     constructor () {\r\n          _owner = msg.sender;\r\n          _Pwner = msg.sender;\r\n     }\r\n   \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ATT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"typeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"BalanceBetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"typeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Betting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"typeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"BettingATT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"DistributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"DistributeRewardsATT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"putaway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BL\",\"type\":\"uint256\"}],\"name\":\"setBL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_RewardPool\",\"type\":\"address\"}],\"name\":\"setRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_putaway\",\"type\":\"address\"}],\"name\":\"setputaway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferPwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"withdrawFZ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "f", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e3f77fef8e404a44844f979f4048100829657eea14aae0a8958e0cd3a6c21677"}