{"SourceCode": "// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/INarwhalTradingRoute.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * @title Warden Trading Route\r\n * @dev The Warden trading route interface has an standard functions and event\r\n * for other smart contract to implement to join Warden Swap as Market Maker.\r\n */\r\ninterface INarwhalTradingRoute {\r\n    /**\r\n    * @dev when new trade occure (and success), this event will be boardcast.\r\n    * @param _src Source token\r\n    * @param _srcAmount amount of source tokens\r\n    * @param _dest   Destination token\r\n    * @return _destAmount: amount of actual destination tokens\r\n    */\r\n    event Trade(\r\n        IERC20 indexed _src,\r\n        uint256 _srcAmount,\r\n        IERC20 indexed _dest,\r\n        uint256 _destAmount\r\n    );\r\n\r\n    /**\r\n    * @notice use token address 0xeee...eee for ether\r\n    * @dev makes a trade between src and dest token\r\n    * @param _src Source token\r\n    * @param _dest   Destination token\r\n    * @param _srcAmount amount of source tokens\r\n    * @return _destAmount: amount of actual destination tokens\r\n    */\r\n    function trade(\r\n        IERC20 _src,\r\n        IERC20 _dest,\r\n        uint256 _srcAmount\r\n    )\r\n        external\r\n        payable\r\n        returns(uint256 _destAmount);\r\n\r\n    /**\r\n    * @dev provide destinationm token amount for given source amount\r\n    * @param _src Source token\r\n    * @param _dest Destination token\r\n    * @param _srcAmount Amount of source tokens\r\n    * @return _destAmount: amount of expected destination tokens\r\n    */\r\n    function getDestinationReturnAmount(\r\n        IERC20 _src,\r\n        IERC20 _dest,\r\n        uint256 _srcAmount\r\n    )\r\n        external\r\n        view\r\n        returns(uint256 _destAmount);\r\n\r\n    /**\r\n    * @dev provide source token amount for given destination amount\r\n    * @param _src Source token\r\n    * @param _dest Destination token\r\n    * @param _destAmount Amount of destination tokens\r\n    * @return _srcAmount: amount of expected source tokens\r\n    */\r\n    // function getSourceReturnAmount(\r\n    //     IERC20 _src,\r\n    //     IERC20 _dest,\r\n    //     uint256 _destAmount\r\n    // )\r\n    //     external\r\n    //     view\r\n    //     returns(uint256 _srcAmount);\r\n}\r\n\r\n// File: contracts/RoutingManagement.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\ncontract RoutingManagement is Ownable {\r\n    /**\r\n    * @dev Struct of trading route\r\n    * @param name Name of trading route.\r\n    * @param enable The flag of trading route to check is trading route enable.\r\n    * @param route The address of trading route.\r\n    */\r\n    struct Route {\r\n      string name;\r\n      bool enable;\r\n      INarwhalTradingRoute route;\r\n    }\r\n\r\n    event AddedTradingRoute(\r\n        address indexed addedBy,\r\n        string name,\r\n        INarwhalTradingRoute indexed routingAddress,\r\n        uint256 indexed index\r\n    );\r\n\r\n    event EnabledTradingRoute(\r\n        address indexed enabledBy,\r\n        string name,\r\n        INarwhalTradingRoute indexed routingAddress,\r\n        uint256 indexed index\r\n    );\r\n\r\n    event DisabledTradingRoute(\r\n        address indexed disabledBy,\r\n        string name,\r\n        INarwhalTradingRoute indexed routingAddress,\r\n        uint256 indexed index\r\n    );\r\n\r\n    Route[] public tradingRoutes; // list of trading routes\r\n\r\n    modifier onlyTradingRouteEnabled(uint _index) {\r\n        require(tradingRoutes[_index].enable == true, \"This trading route is disabled\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTradingRouteDisabled(uint _index) {\r\n        require(tradingRoutes[_index].enable == false, \"This trading route is enabled\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Function for adding new trading route\r\n    * @param _name Name of trading route.\r\n    * @param _routingAddress The address of trading route.\r\n    * @return length of trading routes.\r\n    */\r\n    function addTradingRoute(\r\n        string memory _name,\r\n        INarwhalTradingRoute _routingAddress\r\n    )\r\n      public\r\n      onlyOwner\r\n    {\r\n        tradingRoutes.push(Route({\r\n            name: _name,\r\n            enable: true,\r\n            route: _routingAddress\r\n        }));\r\n        emit AddedTradingRoute(msg.sender, _name, _routingAddress, tradingRoutes.length - 1);\r\n    }\r\n\r\n    /**\r\n    * @dev Function for disable trading route by index\r\n    * @param _index The uint256 of trading route index.\r\n    * @return length of trading routes.\r\n    */\r\n    function disableTradingRoute(\r\n        uint256 _index\r\n    )\r\n        public\r\n        onlyOwner\r\n        onlyTradingRouteEnabled(_index)\r\n    {\r\n        tradingRoutes[_index].enable = false;\r\n        emit DisabledTradingRoute(msg.sender, tradingRoutes[_index].name, tradingRoutes[_index].route, _index);\r\n    }\r\n\r\n    /**\r\n    * @dev Function for enale trading route by index\r\n    * @param _index The uint256 of trading route index.\r\n    * @return length of trading routes.\r\n    */\r\n    function enableTradingRoute(\r\n        uint256 _index\r\n    )\r\n        public\r\n        onlyOwner\r\n        onlyTradingRouteDisabled(_index)\r\n    {\r\n        tradingRoutes[_index].enable = true;\r\n        emit EnabledTradingRoute(msg.sender, tradingRoutes[_index].name, tradingRoutes[_index].route, _index);\r\n    }\r\n\r\n    /**\r\n    * @dev Function for get amount of trading route\r\n    * @return Amount of trading routes.\r\n    */\r\n    function allRoutesLength() public view returns (uint256) {\r\n        return tradingRoutes.length;\r\n    }\r\n\r\n    /**\r\n    * @dev Function for get enable status of trading route\r\n    * @param _index The uint256 of trading route index.\r\n    * @return enable status of trading route.\r\n    */\r\n    function isTradingRouteEnabled(uint256 _index) public view returns (bool) {\r\n        return tradingRoutes[_index].enable;\r\n    }\r\n}\r\n\r\n// File: contracts/Partnership.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n/*\r\n* Fee collection by partner reference\r\n*/\r\ncontract Partnership is RoutingManagement {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n    * @dev Platform Fee collection\r\n    * @param partnerIndex Partner or Wallet provider that integrate to Warden\r\n    * @param token Token address\r\n    * @param wallet Partner or Wallet provider wallet\r\n    * @param amount Fee amount\r\n    */\r\n    event CollectFee(\r\n      uint256 indexed partnerIndex,\r\n      IERC20   indexed token,\r\n      address indexed wallet,\r\n      uint256         amount\r\n    );\r\n\r\n    /**\r\n    * @dev Updating partner info\r\n    * @param index Partner index\r\n    * @param wallet Partner wallet\r\n    * @param fee Fee in bps\r\n    * @param name partner name\r\n    */\r\n    event UpdatePartner(\r\n      uint256 indexed index,\r\n      address indexed wallet,\r\n      uint16 fee,\r\n      bytes16 name\r\n    );\r\n\r\n    struct Partner {\r\n      address wallet;       // To receive fee on the Warden Swap network\r\n      uint16 fee;           // fee in bps\r\n      bytes16 name;         // Partner reference\r\n    }\r\n\r\n    IERC20 public constant etherERC20 = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    mapping(uint256 => Partner) public partners;\r\n\r\n    constructor() public {\r\n        Partner memory partner = Partner(msg.sender, 10, \"NAR\"); // 0.1%\r\n        partners[0] = partner;\r\n        emit UpdatePartner(0, msg.sender, 10, \"NAR\");\r\n    }\r\n\r\n    function updatePartner(uint256 index, address wallet, uint16 fee, bytes16 name)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(fee <= 100, \"fee: no more than 1%\");\r\n        Partner memory partner = Partner(wallet, fee, name);\r\n        partners[index] = partner;\r\n        emit UpdatePartner(index, wallet, fee, name);\r\n    }\r\n\r\n    function _amountWithFee(uint256 amount, uint256 partnerIndex)\r\n        internal\r\n        view\r\n        returns(uint256 remainingAmount)\r\n    {\r\n        Partner storage partner = partners[partnerIndex];\r\n        if (partner.wallet == 0x0000000000000000000000000000000000000000) {\r\n          partner = partners[0];\r\n        }\r\n        if (partner.fee == 0) {\r\n            return amount;\r\n        }\r\n        uint256 fee = amount.mul(partner.fee).div(10000);\r\n        return amount.sub(fee);\r\n    }\r\n\r\n    function _collectFee(uint256 partnerIndex, uint256 amount, IERC20 token)\r\n        internal\r\n        returns(uint256 remainingAmount)\r\n    {\r\n        Partner storage partner = partners[partnerIndex];\r\n        if (partner.wallet == 0x0000000000000000000000000000000000000000) {\r\n            partnerIndex = 0;\r\n            partner = partners[0];\r\n        }\r\n        if (partner.fee == 0) {\r\n            return amount;\r\n        }\r\n        uint256 fee = amount.mul(partner.fee).div(10000);\r\n        require(fee < amount, \"fee exceeds return amount!\");\r\n        if (etherERC20 == token) {\r\n            (bool success, ) = partner.wallet.call.value(fee)(\"\"); // Send back ether to sender\r\n            require(success, \"Transfer fee of ether failed.\");\r\n        } else {\r\n            token.safeTransfer(partner.wallet, fee);\r\n        }\r\n        emit CollectFee(partnerIndex, token, partner.wallet, fee);\r\n\r\n        return amount.sub(fee);\r\n    }\r\n}\r\n\r\n// File: contracts/WhitelistFeeOnTransfer.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n/*\r\n* Whitelist of Fee On Transfer Token\r\n*/\r\ncontract WhitelistFeeOnTransfer is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event AddFeeOnTransferToken(IERC20 indexed token);\r\n    event DisabledFeeOnTransferToken(IERC20 indexed token);\r\n\r\n    mapping(address => bool) public FeeOnTransferToken;\r\n\r\n    function addFeeOnTransferToken(\r\n        IERC20  token\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        FeeOnTransferToken[address(token)] = true;\r\n        emit AddFeeOnTransferToken(token);\r\n    }\r\n\r\n    function disableFeeOnTransferToken(\r\n        IERC20  token\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        FeeOnTransferToken[address(token)] = false;\r\n        emit DisabledFeeOnTransferToken(token);\r\n    }\r\n\r\n    function isFeeOnTransferToken(IERC20 token)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return FeeOnTransferToken[address(token)];\r\n    }\r\n}\r\n\r\n// File: contracts/NarwhalSwap.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity 0.5.17;\r\n\r\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//MMMMMMMMMMWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//MMMMMMMMMMWXNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//MMMMMMMMMMNO0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//MMMMMMMMMMN0KWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//MMMMMMMMMMMNKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//MMMMMMMMMMMWXKXWMMMMMMMMMMMMMMMMMN0kkkxxxxxkO0KXNWMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//MMMMMMMMMMMWKx0WMMMMMMMMMMMMMMMMMXo,'''''''',,;:loxOKNWMMMMMMMMMMMMMMMMMMMM\r\n//MMMMMMMMMMWX0OKNMMMMMMMMMMMMMMMMMM0c''''''''''',,,,,;cdkKNMMMMMMMMMMMMMMMMM\r\n//MMMMMMMMMMMWWNKKWMMMMMMMMMMMMMMMMMWO:''''''''',,,,,,,,,;:lx0NMMMMMMMMMMMMMM\r\n//MMMMMMMMMMMMWWKOKNMMMMMMMMMMMMMMMMMNxc;,,,,,,,,,,,,,,,,,;,;:lkXWMMMMMMMMMMM\r\n//MMMMMMMMMMMMWXOxOXMMMMMMMMMMMMMMMMMMNXx;,,,,,,,,,,,,,,,,;;;;;;cxKWMMMMMMMMM\r\n//MMMMMMMMMMMX0O000XWMMMMMMMMMMMMMMMMMMMWOc,,,,,,,,,,,,;;;;;;;;;;;cxKWMMMMMMM\r\n//MMMMMMMMMMMNNWWNKKXWMMMMMMMMMMMMMMMMMMMWKo;,,,,,,,;;;;;;;;;;;;;;;;ckNMMMMMM\r\n//MMMMMMMMMMMWWWWN0kkXWMMMMMMMMMMMMMMMMMMMMN0o;,,,,;;;;;;;;;;;;;;;;;;:dKWMMMM\r\n//MMMMMMMMMMMWXK0kxxxOKKOOO00KXNWMMMMMMMMMMMMN0xo:;;;;;,,''',;;;;;;;;;;l0WMMM\r\n//MMMMMMMMMMMXOkkOK0kkxc'',,;:cldk0XWMMMMMMMMMMW0c...........';;;;;;;;;;cOWMM\r\n//MMMMMMMMWX00KKXXXKkxdc'.',,;;;;;:cdOXNWMMMMMW0:.............';;;;;;;;;;c0WM\r\n//MMMMMMWKxlcoO0KK0Oxoc,'',,;;,,;;;;;;cld0WMMMXl...............';;;;;;;;;;lKM\r\n//MMMWKkdc::::cloolc:,'',,;;,.. .,,;;;;;;:dKWMK:................';;;;;;;;;;dN\r\n//MW0:...,::::;;;;,,,,,;;;;;.    ..;;;;;;;;ckNXl......;lodol:'...,;;;;;;;;;:O\r\n//M0,   .,:::::::;;;;;;;;;;;'     .;;;;;;;;;:xN0:...cONWMMMMN0o,.,;;;;;;;;;;d\r\n//Mk' ..,;::::::::::::;::;::;'....,;;;;;;;;;;:kNKc,dNMMMMMMMMMWk;';;;;;;;;;;c\r\n//Nd;,,;:::::::::::::::::::;;;;;;;;;;;;;;;;;;;cOWNKNMMMMMMMMMMMNo,;;;;;;;;;,;\r\n//0c;::::::::::::::::::;::::;;;;;;;;;;;;;;;;;;;dXMMMMMMMMMMMMMMNd,;;;;;;;;;,;\r\n//k:;;:;;:::::::::::::::::;;;;;;;;;;;;;;;;;;;;;l0MMMMMMMMMMMMMWk:,;;;;;;;;;,;\r\n//d;;;;;;;;;::::::::;;;;;;;;;;;;;;;;;;;;;;;;;;;cOMMMMMMMMMMMWXx:,,;;;;;;;;;,;\r\n//o;;;;:;;::cloolllc::;;;;;;;;;;;;;;;;;;;;;;;;;cOWWWMWWWNK0ko:,,,;;;;;;;;;,,c\r\n//d;;;;:coxk0000000Okxdlc:;;;;;;;;;;;;;;;;;;;;;;cllooolc:;,'',,,;;;;;;;;,,,,o\r\n//x;,;:ok0KKK0KKK0KKKKK0Oxo:;;;;;;;;;;;;;;;;;;;,''''''''''',,,;;;;;;;;;,,,,:O\r\n//0c,:d00KKKKKKKKKK0KK0KK00ko:;;;;;;;;;;;;;;;;;,'''''''',,,;;;;;;;;;;,,,,',oX\r\n//Wkco0KK000KK00KKK0KK0KK0000xc;;;;;;;;;;;;;;;;,,,,,,,,,;;;;;;;;;;,,,,,,''c0W\r\n//MNK0KKK0KKKKKKKKKKKKKKKKKKK0xc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,,,,,,'''':OWM\r\n//MMWNKK00KKKKKKKKKKKKKKKK0KKK0d:;;;;;;;;;;;;;;;;;;;;;;;;;;;,,,,,,,'''',o0WMM\r\n//MMMMNK00000000KKKKKKKKKK00KKKOl;;;;;;;;;;;;;;;;;;;;,,,,,,,,,,,'''''':xXWMMM\r\n//MMMMMXO00000000000000KKK000KK0kc;;;;;;;;;,,,,,,,,,,,,,,,,,,''''''':oONMMMMM\r\n//MMMWKc'ck0000000000000000K00KK0kl:,,,,,,,,,,,,,,'''''''.''''''',:okKWMMMMMM\r\n//MMW0;. .,d00000000000000000000000koc;,,,,'''''''''.........',:ldk0NWMMMMMMM\r\n//MMWOddxkOKNK00000000000000000000000Oxdol:;,,''.............:dxk0NWMMMMMMMMM\r\n//MMMMMMMMMMMWNXK0OOOOOOO00000000O0000OOOOOkxdoollcccc:;;,,,;lOKNWMMMMMMMMMMM\r\n//MMMMMMMMMMMMMMWNK0OOOOOOOOOOOOOOOOOOOOOOOOkkkkkkkxxxxxxdxk0XWMMMMMMMMMMMMMM\r\n//MMMMMMMMMMMMMMMMMWNXK0Okkkkkkkkkkkkkkkkkkkkkkxxxxxxxxk0KXWMMMMMMMMMMMMMMMMM\r\n//MMMMMMMMMMMMMMMMMMMMWWNXK0OOkkkkkkkkkxxxxxxxxxkkO00KXWMMMMMMMMMMMMMMMMMMMMM\r\n//MMMMMMMMMMMMMMMMMMMMMMMMMWWNXK00OOkkkkkkkkOO0KXXNWMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//\r\n\r\n\r\n\r\n\r\ncontract NarwhalTokenPriviledge is Partnership {\r\n    uint256 public eligibleAmount = 10 ether; // 10 NAR\r\n    IERC20 public narToken;\r\n\r\n    event UpdateNarToken(IERC20 indexed token);\r\n    event UpdateEligibleAmount(uint256 amount);\r\n\r\n    function updateNarToken(\r\n        IERC20  token\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        narToken = token;\r\n        emit UpdateNarToken(token);\r\n    }\r\n\r\n    function updateEligibleAmount(\r\n        uint256  amount\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        eligibleAmount = amount;\r\n        emit UpdateEligibleAmount(amount);\r\n    }\r\n\r\n    function isEligibleForFreeTrade(address user)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (address(narToken) == 0x0000000000000000000000000000000000000000) {\r\n            return false;\r\n        }\r\n\r\n        return narToken.balanceOf(user) >= eligibleAmount;\r\n    }\r\n\r\n    function totalHoldingToken(address user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n      return narToken.balanceOf(user);\r\n    }\r\n}\r\n\r\ncontract NarwhalSwap is NarwhalTokenPriviledge, WhitelistFeeOnTransfer, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n    * @dev when new trade occure (and success), this event will be boardcast.\r\n    * @param srcAsset Source token\r\n    * @param srcAmount amount of source token\r\n    * @param destAsset Destination token\r\n    * @param destAmount amount of destination token\r\n    * @param trader user address\r\n    */\r\n    event Trade(\r\n        address indexed srcAsset, // Source\r\n        uint256         srcAmount,\r\n        address indexed destAsset, // Destination\r\n        uint256         destAmount,\r\n        address indexed trader // User\r\n    );\r\n\r\n    event DestAmount(uint256 _destAmount, uint256 _order);\r\n\r\n    /**\r\n    * @notice use token address 0xeee...eee for ether\r\n    * @dev makes a trade between Ether to token by tradingRouteIndex\r\n    * @param tradingRouteIndex index of trading route\r\n    * @param srcAmount amount of source tokens\r\n    * @param dest Destination token\r\n    * @return amount of actual destination tokens\r\n    */\r\n    function _tradeEtherToToken(\r\n        uint256 tradingRouteIndex,\r\n        uint256 srcAmount,\r\n        IERC20 dest\r\n    )\r\n        private\r\n        returns(uint256)\r\n    {\r\n        // Load trading route\r\n        INarwhalTradingRoute tradingRoute = tradingRoutes[tradingRouteIndex].route;\r\n        // Trade to route\r\n        uint256 destAmount = tradingRoute.trade.value(srcAmount)(\r\n            etherERC20,\r\n            dest,\r\n            srcAmount\r\n        );\r\n        return destAmount;\r\n    }\r\n\r\n    // Receive ETH in case of trade Token -> ETH, will get ETH back from trading route\r\n    function () external payable {}\r\n\r\n    /**\r\n    * @notice use token address 0xeee...eee for ether\r\n    * @dev makes a trade between token to Ether by tradingRouteIndex\r\n    * @param tradingRouteIndex index of trading route\r\n    * @param src Source token\r\n    * @param srcAmount amount of source tokens\r\n    * @return amount of actual destination tokens\r\n    */\r\n    function _tradeTokenToEther(\r\n        uint256 tradingRouteIndex,\r\n        IERC20 src,\r\n        uint256 srcAmount\r\n    )\r\n        private\r\n        returns(uint256)\r\n    {\r\n        // Load trading route\r\n        INarwhalTradingRoute tradingRoute = tradingRoutes[tradingRouteIndex].route;\r\n        // Approve to TradingRoute\r\n        src.safeApprove(address(tradingRoute), srcAmount);\r\n        // Trande to route\r\n        uint256 destAmount = tradingRoute.trade(\r\n            src,\r\n            etherERC20,\r\n            srcAmount\r\n        );\r\n        return destAmount;\r\n    }\r\n\r\n    /**\r\n    * @dev makes a trade between token to token by tradingRouteIndex\r\n    * @param tradingRouteIndex index of trading route\r\n    * @param src Source token\r\n    * @param srcAmount amount of source tokens\r\n    * @param dest Destination token\r\n    * @return amount of actual destination tokens\r\n    */\r\n    function _tradeTokenToToken(\r\n        uint256 tradingRouteIndex,\r\n        IERC20 src,\r\n        uint256 srcAmount,\r\n        IERC20 dest\r\n    )\r\n        private\r\n        returns(uint256)\r\n    {\r\n        // Load trading route\r\n        INarwhalTradingRoute tradingRoute = tradingRoutes[tradingRouteIndex].route;\r\n        // Approve to TradingRoute\r\n        src.safeApprove(address(tradingRoute), srcAmount);\r\n        // Trande to route\r\n        uint256 destAmount = tradingRoute.trade(\r\n            src,\r\n            dest,\r\n            srcAmount\r\n        );\r\n        return destAmount;\r\n    }\r\n\r\n    /**\r\n    * @notice use token address 0xeee...eee for ether\r\n    * @dev makes a trade between src and dest token by tradingRouteIndex\r\n    * Ex1: trade 0.5 ETH -> DAI\r\n    * 0, \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"500000000000000000\", \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"21003850000000000000\"\r\n    * Ex2: trade 30 DAI -> ETH\r\n    * 0, \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"30000000000000000000\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"740825000000000000\"\r\n    * @param _tradingRouteIndex index of trading route\r\n    * @param _src Source token\r\n    * @param _srcAmount amount of source tokens\r\n    * @param _dest Destination token\r\n    * @return amount of actual destination tokens\r\n    */\r\n    function _trade(\r\n        uint256             _tradingRouteIndex,\r\n        IERC20              _src,\r\n        uint256             _srcAmount,\r\n        IERC20              _dest\r\n    )\r\n        private\r\n        onlyTradingRouteEnabled(_tradingRouteIndex)\r\n        returns(uint256)\r\n    {\r\n        // Destination amount\r\n        uint256 destAmount;\r\n        // Record src/dest asset for later consistency check.\r\n        uint256 srcAmountBefore;\r\n        uint256 destAmountBefore;\r\n\r\n        if (etherERC20 == _src) { // Source\r\n            srcAmountBefore = address(this).balance;\r\n        } else {\r\n            srcAmountBefore = _src.balanceOf(address(this));\r\n        }\r\n        if (etherERC20 == _dest) { // Dest\r\n            destAmountBefore = address(this).balance;\r\n        } else {\r\n            destAmountBefore = _dest.balanceOf(address(this));\r\n        }\r\n        if (etherERC20 == _src) { // Trade ETH -> Token\r\n            destAmount = _tradeEtherToToken(_tradingRouteIndex, _srcAmount, _dest);\r\n        } else if (etherERC20 == _dest) { // Trade Token -> ETH\r\n            destAmount = _tradeTokenToEther(_tradingRouteIndex, _src, _srcAmount);\r\n        } else { // Trade Token -> Token\r\n            destAmount = _tradeTokenToToken(_tradingRouteIndex, _src, _srcAmount, _dest);\r\n        }\r\n\r\n        // Recheck if src/dest amount correct\r\n        if (etherERC20 == _src) { // Source\r\n            require(address(this).balance == srcAmountBefore.sub(_srcAmount), \"source(ETH) amount mismatch after trade\");\r\n        } else {\r\n            require(_src.balanceOf(address(this)) == srcAmountBefore.sub(_srcAmount), \"source amount mismatch after trade\");\r\n        }\r\n        if (etherERC20 == _dest) { // Dest\r\n            require(address(this).balance == destAmountBefore.add(destAmount), \"destination(ETH) amount mismatch after trade\");\r\n        } else {\r\n            require(_dest.balanceOf(address(this)) <= destAmountBefore.add(destAmount), \"destination amount mismatch after trade\");\r\n        }\r\n        return destAmount;\r\n    }\r\n\r\n    /**\r\n    * @notice use token address 0xeee...eee for ether\r\n    * @dev makes a trade between src and dest token by tradingRouteIndex\r\n    * Ex1: trade 0.5 ETH -> DAI\r\n    * 0, \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"500000000000000000\", \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"21003850000000000000\"\r\n    * Ex2: trade 30 DAI -> ETH\r\n    * 0, \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"30000000000000000000\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"740825000000000000\"\r\n    * @param tradingRouteIndex index of trading route\r\n    * @param src Source token\r\n    * @param srcAmount amount of source tokens\r\n    * @param dest Destination token\r\n    * @param minDestAmount minimun destination amount\r\n    * @param partnerIndex index of partnership for revenue sharing\r\n    * @return amount of actual destination tokens\r\n    */\r\n    function trade(\r\n        uint256   tradingRouteIndex,\r\n        IERC20    src,\r\n        uint256   srcAmount,\r\n        IERC20    dest,\r\n        uint256   minDestAmount,\r\n        uint256   partnerIndex\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n        returns(uint256)\r\n    {\r\n        uint256 destAmount;\r\n        // Prepare source's asset\r\n        uint256 _before;\r\n        uint256 _beforeSrc;\r\n        uint256 _afterSrc;\r\n        if (etherERC20 != src) {\r\n            _beforeSrc = src.balanceOf(address(this));\r\n            src.safeTransferFrom(msg.sender, address(this), srcAmount); // Transfer token to this address\r\n            _afterSrc = src.balanceOf(address(this));\r\n            srcAmount = _afterSrc.sub(_beforeSrc);\r\n        }\r\n\r\n        if(etherERC20 != dest){\r\n          _before = dest.balanceOf(address(this));\r\n        }\r\n\r\n        // Trade to route\r\n        destAmount = _trade(tradingRouteIndex, src, srcAmount, dest);\r\n        if (!isEligibleForFreeTrade(msg.sender)) {\r\n            destAmount = _collectFee(partnerIndex, destAmount, dest);\r\n        }\r\n\r\n        // Throw exception if destination amount doesn't meet user requirement.\r\n        require(destAmount >= minDestAmount, \"destination amount is too low.\");\r\n        if (etherERC20 == dest) {\r\n            (bool success, ) = msg.sender.call.value(destAmount)(\"\"); // Send back ether to sender\r\n            require(success, \"Transfer ether back to caller failed.\");\r\n        } else { // Send back token to sender\r\n\r\n            uint256 _after = dest.balanceOf(address(this));\r\n            uint256 _current = _after.sub(_before);\r\n\r\n            if(isFeeOnTransferToken(dest) || isFeeOnTransferToken(src)){\r\n              destAmount = _current;\r\n              dest.safeTransfer(msg.sender, destAmount);\r\n            }else{\r\n              dest.safeTransfer(msg.sender, destAmount);\r\n            }\r\n        }\r\n\r\n        emit Trade(address(src), srcAmount, address(dest), destAmount, msg.sender);\r\n        return destAmount;\r\n    }\r\n\r\n    /**\r\n    * @notice use token address 0xeee...eee for ether\r\n    * @dev makes a trade with split volumes to multiple-routes ex. UNI -> ETH (5%, 15% and 80%)\r\n    * @param routes Trading paths\r\n    * @param src Source token\r\n    * @param srcAmounts amount of source tokens\r\n    * @param dest Destination token\r\n    * @param minDestAmount minimun destination amount\r\n    * @param partnerIndex index of partnership for revenue sharing\r\n    * @return amount of actual destination tokens\r\n    */\r\n\r\n    function splitTrades(\r\n        uint256[] calldata routes,\r\n        IERC20    src,\r\n        uint256   totalSrcAmount,\r\n        uint256[] calldata srcAmounts,\r\n        IERC20    dest,\r\n        uint256   minDestAmount,\r\n        uint256   partnerIndex\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n        returns(uint256)\r\n    {\r\n        require(routes.length > 0, \"routes can not be empty\");\r\n        require(routes.length == srcAmounts.length, \"routes and srcAmounts lengths mismatch\");\r\n        uint256 destAmount = 0;\r\n\r\n        // Prepare source's asset\r\n        uint256 _before;\r\n        uint256 _currentTotal;\r\n\r\n\r\n        if (etherERC20 != src) {\r\n            uint256 _beforeSrc = src.balanceOf(address(this));\r\n            src.safeTransferFrom(msg.sender, address(this), totalSrcAmount); // Transfer token to this address\r\n            uint256 _afterSrc = src.balanceOf(address(this));\r\n            _currentTotal = _afterSrc.sub(_beforeSrc);\r\n        }else{\r\n          _currentTotal = totalSrcAmount;\r\n        }\r\n\r\n        uint256[] memory splitAmounts = new uint256[](srcAmounts.length);\r\n\r\n        for (uint k = 0; k < srcAmounts.length; k++) {\r\n          uint256 x = srcAmounts[k];\r\n          splitAmounts[k] = x.mul(_currentTotal).div(totalSrcAmount);\r\n        }\r\n\r\n        if(etherERC20 != dest){\r\n          _before = dest.balanceOf(address(this));\r\n        }\r\n\r\n        // Trade with routes\r\n        for (uint i = 0; i < routes.length; i++) {\r\n            uint256 tradingRouteIndex = routes[i];\r\n            uint256 amount = splitAmounts[i];\r\n            IERC20 _src = src;\r\n            IERC20 _dest = dest;\r\n            destAmount = destAmount.add(_trade(tradingRouteIndex, _src, amount, _dest));\r\n        }\r\n\r\n        // Collect fee\r\n        if (!isEligibleForFreeTrade(msg.sender)) {\r\n            destAmount = _collectFee(partnerIndex, destAmount, dest);\r\n        }\r\n\r\n        // Throw exception if destination amount doesn't meet user requirement.\r\n        require(destAmount >= minDestAmount, \"destination amount is too low.\");\r\n        if (etherERC20 == dest) {\r\n            (bool success, ) = msg.sender.call.value(destAmount)(\"\"); // Send back ether to sender\r\n            require(success, \"Transfer ether back to caller failed.\");\r\n        } else { // Send back token to sender\r\n            uint256 _after = dest.balanceOf(address(this));\r\n            uint256 _current = _after.sub(_before);\r\n\r\n            if(isFeeOnTransferToken(dest) || isFeeOnTransferToken(src)){\r\n              destAmount = _current;\r\n              dest.safeTransfer(msg.sender, destAmount);\r\n            }else{\r\n              dest.safeTransfer(msg.sender, destAmount);\r\n            }\r\n\r\n        }\r\n\r\n        emit Trade(address(src), totalSrcAmount, address(dest), destAmount, msg.sender);\r\n        return destAmount;\r\n    }\r\n\r\n    /**\r\n    * @notice use token address 0xeee...eee for ether\r\n    * @dev get amount of destination token for given source token amount\r\n    * @param tradingRouteIndex index of trading route\r\n    * @param src Source token\r\n    * @param dest Destination token\r\n    * @param srcAmount amount of source tokens\r\n    * @return amount of actual destination tokens\r\n    */\r\n    function getDestinationReturnAmount(\r\n        uint256 tradingRouteIndex,\r\n        IERC20  src,\r\n        IERC20  dest,\r\n        uint256 srcAmount,\r\n        uint256 partnerIndex\r\n    )\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // Load trading route\r\n        INarwhalTradingRoute tradingRoute = tradingRoutes[tradingRouteIndex].route;\r\n        uint256 destAmount = tradingRoute.getDestinationReturnAmount(src, dest, srcAmount);\r\n        return _amountWithFee(destAmount, partnerIndex);\r\n    }\r\n\r\n    function getDestinationReturnAmountForSplitTrades(\r\n        uint256[] calldata routes,\r\n        IERC20    src,\r\n        uint256[] calldata srcAmounts,\r\n        IERC20    dest,\r\n        uint256   partnerIndex\r\n    )\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        require(routes.length > 0, \"routes can not be empty\");\r\n        require(routes.length == srcAmounts.length, \"routes and srcAmounts lengths mismatch\");\r\n        uint256 destAmount = 0;\r\n\r\n        for (uint i = 0; i < routes.length; i++) {\r\n            uint256 tradingRouteIndex = routes[i];\r\n            uint256 amount = srcAmounts[i];\r\n            // Load trading route\r\n            INarwhalTradingRoute tradingRoute = tradingRoutes[tradingRouteIndex].route;\r\n            destAmount = destAmount.add(tradingRoute.getDestinationReturnAmount(src, dest, amount));\r\n        }\r\n        return _amountWithFee(destAmount, partnerIndex);\r\n    }\r\n\r\n    // In case of expected and unexpected event that have some token amounts remain in this contract, owner can call to collect them.\r\n    function collectRemainingToken(\r\n        IERC20  token,\r\n        uint256 amount\r\n    )\r\n      public\r\n      onlyOwner\r\n    {\r\n        token.safeTransfer(msg.sender, amount);\r\n    }\r\n\r\n    // In case of expected and unexpected event that have some ether amounts remain in this contract, owner can call to collect them.\r\n    function collectRemainingEther(\r\n        uint256 amount\r\n    )\r\n      public\r\n      onlyOwner\r\n    {\r\n        (bool success, ) = msg.sender.call.value(amount)(\"\"); // Send back ether to sender\r\n        require(success, \"Transfer ether back to caller failed.\");\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddFeeOnTransferToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"contract INarwhalTradingRoute\",\"name\":\"routingAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"AddedTradingRoute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"partnerIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollectFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_destAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_order\",\"type\":\"uint256\"}],\"name\":\"DestAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DisabledFeeOnTransferToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"disabledBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"contract INarwhalTradingRoute\",\"name\":\"routingAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"DisabledTradingRoute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enabledBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"contract INarwhalTradingRoute\",\"name\":\"routingAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"EnabledTradingRoute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateEligibleAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UpdateNarToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"name\",\"type\":\"bytes16\"}],\"name\":\"UpdatePartner\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"FeeOnTransferToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addFeeOnTransferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"contract INarwhalTradingRoute\",\"name\":\"_routingAddress\",\"type\":\"address\"}],\"name\":\"addTradingRoute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allRoutesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collectRemainingEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collectRemainingToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"disableFeeOnTransferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"disableTradingRoute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eligibleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"enableTradingRoute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherERC20\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingRouteIndex\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerIndex\",\"type\":\"uint256\"}],\"name\":\"getDestinationReturnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"routes\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"srcAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnerIndex\",\"type\":\"uint256\"}],\"name\":\"getDestinationReturnAmountForSplitTrades\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isEligibleForFreeTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isFeeOnTransferToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isTradingRouteEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"narToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"},{\"internalType\":\"bytes16\",\"name\":\"name\",\"type\":\"bytes16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"routes\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSrcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"srcAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minDestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerIndex\",\"type\":\"uint256\"}],\"name\":\"splitTrades\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalHoldingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingRouteIndex\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minDestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerIndex\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradingRoutes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"contract INarwhalTradingRoute\",\"name\":\"route\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateEligibleAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateNarToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"},{\"internalType\":\"bytes16\",\"name\":\"name\",\"type\":\"bytes16\"}],\"name\":\"updatePartner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NarwhalSwap", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://1231ccc18a5a61c3d5e2631f10d486ea4eb810ba9b0c7904d828a90b5622e983"}