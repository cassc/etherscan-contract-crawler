{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Vault {\r\n    using SafeMath for uint256;\r\n\r\n    address internal owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"Call not allowed.\"); _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function getRewardsEarned(address staker) public view returns (uint256) {\r\n        return stakersRewards[staker] + (balance[staker] * rewardsPerSAFUPerBlock * (block.number - lastUpdate[staker])) / 1e9;\r\n    }\r\n\r\n    function getLastUpdate(address staker) public view returns (uint256) {\r\n        return lastUpdate[staker];\r\n    }\r\n\r\n    function getStakerBalance(address staker) public view returns (uint256) {\r\n        return balance[staker];\r\n    }\r\n\r\n\tIBEP20 SAFU = IBEP20(0x890cc7d14948478c98A6CD7F511E1f7f7f99F397); //Main Net\r\n\r\n    uint256 public maximumLocked = 2000 * 1e9;\r\n\tuint256 public totalLocked;\r\n    uint256 public rewardsPerSAFUPerBlock;\r\n\r\n \tmapping (address => uint256) stakersRewards;\r\n\tmapping (address => uint256) lastUpdate;\r\n\tmapping (address => uint256) balance;\r\n\r\n\taddress[] stakers;\r\n    mapping (address => uint256) stakerIndexes;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function stake(uint256 amount) public {\r\n\t\trequire(amount > 0 && totalLocked + amount <= maximumLocked, \"The maximum amount of SAFUs has been staked in this pool.\");\r\n\t\tSAFU.transferFrom(msg.sender, address(this), amount);\r\n\r\n\t\ttotalLocked += amount;\r\n\r\n\t\tuint256 _lastUpdate = lastUpdate[msg.sender];\r\n\t\tlastUpdate[msg.sender] = block.number;\r\n\r\n\t\tif (balance[msg.sender] > 0) {\r\n\t\t\tstakersRewards[msg.sender] += (balance[msg.sender] * rewardsPerSAFUPerBlock * (block.number - _lastUpdate)) / 1e9;\r\n\t\t} else {\r\n\t\t\taddStaker(msg.sender);\r\n\t\t}\r\n\r\n\t\tbalance[msg.sender] += amount;\r\n    }\r\n\r\n    function withdraw(uint256 amount) public {\r\n\t\trequire(amount > 0 && amount <= balance[msg.sender], \"You cannot withdraw more than what you have!\");\r\n\t\tuint256 _lastUpdate = lastUpdate[msg.sender];\r\n\t\tlastUpdate[msg.sender] = block.number;\r\n\t\tstakersRewards[msg.sender] += (balance[msg.sender] * rewardsPerSAFUPerBlock * (block.number - _lastUpdate)) / 1e9;\r\n\t\tbalance[msg.sender] -= amount;\r\n\r\n\t\tif (balance[msg.sender] == 0) {\r\n\t\t\tremoveStaker(msg.sender);\r\n\t\t}\r\n\r\n\t\tSAFU.transfer(msg.sender, amount);\r\n\r\n        totalLocked -= amount;\r\n    }\r\n\r\n    function claim() public {\r\n\t\tuint256 _lastUpdate = lastUpdate[msg.sender];\r\n\t\tlastUpdate[msg.sender] = block.number;\r\n\t\tstakersRewards[msg.sender] += (balance[msg.sender] * rewardsPerSAFUPerBlock * (block.number - _lastUpdate)) / 1e9;\r\n\t\trequire(stakersRewards[msg.sender] > 0, \"No rewards to claim!\");\r\n\t\tuint256 rewards = stakersRewards[msg.sender];\r\n\t\tstakersRewards[msg.sender] = 0;\r\n\t\tSAFU.transfer(msg.sender, rewards);\r\n    }\r\n    \r\n\tfunction modifyRewards(uint256 amount) public onlyOwner {\r\n\r\n\t\tfor (uint256 i = 0; i < stakers.length; i++) {\r\n\t\t\tuint256 _lastUpdate = lastUpdate[stakers[i]];\r\n\t\t\tlastUpdate[stakers[i]] = block.number;\r\n\t\t\tstakersRewards[stakers[i]] += (balance[stakers[i]] * rewardsPerSAFUPerBlock * (block.number - _lastUpdate)) / 1e9;\r\n\t\t}\r\n\r\n\t\trewardsPerSAFUPerBlock = amount;\r\n\r\n\t}\r\n\r\n\tfunction addStaker(address staker) internal {\r\n        stakerIndexes[staker] = stakers.length;\r\n        stakers.push(staker);\r\n    }\r\n\r\n    function removeStaker(address staker) internal {\r\n        stakers[stakerIndexes[staker]] = stakers[stakers.length-1];\r\n        stakerIndexes[stakers[stakers.length-1]] = stakerIndexes[staker];\r\n        stakers.pop();\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getLastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getRewardsEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"modifyRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerSAFUPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Vault", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8c35129e00e960cc5b0af4134f1a13e88dd915e1baeb7e440e82bbfb392d1faf"}