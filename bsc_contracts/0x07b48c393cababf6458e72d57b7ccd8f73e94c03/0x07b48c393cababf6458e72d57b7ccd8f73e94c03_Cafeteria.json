{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Cafeteria.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ninterface IMintableERC20 is IERC20 {\\n\\tfunction mint(address _to, uint256 _amount) external;\\n}\\n\\ninterface ITransferable {\\n\\tfunction transfer(address to, uint256 amount) external returns (bool);\\n}\\n\\n// Cafeteria is the master of Coupon. He can make Coupon and he is a fair guy.\\n//\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\n// will be transferred to a governance smart contract once Coupon is sufficiently\\n// distributed and the community can show to govern itself.\\n//\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\ncontract Cafeteria is Ownable, ReentrancyGuard {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t// Info of each user.\\n\\tstruct UserInfo {\\n\\t\\tuint256 amount; // How many LP tokens the user has provided.\\n\\t\\tuint256 rewardDebt; // Reward debt. See explanation below.\\n\\t\\t//\\n\\t\\t// We do some fancy math here. Basically, any point in time, the amount of COUPONs\\n\\t\\t// entitled to a user but is pending to be distributed is:\\n\\t\\t//\\n\\t\\t//   pending reward = (user.amount * pool.accCouponPerShare) - user.rewardDebt\\n\\t\\t//\\n\\t\\t// Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n\\t\\t//   1. The pool's `accCouponPerShare` (and `lastRewardBlock`) gets updated.\\n\\t\\t//   2. User receives the pending reward sent to his/her address.\\n\\t\\t//   3. User's `amount` gets updated.\\n\\t\\t//   4. User's `rewardDebt` gets updated.\\n\\t}\\n\\n\\t// Info of each pool.\\n\\tstruct PoolInfo {\\n\\t\\tIERC20 lpToken; // Address of LP token contract.\\n\\t\\tuint256 allocPoint; // How many allocation points assigned to this pool. COUPONs to distribute per block.\\n\\t\\tuint256 lastRewardBlock; // Last block number that COUPONs distribution occurs.\\n\\t\\tuint256 accCouponPerShare; // Accumulated COUPONs per share, times 1e12. See below.\\n\\t\\tuint16 depositFeeBP; // Deposit fee in basis points\\n\\t}\\n\\n\\t// The Coupon TOKEN!\\n\\tIMintableERC20 public coupon;\\n\\taddress public reserver;\\n\\t// Dev address.\\n\\taddress public devAddr;\\n\\t// Coupon tokens created per block.\\n\\tuint256 public couponPerBlock;\\n\\t// Bonus multiplier for early coupon makers.\\n\\tuint256 public constant BONUS_MULTIPLIER = 1;\\n\\t// Deposit Fee address\\n\\taddress public feeAddress;\\n\\n\\t// Info of each pool.\\n\\tuint256[] public poolInfoPidList; // pid to massUpdatePool\\n\\taddress[] public poolInfoDummyList;\\n\\tmapping(uint256 => PoolInfo) public poolInfo;\\n\\t// Info of each user that stakes LP tokens.\\n\\tmapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\t// Total allocation points. Must be the sum of all allocation points in all pools.\\n\\tuint256 public totalAllocPoint = 0;\\n\\t// The block number when Coupon mining starts.\\n\\tuint256 public startBlock;\\n\\n\\tevent Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n\\tevent Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\tevent EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\tevent SetFeeAddress(address indexed user, address indexed newAddress);\\n\\tevent SetDevAddress(address indexed user, address indexed newAddress);\\n\\tevent UpdateEmissionRate(address indexed user, uint256 couponPerBlock);\\n\\n\\tconstructor(\\n\\t\\taddress _coupon,\\n\\t\\taddress _devAddr,\\n\\t\\taddress _feeAddress,\\n\\t\\tuint256 _couponPerBlock,\\n\\t\\tuint256 _startBlock,\\n\\t\\taddress _reserver\\n\\t) public {\\n\\t\\tcoupon = IMintableERC20(_coupon);\\n\\t\\tdevAddr = _devAddr;\\n\\t\\tfeeAddress = _feeAddress;\\n\\t\\tcouponPerBlock = _couponPerBlock;\\n\\t\\tstartBlock = _startBlock;\\n\\t\\treserver = _reserver;\\n\\t}\\n\\n\\tfunction setStartBlock(uint256 newBlock) external onlyOwner {\\n\\t\\trequire(block.number < startBlock, \\\"already start\\\");\\n\\t\\tstartBlock = newBlock;\\n\\t}\\n\\n\\tfunction poolLength() external view returns (uint256) {\\n\\t\\treturn poolInfoDummyList.length;\\n\\t}\\n\\n\\tmapping(IERC20 => bool) public poolExistence;\\n\\n\\tmodifier nonDuplicated(IERC20 _lpToken) {\\n\\t\\trequire(poolExistence[_lpToken] == false, \\\"duplicated\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t// Add a new lp to the pool. Can only be called by the owner.\\n\\tfunction add(uint256 _allocPoint, IERC20 _lpToken, uint16 _depositFeeBP) external onlyOwner nonDuplicated(_lpToken) {\\n\\t\\trequire(_depositFeeBP <= 10000, \\\"invalid deposit fee basis points\\\");\\n\\n\\t\\tuint256 newPid = poolInfoDummyList.length;\\n\\n\\t\\tmassUpdatePools();\\n\\n\\t\\tuint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n\\t\\ttotalAllocPoint = totalAllocPoint + _allocPoint;\\n\\t\\tpoolExistence[_lpToken] = true;\\n\\t\\tpoolInfo[newPid] = PoolInfo({\\n\\t\\t    lpToken: _lpToken,\\n\\t\\t    allocPoint: _allocPoint,\\n\\t\\t    lastRewardBlock: lastRewardBlock,\\n\\t\\t    accCouponPerShare: 0,\\n\\t\\t    depositFeeBP: _depositFeeBP\\n\\t\\t});\\n\\t\\tpoolInfoDummyList.push(address(_lpToken));\\n\\t\\tpoolInfoPidList.push(newPid);\\n\\t}\\n\\n\\tfunction remove(uint256 _pid) external onlyOwner {\\n\\t\\tif (poolInfoPidList.length == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\n\\t\\trequire(address(pool.lpToken) != address(0), \\\"not found\\\");\\n\\n\\t\\tuint256 length = poolInfoPidList.length;\\n\\t\\tfor (uint256 i = 0; i < length; ++i) {\\n\\t\\t\\tif (poolInfoPidList[i] == _pid && pool.allocPoint == 0) {\\n\\t\\t\\t\\tpoolInfoPidList[i] = poolInfoPidList[length - 1];\\n\\t\\t\\t\\tpoolInfoPidList.pop();\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Update the given pool's Coupon allocation point and deposit fee. Can only be called by the owner.\\n\\tfunction set(uint256 _pid, uint256 _allocPoint, uint16 _depositFeeBP) external onlyOwner {\\n\\t\\trequire(_depositFeeBP <= 10000, \\\"invalid deposit fee basis points\\\");\\n\\n\\t\\tmassUpdatePools();\\n\\n\\t\\tuint256 prevAllocPoint = poolInfo[_pid].allocPoint;\\n\\t\\ttotalAllocPoint = (totalAllocPoint - prevAllocPoint) + _allocPoint;\\n\\t\\tpoolInfo[_pid].allocPoint = _allocPoint;\\n\\t\\tpoolInfo[_pid].depositFeeBP = _depositFeeBP;\\n\\n\\t\\tif (_allocPoint > 0 && prevAllocPoint == 0) {\\n\\t\\t\\tuint256 length = poolInfoPidList.length;\\n\\t\\t\\tbool found = false;\\n\\t\\t\\tfor (uint256 i = 0; i < length; ++i) {\\n\\t\\t\\t\\tif (poolInfoPidList[i] == _pid) {\\n\\t\\t\\t\\t\\tfound = true;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!found) {\\n\\t\\t\\t\\tpoolInfoPidList.push(_pid);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Return reward multiplier over the given _from to _to block.\\n\\tfunction getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n\\t\\treturn (_to - _from) * BONUS_MULTIPLIER;\\n\\t}\\n\\n\\t// View function to see pending COUPONs on frontend.\\n\\tfunction pendingCoupon(uint256 _pid, address _user) external view returns (uint256) {\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\n\\t\\tUserInfo storage user = userInfo[_pid][_user];\\n\\t\\tuint256 accCouponPerShare = pool.accCouponPerShare;\\n\\t\\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\t\\tif (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n\\t\\t\\tuint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n\\t\\t\\tuint256 couponReward = (multiplier * couponPerBlock * pool.allocPoint) / totalAllocPoint;\\n\\t\\t\\taccCouponPerShare = accCouponPerShare + ((couponReward * 1e12) / lpSupply);\\n\\t\\t}\\n\\t\\treturn ((user.amount * accCouponPerShare) / 1e12) - user.rewardDebt;\\n\\t}\\n\\n\\t// Update reward variables for all pools. Be careful of gas spending!\\n\\tfunction massUpdatePools() public {\\n\\t\\tuint256 length = poolInfoPidList.length;\\n\\t\\tfor (uint256 i = 0; i < length; ++i) {\\n\\t\\t\\tupdatePool(poolInfoPidList[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t// Update reward variables of the given pool to be up-to-date.\\n\\tfunction updatePool(uint256 _pid) public {\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\n\\t\\tif (block.number <= pool.lastRewardBlock) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\t\\tif (lpSupply == 0 || pool.allocPoint == 0) {\\n\\t\\t\\tpool.lastRewardBlock = block.number;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tuint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n\\t\\tuint256 couponReward = (multiplier * couponPerBlock * pool.allocPoint) / totalAllocPoint;\\n\\t\\tcoupon.mint(devAddr, couponReward / 10);\\n\\t\\tcoupon.mint(reserver, couponReward);\\n\\t\\tpool.accCouponPerShare = pool.accCouponPerShare + ((couponReward * 1e12) / lpSupply);\\n\\t\\tpool.lastRewardBlock = block.number;\\n\\t}\\n\\n\\t// Deposit LP tokens to Cafeteria for Coupon allocation.\\n\\tfunction deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\n\\t\\tUserInfo storage user = userInfo[_pid][msg.sender];\\n\\t\\tupdatePool(_pid);\\n\\n\\t\\tuint256 pending = ((user.amount * pool.accCouponPerShare) / 1e12) - user.rewardDebt;\\n\\t\\tif (pending > 0) {\\n\\t\\t\\tsafeCouponTransfer(msg.sender, pending);\\n\\t\\t}\\n\\n\\t\\tif (_amount > 0) {\\n\\t\\t\\tpool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n\\t\\t\\tif (pool.depositFeeBP > 0) {\\n\\t\\t\\t\\tuint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\\n\\t\\t\\t\\tpool.lpToken.safeTransfer(feeAddress, depositFee);\\n\\t\\t\\t\\tuser.amount = (user.amount + _amount) - depositFee;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tuser.amount = user.amount + _amount;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tuser.rewardDebt = (user.amount * pool.accCouponPerShare) / 1e12;\\n\\t\\temit Deposit(msg.sender, _pid, _amount);\\n\\t}\\n\\n\\tfunction harvestAll() external {\\n\\t\\tuint256 length = poolInfoDummyList.length;\\n\\t\\tfor (uint256 pid = 0; pid < length; ++pid) {\\n\\t\\t\\tdeposit(pid, 0);\\n\\t\\t}\\n\\t}\\n\\n\\t// Withdraw LP tokens from Cafeteria.\\n\\tfunction withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\n\\t\\tUserInfo storage user = userInfo[_pid][msg.sender];\\n\\t\\trequire(user.amount >= _amount, \\\"invalid amount\\\");\\n\\n\\t\\tupdatePool(_pid);\\n\\t\\tuint256 pending = ((user.amount * pool.accCouponPerShare) / 1e12) - user.rewardDebt;\\n\\t\\tif (pending > 0) {\\n\\t\\t\\tsafeCouponTransfer(msg.sender, pending);\\n\\t\\t}\\n\\t\\tif (_amount > 0) {\\n\\t\\t\\tuser.amount = user.amount - _amount;\\n\\t\\t\\tpool.lpToken.safeTransfer(address(msg.sender), _amount);\\n\\t\\t}\\n\\t\\tuser.rewardDebt = (user.amount * pool.accCouponPerShare) / 1e12;\\n\\t\\temit Withdraw(msg.sender, _pid, _amount);\\n\\t}\\n\\n\\t// Withdraw without caring about rewards. EMERGENCY ONLY.\\n\\tfunction emergencyWithdraw(uint256 _pid) external nonReentrant {\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\n\\t\\tUserInfo storage user = userInfo[_pid][msg.sender];\\n\\t\\tuint256 amount = user.amount;\\n\\t\\tuser.amount = 0;\\n\\t\\tuser.rewardDebt = 0;\\n\\t\\tpool.lpToken.safeTransfer(address(msg.sender), amount);\\n\\t\\temit EmergencyWithdraw(msg.sender, _pid, amount);\\n\\t}\\n\\n\\t// Safe coupon transfer function, just in case if rounding error causes pool to not have enough COUPONs.\\n\\tfunction safeCouponTransfer(address _to, uint256 _amount) internal {\\n\\t\\tuint256 couponBal = coupon.balanceOf(address(this));\\n\\t\\tbool transferSuccess = false;\\n\\t\\tif (_amount > couponBal) {\\n\\t\\t\\ttransferSuccess = ITransferable(reserver).transfer(_to, couponBal);\\n\\t\\t} else {\\n\\t\\t\\ttransferSuccess = ITransferable(reserver).transfer(_to, _amount);\\n\\t\\t}\\n\\t\\trequire(transferSuccess, \\\"transfer failed\\\");\\n\\t}\\n\\n\\t// Update dev address by the previous dev.\\n\\tfunction setDevAddress(address _devAddr) external onlyOwner {\\n\\t\\tdevAddr = _devAddr;\\n\\t\\temit SetDevAddress(msg.sender, _devAddr);\\n\\t}\\n\\n\\tfunction setFeeAddress(address _feeAddress) external onlyOwner {\\n\\t\\tfeeAddress = _feeAddress;\\n\\t\\temit SetFeeAddress(msg.sender, _feeAddress);\\n\\t}\\n\\n\\t// Foodcourt has to add hidden dummy pools inorder to alter the emission, here we make it simple and transparent to all.\\n\\tfunction updateEmissionRate(uint256 _couponPerBlock) external onlyOwner {\\n\\t\\tmassUpdatePools();\\n\\t\\tcouponPerBlock = _couponPerBlock;\\n\\t\\temit UpdateEmissionRate(msg.sender, _couponPerBlock);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coupon\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_couponPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_reserver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetDevAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetFeeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"couponPerBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coupon\",\"outputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"couponPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingCoupon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCouponPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfoDummyList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfoPidList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBlock\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_couponPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Cafeteria", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000084bb94e93891d74579b54ab63ed24c4ef9cd5ef0000000000000000000000000db5fac89db0a80814b657dd5f539a4219a18f17000000000000000000000000c5a21a471169cb5148d277041a0d55ca4888e60e0000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000000000000000a626b80000000000000000000000007cacd71c94478b00175f7724a0eb3a988ba51473", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}