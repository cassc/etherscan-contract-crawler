{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-01-05\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n// helper methods for interacting with ERC20 tokens\r\nlibrary TransferHelper {\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n}\r\n\r\ncontract SwapTokens {\r\n    address public immutable srcToken;\r\n    address public immutable dstToken;\r\n\r\n    // eg. if swap rate 1:100 (src:dst), then numeratorOfRate=100, denominatorOfRate=1\r\n    // eg. if swap rate 2:3 (src:dst), then numeratorOfRate=3, denominatorOfRate=2\r\n    uint256 public immutable numeratorOfRate;\r\n    uint256 public immutable denominatorOfRate;\r\n\r\n    uint256 public latestWithdrawRequestTime;\r\n    uint256 public latestWithdrawRequestAmount;\r\n    uint256 public constant minWithdrawApprovalInterval = 2 days;\r\n\r\n    address public owner;\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only owner\");\r\n        _;\r\n    }\r\n\r\n    event Swapped(address indexed sender, uint256 indexed srcAmount, uint256 indexed dstAmount);\r\n\r\n    constructor(address _srcToken, address _dstToken, uint256 _numeratorOfRate, uint256 _denominatorOfRate) {\r\n        srcToken = _srcToken;\r\n        dstToken = _dstToken;\r\n        numeratorOfRate = _numeratorOfRate;\r\n        denominatorOfRate = _denominatorOfRate;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"the new owner is the zero address\");\r\n        owner = newOwner;\r\n    }\r\n\r\n    /// @dev swap with `srcAmount` of `srcToken` to get `dstToken`.\r\n    /// Returns swap result of `dstAmount` of `dstToken`.\r\n    /// Requirements:\r\n    ///   - `msg.sender` must have approved at least `srcAmount` `srcToken` to `address(this)`.\r\n    ///   - `address(this)` must have at least `dstAmount` `dstToken`.\r\n    function swap(uint256 srcAmount) external returns (uint256 dstAmount) {\r\n        dstAmount = srcAmount * numeratorOfRate / denominatorOfRate;\r\n        TransferHelper.safeTransferFrom(srcToken, msg.sender, address(this), srcAmount);\r\n        TransferHelper.safeTransfer(dstToken, msg.sender, dstAmount);\r\n        emit Swapped(msg.sender, srcAmount, dstAmount);\r\n        return dstAmount;\r\n    }\r\n\r\n    function withdrawRequest(uint256 amount) external onlyOwner {\r\n        if (amount > 0) {\r\n            latestWithdrawRequestTime = block.timestamp;\r\n            latestWithdrawRequestAmount = amount;\r\n        } else {\r\n            latestWithdrawRequestTime = 0;\r\n            latestWithdrawRequestAmount = 0;\r\n        }\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        require(\r\n            latestWithdrawRequestTime > 0 && latestWithdrawRequestAmount > 0,\r\n            \"please do withdraw request firstly\"\r\n        );\r\n        require(\r\n            latestWithdrawRequestTime + minWithdrawApprovalInterval < block.timestamp,\r\n            \"the minimum withdraw approval interval is not satisfied\"\r\n        );\r\n        uint256 amount = latestWithdrawRequestAmount;\r\n        latestWithdrawRequestTime = 0;\r\n        latestWithdrawRequestAmount = 0;\r\n        TransferHelper.safeTransfer(dstToken, msg.sender, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numeratorOfRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominatorOfRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dstAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"denominatorOfRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dstToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestWithdrawRequestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestWithdrawRequestTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWithdrawApprovalInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numeratorOfRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"srcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dstAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SwapTokens", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000054261774905f3e6e9718f2abb10ed6555cae308a000000000000000000000000d9907fcda91ac644f70477b8fc1607ad15b2d7a800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2b4a061e4aad77979321e56d32042d1fe8c811f3f8a5a1b3bcc29b3c9a5f54b1"}