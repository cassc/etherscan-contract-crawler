{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DogsToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./libs/AddLiquidityHelper.sol\\\";\\nimport \\\"./libs/ToolBox.sol\\\";\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\ncontract DogsToken is ERC20(\\\"DOGS\\\", \\\"DOGS\\\"), Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public transferTaxRate = 600; // Transfer tax rate in basis points. (default 6%)\\n    uint256 public extraTransferTaxRate = 300; // Extra transfer tax rate in basis points. (default 3.00%)\\n\\n    uint256 public constant MAXIMUM_TRANSFER_TAX_RATE = 1001; // Max transfer tax rate: 10.01%.\\n\\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n    address public constant busdCurrencyAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address public constant wbnbCurrencyAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    uint256 public constant busdSwapThreshold = 50 * (10 ** 18);\\n\\n    bool public swapAndLiquifyEnabled = true; // Automatic swap and liquify enabled\\n\\n    uint256 public constant minDogsAmountToLiquify = 40 * (10 ** 18);\\n    uint256 public constant minBUSDAmountToLiquify = 200 * (10 ** 18);\\n\\n    uint256 public vaultLiqSplit = 2;\\n\\n    IUniswapV2Router02 public pancakeswapRouter;\\n\\n    address public dogsBusdSwapPair; // The trading pair\\n\\n    bool private _inSwapAndLiquify;  // In swap and liquify\\n\\n    AddLiquidityHelper public immutable addLiquidityHelper;\\n    ToolBox public immutable toolBox;\\n    IERC20 public constant busdRewardCurrency = IERC20(busdCurrencyAddress);\\n    address public immutable pigsToken;\\n    address public immutable rewardsVaultAddress;\\n\\n    mapping(address => bool) public excludeFromMap;\\n    mapping(address => bool) public excludeToMap;\\n\\n    mapping(address => bool) public extraFromMap;\\n    mapping(address => bool) public extraToMap;\\n\\n    event SetSwapAndLiquifyEnabled(bool swapAndLiquifyEnabled);\\n    event TransferFeeChanged(uint256 txnFee, uint256 extraTxnFee);\\n    event UpdateFeeMaps(address _contract, bool fromExcluded, bool toExcluded, bool fromHasExtra, bool toHasExtra);\\n    event SetPancakeswapRouter(address pancakeswapRouter, address dogsBusdSwapPair);\\n    event SetOperator(address operator);\\n    event UpdateVaultLiqSplit(uint256 liqVaultSplit);\\n\\n    // The operator can only update the transfer tax rate\\n    address private _operator;\\n\\n    // AB measures\\n    mapping(address => bool) private blacklist;\\n    mapping (address => bool) private _isExcludedFromLimiter;\\n\\n    bool private blacklistFeatureAllowed = true;\\n\\n    bool private transfersPaused = false;\\n    bool private transfersPausedFeatureAllowed = true;\\n\\n    bool private sellingEnabled = false;\\n    bool private sellingToggleAllowed = true;\\n\\n    bool private buySellLimiterEnabled = true;\\n    bool private buySellLimiterAllowed = true;\\n    uint256 private buySellLimitThreshold = 500e18;\\n\\n    // AB events\\n    event LimiterUserUpdated(address account, bool isLimited);\\n    event BlacklistUpdated(address account, bool blacklisted);\\n    event TransferStatusUpdate(bool isPaused);\\n    event TransferPauseFeatureBurn();\\n    event SellingToggleFeatureBurn();\\n    event BuySellLimiterUpdate(bool isEnabled, uint256 amount);\\n    event SellingEnabledToggle(bool enabled);\\n    event LimiterFeatureBurn();\\n    event BlacklistingFeatureBurn();\\n\\n    modifier onlyOperator() {\\n        require(_operator == msg.sender, \\\"!operator\\\");\\n        _;\\n    }\\n\\n    modifier lockTheSwap {\\n        _inSwapAndLiquify = true;\\n        _;\\n        _inSwapAndLiquify = false;\\n    }\\n\\n    modifier transferTaxFree {\\n        uint256 _transferTaxRate = transferTaxRate;\\n        uint256 _extraTransferTaxRate = extraTransferTaxRate;\\n        transferTaxRate = 0;\\n        extraTransferTaxRate = 0;\\n        _;\\n        transferTaxRate = _transferTaxRate;\\n        extraTransferTaxRate = _extraTransferTaxRate;\\n    }\\n\\n    /**\\n     * @notice Constructs the Dogs Token contract.\\n     */\\n    constructor(address _pigsToken, AddLiquidityHelper _addLiquidityHelper, ToolBox _toolBox, address _rewardsVaultAddress) {\\n        pigsToken = _pigsToken;\\n        addLiquidityHelper = _addLiquidityHelper;\\n        toolBox = _toolBox;\\n        _operator = msg.sender;\\n\\n        rewardsVaultAddress = _rewardsVaultAddress;\\n    }\\n\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n\\n    /// @dev overrides transfer function to meet tokenomics of Dogs Token\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\\n        require(!isBlacklisted(sender) && !isBlacklisted(recipient), 'on the naughty list');\\n        require(!transfersPaused, 'paused');\\n\\n        bool isExcluded = _isExcludedFromLimiter[sender] || _isExcludedFromLimiter[recipient];\\n\\n        if (recipient == address(dogsBusdSwapPair) && !isExcluded){\\n            require(sellingEnabled, 'selling not enabled');\\n        }\\n\\n        //if any account belongs to _isExcludedFromLimiter account then don't do buy/sell limiting, used for initial liquidty adding\\n        if (buySellLimiterEnabled && !isExcluded){\\n            if (recipient == address(dogsBusdSwapPair) || sender == address(dogsBusdSwapPair)){\\n                require(amount <= buySellLimitThreshold, 'exceed transfer max');\\n            }\\n        }\\n        // End of AB measures\\n\\n\\n        bool toFromAddLiquidityHelper = (sender == address(addLiquidityHelper) || recipient == address(addLiquidityHelper));\\n        // swap and liquify\\n        if (\\n            swapAndLiquifyEnabled == true\\n            && _inSwapAndLiquify == false\\n            && address(pancakeswapRouter) != address(0)\\n            && !toFromAddLiquidityHelper\\n        && sender != dogsBusdSwapPair\\n        && sender != owner()\\n        ) {\\n            swapAndLiquify();\\n        }\\n\\n        if (toFromAddLiquidityHelper ||\\n        recipient == BURN_ADDRESS || (transferTaxRate == 0 && extraTransferTaxRate == 0) ||\\n        excludeFromMap[sender] || excludeToMap[recipient]) {\\n            super._transfer(sender, recipient, amount);\\n        } else {\\n            // default tax is 6% of every transfer, but extra 3% for dumping tax. 3% dump tax gets burned\\n            uint256 liquidityAmount = amount * transferTaxRate / 10000;\\n            uint256 burnAmount = amount * ((extraFromMap[sender] || extraToMap[recipient]) ? extraTransferTaxRate : 0) / 10000;\\n\\n            // default 94% of transfer sent to recipient (6% tax)\\n            // 91% of transfer sent to recipient in case of selling (6% tax + 3% dump tax)\\n            uint256 sendAmount = amount - liquidityAmount - burnAmount;\\n\\n            require(amount == sendAmount + liquidityAmount + burnAmount, \\\"sum error\\\");\\n\\n            super._transfer(sender, address(this), liquidityAmount);\\n            super._transfer(sender, recipient, sendAmount);\\n            if (burnAmount > 0){\\n                super._transfer(sender, BURN_ADDRESS, burnAmount);\\n            }\\n            amount = sendAmount;\\n        }\\n    }\\n\\n    /// @dev Swap and liquify\\n    function swapAndLiquify() private lockTheSwap transferTaxFree {\\n        uint256 dogsBalance = ERC20(address(this)).balanceOf(address(this));\\n        uint256 busdBalance = ERC20(busdCurrencyAddress).balanceOf(address(this));\\n\\n        if (dogsBalance >= minDogsAmountToLiquify || busdBalance >= minBUSDAmountToLiquify) {\\n            ERC20(address(this)).transfer(address(addLiquidityHelper), dogsBalance);\\n\\n            ERC20(address(busdCurrencyAddress)).transfer(address(rewardsVaultAddress), busdBalance / vaultLiqSplit);\\n            ERC20(address(busdCurrencyAddress)).transfer(address(addLiquidityHelper), busdBalance - (busdBalance / vaultLiqSplit));\\n\\n            // send all tokens to add liquidity with, we are refunded any that aren't used.\\n            addLiquidityHelper.dogsBUSDLiquidityWithBuyBack(BURN_ADDRESS);\\n        }\\n    }\\n\\n    /**\\n     * @dev un-enchant the lp token into its original components.\\n     */\\n    function swapLpTokensForFee(address token, uint256 amount) internal {\\n        require(IERC20(token).approve(address(pancakeswapRouter), amount), '!approved');\\n\\n        IUniswapV2Pair lpToken = IUniswapV2Pair(token);\\n        IERC20 token0 = IERC20(lpToken.token0());\\n        IERC20 token1 = IERC20(lpToken.token1());\\n\\n        uint256 token0BeforeLiquidation = token0.balanceOf(address(this));\\n        uint256 token1BeforeLiquidation = token1.balanceOf(address(this));\\n\\n        // make the swap\\n        pancakeswapRouter.removeLiquidity(\\n            address(token0),\\n            address(token1),\\n            amount,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 token0FromLiquidation = token0.balanceOf(address(this)) - token0BeforeLiquidation;\\n        uint256 token1FromLiquidation = token1.balanceOf(address(this)) - token1BeforeLiquidation;\\n\\n        // send pigsToken all of 1 half of the LP to be converted to BUSD later.\\n        token0.safeTransfer(address(pigsToken), token0FromLiquidation);\\n\\n        // send pigsToken 50% share of the other 50% to give pigsToken 75% in total.\\n        token1.safeTransfer(address(pigsToken), token1FromLiquidation/2);\\n\\n        swapDepositFeeForTokensInternal(address(token1), false, busdCurrencyAddress);\\n    }\\n\\n    /**\\n     * @dev sell all of a current type of token for BUSD, to be used in dogs liquidity later.\\n     */\\n    function swapDepositFeeForBUSD(address token, bool isLPToken) external onlyOwner {\\n        // If dogs or busd already no need to do anything.\\n\\n        if (token == address(this) || token == busdCurrencyAddress)\\n            return;\\n\\n        uint256 busdValue = toolBox.getTokenBUSDValue(IERC20(token).balanceOf(address(this)), token, isLPToken);\\n\\n        // only swap if a certain busd value\\n        if (busdValue < busdSwapThreshold)\\n            return;\\n\\n        swapDepositFeeForTokensInternal(token, isLPToken, busdCurrencyAddress);\\n    }\\n\\n    function swapDepositFeeForTokensInternal(address token, bool isLPToken, address toToken) internal {\\n        uint256 totalTokenBalance = IERC20(token).balanceOf(address(this));\\n\\n        // can't trade to dogs inside of dogs anyway\\n        if (token == toToken || totalTokenBalance == 0 || toToken == address(this))\\n            return;\\n\\n        if (isLPToken) {\\n            swapLpTokensForFee(token, totalTokenBalance);\\n            return;\\n        }\\n\\n        require(IERC20(token).approve(address(pancakeswapRouter), totalTokenBalance), \\\"!approved\\\");\\n\\n        address[] memory path;\\n        if (addLiquidityHelper.shouldRouteViaBNB(token)){\\n            path = new address[](3);\\n            path[0] = token;\\n            path[1] = wbnbCurrencyAddress;\\n            path[2] = toToken;\\n        } else {\\n            path = new address[](2);\\n            path[0] = token;\\n            path[1] = toToken;\\n        }\\n\\n        try\\n        // make the swap\\n        pancakeswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            totalTokenBalance,\\n            0, // accept any amount of tokens\\n            path,\\n            address(this),\\n            block.timestamp\\n        )\\n        { /* suceeded */ } catch { /* failed, but we avoided reverting */ }\\n\\n        // Unfortunately can't swap directly to dogs inside of dogs (Uniswap INVALID_TO Assert, boo).\\n        // Also dont want to add an extra swap here.\\n        // Will leave as BUSD and make the dogs Txn AMM utilise available BUSD first.\\n    }\\n\\n    /**\\n     * @dev Update the swapAndLiquifyEnabled.\\n     * Can only be called by the current operator.\\n     */\\n    function updateSwapAndLiquifyEnabled(bool _enabled) external onlyOperator {\\n        swapAndLiquifyEnabled = _enabled;\\n\\n        emit SetSwapAndLiquifyEnabled(swapAndLiquifyEnabled);\\n    }\\n\\n    /**\\n     * @dev Update the transfer tax rate.\\n     * Can only be called by the current operator.\\n     */\\n    function updateTransferTaxRate(uint256 _transferTaxRate, uint256 _extraTransferTaxRate) external onlyOperator {\\n        require(_transferTaxRate + _extraTransferTaxRate  <= MAXIMUM_TRANSFER_TAX_RATE, \\\"!valid\\\");\\n        transferTaxRate = _transferTaxRate;\\n        extraTransferTaxRate = _extraTransferTaxRate;\\n\\n        emit TransferFeeChanged(transferTaxRate, extraTransferTaxRate);\\n    }\\n\\n    /**\\n     * @dev Update the excludeFromMap\\n     * Can only be called by the current operator.\\n     */\\n    function updateFeeMaps(address _contract, bool fromExcluded, bool toExcluded, bool fromHasExtra, bool toHasExtra) external onlyOperator {\\n        excludeFromMap[_contract] = fromExcluded;\\n        excludeToMap[_contract] = toExcluded;\\n        extraFromMap[_contract] = fromHasExtra;\\n        extraToMap[_contract] = toHasExtra;\\n\\n        emit UpdateFeeMaps(_contract, fromExcluded, toExcluded, fromHasExtra, toHasExtra);\\n    }\\n\\n    /**\\n     * @dev Update the swap router.\\n     * Can only be called by the current operator.\\n     */\\n    function updatePancakeswapRouter(address _router) external onlyOperator {\\n        require(_router != address(0), \\\"!0\\\");\\n        require(address(pancakeswapRouter) == address(0), \\\"!unset\\\");\\n\\n        pancakeswapRouter = IUniswapV2Router02(_router);\\n        dogsBusdSwapPair = IUniswapV2Factory(pancakeswapRouter.factory()).getPair(address(this), busdCurrencyAddress);\\n\\n        require(address(dogsBusdSwapPair) != address(0), \\\"busd pair !exist\\\");\\n\\n        emit SetPancakeswapRouter(address(pancakeswapRouter), dogsBusdSwapPair);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current operator.\\n     */\\n    function operator() external view returns (address) {\\n        return _operator;\\n    }\\n\\n    /**\\n     * @dev Transfers operator of the contract to a new account (`newOperator`).\\n     * Can only be called by the current operator.\\n     */\\n    function transferOperator(address newOperator) external onlyOperator {\\n        require(newOperator != address(0), \\\"!!0\\\");\\n        _operator = newOperator;\\n\\n        emit SetOperator(_operator);\\n    }\\n\\n    function updateVaultLiqSplit(uint256 _vaultLiqSplit) external onlyOperator {\\n        require(_vaultLiqSplit > 1, 'invalid');\\n        vaultLiqSplit = _vaultLiqSplit;\\n        emit UpdateVaultLiqSplit(vaultLiqSplit);\\n    }\\n\\n    // AB measures\\n    function toggleExcludedFromLimiterUser(address account, bool isExcluded) external onlyOperator {\\n        require(buySellLimiterAllowed, 'feature destroyed');\\n        _isExcludedFromLimiter[account] = isExcluded;\\n        emit LimiterUserUpdated(account, isExcluded);\\n    }\\n\\n    function toggleBuySellLimiter(bool isEnabled, uint256 amount) external onlyOperator {\\n        require(buySellLimiterAllowed, 'feature destroyed');\\n        buySellLimiterEnabled = isEnabled;\\n        buySellLimitThreshold = amount;\\n        emit BuySellLimiterUpdate(isEnabled, amount);\\n    }\\n\\n    function burnLimiterFeature() external onlyOperator {\\n        buySellLimiterAllowed = false;\\n        emit LimiterFeatureBurn();\\n    }\\n\\n    function isBlacklisted(address account) public view returns(bool) {\\n        return blacklist[account];\\n    }\\n\\n    function toggleBlacklistUser(address account, bool blacklisted) external onlyOperator {\\n        require(blacklistFeatureAllowed, 'feature burned');\\n        blacklist[account] = blacklisted;\\n        emit BlacklistUpdated(account, blacklisted);\\n    }\\n\\n    function burnBlacklistingFeature() external onlyOperator {\\n        blacklistFeatureAllowed = false;\\n        emit BlacklistingFeatureBurn();\\n    }\\n\\n    function toggleSellingEnabled(bool enabled) external onlyOperator {\\n        require(sellingToggleAllowed, 'feature destroyed');\\n        sellingEnabled = enabled;\\n        emit SellingEnabledToggle(enabled);\\n    }\\n\\n    function burnToggleSellFeature() external onlyOperator {\\n        sellingToggleAllowed = false;\\n        emit SellingToggleFeatureBurn();\\n    }\\n\\n    function toggleTransfersPaused(bool isPaused) external onlyOperator {\\n        require(transfersPausedFeatureAllowed, 'feature destroyed');\\n        transfersPaused = isPaused;\\n        emit TransferStatusUpdate(isPaused);\\n    }\\n\\n    function burnTogglePauseFeature() external onlyOperator {\\n        transfersPausedFeatureAllowed = false;\\n        emit TransferPauseFeatureBurn();\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/AddLiquidityHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// AddLiquidityHelper, allows anyone to add or remove Dogs liquidity tax free\\n// Also allows the Dogs Token to do buy backs tax free via an external contract.\\ncontract AddLiquidityHelper is ReentrancyGuard, Ownable {\\n    using SafeERC20 for ERC20;\\n\\n    address public dogsTokenAddress;\\n    address public pigsTokenAddress;\\n\\n    IUniswapV2Router02 public constant pancakeswapRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    address public constant busdCurrencyAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address public constant wbnbCurrencyAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    address public dogsBusdPair;\\n\\n    mapping (address => bool) public viaWBNBTokens;\\n\\n    receive() external payable {}\\n\\n    event SetDogsAddresses(address dogsTokenAddress, address dogsBusdPair);\\n    event SetPigsAddresses(address pigsTokenAddress);\\n    event SetRouteTokenViaBNB(address tokenAddress, bool shouldRoute);\\n\\n\\n    modifier onlyDogsToken() {\\n        require(dogsTokenAddress == msg.sender, \\\"!dogsToken\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructs the AddLiquidityHelper contract.\\n     */\\n    constructor() {\\n\\n    }\\n\\n    function setRouteViaBNBToken(address _token, bool _viaWbnb) external onlyOwner {\\n        viaWBNBTokens[_token] = _viaWbnb;\\n        emit SetRouteTokenViaBNB(_token, _viaWbnb);\\n    }\\n\\n    function shouldRouteViaBNB(address _token) public view returns (bool){\\n        return viaWBNBTokens[_token];\\n    }\\n\\n    function dogsBUSDLiquidityWithBuyBack(address lpHolder) external onlyDogsToken nonReentrant {\\n        (uint256 res0, uint256 res1, ) = IUniswapV2Pair(dogsBusdPair).getReserves();\\n\\n        uint256 dogsTokenBalance = ERC20(dogsTokenAddress).balanceOf(address(this));\\n\\n        uint256 busdTokenBalance;\\n\\n        if (res0 != 0 && res1 != 0) {\\n            // making busd res0...\\n            if (IUniswapV2Pair(dogsBusdPair).token0() == dogsTokenAddress){\\n                (res1, res0) = (res0, res1);\\n            }\\n\\n            uint256 totalBUSDNeeded = (res0 * dogsTokenBalance) / res1;\\n\\n            uint256 existingBUSD = ERC20(busdCurrencyAddress).balanceOf(address(this));\\n\\n            uint256 unmatchedDogs = 0;\\n\\n            if (existingBUSD < totalBUSDNeeded) {\\n                // calculate how much dogs will match up with our existing busd.\\n                uint256 matchedDogs = (res1 * existingBUSD) / res0;\\n                if (dogsTokenBalance >= matchedDogs)\\n                    unmatchedDogs = dogsTokenBalance - matchedDogs;\\n            } else if (existingBUSD > totalBUSDNeeded) {\\n                // use excess BUSD for DOGS buy back\\n                uint256 excessBUSD = existingBUSD - totalBUSDNeeded;\\n\\n                if (excessBUSD / 2 > 0) {\\n                    // swap half of the excess busd for lp to be balanced\\n                    swapBUSDForTokens(excessBUSD / 2, dogsTokenAddress);\\n                }\\n            }\\n\\n            // swap tokens for BUSD\\n            if (unmatchedDogs / 2 > 0){\\n                swapTokensForBUSD(dogsTokenAddress, unmatchedDogs / 2);\\n            }\\n\\n            dogsTokenBalance = ERC20(dogsTokenAddress).balanceOf(address(this));\\n            busdTokenBalance = ERC20(busdCurrencyAddress).balanceOf(address(this));\\n\\n            // approve token transfer to cover all possible scenarios\\n            ERC20(dogsTokenAddress).approve(address(pancakeswapRouter), dogsTokenBalance);\\n            ERC20(busdCurrencyAddress).approve(address(pancakeswapRouter), busdTokenBalance);\\n\\n            pancakeswapRouter.addLiquidity(\\n                dogsTokenAddress,\\n                busdCurrencyAddress,\\n                    dogsTokenBalance,\\n                    busdTokenBalance,\\n                0, // slippage is unavoidable\\n                0, // slippage is unavoidable\\n                lpHolder,\\n                block.timestamp\\n            );\\n\\n        }\\n\\n        dogsTokenBalance = ERC20(dogsTokenAddress).balanceOf(address(this));\\n        busdTokenBalance = ERC20(busdCurrencyAddress).balanceOf(address(this));\\n\\n        if (dogsTokenBalance > 0){\\n            ERC20(dogsTokenAddress).transfer(msg.sender, dogsTokenBalance);\\n        }\\n        if (busdTokenBalance > 0){\\n            ERC20(busdCurrencyAddress).transfer(msg.sender, busdTokenBalance);\\n        }\\n    }\\n\\n    function addDogsETHLiquidity(uint256 nativeAmount) external payable nonReentrant {\\n        require(msg.value > 0, \\\"!sufficient funds\\\");\\n\\n        ERC20(dogsTokenAddress).safeTransferFrom(msg.sender, address(this), nativeAmount);\\n\\n        // approve token transfer to cover all possible scenarios\\n        ERC20(dogsTokenAddress).approve(address(pancakeswapRouter), nativeAmount);\\n\\n        // add the liquidity\\n        pancakeswapRouter.addLiquidityETH{value: msg.value}(\\n            dogsTokenAddress,\\n            nativeAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n                msg.sender,\\n            block.timestamp\\n        );\\n\\n        if (address(this).balance > 0) {\\n            // not going to require/check return value of this transfer as reverting behaviour is undesirable.\\n            payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        }\\n\\n        if (ERC20(dogsTokenAddress).balanceOf(address(this)) > 0)\\n            ERC20(dogsTokenAddress).transfer(msg.sender, ERC20(dogsTokenAddress).balanceOf(address(this)));\\n    }\\n\\n    function addDogsLiquidity(address baseTokenAddress, uint256 baseAmount, uint256 nativeAmount) external nonReentrant {\\n        ERC20(baseTokenAddress).safeTransferFrom(msg.sender, address(this), baseAmount);\\n        ERC20(dogsTokenAddress).safeTransferFrom(msg.sender, address(this), nativeAmount);\\n\\n        // approve token transfer to cover all possible scenarios\\n        ERC20(baseTokenAddress).approve(address(pancakeswapRouter), baseAmount);\\n        ERC20(dogsTokenAddress).approve(address(pancakeswapRouter), nativeAmount);\\n\\n        // add the liquidity\\n        pancakeswapRouter.addLiquidity(\\n            baseTokenAddress,\\n            dogsTokenAddress,\\n            baseAmount,\\n            nativeAmount ,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        uint256 baseTokenBalance = ERC20(baseTokenAddress).balanceOf(address(this));\\n        uint256 dogsTokenBalance = ERC20(dogsTokenAddress).balanceOf(address(this));\\n\\n        if (baseTokenBalance > 0)\\n            ERC20(baseTokenAddress).safeTransfer(msg.sender, baseTokenBalance);\\n\\n        if (dogsTokenBalance > 0)\\n            ERC20(dogsTokenAddress).transfer(msg.sender, dogsTokenBalance);\\n    }\\n\\n    function removeDogsLiquidity(address baseTokenAddress, uint256 liquidity) external nonReentrant {\\n        address lpTokenAddress = IUniswapV2Factory(pancakeswapRouter.factory()).getPair(baseTokenAddress, dogsTokenAddress);\\n        require(lpTokenAddress != address(0), \\\"pair hasn't been created yet, so can't remove liquidity!\\\");\\n\\n        ERC20(lpTokenAddress).safeTransferFrom(msg.sender, address(this), liquidity);\\n        // approve token transfer to cover all possible scenarios\\n        ERC20(lpTokenAddress).approve(address(pancakeswapRouter), liquidity);\\n\\n        // add the liquidity\\n        pancakeswapRouter.removeLiquidity(\\n            baseTokenAddress,\\n            dogsTokenAddress,\\n            liquidity,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            msg.sender,\\n            block.timestamp\\n        );\\n    }\\n\\n    function swapBUSDForTokens(uint256 busdAmount, address wantedTokenAddress) internal {\\n        require(ERC20(busdCurrencyAddress).balanceOf(address(this)) >= busdAmount, \\\"insufficient busd provided!\\\");\\n        require(wantedTokenAddress != address(0), \\\"wanted token address can't be the zero address!\\\");\\n\\n        address[] memory path;\\n        if (shouldRouteViaBNB(wantedTokenAddress)){\\n            path = new address[](3);\\n            path[0] = busdCurrencyAddress;\\n            path[1] = wbnbCurrencyAddress;\\n            path[2] = wantedTokenAddress;\\n        } else {\\n            path = new address[](2);\\n            path[0] = busdCurrencyAddress;\\n            path[1] = wantedTokenAddress;\\n        }\\n\\n\\n        // make the swap\\n        pancakeswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            busdAmount,\\n            0,\\n            path,\\n        // cannot send tokens to the token contract of the same type as the output token\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function swapTokensForBUSD(address saleTokenAddress, uint256 tokenAmount) internal {\\n        require(ERC20(saleTokenAddress).balanceOf(address(this)) >= tokenAmount, \\\"insufficient tokens provided!\\\");\\n        require(saleTokenAddress != address(0), \\\"wanted token address can't be the zero address!\\\");\\n\\n        address[] memory path;\\n        if (shouldRouteViaBNB(saleTokenAddress)){\\n            path = new address[](3);\\n            path[0] = saleTokenAddress;\\n            path[1] = wbnbCurrencyAddress;\\n            path[2] = busdCurrencyAddress;\\n        } else {\\n            path = new address[](2);\\n            path[0] = saleTokenAddress;\\n            path[1] = busdCurrencyAddress;\\n        }\\n\\n        ERC20(saleTokenAddress).approve(address(pancakeswapRouter), tokenAmount);\\n\\n        // make the swap\\n        pancakeswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function addPigsETHLiquidity(uint256 nativeAmount) external payable nonReentrant {\\n        require(msg.value > 0, \\\"!sufficient funds\\\");\\n\\n        ERC20(pigsTokenAddress).safeTransferFrom(msg.sender, address(this), nativeAmount);\\n\\n        // approve token transfer to cover all possible scenarios\\n        ERC20(pigsTokenAddress).approve(address(pancakeswapRouter), nativeAmount);\\n\\n        // add the liquidity\\n        pancakeswapRouter.addLiquidityETH{value: msg.value}(\\n            pigsTokenAddress,\\n            nativeAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        if (address(this).balance > 0) {\\n            // not going to require/check return value of this transfer as reverting behaviour is undesirable.\\n            payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        }\\n\\n        if (ERC20(pigsTokenAddress).balanceOf(address(this)) > 0)\\n            ERC20(pigsTokenAddress).transfer(msg.sender, ERC20(pigsTokenAddress).balanceOf(address(this)));\\n    }\\n\\n    function addPigsLiquidity(address baseTokenAddress, uint256 baseAmount, uint256 nativeAmount) external nonReentrant {\\n        ERC20(baseTokenAddress).safeTransferFrom(msg.sender, address(this), baseAmount);\\n        ERC20(pigsTokenAddress).safeTransferFrom(msg.sender, address(this), nativeAmount);\\n\\n        // approve token transfer to cover all possible scenarios\\n        ERC20(baseTokenAddress).approve(address(pancakeswapRouter), baseAmount);\\n        ERC20(pigsTokenAddress).approve(address(pancakeswapRouter), nativeAmount);\\n\\n        // add the liquidity\\n        pancakeswapRouter.addLiquidity(\\n            baseTokenAddress,\\n                pigsTokenAddress,\\n            baseAmount,\\n            nativeAmount ,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        uint256 baseTokenBalance = ERC20(baseTokenAddress).balanceOf(address(this));\\n        uint256 dogsTokenBalance = ERC20(dogsTokenAddress).balanceOf(address(this));\\n\\n        if (baseTokenBalance > 0)\\n            ERC20(baseTokenAddress).safeTransfer(msg.sender, baseTokenBalance);\\n\\n        if (dogsTokenBalance > 0)\\n            ERC20(pigsTokenAddress).transfer(msg.sender, dogsTokenBalance);\\n    }\\n\\n    /**\\n     * @dev set the Dogs address.\\n     * Can only be called by the current owner.\\n     */\\n    function setDogsAddress(address _dogsTokenAddress) external onlyOwner {\\n        require(_dogsTokenAddress != address(0), \\\"_dogsTokenAddress is the zero address\\\");\\n        require(dogsTokenAddress == address(0), \\\"dogsTokenAddress already set!\\\");\\n\\n        dogsTokenAddress = _dogsTokenAddress;\\n\\n        dogsBusdPair = IUniswapV2Factory(pancakeswapRouter.factory()).getPair(dogsTokenAddress, busdCurrencyAddress);\\n\\n        require(address(dogsBusdPair) != address(0), \\\"busd/dogs pair !exist\\\");\\n\\n        emit SetDogsAddresses(dogsTokenAddress, dogsBusdPair);\\n    }\\n\\n    /**\\n     * @dev set the Pigs address.\\n     * Can only be called by the current owner.\\n     */\\n    function setPigsAddress(address _pigsTokenAddress) external onlyOwner {\\n        require(_pigsTokenAddress != address(0), \\\"_pigsTokenAddress is the zero address\\\");\\n        require(pigsTokenAddress == address(0), \\\"pigsTokenAddress already set!\\\");\\n\\n        pigsTokenAddress = _pigsTokenAddress;\\n\\n        emit SetPigsAddresses(pigsTokenAddress);\\n    }\\n}\"\r\n    },\r\n    \"contracts/libs/ToolBox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\ncontract ToolBox {\\n\\n    IUniswapV2Router02 public constant pancakeswapRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    IUniswapV2Factory public constant pancakeswapFactory = IUniswapV2Factory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\\n    address public constant busdAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address public constant wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    // Stable coin addresses\\n    address public constant usdtAddress = 0x55d398326f99059fF775485246999027B3197955;\\n    address public constant usdcAddress = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\\n    address public constant tusdAddress = 0x23396cF899Ca06c4472205fC903bDB4de249D6fC;\\n    address public constant daiAddress = 0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3;\\n\\n    function convertToTargetValueFromPair(IUniswapV2Pair pair, uint256 sourceTokenAmount, address targetAddress) public view returns (uint256) {\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n\\n        require(token0 == targetAddress || token1 == targetAddress, \\\"one of the pairs must be the targetAddress\\\");\\n        if (sourceTokenAmount == 0)\\n            return 0;\\n\\n        (uint256 res0, uint256 res1, ) = pair.getReserves();\\n        if (res0 == 0 || res1 == 0)\\n            return 0;\\n\\n        if (token0 == targetAddress)\\n            return (res0 * sourceTokenAmount) / res1;\\n        else\\n            return (res1 * sourceTokenAmount) / res0;\\n    }\\n\\n    function getTokenBUSDValue(uint256 tokenBalance, address token, bool isLPToken) external view returns (uint256) {\\n        if (token == address(busdAddress)){\\n            return tokenBalance;\\n        }\\n\\n        // lp type\\n        if (isLPToken) {\\n            IUniswapV2Pair lpToken = IUniswapV2Pair(token);\\n            IERC20 token0 = IERC20(lpToken.token0());\\n            IERC20 token1 = IERC20(lpToken.token1());\\n            uint256 totalSupply = lpToken.totalSupply();\\n\\n            if (totalSupply == 0){\\n                return 0;\\n            }\\n\\n            // If lp contains stablecoin, we can take a short-cut\\n            if (isStablecoin(address(token0))) {\\n                return (token0.balanceOf(address(lpToken)) * tokenBalance * 2) / totalSupply;\\n            } else if (isStablecoin(address(token1))){\\n                return (token1.balanceOf(address(lpToken)) * tokenBalance * 2) / totalSupply;\\n            }\\n        }\\n\\n        // Only used for lp type tokens.\\n        address lpTokenAddress = token;\\n\\n\\n        // If token0 or token1 is wbnb, use that, else use token0.\\n        if (isLPToken) {\\n            token = IUniswapV2Pair(token).token0() == wbnbAddress ? wbnbAddress :\\n            (IUniswapV2Pair(token).token1() == wbnbAddress ? wbnbAddress : IUniswapV2Pair(token).token0());\\n        }\\n\\n        // if it is an LP token we work with all of the reserve in the LP address to scale down later.\\n        uint256 tokenAmount = (isLPToken) ? IERC20(token).balanceOf(lpTokenAddress) : tokenBalance;\\n\\n        uint256 busdEquivalentAmount = 0;\\n\\n        // As we arent working with busd at this point (early return), this is okay.\\n        IUniswapV2Pair busdPair = IUniswapV2Pair(pancakeswapFactory.getPair(address(busdAddress), token));\\n        if (address(busdPair) == address(0)){\\n            return 0;\\n        }\\n        busdEquivalentAmount = convertToTargetValueFromPair(busdPair, tokenAmount, busdAddress);\\n\\n        if (isLPToken)\\n            return (busdEquivalentAmount * tokenBalance * 2) / IUniswapV2Pair(lpTokenAddress).totalSupply();\\n        else\\n            return busdEquivalentAmount;\\n    }\\n\\n    function isStablecoin(address _tokenAddress) public view returns(bool){\\n        return _tokenAddress == busdAddress ||\\n        _tokenAddress == usdtAddress ||\\n        _tokenAddress == usdcAddress ||\\n        _tokenAddress == tusdAddress ||\\n        _tokenAddress == daiAddress;\\n    }\\n\\n}\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pigsToken\",\"type\":\"address\"},{\"internalType\":\"contract AddLiquidityHelper\",\"name\":\"_addLiquidityHelper\",\"type\":\"address\"},{\"internalType\":\"contract ToolBox\",\"name\":\"_toolBox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsVaultAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"name\":\"BlacklistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BlacklistingFeatureBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuySellLimiterUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LimiterFeatureBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLimited\",\"type\":\"bool\"}],\"name\":\"LimiterUserUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SellingEnabledToggle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SellingToggleFeatureBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pancakeswapRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dogsBusdSwapPair\",\"type\":\"address\"}],\"name\":\"SetPancakeswapRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapAndLiquifyEnabled\",\"type\":\"bool\"}],\"name\":\"SetSwapAndLiquifyEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txnFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extraTxnFee\",\"type\":\"uint256\"}],\"name\":\"TransferFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransferPauseFeatureBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"TransferStatusUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fromExcluded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"toExcluded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fromHasExtra\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"toHasExtra\",\"type\":\"bool\"}],\"name\":\"UpdateFeeMaps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqVaultSplit\",\"type\":\"uint256\"}],\"name\":\"UpdateVaultLiqSplit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_TRANSFER_TAX_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityHelper\",\"outputs\":[{\"internalType\":\"contract AddLiquidityHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnBlacklistingFeature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnLimiterFeature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnTogglePauseFeature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnToggleSellFeature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdCurrencyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdRewardCurrency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dogsBusdSwapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeFromMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeToMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"extraFromMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"extraToMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraTransferTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBUSDAmountToLiquify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDogsAmountToLiquify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pigsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLPToken\",\"type\":\"bool\"}],\"name\":\"swapDepositFeeForBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"name\":\"toggleBlacklistUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"toggleBuySellLimiter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"toggleExcludedFromLimiterUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"toggleSellingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"toggleTransfersPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toolBox\",\"outputs\":[{\"internalType\":\"contract ToolBox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromExcluded\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"toExcluded\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"fromHasExtra\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"toHasExtra\",\"type\":\"bool\"}],\"name\":\"updateFeeMaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updatePancakeswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_extraTransferTaxRate\",\"type\":\"uint256\"}],\"name\":\"updateTransferTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultLiqSplit\",\"type\":\"uint256\"}],\"name\":\"updateVaultLiqSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultLiqSplit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbCurrencyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DogsToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003a4c15f96b3b058ab3fb5faf1440cc19e7ae07ce000000000000000000000000ae672d88eff0bc3f561044e7f41ee7099610fa97000000000000000000000000bdc9269586a2f17a26ba28de5af6526e673cb0fc00000000000000000000000086d49b311ab9b3797a49199c3bb4b0caeaf2ce85", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}