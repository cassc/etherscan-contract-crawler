{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.18;\r\n\r\n// ContractUtils Library\r\nlibrary ContractUtils {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IPancakeRouter {\r\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // Use the library name as a prefix for the function call\r\n        require(ContractUtils.isContract(address(token)), \"SafeERC20: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n} // Ensure this brace closes SafeERC20\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    bool internal locked;\r\n\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}\r\ncontract AbundanceDefi is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address private USDT_address = 0x55d398326f99059fF775485246999027B3197955;\r\n    address private WealthToken_address = 0xa9d398823B2CEb247cB47C5CB22be03Fb7c73ACb;\r\n\r\n    IERC20 public USDTToken;\r\n    IERC20 public WealthToken;\r\n    IPancakeRouter public pancakeRouter;\r\n\r\n    uint256 public constant PERCENTS_DIVIDER = 1000;\r\n    uint256 public constant ADMIN_FEE = 40;\r\n    uint256 public constant ORIGIN_REFERRER_FEE = 750;\r\n    uint256 public REFERRAL_BREAK_STEP = 4;\r\n    uint256 public ADD_LIQUIDITY_STEP = 50 ether;\r\n    bool public ADD_LIQUIDITY_ENABLED = true;\r\n    uint256[] public REFERRAL_PERCENTS = [390, 120, 75, 40, 35, 30, 25, 20, 15, 10];\r\n    uint256[] public LEVEL_PRICE = [2.5 ether, 5 ether, 10 ether, 25 ether, 50 ether, 100 ether, 250 ether, 500 ether, 1000 ether, 2500 ether];\r\n    uint256[] public UNLOCK_TOKEN_DISTRIBUTION = [250 ether, 500 ether, 1_000 ether, 2_500 ether, 5_000 ether, 10_000 ether, 25_000 ether, 50_000 ether, 100_000 ether, 250_000 ether];\r\n    uint256[] public REFERRAL_TOKEN_DISTRIBUTION = [15 ether, 25 ether, 50 ether, 100 ether, 200 ether, 500 ether, 1_250 ether, 2_000 ether, 4_000 ether, 10_000 ether];\r\n\r\n    uint256 public totalParticipate;\r\n    uint256 public totalUSDTReferral;\r\n    uint256 public totalWealthTokenReferral;\r\n    uint256 public totalWealthTokenJoinReward;\r\n    uint256 public totalMissedUSDT;\r\n    uint256 public totalUser;\r\n\r\n    struct User {\r\n        uint256 start;\r\n        address referrer;\r\n        address originReferrer;\r\n        uint256 currentLevel;\r\n        uint256 totalDeposit;\r\n        uint256 directReferralCount;\r\n        uint256 breakCount;\r\n        uint256 totalJoinReward;\r\n        uint256 totalTokenDirectReward;\r\n        uint256 totalTokenRewardPayed;\r\n        mapping(uint256 => address) directReferrals;\r\n        uint256[10] levels;\r\n        uint256[10] commissionsUSDT;\r\n        uint256[10] teamTurnover;\r\n        uint256[10] MissedUSDT;\r\n        uint256[10] missedCommissionsUSDT;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n\r\n    address payable public projectWallet;\r\n    address payable public FeeWallet;\r\n    address payable public marketingWallet;\r\n\r\n    bool public init = false;\r\n\r\n    event Newbie(address user);\r\n    event NewParticipate(address indexed user, uint256 time);\r\n    event NewReward(address indexed user, uint256 totalDeposit, uint256 reward, uint256 round, uint256 time);\r\n    event RefBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\r\n    event referralTokenReward(address indexed referrer, address indexed referral, uint256 amount);\r\n    event FeePayed(address indexed user, uint256 amount);\r\n    event unlockTokenReward(address indexed user, uint256 amount);\r\n\r\n   constructor(address payable _projectWallet, address payable _marketingWallet, address payable _feeWallet) {\r\n    require(_projectWallet != address(0), \"Project wallet address cannot be zero\");\r\n    require(_marketingWallet != address(0), \"Marketing wallet address cannot be zero\");\r\n    require(_feeWallet != address(0), \"Fee wallet address cannot be zero\");\r\n    \r\nprojectWallet = payable(0xefeA72adfB19b8e83718cE8846a94B08ee08e5a4);\r\nmarketingWallet = payable(0x035735Bb4C8496d5C4B8637F06326f6D6D47ebaf);\r\nFeeWallet = payable(0x3AAb43608c86983e852C2129d24c2E9c5ccD9E7d);\r\n\t\r\n        USDTToken = IERC20(USDT_address);\r\n        WealthToken = IERC20(WealthToken_address);\r\n        pancakeRouter = IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    }\r\n\r\n// initialized the Project\r\nfunction launch() public onlyOwner {\r\n    require(!init, \"Contract already launched\");\r\n    init = true;\r\n    users[projectWallet].start = block.timestamp;\r\n    users[projectWallet].currentLevel = 9;\r\n    pancakeRouter = IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n}\r\n\r\n// Structs for User and UserLevel data\r\nstruct UserLevelData {\r\n    uint256[] levels;\r\n    uint256[] commissionsUSDT;\r\n    uint256[] missedCommissionsUSDT;\r\n    uint256[] turnoverData;\r\n}\r\n\r\nstruct UserData {\r\n    address userAddress;\r\n    uint256 start;\r\n    uint256 level;\r\n    uint256 totalDeposit;\r\n    uint256 breakCount;\r\n    address referrer;\r\n    address originReferrer;\r\n    address[] directReferrals;\r\n}\r\n\r\n// Function for batch migration of user data\r\n    function migrateBatchUserData(\r\n        UserData[] calldata userData,\r\n        UserLevelData[] calldata userLevelData\r\n    ) external onlyOwner {\r\n        require(userData.length == userLevelData.length, \"Data length mismatch\");\r\n\r\n        for (uint256 i = 0; i < userData.length; i++) {\r\n            User storage user = users[userData[i].userAddress];\r\n            user.start = userData[i].start;\r\n            user.currentLevel = userData[i].level;\r\n            user.totalDeposit = userData[i].totalDeposit;\r\n            user.breakCount = userData[i].breakCount;\r\n            user.referrer = userData[i].referrer;\r\n            user.originReferrer = userData[i].originReferrer;\r\n\r\n            // Handle direct referrals\r\n            for (uint256 j = 0; j < userData[i].directReferrals.length; j++) {\r\n                user.directReferrals[j] = userData[i].directReferrals[j];\r\n            }\r\n\r\n            // Handle level data\r\n            for (uint256 k = 0; k < 10; k++) {\r\n                user.levels[k] = userLevelData[i].levels[k];\r\n                user.commissionsUSDT[k] = userLevelData[i].commissionsUSDT[k];\r\n                user.missedCommissionsUSDT[k] = userLevelData[i].missedCommissionsUSDT[k];\r\n                user.teamTurnover[k] = userLevelData[i].turnoverData[k];\r\n            }\r\n        }\r\n    }\r\n\r\n// Function to transfer LP Tokens\r\n    function transferLPTokens(address lpTokenAddress, uint256 amount) external onlyOwner {\r\n        IERC20 lpToken = IERC20(lpTokenAddress);\r\n        require(lpToken.balanceOf(address(this)) >= amount, \"Insufficient LP tokens\");\r\n        lpToken.safeTransfer(owner(), amount);\r\n    }\r\n\r\n    // Function to withdraw specific tokens from the contract\r\n    function withdrawTokens(address tokenAddress, uint256 amount) external onlyOwner {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(token.balanceOf(address(this)) >= amount, \"Insufficient token balance\");\r\n        token.safeTransfer(owner(), amount);\r\n    }\r\n\r\n    // Function to activate a package for a user\r\n    function activatePackageForUser(address userAddress, uint256 level, address upline) external onlyOwner {\r\n        require(users[userAddress].start == 0, \"User already activated\");\r\n        require(level >= 0 && level <= 9, \"Invalid level\");\r\n\r\n        User storage user = users[userAddress];\r\n        user.start = block.timestamp;\r\n        user.currentLevel = level;\r\n        user.referrer = upline;\r\n\r\n        _updateUplineTurnover(upline, LEVEL_PRICE[level]);\r\n        emit Newbie(userAddress);\r\n    }\r\n\r\n    // Function to upgrade a member's package\r\n    function upgradeMemberPackage(address member, uint256 newPackageLevel) external onlyOwner {\r\n        require(users[member].currentLevel < newPackageLevel, \"Already at this level or higher\");\r\n        require(newPackageLevel >= 0 && newPackageLevel <= 9, \"Invalid level\");\r\n\r\n        User storage user = users[member];\r\n        user.currentLevel = newPackageLevel;\r\n    }\r\n\r\n    // Function to pay and upgrade a member's package\r\n    function payToUpgradeMember(address member, uint256 newPackageLevel) public {\r\n        require(users[member].currentLevel < newPackageLevel, \"Member already at this level or higher\");\r\n        require(newPackageLevel >= 0 && newPackageLevel <= 9, \"Invalid level\");\r\n        require(USDTToken.allowance(msg.sender, address(this)) >= LEVEL_PRICE[newPackageLevel], \"Low allowance for USDT\");\r\n\r\n        USDTToken.safeTransferFrom(msg.sender, address(this), LEVEL_PRICE[newPackageLevel]);\r\n        users[member].currentLevel = newPackageLevel;\r\n    }\r\n\r\n    // Function to unlock a new level for a user\r\n    function unlockLevel(address _upline, uint256 _level, uint256 _amount) public noReentrant {\r\n        require(init, \"Not Started Yet\");\r\n\r\n        User storage user = users[msg.sender];\r\n        require(_level >= 0 && _level <= 9, \"Enter correct level\");\r\n\r\n        if(user.totalDeposit > 0){\r\n            require(user.currentLevel < _level, \"You activated this level\");\r\n        }\r\n        \r\n        require(_amount + user.totalDeposit == LEVEL_PRICE[_level], \"Wrong activate amount\");\r\n        require(_amount <= USDTToken.allowance(msg.sender, address(this)),\"Low allowance for USDT\");\r\n        USDTToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        user.currentLevel = _level;\r\n\r\n        _setUpline(_upline);\r\n        _updateUplineTurnover(user.referrer, _amount);\r\n        _payCommission(_amount);\r\n\r\n        uint256 MarketingFee = _amount * ADMIN_FEE / PERCENTS_DIVIDER;\r\n        USDTToken.safeTransfer(marketingWallet, MarketingFee);\r\n        emit FeePayed(msg.sender, MarketingFee);\r\n\r\n        uint256 tokenJoinReward = UNLOCK_TOKEN_DISTRIBUTION[_level] - user.totalJoinReward;\r\n        user.totalJoinReward += tokenJoinReward;\r\n        totalWealthTokenJoinReward += tokenJoinReward;\r\n        WealthToken.safeTransfer(msg.sender, tokenJoinReward);\r\n        emit unlockTokenReward(msg.sender, tokenJoinReward);\r\n\r\n        if(getContractUSDTBalance() >= ADD_LIQUIDITY_STEP && ADD_LIQUIDITY_ENABLED){\r\n            _handleAddLiquidity(getContractUSDTBalance());\r\n        }\r\n\r\n        totalUser++;\r\n        if(user.start == 0){\r\n            user.start = block.timestamp;\r\n            emit Newbie(msg.sender);\r\n        }\r\n        user.totalDeposit += _amount;\r\n        \r\n        totalParticipate += _amount;\r\n        emit NewParticipate(msg.sender, block.timestamp);\r\n    }\r\n\r\n    // Internal function to set the upline for a user\r\n    function _setUpline(address _upline) private {\r\n    address currentUpline = _upline;\r\n\r\n    while (currentUpline != address(0)) {\r\n        User storage uplineUser = users[currentUpline];\r\n\r\n        if (uplineUser.start > 0 || currentUpline == projectWallet) {\r\n            uplineUser.directReferralCount++;\r\n            if (users[msg.sender].originReferrer == address(0)) {\r\n                users[msg.sender].originReferrer = currentUpline;\r\n            }\r\n            if (uplineUser.directReferralCount % REFERRAL_BREAK_STEP == 0) {\r\n                address newUpline = uplineUser.directReferrals[uplineUser.breakCount];\r\n                uplineUser.breakCount++;\r\n                if (newUpline != address(0)) {\r\n                    currentUpline = newUpline;\r\n                } else {\r\n                    currentUpline = projectWallet;\r\n                }\r\n            } else {\r\n                users[msg.sender].referrer = currentUpline;\r\n                uplineUser.directReferrals[uplineUser.directReferralCount - 1] = msg.sender;\r\n                break; // Terminate the loop as we've set the referrer\r\n            }\r\n        } else {\r\n            revert(\"Invalid referrer address\");\r\n        }\r\n    }\r\n}\r\n    // Internal function to update the upline turnover\r\n    function _updateUplineTurnover(address upline, uint256 depositAmount) internal {\r\n        for (uint256 i = 0; i < REFERRAL_PERCENTS.length; i++) {\r\n            if (upline != address(0)) {\r\n                users[upline].teamTurnover[i] += depositAmount;\r\n                upline = users[upline].referrer;\r\n            } else break;\r\n        }\r\n    }\r\n\r\n    // Public function to manually add liquidity\r\n    function manualAddLiquidity() public onlyOwner {\r\n        if(getContractUSDTBalance() >= ADD_LIQUIDITY_STEP && ADD_LIQUIDITY_ENABLED){\r\n            _handleAddLiquidity(getContractUSDTBalance());\r\n        }\r\n    }\r\n\r\n    // Internal function to handle adding liquidity\r\n    function _handleAddLiquidity(uint256 contractUSDTBalance) private {\r\n        uint256 amountUSDTToSpend = contractUSDTBalance / 2;\r\n        USDTToken.approve(address(pancakeRouter), amountUSDTToSpend);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(USDT_address);\r\n        path[1] = address(WealthToken_address);\r\n\r\n        uint[] memory amounts = pancakeRouter.swapExactTokensForTokens(amountUSDTToSpend, 0, path, address(this), block.timestamp + 10 minutes);\r\n        \r\n        uint256 amountToken = amounts[1];\r\n        uint256 amountUSDT = USDTToken.balanceOf(address(this));\r\n        WealthToken.approve(address(pancakeRouter), amountToken);\r\n        USDTToken.approve(address(pancakeRouter), amountUSDT);\r\n\r\n        pancakeRouter.addLiquidity(address(WealthToken_address), address(USDT_address), amountToken, amountUSDT, 0, 0, address(this), block.timestamp + 10 minutes);\r\n    }\r\n\r\n    // Internal function to pay commissions\r\n    function _payCommission(uint256 _amount) internal {\r\n        User storage user = users[msg.sender];\r\n        address upline = user.referrer;\r\n        address originUpline = user.originReferrer;\r\n        uint256 resCommission;\r\n        uint256 amountRef;\r\n        uint256 finalOriginUSDTCommission;\r\n        for (uint256 i = 0; i < REFERRAL_PERCENTS.length; i++) {\r\n            finalOriginUSDTCommission = _amount;\r\n            if(upline != address(0) && user.currentLevel > users[upline].currentLevel && LEVEL_PRICE[users[upline].currentLevel] > user.totalDeposit){\r\n                finalOriginUSDTCommission = LEVEL_PRICE[users[upline].currentLevel] - user.totalDeposit;\r\n            }\r\n            amountRef = finalOriginUSDTCommission * REFERRAL_PERCENTS[i] / PERCENTS_DIVIDER;\r\n            if (upline != address(0) && LEVEL_PRICE[users[upline].currentLevel] > user.totalDeposit) {\r\n                if(i == 0){\r\n                    uint256 WealthTokenCommission = REFERRAL_TOKEN_DISTRIBUTION[user.currentLevel] - user.totalTokenDirectReward;\r\n                    if(user.currentLevel > users[upline].currentLevel){\r\n                        WealthTokenCommission = REFERRAL_TOKEN_DISTRIBUTION[users[upline].currentLevel] - user.totalTokenDirectReward;\r\n                    }\r\n                    if(upline != originUpline){\r\n                        uint256 WealthTokenCommissionOrigin = WealthTokenCommission * ORIGIN_REFERRER_FEE / PERCENTS_DIVIDER;\r\n                        WealthTokenCommission = WealthTokenCommission - WealthTokenCommissionOrigin;\r\n                        user.totalTokenDirectReward += WealthTokenCommissionOrigin;\r\n                        users[originUpline].totalTokenRewardPayed += WealthTokenCommissionOrigin;\r\n                        totalWealthTokenReferral += WealthTokenCommissionOrigin;\r\n                        WealthToken.safeTransfer(originUpline, WealthTokenCommissionOrigin);\r\n                        emit referralTokenReward(originUpline, msg.sender, WealthTokenCommissionOrigin);\r\n                    }\r\n                    user.totalTokenDirectReward +=  WealthTokenCommission;\r\n                    users[upline].totalTokenRewardPayed += WealthTokenCommission;\r\n                    WealthToken.safeTransfer(upline, WealthTokenCommission);\r\n                    totalWealthTokenReferral += WealthTokenCommission;\r\n                    emit referralTokenReward(upline, msg.sender, WealthTokenCommission);\r\n                }\r\n                users[upline].commissionsUSDT[i] += amountRef;\r\n                USDTToken.safeTransfer(upline, amountRef);\r\n                totalUSDTReferral += amountRef;\r\n                emit RefBonus(upline, msg.sender, i, amountRef);\r\n\r\n                if(user.currentLevel > users[upline].currentLevel){\r\n                    uint256 restLevelAmount = (_amount * REFERRAL_PERCENTS[i] / PERCENTS_DIVIDER) - amountRef;\r\n                    totalMissedUSDT += restLevelAmount;\r\n                    users[upline].MissedUSDT[i] += restLevelAmount;\r\n                    resCommission += restLevelAmount;\r\n                }\r\n                \r\n                upline = users[upline].referrer;\r\n            }else{\r\n                totalMissedUSDT += amountRef;\r\n                users[upline].MissedUSDT[i] += amountRef;\r\n                resCommission += amountRef;\r\n                \r\n                if(upline != address(0)){\r\n                    upline = users[upline].referrer;\r\n                }\r\n            }\r\n        }\r\n        if(resCommission > 0){\r\n            USDTToken.safeTransfer(FeeWallet, resCommission);\r\n        }\r\n    }\r\n\t// Function to get the contract's USDT balance\r\n    function getContractUSDTBalance() public view returns (uint256) {\r\n        return USDTToken.balanceOf(address(this));\r\n    }\r\n\r\n    // Function to get the contract's WealthToken balance\r\n    function getContractWealthTokenBalance() public view returns (uint256) {\r\n        return WealthToken.balanceOf(address(this));\r\n    }\r\n\r\n    // Function to get a user's total USDT earnings\r\n    function getUserTotalUSDTEarn(address userAddress) public view returns (uint256) {\r\n        uint256 totalUSDTCommissions;\r\n        for(uint256 i = 0; i < 10; i++) {\r\n            totalUSDTCommissions += users[userAddress].commissionsUSDT[i];\r\n        }\r\n        return totalUSDTCommissions;\r\n    }\r\n\r\n    // Function to get a user's total missed USDT\r\n    function getUserTotalMissedUSDT(address userAddress) public view returns (uint256) {\r\n        uint256 totalUSDTMissed;\r\n        for(uint256 i = 0; i < 10; i++) {\r\n            totalUSDTMissed += users[userAddress].MissedUSDT[i];\r\n        }\r\n        return totalUSDTMissed;\r\n    }\r\n\r\n    // Function to get a user's total WealthToken earnings\r\n    function getUserTotalWealthTokenEarn(address userAddress) public view returns (uint256) {\r\n        return users[userAddress].totalTokenRewardPayed;\r\n    }\r\n\r\n    // Function to get a user's total team turnover\r\n    function getUserTotalTeamTurnover(address userAddress) public view returns (uint256) {\r\n        uint256 teamTurnover;\r\n        for(uint256 i = 0; i < 10; i++) {\r\n            teamTurnover += users[userAddress].teamTurnover[i];\r\n        }\r\n        return teamTurnover;\r\n    }\r\n\r\n    // Function to get a user's referrer\r\n    function getUserReferrer(address userAddress) public view returns (address) {\r\n        return users[userAddress].referrer;\r\n    }\r\n\r\n    // Function to get a user's direct referral mapping\r\n    function getUserDirectReferralMapping(address userAddress, uint256 _index) public view returns (address) {\r\n        return users[userAddress].directReferrals[_index];\r\n    }\r\n\r\n    // Function to get a user's downline count\r\n    function getUserDownlineCount(address userAddress) public view returns (uint256[10] memory referrals) {\r\n        return users[userAddress].levels;\r\n    }\r\n\r\n    // Function to get a user's missed USDT\r\n    function getUserMissedUSDT(address userAddress) public view returns (uint256[10] memory missed) {\r\n        return users[userAddress].MissedUSDT;\r\n    }\r\n\r\n    // Function to get a user's team turnover\r\n    function getUserTeamTurnover(address userAddress) public view returns (uint256[10] memory turnover) {\r\n        return users[userAddress].teamTurnover;\r\n    }\r\n\r\n    // Function to get a user's USDT commissions\r\n    function getUserUSDTCommissions(address userAddress) public view returns (uint256[10] memory commissions) {\r\n        return users[userAddress].commissionsUSDT;\r\n    }\r\n\r\n    // Function to get a user's total referrals\r\n    function getUserTotalReferrals(address userAddress) public view returns (uint256) {\r\n        return users[userAddress].levels[0];\r\n    }\r\n\r\n    // Function to get a user's total referrals count\r\n    function getUserTotalReferralsCount(address userAddress) public view returns (uint256[10] memory count) {\r\n        return users[userAddress].levels;\r\n    }\r\n\r\n    // Function to get a user's total downline\r\n    function getUserTotalDownline(address userAddress) public view returns (uint256) {\r\n        uint256 downlineCount;\r\n        for(uint256 i = 0; i < 10; i++) {\r\n            downlineCount += users[userAddress].levels[i];\r\n        }\r\n        return downlineCount;\r\n    }\r\n\r\n    // Function to get site info\r\n    function getSiteInfo() public view returns (\r\n        uint256 _totalInvested,\r\n        uint256 _totalUSDTBonus,\r\n        uint256 _totalWealthTokenBonus,\r\n        uint256 _totalUser,\r\n        uint256 _contractUSDTBalance,\r\n        uint256 _contractWealthTokenBalance,\r\n        uint256 _totalMissedUSDT,\r\n        uint256 _totalWealthTokenJoinReward,\r\n        uint256 _totalWealthTokenReward\r\n    ) {\r\n        return (\r\n            totalParticipate, \r\n            totalUSDTReferral,\r\n            totalWealthTokenReferral, \r\n            totalUser, \r\n            getContractUSDTBalance(), \r\n            getContractWealthTokenBalance(), \r\n            totalMissedUSDT, \r\n            totalWealthTokenJoinReward, \r\n            totalWealthTokenReferral + totalWealthTokenJoinReward\r\n        );\r\n    }\r\n\r\n    // Function to get user info\r\n    function getUserInfo(address userAddress) public view returns (\r\n        uint256 startCheckpoint,\r\n        uint256 downlineCount,\r\n        uint256 userTotalUSDTCommissions,\r\n        uint256 userTotalWealthTokenCommissions,\r\n        uint256 userTotalMissedUSDT,\r\n        uint256 currentLevel,\r\n        uint256 totalDeposit\r\n    ) {\r\n        return (\r\n            users[userAddress].start,\r\n            getUserTotalDownline(userAddress),\r\n            getUserTotalUSDTEarn(userAddress),\r\n            getUserTotalWealthTokenEarn(userAddress),\r\n            getUserTotalMissedUSDT(userAddress),\r\n            users[userAddress].currentLevel,\r\n            users[userAddress].totalDeposit\r\n        );\r\n    }\r\n\r\n    // Function to get user total WealthToken reward\r\n    function getUserTotalWealthTokenReward(address userAddress) public view returns (uint256) {\r\n        return getUserTotalWealthTokenEarn(userAddress) + users[userAddress].totalJoinReward;\r\n    }\r\n\r\n    // Function to get require amount to activate\r\n    function getRequireAmountToActivate(address userAddress) public view returns (uint256) {\r\n        uint256 amount;\r\n        User storage user = users[userAddress];\r\n        amount = LEVEL_PRICE[user.currentLevel] - user.totalDeposit;\r\n        return amount;\r\n    }\r\n\r\n    // Function to set add liquidity step\r\n    function setAddLiquidityStep(uint256 amount) public onlyOwner {\r\n        ADD_LIQUIDITY_STEP = amount;\r\n    }\r\n\r\n    // Function to set add liquidity status\r\n    function setAddLiquidityStatus(bool status) public onlyOwner {\r\n        ADD_LIQUIDITY_ENABLED = status;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_projectWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NewParticipate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NewReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"referralTokenReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockTokenReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADD_LIQUIDITY_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADD_LIQUIDITY_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FeeWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORIGIN_REFERRER_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_BREAK_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_TOKEN_DISTRIBUTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UNLOCK_TOKEN_DISTRIBUTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WealthToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"}],\"name\":\"activatePackageForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractUSDTBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractWealthTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getRequireAmountToActivate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalUSDTBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWealthTokenBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contractUSDTBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contractWealthTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalMissedUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWealthTokenJoinReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWealthTokenReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserDirectReferralMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineCount\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"referrals\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startCheckpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downlineCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userTotalUSDTCommissions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userTotalWealthTokenCommissions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userTotalMissedUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserMissedUSDT\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"missed\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTeamTurnover\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"turnover\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDownline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalMissedUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalReferralsCount\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"count\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalTeamTurnover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalUSDTEarn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWealthTokenEarn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWealthTokenReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserUSDTCommissions\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"commissions\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"breakCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originReferrer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"directReferrals\",\"type\":\"address[]\"}],\"internalType\":\"struct AbundanceDefi.UserData[]\",\"name\":\"userData\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"levels\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"commissionsUSDT\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"missedCommissionsUSDT\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"turnoverData\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AbundanceDefi.UserLevelData[]\",\"name\":\"userLevelData\",\"type\":\"tuple[]\"}],\"name\":\"migrateBatchUserData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPackageLevel\",\"type\":\"uint256\"}],\"name\":\"payToUpgradeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAddLiquidityStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAddLiquidityStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMissedUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalParticipate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUSDTReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWealthTokenJoinReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWealthTokenReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferLPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlockLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPackageLevel\",\"type\":\"uint256\"}],\"name\":\"upgradeMemberPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originReferrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directReferralCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"breakCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalJoinReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenDirectReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenRewardPayed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AbundanceDefi", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000efea72adfb19b8e83718ce8846a94b08ee08e5a4000000000000000000000000035735bb4c8496d5c4b8637f06326f6d6d47ebaf0000000000000000000000003aab43608c86983e852c2129d24c2e9c5ccd9e7d", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d6c16feaf761fa599695730fae6c372d1887522c31edf26a1fcfacf134de1abf"}