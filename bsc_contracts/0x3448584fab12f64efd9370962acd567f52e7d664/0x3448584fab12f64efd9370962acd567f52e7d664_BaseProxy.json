{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/BaseProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./UpgradeOwnable.sol\\\";\\r\\nimport \\\"../interfaces/IUpgradeable.sol\\\";\\r\\nimport \\\"../interfaces/IProxy.sol\\\";\\r\\n\\r\\n/// @title Proxy Contract\\r\\n/// @dev NOTICE: Proxy must implement UpgradeableMaster interface to prevent calling some function of it not by master of proxy\\r\\n/// @author Kontos\\r\\ncontract BaseProxy is IProxy, IUpgradeable, UpgradeableOwnable {\\r\\n    /// @dev Storage position of \\\"target\\\" (actual implementation address: keccak256('eip1967.proxy.implementation') - 1)\\r\\n    bytes32 private constant TARGET_POSITION = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n\\r\\n    /// @notice Contract constructor\\r\\n    /// @dev Calls Ownable contract constructor and initialize target\\r\\n    /// @param target Initial implementation address\\r\\n    /// @param targetInitializationParameters Target initialization parameters\\r\\n    constructor(address target, bytes memory targetInitializationParameters) {\\r\\n        setMaster(msg.sender);\\r\\n        setTarget(target);\\r\\n        if (targetInitializationParameters.length != 0) {\\r\\n            (bool initializationSuccess,bytes memory _revertRes) = getTarget().delegatecall(\\r\\n                abi.encodeWithSignature(\\\"initialize(bytes)\\\", targetInitializationParameters)\\r\\n            );\\r\\n            require(initializationSuccess, string(_revertRes));\\r\\n        }\\r\\n        // uin11 - target initialization failed\\r\\n    }\\r\\n\\r\\n    function initialize(bytes calldata initializationParameters) external override {\\r\\n        revert(\\\"uii11\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Intercepts upgrade calls\\r\\n    function upgrade(bytes calldata) external pure virtual {\\r\\n        revert(\\\"upg11\\\");\\r\\n        // upg11 - interception of upgrade call\\r\\n    }\\r\\n\\r\\n    /// @notice Returns target of contract\\r\\n    /// @return target Actual implementation address\\r\\n    function getTarget() public view returns (address target) {\\r\\n        bytes32 position = TARGET_POSITION;\\r\\n        assembly {\\r\\n            target := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Sets new target of contract\\r\\n    /// @param _newTarget New actual implementation address\\r\\n    function setTarget(address _newTarget) internal {\\r\\n        bytes32 position = TARGET_POSITION;\\r\\n        assembly {\\r\\n            sstore(position, _newTarget)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Upgrades target\\r\\n    /// @param newTarget New target\\r\\n    /// @param newTargetUpgradeParameters New target upgrade parameters\\r\\n    function upgradeTarget(address newTarget, bytes calldata newTargetUpgradeParameters) external override {\\r\\n        requireMaster(msg.sender);\\r\\n\\r\\n        setTarget(newTarget);\\r\\n        (bool upgradeSuccess,) = getTarget().delegatecall(\\r\\n            abi.encodeWithSignature(\\\"upgrade(bytes)\\\", newTargetUpgradeParameters)\\r\\n        );\\r\\n        require(upgradeSuccess, \\\"ufu11\\\");\\r\\n        // ufu11 - target upgrade failed\\r\\n    }\\r\\n\\r\\n    /// @notice Performs a delegatecall to the contract implementation\\r\\n    /// @dev Fallback function allowing to perform a delegatecall to the given implementation\\r\\n    /// This function will return whatever the implementation call returns\\r\\n    function _fallback() internal {\\r\\n        address _target = getTarget();\\r\\n        assembly {\\r\\n        // The pointer to the free memory slot\\r\\n            let ptr := mload(0x40)\\r\\n        // Copy function signature and arguments from calldata at zero position into memory at pointer position\\r\\n            calldatacopy(ptr, 0x0, calldatasize())\\r\\n        // Delegatecall method of the implementation contract, returns 0 on error\\r\\n            let result := delegatecall(gas(), _target, ptr, calldatasize(), 0x0, 0)\\r\\n        // Get the size of the last return data\\r\\n            let size := returndatasize()\\r\\n        // Copy the size length of bytes from return data at zero position to pointer position\\r\\n            returndatacopy(ptr, 0x0, size)\\r\\n        // Depending on result value\\r\\n            switch result\\r\\n            case 0 {\\r\\n            // End execution and revert state changes\\r\\n                revert(ptr, size)\\r\\n            }\\r\\n            default {\\r\\n            // Return data with length of size at pointers position\\r\\n                return (ptr, size)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Will run when no functions matches call data\\r\\n    fallback() external payable {\\r\\n        _fallback();\\r\\n    }\\r\\n\\r\\n    /// @notice Same as fallback but called when calldata is empty\\r\\n    receive() external payable {\\r\\n        _fallback();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/core/UpgradeOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n/// @title Ownable Contract\\r\\ncontract UpgradeableOwnable {\\r\\n    /// @dev Storage position of the masters address (keccak256('eip1967.proxy.admin') - 1)\\r\\n    bytes32 private constant MASTER_POSITION = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\r\\n\\r\\n    /// @notice Contract constructor\\r\\n    /// @dev Sets msg sender address as masters address\\r\\n    /// @param masterAddress Master address\\r\\n//    constructor(address masterAddress) {\\r\\n//        setMaster(masterAddress);\\r\\n//    }\\r\\n\\r\\n    /// @notice Check if specified address is master\\r\\n    /// @param _address Address to check\\r\\n    function requireMaster(address _address) internal view {\\r\\n        require(_address == getMaster(), \\\"1c\\\");\\r\\n        // oro11 - only by master\\r\\n    }\\r\\n\\r\\n    /// @notice Returns contract masters address\\r\\n    /// @return master Master's address\\r\\n    function getMaster() public view returns (address master) {\\r\\n        bytes32 position = MASTER_POSITION;\\r\\n        assembly {\\r\\n            master := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Sets new masters address\\r\\n    /// @param _newMaster New master's address\\r\\n    function setMaster(address _newMaster) internal {\\r\\n        bytes32 position = MASTER_POSITION;\\r\\n        assembly {\\r\\n            sstore(position, _newMaster)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Transfer mastership of the contract to new master\\r\\n    /// @param _newMaster New masters address\\r\\n    function transferMastership(address _newMaster) external {\\r\\n        requireMaster(msg.sender);\\r\\n        require(_newMaster != address(0), \\\"1d\\\");\\r\\n        // otp11 - new masters address can't be zero address\\r\\n        setMaster(_newMaster);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface IProxy {\\r\\n    function initialize(bytes calldata initializationParameters) external;\\r\\n\\r\\n    function upgrade(bytes calldata params) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0 OR Apache-2.0\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n/// @title Interface of the upgradeable contract\\r\\n/// @author Kontos\\r\\ninterface IUpgradeable {\\r\\n    /// @notice Upgrades target of upgradeable contract\\r\\n    /// @param newTarget New target\\r\\n    /// @param newTargetInitializationParameters New target initialization parameters\\r\\n    function upgradeTarget(address newTarget, bytes calldata newTargetInitializationParameters) external;\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"targetInitializationParameters\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"getMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"master\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initializationParameters\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMaster\",\"type\":\"address\"}],\"name\":\"transferMastership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"newTargetUpgradeParameters\",\"type\":\"bytes\"}],\"name\":\"upgradeTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BaseProxy", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "000000000000000000000000dd4523d2e8faaaa042fe262b528dfac4d6bce6850000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000014000000000000000000000000035bff79430cca717bde4219e823510cc3c5a139d000000000000000000000000cc69aea5f7d2bf1882115c7d8e6775c8d0c669c30000000000000000000000006fd5f75efe6b84d99bf4014f44473e27f38f62e600000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000003424e4200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003424e420000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0x6575d1bb1510232d7ad5850431600bd3ff63206e", "SwarmSource": ""}