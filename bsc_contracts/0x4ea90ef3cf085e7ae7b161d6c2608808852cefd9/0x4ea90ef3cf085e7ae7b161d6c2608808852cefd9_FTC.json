{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n    external\r\n    returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract FTC is IERC20 {\r\n    using SafeMath for uint256;\r\n    //\u7528\u6237\u5185\u90e8\u6301\u6709\u7684\u5b9e\u9645\u5e01\u6570\u91cf\r\n    mapping(address => uint256) private _rOwned;\r\n    //\u53ea\u7528\u4e8e\u975e\u5206\u7ea2\u7528\u6237\u7684\u8f6c\u8d26\r\n    mapping(address => uint256) private _tOwned;\r\n    //\u7c7b\u4f3c\u4e8eERC20\u7684allowance\uff0c\u6307\u7528\u6237\u6388\u6743\u67d0\u4e9b\u8d26\u6237\u7684\u53ef\u4f7f\u7528\u989d\u5ea6\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    //\u8d26\u6237\u767d\u540d\u5355\uff0c\u7528\u6765\u5224\u65ad\u662f\u5426\u9700\u8981\u8f6c\u8d26\u624b\u7eed\u8d39\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    //\u5bf9\u5916-\u603b\u91cf\r\n    uint256 private _tTotal;\r\n    //\u5bf9\u5185-\u5b9e\u9645\u91cf\r\n    uint256 private _rTotal;\r\n    //\u6536\u53d6\u7684\u624b\u7eed\u8d39\r\n    uint256 private _tFeeTotal;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n\r\n    //\u5e02\u503c\u7ba1\u7406\r\n    address private _marketAddress = address(0x601927D8eC1617b6AE06aB063Ed0dd14ca28Ce5e);\r\n    //\u751f\u6001\u8425\u9500\r\n    address private _ecoAddress = address(0x8b3cFEd42390e5483e359e56d52e368E666F8Ff6);\r\n    //nft \u5206\u7ea2\r\n    address private _nftAwardAddress = address(0x608CF2283D7Cb996f97e8DDDc4A434BDfCECad3a);\r\n\r\n    uint256 public _LockTime;\r\n    //\u4e0a\u7ebf12\u4e2a\u6708\u5185\u6bcf\u4e2a\u7528\u6237\u6700\u591a\u6301\u670912\u679aFTC\uff0c12\u6708\u540e\u5f00\u653e\u9650\u5236\r\n    uint256 public _balanceLmtTime;\r\n\r\n    event eveSetInitLockTime(uint256 lockTime);\r\n    event eveSetBalanceLmtTime(uint256);\r\n\r\n    address public uniswapV2Pair;\r\n    bool public swapAction = true;\r\n\r\n    IERC20 usdt;\r\n\r\n    uint256 public _initPrice = 10;\r\n\r\n    event eveSetInitAmount(uint256 nfree_amount);\r\n\r\n\r\n    //\u5173\u7cfb\u94fe\r\n    mapping(address => address) public inviter;\r\n\r\n    //\u7d2f\u8ba1\u6ce8\u5165\u4fdd\u9669\u91d1 1000\r\n    uint256 public _insureTotal;\r\n\r\n    //\u8d28\u62bc\u7d2f\u8ba1\u4ea7\u51fa 6900\r\n    uint256 public _releaseTotal;\r\n\r\n    //\u5f53\u524d\u8d28\u62bc\u603b\u91cf\r\n    uint256 public _curTotalDeposit = 0;\r\n\r\n    //\u7528\u6237\u8d28\u62bc\u4fe1\u606f\r\n    struct UserInfo {\r\n        //\u5269\u4f59\u8d28\u62bc\u91cf\r\n        uint256 _restStake;\r\n        //\u5269\u4f59\u6536\u76ca\r\n        uint256 _restAward;\r\n        //\u5df2\u9886\u53d6\u6536\u76ca\r\n        uint256 _earnAward;\r\n    }\r\n\r\n    //\u8d28\u62bc\u4fe1\u606f\r\n    mapping(address => UserInfo) public _deposits;\r\n\r\n    //\u9886\u53d6\u4fe1\u606f\r\n    struct Profit {\r\n        uint256 _time;\r\n        uint256 _num;\r\n    }\r\n    //\u6e38\u6807\r\n    mapping(address => uint256) public _profitIds;\r\n    //\u9886\u53d6\u8bb0\u5f55\r\n    mapping(address => mapping(uint256 => Profit)) public _profits;\r\n\r\n    //\u8d28\u62bc\u4e8b\u4ef6\r\n    event Deposit(address, uint256);\r\n    //\u89e3\u9501\u4e8b\u4ef6\r\n    event Release(address, uint256);\r\n    //\u9886\u53d6\u4e8b\u4ef6\r\n    event Claim(address, uint256);\r\n\r\n\r\n    //\u8d28\u62bc\u7528\u6237\u5217\u8868\r\n    address[] public allDepositAddr;\r\n\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n\r\n    modifier lock() {\r\n        _lockBefore();\r\n        _;\r\n        _lockAfter();\r\n    }\r\n\r\n    function _lockBefore() private {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _lockAfter() private {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    address public _owner;\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n\r\n\r\n    constructor(IERC20 _usdt) {\r\n        _name = \"FUTURE COIN\";\r\n        _symbol = \"FTC\";\r\n        _decimals = 18;\r\n        _tTotal = 10000 * 10 ** _decimals;\r\n\r\n        usdt = _usdt;\r\n\r\n        _status = _NOT_ENTERED;\r\n\r\n        _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n        _rOwned[msg.sender] = _rTotal.div(100).mul(21);\r\n        _rOwned[address(this)] = _rTotal.div(100).mul(79);\r\n\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _owner = msg.sender;\r\n\r\n        _LockTime = block.timestamp;\r\n        _balanceLmtTime = _LockTime + 365 days;\r\n        //\u4fdd\u9669\u91d11000\r\n        _insureTotal = 1000 * 10 ** _decimals;\r\n        //\u6316\u77ff\u4ea7\u51fa 6900\r\n        _releaseTotal = 6900 * 10 ** _decimals;\r\n        emit Transfer(address(0), msg.sender, _tTotal.div(100).mul(21));\r\n        emit Transfer(address(0), address(this), _tTotal.div(100).mul(79));\r\n    }\r\n\r\n    function setInitAmount(uint256 _amount) public onlyOwner {\r\n        _initPrice = _amount;\r\n        emit eveSetInitAmount(_initPrice);\r\n    }\r\n\r\n\r\n    function setInitLockTime(uint256 lockTime) public onlyOwner {\r\n        _LockTime = lockTime;\r\n        emit eveSetInitLockTime(_LockTime);\r\n    }\r\n\r\n    function setBalanceLmtTime(uint256 _time) public onlyOwner {\r\n        _balanceLmtTime = _time;\r\n        emit eveSetBalanceLmtTime(_balanceLmtTime);\r\n    }\r\n\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n    public\r\n    override\r\n    returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n    public\r\n    view\r\n    override\r\n    returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n    public\r\n    override\r\n    returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        if (uniswapV2Pair == address(0) && amount >= _tTotal.div(100)) {\r\n            uniswapV2Pair = recipient;\r\n        }\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n\r\n    function changeswapAction() public onlyOwner {\r\n        swapAction = !swapAction;\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function uniswapV2PairSync() public returns (bool){\r\n        (bool success,) = uniswapV2Pair.call(abi.encodeWithSelector(0xfff6cae9));\r\n        return success;\r\n    }\r\n\r\n    function claimTokens() public onlyOwner {\r\n        payable(_owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    // \u8f6c\u8d26\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n\r\n        if (block.timestamp <= _balanceLmtTime && to != uniswapV2Pair && to != address(this))\r\n        {\r\n            UserInfo storage user = _deposits[to];\r\n            uint256 preValue = balanceOf(to).add(amount).add(user._restStake);\r\n            require(preValue <= 12 * 10 ** _decimals, \"ERC20: no more than 12\");\r\n        }\r\n\r\n\r\n        _updateBill();\r\n        uint256 balanceERC = balanceOf(uniswapV2Pair);\r\n        //1000\u679a\u5e95\u6c60\u4fdd\u9669\u91d1\uff08\u5f53\u5e95\u6c60\u4f4e\u4e8e200\u679aFTC\uff0c\u4fdd\u9669\u91d1\u520610\u6b21\u6bcf\u6b21100FTC\u81ea\u52a8\u56de\u6d41\u5e95\u6c60\u62a4\u76d8\r\n        if (balanceERC > 0 && balanceERC <= 200 * 10 ** _decimals && _insureTotal > 0)\r\n        {\r\n            _tokenTransfer(address(this), uniswapV2Pair, 100 * 10 ** _decimals, false);\r\n            _insureTotal = _insureTotal.sub(100 * 10 ** _decimals);\r\n        }\r\n\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            _tokenTransfer(from, to, amount, false);\r\n        } else {\r\n            if (from != uniswapV2Pair && to != uniswapV2Pair) {\r\n                _tokenTransfer(from, to, amount, false);\r\n            } else {\r\n                _tokenTransfer(from, to, amount, true);\r\n            }\r\n        }\r\n\r\n        //to\u672a\u7ed1\u5b9a\u3001from \u3001to\u90fd\u975e\u5408\u7ea6\u5730\u5740\r\n        bool shouldInvite = (inviter[to] == address(0) && !isContract(from) && !isContract(to));\r\n\r\n        if (shouldInvite) {\r\n            inviter[to] = from;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        uint256 rate;\r\n        uint256 _linFee = 0;\r\n\r\n        if (sender == _owner) {\r\n            rate = 0;\r\n        } else {\r\n            if (takeFee) {\r\n                if (sender == uniswapV2Pair) {\r\n                    // buy \u4e70\u5165\r\n                    // 9\r\n                    //7%\u56de\u6d41\u5e95\u6c60\u00a0\u00a02%\u5e02\u503c\u7ba1\u7406\r\n                    rate = 9;\r\n                    uint256 _lpRate = 7;\r\n                    uint256 _marketRte = 2;\r\n\r\n                    _rOwned[uniswapV2Pair] = _rOwned[uniswapV2Pair].add(\r\n                        rAmount.div(100).mul(_lpRate)\r\n                    );\r\n                    _rOwned[_marketAddress] = _rOwned[_marketAddress].add(\r\n                        rAmount.div(100).mul(_marketRte)\r\n                    );\r\n\r\n                    emit Transfer(sender, uniswapV2Pair, tAmount.div(100).mul(_lpRate));\r\n                    emit Transfer(sender, _marketAddress, tAmount.div(100).mul(_marketRte));\r\n\r\n                } else if (recipient == uniswapV2Pair) {\r\n                    // sell\r\n                    //11\r\n                    // \u76f4\u63a83%\uff0c\u95f4\u63a82%\uff0c\u7b2c\u4e09\u5c421%\uff0c\u540e\u4e94\u5c42\u51711%\u6bcf\u5c420.2%,0.2%,0.2%,0.2%,0.2%,\u5408\u8ba1\u516b\u5c42\u3002\r\n                    // 2%\u56de\u6d41\u5e95\u6c60\u00a0\u00a0\u00a01%\u751f\u6001\u8425\u9500\uff08\u8f6c\u5165\u4e00\u4e2a\u5730\u5740\uff09\u00a0\u00a0\u00a01%NFT\u5206\u7ea2\uff08\u8f6c\u5165\u4e00\u4e2a\u5730\u5740\uff09\r\n\r\n                    rate = 11;\r\n\r\n\r\n                    address cur = sender;\r\n                    // \u76f4\u63a83%\uff0c\u95f4\u63a82%\uff0c\u7b2c\u4e09\u5c421%\uff0c\u540e\u4e94\u5c42\u51711%\u6bcf\u5c420.2%,0.2%,0.2%,0.2%,0.2%,\u5408\u8ba1\u516b\u5c42\u3002\r\n                    uint8[8] memory inviteRate = [30, 20, 10, 2, 2, 2, 2, 2];\r\n\r\n                    for (uint8 i = 0; i < inviteRate.length; i++) {\r\n                        cur = inviter[cur];\r\n                        if (cur == address(0)) {\r\n                            cur = uniswapV2Pair;\r\n                            //\u5982\u679c\u6ca1\u6709\u63a8\u8350\u5730\u5740\uff0c\u56de\u6d41\u5e95\u6c60\r\n                        }\r\n                        else {\r\n\r\n                            //\u4e0a\u7ea7\u662f\u5426\u6709\u6301\u4ed3\u9650\u5236\r\n                            if (block.timestamp <= _balanceLmtTime)\r\n                            {\r\n                                uint256 tmpAmount = tAmount.div(1000).mul(inviteRate[i]);\r\n                                UserInfo storage user = _deposits[cur];\r\n                                uint256 preValue = balanceOf(cur).add(tmpAmount).add(user._restStake);\r\n                                if (preValue > 12 * 10 ** _decimals)\r\n                                {\r\n                                    cur = uniswapV2Pair;\r\n                                }\r\n\r\n                            }\r\n\r\n\r\n                        }\r\n\r\n                        _rOwned[cur] = _rOwned[cur].add(\r\n                            rAmount.div(1000).mul(inviteRate[i])\r\n                        );\r\n\r\n                        emit Transfer(sender, cur, tAmount.div(1000).mul(inviteRate[i]));\r\n                    }\r\n\r\n\r\n                    _rOwned[uniswapV2Pair] = _rOwned[uniswapV2Pair].add(\r\n                        rAmount.div(100).mul(2)\r\n                    );\r\n\r\n                    _rOwned[_ecoAddress] = _rOwned[_ecoAddress].add(\r\n                        rAmount.div(100).mul(1)\r\n                    );\r\n\r\n                    _rOwned[_nftAwardAddress] = _rOwned[_nftAwardAddress].add(\r\n                        rAmount.div(100).mul(1)\r\n                    );\r\n\r\n                    emit Transfer(sender, uniswapV2Pair, tAmount.div(100).mul(2));\r\n                    emit Transfer(sender, _ecoAddress, tAmount.div(100).mul(1));\r\n                    emit Transfer(sender, _nftAwardAddress, tAmount.div(100).mul(1));\r\n\r\n                    // \u68c0\u6d4b\u66b4\u8dcc\r\n                    uint256 balanceUsdt = usdt.balanceOf(uniswapV2Pair);\r\n                    uint256 balanceERC = balanceOf(uniswapV2Pair);\r\n\r\n                    uint price = balanceERC.div(balanceUsdt);\r\n\r\n                    if (price <= _initPrice) {\r\n                        _initPrice = price;\r\n                        emit eveSetInitAmount(_initPrice);\r\n                    } else {\r\n                        uint256 r_am = tAmount;\r\n                        uint ratio = (price - _initPrice) * 10 ** _decimals / _initPrice;\r\n                        //\u5f53\u5e01\u4ef7\u683c\u4e0b\u8dcc40%\uff0c\u5356\u51fa\u624b\u7eed\u8d39\u589e\u52a010%\r\n                        //\u5f53\u5e01\u4ef7\u683c\u4e0b\u8dcc50%\uff0c\u5356\u51fa\u624b\u7eed\u8d39\u589e\u52a020%\r\n                        //\u5f53\u5e01\u4ef7\u683c\u4e0b\u8dcc60%\uff0c\u5356\u51fa\u624b\u7eed\u8d39\u589e\u52a030%\r\n                        //\u589e\u52a0\u5356\u51fa\u7684\u624b\u7eed\u8d39\u5168\u90e8\u56de\u6d41\u5e95\u6c60\r\n                        // 50%\r\n                        _linFee = 0;\r\n                        if (ratio >= 40 * 10 ** 17) {\r\n                            _linFee = 10;\r\n                        }\r\n                        if (ratio >= 50 * 10 ** 17) {\r\n                            _linFee = 20;\r\n                        }\r\n                        if (ratio >= 60 * 10 ** 17) {\r\n                            _linFee = 30;\r\n                        }\r\n\r\n\r\n                        if (_linFee > 0) {\r\n                            rate = rate.add(_linFee);\r\n\r\n                            _rOwned[uniswapV2Pair] = _rOwned[uniswapV2Pair].add(\r\n                                rAmount.div(100).mul(_linFee)\r\n                            );\r\n\r\n                            emit Transfer(sender, uniswapV2Pair, r_am.div(100).mul(_linFee));\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        // compound interest\r\n\r\n        uint256 recipientRate = 100 - rate;\r\n        _rOwned[recipient] = _rOwned[recipient].add(\r\n            rAmount.div(100).mul(recipientRate)\r\n        );\r\n        emit Transfer(sender, recipient, tAmount.div(100).mul(recipientRate));\r\n    }\r\n\r\n\r\n    function changeRouter(address router) public onlyOwner {\r\n        uniswapV2Pair = router;\r\n    }\r\n\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    //\u8d28\u62bc\r\n    function deposit(uint _amount) external lock {\r\n\r\n        UserInfo storage user = _deposits[msg.sender];\r\n        user._restStake = user._restStake.add(_amount);\r\n        _deposits[msg.sender] = user;\r\n        _curTotalDeposit = _curTotalDeposit.add(_amount);\r\n        allDepositAddr.push(msg.sender);\r\n        _transfer(msg.sender, address(this), _amount);\r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n\r\n    //\u89e3\u9501\r\n    function release(uint _amount) external lock {\r\n        UserInfo storage user = _deposits[msg.sender];\r\n        require(user._restStake >= _amount, \"Amount to release too high\");\r\n\r\n        user._restStake = user._restStake.sub(_amount);\r\n        _deposits[msg.sender] = user;\r\n        _curTotalDeposit = _curTotalDeposit.sub(_amount);\r\n\r\n        _transfer(address(this), msg.sender, _amount);\r\n        emit Release(msg.sender, _amount);\r\n    }\r\n\r\n    //\u9886\u53d6\r\n    function claim(uint _amount) external lock {\r\n        UserInfo storage user = _deposits[msg.sender];\r\n        require(user._restAward >= _amount, \"Amount to claim too high\");\r\n\r\n        user._restAward = user._restAward.sub(_amount);\r\n        user._earnAward = user._earnAward.add(_amount);\r\n        _deposits[msg.sender] = user;\r\n\r\n\r\n        _profits[msg.sender][_profitIds[msg.sender]] = Profit(block.timestamp, _amount);\r\n        _profitIds[msg.sender] = _profitIds[msg.sender].add(1);\r\n\r\n        _transfer(address(this), msg.sender, _amount);\r\n\r\n        emit Claim(msg.sender, _amount);\r\n    }\r\n\r\n\r\n    function _updateBill() private {\r\n        //\u6bcf\u65e5\u91ca\u653e\u91cf\r\n        uint256 value = 95833333 * 10 ** (_decimals - 7);\r\n        if (value > _releaseTotal)\r\n        {\r\n            value = _releaseTotal;\r\n        }\r\n        if (block.timestamp >= (_LockTime + 1 days) && swapAction && allDepositAddr.length > 0 && _releaseTotal > 0) {\r\n\r\n            uint256 billTotal = _curTotalDeposit;\r\n\r\n            for (uint i = 0; i < allDepositAddr.length; i++) {\r\n                UserInfo storage user = _deposits[allDepositAddr[i]];\r\n                if (user._restStake > 0) {\r\n                    uint256 rAmount = user._restStake.mul(value).div(billTotal);\r\n                    user._restAward = user._restAward.add(rAmount);\r\n                    _deposits[allDepositAddr[i]] = user;\r\n                }\r\n            }\r\n            _releaseTotal = _releaseTotal.sub(value);\r\n            _LockTime = block.timestamp;\r\n            emit eveSetInitLockTime(_LockTime);\r\n        }\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eveSetBalanceLmtTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nfree_amount\",\"type\":\"uint256\"}],\"name\":\"eveSetInitAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"eveSetInitLockTime\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_LockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_balanceLmtTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_curTotalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_restStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_restAward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earnAward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_initPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_insureTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_profitIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_profits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_releaseTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDepositAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"changeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeswapAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setBalanceLmtTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setInitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"setInitLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2PairSync\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FTC", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7b9077431b82b92195a09f7e43b9864fc5dc54fff5509d4c82182c6207c1dba6"}