{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PancakeSwapPotteryDraw.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n\\nimport {IERC165} from \\\"@openzeppelin-4.6.0/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin-4.6.0/contracts/access/Ownable.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin-4.6.0/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IRandomNumberGenerator} from \\\"./interfaces/IRandomNumberGenerator.sol\\\";\\nimport {Pottery} from \\\"./utils/Pottery.sol\\\";\\nimport {Vault} from \\\"./utils/Vault.sol\\\";\\nimport {IPancakeSwapPotteryDraw} from \\\"./interfaces/IPancakeSwapPotteryDraw.sol\\\";\\nimport {IPancakeSwapPotteryVault} from \\\"./interfaces/IPancakeSwapPotteryVault.sol\\\";\\nimport {IPotteryVaultFactory} from \\\"./interfaces/IPotteryVaultFactory.sol\\\";\\nimport {ICakePool} from \\\"./interfaces/ICakePool.sol\\\";\\nimport {IPotteryKeeper} from \\\"./interfaces/IPotteryKeeper.sol\\\";\\n\\ncontract PancakeSwapPotteryDraw is IPancakeSwapPotteryDraw, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 reward;\\n        uint256 winCount;\\n    }\\n\\n    IERC20 immutable cake;\\n    ICakePool immutable cakePool;\\n    IRandomNumberGenerator rng;\\n    IPotteryVaultFactory vaultFactory;\\n    IPotteryKeeper keeper;\\n\\n    uint8 constant NUM_OF_WINNER = 8;\\n    uint8 constant NUM_OF_DRAW = 10;\\n    uint32 constant POTTERY_PERIOD = 1 weeks;\\n    uint32 constant START_TIME_BUFFER = 2 weeks;\\n    uint32 constant DRAW_TIME_BUFFER = 1 weeks;\\n\\n    mapping(address => Pottery.Pot) pots;\\n\\n    mapping(address => UserInfo) public userInfos;\\n\\n    Pottery.Draw[] draws;\\n\\n    address treasury;\\n    uint16 public claimFee;\\n\\n    bool initialize;\\n\\n    event Init(address admin);\\n\\n    event CreatePottery(\\n        address indexed vault,\\n        uint256 totalPrize,\\n        uint256 lockTime,\\n        uint256 drawTime,\\n        uint256 maxTotalDeposit,\\n        address admin\\n    );\\n\\n    event RedeemPrize(address indexed vault, uint256 actualPrize, uint256 redeemPrize);\\n\\n    event StartDraw(\\n        uint256 indexed drawId,\\n        address indexed vault,\\n        uint256 indexed requestId,\\n        uint256 totalPrize,\\n        uint256 timestamp,\\n        address admin\\n    );\\n    event CloseDraw(\\n        uint256 indexed drawId,\\n        address indexed vault,\\n        uint256 indexed requestId,\\n        address[] winners,\\n        uint256 timestamp,\\n        address admin\\n    );\\n\\n    event ClaimReward(address indexed winner, uint256 prize, uint256 fee, uint256 winCount);\\n\\n    event SetVaultFactory(address admin, address vaultFactory);\\n\\n    event SetKeeper(address admin, address keeper);\\n\\n    event SetTreasury(address admin, address treasury);\\n\\n    event SetClaimFee(address admin, uint16 fee);\\n\\n    event CancelPottery(address indexed vault, uint256 totalPrize, address admin);\\n\\n    modifier onlyKeeperOrOwner() {\\n        require(msg.sender == address(keeper) || msg.sender == owner(), \\\"only keeper or owner\\\");\\n        _;\\n    }\\n\\n    constructor(IERC20 _cake, ICakePool _cakePool) {\\n        require(address(_cake) != address(0) && address(_cakePool) != address(0), \\\"zero address\\\");\\n\\n        cake = _cake;\\n        cakePool = _cakePool;\\n\\n        initialize = false;\\n    }\\n\\n    function init(\\n        address _rng,\\n        address _vaultFactory,\\n        address _keeper,\\n        address _treasury\\n    ) external onlyOwner {\\n        require(!initialize, \\\"init already\\\");\\n\\n        require(IERC165(_rng).supportsInterface(type(IRandomNumberGenerator).interfaceId), \\\"invalid rng\\\");\\n        rng = IRandomNumberGenerator(_rng);\\n\\n        setVaultFactory(_vaultFactory);\\n        setKeeper(_keeper);\\n        setTreasury(_treasury);\\n        setClaimFee(800);\\n\\n        initialize = true;\\n        emit Init(msg.sender);\\n    }\\n\\n    function generatePottery(\\n        uint256 _totalPrize,\\n        uint256 _lockTime,\\n        uint256 _drawTime,\\n        uint256 _maxTotalDeposit\\n    ) public override onlyOwner {\\n        require(_totalPrize > 0, \\\"zero prize\\\");\\n        // draw time must be larger than lock time\\n        require(_drawTime > _lockTime, \\\"draw time earlier than lock time\\\");\\n        // draw time must be within 1 week of the lock time to finish the draw before unlock\\n        require(_drawTime < _lockTime + DRAW_TIME_BUFFER, \\\"draw time outside draw buffer time\\\");\\n        // everything must start in 2 weeks\\n        require(_drawTime < block.timestamp + START_TIME_BUFFER, \\\"draw time outside start buffer time\\\");\\n        // the _maxDepositAmount should be greater than 0\\n        require(_maxTotalDeposit > 0, \\\"zero total deposit\\\");\\n        uint256 denominator = NUM_OF_DRAW * NUM_OF_WINNER;\\n        uint256 prize = _totalPrize / denominator;\\n        require(prize > 0, \\\"zero prize in each winner\\\");\\n        require(prize % denominator == 0, \\\"winner prize has reminder\\\");\\n\\n        cake.safeTransferFrom(msg.sender, address(this), _totalPrize);\\n        address vault = vaultFactory.generateVault(\\n            cake,\\n            cakePool,\\n            PancakeSwapPotteryDraw(address(this)),\\n            msg.sender,\\n            address(keeper),\\n            _lockTime,\\n            _maxTotalDeposit\\n        );\\n        require(vault != address(0), \\\"zero deploy address\\\");\\n        IPotteryKeeper(keeper).addActiveVault(vault);\\n        pots[vault] = Pottery.Pot({\\n            numOfDraw: 0,\\n            totalPrize: _totalPrize,\\n            drawTime: _drawTime,\\n            lastDrawId: 0,\\n            startDraw: false\\n        });\\n\\n        emit CreatePottery(vault, _totalPrize, _lockTime, _drawTime, _maxTotalDeposit, msg.sender);\\n    }\\n\\n    function redeemPrizeByRatio() external override {\\n        // only allow call from vault\\n        uint256 totalPrize = pots[msg.sender].totalPrize;\\n        require(totalPrize > 0, \\\"pot not exist\\\");\\n        require(IPancakeSwapPotteryVault(msg.sender).getStatus() == Vault.Status.BEFORE_LOCK, \\\"pot pass before lock\\\");\\n        uint256 depositRatio = (IPancakeSwapPotteryVault(msg.sender).totalAssets() * 10000) /\\n            IPancakeSwapPotteryVault(msg.sender).getMaxTotalDeposit();\\n        uint256 actualPrize = (totalPrize * depositRatio) / 10000;\\n\\n        uint256 denominator = NUM_OF_DRAW * NUM_OF_WINNER;\\n        uint256 prize = actualPrize / denominator;\\n        require(prize > 0, \\\"zero prize in each winner\\\");\\n        if (actualPrize % denominator != 0) actualPrize -= actualPrize % denominator;\\n\\n        uint256 redeemPrize = totalPrize - actualPrize;\\n        pots[msg.sender].totalPrize = actualPrize;\\n        if (redeemPrize > 0) cake.safeTransfer(treasury, redeemPrize);\\n\\n        emit RedeemPrize(msg.sender, actualPrize, redeemPrize);\\n    }\\n\\n    function startDraw(address _vault) external override onlyKeeperOrOwner {\\n        Pottery.Pot storage pot = pots[_vault];\\n        require(pot.totalPrize > 0, \\\"pot not exist\\\");\\n        require(pot.numOfDraw < NUM_OF_DRAW, \\\"over draw limit\\\");\\n        require(timeToDraw(_vault), \\\"too early to draw\\\");\\n        if (pot.startDraw) {\\n            Pottery.Draw memory draw = draws[pot.lastDrawId];\\n            require(draw.closeDrawTime != 0, \\\"last draw has not closed\\\");\\n        }\\n        uint256 prize = pot.totalPrize / NUM_OF_DRAW;\\n        uint256 requestId = rng.requestRandomWords(NUM_OF_WINNER, _vault);\\n        uint256 drawId = draws.length;\\n        draws.push(\\n            Pottery.Draw({\\n                requestId: requestId,\\n                vault: IPancakeSwapPotteryVault(_vault),\\n                startDrawTime: block.timestamp,\\n                closeDrawTime: 0,\\n                winners: new address[](NUM_OF_WINNER),\\n                prize: prize\\n            })\\n        );\\n\\n        pot.lastDrawId = drawId;\\n        if (!pot.startDraw) pot.startDraw = true;\\n\\n        emit StartDraw(drawId, _vault, requestId, prize, block.timestamp, msg.sender);\\n    }\\n\\n    function forceRequestDraw(address _vault) external override onlyOwner {\\n        Pottery.Pot storage pot = pots[_vault];\\n        Pottery.Draw storage draw = draws[pot.lastDrawId];\\n        require(address(draw.vault) != address(0), \\\"draw not exist\\\");\\n        require(draw.startDrawTime != 0 && draw.closeDrawTime == 0, \\\"draw has closed\\\");\\n        require(!rng.fulfillRequest(draw.requestId), \\\"request has fulfilled\\\");\\n        uint256 requestId = rng.requestRandomWords(NUM_OF_WINNER, _vault);\\n\\n        draw.requestId = requestId;\\n\\n        emit StartDraw(pot.lastDrawId, _vault, requestId, draw.prize, block.timestamp, msg.sender);\\n    }\\n\\n    function closeDraw(uint256 _drawId) external override onlyKeeperOrOwner {\\n        Pottery.Draw storage draw = draws[_drawId];\\n        require(address(draw.vault) != address(0), \\\"draw not exist\\\");\\n        require(draw.startDrawTime != 0, \\\"draw has not started\\\");\\n        require(draw.closeDrawTime == 0, \\\"draw has closed\\\");\\n        draw.closeDrawTime = block.timestamp;\\n\\n        require(draw.requestId == rng.getLatestRequestId(address(draw.vault)), \\\"requestId not match\\\");\\n        require(rng.fulfillRequest(draw.requestId), \\\"rng request not fulfill\\\");\\n        uint256[] memory randomWords = rng.getRandomWords(draw.requestId);\\n        require(randomWords.length == NUM_OF_WINNER, \\\"winning number not match\\\");\\n        address[] memory winners = draw.vault.draw(randomWords);\\n        require(winners.length == NUM_OF_WINNER, \\\"winners not match\\\");\\n        uint256 eachWinnerPrize = draw.prize / NUM_OF_WINNER;\\n        for (uint256 i = 0; i < NUM_OF_WINNER; i++) {\\n            draw.winners[i] = winners[i];\\n            userInfos[winners[i]].reward += eachWinnerPrize;\\n            userInfos[winners[i]].winCount += 1;\\n        }\\n\\n        Pottery.Pot storage pot = pots[address(draw.vault)];\\n        pot.numOfDraw += 1;\\n\\n        emit CloseDraw(_drawId, address(draw.vault), draw.requestId, draw.winners, block.timestamp, msg.sender);\\n    }\\n\\n    function claimReward() external override {\\n        require(userInfos[msg.sender].reward > 0, \\\"nothing to claim\\\");\\n        uint256 reward = userInfos[msg.sender].reward;\\n        uint256 winCount = userInfos[msg.sender].winCount;\\n        uint256 fee = (reward * claimFee) / 10000;\\n        userInfos[msg.sender].reward = 0;\\n        userInfos[msg.sender].winCount = 0;\\n        if (fee > 0) cake.safeTransfer(treasury, fee);\\n        cake.safeTransfer(msg.sender, (reward - fee));\\n\\n        emit ClaimReward(msg.sender, reward, fee, winCount);\\n    }\\n\\n    function timeToDraw(address _vault) public view override returns (bool) {\\n        Pottery.Pot storage pot = pots[_vault];\\n        if (pot.startDraw) {\\n            Pottery.Draw storage draw = draws[pot.lastDrawId];\\n            return (draw.startDrawTime + POTTERY_PERIOD <= block.timestamp);\\n        } else {\\n            return (pot.drawTime <= block.timestamp);\\n        }\\n    }\\n\\n    function rngFulfillRandomWords(uint256 _drawId) public view override returns (bool) {\\n        Pottery.Draw storage draw = draws[_drawId];\\n        return rng.fulfillRequest(draw.requestId);\\n    }\\n\\n    function getWinners(uint256 _drawId) external view override returns (address[] memory) {\\n        return draws[_drawId].winners;\\n    }\\n\\n    function getDraw(uint256 _drawId) external view override returns (Pottery.Draw memory) {\\n        return draws[_drawId];\\n    }\\n\\n    function getPot(address _vault) external view override returns (Pottery.Pot memory) {\\n        return pots[_vault];\\n    }\\n\\n    function getNumOfDraw() external view override returns (uint8) {\\n        return NUM_OF_DRAW;\\n    }\\n\\n    function getNumOfWinner() external view override returns (uint8) {\\n        return NUM_OF_WINNER;\\n    }\\n\\n    function getPotteryPeriod() external view override returns (uint256) {\\n        return POTTERY_PERIOD;\\n    }\\n\\n    function getTreasury() external view override returns (address) {\\n        return treasury;\\n    }\\n\\n    function setVaultFactory(address _factory) public onlyOwner {\\n        require(_factory != address(0), \\\"zero address\\\");\\n        vaultFactory = IPotteryVaultFactory(_factory);\\n\\n        emit SetVaultFactory(msg.sender, _factory);\\n    }\\n\\n    function setKeeper(address _keeper) public onlyOwner {\\n        require(_keeper != address(0), \\\"zero address\\\");\\n        keeper = IPotteryKeeper(_keeper);\\n\\n        emit SetKeeper(msg.sender, _keeper);\\n    }\\n\\n    function setTreasury(address _treasury) public onlyOwner {\\n        require(_treasury != address(0), \\\"zero address\\\");\\n        treasury = _treasury;\\n\\n        emit SetTreasury(msg.sender, _treasury);\\n    }\\n\\n    function setClaimFee(uint16 _fee) public onlyOwner {\\n        require(_fee <= 1000, \\\"over max fee limit\\\");\\n        claimFee = _fee;\\n\\n        emit SetClaimFee(msg.sender, _fee);\\n    }\\n\\n    function cancelPottery(address _vault) external onlyOwner {\\n        require(IPancakeSwapPotteryVault(_vault).getStatus() == Vault.Status.BEFORE_LOCK, \\\"pottery started\\\");\\n        Pottery.Pot storage pot = pots[_vault];\\n        require(pot.totalPrize > 0, \\\"pottery not exist\\\");\\n        require(pot.numOfDraw == 0, \\\"pottery cancelled\\\");\\n        uint256 prize = pot.totalPrize;\\n        pot.totalPrize = 0;\\n        pot.numOfDraw = NUM_OF_DRAW;\\n        cake.safeTransfer(treasury, prize);\\n\\n        emit CancelPottery(_vault, prize, msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.6.0/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.6.0/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.6.0/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRandomNumberGenerator.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface IRandomNumberGenerator {\\n    function getRandomWords(uint256 _requestId) external view returns (uint256[] memory);\\n\\n    function getLatestRequestId(address _vault) external view returns (uint256);\\n\\n    function fulfillRequest(uint256 _requestId) external view returns (bool);\\n\\n    function requestRandomWords(uint32 _numWords, address _vault) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Pottery.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport {IPancakeSwapPotteryVault} from \\\"../interfaces/IPancakeSwapPotteryVault.sol\\\";\\n\\nlibrary Pottery {\\n    struct Pot {\\n        uint256 numOfDraw;\\n        uint256 totalPrize;\\n        uint256 drawTime;\\n        uint256 lastDrawId;\\n        bool startDraw;\\n    }\\n\\n    struct Draw {\\n        uint256 requestId;\\n        IPancakeSwapPotteryVault vault;\\n        uint256 startDrawTime;\\n        uint256 closeDrawTime;\\n        address[] winners;\\n        uint256 prize;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Vault.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nlibrary Vault {\\n    enum Status {\\n        BEFORE_LOCK,\\n        LOCK,\\n        UNLOCK\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeSwapPotteryDraw.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Pottery.sol\\\";\\n\\ninterface IPancakeSwapPotteryDraw {\\n    function generatePottery(\\n        uint256 _totalPrize,\\n        uint256 _lockTime,\\n        uint256 _drawTime,\\n        uint256 _maxTotalDeposit\\n    ) external;\\n\\n    function redeemPrizeByRatio() external;\\n\\n    function startDraw(address _vault) external;\\n\\n    function forceRequestDraw(address _vault) external;\\n\\n    function closeDraw(uint256 _drawId) external;\\n\\n    function claimReward() external;\\n\\n    function timeToDraw(address _vault) external view returns (bool);\\n\\n    function rngFulfillRandomWords(uint256 _drawId) external view returns (bool);\\n\\n    function getWinners(uint256 _drawId) external view returns (address[] memory);\\n\\n    function getDraw(uint256 _drawId) external view returns (Pottery.Draw memory);\\n\\n    function getPot(address _vault) external view returns (Pottery.Pot memory);\\n\\n    function getNumOfDraw() external view returns (uint8);\\n\\n    function getNumOfWinner() external view returns (uint8);\\n\\n    function getPotteryPeriod() external view returns (uint256);\\n\\n    function getTreasury() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeSwapPotteryVault.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport {IERC4626} from \\\"./IERC4626.sol\\\";\\nimport {Vault} from \\\"../utils/Vault.sol\\\";\\n\\ninterface IPancakeSwapPotteryVault is IERC4626 {\\n    function lockCake() external;\\n\\n    function unlockCake() external;\\n\\n    function draw(uint256[] memory _nums) external view returns (address[] memory users);\\n\\n    function getNumberOfTickets(address _user) external view returns (uint256);\\n\\n    function getLockTime() external view returns (uint256);\\n\\n    function getMaxTotalDeposit() external view returns (uint256);\\n\\n    function passLockTime() external view returns (bool);\\n\\n    function getStatus() external view returns (Vault.Status);\\n\\n    function generateUserId(address _user) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPotteryVaultFactory.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin-4.6.0/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ICakePool} from \\\"./ICakePool.sol\\\";\\nimport {IPancakeSwapPotteryDraw} from \\\"./IPancakeSwapPotteryDraw.sol\\\";\\n\\ninterface IPotteryVaultFactory {\\n    function generateVault(\\n        IERC20 _cake,\\n        ICakePool _cakePool,\\n        IPancakeSwapPotteryDraw _potteryDraw,\\n        address _admin,\\n        address _keeper,\\n        uint256 _lockTime,\\n        uint256 _maxTotalDeposit\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICakePool.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface ICakePool {\\n    function deposit(uint256 _amount, uint256 _lockDuration) external;\\n\\n    function withdrawByAmount(uint256 _amount) external;\\n\\n    function withdraw(uint256 _shares) external;\\n\\n    function withdrawAll() external;\\n\\n    function calculatePerformanceFee(address _user) external view returns (uint256);\\n\\n    function calculateOverdueFee(address _user) external view returns (uint256);\\n\\n    function calculateWithdrawFee(address _user, uint256 _shares) external view returns (uint256);\\n\\n    function calculateTotalPendingCakeRewards() external view returns (uint256);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    function available() external view returns (uint256);\\n\\n    function balanceOf() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPotteryKeeper.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface IPotteryKeeper {\\n    function addActiveVault(address _vault) external;\\n\\n    function removeActiveVault(address _vault, uint256 _pos) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.6.0/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.6.0/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.6.0/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC4626 {\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_cake\",\"type\":\"address\"},{\"internalType\":\"contract ICakePool\",\"name\":\"_cakePool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPrize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"CancelPottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winCount\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"drawId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"CloseDraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPrize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"drawTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTotalDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"CreatePottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualPrize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemPrize\",\"type\":\"uint256\"}],\"name\":\"RedeemPrize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"name\":\"SetClaimFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"SetKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultFactory\",\"type\":\"address\"}],\"name\":\"SetVaultFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"drawId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPrize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"StartDraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"cancelPottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_drawId\",\"type\":\"uint256\"}],\"name\":\"closeDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"forceRequestDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalPrize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_drawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotalDeposit\",\"type\":\"uint256\"}],\"name\":\"generatePottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_drawId\",\"type\":\"uint256\"}],\"name\":\"getDraw\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"contract IPancakeSwapPotteryVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startDrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeDrawTime\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"internalType\":\"struct Pottery.Draw\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfDraw\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfWinner\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getPot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"numOfDraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDrawId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"startDraw\",\"type\":\"bool\"}],\"internalType\":\"struct Pottery.Pot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPotteryPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_drawId\",\"type\":\"uint256\"}],\"name\":\"getWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rng\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemPrizeByRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_drawId\",\"type\":\"uint256\"}],\"name\":\"rngFulfillRandomWords\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"}],\"name\":\"setClaimFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setVaultFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"startDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"timeToDraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PancakeSwapPotteryDraw", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "0000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce8200000000000000000000000045c54210128a065de780c4b0df3d16664f7f859e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}