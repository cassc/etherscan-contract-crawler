{"SourceCode": "// File: @openzeppelin/contracts/introspection/ERC165Checker.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Library used to query support of an interface declared via {IERC165}.\r\n *\r\n * Note that these functions return the actual result of the query: they do not\r\n * `revert` if an interface is not supported. It is up to the caller to decide\r\n * what to do in these cases.\r\n */\r\nlibrary ERC165Checker {\r\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\r\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\r\n\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the {IERC165} interface,\r\n     */\r\n    function supportsERC165(address account) internal view returns (bool) {\r\n        // Any contract that implements ERC165 must explicitly indicate support of\r\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\r\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\r\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the interface defined by\r\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\r\n        // query support of both ERC165 as per the spec and support of _interfaceId\r\n        return supportsERC165(account) &&\r\n            _supportsERC165Interface(account, interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a boolean array where each value corresponds to the\r\n     * interfaces passed in and whether they're supported or not. This allows\r\n     * you to batch check interfaces for a contract where your expectation\r\n     * is that some interfaces may not be supported.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool[] memory) {\r\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\r\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\r\n\r\n        // query support of ERC165 itself\r\n        if (supportsERC165(account)) {\r\n            // query support of each interface in interfaceIds\r\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\r\n            }\r\n        }\r\n\r\n        return interfaceIdsSupported;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports all the interfaces defined in\r\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * Batch-querying can lead to gas savings by skipping repeated checks for\r\n     * {IERC165} support.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\r\n        // query support of ERC165 itself\r\n        if (!supportsERC165(account)) {\r\n            return false;\r\n        }\r\n\r\n        // query support of each interface in _interfaceIds\r\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // all interfaces supported\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface, does not check ERC165 support\r\n     * @param account The address of the contract to query for support of an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @return true if the contract at account indicates support of the interface with\r\n     * identifier interfaceId, false otherwise\r\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\r\n     * the behavior of this method is undefined. This precondition can be checked\r\n     * with {supportsERC165}.\r\n     * Interface identification is specified in ERC-165.\r\n     */\r\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\r\n        // success determines whether the staticcall succeeded and result determines\r\n        // whether the contract at account indicates support of _interfaceId\r\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\r\n\r\n        return (success && result);\r\n    }\r\n\r\n    /**\r\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\r\n     * @param account The address of the contract to query for support of an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @return success true if the STATICCALL succeeded, false otherwise\r\n     * @return result true if the STATICCALL succeeded and the contract at account\r\n     * indicates support of the interface with identifier interfaceId, false otherwise\r\n     */\r\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\r\n        private\r\n        view\r\n        returns (bool, bool)\r\n    {\r\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\r\n        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\r\n        if (result.length < 32) return (false, false);\r\n        return (success, abi.decode(result, (bool)));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/IERC165.sol\r\n\r\n \r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n \r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\r\n\r\n \r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n \r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n \r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/ERC165.sol\r\n\r\n \r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n \r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n \r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/ERC1155.sol\r\n\r\n \r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n *\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    // Mapping from token ID to account balances\r\n    mapping (uint256 => mapping(address => uint256)) private _balances;\r\n\r\n    // Mapping from account to operator approvals\r\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n\r\n    /*\r\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\r\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\r\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\r\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\r\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\r\n     *\r\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\r\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\r\n\r\n    /*\r\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\r\n\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor (string memory uri_) public {\r\n        _setURI(uri_);\r\n\r\n        // register the supported interfaces to conform to ERC1155 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC1155);\r\n\r\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n    function uri(uint256) external view virtual override returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(\r\n        address[] memory accounts,\r\n        uint256[] memory ids\r\n    )\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        _balances[id][from] = _balances[id][from].sub(amount, \"ERC1155: insufficient balance for transfer\");\r\n        _balances[id][to] = _balances[id][to].add(amount);\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            _balances[id][from] = _balances[id][from].sub(\r\n                amount,\r\n                \"ERC1155: insufficient balance for transfer\"\r\n            );\r\n            _balances[id][to] = _balances[id][to].add(amount);\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n     * interpreted by clients as\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\r\n        require(account != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        _balances[id][account] = _balances[id][account].add(amount);\r\n        emit TransferSingle(operator, address(0), account, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        for (uint i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\r\n        }\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens of token type `id` from `account`\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens of token type `id`.\r\n     */\r\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\r\n\r\n        _balances[id][account] = _balances[id][account].sub(\r\n            amount,\r\n            \"ERC1155: burn amount exceeds balance\"\r\n        );\r\n\r\n        emit TransferSingle(operator, account, address(0), id, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     */\r\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\r\n        require(account != address(0), \"ERC1155: burn from the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\r\n\r\n        for (uint i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\r\n                amounts[i],\r\n                \"ERC1155: burn amount exceeds balance\"\r\n            );\r\n        }\r\n\r\n        emit TransferBatch(operator, account, address(0), ids, amounts);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `id` and `amount` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    )\r\n        internal\r\n        virtual\r\n    { }\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    )\r\n        private\r\n    {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    )\r\n        private\r\n    {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol\r\n\r\n \r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\r\n    constructor() internal {\r\n        _registerInterface(\r\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\r\n            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IGenFactory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IGenFactory {\r\n    event TicketCreated(address indexed caller, address indexed genTicket);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getGenTicket(address) external view returns (uint);\r\n    function genTickets(uint) external view returns (address);\r\n    function genTicketsLength() external view returns (uint);\r\n\r\n    function createGenTicket(\r\n        address _underlyingToken, \r\n        uint256[] memory _numTickets,\r\n        uint256[] memory _ticketSizes,\r\n        uint[] memory _trancheWeightage,\r\n        uint[] memory _trancheLength,\r\n        string memory _uri\r\n    ) external returns (address);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n \r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/GenTickets.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n//import \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n\r\ncontract GenTickets is ERC1155, ERC1155Receiver {\r\n    using SafeMath for uint;\r\n    //using SafeERC20 for IERC20;\r\n\r\n    struct GenTicket {\r\n        uint256 numTickets;\r\n        uint256 ticketSize;\r\n    }\r\n    // Ticket id mod numTicketTypes determines tier\r\n    // Ticket id div numTicketTypes determines tranche of ticket\r\n    // When ticket is swapped in for tokens, the next ticket is minted to the user\r\n\r\n    address public underlyingToken;\r\n    uint256[] public trancheLength;\r\n    uint256[] public trancheWeightage;\r\n    mapping(uint256 => GenTicket) public genTickets;\r\n    uint public numTicketTypes;\r\n    IGenFactory public factory;\r\n    address public issuer;\r\n    bool public active = false;\r\n    uint256 private balanceNeeded = 0;\r\n    // Expected TGE timestamp, start at max uint256\r\n    uint public TGE = type(uint).max;\r\n\r\n    bytes private constant VALIDATOR = bytes('JC');\r\n    constructor (\r\n        address _underlyingToken,\r\n        uint256[] memory _numTickets,\r\n        uint256[] memory _ticketSizes,//in wei\r\n        uint[] memory _trancheWeightage,//in wei\r\n        uint[] memory _trancheLength,//in seconds\r\n        string memory _uri,\r\n        IGenFactory _factory,\r\n        address _issuer\r\n    ) \r\n        public \r\n        ERC1155(_uri)\r\n    {\r\n        underlyingToken = _underlyingToken;\r\n        trancheLength = _trancheLength;\r\n        trancheWeightage = _trancheWeightage;\r\n        factory = _factory;\r\n        issuer = _issuer;\r\n\r\n         for (uint i = 0; i < 50; i++){\r\n            if (_numTickets.length == i){\r\n                numTicketTypes = i;\r\n                break;\r\n            }\r\n            \r\n            balanceNeeded += _numTickets[i].mul(_ticketSizes[i]);\r\n            genTickets[i] = GenTicket(_numTickets[i], _ticketSizes[i]);\r\n        }\r\n    }\r\n\r\n    function returnTrancheLength() public view returns (uint256[] memory) {\r\n        return (trancheLength);\r\n    }\r\n    function returnTrancheWeightage() public view returns (uint256[] memory) {\r\n        return (trancheWeightage);\r\n    }\r\n\r\n    // For OpenSea\r\n    function owner() public view virtual returns (address) {\r\n        return issuer;\r\n    }\r\n\r\n    function updateTGE(uint timestamp) external {\r\n        require(msg.sender == issuer, \"GenTickets: Only issuer can update TGE\");\r\n        require(getBlockTimestamp() < TGE, \"GenTickets: TGE already occurred\");\r\n        require(getBlockTimestamp() < timestamp, \"GenTickets: New TGE must be in the future\");\r\n        // Determine whether we want to restrict this or not\r\n        //require(!active, \"Tokens are already active\");\r\n\r\n        TGE = timestamp;\r\n    }\r\n\r\n    function issue(address _to) external {\r\n        require(msg.sender == issuer, \"GenTickets: Only issuer can issue the tokens\");\r\n        require(!active, \"GenTickets: Token is already active\");\r\n        IERC20(underlyingToken).transferFrom(msg.sender, address(this), balanceNeeded);\r\n\r\n        address feeTo = factory.feeTo();\r\n        bytes memory data;\r\n        for (uint i = 0; i < 50; i++){\r\n            if (numTicketTypes == i){\r\n                break;\r\n            }\r\n\r\n            GenTicket memory ticketType = genTickets[i];\r\n            \r\n            uint256 feeAmount = 0;\r\n            if (feeTo != address(0)) {\r\n                // 1% of tickets generated is sent to feeTo address\r\n                feeAmount = ticketType.numTickets.div(100);\r\n                if (feeAmount == 0) {\r\n                    feeAmount = 1;\r\n                }\r\n                _mint(feeTo, i, feeAmount, data);\r\n            }\r\n\r\n            _mint(_to, i, ticketType.numTickets - feeAmount, data);\r\n        }\r\n\r\n        active = true;\r\n    }\r\n\r\n    // to buld drop NFTs to users //emergency service// onlyIssuer\r\n    function bulkAirdropTickets(address[] memory _to, uint256 _id, uint256 _amount) public {\r\n\r\n        require(msg.sender == issuer, \"GenTickets: Only issuer is allowed to AirDrop\");\r\n        require(IERC1155(address(this)).balanceOf(msg.sender, _id) >= (_to.length-1).mul(_amount), \"GenTickets: Not enough tickets, the amount calculation exceeds the balance\");\r\n\r\n        for (uint256 i = 0; i < _to.length; i++) {\r\n            safeTransferFrom(msg.sender, _to[i], _id, _amount, VALIDATOR);\r\n        }\r\n    }\r\n\r\n    // In case, wants all tokens back after minting tickets //onlyIssuer\r\n    function redeemIssuerTicket(uint256 _id, uint256 _amount) public {\r\n\r\n        require(msg.sender == issuer, \"GenTickets: Only issuer is allowed to redeem\");\r\n\r\n        uint tier = _id.mod(numTicketTypes);\r\n        GenTicket memory ticketType = genTickets[tier];\r\n\r\n        safeTransferFrom(address(msg.sender), address(this), _id, _amount, VALIDATOR);\r\n\r\n        // Transfer underlying tokens with corresponding ticket size\r\n        IERC20(underlyingToken).transfer(issuer, _amount.mul(ticketType.ticketSize));\r\n    }\r\n\r\n    function redeemTicket(address _to, uint256 _id, uint256 _amount) public {\r\n\r\n        require(_amount > 0, \"GenTicket: Invalid entry\");\r\n        require(IERC1155(address(this)).balanceOf(msg.sender, _id) >= _amount, \"GenTickets: Not enough tickets, the amount exceeds the balance\");\r\n\r\n        uint tier = _id.mod(numTicketTypes);\r\n        GenTicket memory ticketType = genTickets[tier];\r\n        require(getBlockTimestamp() > TGE, \"GenTickets: Project TGE not occured\");\r\n\r\n        uint256 redeemablePercentage;\r\n        uint256 redeemedPercentage;\r\n        uint256 redeemableCounter;\r\n        uint256 redeemedCounter;\r\n\r\n        uint tranche = _id.div(numTicketTypes);\r\n        require(tranche < trancheLength.length, \"GenTickets: Ticket has redeemed all tokens\");//true\r\n\r\n        for (uint i=0; i< trancheLength.length ; i++){\r\n            \r\n            if (i < tranche ){\r\n                redeemedPercentage += (trancheWeightage[i].div(10**14));\r\n                redeemedCounter += 1;\r\n            }\r\n\r\n            if (TGE.add(trancheLength[i]) <= getBlockTimestamp()){\r\n                redeemablePercentage += (trancheWeightage[i].div(10**14));\r\n                redeemableCounter += 1;\r\n            } else{\r\n                break;\r\n            }\r\n        }\r\n        require(redeemablePercentage > 0, \"GenTickets: zero amount cannot be claimed\");\r\n        require(redeemableCounter > redeemedCounter, \"GenTickets: Tokens for this ticket are being vested\");\r\n\r\n        uint256 tokens = (ticketType.ticketSize).mul(_amount).mul(redeemablePercentage - redeemedPercentage).div(1000000);\r\n\r\n        safeTransferFrom(address(msg.sender), address(this), _id, _amount, VALIDATOR);//4\r\n\r\n        // Transfer underlying tokens with corresponding ticket size\r\n        IERC20(underlyingToken).transfer(_to, tokens);\r\n        bytes memory data;\r\n        _mint(_to, _id.add(numTicketTypes.mul(redeemableCounter - redeemedCounter)), _amount, data);//12\r\n\r\n    }\r\n\r\n    function getBlockTimestamp() internal view returns (uint) {\r\n        // solium-disable-next-line security/no-block-members\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * ERC1155 Token ERC1155Receiver\r\n     */\r\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) override external returns(bytes4) {\r\n        if(keccak256(_data) == keccak256(VALIDATOR)){\r\n            return 0xf23a6e61;\r\n        }\r\n    }\r\n\r\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) override external returns(bytes4) {\r\n        if(keccak256(_data) == keccak256(VALIDATOR)){\r\n            return 0xbc197c81;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_numTickets\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ticketSizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_trancheWeightage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_trancheLength\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"contract IGenFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bulkAirdropTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IGenFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"genTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketSize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTicketTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemIssuerTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnTrancheLength\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnTrancheWeightage\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trancheLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trancheWeightage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"updateTGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GenTickets", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d9474595edb03e35c5843335f90eb18671921246000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000030200000000000000000000000000000000000000000000000000000000000005e0000000000000000000000000084f66e14add83c59369d7678d4d53765db9a0539000000000000000000000000157047cd2f49aad0fa7725241d5dd44bca3a21ff0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000002d79883d200000000000000000000000000000000000000000000000000000001e4fc799e000000000000000000000000000000000000000000000000000000012309ce54000000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000016e00000000000000000000000000000000000000000000000053444835ec5800000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c0000000000000000000000000000000000000000000000000000392d2e2bda9c000000000000000000000000000000000000000000000000000000000000000016e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009f85800000000000000000000000000000000000000000000000000000000000a0d7000000000000000000000000000000000000000000000000000000000000a228800000000000000000000000000000000000000000000000000000000000a37a000000000000000000000000000000000000000000000000000000000000a4cb800000000000000000000000000000000000000000000000000000000000a61d000000000000000000000000000000000000000000000000000000000000a76e800000000000000000000000000000000000000000000000000000000000a8c0000000000000000000000000000000000000000000000000000000000000aa11800000000000000000000000000000000000000000000000000000000000ab63000000000000000000000000000000000000000000000000000000000000acb4800000000000000000000000000000000000000000000000000000000000ae06000000000000000000000000000000000000000000000000000000000000af57800000000000000000000000000000000000000000000000000000000000b0a9000000000000000000000000000000000000000000000000000000000000b1fa800000000000000000000000000000000000000000000000000000000000b34c000000000000000000000000000000000000000000000000000000000000b49d800000000000000000000000000000000000000000000000000000000000b5ef000000000000000000000000000000000000000000000000000000000000b740800000000000000000000000000000000000000000000000000000000000b892000000000000000000000000000000000000000000000000000000000000b9e3800000000000000000000000000000000000000000000000000000000000bb35000000000000000000000000000000000000000000000000000000000000bc86800000000000000000000000000000000000000000000000000000000000bdd8000000000000000000000000000000000000000000000000000000000000bf29800000000000000000000000000000000000000000000000000000000000c07b000000000000000000000000000000000000000000000000000000000000c1cc800000000000000000000000000000000000000000000000000000000000c31e000000000000000000000000000000000000000000000000000000000000c46f800000000000000000000000000000000000000000000000000000000000c5c1000000000000000000000000000000000000000000000000000000000000c712800000000000000000000000000000000000000000000000000000000000c864000000000000000000000000000000000000000000000000000000000000c9b5800000000000000000000000000000000000000000000000000000000000cb07000000000000000000000000000000000000000000000000000000000000cc58800000000000000000000000000000000000000000000000000000000000cdaa000000000000000000000000000000000000000000000000000000000000cefb800000000000000000000000000000000000000000000000000000000000d04d000000000000000000000000000000000000000000000000000000000000d19e800000000000000000000000000000000000000000000000000000000000d2f0000000000000000000000000000000000000000000000000000000000000d441800000000000000000000000000000000000000000000000000000000000d593000000000000000000000000000000000000000000000000000000000000d6e4800000000000000000000000000000000000000000000000000000000000d836000000000000000000000000000000000000000000000000000000000000d987800000000000000000000000000000000000000000000000000000000000dad9000000000000000000000000000000000000000000000000000000000000dc2a800000000000000000000000000000000000000000000000000000000000dd7c000000000000000000000000000000000000000000000000000000000000decd800000000000000000000000000000000000000000000000000000000000e01f000000000000000000000000000000000000000000000000000000000000e170800000000000000000000000000000000000000000000000000000000000e2c2000000000000000000000000000000000000000000000000000000000000e413800000000000000000000000000000000000000000000000000000000000e565000000000000000000000000000000000000000000000000000000000000e6b6800000000000000000000000000000000000000000000000000000000000e808000000000000000000000000000000000000000000000000000000000000e959800000000000000000000000000000000000000000000000000000000000eaab000000000000000000000000000000000000000000000000000000000000ebfc800000000000000000000000000000000000000000000000000000000000ed4e000000000000000000000000000000000000000000000000000000000000ee9f800000000000000000000000000000000000000000000000000000000000eff1000000000000000000000000000000000000000000000000000000000000f142800000000000000000000000000000000000000000000000000000000000f294000000000000000000000000000000000000000000000000000000000000f3e5800000000000000000000000000000000000000000000000000000000000f537000000000000000000000000000000000000000000000000000000000000f688800000000000000000000000000000000000000000000000000000000000f7da000000000000000000000000000000000000000000000000000000000000f92b800000000000000000000000000000000000000000000000000000000000fa7d000000000000000000000000000000000000000000000000000000000000fbce800000000000000000000000000000000000000000000000000000000000fd20000000000000000000000000000000000000000000000000000000000000fe71800000000000000000000000000000000000000000000000000000000000ffc30000000000000000000000000000000000000000000000000000000000010114800000000000000000000000000000000000000000000000000000000001026600000000000000000000000000000000000000000000000000000000000103b78000000000000000000000000000000000000000000000000000000000010509000000000000000000000000000000000000000000000000000000000001065a80000000000000000000000000000000000000000000000000000000000107ac00000000000000000000000000000000000000000000000000000000000108fd8000000000000000000000000000000000000000000000000000000000010a4f0000000000000000000000000000000000000000000000000000000000010ba08000000000000000000000000000000000000000000000000000000000010cf20000000000000000000000000000000000000000000000000000000000010e438000000000000000000000000000000000000000000000000000000000010f9500000000000000000000000000000000000000000000000000000000000110e68000000000000000000000000000000000000000000000000000000000011238000000000000000000000000000000000000000000000000000000000001138980000000000000000000000000000000000000000000000000000000000114db000000000000000000000000000000000000000000000000000000000001162c800000000000000000000000000000000000000000000000000000000001177e00000000000000000000000000000000000000000000000000000000000118cf8000000000000000000000000000000000000000000000000000000000011a210000000000000000000000000000000000000000000000000000000000011b728000000000000000000000000000000000000000000000000000000000011cc40000000000000000000000000000000000000000000000000000000000011e158000000000000000000000000000000000000000000000000000000000011f6700000000000000000000000000000000000000000000000000000000000120b8800000000000000000000000000000000000000000000000000000000001220a000000000000000000000000000000000000000000000000000000000001235b80000000000000000000000000000000000000000000000000000000000124ad00000000000000000000000000000000000000000000000000000000000125fe800000000000000000000000000000000000000000000000000000000001275000000000000000000000000000000000000000000000000000000000000128a180000000000000000000000000000000000000000000000000000000000129f30000000000000000000000000000000000000000000000000000000000012b448000000000000000000000000000000000000000000000000000000000012c960000000000000000000000000000000000000000000000000000000000012de78000000000000000000000000000000000000000000000000000000000012f39000000000000000000000000000000000000000000000000000000000001308a80000000000000000000000000000000000000000000000000000000000131dc000000000000000000000000000000000000000000000000000000000001332d800000000000000000000000000000000000000000000000000000000001347f00000000000000000000000000000000000000000000000000000000000135d08000000000000000000000000000000000000000000000000000000000013722000000000000000000000000000000000000000000000000000000000001387380000000000000000000000000000000000000000000000000000000000139c50000000000000000000000000000000000000000000000000000000000013b168000000000000000000000000000000000000000000000000000000000013c680000000000000000000000000000000000000000000000000000000000013db98000000000000000000000000000000000000000000000000000000000013f0b000000000000000000000000000000000000000000000000000000000001405c80000000000000000000000000000000000000000000000000000000000141ae00000000000000000000000000000000000000000000000000000000000142ff800000000000000000000000000000000000000000000000000000000001445100000000000000000000000000000000000000000000000000000000000145a280000000000000000000000000000000000000000000000000000000000146f4000000000000000000000000000000000000000000000000000000000001484580000000000000000000000000000000000000000000000000000000000149970000000000000000000000000000000000000000000000000000000000014ae88000000000000000000000000000000000000000000000000000000000014c3a0000000000000000000000000000000000000000000000000000000000014d8b8000000000000000000000000000000000000000000000000000000000014edd000000000000000000000000000000000000000000000000000000000001502e800000000000000000000000000000000000000000000000000000000001518000000000000000000000000000000000000000000000000000000000000152d18000000000000000000000000000000000000000000000000000000000015423000000000000000000000000000000000000000000000000000000000001557480000000000000000000000000000000000000000000000000000000000156c6000000000000000000000000000000000000000000000000000000000001581780000000000000000000000000000000000000000000000000000000000159690000000000000000000000000000000000000000000000000000000000015aba8000000000000000000000000000000000000000000000000000000000015c0c0000000000000000000000000000000000000000000000000000000000015d5d8000000000000000000000000000000000000000000000000000000000015eaf0000000000000000000000000000000000000000000000000000000000016000800000000000000000000000000000000000000000000000000000000001615200000000000000000000000000000000000000000000000000000000000162a380000000000000000000000000000000000000000000000000000000000163f50000000000000000000000000000000000000000000000000000000000016546800000000000000000000000000000000000000000000000000000000001669800000000000000000000000000000000000000000000000000000000000167e9800000000000000000000000000000000000000000000000000000000001693b0000000000000000000000000000000000000000000000000000000000016a8c8000000000000000000000000000000000000000000000000000000000016bde0000000000000000000000000000000000000000000000000000000000016d2f8000000000000000000000000000000000000000000000000000000000016e810000000000000000000000000000000000000000000000000000000000016fd28000000000000000000000000000000000000000000000000000000000017124000000000000000000000000000000000000000000000000000000000001727580000000000000000000000000000000000000000000000000000000000173c70000000000000000000000000000000000000000000000000000000000017518800000000000000000000000000000000000000000000000000000000001766a00000000000000000000000000000000000000000000000000000000000177bb800000000000000000000000000000000000000000000000000000000001790d0000000000000000000000000000000000000000000000000000000000017a5e8000000000000000000000000000000000000000000000000000000000017bb00000000000000000000000000000000000000000000000000000000000017d018000000000000000000000000000000000000000000000000000000000017e530000000000000000000000000000000000000000000000000000000000017fa480000000000000000000000000000000000000000000000000000000000180f60000000000000000000000000000000000000000000000000000000000018247800000000000000000000000000000000000000000000000000000000001839900000000000000000000000000000000000000000000000000000000000184ea800000000000000000000000000000000000000000000000000000000001863c000000000000000000000000000000000000000000000000000000000001878d80000000000000000000000000000000000000000000000000000000000188df0000000000000000000000000000000000000000000000000000000000018a308000000000000000000000000000000000000000000000000000000000018b820000000000000000000000000000000000000000000000000000000000018cd38000000000000000000000000000000000000000000000000000000000018e250000000000000000000000000000000000000000000000000000000000018f7680000000000000000000000000000000000000000000000000000000000190c80000000000000000000000000000000000000000000000000000000000019219800000000000000000000000000000000000000000000000000000000001936b00000000000000000000000000000000000000000000000000000000000194bc800000000000000000000000000000000000000000000000000000000001960e000000000000000000000000000000000000000000000000000000000001975f80000000000000000000000000000000000000000000000000000000000198b10000000000000000000000000000000000000000000000000000000000019a028000000000000000000000000000000000000000000000000000000000019b540000000000000000000000000000000000000000000000000000000000019ca58000000000000000000000000000000000000000000000000000000000019df70000000000000000000000000000000000000000000000000000000000019f48800000000000000000000000000000000000000000000000000000000001a09a000000000000000000000000000000000000000000000000000000000001a1eb800000000000000000000000000000000000000000000000000000000001a33d000000000000000000000000000000000000000000000000000000000001a48e800000000000000000000000000000000000000000000000000000000001a5e0000000000000000000000000000000000000000000000000000000000001a731800000000000000000000000000000000000000000000000000000000001a883000000000000000000000000000000000000000000000000000000000001a9d4800000000000000000000000000000000000000000000000000000000001ab26000000000000000000000000000000000000000000000000000000000001ac77800000000000000000000000000000000000000000000000000000000001adc9000000000000000000000000000000000000000000000000000000000001af1a800000000000000000000000000000000000000000000000000000000001b06c000000000000000000000000000000000000000000000000000000000001b1bd800000000000000000000000000000000000000000000000000000000001b30f000000000000000000000000000000000000000000000000000000000001b460800000000000000000000000000000000000000000000000000000000001b5b2000000000000000000000000000000000000000000000000000000000001b703800000000000000000000000000000000000000000000000000000000001b855000000000000000000000000000000000000000000000000000000000001b9a6800000000000000000000000000000000000000000000000000000000001baf8000000000000000000000000000000000000000000000000000000000001bc49800000000000000000000000000000000000000000000000000000000001bd9b000000000000000000000000000000000000000000000000000000000001beec800000000000000000000000000000000000000000000000000000000001c03e000000000000000000000000000000000000000000000000000000000001c18f800000000000000000000000000000000000000000000000000000000001c2e1000000000000000000000000000000000000000000000000000000000001c432800000000000000000000000000000000000000000000000000000000001c584000000000000000000000000000000000000000000000000000000000001c6d5800000000000000000000000000000000000000000000000000000000001c827000000000000000000000000000000000000000000000000000000000001c978800000000000000000000000000000000000000000000000000000000001caca000000000000000000000000000000000000000000000000000000000001cc1b800000000000000000000000000000000000000000000000000000000001cd6d000000000000000000000000000000000000000000000000000000000001cebe800000000000000000000000000000000000000000000000000000000001d010000000000000000000000000000000000000000000000000000000000001d161800000000000000000000000000000000000000000000000000000000001d2b3000000000000000000000000000000000000000000000000000000000001d404800000000000000000000000000000000000000000000000000000000001d556000000000000000000000000000000000000000000000000000000000001d6a7800000000000000000000000000000000000000000000000000000000001d7f9000000000000000000000000000000000000000000000000000000000001d94a800000000000000000000000000000000000000000000000000000000001da9c000000000000000000000000000000000000000000000000000000000001dbed800000000000000000000000000000000000000000000000000000000001dd3f000000000000000000000000000000000000000000000000000000000001de90800000000000000000000000000000000000000000000000000000000001dfe2000000000000000000000000000000000000000000000000000000000001e133800000000000000000000000000000000000000000000000000000000001e285000000000000000000000000000000000000000000000000000000000001e3d6800000000000000000000000000000000000000000000000000000000001e528000000000000000000000000000000000000000000000000000000000001e679800000000000000000000000000000000000000000000000000000000001e7cb000000000000000000000000000000000000000000000000000000000001e91c800000000000000000000000000000000000000000000000000000000001ea6e000000000000000000000000000000000000000000000000000000000001ebbf800000000000000000000000000000000000000000000000000000000001ed11000000000000000000000000000000000000000000000000000000000001ee62800000000000000000000000000000000000000000000000000000000001efb4000000000000000000000000000000000000000000000000000000000001f105800000000000000000000000000000000000000000000000000000000001f257000000000000000000000000000000000000000000000000000000000001f3a8800000000000000000000000000000000000000000000000000000000001f4fa000000000000000000000000000000000000000000000000000000000001f64b800000000000000000000000000000000000000000000000000000000001f79d000000000000000000000000000000000000000000000000000000000001f8ee800000000000000000000000000000000000000000000000000000000001fa40000000000000000000000000000000000000000000000000000000000001fb91800000000000000000000000000000000000000000000000000000000001fce3000000000000000000000000000000000000000000000000000000000001fe34800000000000000000000000000000000000000000000000000000000001ff8600000000000000000000000000000000000000000000000000000000000200d78000000000000000000000000000000000000000000000000000000000020229000000000000000000000000000000000000000000000000000000000002037a80000000000000000000000000000000000000000000000000000000000204cc000000000000000000000000000000000000000000000000000000000002061d800000000000000000000000000000000000000000000000000000000002076f00000000000000000000000000000000000000000000000000000000000208c08000000000000000000000000000000000000000000000000000000000020a120000000000000000000000000000000000000000000000000000000000020b638000000000000000000000000000000000000000000000000000000000020cb50000000000000000000000000000000000000000000000000000000000020e068000000000000000000000000000000000000000000000000000000000020f5800000000000000000000000000000000000000000000000000000000000210a980000000000000000000000000000000000000000000000000000000000211fb000000000000000000000000000000000000000000000000000000000002134c800000000000000000000000000000000000000000000000000000000002149e00000000000000000000000000000000000000000000000000000000000215ef8000000000000000000000000000000000000000000000000000000000021741000000000000000000000000000000000000000000000000000000000002189280000000000000000000000000000000000000000000000000000000000219e40000000000000000000000000000000000000000000000000000000000021b358000000000000000000000000000000000000000000000000000000000021c870000000000000000000000000000000000000000000000000000000000021dd88000000000000000000000000000000000000000000000000000000000021f2a000000000000000000000000000000000000000000000000000000000002207b80000000000000000000000000000000000000000000000000000000000221cd000000000000000000000000000000000000000000000000000000000002231e800000000000000000000000000000000000000000000000000000000002247000000000000000000000000000000000000000000000000000000000000225c18000000000000000000000000000000000000000000000000000000000022713000000000000000000000000000000000000000000000000000000000002286480000000000000000000000000000000000000000000000000000000000229b60000000000000000000000000000000000000000000000000000000000022b078000000000000000000000000000000000000000000000000000000000022c590000000000000000000000000000000000000000000000000000000000022daa8000000000000000000000000000000000000000000000000000000000022efc000000000000000000000000000000000000000000000000000000000002304d800000000000000000000000000000000000000000000000000000000002319f00000000000000000000000000000000000000000000000000000000000232f08000000000000000000000000000000000000000000000000000000000023442000000000000000000000000000000000000000000000000000000000002359380000000000000000000000000000000000000000000000000000000000236e5000000000000000000000000000000000000000000000000000000000002383680000000000000000000000000000000000000000000000000000000000239880000000000000000000000000000000000000000000000000000000000023ad98000000000000000000000000000000000000000000000000000000000023c2b0000000000000000000000000000000000000000000000000000000000023d7c8000000000000000000000000000000000000000000000000000000000023ece000000000000000000000000000000000000000000000000000000000002401f800000000000000000000000000000000000000000000000000000000002417100000000000000000000000000000000000000000000000000000000000242c28000000000000000000000000000000000000000000000000000000000024414000000000000000000000000000000000000000000000000000000000002456580000000000000000000000000000000000000000000000000000000000246b70000000000000000000000000000000000000000000000000000000000024808800000000000000000000000000000000000000000000000000000000002495a0000000000000000000000000000000000000000000000000000000000024aab8000000000000000000000000000000000000000000000000000000000024bfd0000000000000000000000000000000000000000000000000000000000024d4e8000000000000000000000000000000000000000000000000000000000024ea00000000000000000000000000000000000000000000000000000000000024ff18000000000000000000000000000000000000000000000000000000000025143000000000000000000000000000000000000000000000000000000000002529480000000000000000000000000000000000000000000000000000000000253e60000000000000000000000000000000000000000000000000000000000025537800000000000000000000000000000000000000000000000000000000002568900000000000000000000000000000000000000000000000000000000000257da800000000000000000000000000000000000000000000000000000000002592c0000000000000000000000000000000000000000000000000000000000025a7d8000000000000000000000000000000000000000000000000000000000025bcf0000000000000000000000000000000000000000000000000000000000025d208000000000000000000000000000000000000000000000000000000000025e720000000000000000000000000000000000000000000000000000000000025fc38000000000000000000000000000000000000000000000000000000000026115000000000000000000000000000000000000000000000000000000000002626680000000000000000000000000000000000000000000000000000000000263b80000000000000000000000000000000000000000000000000000000000026509800000000000000000000000000000000000000000000000000000000002665b00000000000000000000000000000000000000000000000000000000000267ac80000000000000000000000000000000000000000000000000000000000268fe0000000000000000000000000000000000000000000000000000000000026a4f8000000000000000000000000000000000000000000000000000000000026ba10000000000000000000000000000000000000000000000000000000000026cf28000000000000000000000000000000000000000000000000000000000026e440000000000000000000000000000000000000000000000000000000000026f9580000000000000000000000000000000000000000000000000000000000270e70000000000000000000000000000000000000000000000000000000000027238800000000000000000000000000000000000000000000000000000000002738a00000000000000000000000000000000000000000000000000000000000274db800000000000000000000000000000000000000000000000000000000002762d000000000000000000000000000000000000000000000000000000000002777e80000000000000000000000000000000000000000000000000000000000278d00000000000000000000000000000000000000000000000000000000000027a218000000000000000000000000000000000000000000000000000000000027b730000000000000000000000000000000000000000000000000000000000027cc48000000000000000000000000000000000000000000000000000000000027e160000000000000000000000000000000000000000000000000000000000027f6780000000000000000000000000000000000000000000000000000000000000003468747470733a2f2f636c6f756466726f6e742e67656e7368617264732e636f6d2f73757065726e6f76612f7b69647d2e6a736f6e000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://af4871e15e77ebe0199b02be86cb58bdd87fd4e1fbfe452cdf0dffb58cb0223a"}