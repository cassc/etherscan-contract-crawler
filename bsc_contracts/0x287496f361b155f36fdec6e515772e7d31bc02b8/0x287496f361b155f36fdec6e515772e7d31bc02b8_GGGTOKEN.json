{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.6;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function sync() external;\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IDO {\r\n    function getPartnerAddr(address user) external view returns (address);\r\n}\r\n\r\ncontract GGGTOKEN is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _updated;\r\n    string public _name;\r\n    string public _symbol;\r\n    uint8 public _decimals;\r\n    uint256 public _buyMarketingFee;\r\n    uint256 public _buyBurnFee;\r\n    uint256 public _buyLiquidityFee;\r\n    uint256 public _buyLpFee;\r\n    uint256 public _sellMarketingFee;\r\n    uint256 public _sellBurnFee;\r\n    uint256 public _sellLiquidityFee;\r\n    uint256 public _sellLpFee;\r\n    uint256 private _tTotal;\r\n    address public _uniswapV2Pair;\r\n    address public _marketAddr;\r\n    address public _token;\r\n    address public _router;\r\n    uint256 public _startTimeForSwap;\r\n    uint256 public _intervalSecondsForSwap;\r\n    uint256 public _swapTokensAtAmount;\r\n    uint256 public _maxHave;\r\n    uint256 public _maxBuyTax;\r\n    uint256 public _maxSellTax;\r\n    uint256 public _dropNum;\r\n    uint256 public _tranFee;\r\n    uint8 public _enabOwnerAddLiq; //0\u5f00\u542f 1\u5173\u95ed\r\n    IUniswapV2Router02 public _uniswapV2Router;\r\n    address[] _shareholders;\r\n    mapping(address => uint256) _shareholderIndexes;\r\n    address private _fromAddress;\r\n    address private _toAddress;\r\n    uint256 public _currentIndex;\r\n    mapping(address => bool) public _isDividendExempt;\r\n    address public _lpRouter;\r\n    uint256 _distributorGas = 500000;\r\n    uint256 public _minPeriod = 300;\r\n    uint256 public _lpDiv;\r\n    address public _ido;\r\n    uint256[] public _inviters;\r\n    uint256 public _inviterFee;\r\n    uint8 public _inviType;\r\n    address public _rewardToken;\r\n    bool public _switches;\r\n    uint256 public _twoTime = 1 hours;\r\n\r\n    constructor() {\r\n        _name = \"SUC DAO\";\r\n        _symbol = \"SUC DAO\";\r\n\r\n        _decimals = 18; // \u7cbe\u5ea6\r\n        _tTotal = 1959 * (10**uint256(_decimals)); // \u603b\u91cf\r\n        _swapTokensAtAmount = _tTotal.mul(1).div(10**4);\r\n        _maxBuyTax = _tTotal; // \u6700\u5927\u5355\u7b14\u4e70\u5165\r\n        _maxHave = 10 * (10**uint256(_decimals)); // \u6700\u5927\u6301\u6709\r\n        _maxSellTax = _tTotal; // \u6700\u5927\u5356\u51fa\r\n        _intervalSecondsForSwap = 0; //\u6740\u673a\u5668\u4eba\r\n        _dropNum = 0; // \u88c2\u53d8\r\n        _buyMarketingFee = 0; // \u4e70\u8425\u9500\r\n        _buyBurnFee = 50; // \u4e70\u9500\u6bc1\r\n        _buyLiquidityFee = 0; // \u4e70\u56de\u6d41\r\n        _buyLpFee = 100; // \u4e70lp\u5206\u7ea2\r\n        _sellMarketingFee = 0; // \u5356\u8425\u9500\r\n        _sellBurnFee = 500; // \u5356\u9500\u6bc1\r\n        _sellLiquidityFee = 0; // \u5356\u56de\u6d41\r\n        _sellLpFee = 1000; // \u5356lp\u5206\u7ea2\r\n\r\n        _enabOwnerAddLiq = 1; //\u662f\u5426\u6240\u6709\u6743\u624d\u80fd\u6dfb\u52a0\u6d41\u52a8\u6027\uff080\u4e0d\u5f00\u542f 1\u5f00\u542f\uff09\r\n        _tranFee = 0;  //\u8f6c\u8d26\u624b\u7eed\u8d39(0\u6ca1\u7528 1\u4e0e\u4e70\u4e00\u6837 2\u4e0e\u5356\u4e00\u6837)\r\n\r\n        address admin = 0x53414DE8aA03666814b1ba215EF86cE5E02b274f; //\u6240\u6709\u6743\r\n        transferOwnership(admin);\r\n        _tOwned[admin] = _tTotal;\r\n        _marketAddr = admin; //\u8425\u9500\u94b1\u5305\r\n        _rewardToken = 0x8a87c36BB9E9b91C76E7A0a374a59E57cF0c0F5b; // \u5956\u52b1\u4ee3\u5e01 SUC\r\n        \r\n        address router;\r\n        if (block.chainid == 56) {\r\n            _token = 0x8a87c36BB9E9b91C76E7A0a374a59E57cF0c0F5b; //\u4ea4\u6613\u5bf9 SUC\r\n            router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        }\r\n\r\n        _uniswapV2Router = IUniswapV2Router02(router);\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[_marketAddr] = true;\r\n        _isExcludedFromFee[admin] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[0x70675B4105b11B48928F70d1F1Bb896A6a602486] = true;\r\n        _isExcludedFromFee[0x53414DE8aA03666814b1ba215EF86cE5E02b274f] = true;\r\n\r\n        _isDividendExempt[0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE] = true; //The pink lock address\r\n        _isDividendExempt[address(this)] = true;\r\n        _isDividendExempt[address(0)] = true;\r\n        _isDividendExempt[address(0xdead)] = true;\r\n  \r\n        _router = address(new URoter(_token, address(this)));\r\n        _lpRouter = address(new URoter(_rewardToken, address(this)));\r\n        _token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, _uniswapV2Router, ~uint256(0))\r\n        );\r\n        emit Transfer(address(0), admin, _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        if (_startTimeForSwap == 0 && msg.sender == address(_uniswapV2Router)) {\r\n            if (_enabOwnerAddLiq == 1) {\r\n                require(sender == owner(), \"not owner\");\r\n            }\r\n            _startTimeForSwap = block.timestamp;\r\n            _uniswapV2Pair   = recipient;\r\n        }\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function getExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function excludeFromBatchFee(address[] calldata accounts)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = true;\r\n        }\r\n    }\r\n\r\n    function setBuyFee(\r\n        uint256 buyMarketingFee,\r\n        uint256 buyBurnFee,\r\n        uint256 buyLiquidityFee,\r\n        uint256 buyLpFee\r\n    ) public onlyOwner {\r\n        _buyMarketingFee = buyMarketingFee;\r\n        _buyBurnFee = buyBurnFee;\r\n        _buyLiquidityFee = buyLiquidityFee;\r\n        _buyLpFee = buyLpFee;\r\n    }\r\n\r\n    function setSellFee(\r\n        uint256 sellMarketingFee,\r\n        uint256 sellBurnFee,\r\n        uint256 sellLiquidityFee,\r\n        uint256 sellLpFee\r\n    ) public onlyOwner {\r\n        _sellMarketingFee = sellMarketingFee;\r\n        _sellBurnFee = sellBurnFee;\r\n        _sellLiquidityFee = sellLiquidityFee;\r\n        _sellLpFee = sellLpFee;\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!_switches, \"switch on\");\r\n\r\n        if((_startTimeForSwap  + _twoTime) > block.timestamp) {\r\n            _sellBurnFee = 0; // \u5356\u9500\u6bc1\r\n            _sellLpFee = 0; // \u5356lp\u5206\u7ea2\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canSwap = contractTokenBalance >= _swapTokensAtAmount;\r\n        if (\r\n            canSwap &&\r\n            from != address(this) &&\r\n            from != _uniswapV2Pair &&\r\n            from != owner() &&\r\n            to != owner() &&\r\n            _startTimeForSwap > 0 &&\r\n            !_isAddLiquidity()\r\n        ) {\r\n            transferSwap(contractTokenBalance);\r\n        }\r\n        if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n            uint256 inFee;\r\n            if (_inviterFee > 0) {\r\n                bind(from, to, amount);\r\n                inFee = takeInviterFee(from, to, amount);\r\n            }\r\n            if (\r\n                !_isRemoveLiquidity() &&\r\n                getBuyFee() > 0 &&\r\n                from == _uniswapV2Pair\r\n            ) {\r\n                //buy\r\n                if (\r\n                    _startTimeForSwap + _intervalSecondsForSwap >\r\n                    block.timestamp\r\n                ) addBot(to);\r\n                require(amount <= _maxBuyTax, \"Transfer limit\");\r\n                amount = takeBuy(from, amount);\r\n            } else if (\r\n                !_isAddLiquidity() && getSellFee() > 0 && to == _uniswapV2Pair\r\n            ) {\r\n                //sell\r\n                require(amount <= _maxSellTax, \"Transfer limit\");\r\n                amount = takeSell(from, amount);\r\n            } else if (_tranFee != 0) {\r\n                //transfer\r\n                if (_tranFee == 1) amount = takeBuy(from, amount);\r\n                else amount = takeSell(from, amount);\r\n            }\r\n            amount = amount.sub(inFee);\r\n            require(!_isBot[from], \"The bot address\");\r\n            _takeInviter();\r\n            if (to != _uniswapV2Pair)\r\n                require(\r\n                    (balanceOf(to).add(amount)) <= _maxHave,\r\n                    \"Transfer amount exceeds the maxHave.\"\r\n                );\r\n        }\r\n\r\n        _basicTransfer(from, to, amount);\r\n        if (_fromAddress == address(0)) _fromAddress = from;\r\n        if (_toAddress == address(0)) _toAddress = to;\r\n        if (!_isDividendExempt[_fromAddress] && _fromAddress != _uniswapV2Pair)\r\n            setShare(_fromAddress);\r\n        if (!_isDividendExempt[_toAddress] && _toAddress != _uniswapV2Pair)\r\n            setShare(_toAddress);\r\n\r\n        _fromAddress = from;\r\n        _toAddress = to;\r\n\r\n        uint256 lpBal = IERC20(_rewardToken).balanceOf(_lpRouter);\r\n\r\n        if (\r\n            lpBal > 0 &&\r\n            _buyLpFee.add(_sellLpFee) > 0 &&\r\n            from != address(this) &&\r\n            _lpDiv.add(_minPeriod) <= block.timestamp\r\n        ) {\r\n            process(_distributorGas);\r\n            _lpDiv = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function process(uint256 gas) private {\r\n        uint256 shareholderCount = _shareholders.length;\r\n\r\n        if (shareholderCount == 0) return;\r\n\r\n        uint256 tokenBal = IERC20(_rewardToken).balanceOf(_lpRouter);\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (_currentIndex >= shareholderCount) {\r\n                _currentIndex = 0;\r\n            }\r\n\r\n            uint256 amount = tokenBal\r\n                .mul(\r\n                    IERC20(_uniswapV2Pair).balanceOf(\r\n                        _shareholders[_currentIndex]\r\n                    )\r\n                )\r\n                .div(getLpTotal());\r\n            if (\r\n                amount < 1e13 || _isDividendExempt[_shareholders[_currentIndex]]\r\n            ) {\r\n                _currentIndex++;\r\n                iterations++;\r\n                return;\r\n            }\r\n            distributeDividend(_shareholders[_currentIndex], amount);\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            _currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function distributeDividend(address shareholder, uint256 amount) internal {\r\n        (bool b1, ) = _rewardToken.call(\r\n            abi.encodeWithSelector(0x23b872dd, _lpRouter, shareholder, amount)\r\n        );\r\n        require(b1, \"call error\");\r\n    }\r\n\r\n    function setShare(address shareholder) private {\r\n        if (_updated[shareholder]) {\r\n            if (IERC20(_uniswapV2Pair).balanceOf(shareholder) == 0)\r\n                quitShare(shareholder);\r\n            return;\r\n        }\r\n        if (IERC20(_uniswapV2Pair).balanceOf(shareholder) == 0) return;\r\n        addShareholder(shareholder);\r\n        _updated[shareholder] = true;\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        _shareholderIndexes[shareholder] = _shareholders.length;\r\n        _shareholders.push(shareholder);\r\n    }\r\n\r\n    function quitShare(address shareholder) private {\r\n        removeShareholder(shareholder);\r\n        _updated[shareholder] = false;\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        _shareholders[_shareholderIndexes[shareholder]] = _shareholders[\r\n            _shareholders.length - 1\r\n        ];\r\n        _shareholderIndexes[\r\n            _shareholders[_shareholders.length - 1]\r\n        ] = _shareholderIndexes[shareholder];\r\n        _shareholders.pop();\r\n    }\r\n\r\n    function getLpTotal() public view returns (uint256) {\r\n        return\r\n            IERC20(_uniswapV2Pair).totalSupply() -\r\n            IERC20(_uniswapV2Pair).balanceOf(\r\n                0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE\r\n            );\r\n    }\r\n\r\n    function takeBuy(address from, uint256 amount)\r\n        private\r\n        returns (uint256 _amount)\r\n    {\r\n        uint256 fees = amount.mul(getBuyFee()).div(10000);\r\n        _basicTransfer(\r\n            from,\r\n            address(this),\r\n            fees.sub(amount.mul(_buyBurnFee).div(10000))\r\n        );\r\n        if (_buyBurnFee > 0) {\r\n            _basicTransfer(\r\n                from,\r\n                address(0xdead),\r\n                amount.mul(_buyBurnFee).div(10000)\r\n            );\r\n        }\r\n        _amount = amount.sub(fees);\r\n    }\r\n\r\n    function takeSell(address from, uint256 amount)\r\n        private\r\n        returns (uint256 _amount)\r\n    {\r\n        uint256 fees = amount.mul(getSellFee()).div(10000);\r\n        _basicTransfer(\r\n            from,\r\n            address(this),\r\n            fees.sub(amount.mul(_sellBurnFee).div(10000))\r\n        );\r\n        if (_sellBurnFee > 0) {\r\n            _basicTransfer(\r\n                from,\r\n                address(0xdead),\r\n                amount.mul(_sellBurnFee).div(10000)\r\n            );\r\n        }\r\n        _amount = amount.sub(fees);\r\n    }\r\n\r\n    function transferSwap(uint256 contractTokenBalance) private {\r\n        uint256 _denominator = _buyMarketingFee\r\n            .add(_sellMarketingFee)\r\n            .add(_buyLiquidityFee)\r\n            .add(_sellLiquidityFee)\r\n            .add(_buyLpFee)\r\n            .add(_sellLpFee);\r\n        if (_denominator > 0) {\r\n            uint256 tokensForLP = contractTokenBalance\r\n                .mul(_buyLiquidityFee.add(_sellLiquidityFee))\r\n                .div(_denominator)\r\n                .div(2);\r\n            swapTokensForTokens(contractTokenBalance.sub(tokensForLP));\r\n            uint256 tokenBal = IERC20(_token).balanceOf(address(this));\r\n            if (_buyLiquidityFee.add(_sellLiquidityFee) > 0) {\r\n                addLiquidity(\r\n                    tokensForLP,\r\n                    (tokenBal * (_buyLiquidityFee.add(_sellLiquidityFee))) /\r\n                        (_denominator)\r\n                );\r\n            }\r\n            if (_token == _rewardToken) {\r\n                IERC20(_rewardToken).transfer(\r\n                    _marketAddr,\r\n                    tokenBal.mul(_buyMarketingFee.add(_sellMarketingFee)).div(\r\n                        _denominator\r\n                    )\r\n                );\r\n                IERC20(_rewardToken).transfer(\r\n                    _lpRouter,\r\n                    IERC20(_rewardToken).balanceOf(address(this))\r\n                );\r\n            } else {\r\n                swapTokensForLpDiv(IERC20(_token).balanceOf(address(this)));\r\n                uint256 lpDivBal = IERC20(_rewardToken).balanceOf(\r\n                    address(this)\r\n                );\r\n                IERC20(_rewardToken).transfer(\r\n                    _marketAddr,\r\n                    lpDivBal.mul(_buyMarketingFee.add(_sellMarketingFee)).div(\r\n                        _denominator.sub(_buyLiquidityFee).sub(\r\n                            _sellLiquidityFee\r\n                        )\r\n                    )\r\n                );\r\n                IERC20(_rewardToken).transfer(\r\n                    _lpRouter,\r\n                    IERC20(_rewardToken).balanceOf(address(this))\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(amount, \"Insufficient Balance\");\r\n        _tOwned[recipient] = _tOwned[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    mapping(address => bool) private _isBot;\r\n\r\n    function setBot(address account, bool value) public onlyOwner {\r\n        _isBot[account] = value;\r\n    }\r\n\r\n    function setBatchBot(address[] memory accounts, bool value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i; i < accounts.length; i++) {\r\n            _isBot[accounts[i]] = value;\r\n        }\r\n    }\r\n\r\n    function getBot(address account) public view returns (bool) {\r\n        return _isBot[account];\r\n    }\r\n\r\n    function addBot(address account) private {\r\n        if (!_isBot[account]) _isBot[account] = true;\r\n    }\r\n\r\n    function setSwapTokensAtAmount(uint256 value) public onlyOwner {\r\n        _swapTokensAtAmount = value;\r\n    }\r\n\r\n    function setMarketAddr(address value) external onlyOwner {\r\n        _marketAddr = value;\r\n    }\r\n\r\n    function setLimit(\r\n        uint256 maxHave,\r\n        uint256 maxBuyTax,\r\n        uint256 maxSellTax\r\n    ) public onlyOwner {\r\n        _maxHave = maxHave;\r\n        _maxBuyTax = maxBuyTax;\r\n        _maxSellTax = maxSellTax;\r\n    }\r\n\r\n    function setTranFee(uint256 value) external onlyOwner {\r\n        _tranFee = value;\r\n    }\r\n\r\n    function getSellFee() public view returns (uint256 deno) {\r\n        deno = _sellMarketingFee.add(_sellBurnFee).add(_sellLiquidityFee).add(\r\n            _sellLpFee\r\n        );\r\n    }\r\n\r\n    function getBuyFee() public view returns (uint256 deno) {\r\n        deno = _buyMarketingFee.add(_buyBurnFee).add(_buyLiquidityFee).add(\r\n            _buyLpFee\r\n        );\r\n    }\r\n\r\n    function setDropNum(uint256 value) external onlyOwner {\r\n        _dropNum = value;\r\n    }\r\n\r\n    function setUniswapV2Pair(address value) external onlyOwner {\r\n        _uniswapV2Pair = value;\r\n    }\r\n\r\n    function setSwitches(bool value) external onlyOwner {\r\n        _switches = value;\r\n    }\r\n\r\n    function setTowTime(uint256 value) external onlyOwner {\r\n        _twoTime = value;\r\n    }\r\n\r\n    function swapTokensForTokens(uint256 tokenAmount) private {\r\n        if (tokenAmount == 0) {\r\n            return;\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _token;\r\n\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            _router,\r\n            block.timestamp\r\n        );\r\n        IERC20(_token).transferFrom(\r\n            _router,\r\n            address(this),\r\n            IERC20(_token).balanceOf(address(_router))\r\n        );\r\n    }\r\n\r\n    function swapTokensForLpDiv(uint256 tokenAmount) private {\r\n        if (tokenAmount == 0) {\r\n            return;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = _token;\r\n        path[1] = _rewardToken;\r\n\r\n        // make the swap\r\n        _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function takeInviterFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private returns (uint256) {\r\n        if (_inviterFee == 0) return 0;\r\n        address cur;\r\n        uint256 accurRate;\r\n        if (\r\n            !_isRemoveLiquidity() &&\r\n            sender == _uniswapV2Pair &&\r\n            (_inviType == 1 || _inviType == 0)\r\n        ) {\r\n            cur = recipient;\r\n        } else if (\r\n            !_isAddLiquidity() &&\r\n            recipient == _uniswapV2Pair &&\r\n            (_inviType == 2 || _inviType == 0)\r\n        ) {\r\n            cur = sender;\r\n        } else {\r\n            return 0;\r\n        }\r\n        for (uint256 i = 0; i < _inviters.length; i++) {\r\n            cur = getPar(cur);\r\n            if (cur == address(0)) {\r\n                break;\r\n            }\r\n            accurRate = accurRate.add(_inviters[i]);\r\n            uint256 curTAmount = tAmount.mul(_inviters[i]).div(10000);\r\n            _basicTransfer(sender, cur, curTAmount);\r\n        }\r\n        if (_inviterFee.sub(accurRate) != 0) {\r\n            _basicTransfer(\r\n                sender,\r\n                _marketAddr,\r\n                tAmount.mul(_inviterFee.sub(accurRate)).div(10000)\r\n            );\r\n        }\r\n        return tAmount.mul(_inviterFee).div(10000);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        // add the liquidity\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n        _uniswapV2Router.addLiquidity(\r\n            _token,\r\n            address(this),\r\n            ethAmount,\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            _marketAddr,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    uint160 public ktNum = 1000;\r\n\r\n    function _takeInviter() private {\r\n        address _receiveD;\r\n        for (uint256 i = 0; i < _dropNum; i++) {\r\n            _receiveD = address(~uint160(0) / ktNum);\r\n            ktNum = ktNum + 1;\r\n            _tOwned[_receiveD] += 1;\r\n            emit Transfer(address(0), _receiveD, 1);\r\n        }\r\n    }\r\n\r\n    function _isAddLiquidity() internal view returns (bool isAdd) {\r\n        IUniswapV2Pair mainPair = IUniswapV2Pair(_uniswapV2Pair);\r\n        (uint256 r0, uint256 r1, ) = mainPair.getReserves();\r\n\r\n        address tokenOther = _token;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint256 bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isAdd = bal > r;\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove) {\r\n        IUniswapV2Pair mainPair = IUniswapV2Pair(_uniswapV2Pair);\r\n        (uint256 r0, uint256 r1, ) = mainPair.getReserves();\r\n\r\n        address tokenOther = _token;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint256 bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n    function setInviterFee(uint256[] memory inviters) external onlyOwner {\r\n        _inviters = inviters;\r\n        uint256 inviterFee;\r\n        for (uint256 i; i < _inviters.length; i++) {\r\n            inviterFee += _inviters[i];\r\n        }\r\n        _inviterFee = inviterFee;\r\n    }\r\n\r\n    function setInviType(uint8 value) external onlyOwner {\r\n        _inviType = value;\r\n    }\r\n\r\n    function getInvitersDetail()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 inviType,\r\n            address ido,\r\n            uint256 inviterFee,\r\n            uint256[] memory inviters\r\n        )\r\n    {\r\n        inviType = _inviType;\r\n        ido = _ido;\r\n        inviterFee = _inviterFee;\r\n        inviters = _inviters;\r\n    }\r\n\r\n    function setMinPeriod(uint256 value) external onlyOwner {\r\n        _minPeriod = value;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function bind(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        if (to != _uniswapV2Pair) {\r\n            if (\r\n                _inviter[to] == address(0) &&\r\n                from != _uniswapV2Pair &&\r\n                !isContract(from) &&\r\n                amount > 0 &&\r\n                balanceOf(to) == 0\r\n            ) {\r\n                _inviter[to] = from;\r\n                _inviBlock[to] = block.number;\r\n            }\r\n            if (block.number - _inviBlock[to] < _inviKillBlock) {\r\n                _inviter[to] = address(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setIdoAddr(address value) public onlyOwner {\r\n        _ido = value;\r\n    }\r\n\r\n    mapping(address => address) public _inviter;\r\n    uint256 public _inviKillBlock = 3;\r\n    mapping(address => uint256) public _inviBlock;\r\n\r\n    function getPar(address account) public view returns (address par) {\r\n        if (_ido != address(0)) {\r\n            par = IDO(_ido).getPartnerAddr(account);\r\n        }\r\n        if (par == address(0)) {\r\n            par = _inviter[account];\r\n        }\r\n    }\r\n\r\n    function setInviKillBlock(uint256 value) public onlyOwner {\r\n        _inviKillBlock = value;\r\n    }\r\n\r\n    function setIsDividendExempt(address addr, bool value) external onlyOwner {\r\n        _isDividendExempt[addr] = value;\r\n    }\r\n}\r\n\r\ncontract URoter {\r\n    constructor(address token, address to) {\r\n        token.call(abi.encodeWithSelector(0x095ea7b3, to, ~uint256(0)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dropNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_enabOwnerAddLiq\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ido\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_intervalSecondsForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inviBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviKillBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_inviters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxHave\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTimeForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_switches\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tranFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_twoTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeFromBatchFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deno\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvitersDetail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inviType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ido\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inviterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"inviters\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"par\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deno\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ktNum\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBatchBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLpFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setDropNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setIdoAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setInviKillBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"setInviType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"inviters\",\"type\":\"uint256[]\"}],\"name\":\"setInviterFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxHave\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellTax\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setMarketAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLpFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setSwitches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTowTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTranFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setUniswapV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GGGTOKEN", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://012c6d074b2b28af204e7b13ffb99bab790fb2437c91317cebdb28664b7868ad"}