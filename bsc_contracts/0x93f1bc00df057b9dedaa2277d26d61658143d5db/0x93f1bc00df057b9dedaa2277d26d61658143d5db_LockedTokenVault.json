{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2020-09-30\r\n*/\r\n\r\n// File: contracts/lib/SafeMath.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    SPDX-License-Identifier: Apache-2.0\r\n\r\n*/\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"MUL_ERROR\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"DIVIDING_ERROR\");\r\n        return a / b;\r\n    }\r\n\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 quotient = div(a, b);\r\n        uint256 remainder = a - quotient * b;\r\n        if (remainder > 0) {\r\n            return quotient + 1;\r\n        } else {\r\n            return quotient;\r\n        }\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SUB_ERROR\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ADD_ERROR\");\r\n        return c;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = x / 2 + 1;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/lib/DecimalMath.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title DecimalMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Functions for fixed point number with 18 decimals\r\n */\r\nlibrary DecimalMath {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant ONE = 10**18;\r\n\r\n    function mul(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(d) / ONE;\r\n    }\r\n\r\n    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(d).divCeil(ONE);\r\n    }\r\n\r\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(ONE).div(d);\r\n    }\r\n\r\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(ONE).divCeil(d);\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/lib/Ownable.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract Ownable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    constructor() internal {\r\n        _OWNER_ = msg.sender;\r\n        emit OwnershipTransferred(address(0), _OWNER_);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"INVALID_OWNER\");\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() external {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/intf/IERC20.sol\r\n\r\n// This is a file copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File: contracts/lib/SafeERC20.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    This is a simplified version of OpenZepplin's SafeERC20 library\r\n\r\n*/\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/token/LockedTokenVault.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title LockedTokenVault\r\n * @author DODO Breeder\r\n *\r\n * @notice Lock Token and release it linearly\r\n */\r\n\r\ncontract LockedTokenVault is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address _TOKEN_;\r\n\r\n    mapping(address => uint256) internal originBalances;\r\n    mapping(address => uint256) internal claimedBalances;\r\n\r\n    uint256 public _UNDISTRIBUTED_AMOUNT_;\r\n    uint256 public _START_RELEASE_TIME_;\r\n    uint256 public _RELEASE_DURATION_;\r\n    uint256 public _CLIFF_RATE_;\r\n\r\n    bool public _DISTRIBUTE_FINISHED_;\r\n\r\n    // ============ Modifiers ============\r\n\r\n    event Claim(address indexed holder, uint256 origin, uint256 claimed, uint256 amount);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier beforeStartRelease() {\r\n        require(block.timestamp < _START_RELEASE_TIME_, \"RELEASE START\");\r\n        _;\r\n    }\r\n\r\n    modifier afterStartRelease() {\r\n        require(block.timestamp >= _START_RELEASE_TIME_, \"RELEASE NOT START\");\r\n        _;\r\n    }\r\n\r\n    modifier distributeNotFinished() {\r\n        require(!_DISTRIBUTE_FINISHED_, \"DISTRIBUTE FINISHED\");\r\n        _;\r\n    }\r\n\r\n    // ============ Init Functions ============\r\n\r\n    constructor(\r\n        address _token,\r\n        uint256 _startReleaseTime,\r\n        uint256 _releaseDuration,\r\n        uint256 _cliffRate\r\n    ) public {\r\n        _TOKEN_ = _token;\r\n        _START_RELEASE_TIME_ = _startReleaseTime;\r\n        _RELEASE_DURATION_ = _releaseDuration;\r\n        _CLIFF_RATE_ = _cliffRate;\r\n    }\r\n\r\n    function deposit(uint256 amount) external onlyOwner {\r\n        _tokenTransferIn(_OWNER_, amount);\r\n        _UNDISTRIBUTED_AMOUNT_ = _UNDISTRIBUTED_AMOUNT_.add(amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) external onlyOwner {\r\n        _UNDISTRIBUTED_AMOUNT_ = _UNDISTRIBUTED_AMOUNT_.sub(amount);\r\n        _tokenTransferOut(_OWNER_, amount);\r\n    }\r\n\r\n    function finishDistribute() external onlyOwner {\r\n        _DISTRIBUTE_FINISHED_ = true;\r\n    }\r\n\r\n    // ============ For Owner ============\r\n\r\n    function grant(address[] calldata holderList, uint256[] calldata amountList)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(holderList.length == amountList.length, \"batch grant length not match\");\r\n        uint256 amount = 0;\r\n        for (uint256 i = 0; i < holderList.length; ++i) {\r\n            // for saving gas, no event for grant\r\n            originBalances[holderList[i]] = originBalances[holderList[i]].add(amountList[i]);\r\n            amount = amount.add(amountList[i]);\r\n        }\r\n        _UNDISTRIBUTED_AMOUNT_ = _UNDISTRIBUTED_AMOUNT_.sub(amount);\r\n    }\r\n\r\n    function recall(address holder) external onlyOwner distributeNotFinished {\r\n        _UNDISTRIBUTED_AMOUNT_ = _UNDISTRIBUTED_AMOUNT_.add(originBalances[holder]).sub(\r\n            claimedBalances[holder]\r\n        );\r\n        originBalances[holder] = 0;\r\n        claimedBalances[holder] = 0;\r\n    }\r\n\r\n    // ============ For Holder ============\r\n\r\n    function transferLockedToken(address to) external {\r\n        originBalances[to] = originBalances[to].add(originBalances[msg.sender]);\r\n        claimedBalances[to] = claimedBalances[to].add(claimedBalances[msg.sender]);\r\n\r\n        originBalances[msg.sender] = 0;\r\n        claimedBalances[msg.sender] = 0;\r\n    }\r\n\r\n    function claim() external {\r\n        uint256 claimableToken = getClaimableBalance(msg.sender);\r\n        _tokenTransferOut(msg.sender, claimableToken);\r\n        claimedBalances[msg.sender] = claimedBalances[msg.sender].add(claimableToken);\r\n        emit Claim(\r\n            msg.sender,\r\n            originBalances[msg.sender],\r\n            claimedBalances[msg.sender],\r\n            claimableToken\r\n        );\r\n    }\r\n\r\n    // ============ View ============\r\n\r\n    function isReleaseStart() external view returns (bool) {\r\n        return block.timestamp >= _START_RELEASE_TIME_;\r\n    }\r\n\r\n    function getOriginBalance(address holder) external view returns (uint256) {\r\n        return originBalances[holder];\r\n    }\r\n\r\n    function getClaimedBalance(address holder) external view returns (uint256) {\r\n        return claimedBalances[holder];\r\n    }\r\n\r\n    function getClaimableBalance(address holder) public view returns (uint256) {\r\n        uint256 remainingToken = getRemainingBalance(holder);\r\n        return originBalances[holder].sub(remainingToken).sub(claimedBalances[holder]);\r\n    }\r\n\r\n    function getRemainingBalance(address holder) public view returns (uint256) {\r\n        uint256 remainingRatio = getRemainingRatio(block.timestamp);\r\n        return DecimalMath.mul(originBalances[holder], remainingRatio);\r\n    }\r\n\r\n    function getRemainingRatio(uint256 timestamp) public view returns (uint256) {\r\n        if (timestamp < _START_RELEASE_TIME_) {\r\n            return DecimalMath.ONE;\r\n        }\r\n        uint256 timePast = timestamp.sub(_START_RELEASE_TIME_);\r\n        if (timePast < _RELEASE_DURATION_) {\r\n            uint256 remainingTime = _RELEASE_DURATION_.sub(timePast);\r\n            return DecimalMath.ONE.sub(_CLIFF_RATE_).mul(remainingTime).div(_RELEASE_DURATION_);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // ============ Internal Helper ============\r\n\r\n    function _tokenTransferIn(address from, uint256 amount) internal {\r\n        IERC20(_TOKEN_).safeTransferFrom(from, address(this), amount);\r\n    }\r\n\r\n    function _tokenTransferOut(address to, uint256 amount) internal {\r\n        IERC20(_TOKEN_).safeTransfer(to, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startReleaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_releaseDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"origin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_CLIFF_RATE_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DISTRIBUTE_FINISHED_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_RELEASE_DURATION_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_START_RELEASE_TIME_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_UNDISTRIBUTED_AMOUNT_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishDistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getClaimableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getClaimedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getOriginBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getRemainingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getRemainingRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holderList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountList\",\"type\":\"uint256[]\"}],\"name\":\"grant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReleaseStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"recall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferLockedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LockedTokenVault", "CompilerVersion": "v0.6.9+commit.3e3065ac", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000067ee3cb086f8a16f34bee3ca72fad36f7db929e200000000000000000000000000000000000000000000000000000000626887800000000000000000000000000000000000000000000000000000000005a39a800000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8cc36fc020039b36dfbb080364d5e7801e958bfb5d0ff36a2928deea4f6aee9e"}