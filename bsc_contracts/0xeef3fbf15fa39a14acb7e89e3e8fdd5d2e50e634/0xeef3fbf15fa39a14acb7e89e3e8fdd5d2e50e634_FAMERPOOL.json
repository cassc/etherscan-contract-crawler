{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/nft/farmer/farmerPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"./interfaces/ILock.sol\\\";\\r\\nimport \\\"./interfaces/IAsdic.sol\\\";\\r\\nimport \\\"./interfaces/IMosAsLp.sol\\\";\\r\\nimport \\\"./interfaces/IMosNftPool.sol\\\";\\r\\n\\r\\ncontract FAMERPOOL is IERC721Receiver {\\r\\n    using SafeMath for uint;\\r\\n    enum opreate {\\r\\n        stake,\\r\\n        upStake,\\r\\n        claim\\r\\n    }\\r\\n\\r\\n    struct StakedInfo {\\r\\n        uint index;\\r\\n        uint stakedAmount;\\r\\n        uint updateTime;\\r\\n        uint available;\\r\\n        uint accruedReward;\\r\\n    }\\r\\n\\r\\n    StakedInfo public globalStakedInfo;\\r\\n    mapping(address => StakedInfo) public userStakedInfos;\\r\\n\\r\\n    mapping(uint => bool) public tokenEnable;\\r\\n    mapping(address => bool) public addressEnable;\\r\\n    mapping(uint => address) public tokenOwner;\\r\\n    mapping(address => uint) public ownerToken;\\r\\n\\r\\n    uint public startTime;\\r\\n    uint public yearHalfCount;\\r\\n    uint public yearHalfAmount = 8000000e18;\\r\\n    uint public subHalfTime = 365 days;\\r\\n\\r\\n    address public owner;\\r\\n    address public caller;\\r\\n    IERC20 public asdic;\\r\\n    IERC721 public farmerNft;\\r\\n    ILock public lock;\\r\\n    IAsdic public Iasdic;\\r\\n    IMosNftPool public mosNftPool;\\r\\n\\r\\n    IMosAsLp public mosAsLp;\\r\\n\\r\\n    mapping(address => uint[]) public ownerTokens;\\r\\n    mapping(uint => address) public tokenToAddress;\\r\\n\\r\\n    constructor(\\r\\n        address _asdic,\\r\\n        address _lock,\\r\\n        address _mosNftPool,\\r\\n        address _farmerNft\\r\\n    ) {\\r\\n        owner = msg.sender;\\r\\n        asdic = IERC20(_asdic);\\r\\n        lock = ILock(_lock);\\r\\n        farmerNft = IERC721(_farmerNft);\\r\\n        Iasdic = IAsdic(_asdic);\\r\\n        mosNftPool = IMosNftPool(_mosNftPool);\\r\\n        IERC20(asdic).approve(address(lock), type(uint).max);\\r\\n    }\\r\\n\\r\\n    function setCaller(address _caller) external {\\r\\n        require(msg.sender == owner, \\\"Can't set caller address\\\");\\r\\n        caller = _caller;\\r\\n    }\\r\\n\\r\\n    function setYearHalfAmount(uint amount) external {\\r\\n        require(msg.sender == owner, \\\"No owner and set the year half amount\\\");\\r\\n        yearHalfAmount = amount;\\r\\n    }\\r\\n\\r\\n    function setSubHalfTime(uint _time) external {\\r\\n        require(msg.sender == owner, \\\"No owner to set the time\\\");\\r\\n        subHalfTime = _time;\\r\\n    }\\r\\n\\r\\n    function setAsdicPool(address _mosAsLp) external {\\r\\n        require(msg.sender == owner, \\\"No owner to set asdic pool\\\");\\r\\n        mosAsLp = IMosAsLp(_mosAsLp);\\r\\n    }\\r\\n\\r\\n    function setOwner(address _owner) external {\\r\\n        require(msg.sender == owner, \\\"No owner to set owner\\\");\\r\\n        owner = _owner;\\r\\n    }\\r\\n\\r\\n    function asyncHashrate(address user, uint amount, bool flag) external {\\r\\n        require(msg.sender == caller, \\\"Not caller for can't call\\\");\\r\\n        if (flag) {\\r\\n            if (addressEnable[user]) {\\r\\n                updateIndex(opreate.stake, amount);\\r\\n                updateUserIndex(user, opreate.stake, amount);\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        if (!flag && userStakedInfos[user].stakedAmount > amount) {\\r\\n            updateIndex(opreate.upStake, amount);\\r\\n            updateUserIndex(user, opreate.upStake, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getOwnerTokens(\\r\\n        address account\\r\\n    ) external view returns (uint[] memory) {\\r\\n        return ownerTokens[account];\\r\\n    }\\r\\n\\r\\n    function pledge(uint tokenId) external {\\r\\n        address sender = msg.sender;\\r\\n        IERC721(farmerNft).transferFrom(sender, address(this), tokenId);\\r\\n        require(\\r\\n            !tokenEnable[tokenId] && !addressEnable[sender],\\r\\n            \\\"pledge the token error\\\"\\r\\n        );\\r\\n        tokenEnable[tokenId] = true;\\r\\n        addressEnable[sender] = true;\\r\\n\\r\\n        tokenOwner[tokenId] = sender;\\r\\n        ownerToken[sender] = tokenId;\\r\\n\\r\\n        ownerTokens[sender].push(tokenId);\\r\\n        tokenToAddress[tokenId] = sender;\\r\\n    }\\r\\n\\r\\n    function upacke(uint tokenId) external {\\r\\n        address sender = msg.sender;\\r\\n        require(tokenOwner[tokenId] == sender, \\\"upacke token error\\\");\\r\\n\\r\\n        tokenEnable[tokenId] = false;\\r\\n        addressEnable[sender] = false;\\r\\n        tokenOwner[tokenId] = address(0);\\r\\n        ownerToken[sender] = 0;\\r\\n\\r\\n        IERC721(farmerNft).transferFrom(address(this), sender, tokenId);\\r\\n\\r\\n        uint[] storage list = ownerTokens[sender];\\r\\n        for (uint i = 0; i < list.length; i++) {\\r\\n            if (list[i] == tokenId) {\\r\\n                list[i] = list[list.length - 1];\\r\\n                list.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function halfYear() internal returns (uint) {\\r\\n        require(subHalfTime > 0, \\\"SubHalf time error\\\");\\r\\n        startTime = startTime == 0 ? block.timestamp : startTime;\\r\\n        uint yearCount = (block.timestamp - startTime).div(subHalfTime);\\r\\n        if (yearHalfCount <= yearCount) {\\r\\n            yearHalfCount = yearCount + 1;\\r\\n\\r\\n            yearHalfAmount = yearHalfAmount.div(2);\\r\\n        }\\r\\n\\r\\n        return yearHalfAmount.div(subHalfTime);\\r\\n    }\\r\\n\\r\\n    function getHalfYear() internal view returns (uint) {\\r\\n        if (yearHalfAmount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        return yearHalfAmount.div(subHalfTime);\\r\\n    }\\r\\n\\r\\n    function claim() public {\\r\\n        address sender = msg.sender;\\r\\n        updateIndex(opreate.claim, 0);\\r\\n        updateUserIndex(sender, opreate.claim, 0);\\r\\n\\r\\n        StakedInfo storage userStakedInfo = userStakedInfos[sender];\\r\\n\\r\\n        if (userStakedInfo.available > 0) {\\r\\n            uint temp = userStakedInfo.available;\\r\\n            ILock(lock).locking(sender, temp.mul(70).div(100));\\r\\n            IERC20(asdic).transfer(sender, temp.mul(30).div(100));\\r\\n            userStakedInfo.available = 0;\\r\\n            userStakedInfo.accruedReward += temp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateIndex(opreate _oprea, uint lpAmount) internal {\\r\\n        StakedInfo storage info = globalStakedInfo;\\r\\n        if (info.updateTime == 0 || info.stakedAmount == 0) {\\r\\n            info.updateTime = block.timestamp;\\r\\n            info.stakedAmount += lpAmount;\\r\\n            halfYear();\\r\\n            return;\\r\\n        }\\r\\n        uint release = halfYear();\\r\\n\\r\\n        release = release.mul(block.timestamp - info.updateTime);\\r\\n\\r\\n        release = release.mul(1e18);\\r\\n\\r\\n        release = release.div(info.stakedAmount);\\r\\n\\r\\n        info.index += release;\\r\\n\\r\\n        if (_oprea == opreate.stake) {\\r\\n            info.stakedAmount += lpAmount;\\r\\n        }\\r\\n        if (_oprea == opreate.upStake) {\\r\\n            info.stakedAmount -= lpAmount;\\r\\n        }\\r\\n\\r\\n        info.updateTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function awaitGetAmount(address user) external view returns (uint) {\\r\\n        StakedInfo memory infoGlo = globalStakedInfo;\\r\\n        StakedInfo memory infoUser = userStakedInfos[user];\\r\\n\\r\\n        uint secRelease = getHalfYear();\\r\\n\\r\\n        if (infoGlo.stakedAmount == 0) return 0;\\r\\n\\r\\n        uint _time = block.timestamp.sub(infoGlo.updateTime);\\r\\n\\r\\n        uint _amount = _time.mul(secRelease);\\r\\n\\r\\n        _amount = _amount.mul(1e18);\\r\\n\\r\\n        _amount = _amount.div(infoGlo.stakedAmount);\\r\\n\\r\\n        uint _gloIndex = infoGlo.index.add(_amount);\\r\\n\\r\\n        uint value = _gloIndex.sub(infoUser.index);\\r\\n\\r\\n        value = value.mul(infoUser.stakedAmount);\\r\\n\\r\\n        value = value.div(1e18);\\r\\n\\r\\n        value = value.add(infoUser.available);\\r\\n\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    function updateUserIndex(\\r\\n        address user,\\r\\n        opreate _oprea,\\r\\n        uint lpAmount\\r\\n    ) internal {\\r\\n        StakedInfo storage info = userStakedInfos[user];\\r\\n\\r\\n        info.updateTime = block.timestamp;\\r\\n\\r\\n        uint value = info.stakedAmount.mul(globalStakedInfo.index - info.index);\\r\\n\\r\\n        value = value / 1e18;\\r\\n\\r\\n        if (value != 0) {\\r\\n            info.available += value;\\r\\n        }\\r\\n\\r\\n        if (_oprea == opreate.stake) {\\r\\n            info.stakedAmount += lpAmount;\\r\\n        }\\r\\n        if (_oprea == opreate.upStake) {\\r\\n            info.stakedAmount -= lpAmount;\\r\\n        }\\r\\n\\r\\n        info.index = globalStakedInfo.index;\\r\\n    }\\r\\n\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint,\\r\\n        bytes memory\\r\\n    ) public pure returns (bytes4) {\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/nft/farmer/interfaces/IAsdic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\ninterface IAsdic {\\r\\n    function getLowerLevel(\\r\\n        address account\\r\\n    ) external view returns (address[] memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/nft/farmer/interfaces/ILock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\ninterface ILock {\\r\\n    function locking(address account, uint256 lock) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/nft/farmer/interfaces/IMosAsLp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\ninterface IMosAsLp {\\r\\n    struct StakedInfo {\\r\\n        uint index;\\r\\n        uint stakedAmount;\\r\\n        uint updateTime;\\r\\n        uint available; //\u53ef\u7528\\r\\n        uint locked;\\r\\n        uint accruedReward; //\u5df2\u63d0\u73b0\\r\\n    }\\r\\n\\r\\n    function userStakedInfos(\\r\\n        address account\\r\\n    ) external view returns (StakedInfo memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/nft/farmer/interfaces/IMosNftPool.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IMosNftPool {\\r\\n    function getSuperior(address account) external view returns (address);\\r\\n\\r\\n    function nftOwner(address account) external view returns (uint);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asdic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mosNftPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmerNft\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Iasdic\",\"outputs\":[{\"internalType\":\"contract IAsdic\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asdic\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"asyncHashrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"awaitGetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmerNft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOwnerTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalStakedInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"contract ILock\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mosAsLp\",\"outputs\":[{\"internalType\":\"contract IMosAsLp\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mosNftPool\",\"outputs\":[{\"internalType\":\"contract IMosNftPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"pledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mosAsLp\",\"type\":\"address\"}],\"name\":\"setAsdicPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"setCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setSubHalfTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setYearHalfAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subHalfTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"upacke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakedInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearHalfAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearHalfCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FAMERPOOL", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e1c0a5e553c30e776026e8176516ab32107098be0000000000000000000000005a854aac4c2ac6f6565e523a120e445f5461977a000000000000000000000000d59374d0c18dd99ede76aa44ab401920b97de72d000000000000000000000000ad284227c4d6fcc51c293665e6088ba0985b2220", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}