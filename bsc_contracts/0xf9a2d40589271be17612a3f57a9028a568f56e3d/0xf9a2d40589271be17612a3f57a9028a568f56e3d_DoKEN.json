{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/DoKEN.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT License\\n\\nimport \\\"./DoKENDividendTracker.sol\\\";\\nimport \\\"./DividendPayingToken.sol\\\";\\nimport \\\"./IUniswapV2Pair.sol\\\";\\nimport \\\"./IUniswapRouter.sol\\\";\\nimport \\\"./IUniswapV2Factory.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\npragma solidity ^0.8.6;\\n\\ncontract DoKEN is ERC20, Ownable {\\n  using SafeMath for uint256;\\n  // Events Declarations\\n\\n  event EnableTrading(uint256 indexed blockNumber);\\n\\n  event UpdateDividendTracker(\\n    address indexed newAddress,\\n    address indexed oldAddress\\n  );\\n  event UpdateUniswapV2Router(\\n    address indexed newAddress,\\n    address indexed oldAddress\\n  );\\n  event UpdateMarketingWallet(\\n    address indexed newWallet,\\n    address indexed oldWallet\\n  );\\n  event UpdateBuybackWallet(\\n    address indexed newWallet,\\n    address indexed oldWallet\\n  );\\n  event UpdatePresaleWallet(\\n    address indexed newWallet,\\n    address indexed oldWallet\\n  );\\n  event UpdateGasForProcessing(\\n    uint256 indexed newValue,\\n    uint256 indexed oldValue\\n  );\\n\\n  event UpdateMarketingFee(uint256 indexed newValue, uint256 indexed oldValue);\\n  event UpdateBuybackFee(uint256 indexed newValue, uint256 indexed oldValue);\\n  event UpdateLiquidityFee(uint256 indexed newValue, uint256 indexed oldValue);\\n  event UpdateRewardsFee(uint256 indexed newValue, uint256 indexed oldValue);\\n  event UpdateSellFee(uint256 indexed newValue, uint256 indexed oldValue);\\n\\n  event UpdateMaxBuyTransactionAmount(\\n    uint256 indexed newValue,\\n    uint256 indexed oldValue\\n  );\\n  event UpdateMaxSellTransactionAmount(\\n    uint256 indexed newValue,\\n    uint256 indexed oldValue\\n  );\\n  event UpdateSwapTokensAtAmount(\\n    uint256 indexed newValue,\\n    uint256 indexed oldValue\\n  );\\n  event UpdateSwapAndLiquify(bool enabled);\\n\\n  event WhitelistAccount(address indexed account, bool isWhitelisted);\\n  event ExcludeFromFees(address indexed account, bool isExcluded);\\n  event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\\n  event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\n\\n  event SwapAndLiquify(\\n    uint256 tokensSwapped,\\n    uint256 ethReceived,\\n    uint256 tokensIntoLiqudity\\n  );\\n\\n  event SendDividends(uint256 tokensSwapped, uint256 amount);\\n\\n  event ProcessedDividendTracker(\\n    uint256 iterations,\\n    uint256 claims,\\n    uint256 lastProcessedIndex,\\n    bool indexed automatic,\\n    uint256 gas,\\n    address indexed processor\\n  );\\n\\n  event TransferETHToMarketingWallet(address indexed wallet, uint256 amount);\\n  event TransferETHToDevWallet(address indexed wallet, uint256 amount);\\n  event TransferTokensToMarketingWallet(address indexed wallet, uint256 amount);\\n  event TransferTokensToDevWallet(address indexed wallet, uint256 amount);\\n  event TransferETHToBuybackWallet(address indexed wallet, uint256 amount);\\n  event TransferTokensToBuybackWallet(address indexed wallet, uint256 amount);\\n  event ExcludeAccountFromDividends(address indexed account);\\n\\n  //\\n  IUniswapV2Router02 public uniswapV2Router;\\n  address public immutable uniswapV2Pair;\\n\\n  bool private swapping;\\n  bool public swapAndLiquifyEnabled = true;\\n\\n  DoKENDividendTracker public dividendTracker;\\n\\n  // Constraints for changing various buy/sell thresholds - in practice\\n  // actual values should be reasonable\\n  uint256 public immutable MIN_BUY_TRANSACTION_AMOUNT = 5000000000 * (10**18); // 0.5% of supply\\n  uint256 public immutable MAX_BUY_TRANSACTION_AMOUNT = 50000000000 * (10**18); // 5% of supply\\n  uint256 public immutable MIN_SELL_TRANSACTION_AMOUNT = 10000000000 * (10**18); // 1% of total supply\\n  uint256 public immutable MAX_SELL_TRANSACTION_AMOUNT = 50000000000 * (10**18); // 5% of total supply\\n  uint256 public immutable MIN_SWAP_TOKENS_AT_AMOUNT = 200000000 * (10**18); // 0.02% of total supply\\n  uint256 public immutable MAX_SWAP_TOKENS_AT_AMOUNT = 20000000000 * (10**18); // 2% of total supply\\n\\n  uint256 public maxBuyTransactionAmount = 10000000000 * (10**18); // 1% of supply\\n  uint256 public maxSellTransactionAmount = 10000000000 * (10**18); // 1% of supply\\n  uint256 public swapTokensAtAmount = 200000000 * (10**18); // 0.02 % of supply\\n\\n  // Max fees to avoid owner greed - in practice the actual fees should be much lower\\n  uint256 public immutable MAX_MARKETING_FEE = 10;\\n  uint256 public immutable MAX_DEV_FEE = 10;\\n  uint256 public immutable MAX_BUYBACK_FEE = 5;\\n  uint256 public immutable MAX_REWARDS_FEE = 10;\\n  uint256 public immutable MAX_LIQUIDITY_FEE = 5;\\n  uint256 public immutable MAX_TOTAL_FEES = 30;\\n  uint256 public immutable MAX_SELL_FEE = 5;\\n\\n  uint256 public marketingFee = 3;\\n  uint256 public devFee = 2;\\n  uint256 public buybackFee = 1;\\n  uint256 public rewardsFee = 8;\\n  uint256 public liquidityFee = 2;\\n  uint256 public sellFee = 3; // fees are increased by 3% for sells\\n\\n  // Trading can only be enabled, not disabled. Used so that contract can be deployed / liq added\\n  // without bots interfering.\\n  bool internal tradingEnabled = false;\\n\\n  address payable public marketingWallet =\\n    payable(0x53cA2a894406848fbB34444859013F068F52FBe1);\\n  address payable public devWallet =\\n    payable(0x5311c06B4cde0e823d9821DE1fFd24485e9c3F2f);\\n  address payable public buybackWallet =\\n    payable(0xD92167036635E11931c0b9c08Ff3c2cDB0F46E2D);\\n  address payable public preSaleWallet =\\n    payable(0xE5988df0403E635349423838d99234515cA0a162);\\n\\n  // BUSD Token\\n  address public rewardToken = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // mainnet BUSD\\n  //address public rewardToken = 0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7; // testnet BUSD\\n\\n  // use by default 300,000 gas to process auto-claiming dividends\\n  uint256 public gasForProcessing = 300000;\\n\\n  // Absolute max gas amount for processing dividends\\n  uint256 public immutable MAX_GAS_FOR_PROCESSING = 5000000;\\n\\n  // exclude from fees\\n  mapping(address => bool) private _isExcludedFromFees;\\n\\n  // Can add LP before trading is enabled\\n  mapping(address => bool) public isWhitelisted;\\n\\n  uint256 public totalFeesCollected;\\n\\n  // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\\n  // could be subject to a maximum transfer amount\\n  mapping(address => bool) public automatedMarketMakerPairs;\\n\\n  constructor() ERC20(\\\"DoKEN\\\", \\\"DoKEN\\\") {\\n    dividendTracker = new DoKENDividendTracker();\\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\n      0x10ED43C718714eb63d5aA57B78B54704E256024E // mainnet\\n      //0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3 // testnet\\n    );\\n\\n    // Create a uniswap pair for this new token\\n    address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n      .createPair(address(this), _uniswapV2Router.WETH());\\n\\n    uniswapV2Router = _uniswapV2Router;\\n    uniswapV2Pair = _uniswapV2Pair;\\n\\n    _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\\n\\n    // exclude from receiving dividends. We purposely don't exclude\\n    // the marketing wallet from dividends since we're going to use\\n    // those dividends for things like giveaways and marketing. These\\n    // dividends are more useful than tokens in some cases since selling\\n    // them doesnt impact token price.\\n    dividendTracker.excludeFromDividends(address(dividendTracker));\\n    dividendTracker.excludeFromDividends(address(this));\\n    dividendTracker.excludeFromDividends(address(_uniswapV2Router));\\n    dividendTracker.excludeFromDividends(address(0xdEaD));\\n    dividendTracker.excludeFromDividends(address(0));\\n    dividendTracker.excludeFromDividends(owner());\\n    dividendTracker.excludeFromDividends(buybackWallet);\\n    dividendTracker.excludeFromDividends(devWallet);\\n    dividendTracker.excludeFromDividends(preSaleWallet);\\n\\n    // exclude from paying fees or having max transaction amount\\n    excludeFromFees(address(this), true);\\n    excludeFromFees(marketingWallet, true);\\n    excludeFromFees(devWallet, true);\\n    excludeFromFees(buybackWallet, true);\\n    excludeFromFees(preSaleWallet, true);\\n    excludeFromFees(owner(), true);\\n    excludeFromFees(address(0xdEaD), true);\\n    excludeFromFees(address(0), true);\\n\\n    // Whitelist accounts so they can transfer tokens before trading is enabled\\n    whitelistAccount(address(this), true);\\n    whitelistAccount(owner(), true);\\n    whitelistAccount(address(uniswapV2Router), true);\\n    whitelistAccount(preSaleWallet, true);\\n\\n    /*\\n    _mint is an internal function in ERC20.sol that is only called here,\\n    and CANNOT be called ever again\\n    */\\n    _mint(owner(), 1000000000000 * (10**18)); // 1,000,000,000,000\\n  }\\n\\n  receive() external payable {}\\n\\n  function updateSwapAndLiquify(bool enabled) external onlyOwner {\\n    swapAndLiquifyEnabled = enabled;\\n    emit UpdateSwapAndLiquify(enabled);\\n  }\\n\\n  function isTradingEnabled() public view returns (bool) {\\n    return tradingEnabled;\\n  }\\n\\n  function whitelistAccount(address account, bool whitelisted)\\n    public\\n    onlyOwner\\n  {\\n    isWhitelisted[account] = whitelisted;\\n    emit WhitelistAccount(account, whitelisted);\\n  }\\n\\n  function isWhitelistedAccount(address account) public view returns (bool) {\\n    return isWhitelisted[account];\\n  }\\n\\n  function enableTrading() external onlyOwner {\\n    require(!tradingEnabled, \\\"trading is already enabled\\\");\\n    tradingEnabled = true;\\n    emit EnableTrading(block.number);\\n  }\\n\\n  function getTotalFees() public view returns (uint256) {\\n    return\\n      marketingFee.add(buybackFee).add(liquidityFee).add(rewardsFee).add(\\n        devFee\\n      );\\n  }\\n\\n  function updateMarketingWallet(address payable newAddress)\\n    external\\n    onlyOwner\\n  {\\n    require(marketingWallet != newAddress, \\\"new address required\\\");\\n    address oldWallet = marketingWallet;\\n    marketingWallet = newAddress;\\n    excludeFromFees(newAddress, true);\\n    emit UpdateMarketingWallet(marketingWallet, oldWallet);\\n  }\\n\\n  function updateDevWallet(address payable newAddress) external onlyOwner {\\n    require(devWallet != newAddress, \\\"new address required\\\");\\n    address oldWallet = devWallet;\\n    devWallet = newAddress;\\n    excludeFromFees(newAddress, true);\\n    emit UpdateMarketingWallet(devWallet, oldWallet);\\n  }\\n\\n  function updateBuybackWallet(address payable newAddress) external onlyOwner {\\n    require(buybackWallet != newAddress, \\\"new address required\\\");\\n    address oldWallet = buybackWallet;\\n    buybackWallet = newAddress;\\n    excludeFromFees(newAddress, true);\\n    emit UpdateBuybackWallet(buybackWallet, oldWallet);\\n  }\\n\\n  function updatePreSaleWallet(address payable newAddress) external onlyOwner {\\n    require(preSaleWallet != newAddress, \\\"new address required\\\");\\n    address oldWallet = preSaleWallet;\\n    preSaleWallet = newAddress;\\n    excludeFromFees(newAddress, true);\\n    dividendTracker.excludeFromDividends(preSaleWallet);\\n    whitelistAccount(preSaleWallet, true);\\n    emit UpdatePresaleWallet(newAddress, oldWallet);\\n  }\\n\\n  function updateDividendTracker(address newAddress) public onlyOwner {\\n    require(\\n      newAddress != address(dividendTracker),\\n      \\\"DoKEN: The dividend tracker already has that address\\\"\\n    );\\n\\n    DoKENDividendTracker newDividendTracker = DoKENDividendTracker(\\n      payable(newAddress)\\n    );\\n\\n    require(\\n      newDividendTracker.owner() == address(this),\\n      \\\"DoKEN: The new dividend tracker must be owned by the DoKEN token contract\\\"\\n    );\\n\\n    newDividendTracker.excludeFromDividends(address(newDividendTracker));\\n    newDividendTracker.excludeFromDividends(address(this));\\n    newDividendTracker.excludeFromDividends(address(uniswapV2Router));\\n    newDividendTracker.excludeFromDividends(address(0xdEaD));\\n    newDividendTracker.excludeFromDividends(address(0));\\n    newDividendTracker.excludeFromDividends(owner());\\n    newDividendTracker.excludeFromDividends(buybackWallet);\\n    newDividendTracker.excludeFromDividends(preSaleWallet);\\n\\n    emit UpdateDividendTracker(newAddress, address(dividendTracker));\\n\\n    dividendTracker = newDividendTracker;\\n  }\\n\\n  function updateUniswapV2Router(address newAddress) public onlyOwner {\\n    require(\\n      newAddress != address(uniswapV2Router),\\n      \\\"DoKEN: The router already has that address\\\"\\n    );\\n    emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\\n    uniswapV2Router = IUniswapV2Router02(newAddress);\\n  }\\n\\n  function excludeAccountFromDividends(address account) public onlyOwner {\\n    dividendTracker.excludeFromDividends(account);\\n    emit ExcludeAccountFromDividends(account);\\n  }\\n\\n  function isExcludedFromDividends(address account) public view returns (bool) {\\n    return dividendTracker.isExcludedFromDividends(account);\\n  }\\n\\n  function excludeFromFees(address account, bool excluded) public onlyOwner {\\n    _isExcludedFromFees[account] = excluded;\\n\\n    emit ExcludeFromFees(account, excluded);\\n  }\\n\\n  function excludeMultipleAccountsFromFees(\\n    address[] calldata accounts,\\n    bool excluded\\n  ) public onlyOwner {\\n    for (uint256 i = 0; i < accounts.length; i++) {\\n      _isExcludedFromFees[accounts[i]] = excluded;\\n    }\\n\\n    emit ExcludeMultipleAccountsFromFees(accounts, excluded);\\n  }\\n\\n  function setAutomatedMarketMakerPair(address pair, bool value)\\n    public\\n    onlyOwner\\n  {\\n    require(\\n      pair != uniswapV2Pair,\\n      \\\"DoKEN: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\\\"\\n    );\\n\\n    _setAutomatedMarketMakerPair(pair, value);\\n  }\\n\\n  function _setAutomatedMarketMakerPair(address pair, bool value) private {\\n    require(\\n      automatedMarketMakerPairs[pair] != value,\\n      \\\"DoKEN: Automated market maker pair is already set to that value\\\"\\n    );\\n    automatedMarketMakerPairs[pair] = value;\\n\\n    if (value) {\\n      dividendTracker.excludeFromDividends(pair);\\n    }\\n\\n    emit SetAutomatedMarketMakerPair(pair, value);\\n  }\\n\\n  function _validateFees() private view {\\n    require(getTotalFees() <= MAX_TOTAL_FEES, \\\"total fees too high\\\");\\n  }\\n\\n  function updateMarketingFee(uint256 newFee) external onlyOwner {\\n    require(marketingFee != newFee, \\\"new fee required\\\");\\n    require(newFee <= MAX_MARKETING_FEE, \\\"new fee too high\\\");\\n    uint256 oldFee = marketingFee;\\n    marketingFee = newFee;\\n    _validateFees();\\n    emit UpdateMarketingFee(newFee, oldFee);\\n  }\\n\\n  function updateDevFee(uint256 newFee) external onlyOwner {\\n    require(devFee != newFee, \\\"new fee required\\\");\\n    require(newFee <= MAX_DEV_FEE, \\\"new fee too high\\\");\\n    uint256 oldFee = devFee;\\n    devFee = newFee;\\n    _validateFees();\\n    emit UpdateMarketingFee(newFee, oldFee);\\n  }\\n\\n  function updateBuybackFee(uint256 newFee) external onlyOwner {\\n    require(buybackFee != newFee, \\\"new fee required\\\");\\n    require(newFee <= MAX_BUYBACK_FEE, \\\"new fee too high\\\");\\n    uint256 oldFee = buybackFee;\\n    buybackFee = newFee;\\n    _validateFees();\\n    emit UpdateBuybackFee(newFee, oldFee);\\n  }\\n\\n  function updateLiquidityFee(uint256 newFee) external onlyOwner {\\n    require(liquidityFee != newFee, \\\"new fee required\\\");\\n    require(newFee <= MAX_LIQUIDITY_FEE, \\\"new fee too high\\\");\\n    uint256 oldFee = liquidityFee;\\n    liquidityFee = newFee;\\n    _validateFees();\\n    emit UpdateLiquidityFee(newFee, oldFee);\\n  }\\n\\n  function updateRewardsFee(uint256 newFee) external onlyOwner {\\n    require(rewardsFee != newFee, \\\"new fee required\\\");\\n    require(newFee <= MAX_REWARDS_FEE, \\\"new fee too high\\\");\\n    uint256 oldFee = rewardsFee;\\n    rewardsFee = newFee;\\n    _validateFees();\\n    emit UpdateRewardsFee(newFee, oldFee);\\n  }\\n\\n  function updateSellFee(uint256 newFee) external onlyOwner {\\n    require(sellFee != newFee, \\\"new fee required\\\");\\n    require(newFee <= MAX_SELL_FEE, \\\"new fee too high\\\");\\n    uint256 oldFee = sellFee;\\n    sellFee = newFee;\\n    emit UpdateSellFee(newFee, oldFee);\\n  }\\n\\n  function updateMaxBuyTransactionAmount(uint256 newValue) external onlyOwner {\\n    require(maxBuyTransactionAmount != newValue, \\\"new value required\\\");\\n    require(\\n      newValue >= MIN_BUY_TRANSACTION_AMOUNT &&\\n        newValue <= MAX_BUY_TRANSACTION_AMOUNT,\\n      \\\"new value must be >= MIN_BUY_TRANSACTION_AMOUNT and <= MAX_BUY_TRANSACTION_AMOUNT\\\"\\n    );\\n    uint256 oldValue = maxBuyTransactionAmount;\\n    maxBuyTransactionAmount = newValue;\\n    emit UpdateMaxBuyTransactionAmount(newValue, oldValue);\\n  }\\n\\n  function updateMaxSellTransactionAmount(uint256 newValue) external onlyOwner {\\n    require(maxSellTransactionAmount != newValue, \\\"new value required\\\");\\n    require(\\n      newValue >= MIN_SELL_TRANSACTION_AMOUNT &&\\n        newValue <= MAX_SELL_TRANSACTION_AMOUNT,\\n      \\\"new value must be >= MIN_SELL_TRANSACTION_AMOUNT and <= MAX_SELL_TRANSACTION_AMOUNT\\\"\\n    );\\n    uint256 oldValue = maxSellTransactionAmount;\\n    maxSellTransactionAmount = newValue;\\n    emit UpdateMaxSellTransactionAmount(newValue, oldValue);\\n  }\\n\\n  function updateSwapTokensAtAmount(uint256 newValue) external onlyOwner {\\n    require(swapTokensAtAmount != newValue, \\\"new value required\\\");\\n    require(\\n      newValue >= MIN_SWAP_TOKENS_AT_AMOUNT &&\\n        newValue <= MAX_SWAP_TOKENS_AT_AMOUNT,\\n      \\\"new value must be >= MIN_SWAP_TOKENS_AT_AMOUNT and <= MAX_SWAP_TOKENS_AT_AMOUNT\\\"\\n    );\\n    uint256 oldValue = swapTokensAtAmount;\\n    swapTokensAtAmount = newValue;\\n    emit UpdateSwapTokensAtAmount(newValue, oldValue);\\n  }\\n\\n  function updateGasForProcessing(uint256 newValue) public onlyOwner {\\n    require(\\n      newValue >= 200000 && newValue <= MAX_GAS_FOR_PROCESSING,\\n      \\\"DoKEN: gasForProcessing must be between 200,000 and MAX_GAS_FOR_PROCESSING\\\"\\n    );\\n    require(\\n      newValue != gasForProcessing,\\n      \\\"DoKEN: Cannot update gasForProcessing to same value\\\"\\n    );\\n    emit UpdateGasForProcessing(newValue, gasForProcessing);\\n    gasForProcessing = newValue;\\n  }\\n\\n  function updateClaimWait(uint256 claimWait) external onlyOwner {\\n    dividendTracker.updateClaimWait(claimWait);\\n  }\\n\\n  function getClaimWait() external view returns (uint256) {\\n    return dividendTracker.claimWait();\\n  }\\n\\n  function getTotalDividendsDistributed() external view returns (uint256) {\\n    return dividendTracker.totalDividendsDistributed();\\n  }\\n\\n  function isExcludedFromFees(address account) public view returns (bool) {\\n    return _isExcludedFromFees[account];\\n  }\\n\\n  function processDividendTracker(uint256 gas) external onlyOwner {\\n    (\\n      uint256 iterations,\\n      uint256 claims,\\n      uint256 lastProcessedIndex\\n    ) = dividendTracker.process(gas);\\n    emit ProcessedDividendTracker(\\n      iterations,\\n      claims,\\n      lastProcessedIndex,\\n      false,\\n      gas,\\n      tx.origin\\n    );\\n  }\\n\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    // Prohibit buys/sells before trading is enabled. This is useful for fair launches for obvious reasons\\n    if (from == uniswapV2Pair) {\\n      require(\\n        tradingEnabled || isWhitelisted[to],\\n        \\\"trading isnt enabled or account isnt whitelisted\\\"\\n      );\\n    } else if (to == uniswapV2Pair) {\\n      require(\\n        tradingEnabled || isWhitelisted[from],\\n        \\\"trading isnt enabled or account isnt whitelisted\\\"\\n      );\\n    }\\n\\n    // Enforce max buy\\n    if (\\n      automatedMarketMakerPairs[from] &&\\n      // No max buy when removing liq\\n      to != address(uniswapV2Router)\\n    ) {\\n      require(\\n        amount <= maxBuyTransactionAmount,\\n        \\\"Transfer amount exceeds the maxTxAmount.\\\"\\n      );\\n    }\\n\\n    if (amount == 0) {\\n      super._transfer(from, to, 0);\\n      return;\\n    }\\n\\n    // Enforce max sell\\n    if (\\n      !swapping &&\\n      automatedMarketMakerPairs[to] && // sells only by detecting transfer to automated market maker pair\\n      tradingEnabled // we need to be able to add liq before trading is enabled\\n    ) {\\n      require(\\n        amount <= maxSellTransactionAmount,\\n        \\\"Sell transfer amount exceeds the maxSellTransactionAmount.\\\"\\n      );\\n    }\\n\\n    uint256 contractTokenBalance = balanceOf(address(this));\\n    bool canSwap = (contractTokenBalance >= swapTokensAtAmount) &&\\n      swapAndLiquifyEnabled;\\n    uint256 totalFees = getTotalFees();\\n\\n    // Swap and liq for sells\\n    if (canSwap && !swapping && automatedMarketMakerPairs[to]) {\\n      swapping = true;\\n      uint256 liquidityAndTeamTokens = contractTokenBalance\\n        .mul(liquidityFee.add(marketingFee).add(buybackFee).add(devFee))\\n        .div(totalFees);\\n      swapAndLiquifyAndFundTeam(liquidityAndTeamTokens);\\n\\n      uint256 rewardTokens = balanceOf(address(this));\\n      swapAndSendDividends(rewardTokens);\\n\\n      swapping = false;\\n    }\\n\\n    // Only take taxes for buys/sells (and obviously dont take taxes during swap and liquify)\\n    bool takeFee = !swapping &&\\n      (automatedMarketMakerPairs[from] || automatedMarketMakerPairs[to]);\\n\\n    // if any account belongs to _isExcludedFromFee account then remove the fee\\n    if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\n      takeFee = false;\\n    }\\n\\n    if (takeFee) {\\n      uint256 fees = amount.mul(totalFees).div(100);\\n\\n      // If sell, add extra fee\\n      if (automatedMarketMakerPairs[to]) {\\n        fees += amount.mul(sellFee).div(100);\\n      }\\n\\n      totalFeesCollected += fees;\\n\\n      amount = amount.sub(fees);\\n\\n      super._transfer(from, address(this), fees);\\n    }\\n\\n    super._transfer(from, to, amount);\\n\\n    // Trigger dividends to be paid out\\n    try dividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\\n    try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\\n\\n    if (!swapping) {\\n      uint256 gas = gasForProcessing;\\n\\n      try dividendTracker.process(gas) returns (\\n        uint256 iterations,\\n        uint256 claims,\\n        uint256 lastProcessedIndex\\n      ) {\\n        emit ProcessedDividendTracker(\\n          iterations,\\n          claims,\\n          lastProcessedIndex,\\n          true,\\n          gas,\\n          tx.origin\\n        );\\n      } catch {}\\n    }\\n  }\\n\\n  function swapAndLiquifyAndFundTeam(uint256 tokens) private {\\n    // split the contract balance into halves\\n    uint256 half = tokens.div(2);\\n    uint256 otherHalf = tokens.sub(half);\\n\\n    // capture the contract's current ETH balance.\\n    // this is so that we can capture exactly the amount of ETH that the\\n    // swap creates, and not make the liquidity event include any ETH that\\n    // has been manually sent to the contract\\n    uint256 initialBalance = address(this).balance;\\n\\n    // swap tokens for ETH\\n    swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\\n\\n    // how much ETH did we just swap into?\\n    uint256 newBalance = address(this).balance.sub(initialBalance);\\n\\n    // All fees except rewards fee\\n    uint256 totalFees = marketingFee.add(buybackFee).add(liquidityFee).add(\\n      devFee\\n    );\\n\\n    uint256 liquidityTokens = otherHalf.mul(liquidityFee).div(totalFees);\\n    uint256 liquidityETH = newBalance.mul(liquidityFee).div(totalFees);\\n\\n    uint256 marketingTokens = otherHalf.mul(marketingFee).div(totalFees);\\n    uint256 marketingETH = newBalance.mul(marketingFee).div(totalFees);\\n\\n    uint256 devTokens = otherHalf.mul(devFee).div(totalFees);\\n    uint256 devETH = newBalance.mul(devFee).div(totalFees);\\n\\n    uint256 buybackTokens = otherHalf.mul(buybackFee).div(totalFees);\\n    uint256 buybackETH = newBalance.mul(buybackFee).div(totalFees);\\n\\n    // add liquidity to uniswap (really PCS, duh)\\n    addLiquidity(liquidityTokens, liquidityETH);\\n    emit SwapAndLiquify(half, newBalance, otherHalf);\\n\\n    // Transfer tokens and ETH to marketing wallet\\n    _safeTransfer(address(this), marketingWallet, marketingTokens);\\n    emit TransferTokensToMarketingWallet(marketingWallet, marketingTokens);\\n    marketingWallet.transfer(marketingETH);\\n    emit TransferETHToMarketingWallet(marketingWallet, marketingETH);\\n\\n    // Transfer tokens and ETH to dev wallet\\n    _safeTransfer(address(this), devWallet, devTokens);\\n    emit TransferTokensToDevWallet(devWallet, devTokens);\\n    devWallet.transfer(devETH);\\n    emit TransferETHToMarketingWallet(devWallet, devETH);\\n\\n    // Transfer tokens and ETH to buyback wallet\\n    _safeTransfer(address(this), buybackWallet, buybackTokens);\\n    emit TransferTokensToBuybackWallet(buybackWallet, buybackTokens);\\n    buybackWallet.transfer(buybackETH);\\n    emit TransferETHToBuybackWallet(buybackWallet, buybackETH);\\n  }\\n\\n  function swapTokensForEth(uint256 tokenAmount) private {\\n    // generate the uniswap pair path of token -> weth\\n    address[] memory path = new address[](2);\\n    path[0] = address(this);\\n    path[1] = uniswapV2Router.WETH();\\n\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n    // make the swap\\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n      tokenAmount,\\n      0, // accept any amount of ETH\\n      path,\\n      address(this),\\n      block.timestamp\\n    );\\n  }\\n\\n  function swapTokensForETH(uint256 tokenAmount, address recipient) private {\\n    // generate the uniswap pair path of tokens -> WETH\\n    address[] memory path = new address[](2);\\n    path[0] = address(this);\\n    path[1] = uniswapV2Router.WETH();\\n\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n    // make the swap\\n    uniswapV2Router.swapExactTokensForETH(\\n      tokenAmount,\\n      0, // accept any amount of the reward token\\n      path,\\n      recipient,\\n      block.timestamp\\n    );\\n  }\\n\\n  function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n    // approve token transfer to cover all possible scenarios\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n    // add the liquidity\\n    uniswapV2Router.addLiquidityETH{ value: ethAmount }(\\n      address(this),\\n      tokenAmount,\\n      0, // slippage is unavoidable\\n      0, // slippage is unavoidable\\n      address(this), // lock LP tokens in this contract forever - no rugpull, SAFU!!\\n      block.timestamp\\n    );\\n  }\\n\\n  function swapTokensForRewards(uint256 tokenAmount, address recipient)\\n    private\\n  {\\n    // generate the uniswap pair path of weth -> reward token\\n    address[] memory path = new address[](3);\\n    path[0] = address(this);\\n    path[1] = uniswapV2Router.WETH();\\n    path[2] = rewardToken;\\n\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n    // make the swap\\n    uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n      tokenAmount,\\n      0, // accept any amount of the reward token\\n      path,\\n      recipient,\\n      block.timestamp\\n    );\\n  }\\n\\n  function sendDividends() private returns (bool, uint256) {\\n    uint256 dividends = IERC20(rewardToken).balanceOf(address(this));\\n    bool success = IERC20(rewardToken).transfer(\\n      address(dividendTracker),\\n      dividends\\n    );\\n\\n    if (success) {\\n      dividendTracker.distributeRewardTokenDividends(dividends);\\n    }\\n\\n    return (success, dividends);\\n  }\\n\\n  function swapAndSendDividends(uint256 tokens) private {\\n    // Locks the LP tokens in this contract forever\\n    swapTokensForRewards(tokens, address(this));\\n    (bool success, uint256 dividends) = sendDividends();\\n    if (success) {\\n      emit SendDividends(tokens, dividends);\\n    }\\n  }\\n\\n  // For withdrawing ETH accidentally sent to the contract so senders can be refunded\\n  function getETHBalance() public view returns (uint256) {\\n    return address(this).balance;\\n  }\\n\\n  function withdrawOverFlowETH() external onlyOwner {\\n    address payable to = payable(msg.sender);\\n    to.transfer(getETHBalance());\\n  }\\n\\n  function _safeTransfer(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) private {\\n    bytes4 SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(\\n      abi.encodeWithSelector(SELECTOR, to, value)\\n    );\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"TRANSFER_FAILED\\\"\\n    );\\n  }\\n\\n  // DoKEN Interface for Rewards\\n\\n  /**\\n  DoKENRewardAddress expect returns the address of your reward\\n  for example if its a cake token, then it should return the cake token address\\n   */\\n  function DoKENRewardAddress() external view returns (address) {\\n    return rewardToken;\\n  }\\n\\n  /**\\n  DoKENRewardOnPool expect returns the balance of reward on the dividend pool\\n   */\\n  function DoKENRewardOnPool() external view returns (uint256) {\\n    return IERC20(rewardToken).balanceOf(address(dividendTracker));\\n  }\\n\\n  /**\\n   * DoKENTokenFees expect returns a multiple uint256\\n   * in a precentage , example : 10% the its 10, 20% then its 20, etc\\n   * Which represent the fees on your tokens\\n\\n   * totalFee,rewardFee,liquidityFee,marketingFee,developerFee,additionalSellingFee\\n   \\n   * if you're not implementing one of these fee, just return 0\\n   */\\n  function DoKENTokenFees()\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return (\\n      getTotalFees(),\\n      rewardsFee,\\n      liquidityFee,\\n      marketingFee,\\n      devFee,\\n      sellFee\\n    );\\n  }\\n\\n  /**\\n   * DoKENRewardDistributed\\n   * Should return the amount of distributed Reward\\n   */\\n  function DoKENRewardDistributed() external view returns (uint256) {\\n    return dividendTracker.getTotalDividendsDistributed();\\n  }\\n\\n  /**\\n    DoKENGetAccountDividendsInfo \\n    Expect returns a dividend information by address,\\n    the return values should in these order\\n    \\n    address account,\\n    int256 index,\\n    int256 iterationsUntilProcessed,\\n    uint256 withdrawableDividends,\\n    uint256 withdrawnDividends,\\n    uint256 totalDividends,\\n    uint256 lastClaimTime,\\n    uint256 nextClaimTime,\\n    uint256 secondsUntilAutoClaimAvailable\\n   */\\n\\n  function DoKENGetAccountDividendsInfo(address account)\\n    public\\n    view\\n    returns (\\n      address,\\n      int256,\\n      int256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return dividendTracker.getAccount(account);\\n  }\\n\\n  /**\\n    DoKENGetAccountDividendsInfoAtIndex \\n    Expect returns a dividend information by index,\\n    the return values should in these order\\n    \\n    address account,\\n    int256 index,\\n    int256 iterationsUntilProcessed,\\n    uint256 withdrawableDividends,\\n    uint256 withdrawnDividends,\\n    uint256 totalDividends,\\n    uint256 lastClaimTime,\\n    uint256 nextClaimTime,\\n    uint256 secondsUntilAutoClaimAvailable\\n   */\\n  function DoKENGetAccountDividendsInfoAtIndex(uint256 index)\\n    public\\n    view\\n    returns (\\n      address,\\n      int256,\\n      int256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return dividendTracker.getAccountAtIndex(index);\\n  }\\n\\n  /** \\n    DoKENRewardPaid expect return a uint256 value of the paid reward\\n  */\\n  function DoKENRewardPaid(address holder) external view returns (uint256) {\\n    (, , , , uint256 paidAmount, , , , ) = DoKENGetAccountDividendsInfo(holder);\\n    return paidAmount;\\n  }\\n\\n  /** \\n    DoKENRewardPaid expect return a uint256 value of the unpaid reward\\n  */\\n  function DoKENRewardUnPaid(address holder) external view returns (uint256) {\\n    (, , , uint256 unpaidAmount, , , , , ) = DoKENGetAccountDividendsInfo(\\n      holder\\n    );\\n    return unpaidAmount;\\n  }\\n\\n  /** Claim Interface  */\\n  function DoKENRewardClaim() external {\\n    dividendTracker.processAccount(payable(msg.sender), false);\\n  }\\n\\n  /** Last processed index */\\n  function DoKENLastProcessedIndex() external view returns (uint256) {\\n    return dividendTracker.getLastProcessedIndex();\\n  }\\n\\n  /** Expect to returns the total holders of the dividend */\\n  function DoKENNumberOfDividendTokenHolders() external view returns (uint256) {\\n    return dividendTracker.getNumberOfTokenHolders();\\n  }\\n\\n  /** Expect to returns the balance of dividend token of an account */\\n  function DoKENDividendBalanceOf(address account)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return dividendTracker.balanceOf(account);\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/SafeMathUint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\n/**\\n * @title SafeMathUint\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMathUint {\\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\\n    int256 b = int256(a);\\n    require(b >= 0);\\n    return b;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/SafeMathInt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/*\\nMIT License\\n\\nCopyright (c) 2018 requestnetwork\\nCopyright (c) 2018 Fragments, Inc.\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n*/\\n\\npragma solidity ^0.8.6;\\n\\n/**\\n * @title SafeMathInt\\n * @dev Math operations for int256 with overflow safety checks.\\n */\\nlibrary SafeMathInt {\\n  int256 private constant MIN_INT256 = int256(1) << 255;\\n  int256 private constant MAX_INT256 = ~(int256(1) << 255);\\n\\n  /**\\n   * @dev Multiplies two int256 variables and fails on overflow.\\n   */\\n  function mul(int256 a, int256 b) internal pure returns (int256) {\\n    int256 c = a * b;\\n\\n    // Detect overflow when multiplying MIN_INT256 with -1\\n    require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\\n    require((b == 0) || (c / b == a));\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Division of two int256 variables and fails on overflow.\\n   */\\n  function div(int256 a, int256 b) internal pure returns (int256) {\\n    // Prevent overflow when dividing MIN_INT256 by -1\\n    require(b != -1 || a != MIN_INT256);\\n\\n    // Solidity already throws when dividing by 0.\\n    return a / b;\\n  }\\n\\n  /**\\n   * @dev Subtracts two int256 variables and fails on overflow.\\n   */\\n  function sub(int256 a, int256 b) internal pure returns (int256) {\\n    int256 c = a - b;\\n    require((b >= 0 && c <= a) || (b < 0 && c > a));\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Adds two int256 variables and fails on overflow.\\n   */\\n  function add(int256 a, int256 b) internal pure returns (int256) {\\n    int256 c = a + b;\\n    require((b >= 0 && c >= a) || (b < 0 && c < a));\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Converts to absolute value, and fails on overflow.\\n   */\\n  function abs(int256 a) internal pure returns (int256) {\\n    require(a != MIN_INT256);\\n    return a < 0 ? -a : a;\\n  }\\n\\n  function toUint256Safe(int256 a) internal pure returns (uint256) {\\n    require(a >= 0);\\n    return uint256(a);\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT License\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"./Context.sol\\\";\\n\\ncontract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/IterableMapping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nlibrary IterableMapping {\\n  // Iterable mapping from address to uint;\\n  struct Map {\\n    address[] keys;\\n    mapping(address => uint256) values;\\n    mapping(address => uint256) indexOf;\\n    mapping(address => bool) inserted;\\n  }\\n\\n  function get(Map storage map, address key) public view returns (uint256) {\\n    return map.values[key];\\n  }\\n\\n  function getIndexOfKey(Map storage map, address key)\\n    public\\n    view\\n    returns (int256)\\n  {\\n    if (!map.inserted[key]) {\\n      return -1;\\n    }\\n    return int256(map.indexOf[key]);\\n  }\\n\\n  function getKeyAtIndex(Map storage map, uint256 index)\\n    public\\n    view\\n    returns (address)\\n  {\\n    return map.keys[index];\\n  }\\n\\n  function size(Map storage map) public view returns (uint256) {\\n    return map.keys.length;\\n  }\\n\\n  function set(\\n    Map storage map,\\n    address key,\\n    uint256 val\\n  ) public {\\n    if (map.inserted[key]) {\\n      map.values[key] = val;\\n    } else {\\n      map.inserted[key] = true;\\n      map.values[key] = val;\\n      map.indexOf[key] = map.keys.length;\\n      map.keys.push(key);\\n    }\\n  }\\n\\n  function remove(Map storage map, address key) public {\\n    if (!map.inserted[key]) {\\n      return;\\n    }\\n\\n    delete map.inserted[key];\\n    delete map.values[key];\\n\\n    uint256 index = map.indexOf[key];\\n    uint256 lastIndex = map.keys.length - 1;\\n    address lastKey = map.keys[lastIndex];\\n\\n    map.indexOf[lastKey] = index;\\n    delete map.indexOf[key];\\n\\n    map.keys[index] = lastKey;\\n    map.keys.pop();\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\ninterface IUniswapV2Pair {\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(\\n    address indexed sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    address indexed to\\n  );\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\ninterface IUniswapV2Factory {\\n  event PairCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    address pair,\\n    uint256\\n  );\\n\\n  function feeTo() external view returns (address);\\n\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(address tokenA, address tokenB)\\n    external\\n    view\\n    returns (address pair);\\n\\n  function allPairs(uint256) external view returns (address pair);\\n\\n  function allPairsLength() external view returns (uint256);\\n\\n  function createPair(address tokenA, address tokenB)\\n    external\\n    returns (address pair);\\n\\n  function setFeeTo(address) external;\\n\\n  function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/IUniswapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\ninterface IUniswapV2Router01 {\\n  function factory() external pure returns (address);\\n\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n}\\n\\n// pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/contracts/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string private _name;\\n  string private _symbol;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}.\\n   *\\n   * The default value of {decimals} is 18. To select a different value for\\n   * {decimals} you should overload it.\\n   *\\n   * All two of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name_, string memory symbol_) {\\n    _name = name_;\\n    _symbol = symbol_;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n   * overridden;\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view virtual override returns (uint8) {\\n    return 18;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount)\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount)\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20}.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(\\n        amount,\\n        \\\"ERC20: transfer amount exceeds allowance\\\"\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].add(addedValue)\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        \\\"ERC20: decreased allowance below zero\\\"\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(\\n      amount,\\n      \\\"ERC20: transfer amount exceeds balance\\\"\\n    );\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(\\n      amount,\\n      \\\"ERC20: burn amount exceeds balance\\\"\\n    );\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n   *\\n   * This internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"/contracts/DoKENDividendTracker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT License\\n// Dividend Tracker contract\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"./DividendPayingToken.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IterableMapping.sol\\\";\\n\\ncontract DoKENDividendTracker is DividendPayingToken, Ownable {\\n  using SafeMath for uint256;\\n  using SafeMathInt for int256;\\n  using IterableMapping for IterableMapping.Map;\\n\\n  IterableMapping.Map private tokenHoldersMap;\\n  uint256 public lastProcessedIndex;\\n\\n  mapping(address => bool) public excludedFromDividends;\\n\\n  mapping(address => uint256) public lastClaimTimes;\\n\\n  uint256 public claimWait;\\n  uint256 public immutable minimumTokenBalanceForDividends;\\n\\n  event ExcludeFromDividends(address indexed account);\\n  event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\n\\n  event Claim(address indexed account, uint256 amount, bool indexed automatic);\\n\\n  constructor() DividendPayingToken(\\\"DoKEN Dividend\\\", \\\"dDoKEN\\\") {\\n    claimWait = 3600;\\n    minimumTokenBalanceForDividends = 5000000 * (10**18); //must hold 5000000+ tokens\\n  }\\n\\n  function _transfer(\\n    address,\\n    address,\\n    uint256\\n  ) internal pure override {\\n    require(false, \\\"DoKEN_Dividend_Tracker: No transfers allowed\\\");\\n  }\\n\\n  function withdrawDividend() public pure override {\\n    require(\\n      false,\\n      \\\"DoKEN_Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main DoKEN contract.\\\"\\n    );\\n  }\\n\\n  function isExcludedFromDividends(address account)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return excludedFromDividends[account];\\n  }\\n\\n  function excludeFromDividends(address account) external onlyOwner {\\n    excludedFromDividends[account] = true;\\n\\n    _setBalance(account, 0);\\n    tokenHoldersMap.remove(account);\\n\\n    emit ExcludeFromDividends(account);\\n  }\\n\\n  function updateClaimWait(uint256 newClaimWait) external onlyOwner {\\n    require(\\n      newClaimWait >= 3600 && newClaimWait <= 86400,\\n      \\\"DoKEN_Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\\\"\\n    );\\n    require(\\n      newClaimWait != claimWait,\\n      \\\"DoKEN_Dividend_Tracker: Cannot update claimWait to same value\\\"\\n    );\\n    emit ClaimWaitUpdated(newClaimWait, claimWait);\\n    claimWait = newClaimWait;\\n  }\\n\\n  function getLastProcessedIndex() external view returns (uint256) {\\n    return lastProcessedIndex;\\n  }\\n\\n  function getNumberOfTokenHolders() external view returns (uint256) {\\n    return tokenHoldersMap.keys.length;\\n  }\\n\\n  function getAccount(address _account)\\n    public\\n    view\\n    returns (\\n      address account,\\n      int256 index,\\n      int256 iterationsUntilProcessed,\\n      uint256 withdrawableDividends,\\n      uint256 withdrawnDividend,\\n      uint256 totalDividends,\\n      uint256 lastClaimTime,\\n      uint256 nextClaimTime,\\n      uint256 secondsUntilAutoClaimAvailable\\n    )\\n  {\\n    account = _account;\\n\\n    index = tokenHoldersMap.getIndexOfKey(account);\\n\\n    iterationsUntilProcessed = -1;\\n\\n    if (index >= 0) {\\n      if (uint256(index) > lastProcessedIndex) {\\n        iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\\n      } else {\\n        uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length >\\n          lastProcessedIndex\\n          ? tokenHoldersMap.keys.length.sub(lastProcessedIndex)\\n          : 0;\\n\\n        iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\\n      }\\n    }\\n\\n    withdrawableDividends = withdrawableDividendOf(account);\\n    withdrawnDividend = withdrawnDividendOf(account);\\n    totalDividends = accumulativeDividendOf(account);\\n\\n    lastClaimTime = lastClaimTimes[account];\\n\\n    nextClaimTime = lastClaimTime > 0 ? lastClaimTime.add(claimWait) : 0;\\n\\n    secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp\\n      ? nextClaimTime.sub(block.timestamp)\\n      : 0;\\n  }\\n\\n  function getAccountAtIndex(uint256 index)\\n    public\\n    view\\n    returns (\\n      address,\\n      int256,\\n      int256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    if (index >= tokenHoldersMap.size()) {\\n      return (\\n        0x0000000000000000000000000000000000000000,\\n        -1,\\n        -1,\\n        0,\\n        0,\\n        0,\\n        0,\\n        0,\\n        0\\n      );\\n    }\\n\\n    address account = tokenHoldersMap.getKeyAtIndex(index);\\n\\n    return getAccount(account);\\n  }\\n\\n  function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\\n    if (lastClaimTime > block.timestamp) {\\n      return false;\\n    }\\n\\n    return block.timestamp.sub(lastClaimTime) >= claimWait;\\n  }\\n\\n  function setBalance(address payable account, uint256 newBalance)\\n    external\\n    onlyOwner\\n  {\\n    if (excludedFromDividends[account]) {\\n      return;\\n    }\\n\\n    if (newBalance >= minimumTokenBalanceForDividends) {\\n      _setBalance(account, newBalance);\\n      tokenHoldersMap.set(account, newBalance);\\n    } else {\\n      _setBalance(account, 0);\\n      tokenHoldersMap.remove(account);\\n    }\\n\\n    processAccount(account, true);\\n  }\\n\\n  function process(uint256 gas)\\n    public\\n    onlyOwner\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\\n\\n    if (numberOfTokenHolders == 0) {\\n      return (0, 0, lastProcessedIndex);\\n    }\\n\\n    uint256 _lastProcessedIndex = lastProcessedIndex;\\n\\n    uint256 gasUsed = 0;\\n\\n    uint256 gasLeft = gasleft();\\n\\n    uint256 iterations = 0;\\n    uint256 claims = 0;\\n\\n    while (gasUsed < gas && iterations < numberOfTokenHolders) {\\n      _lastProcessedIndex++;\\n\\n      if (_lastProcessedIndex >= tokenHoldersMap.keys.length) {\\n        _lastProcessedIndex = 0;\\n      }\\n\\n      address account = tokenHoldersMap.keys[_lastProcessedIndex];\\n\\n      if (canAutoClaim(lastClaimTimes[account])) {\\n        if (processAccount(payable(account), true)) {\\n          claims++;\\n        }\\n      }\\n\\n      iterations++;\\n\\n      uint256 newGasLeft = gasleft();\\n\\n      if (gasLeft > newGasLeft) {\\n        gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\\n      }\\n\\n      gasLeft = newGasLeft;\\n    }\\n\\n    lastProcessedIndex = _lastProcessedIndex;\\n\\n    return (iterations, claims, lastProcessedIndex);\\n  }\\n\\n  function processAccount(address payable account, bool automatic)\\n    public\\n    onlyOwner\\n    returns (bool)\\n  {\\n    uint256 amount = _withdrawDividendOfUser(account);\\n    if (amount > 0) {\\n      lastClaimTimes[account] = block.timestamp;\\n      emit Claim(account, amount, automatic);\\n      return true;\\n    }\\n\\n    return false;\\n  }\\n\\n  function distributeRewardTokenDividends(uint256 amount) external onlyOwner {\\n    require(totalSupply() > 0);\\n\\n    if (amount > 0) {\\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\\n        (amount).mul(magnitude) / totalSupply()\\n      );\\n      emit DividendsDistributed(msg.sender, amount);\\n\\n      totalDividendsDistributed = totalDividendsDistributed.add(amount);\\n    }\\n  }\\n\\n  function getTotalDividendsDistributed() external view returns (uint256) {\\n    return totalDividendsDistributed;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/DividendPayingTokenOptionalInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\n/// @title Dividend-Paying Token Optional Interface\\n/// @author Roger Wu (https://github.com/roger-wu)\\n/// @dev OPTIONAL functions for a dividend-paying token contract.\\ninterface DividendPayingTokenOptionalInterface {\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function withdrawableDividendOf(address _owner)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n  function withdrawnDividendOf(address _owner) external view returns (uint256);\\n\\n  /// @notice View the amount of dividend in wei that an address has earned in total.\\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\\n  function accumulativeDividendOf(address _owner)\\n    external\\n    view\\n    returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/DividendPayingTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\n/// @title Dividend-Paying Token Interface\\n/// @author Roger Wu (https://github.com/roger-wu)\\n/// @dev An interface for a dividend-paying token contract.\\ninterface DividendPayingTokenInterface {\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function dividendOf(address _owner) external view returns (uint256);\\n\\n  /// @notice Distributes ether to token holders as dividends.\\n  /// @dev SHOULD distribute the paid ether to token holders as dividends.\\n  ///  SHOULD NOT directly transfer ether to token holders in this function.\\n  ///  MUST emit a `DividendsDistributed` event when the amount of distributed ether is greater than 0.\\n  function distributeDividends() external payable;\\n\\n  /// @notice Withdraws the ether distributed to the sender.\\n  /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\\n  ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\\n  function withdrawDividend() external;\\n\\n  /// @dev This event MUST emit when ether is distributed to token holders.\\n  /// @param from The address which sends ether to this contract.\\n  /// @param weiAmount The amount of distributed ether in wei.\\n  event DividendsDistributed(address indexed from, uint256 weiAmount);\\n\\n  /// @dev This event MUST emit when an address withdraws their dividend.\\n  /// @param to The address which withdraws ether from this contract.\\n  /// @param weiAmount The amount of withdrawn ether in wei.\\n  event DividendWithdrawn(address indexed to, uint256 weiAmount);\\n\\n  event RewardTokenUpdated(\\n    address indexed newAddress,\\n    address indexed oldAddress\\n  );\\n}\\n\"\r\n    },\r\n    \"/contracts/DividendPayingToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"./DividendPayingTokenInterface.sol\\\";\\nimport \\\"./DividendPayingTokenOptionalInterface.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./SafeMathUint.sol\\\";\\nimport \\\"./SafeMathInt.sol\\\";\\n\\n/// @title Dividend-Paying Token\\n/// @author Roger Wu (https://github.com/roger-wu)\\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute ether\\n///  to token holders as dividends and allows token holders to withdraw their dividends.\\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\\ncontract DividendPayingToken is\\n  ERC20,\\n  DividendPayingTokenInterface,\\n  DividendPayingTokenOptionalInterface\\n{\\n  using SafeMath for uint256;\\n  using SafeMathUint for uint256;\\n  using SafeMathInt for int256;\\n\\n  // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\\n  // For more discussion about choosing the value of `magnitude`,\\n  //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\\n  uint256 internal constant magnitude = 2**128;\\n\\n  uint256 internal magnifiedDividendPerShare;\\n  uint256 internal lastAmount;\\n\\n  address public rewardToken = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // mainnet BUSD\\n  //address public rewardToken = 0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7; // testnet BUSD\\n\\n  // About dividendCorrection:\\n  // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\\n  // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\\n  //   `dividendOf(_user)` should not be changed,\\n  //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\\n  // To keep the `dividendOf(_user)` unchanged, we add a correction term:\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\\n  //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\\n  //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\\n  // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\\n  mapping(address => int256) internal magnifiedDividendCorrections;\\n  mapping(address => uint256) internal withdrawnDividends;\\n\\n  uint256 public totalDividendsDistributed;\\n\\n  constructor(string memory _name, string memory _symbol)\\n    ERC20(_name, _symbol)\\n  {}\\n\\n  receive() external payable {}\\n\\n  /// @notice Distributes ether to token holders as dividends.\\n  /// @dev It reverts if the total supply of tokens is 0.\\n  /// It emits the `DividendsDistributed` event if the amount of received ether is greater than 0.\\n  /// About undistributed ether:\\n  ///   In each distribution, there is a small amount of ether not distributed,\\n  ///     the magnified amount of which is\\n  ///     `(msg.value * magnitude) % totalSupply()`.\\n  ///   With a well-chosen `magnitude`, the amount of undistributed ether\\n  ///     (de-magnified) in a distribution can be less than 1 wei.\\n  ///   We can actually keep track of the undistributed ether in a distribution\\n  ///     and try to distribute it in the next distribution,\\n  ///     but keeping track of such data on-chain costs much more than\\n  ///     the saved ether, so we don't do that.\\n  function distributeDividends() public payable override {\\n    require(totalSupply() > 0);\\n\\n    if (msg.value > 0) {\\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\\n        (msg.value).mul(magnitude) / totalSupply()\\n      );\\n      emit DividendsDistributed(msg.sender, msg.value);\\n\\n      totalDividendsDistributed = totalDividendsDistributed.add(msg.value);\\n    }\\n  }\\n\\n  /// @notice Withdraws the ether distributed to the sender.\\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\n  function withdrawDividend() public virtual override {\\n    _withdrawDividendOfUser(payable(msg.sender));\\n  }\\n\\n  /// @notice Withdraws the ether distributed to the sender.\\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\n  function _withdrawDividendOfUser(address payable user)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\\n    if (_withdrawableDividend > 0) {\\n      withdrawnDividends[user] = withdrawnDividends[user].add(\\n        _withdrawableDividend\\n      );\\n      emit DividendWithdrawn(user, _withdrawableDividend);\\n      bool success = IERC20(rewardToken).transfer(user, _withdrawableDividend);\\n      if (!success) {\\n        withdrawnDividends[user] = withdrawnDividends[user].sub(\\n          _withdrawableDividend\\n        );\\n        return 0;\\n      }\\n\\n      return _withdrawableDividend;\\n    }\\n\\n    return 0;\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function dividendOf(address _owner) public view override returns (uint256) {\\n    return withdrawableDividendOf(_owner);\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function withdrawableDividendOf(address _owner)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n  function withdrawnDividendOf(address _owner)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return withdrawnDividends[_owner];\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address has earned in total.\\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\n  /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\\n  function accumulativeDividendOf(address _owner)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return\\n      magnifiedDividendPerShare\\n        .mul(balanceOf(_owner))\\n        .toInt256Safe()\\n        .add(magnifiedDividendCorrections[_owner])\\n        .toUint256Safe() / magnitude;\\n  }\\n\\n  /// @dev Internal function that transfer tokens from one address to another.\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n  /// @param from The address to transfer from.\\n  /// @param to The address to transfer to.\\n  /// @param value The amount to be transferred.\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal virtual override {\\n    require(false);\\n\\n    int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\\n    magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(\\n      _magCorrection\\n    );\\n    magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(\\n      _magCorrection\\n    );\\n  }\\n\\n  /// @dev Internal function that mints tokens to an account.\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n  /// @param account The account that will receive the created tokens.\\n  /// @param value The amount that will be created.\\n  function _mint(address account, uint256 value) internal override {\\n    super._mint(account, value);\\n\\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\\n      account\\n    ].sub((magnifiedDividendPerShare.mul(value)).toInt256Safe());\\n  }\\n\\n  /// @dev Internal function that burns an amount of the token of a given account.\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n  /// @param account The account whose tokens will be burnt.\\n  /// @param value The amount that will be burnt.\\n  function _burn(address account, uint256 value) internal override {\\n    super._burn(account, value);\\n\\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\\n      account\\n    ].add((magnifiedDividendPerShare.mul(value)).toInt256Safe());\\n  }\\n\\n  function _setBalance(address account, uint256 newBalance) internal {\\n    uint256 currentBalance = balanceOf(account);\\n\\n    if (newBalance > currentBalance) {\\n      uint256 mintAmount = newBalance.sub(currentBalance);\\n      _mint(account, mintAmount);\\n    } else if (newBalance < currentBalance) {\\n      uint256 burnAmount = currentBalance.sub(newBalance);\\n      _burn(account, burnAmount);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {\r\n      \"/contracts/IterableMapping.sol\": {\r\n        \"IterableMapping\": \"0x4Aa57B45069C00AFf008604b22fbBbe18AFa55E7\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"EnableTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludeAccountFromDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferETHToBuybackWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferETHToDevWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferETHToMarketingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferTokensToBuybackWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferTokensToDevWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferTokensToMarketingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"UpdateBuybackFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"UpdateBuybackWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"UpdateGasForProcessing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"UpdateLiquidityFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMarketingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"UpdateMarketingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxBuyTransactionAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxSellTransactionAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"UpdatePresaleWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"UpdateRewardsFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"UpdateSellFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"UpdateSwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"UpdateSwapTokensAtAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistAccount\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DoKENDividendBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DoKENGetAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"DoKENGetAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DoKENLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DoKENNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DoKENRewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DoKENRewardClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DoKENRewardDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DoKENRewardOnPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"DoKENRewardPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"DoKENRewardUnPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DoKENTokenFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BUYBACK_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BUY_TRANSACTION_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEV_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GAS_FOR_PROCESSING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LIQUIDITY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MARKETING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REWARDS_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SELL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SELL_TRANSACTION_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SWAP_TOKENS_AT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOTAL_FEES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BUY_TRANSACTION_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_SELL_TRANSACTION_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_SWAP_TOKENS_AT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DoKENDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccountFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistedAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateBuybackFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateBuybackWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxBuyTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxSellTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updatePreSaleWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateRewardsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"whitelistAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawOverFlowETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DoKEN", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}