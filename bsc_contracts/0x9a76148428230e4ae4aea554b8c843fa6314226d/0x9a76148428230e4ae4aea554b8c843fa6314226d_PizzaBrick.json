{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n/*\r\n * \r\n * \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\r\n * \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2588\u2588\u2554\u255d\r\n * \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2588\u2554\u2550\u255d\u2591\u2591\u2588\u2588\u2588\u2554\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u255a\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2550\u255d\u2591\r\n * \u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2588\u2588\u2557\u2591\r\n * \u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2557\r\n * \u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\r\n *\r\n *  ___ _ __ ___   __ _ _ __| |_    ___ ___  _ __ | |_ _ __ __ _  ___| |_\r\n * / __| '_ ` _ \\ / _` | '__| __|  / __/ _ \\| '_ \\| __| '__/ _` |/ __| __|\r\n * \\__ \\ | | | | | (_| | |  | |_  | (_| (_) | | | | |_| | | (_| | (__| |_\r\n * |___/_| |_| |_|\\__,_|_|   \\__|  \\___\\___/|_| |_|\\__|_|  \\__,_|\\___|\\__|\r\n *\r\n *\r\n * Welcome to the exciting world of \"Pizza Brick\"!\r\n *\r\n * Here, every participant can dive into the investment excitement by purchasing bricks with BNB, the in-game currency.\r\n * These bricks pave the way to acquiring pizzerias that generate pizza as income.\r\n *\r\n * And then, you can exchange the pizza for BNB, increasing your profits.\r\n * \r\n * But that's not all!\r\n * \r\n * In \"Pizza Brick,\" exciting gaming features are available, adding extra fun and a chance to boost your earnings.\r\n * Players have the opportunity to participate in a lottery and a 1 vs 1 arena, where two participants battle for victory using a random order.\r\n * \r\n * The smart contract announces the winner, who takes the prize.\r\n * \r\n * Lottery rooms, created by participants, allow the next players to join and share the winnings among themselves.\r\n * \r\n * Manage your investments, engage in thrilling gambling games, and grow your pizzerias, turning bricks into prosperity!\r\n *\r\n *\r\n * JOIN US ON TWITTER: https://twitter.com/PizzaBrickk\r\n *\r\n *\r\n * Web: https://pizzabrick.io/\r\n *\r\n *\r\n*/\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant NOT_ENTERED = 1;\r\n    uint256 private constant ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\r\n        if (_status == ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == ENTERED;\r\n    }\r\n}\r\n\r\ncontract PizzaBrick is ReentrancyGuard{\r\n    struct OvenConfig {\r\n        uint8 stage;\r\n        uint256 maxHours;\r\n        uint256 price;\r\n    }\r\n\r\n    struct CookingSpeedConfig{\r\n        uint8 stage;\r\n        uint8 bonusPercent;\r\n        uint256 price;\r\n    }\r\n\r\n    struct PizzeriaConfig{\r\n        uint8 stage;\r\n        uint256 pizzaPerHour;\r\n        uint256 price;\r\n    }\r\n\r\n    struct User {\r\n        uint256 pizza;\r\n        uint256 bricks;\r\n        uint256 fridgePizza;\r\n        address partner;\r\n        uint256 refsDeps;\r\n        uint256 refsTotal;\r\n        CookingSpeedConfig cookingSpeed;\r\n        PizzeriaConfig[8] pizzerias;\r\n        OvenConfig oven;\r\n        uint256 hrsFarm;\r\n        uint256 lastOvenSync;\r\n    }\r\n    \r\n    struct Duels {\r\n        uint256 totalGames;\r\n        uint256 wins;\r\n        uint256 loses;\r\n    }\r\n\r\n    struct CulinaryDuel {\r\n        address player1;\r\n        address player2;\r\n        uint256 bricks;\r\n        uint256 timestamp;\r\n        address winner;\r\n        uint256 roll;\r\n    }\r\n\r\n    struct Lotteries {\r\n        uint256 totalGames;\r\n        uint256 wins;\r\n        uint256 loses;\r\n    }\r\n\r\n    struct ActiveLottery {\r\n        uint256 ticketPrice;\r\n        uint256 participantsCount;\r\n        address[] participants;\r\n    }\r\n\r\n    uint256 constant FEE_PERCENT = 6;\r\n    uint256 constant REFERRAL_BRICKS_PERCENT = 7;\r\n    uint256 constant REFERRAL_PIZZA_PERCENT = 3;\r\n    uint256 constant BRICKS_PER_PIZZA = 100;\r\n    uint256 constant MAX_ACTIVE_LOTTERIES = 10;\r\n\r\n    address public owner = 0x8c23B6FF39A8C33c2725b540403AC3768E95FD79;\r\n    address public manager =0x6B53F45F9c0D71ca054AcC2bdDEB48AFfAaC7462;\r\n    address public manager2 = 0x7300b977659B20C51d0082D5370771A829a64628;\r\n    uint256 public totalInvested;\r\n    uint256 public totalInvestors;\r\n    uint256 public activeLotteryCount;\r\n    uint256 private pizzeriasSold;\r\n    uint256 private lastPeriodStart;\r\n\r\n    mapping(uint256 => mapping(uint256 => PizzeriaConfig)) public pizzeriasConfig;\r\n    CookingSpeedConfig[5] public cookingSpeedConfig;\r\n    OvenConfig[8] public ovensConfig;\r\n\r\n    mapping(address => User) public users;\r\n    mapping(address => Duels) public duels;\r\n    mapping(address => Lotteries) public lotteries;\r\n    \r\n    mapping(uint256 => address) public waitingDuels;\r\n    mapping(address => mapping(uint256 => CulinaryDuel)) public culinaryDuels;\r\n    mapping(uint256 => mapping(uint256 => address[])) public waitingLottery;\r\n\r\n    uint256[7] ticketsPrice = [100, 300, 500, 1000, 2000, 5000, 10000];\r\n    uint256[6] maxParticipants = [10, 20, 30, 40, 50];\r\n\r\n    constructor() {\r\n        lastPeriodStart = block.timestamp;\r\n\r\n        cookingSpeedConfig[0] = CookingSpeedConfig(1, 10, 5000);\r\n        cookingSpeedConfig[1] = CookingSpeedConfig(2, 20, 7500);\r\n        cookingSpeedConfig[2] = CookingSpeedConfig(3, 30, 10000);\r\n        cookingSpeedConfig[3] = CookingSpeedConfig(4, 40, 12500);\r\n        cookingSpeedConfig[4] = CookingSpeedConfig(5, 50, 15000);\r\n\r\n        ovensConfig[0] = OvenConfig(1, 24, 0);\r\n        ovensConfig[1] = OvenConfig(2, 30, 1000);\r\n        ovensConfig[2] = OvenConfig(3, 36, 3000);\r\n        ovensConfig[3] = OvenConfig(4, 42, 5000);\r\n        ovensConfig[4] = OvenConfig(5, 48, 6000);\r\n\r\n        pizzeriasConfig[0][0] = PizzeriaConfig(1, 20, 250);\r\n        pizzeriasConfig[0][1] = PizzeriaConfig(2, 45, 315);\r\n        pizzeriasConfig[0][2] = PizzeriaConfig(3, 80, 390);\r\n        pizzeriasConfig[0][3] = PizzeriaConfig(4, 120, 485);\r\n        pizzeriasConfig[0][4] = PizzeriaConfig(5, 175, 600);\r\n\r\n        pizzeriasConfig[1][0] = PizzeriaConfig(1, 65, 750);\r\n        pizzeriasConfig[1][1] = PizzeriaConfig(2, 145, 900);\r\n        pizzeriasConfig[1][2] = PizzeriaConfig(3, 245, 1150);\r\n        pizzeriasConfig[1][3] = PizzeriaConfig(4, 375, 1500);\r\n        pizzeriasConfig[1][4] = PizzeriaConfig(5, 535, 1800);\r\n\r\n        pizzeriasConfig[2][0] = PizzeriaConfig(1, 200, 2250);\r\n        pizzeriasConfig[2][1] = PizzeriaConfig(2, 450, 2800);\r\n        pizzeriasConfig[2][2] = PizzeriaConfig(3, 760, 3500);\r\n        pizzeriasConfig[2][3] = PizzeriaConfig(4, 1150, 4350);\r\n        pizzeriasConfig[2][4] = PizzeriaConfig(5, 1650, 5500);\r\n\r\n        pizzeriasConfig[3][0] = PizzeriaConfig(1, 610, 6750);\r\n        pizzeriasConfig[3][1] = PizzeriaConfig(2, 1375, 8400);\r\n        pizzeriasConfig[3][2] = PizzeriaConfig(3, 2335, 10500);\r\n        pizzeriasConfig[3][3] = PizzeriaConfig(4, 3525, 13000);\r\n        pizzeriasConfig[3][4] = PizzeriaConfig(5, 5050, 16500);\r\n\r\n        pizzeriasConfig[4][0] = PizzeriaConfig(1, 1875, 20250);\r\n        pizzeriasConfig[4][1] = PizzeriaConfig(2, 4225, 25300);\r\n        pizzeriasConfig[4][2] = PizzeriaConfig(3, 7175, 31500);\r\n        pizzeriasConfig[4][3] = PizzeriaConfig(4, 10875, 39500);\r\n        pizzeriasConfig[4][4] = PizzeriaConfig(5, 15525, 49000);\r\n\r\n        pizzeriasConfig[5][0] = PizzeriaConfig(1, 5700, 60000);\r\n        pizzeriasConfig[5][1] = PizzeriaConfig(2, 12850, 75000);\r\n        pizzeriasConfig[5][2] = PizzeriaConfig(3, 21800, 93500);\r\n        pizzeriasConfig[5][3] = PizzeriaConfig(4, 33150, 117500);\r\n        pizzeriasConfig[5][4] = PizzeriaConfig(5, 47500, 146500);\r\n\r\n        pizzeriasConfig[6][0] = PizzeriaConfig(1, 18100, 182500);\r\n        pizzeriasConfig[6][1] = PizzeriaConfig(2, 40850, 228000);\r\n        pizzeriasConfig[6][2] = PizzeriaConfig(3, 69450, 285000);\r\n        pizzeriasConfig[6][3] = PizzeriaConfig(4, 90700, 356500);\r\n        pizzeriasConfig[6][4] = PizzeriaConfig(5, 136450, 445000);\r\n\r\n        pizzeriasConfig[7][0] = PizzeriaConfig(1, 52000, 500000);\r\n        pizzeriasConfig[7][1] = PizzeriaConfig(2, 115250, 600000);\r\n        pizzeriasConfig[7][2] = PizzeriaConfig(3, 198750, 780000);\r\n        pizzeriasConfig[7][3] = PizzeriaConfig(4, 307000, 1000000);\r\n        pizzeriasConfig[7][4] = PizzeriaConfig(5, 444500, 1250000);\r\n    }\r\n\r\n    function buyBricks(address partner) external payable nonReentrant{\r\n        uint256 bricks = msg.value / 4e13;\r\n        require(bricks >= 1, \"Zero bricks\");\r\n\r\n        totalInvested += msg.value;\r\n\r\n        if (users[msg.sender].lastOvenSync == 0){\r\n            totalInvestors += 1;\r\n            partner = users[partner].lastOvenSync == 0 ? address(0) : partner;\r\n            users[partner].refsTotal++;\r\n            users[msg.sender].partner = partner;\r\n            users[msg.sender].oven = ovensConfig[0];\r\n            users[msg.sender].hrsFarm = 0;\r\n            users[msg.sender].lastOvenSync = block.timestamp;\r\n        }\r\n\r\n        partner = users[msg.sender].partner;\r\n        uint256 referralBricks = (bricks * REFERRAL_BRICKS_PERCENT) / 100;\r\n        uint256 referralPizza = (bricks * BRICKS_PER_PIZZA * REFERRAL_PIZZA_PERCENT) / 100;\r\n\r\n        if (partner != address(0)){\r\n            users[partner].bricks += referralBricks; \r\n            users[partner].pizza += referralPizza;\r\n            users[partner].refsDeps += referralBricks; \r\n        }\r\n        else{\r\n            // FEE\r\n            users[owner].bricks += referralBricks / 2;\r\n            users[owner].pizza += referralPizza / 2;\r\n            users[owner].refsDeps += referralBricks / 2;\r\n\r\n            users[manager].bricks += referralBricks / 4;\r\n            users[manager].pizza += referralPizza / 4;\r\n            users[manager].refsDeps += referralBricks / 4;\r\n\r\n            users[manager2].bricks += referralBricks / 4;\r\n            users[manager2].pizza += referralPizza / 4;\r\n            users[manager2].refsDeps += referralBricks / 4;\r\n        }\r\n\r\n        // FEE\r\n        uint256 moneyFee = (msg.value * FEE_PERCENT) / 100;\r\n        payable(owner).transfer(moneyFee / 2);\r\n        payable(manager).transfer(moneyFee / 4); \r\n        payable(manager2).transfer(moneyFee / 4); \r\n        users[msg.sender].bricks += bricks;\r\n    }\r\n\r\n    function withdrawMoney(uint256 amount) external nonReentrant{\r\n        require(amount >= 100, \"Invalid amount\"); \r\n        \r\n        uint256 real = amount * 4e11;\r\n        users[msg.sender].pizza -= amount;\r\n\r\n        (bool success, ) = payable(msg.sender).call{value: real}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n\r\n    function getTotalPizzaPerHour(address user) public view returns (uint256) {\r\n        uint256 totalPizzaPerHour = 0;\r\n\r\n        for (uint i = 0; i < users[user].pizzerias.length; i++) {            \r\n            totalPizzaPerHour += users[user].pizzerias[i].pizzaPerHour;\r\n        }\r\n        \r\n        return totalPizzaPerHour;\r\n    }\r\n\r\n    function _syncOven(address user) internal{\r\n        require(users[user].lastOvenSync > 0, \"User is not registered\");\r\n        uint256 yield = getTotalPizzaPerHour(user);\r\n\r\n        if (yield > 0){\r\n            uint256 hrs = (block.timestamp - users[msg.sender].lastOvenSync) / 3600;\r\n\r\n            if (hrs + users[msg.sender].hrsFarm > users[msg.sender].oven.maxHours){\r\n                hrs = users[msg.sender].oven.maxHours - users[msg.sender].hrsFarm;\r\n            }\r\n\r\n            uint256 pizza = hrs * yield;\r\n            uint256 bonusPercent = 0;\r\n\r\n            if (users[user].cookingSpeed.stage > 0) {\r\n                bonusPercent += users[user].cookingSpeed.bonusPercent;\r\n            }\r\n\r\n            pizza += (pizza * bonusPercent) / 100 / 100;\r\n            users[user].pizza += pizza;\r\n            users[user].hrsFarm += hrs;\r\n        }\r\n        users[user].lastOvenSync = block.timestamp;\r\n    }\r\n\r\n    function collectPizza() external {\r\n        _syncOven(msg.sender);\r\n        users[msg.sender].pizza += users[msg.sender].fridgePizza;\r\n        users[msg.sender].fridgePizza = 0;\r\n        users[msg.sender].hrsFarm = 0;\r\n    }\r\n    \r\n    function swapPizzaToBricks(uint256 amount) external {\r\n        require(amount >= BRICKS_PER_PIZZA, \"Invalid amount\");\r\n\r\n        users[msg.sender].pizza -= amount;\r\n        users[msg.sender].bricks += amount / BRICKS_PER_PIZZA;\r\n    }\r\n\r\n    function upgradePizzeria(uint8 level) external {\r\n        require(level < 8, \"Max pizzeria level\");\r\n\r\n        _syncOven(msg.sender);\r\n        uint8 stage = users[msg.sender].pizzerias[level].stage;\r\n\r\n        if (stage >= 5) {\r\n            revert(\"Max stage for upgrade\");\r\n        }\r\n\r\n        PizzeriaConfig memory pizzeria = pizzeriasConfig[level][stage];\r\n        users[msg.sender].bricks -= pizzeria.price;\r\n        users[msg.sender].pizzerias[level] = pizzeria;\r\n    }\r\n\r\n    function sellPizzerias() external {\r\n        uint256 totalPrice;\r\n        for (uint256 level = 0; level < users[msg.sender].pizzerias.length; level++){\r\n            uint256 stage = users[msg.sender].pizzerias[level].stage;\r\n\r\n            for (uint256 i = 0; i < stage; i++) {\r\n                totalPrice += pizzeriasConfig[level][i].price;\r\n            }\r\n        }\r\n        uint256 pizza = (totalPrice * 30) / 100 * BRICKS_PER_PIZZA;\r\n\r\n        if (pizza > 0){\r\n            _syncOven(msg.sender);\r\n            users[msg.sender].pizza += pizza;\r\n            delete users[msg.sender].pizzerias;\r\n            pizzeriasSold += 1;\r\n        }\r\n    }\r\n\r\n    function upgradeOven() external {\r\n        _syncOven(msg.sender);\r\n        uint8 stage = users[msg.sender].oven.stage;\r\n\r\n        if (stage >= 8) {\r\n            revert(\"Max stage for upgrade\");\r\n        }\r\n\r\n        OvenConfig memory nextOven = ovensConfig[stage];\r\n        users[msg.sender].bricks -= nextOven.price;\r\n        users[msg.sender].oven = nextOven;\r\n    }\r\n\r\n    function getPizzerias(address user) external view returns (PizzeriaConfig[8] memory) {\r\n        return users[user].pizzerias;\r\n    }\r\n    \r\n    function upgradeCookingSpeed() external {\r\n        _syncOven(msg.sender);\r\n        uint8 stage = users[msg.sender].cookingSpeed.stage;\r\n\r\n        if (stage >= 5) {\r\n            revert(\"Max stage for upgrade\");\r\n        }\r\n\r\n        CookingSpeedConfig memory cookingSpeed = cookingSpeedConfig[stage];\r\n        users[msg.sender].bricks -= cookingSpeed.price;\r\n        users[msg.sender].cookingSpeed = cookingSpeed;\r\n    }\r\n\r\n    //Arena\r\n    function createDuel(uint256 duelType) external{\r\n        require(users[msg.sender].lastOvenSync > 0, \"User is not registered\");\r\n        require(duelType < 18, \"Incorrect type\");\r\n        address duelCreator = waitingDuels[duelType];\r\n        require(msg.sender != duelCreator, \"You are already in duel\");\r\n        require(users[msg.sender].bricks >= getDuelType(duelType), \"Insufficient bricks\");\r\n\r\n        users[msg.sender].bricks -= getDuelType(duelType);\r\n        duels[msg.sender].totalGames += 1;\r\n\r\n        if (duelCreator == address(0)) {\r\n            _createDuel(duelType);\r\n        } else {\r\n            _joinDuel(duelType, duelCreator);\r\n            _fightDuel(duelType, duelCreator);\r\n        }\r\n    }\r\n\r\n    function _randomNumber() internal view returns (uint256) {\r\n        uint256 randomnumber = uint256(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    block.timestamp +\r\n                        block.difficulty +\r\n                        ((\r\n                            uint256(keccak256(abi.encodePacked(block.coinbase)))\r\n                        ) / (block.timestamp)) +\r\n                        block.gaslimit +\r\n                        ((uint256(keccak256(abi.encodePacked(msg.sender)))) /\r\n                            (block.timestamp)) +\r\n                        block.number\r\n                )\r\n            )\r\n        );\r\n\r\n        return randomnumber % 100;\r\n    }\r\n\r\n    function getDuelType(uint256 duelType) internal pure returns (uint256) {\r\n        return [10, 15, 20, 30, 50, \r\n                100, 500, 1000, 1500, 2000, \r\n                4000, 6000, 8000, 10000, 15000,\r\n                20000, 30000, 50000][duelType];\r\n    }\r\n\r\n    function _createDuel(uint256 duelType) internal {\r\n        culinaryDuels[msg.sender][duelType].timestamp = block.timestamp;\r\n        culinaryDuels[msg.sender][duelType].player1 = msg.sender;\r\n        culinaryDuels[msg.sender][duelType].player2 = address(0);\r\n        culinaryDuels[msg.sender][duelType].winner = address(0);\r\n        culinaryDuels[msg.sender][duelType].bricks = getDuelType(duelType);\r\n        culinaryDuels[msg.sender][duelType].roll = 0;\r\n        waitingDuels[duelType] = msg.sender;\r\n    }\r\n\r\n    function _joinDuel(uint256 duelType, address duelCreator) internal {\r\n        culinaryDuels[duelCreator][duelType].timestamp = block.timestamp;\r\n        culinaryDuels[duelCreator][duelType].player2 = msg.sender;\r\n        waitingDuels[duelType] = address(0);\r\n    }\r\n\r\n    function _fightDuel(uint256 duelType, address duelCreator) internal {\r\n        uint256 random = _randomNumber();\r\n        uint256 wAmount = culinaryDuels[duelCreator][duelType].bricks * 2;\r\n        uint256 fee = (wAmount * FEE_PERCENT) / 100;\r\n\r\n        address winner = random < 50\r\n            ? culinaryDuels[duelCreator][duelType].player1\r\n            : culinaryDuels[duelCreator][duelType].player2;\r\n        address loser = random >= 50\r\n            ? culinaryDuels[duelCreator][duelType].player1\r\n            : culinaryDuels[duelCreator][duelType].player2;\r\n\r\n        users[winner].bricks += wAmount - fee;\r\n        culinaryDuels[duelCreator][duelType].winner = winner;\r\n        culinaryDuels[duelCreator][duelType].roll = random;\r\n\r\n        duels[winner].wins++;\r\n        duels[loser].loses++;\r\n\r\n        // FEE\r\n        users[owner].bricks += fee / 2;\r\n        users[manager].bricks += fee / 4;\r\n        users[manager2].bricks += fee / 4; \r\n    }\r\n\r\n    //Lottery\r\n    function isValidPrice(uint256 ticketPrice) public view returns (bool) {\r\n        for (uint256 i = 0; i < ticketsPrice.length; i++){\r\n            if (ticketsPrice[i] == ticketPrice){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n     function isValidParticipantsCount(uint256 count) public view returns (bool) {\r\n        for (uint256 i = 0; i < maxParticipants.length; i++) {\r\n            if (maxParticipants[i] == count) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function hasJoinedLottery(address participant, uint256 ticketPrice, uint256 participantsCount) public view returns (bool) {\r\n        address[] storage participants = waitingLottery[ticketPrice][participantsCount];\r\n        for (uint256 i = 0; i < participants.length; i++) {\r\n            if (participants[i] == participant) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getLotteryParticipantsCount(uint256 ticketPrice, uint256 participantsCount) public view returns (uint256){\r\n        return waitingLottery[ticketPrice][participantsCount].length;\r\n    }\r\n\r\n    function createLottery(uint256 ticketPrice, uint256 participantsCount) external{\r\n        require(users[msg.sender].lastOvenSync > 0, \"User is not registered\");\r\n        require(isValidPrice(ticketPrice), \"Invalid ticket price\");\r\n        require(isValidParticipantsCount(participantsCount), \"Invalid participants count\");\r\n        require(!hasJoinedLottery(msg.sender, ticketPrice, participantsCount), \"You are already in lottery\");\r\n        require(users[msg.sender].bricks >= ticketPrice, \"Insufficient bricks\");\r\n\r\n        address[] storage participants = waitingLottery[ticketPrice][participantsCount];\r\n        if (participants.length == 0) {\r\n            require(activeLotteryCount < MAX_ACTIVE_LOTTERIES, \"Max. active lotteries reached\");\r\n            activeLotteryCount++;\r\n        }\r\n\r\n        users[msg.sender].bricks -= ticketPrice;\r\n        lotteries[msg.sender].totalGames += 1;\r\n        participants.push(msg.sender);\r\n\r\n        if (participants.length == participantsCount) {\r\n            uint256 randomNumber = _randomNumber();\r\n            address winner = participants[randomNumber % participantsCount];\r\n\r\n            uint256 wAmount = participantsCount * ticketPrice * BRICKS_PER_PIZZA;\r\n            uint256 fee = (wAmount * FEE_PERCENT) / 100;\r\n            users[winner].pizza += wAmount - fee;\r\n\r\n            // FEE\r\n            users[owner].pizza += fee / 2;\r\n            users[manager].pizza += fee / 4;  \r\n            users[manager2].pizza += fee / 4;\r\n\r\n            lotteries[winner].wins++;\r\n            for (uint256 i = 0; i < participants.length; i++){\r\n                if (participants[i] != winner){\r\n                    lotteries[participants[i]].loses++;\r\n                }\r\n            }\r\n\r\n            // Reset the lottery\r\n            delete waitingLottery[ticketPrice][participantsCount];\r\n            activeLotteryCount--;\r\n        }\r\n    }\r\n\r\n    function getActiveLotteries() external view returns (ActiveLottery[] memory) {\r\n        ActiveLottery[] memory activeLotteries = new ActiveLottery[](activeLotteryCount);\r\n        uint256 index = 0;\r\n        \r\n        for (uint256 i = 0; i < ticketsPrice.length; i++) {\r\n            for (uint256 j = 0; j < maxParticipants.length; j++) {\r\n                address[] memory participants = waitingLottery[ticketsPrice[i]][maxParticipants[j]];\r\n                if (participants.length != 0){\r\n                    activeLotteries[index] = ActiveLottery({\r\n                        ticketPrice: ticketsPrice[i],\r\n                        participantsCount: maxParticipants[j],\r\n                        participants: participants\r\n                    });\r\n                    index++;\r\n                }                \r\n            }\r\n        }\r\n        \r\n        return activeLotteries;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"activeLotteryCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"buyBricks\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectPizza\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cookingSpeedConfig\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bonusPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duelType\",\"type\":\"uint256\"}],\"name\":\"createDuel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participantsCount\",\"type\":\"uint256\"}],\"name\":\"createLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"culinaryDuels\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bricks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"duels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalGames\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loses\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveLotteries\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participantsCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"}],\"internalType\":\"struct PizzaBrick.ActiveLottery[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participantsCount\",\"type\":\"uint256\"}],\"name\":\"getLotteryParticipantsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPizzerias\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"pizzaPerHour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct PizzaBrick.PizzeriaConfig[8]\",\"name\":\"\",\"type\":\"tuple[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalPizzaPerHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participantsCount\",\"type\":\"uint256\"}],\"name\":\"hasJoinedLottery\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"isValidParticipantsCount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"}],\"name\":\"isValidPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lotteries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalGames\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loses\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ovensConfig\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pizzeriasConfig\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"pizzaPerHour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPizzerias\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapPizzaToBricks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeCookingSpeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeOven\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"upgradePizzeria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pizza\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bricks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fridgePizza\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refsDeps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refsTotal\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bonusPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct PizzaBrick.CookingSpeedConfig\",\"name\":\"cookingSpeed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct PizzaBrick.OvenConfig\",\"name\":\"oven\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"hrsFarm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastOvenSync\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"waitingDuels\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"waitingLottery\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PizzaBrick", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://43455498d6d9064b496a47ebd23e1fbb949cb109902e7ffc0d339fc326ca7c4b"}