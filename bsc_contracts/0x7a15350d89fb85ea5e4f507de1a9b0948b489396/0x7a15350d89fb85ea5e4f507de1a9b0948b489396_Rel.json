{"SourceCode": "contract Rel {\r\n    event Bind(address indexed user, address indexed parent);\r\n    event Upgrade(address indexed user, uint256 indexed level);\r\n\r\n    address public pool;\r\n\r\n    mapping(address => address) public parents;\r\n\r\n    mapping(address => uint256) public levelPerUser;\r\n\r\n    mapping(address => mapping(uint256 => uint256)) public countPerLevelPerUser;\r\n\r\n    constructor(address genesis) {\r\n        parents[genesis] = address(1);\r\n        emit Bind(genesis, address(1));\r\n    }\r\n\r\n    function bind(address parent) external {\r\n        require(parents[msg.sender] == address(0), \"already bind\");\r\n        require(parents[parent] != address(0), \"parent invalid\");\r\n        parents[msg.sender] = parent;\r\n        countPerLevelPerUser[parent][0]++;\r\n        emit Bind(msg.sender, parent);\r\n    }\r\n\r\n    function setPool(address adr) external {\r\n        require(pool == address(0) && adr != address(0));\r\n        pool = adr;\r\n    }\r\n\r\n    function setUserLevel(address user, uint256 newLevel) external {\r\n        require(msg.sender == pool, \"not allowed\");\r\n        levelPerUser[user] = newLevel;\r\n        countPerLevelPerUser[user][newLevel - 1] = 5;\r\n        emit Upgrade(user, newLevel);\r\n    }\r\n\r\n    function upgrade(address user) external {\r\n        require(msg.sender == pool, \"not allowed\");\r\n        uint256 oldLevel = levelPerUser[user];\r\n        if (oldLevel == 0) {\r\n            uint256 newLevel = 1;\r\n            levelPerUser[user] = newLevel;\r\n            emit Upgrade(user, newLevel);\r\n            address p = parents[user];\r\n            while (p != address(0) && p != address(1)) {\r\n                countPerLevelPerUser[p][oldLevel]--;\r\n                countPerLevelPerUser[p][newLevel]++;\r\n                (oldLevel, newLevel) = getUserNewLevel(p);\r\n                if (newLevel > oldLevel) {\r\n                    levelPerUser[p] = newLevel;\r\n                    emit Upgrade(p, newLevel);\r\n                    p = parents[p];\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getUserNewLevel(\r\n        address adr\r\n    ) private view returns (uint256 oldLevel, uint256 newLevel) {\r\n        oldLevel = levelPerUser[adr];\r\n        newLevel = oldLevel;\r\n        if (oldLevel >= 1 && oldLevel <= 4) {\r\n            uint256 s = countPerLevelPerUser[adr][5];\r\n            for (uint256 i = 4; i >= oldLevel; --i) {\r\n                s += countPerLevelPerUser[adr][i];\r\n                if (i == 4 && s >= 3) { //5\r\n                    newLevel = 5;\r\n                } else if (i == 3 && s >= 3) {\r\n                    newLevel = 4;\r\n                } else if (i == 2 && s >= 5) {\r\n                    newLevel = 3;\r\n                } else if (i == 1 && s >= 5) {\r\n                    newLevel = 2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"genesis\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"}],\"name\":\"Bind\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"}],\"name\":\"bind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"countPerLevelPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"levelPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"parents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newLevel\",\"type\":\"uint256\"}],\"name\":\"setUserLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Rel", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008275e7e6525953e4e85c1500374ebfde842d130e", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://da43cc1ec1f3d63b0aed909405a7702459a6198ede204f3a2996564e1589ced3"}