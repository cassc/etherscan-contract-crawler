{"SourceCode": "// Website: www.feitian.site\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {return payable(msg.sender);}\r\n    function _msgData() internal view virtual returns (bytes memory) {return msg.data;}\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n   \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n     function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setShare(address shareholder) external;\r\n    function process(uint256 gas) external;\r\n    function addUsdtAmount(uint256[2] calldata amounts) external;\r\n}\r\n\r\ninterface ITradingContest {\r\n    function buyTokens(address user, uint256 amount) external;\r\n    function addUsdtAmount(uint256 amount) external;\r\n}\r\n\r\ninterface IRewardVault {\r\n    function rewardTo(address to, uint amount) external;\r\n}\r\n\r\ncontract RewardVault is Ownable {\r\n    address public rewardToken;\r\n\r\n    constructor(address _rewardToken) {\r\n        rewardToken = _rewardToken;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function rewardTo(address to, uint amount) external onlyOwner {\r\n        if (IERC20(rewardToken).balanceOf(address(this)) < amount) return;\r\n        IERC20(rewardToken).transfer(to, amount);\r\n    }\r\n}\r\n\r\ncontract FT is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) public ammPairs;\r\n\r\n    mapping(address => bool) private _updated;\r\n    mapping (address => uint256) public _shareBlock;\r\n\r\n    mapping (address => address) public _inviter;\r\n    mapping (address => mapping (address => bool)) public _hasAirdroped;\r\n   \r\n    uint8 private _decimals = 18;\r\n    uint256 private _tTotal;\r\n    uint256 public supply = 10000000 * (10 ** 8) * (10 ** 18);\r\n\r\n    string private _name = \"FeiTian\";\r\n    string private _symbol = \"FT\";\r\n\r\n    uint256 buyMarketFee = 100;\r\n    uint256 buyBuyBackFee = 50;\r\n    uint256 buyBuyPEQIFee = 0;\r\n    uint256 buyTechnologyFee = 50;\r\n    uint256 buyLpFee = 0;\r\n    uint256 buyNftFee = 0;\r\n    uint256 buyTradingFee = 0;\r\n\r\n    uint256 sellMarketFee = 100;\r\n    uint256 sellBuyBackFee = 50;\r\n    uint256 sellBuyPEQIFee = 0;\r\n    uint256 sellTechnologyFee = 50;\r\n    uint256 sellLpFee = 100;\r\n    uint256 sellNftFee = 100;\r\n    uint256 sellTradingFee = 100;\r\n    uint256 sellTechnologyFeeAccumulate = 50;\r\n    uint256 sellBuyBackFeeAccumulate = 50;\r\n    uint256 sellBuyPEQIFeeAccumulate = 100;\r\n    uint256 sellLpFeeAccumulate = 600;\r\n    uint256 sellTradingFeeAccumulate = 700;\r\n\r\n    uint256 buyFee = 200;\r\n    uint256 sellFee = 500;\r\n    uint256 feeUnit = 10000;\r\n\r\n    uint256 marketAmount;\r\n    uint256 buyBackAmount;\r\n    uint256 buyPEQIAmount;\r\n    uint256 technologyAmount;\r\n    uint256 lpAmount;\r\n    uint256 nftAmount;\r\n    uint256 tradingAmount;\r\n    uint256 totalAmount;\r\n    \r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    IERC20 public uniswapV2Pair;\r\n    address public wbnb;\r\n    address constant rootAddress = address(0x000000000000000000000000000000000000dEaD);\r\n    \r\n    address distributorAddress;\r\n    address tradingContestAddress;\r\n    address public rewardValut;\r\n    address router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    address public initPoolAddress = 0xEA41C25ECf1c89b60F53ccd7677D5B183cb397fB;\r\n    address public initOwner = 0x4dCf8F33575635d218eB9Dc38a0eEe31a90f69C5;\r\n    address public marketAddress = 0x2E7120Db19B0361ed8B0d03c4971D86B3e1a786A;\r\n    address public buyBackAddress = 0x82B43FC6DB9366a05CA26A3A5FD42eb4143DC9E0;\r\n    address public buyPEQIAddress = 0x2Ee8137855908e0938eC9279981Add9C7f681162;\r\n    address public technologyAddress = 0xCd21b3db1d9a75Dc3C63bDE4b28bab9e78faBe05;\r\n\r\n    bool public tradingContestOpen = true;\r\n\r\n    mapping (uint256 => uint256) tradingCount;\r\n    uint256 tradingAmountLimit = 1000 * (10 ** 8) * (10 ** 18);\r\n    uint256 tradingCountLimit = 8;\r\n    uint256 addTradingLimit = 1000 * (10 ** 8) * (10 ** 18);\r\n\r\n    bool openTransaction;\r\n    uint256 launchedBlock;\r\n    uint256 private firstBlock = 6;\r\n    uint256 private secondBlock = 20;\r\n    uint256 private thirdBlock = 20;\r\n\r\n    address private fromAddress;\r\n    address private toAddress;\r\n\r\n    uint256 transitionUnit = 10 ** 36;\r\n    uint256 public interval = 24 * 60 * 60;\r\n    uint256 public protectionT = 1687449600;\r\n    uint256 public protectionP;\r\n    uint256 public protectionR = 4;\r\n    bool public isProtection = true;\r\n\r\n    uint256 public inviteCondition = 1000 * (10 ** 4) * (10 ** 18);\r\n\r\n    uint256 distributorGas = 500000;\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = supply / 10000;\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n    \r\n    constructor () {\r\n        rewardValut = address(new RewardVault(address(this)));\r\n\r\n        _tTotal = supply;\r\n        \r\n        _isExcludedFromFee[initOwner] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[rewardValut] = true;\r\n        _isExcludedFromFee[rootAddress] = true;\r\n        _isExcludedFromFee[initPoolAddress] = true;\r\n        _isExcludedFromFee[marketAddress] = true;\r\n        _isExcludedFromFee[buyBackAddress] = true;\r\n        _isExcludedFromFee[buyPEQIAddress] = true;\r\n        _isExcludedFromFee[technologyAddress] = true;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        address bnbPair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        wbnb = _uniswapV2Router.WETH();\r\n\r\n        uniswapV2Pair = IERC20(bnbPair);\r\n        ammPairs[bnbPair] = true;\r\n\r\n        _tOwned[initOwner] = 9000000 * (10 ** 8) * (10 ** 18);\r\n        _tOwned[rewardValut] = 1000000 * (10 ** 8) * (10 ** 18);\r\n\r\n        emit Transfer(address(0), initOwner, 9000000 * (10 ** 8) * (10 ** 18));\r\n        emit Transfer(address(0), rewardValut, 1000000 * (10 ** 8) * (10 ** 18));\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function getFee(address from, uint256 currentP) public view returns(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256) {\r\n        if (ammPairs[from] == true) {\r\n            return (buyMarketFee,buyBuyBackFee,buyBuyPEQIFee,buyTechnologyFee,buyLpFee,buyNftFee,buyTradingFee,buyFee);\r\n        } else {\r\n            uint256 _sellTechnologyFee = sellTechnologyFee;\r\n            uint256 _sellBuyBackFee = sellBuyBackFee;\r\n            uint256 _sellBuyPEQIFee = sellBuyPEQIFee;\r\n            uint256 _sellLpFee = sellLpFee;\r\n            uint256 _sellTradingFee = sellTradingFee;\r\n            uint256 _sellFee = sellFee;\r\n            if(currentP < protectionP.mul(100 - protectionR).div(100)){\r\n                _sellTechnologyFee = _sellTechnologyFee.add(sellTechnologyFeeAccumulate);\r\n                _sellBuyBackFee = _sellBuyBackFee.add(sellBuyBackFeeAccumulate);\r\n                _sellBuyPEQIFee = _sellBuyPEQIFee.add(sellBuyPEQIFeeAccumulate);\r\n                _sellLpFee = _sellLpFee.add(sellLpFeeAccumulate);\r\n                _sellTradingFee = _sellTradingFee.add(sellTradingFeeAccumulate);\r\n                _sellFee = sellFee.add(sellTechnologyFeeAccumulate).add(sellBuyBackFeeAccumulate).add(sellBuyPEQIFeeAccumulate).add(sellLpFeeAccumulate).add(sellTradingFeeAccumulate);\r\n            }\r\n            return (sellMarketFee,_sellBuyBackFee,_sellBuyPEQIFee,_sellTechnologyFee,_sellLpFee,sellNftFee,_sellTradingFee,_sellFee);\r\n        }\r\n    }\r\n\r\n    struct Param{\r\n        bool takeFee;\r\n        uint256 tTransferAmount;\r\n        uint256 tContract;\r\n    }\r\n\r\n     function _initParam(uint256 amount,Param memory param, address from, uint256 currentBlock) private {\r\n        uint256 currentP = (IERC20(wbnb).balanceOf(address(uniswapV2Pair))).mul(transitionUnit).div(balanceOf(address(uniswapV2Pair)));\r\n        if (currentP > protectionP) {\r\n            protectionP = currentP;\r\n        }\r\n        (uint256 marketFee,uint256 buyBackFee,uint256 buyPEQIFee,uint256 technologyFee,uint256 lpFee,uint256 nftFee,,uint256 totalFee) = getFee(from, currentP);\r\n        if (currentBlock - launchedBlock < firstBlock + 1) {\r\n            param.tContract = amount * 9000 / feeUnit;\r\n        } else if (currentBlock - launchedBlock < secondBlock + 1) {\r\n            if (tradingCount[currentBlock] > tradingCountLimit) {\r\n                param.tContract = amount * 9000 / feeUnit;\r\n            }\r\n        } else {\r\n            param.tContract = amount * (totalFee) / feeUnit;\r\n        }\r\n        param.tTransferAmount = amount.sub(param.tContract);\r\n\r\n        totalAmount = totalAmount.add(param.tContract);\r\n        marketAmount = marketAmount.add(amount * (marketFee) / feeUnit);\r\n        buyBackAmount = buyBackAmount.add(amount * (buyBackFee) / feeUnit);\r\n        buyPEQIAmount = buyPEQIAmount.add(amount * (buyPEQIFee) / feeUnit);\r\n        technologyAmount = technologyAmount.add(amount * (technologyFee) / feeUnit);\r\n        lpAmount = lpAmount.add(amount * (lpFee) / feeUnit);\r\n        nftAmount = nftAmount.add(amount * (nftFee) / feeUnit);\r\n        tradingAmount = totalAmount.sub(marketAmount).sub(buyBackAmount).sub(buyPEQIAmount).sub(technologyAmount).sub(lpAmount).sub(nftAmount);\r\n    }\r\n\r\n    function _takeFee(Param memory param,address from) private {\r\n        if( param.tContract > 0 ){\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(param.tContract);\r\n            emit Transfer(from, address(this), param.tContract);\r\n        }\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function shouldSwapBack(address to) internal view returns (bool) {\r\n        return ammPairs[to] == true \r\n        && !inSwap\r\n        && swapEnabled\r\n        && balanceOf(address(this)) >= swapThreshold;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        _allowances[address(this)][address(uniswapV2Router)] = swapThreshold;\r\n        \r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = wbnb;\r\n        path[2] = usdt;\r\n        uint256 balanceBefore = IERC20(usdt).balanceOf(address(this));\r\n\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            swapThreshold,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountUsdt = IERC20(usdt).balanceOf(address(this)).sub(balanceBefore);\r\n        uint256 amountToMarket = amountUsdt.mul(marketAmount).div(totalAmount);\r\n        uint256 amountToBuyBack = amountUsdt.mul(buyBackAmount).div(totalAmount);\r\n        uint256 amountToBuyPEQI = amountUsdt.mul(buyPEQIAmount).div(totalAmount);\r\n        uint256 amountToTechnology = amountUsdt.mul(technologyAmount).div(totalAmount);\r\n        uint256 amountToLp = amountUsdt.mul(lpAmount).div(totalAmount);\r\n        uint256 amountToNft = amountUsdt.mul(nftAmount).div(totalAmount);\r\n        uint256 amountToDistributor = amountToLp.add(amountToNft);\r\n        uint256 amountToTrading = amountUsdt.sub(amountToMarket).sub(amountToBuyBack).sub(amountToBuyPEQI);\r\n        amountToTrading = amountToTrading.sub(amountToTechnology).sub(amountToDistributor);\r\n\r\n        if (amountToMarket > 0) {\r\n            IERC20(usdt).transfer(marketAddress, amountToMarket);\r\n            marketAmount = marketAmount.sub(swapThreshold.mul(marketAmount).div(totalAmount));\r\n        }\r\n        if (amountToBuyBack > 0) {\r\n            IERC20(usdt).transfer(buyBackAddress, amountToBuyBack);\r\n            buyBackAmount = buyBackAmount.sub(swapThreshold.mul(buyBackAmount).div(totalAmount));\r\n        }\r\n        if (amountToBuyPEQI > 0) {\r\n            IERC20(usdt).transfer(buyPEQIAddress, amountToBuyPEQI);\r\n            buyPEQIAmount = buyPEQIAmount.sub(swapThreshold.mul(buyPEQIAmount).div(totalAmount));\r\n        }\r\n        if (amountToTechnology > 0) {\r\n            IERC20(usdt).transfer(technologyAddress, amountToTechnology);\r\n            technologyAmount = technologyAmount.sub(swapThreshold.mul(technologyAmount).div(totalAmount));\r\n        }\r\n        if (amountToDistributor > 0) {\r\n            IERC20(usdt).transfer(distributorAddress, amountToDistributor);\r\n            lpAmount = lpAmount.sub(swapThreshold.mul(lpAmount).div(totalAmount));\r\n            nftAmount = nftAmount.sub(swapThreshold.mul(nftAmount).div(totalAmount));\r\n        }\r\n        if (amountToTrading > 0) {\r\n            IERC20(usdt).transfer(tradingContestAddress, amountToTrading);\r\n            if (tradingContestOpen == true) {\r\n                ITradingContest(tradingContestAddress).addUsdtAmount(amountToTrading);\r\n            }\r\n            tradingAmount = tradingAmount.sub(swapThreshold.mul(tradingAmount).div(totalAmount));\r\n        }\r\n        totalAmount = totalAmount.sub(swapThreshold);\r\n\r\n        uint256[2] memory _amounts = [amountToLp, amountToNft];\r\n        IDividendDistributor(distributorAddress).addUsdtAmount(_amounts);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"ERC20: transfer amount must be greater than zero\");\r\n\r\n        if (!_isExcludedFromFee[from] && ammPairs[to] && !inSwap) {\r\n            uint256 fromBalance = balanceOf(from).mul(99).div(100);\r\n            if (fromBalance < amount) {\r\n                amount = fromBalance;\r\n            }\r\n        }\r\n\r\n        uint256 currentBlock = block.number;\r\n        bool takeFee;\r\n        Param memory param;\r\n        param.tTransferAmount = amount;\r\n\r\n        if( ammPairs[to] == true && IERC20(to).totalSupply() == 0 ){\r\n            require(from == initPoolAddress,\"Not allow init\");\r\n        }\r\n\r\n        if(inSwap == true || _isExcludedFromFee[from] == true || _isExcludedFromFee[to] == true){\r\n            return _tokenTransfer(from,to,amount,param); \r\n        }\r\n\r\n        require(openTransaction == true,\"Not allow\");\r\n\r\n        (, bool isRemoveLp) = judgeRemoveOrAddLp(from, to);\r\n        if (ammPairs[from] == true && !isRemoveLp) {\r\n            processBuyRewards(to, amount);\r\n        }\r\n\r\n        if (ammPairs[from] == true) {\r\n            require(isContract(to) == false, \"Contract limit\");\r\n            if (currentBlock - launchedBlock < secondBlock + 1) {\r\n                tradingCount[currentBlock] = tradingCount[currentBlock] + 1;\r\n                require(IERC20(usdt).balanceOf(to) > 0 , \"Insufficient USDT\");\r\n            }\r\n            if (currentBlock - launchedBlock < thirdBlock + 1) {\r\n                require(amount <= tradingAmountLimit.add((currentBlock - launchedBlock).mul(addTradingLimit)), \"Trading amount limit exceeded\");\r\n            }\r\n        }\r\n\r\n        if(ammPairs[to] == true || ammPairs[from] == true){\r\n            takeFee = true;\r\n        }\r\n\r\n        if(shouldSwapBack(to)){ swapBack(); }\r\n\r\n        if(isProtection == true && block.timestamp.sub(protectionT) >= interval){_resetProtection();}\r\n\r\n        param.takeFee = takeFee;\r\n        if( takeFee == true ){\r\n            _initParam(amount, param, from, currentBlock);\r\n        }\r\n        \r\n        _tokenTransfer(from,to,amount,param);\r\n\r\n        if (from != address(uniswapV2Pair) && to != address(uniswapV2Pair)) {\r\n            if (!_hasAirdroped[from][to] && amount >= inviteCondition) {\r\n                _hasAirdroped[from][to] = true;\r\n\r\n                if (_hasAirdroped[to][from] && _inviter[from] == address(0)) {\r\n                    _inviter[from] = to;\r\n                }\r\n            }  \r\n        }\r\n\r\n        if (tradingContestOpen == true && ammPairs[from] == true && !isRemoveLp) {\r\n            uint256 bnbAmount = amount.mul(IERC20(wbnb).balanceOf(address(uniswapV2Pair))).div(balanceOf(address(uniswapV2Pair)));\r\n            ITradingContest(tradingContestAddress).buyTokens(to, bnbAmount);\r\n        }\r\n\r\n        if( address(uniswapV2Pair) != address(0) ){\r\n            if (fromAddress == address(0)) fromAddress = from;\r\n            if (toAddress == address(0)) toAddress = to;\r\n            if ( !ammPairs[fromAddress] ) { try IDividendDistributor(distributorAddress).setShare(fromAddress) {} catch {} }\r\n            if ( !ammPairs[toAddress] ) { try IDividendDistributor(distributorAddress).setShare(toAddress) {} catch {} }\r\n            fromAddress = from;\r\n            toAddress = to;\r\n\r\n            if (\r\n                from != address(this) \r\n                && IERC20(usdt).balanceOf(distributorAddress) > 0 \r\n                && uniswapV2Pair.totalSupply() > 0 ) {\r\n\r\n                try IDividendDistributor(distributorAddress).process(distributorGas) {} catch {}\r\n            }\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount,Param memory param) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(param.tTransferAmount);\r\n        emit Transfer(sender, recipient, param.tTransferAmount);\r\n        if(param.takeFee == true){\r\n            _takeFee(param,sender);\r\n        }\r\n    }\r\n\r\n    function processBuyRewards(address from, uint amount) private {\r\n        if (_inviter[from] != address(0)) {\r\n            IRewardVault(rewardValut).rewardTo(_inviter[from], amount * 2 / 100);\r\n            if (_inviter[_inviter[from]] != address(0)) {\r\n                IRewardVault(rewardValut).rewardTo(_inviter[_inviter[from]], amount * 3 / 100);\r\n            }\r\n        }\r\n    }\r\n\r\n    function judgeRemoveOrAddLp(address from, address to) private view returns (bool, bool) {\r\n        address token0 = IUniswapV2Pair(address(uniswapV2Pair)).token0();\r\n        (uint reserve0,,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();\r\n        uint balance0 = IERC20(token0).balanceOf(address(uniswapV2Pair));\r\n\r\n        if (ammPairs[from] == true && reserve0 > balance0) { // remove\r\n            return (false, true);\r\n        }\r\n\r\n        if (ammPairs[to] == true && reserve0 < balance0) { // add\r\n            return (true, false);\r\n        }\r\n        return (false, false);\r\n    }\r\n\r\n    function setProtection(bool _isProtection, uint256 _protectionR, uint256 _protectionT) external onlyOwner {\r\n        isProtection = _isProtection;\r\n        protectionR = _protectionR;\r\n        protectionT = _protectionT;\r\n    }\r\n\r\n    function resetProtection() external onlyOwner {\r\n        protectionT = block.timestamp;\r\n        protectionP = (IERC20(wbnb).balanceOf(address(uniswapV2Pair))).mul(transitionUnit).div(balanceOf(address(uniswapV2Pair)));\r\n    }\r\n\r\n    function _resetProtection() private {\r\n        uint256 time = block.timestamp;\r\n        if (time.sub(protectionT) >= interval) {\r\n            protectionT = protectionT.add(interval);\r\n            protectionP = (IERC20(wbnb).balanceOf(address(uniswapV2Pair))).mul(transitionUnit).div(balanceOf(address(uniswapV2Pair)));\r\n        }\r\n    }\r\n\r\n    function setExcludeFromFee(address account, bool _isExclude) external onlyOwner {\r\n        _isExcludedFromFee[account] = _isExclude;\r\n    }\r\n\r\n    function setOpenTransaction() external onlyOwner {\r\n        require(openTransaction == false, \"Already opened\");\r\n        openTransaction = true;\r\n        launchedBlock = block.number;\r\n    }\r\n\r\n    function setAddress(address _marketAddress, address _buyBackAddress) external onlyOwner{\r\n        marketAddress = _marketAddress;\r\n        buyBackAddress = _buyBackAddress;\r\n    }\r\n\r\n    function setDistributorAddress(address _distributorAddress) external onlyOwner {\r\n        distributorAddress = _distributorAddress;\r\n    }\r\n\r\n    function setTradingContestOpen(bool _tradingContestOpen) external {\r\n        require(initOwner == address(msg.sender), \"Not owner\");\r\n        tradingContestOpen = _tradingContestOpen;\r\n    }\r\n\r\n    function setTradingContestAddress(address _tradingContestAddress) external {\r\n        require(initOwner == address(msg.sender), \"Not owner\");\r\n        tradingContestAddress = _tradingContestAddress;\r\n    }\r\n\r\n    function setTradingLimit(uint256 _tradingAmountLimit, uint256 _tradingCountLimit, uint256 _addTradingLimit) external onlyOwner{\r\n        tradingAmountLimit = _tradingAmountLimit;\r\n        tradingCountLimit = _tradingCountLimit;\r\n        addTradingLimit = _addTradingLimit;\r\n    }\r\n\r\n    function setInviteCondition(uint256 _inviteCondition) external onlyOwner {\r\n        inviteCondition = _inviteCondition;\r\n    }\r\n\r\n    function setBlocks(uint256 _firstBlock, uint256 _secondBlock, uint256 _thirdBlock) external onlyOwner {\r\n        firstBlock = _firstBlock;\r\n        secondBlock = _secondBlock;\r\n        thirdBlock = _thirdBlock;\r\n    }\r\n\r\n    function setAmmPair(address pair,bool hasPair) external onlyOwner {\r\n        ammPairs[pair] = hasPair;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_hasAirdroped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_shareBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPEQIAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentP\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviteCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isProtection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardValut\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyBackAddress\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasPair\",\"type\":\"bool\"}],\"name\":\"setAmmPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_thirdBlock\",\"type\":\"uint256\"}],\"name\":\"setBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributorAddress\",\"type\":\"address\"}],\"name\":\"setDistributorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExclude\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inviteCondition\",\"type\":\"uint256\"}],\"name\":\"setInviteCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOpenTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isProtection\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_protectionR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protectionT\",\"type\":\"uint256\"}],\"name\":\"setProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tradingContestAddress\",\"type\":\"address\"}],\"name\":\"setTradingContestAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingContestOpen\",\"type\":\"bool\"}],\"name\":\"setTradingContestOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradingAmountLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tradingCountLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_addTradingLimit\",\"type\":\"uint256\"}],\"name\":\"setTradingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"technologyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingContestOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FT", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d7f4d95ddba535c5f0bb5699b861a3f9fc94b4067d6f6da5632e72d7bd200a18"}