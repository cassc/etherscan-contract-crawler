{"SourceCode": "pragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n   \r\n    function isContract(address account) internal view returns (bool) {\r\n        \r\n        \r\n        \r\n\r\n        uint256 size;\r\n        \r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n   \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        \r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n   \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n   \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n   \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n   \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        \r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n   \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n   \r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        \r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n   \r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n   \r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        \r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            \r\n            if (returndata.length > 0) {\r\n                \r\n\r\n                \r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n   \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n   \r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n   \r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        \r\n        \r\n        \r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n   \r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n   \r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n   \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n   \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n   \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n   \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n   \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n   \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n   \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n   \r\n    constructor() public {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n   \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n   \r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n   \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n   \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n   \r\n    function totalSupply() external view returns (uint256);\r\n\r\n   \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n   \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n   \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n   \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n   \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n   \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n   \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @title SafeMathUint\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @title SafeMathInt\r\n * @dev Math operations for int256 with overflow safety checks.\r\n */\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n   \r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        \r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n   \r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        \r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        \r\n        return a / b;\r\n    }\r\n\r\n   \r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n   \r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n   \r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n   \r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        \r\n        \r\n        \r\n        \r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n   \r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        \r\n        \r\n        \r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { \r\n            \r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SociaPool is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathUint for uint256;\r\n    using SafeMathInt for int256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    string public name = \"SociaPool\";\r\n    string public symbol = \"S_P\";\r\n    uint8 public decimals = 18;\r\n\r\n    address public router;\r\n    address public factory;\r\n    address public dev;\r\n    address public token0;\r\n    address public token1;\r\n    address public rewardToken;\r\n\r\n    uint256 public constant magnitude = 2**128;\r\n    uint256 public magnifiedDividendPerShare;\r\n    uint256 public totalDividendsDistributed;\r\n    uint256 public totalSupply;\r\n    mapping(address => int256) public magnifiedDividendCorrections;\r\n    mapping(address => uint256) public withdrawnDividends;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => uint256) public totalWithdrawDistributed;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    constructor(\r\n        address token0_,\r\n        address token1_,\r\n        address router_,\r\n        address rewardToken_,\r\n        address dev_\r\n    ) public {\r\n        token0 = token0_;\r\n        token1 = token1_;\r\n        router = router_;\r\n        factory = IUniswapV2Router02(router).factory();\r\n        rewardToken = rewardToken_;\r\n        dev = dev_;\r\n    }\r\n\r\n    function _mint(address account, uint256 value) private {\r\n        balanceOf[account] = balanceOf[account].add(value);\r\n        totalSupply = totalSupply.add(value);\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\r\n            account\r\n        ].sub((magnifiedDividendPerShare.mul(value)).toInt256Safe());\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) private {\r\n        balanceOf[account] = balanceOf[account].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\r\n            account\r\n        ].add((magnifiedDividendPerShare.mul(value)).toInt256Safe());\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    function accumulativeDividendOf(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            magnifiedDividendPerShare\r\n                .mul(balanceOf[account])\r\n                .toInt256Safe()\r\n                .add(magnifiedDividendCorrections[account])\r\n                .toUint256Safe() / magnitude;\r\n    }\r\n\r\n    function withdrawableDividendOf(address _owner)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n    }\r\n\r\n    function _claim(address account) private {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(account);\r\n        if (_withdrawableDividend > 0) {\r\n            if (\r\n                IERC20(rewardToken).balanceOf(address(this)) >=\r\n                _withdrawableDividend\r\n            ) {\r\n                withdrawnDividends[account] = withdrawnDividends[account].add(\r\n                    _withdrawableDividend\r\n                );\r\n                totalWithdrawDistributed[account] = totalWithdrawDistributed[\r\n                    account\r\n                ].add(_withdrawableDividend);\r\n                IERC20(rewardToken).safeTransfer(\r\n                    account,\r\n                    _withdrawableDividend\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function claim() external {\r\n        _claim(_msgSender());\r\n    }\r\n\r\n    function claimByAdmin(address token_, address addr_, uint256 amount) public onlyOwner {\r\n        if (IERC20(token_).balanceOf(address(this)) > amount) {\r\n            IERC20(token_).safeTransfer(addr_, amount);\r\n        } else {\r\n            IERC20(token_).safeTransfer(addr_, IERC20(token_).balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    \r\n    function addLiquide(uint256 token0Amount, uint256 token1Amount) external {\r\n        IERC20(token0).transferFrom(\r\n            _msgSender(),\r\n            address(this),\r\n            token0Amount\r\n        );\r\n        IERC20(token1).transferFrom(\r\n            _msgSender(),\r\n            address(this),\r\n            token1Amount\r\n        );\r\n        uint256 initBalance0 = IERC20(token0).balanceOf(address(this));\r\n        uint256 initBalance1 = IERC20(token1).balanceOf(address(this));\r\n\r\n        IERC20(token0).approve(router, token0Amount);\r\n        IERC20(token1).approve(router, token1Amount);\r\n\r\n        (, , uint256 liquidity) = IUniswapV2Router02(router).addLiquidity(\r\n            token0,\r\n            token1,\r\n            token0Amount,\r\n            token1Amount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        uint256 newBalance0 = initBalance0.sub(\r\n            IERC20(token0).balanceOf(address(this))\r\n        );\r\n        uint256 newBalance1 = initBalance1.sub(\r\n            IERC20(token1).balanceOf(address(this))\r\n        );\r\n        if (newBalance0 < token0Amount) {\r\n            IERC20(token0).safeTransfer(\r\n                _msgSender(),\r\n                token0Amount.sub(newBalance0)\r\n            );\r\n        }\r\n        if (newBalance1 > token1Amount) {\r\n            IERC20(token1).safeTransfer(\r\n                _msgSender(),\r\n                token1Amount.sub(newBalance1)\r\n            );\r\n        }\r\n        _mint(_msgSender(), liquidity);\r\n    }\r\n\r\n    \r\n    function addLiquideWithLP(uint256 lpAmount) external {\r\n        address pair = IUniswapV2Factory(factory).getPair(token0, token1);\r\n        IERC20(pair).transferFrom(_msgSender(), address(this), lpAmount);\r\n        _mint(_msgSender(), lpAmount);\r\n    }\r\n\r\n    \r\n    function removeLiquide(uint256 lpAmount) external {\r\n        require(\r\n            lpAmount <= balanceOf[_msgSender()],\r\n            \"SociaPool: not enough lp\"\r\n        );\r\n        _claim(_msgSender()); \r\n\r\n        uint256 initBalance0 = IERC20(token0).balanceOf(address(this));\r\n        uint256 initBalance1 = IERC20(token1).balanceOf(address(this)); \r\n\r\n        \r\n        address pair = IUniswapV2Factory(factory).getPair(token0, token1);\r\n        IERC20(pair).approve(router, lpAmount);\r\n        IUniswapV2Router02(router).removeLiquidity(\r\n            token0,\r\n            token1,\r\n            lpAmount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 newBalance0 = IERC20(token0).balanceOf(address(this)).sub(initBalance0);\r\n        uint256 newBalance1 = IERC20(token1).balanceOf(address(this)).sub(initBalance1);\r\n    \r\n        if (newBalance0 > 0) {\r\n            IERC20(token0).transfer(_msgSender(), newBalance0);\r\n        }\r\n\r\n        if (newBalance1 > 0) {\r\n            IERC20(token1).transfer(_msgSender(), newBalance1);\r\n        }\r\n\r\n        \r\n        _burn(_msgSender(), lpAmount);\r\n    }\r\n\r\n    function addMine(uint256 amount) external onlyOwner {\r\n        if (totalSupply == 0) {\r\n            \r\n            _mint(dev, 1);            \r\n        }\r\n        if (amount > 0) {\r\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n                (amount).mul(magnitude) / totalSupply\r\n            );\r\n            totalDividendsDistributed = totalDividendsDistributed.add(amount);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Socia is Ownable, IERC20 {\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    address public constant HOLE = address(0xdead);\r\n    uint256 public constant PRECISION = 1000;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _inviterRequireAmount; \r\n    mapping(address => address) private _inviter;\r\n    mapping(address => address[]) private _refers;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _blockList;\r\n\r\n    address private _usdt;\r\n\r\n    address private _router;\r\n    \r\n    mapping(address => bool) private _automatedMarketMakerPairs;\r\n\r\n    bool private _tradingEable = false;\r\n    \r\n    address private _buyMarket;\r\n    address private _root;\r\n    address private _sellMarket;\r\n    uint256 private _rebateRewardRequireAmount; \r\n    uint256 private _transferFee = 20; \r\n    address private _transferMarket;\r\n\r\n    uint256 private _minFlow; \r\n\r\n\r\n    event ExcludeFromFee(address indexed account, bool status);\r\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool status);\r\n\r\n    event AddBlackList(address indexed account, bool status);\r\n    event MultipleAddBlackList(address[] accounts, bool status);\r\n\r\n    event SetInviter(\r\n        address indexed user,\r\n        address indexed inviter,\r\n        uint256 timestamp\r\n    );\r\n\r\n    function inviterRequireAmount() public view returns (uint256) {\r\n        return _inviterRequireAmount;\r\n    }\r\n\r\n    function inviter(address account) public view returns (address) {\r\n        return _inviter[account];\r\n    }\r\n\r\n    function refers(address account) public view returns (address[] memory) {\r\n        return _refers[account];\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function blockList(address account) public view returns (bool) {\r\n        return _blockList[account];\r\n    }\r\n\r\n    function router() public view returns (address) {\r\n        return _router;\r\n    }\r\n\r\n    function defaultPair() public view returns (address) {\r\n        return\r\n            address(\r\n                IUniswapV2Factory(IUniswapV2Router02(_router).factory())\r\n                    .getPair(address(this), _usdt)\r\n            );\r\n    }\r\n\r\n    function automatedMarketMakerPairs(address pair)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _automatedMarketMakerPairs[pair];\r\n    }\r\n\r\n    function tradingEnable() public view returns (bool) {\r\n        return _tradingEable;\r\n    }\r\n\r\n    function buyMarket() public view returns (address) {\r\n        return _buyMarket;\r\n    }\r\n\r\n    function transferMarket() public view returns (address) {\r\n        return _transferMarket;\r\n    }\r\n\r\n    function sellMarket() public view returns (address) {\r\n        return _sellMarket;\r\n    }\r\n\r\n    function root() public view returns (address) {\r\n        return _root;\r\n    }\r\n\r\n    constructor(string memory name_, string memory symbol_, address usdt_, \r\n            address router_, address buyMarket_, address root_, address sellMarket_, address transferMarket_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _usdt = usdt_;\r\n        _router = router_;\r\n        _buyMarket = buyMarket_;\r\n        _root = root_;\r\n        _sellMarket = sellMarket_;\r\n        _transferMarket = transferMarket_;\r\n        _decimals = 18;\r\n\r\n        \r\n        address pair = IUniswapV2Factory(IUniswapV2Router02(_router).factory())\r\n            .createPair(address(this), _usdt);\r\n        \r\n        _setAutomatedMarketMakerPair(pair, true);\r\n\r\n        \r\n        \r\n        excludedFromFee(owner(), true);\r\n        _mint(_msgSender(), 1000 * 10**9 * 10**18);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"Socia: mint to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    \r\n    \r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        if (_automatedMarketMakerPairs[pair] == value) {\r\n            return;\r\n        }\r\n        _automatedMarketMakerPairs[pair] = value;\r\n    }\r\n\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    \r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    \r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    \r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"Socia: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"Socia: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"Socia: approve from the zero address\");\r\n        require(spender != address(0), \"Socia: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    \r\n    function _rebate(address user, uint256 amount) private {\r\n        address index = _inviter[user];\r\n        uint256 use = 0;\r\n        for (uint256 i = 1; i <= 8; i++) {\r\n            if (index == address(0)) {\r\n                break;\r\n            }\r\n            if (balanceOf(index) < _rebateRewardRequireAmount || _blockList[index])\r\n            {\r\n                index = _inviter[index];\r\n                continue;\r\n            }\r\n            uint256 rate = 5;\r\n            if (i == 1) {\r\n                rate = 12;\r\n            }\r\n            if (i == 2) {\r\n                rate = 8;\r\n            }\r\n            uint256 reward = amount.mul(rate).div(50);\r\n            _tokenTransfer(address(this), index, reward);\r\n            use = use.add(reward);\r\n            index = _inviter[index];\r\n        }\r\n        if (amount > use) {\r\n            uint256 tmp = amount.sub(use);\r\n            _tokenTransfer(address(this), _root, tmp);\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(\r\n            sender != address(0),\r\n            \"Socia: transfer sender the zero address\"\r\n        );\r\n        require(\r\n            recipient != address(0),\r\n            \"Socia: transfer recipient the zero address\"\r\n        );\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!_blockList[sender] && !_blockList[recipient], \"Socia: block\");\r\n\r\n        \r\n        \r\n        bool shouldSetInviter = balanceOf(recipient) == 0 &&\r\n            !sender.isContract() &&\r\n            !recipient.isContract() &&\r\n            _inviter[recipient] == address(0) &&\r\n            amount >= _inviterRequireAmount; \r\n\r\n        if (shouldSetInviter) {\r\n            _inviter[recipient] = sender;\r\n            _refers[sender].push(recipient);\r\n            emit SetInviter(recipient, sender, block.timestamp);\r\n        }\r\n\r\n        \r\n        uint256 flow = totalSupply().sub(balanceOf(HOLE));\r\n        bool takeFee = !_isExcludedFromFee[sender] &&\r\n            !_isExcludedFromFee[recipient];\r\n        bool isSwap = _automatedMarketMakerPairs[sender] ||\r\n            _automatedMarketMakerPairs[recipient];\r\n\r\n        if (isSwap && takeFee) {\r\n            require(_tradingEable, \"Socia: trading disable\");\r\n\r\n            uint256 fee = amount.mul(110).div(PRECISION);\r\n            uint256 destoryFee = fee.mul(20).div(110);\r\n            uint256 rewardLpFee = fee.mul(40).div(110);\r\n            if (flow.sub(destoryFee) < _minFlow) {\r\n                \r\n                destoryFee = flow.sub(_minFlow);\r\n            }\r\n            uint256 rebateFee = fee.mul(50).div(110);\r\n            fee = destoryFee.add(rewardLpFee).add(rebateFee);\r\n            _tokenTransfer(sender, address(this), fee);\r\n            _tokenTransfer(sender, recipient, amount.sub(fee));\r\n            \r\n            \r\n            if (destoryFee > 0) {\r\n                _tokenTransfer(address(this), HOLE, destoryFee);\r\n            }\r\n            if (_automatedMarketMakerPairs[sender]) {\r\n                _tokenTransfer(address(this), _buyMarket, rewardLpFee);\r\n            } else {\r\n                _tokenTransfer(address(this), _sellMarket, rewardLpFee);\r\n            }\r\n            address user = _automatedMarketMakerPairs[sender] ? recipient : sender;\r\n            _rebate(user, rebateFee);\r\n        } else {\r\n            if (takeFee) {\r\n                uint256 transferFee = amount.mul(_transferFee).div(PRECISION);\r\n                if (flow.sub(transferFee) < _minFlow) {\r\n                    \r\n                    transferFee = flow.sub(_minFlow);\r\n                }\r\n                if (transferFee > 0) {\r\n                    _tokenTransfer(sender, _transferMarket, transferFee);\r\n                    amount = amount.sub(transferFee);\r\n                }\r\n            }\r\n            _tokenTransfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function setTradingEable(bool status) public onlyOwner{\r\n        _tradingEable = status;\r\n    }\r\n\r\n    function setInviterRequireAmount(uint256 value) external onlyOwner {\r\n        _inviterRequireAmount = value;\r\n    }\r\n\r\n    function setBuyMarket(address buyMarket_) external onlyOwner {\r\n        _buyMarket = buyMarket_;\r\n    }\r\n\r\n    function setSellMarket(address sellMarket_) external onlyOwner {\r\n        _sellMarket = sellMarket_;\r\n    }\r\n\r\n    function setRoot(address root_) external onlyOwner {\r\n        _root = root_;\r\n    }  \r\n\r\n    function setTransferMarket(address transferMarket_) external onlyOwner {\r\n        _transferMarket = transferMarket_;\r\n    }\r\n\r\n    function addToBlockList(address account, bool status) public onlyOwner {\r\n        _blockList[account] = status;\r\n        emit AddBlackList(account, status);\r\n    }\r\n\r\n    function addMultipleToBlockList(address[] calldata accounts, bool status)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _blockList[accounts[i]] = status;\r\n        }\r\n        emit MultipleAddBlackList(accounts, status);\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFee(\r\n        address[] calldata accounts,\r\n        bool status\r\n    ) public onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = status;\r\n        }\r\n        emit ExcludeMultipleAccountsFromFees(accounts, status);\r\n    }\r\n\r\n    function excludedFromFee(address account, bool status) public onlyOwner {\r\n        _isExcludedFromFee[account] = status;\r\n        emit ExcludeFromFee(account, status);\r\n    }\r\n\r\n    function rebateRewardRequireAmount() public view returns (uint256) {\r\n        return _rebateRewardRequireAmount;\r\n    }\r\n\r\n    function setRebateRewardRequireAmount(uint256 rebateRewardRequireAmount_) public onlyOwner {\r\n        _rebateRewardRequireAmount = rebateRewardRequireAmount_;\r\n    }\r\n\r\n    function setTransferFee(uint256 transferFee_) public onlyOwner {\r\n        _transferFee = transferFee_;\r\n    }\r\n\r\n    function transferFee() public view returns (uint256) {\r\n        return _transferFee;\r\n    }\r\n\r\n    function minFlow() public view returns (uint256) {\r\n        return _minFlow;\r\n    }\r\n\r\n    function setMinFlow(uint256 minFlow_) public onlyOwner {\r\n        _minFlow = minFlow_;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"usdt_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyMarket_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"root_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellMarket_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transferMarket_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AddBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"MultipleAddBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetInviter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HOLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addMultipleToBlockList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addToBlockList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blockList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"excludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviterRequireAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFlow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebateRewardRequireAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"refers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMarket_\",\"type\":\"address\"}],\"name\":\"setBuyMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setInviterRequireAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minFlow_\",\"type\":\"uint256\"}],\"name\":\"setMinFlow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rebateRewardRequireAmount_\",\"type\":\"uint256\"}],\"name\":\"setRebateRewardRequireAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"root_\",\"type\":\"address\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMarket_\",\"type\":\"address\"}],\"name\":\"setSellMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setTradingEable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferFee_\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferMarket_\",\"type\":\"address\"}],\"name\":\"setTransferMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Socia", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000000a5892d2ef939abc33d1ea7fb5067b980464d4e5000000000000000000000000d06ab15a22afde1838d2bb4d872159090b2e6bb0000000000000000000000000d10492bfea9504e29984e9d65d74ec295df782f9000000000000000000000000000000000000000000000000000000000000dead00000000000000000000000000000000000000000000000000000000000000044b504c530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044b504c5300000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c4e948b68cdf13488dde73ce92b1d6804101311710a5593178b525121dde06fc"}