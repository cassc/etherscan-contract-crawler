{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n/*\r\n ____        __                 __                  __                  ___        __                    \r\n/\\  _`\\     /\\ \\__             /\\ \\                /\\ \\                /\\_ \\      /\\ \\                   \r\n\\ \\,\\L\\_\\   \\ \\ ,_\\     __     \\ \\ \\/'\\       __   \\ \\ \\___      ___   \\//\\ \\     \\_\\ \\      __    _ __  \r\n \\/_\\__ \\    \\ \\ \\/   /'__`\\    \\ \\ , <     /'__`\\  \\ \\  _ `\\   / __`\\   \\ \\ \\    /'_` \\   /'__`\\ /\\`'__\\\r\n   /\\ \\L\\ \\   \\ \\ \\_ /\\ \\L\\.\\_   \\ \\ \\\\`\\  /\\  __/   \\ \\ \\ \\ \\ /\\ \\L\\ \\   \\_\\ \\_ /\\ \\L\\ \\ /\\  __/ \\ \\ \\/ \r\n   \\ `\\____\\   \\ \\__\\\\ \\__/.\\_\\   \\ \\_\\ \\_\\\\ \\____\\   \\ \\_\\ \\_\\\\ \\____/   /\\____\\\\ \\___,_\\\\ \\____\\ \\ \\_\\ \r\n    \\/_____/    \\/__/ \\/__/\\/_/    \\/_/\\/_/ \\/____/    \\/_/\\/_/ \\/___/    \\/____/ \\/__,_ / \\/____/  \\/_/ \r\n\r\n\r\n   _____   _______   __  __   _____                 _____   _             _             __  __   _                \r\n  / ____| |__   __| |  \\/  | |_   _|               / ____| | |           | |           |  \\/  | (_)               \r\n | (___      | |    | \\  / |   | |      ______    | (___   | |_    __ _  | | __   ___  | \\  / |  _   _ __     ___ \r\n  \\___ \\     | |    | |\\/| |   | |     |______|    \\___ \\  | __|  / _` | | |/ /  / _ \\ | |\\/| | | | | '_ \\   / _ \\\r\n  ____) |    | |    | |  | |  _| |_                ____) | | |_  | (_| | |   <  |  __/ | |  | | | | | | | | |  __/\r\n |_____/     |_|    |_|  |_| |_____|              |_____/   \\__|  \\__,_| |_|\\_\\  \\___| |_|  |_| |_| |_| |_|  \\___|\r\n\r\n    StakeMine StakeHolder Contract V2\r\n\r\n    Contract to withdrawls stake earns from Stakemine \r\n    \u2705Payable in USDT BEP20 Token\r\n    \u2705Payable in STMI Token\r\n    \r\n*/\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function getOwner() external view returns (address);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n  address public _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor ()  {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  function ownerAddress() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract Authorized is Ownable {\r\n  mapping(uint8 => mapping(address => bool)) public permissions;\r\n  string[] public permissionIndex;\r\n\r\n  constructor() {\r\n    permissionIndex.push(\"admin\");\r\n    permissionIndex.push(\"financial\");\r\n    permissionIndex.push(\"controller\");\r\n    permissionIndex.push(\"operator\");\r\n\r\n    permissions[0][_msgSender()] = true;\r\n  }\r\n\r\n  modifier isAuthorized(uint8 index) {\r\n    if (!permissions[index][_msgSender()]) {\r\n      revert(string(abi.encodePacked(\"Account \",Strings.toHexString(uint160(_msgSender()), 20),\" does not have \", permissionIndex[index], \" permission\")));\r\n    }\r\n    _;\r\n  }\r\n\r\n  function safeApprove(address token, address spender, uint256 amount) external isAuthorized(0) {\r\n    IERC20(token).approve(spender, amount);\r\n  }\r\n\r\n  function safeWithdraw() external isAuthorized(0) {\r\n    uint256 contractBalance = address(this).balance;\r\n    payable(_msgSender()).transfer(contractBalance);\r\n  }\r\n\r\n  function grantPermission(address operator, uint8[] memory grantedPermissions) external isAuthorized(0) {\r\n    for (uint8 i = 0; i < grantedPermissions.length; i++) permissions[grantedPermissions[i]][operator] = true;\r\n  }\r\n\r\n  function revokePermission(address operator, uint8[] memory revokedPermissions) external isAuthorized(0) {\r\n    for (uint8 i = 0; i < revokedPermissions.length; i++) permissions[revokedPermissions[i]][operator]  = false;\r\n  }\r\n\r\n  function grantAllPermissions(address operator) external isAuthorized(0) {\r\n    for (uint8 i = 0; i < permissionIndex.length; i++) permissions[i][operator]  = true;\r\n  }\r\n\r\n  function revokeAllPermissions(address operator) external isAuthorized(0) {\r\n    for (uint8 i = 0; i < permissionIndex.length; i++) permissions[i][operator]  = false;\r\n  }\r\n\r\n}\r\n\r\n/*\r\n ____        ______                ______     \r\n/\\  _`\\     /\\__  _\\   /'\\_/`\\    /\\__  _\\    \r\n\\ \\,\\L\\_\\   \\/_/\\ \\/  /\\      \\   \\/_/\\ \\/    \r\n \\/_\\__ \\      \\ \\ \\  \\ \\ \\__\\ \\     \\ \\ \\    \r\n   /\\ \\L\\ \\     \\ \\ \\  \\ \\ \\_/\\ \\     \\_\\ \\__ \r\n   \\ `\\____\\     \\ \\_\\  \\ \\_\\\\ \\_\\    /\\_____\\\r\n    \\/_____/      \\/_/   \\/_/ \\/_/    \\/_____/\r\n*/\r\n\r\ncontract StakeMineHolderContract is ReentrancyGuard, Ownable, Authorized {\r\n\r\n  using SafeMath for uint;\r\n\r\n  address public immutable _Stmi;\r\n  address public immutable _Busd;\r\n  address       constant  DEAD = 0x000000000000000000000000000000000000dEaD;\r\n  address       constant  ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n  //start\r\n  constructor() {\r\n    //_Busd = 0x55d398326f99059fF775485246999027B3197955;\r\n    _Busd = 0x55d398326f99059fF775485246999027B3197955;\r\n    _Stmi = 0x4f824cc50b545cdA8DD75B10163699E7bB0209bf;\r\n    \r\n  }\r\n  \r\n //receiver\r\n receive() external payable {}\r\n\r\n\r\n function stakeMineEarns(\r\n    uint256 totalPay,\r\n    uint256 totalBurn,\r\n    uint256[] memory amount,\r\n    address[] memory holders\r\n    ) external nonReentrant isAuthorized(0) {\r\n    \r\n\r\n\r\n    //Get Amount to burn STMI\r\n    IERC20(_Stmi).transferFrom(msg.sender, address(this), totalBurn);\r\n    //Burn\r\n    IERC20(_Stmi).transfer(DEAD, totalBurn);\r\n\r\n\r\n    //Get Amount to pay holders\r\n    IERC20(_Busd).transferFrom(msg.sender, address(this), totalPay);\r\n    //Distribute\r\n    for (uint i = 0; i < holders.length; i++) {\r\n    IERC20(_Busd).transfer(address(holders[i]), amount[i]);\r\n    }\r\n\r\n }   \r\n\r\n\r\n\r\n function stakeMineEarnsSTMI(\r\n    uint256 totalPay,\r\n    uint256[] memory amount,\r\n    address[] memory holders\r\n    ) external nonReentrant isAuthorized(0) {\r\n    \r\n\r\n    //Get Amount to pay holders\r\n    IERC20(_Stmi).transferFrom(msg.sender, address(this), totalPay);\r\n    //Distribute\r\n    for (uint i = 0; i < holders.length; i++) {\r\n    IERC20(_Stmi).transfer(address(holders[i]), amount[i]);\r\n    }\r\n\r\n }   \r\n\r\n\r\n\r\n  function getTotalBusdBalance () public view returns (uint) { return IERC20(_Busd).balanceOf(address(this));  }\r\n\r\n  function getTotalStmiBalance () public view returns (uint) { return IERC20(_Stmi).balanceOf(address(this));  }\r\n\r\n  function withdrawBNB() external isAuthorized(0) { payable(_owner).transfer(address(this).balance); }\r\n\r\n  function safeOtherTokens(address token, address payable receiv, uint amount) external isAuthorized(0) {\r\n    if(token == address(0)) { receiv.transfer(amount); } else { IERC20(token).transfer(receiv, amount); }\r\n  }\r\n\r\n\r\n  \r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_Busd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Stmi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBusdBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStmiBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"grantAllPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"grantedPermissions\",\"type\":\"uint8[]\"}],\"name\":\"grantPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"permissionIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeAllPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"revokedPermissions\",\"type\":\"uint8[]\"}],\"name\":\"revokePermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"receiv\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeOtherTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"}],\"name\":\"stakeMineEarns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"}],\"name\":\"stakeMineEarnsSTMI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StakeMineHolderContract", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e318b7b08d9eee572fd6ac31260c020126fec52c2f17f52ed259d0c866429831"}