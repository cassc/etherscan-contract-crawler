{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n    external\r\n    returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IPancakeSwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPancakeSwapFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n    external\r\n    view\r\n    returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n//\u4e2d\u8f6c\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\n\r\ncontract NRGS is IERC20 {\r\n    using SafeMath for uint256;\r\n    //\u7528\u6237\u5185\u90e8\u6301\u6709\u7684\u5b9e\u9645\u5e01\u6570\u91cf\r\n    mapping(address => uint256) private _rOwned;\r\n    //\u53ea\u7528\u4e8e\u975e\u5206\u7ea2\u7528\u6237\u7684\u8f6c\u8d26\r\n    mapping(address => uint256) private _tOwned;\r\n    //\u7c7b\u4f3c\u4e8eERC20\u7684allowance\uff0c\u6307\u7528\u6237\u6388\u6743\u67d0\u4e9b\u8d26\u6237\u7684\u53ef\u4f7f\u7528\u989d\u5ea6\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    //\u8d26\u6237\u767d\u540d\u5355\uff0c\u7528\u6765\u5224\u65ad\u662f\u5426\u9700\u8981\u8f6c\u8d26\u624b\u7eed\u8d39\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    //\u5bf9\u5916-\u603b\u91cf\r\n    uint256 private _tTotal;\r\n    //\u5bf9\u5185-\u5b9e\u9645\u91cf\r\n    uint256 private _rTotal;\r\n    //\u6536\u53d6\u7684\u624b\u7eed\u8d39\r\n    uint256 private _tFeeTotal;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n\r\n\r\n\r\n\r\n    //\u8def\u7531\r\n    IPancakeSwapRouter public router;\r\n\r\n    //\u4e0b\u6b21\u5206\u7ea2\u65f6\u95f4\r\n    uint256 public _nextDivTime;\r\n\r\n    event UpdateNextDivTime(uint256 nextDivTime);\r\n\r\n\r\n    address public uniswapV2Pair;\r\n    bool public swapAction = true;\r\n    bool public billAction = false;\r\n\r\n    IERC20 usdt;\r\n\r\n    TokenDistributor public _tokenDistributor;\r\n\r\n    uint256 public _initPrice = 100;\r\n\r\n\r\n    event eveSetInitAmount(uint256 nfree_amount);\r\n\r\n\r\n    //\u5173\u7cfb\u94fe\r\n    mapping(address => address) public inviter;\r\n\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    //\u6301\u670915\u679a\u5730\u5740\u4eba\u6570\r\n    uint256 public lpAwardCount;\r\n    //\u7387\u5148\u8fbe\u680715\u679a\u7684\u5730\u5740\u5217\u8868\r\n    address[] public lpAwardAddrList;\r\n    //\u662f\u5426\u5df2\u7ecf\u52a0\u5165\u8fbe\u6807\u5217\u8868\r\n    mapping(address => bool) public isLpAward;\r\n\r\n    //\u4e70\u5165\u8d39\u7387 1\uff1a \u76f4\u63a8\u5956\r\n    uint256 public buyRate1 = 4;\r\n    //\u4e70\u5165\u8d39\u7387 2\uff1a \u95f4\u63a8\u5956\r\n    uint256 public buyRate2 = 1;\r\n    //\u5356\u51fa\u8d39\u7387 1\uff1a LP\u5206\u7ea2\r\n    uint256 public sellRate1 = 7;\r\n    //\u5356\u51fa\u8d39\u7387 2\uff1a \u56de\u6d41\u5e95\u6c60\r\n    uint256 public sellRate2 = 2;\r\n    //LP\u5206\u7ea2\u4e0a\u9650\u5730\u5740\r\n    uint256 public lpMaxCount = 180;\r\n    //\u5356\u51fa\u5206\u7ea2\u5730\u5740\r\n    address public fundAddress;\r\n    //\u66b4\u8dcc\u5206\u7ea2\u5730\u5740\r\n    address public dropAddress;\r\n    bool public dropAction=false;\r\n    //\u66b4\u8dcc-\u5e01\u4ef7\u4e0b\u8dcc\u6bd4\u4f8b\r\n    mapping(uint256 => uint256) public dropPriceMap;\r\n    //\u66b4\u8dcc-\u624b\u7eed\u8d39\u589e\u52a0\u6bd4\u4f8b\r\n    mapping(uint256 => uint256) public dropFeeMap;\r\n    //\u5e01\u6362U\u6700\u4f4e\u503c\r\n    uint256 public numTokensSellToFund;\r\n\r\n    //LP\u6301\u5e01\u5206\u7ea2\u6700\u4f4e\u503c\r\n    uint256 public minLpNum;\r\n\r\n\r\n    event LPAddress(address);\r\n    event SwapAndDiv(uint256, uint256, uint256);\r\n\r\n    bool inSwapAndLiquify;\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    modifier lock() {\r\n        _lockBefore();\r\n        _;\r\n        _lockAfter();\r\n    }\r\n\r\n    function _lockBefore() private {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _lockAfter() private {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    address public _owner;\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    constructor(bool prod) {\r\n        _name = \"NRGS\";\r\n        _symbol = \"NRGS\";\r\n        _decimals = 18;\r\n        _tTotal = 19000 * 10 ** _decimals;\r\n\r\n        //\u5207\u6362\u73af\u5883\uff0c\u521d\u59cb\u5316token\u53causdt\u5408\u7ea6\r\n        _initToken(prod);\r\n\r\n        _nextDivTime = block.timestamp + 30 days;\r\n        _status = _NOT_ENTERED;\r\n\r\n        _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n        _rOwned[msg.sender] = _rTotal.div(100).mul(100);\r\n        // _rOwned[address(this)] = _rTotal.div(100).mul(65);\r\n\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _isExcludedFromFee[address(router)] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _owner = msg.sender;\r\n\r\n        numTokensSellToFund=1*10**(_decimals-1);\r\n        minLpNum=100;\r\n\r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n        // emit Transfer(address(0), address(this), _tTotal.div(100).mul(65));\r\n    }\r\n\r\n    //\u521d\u59cb\u5316\u5e01\u79cd\u53ca\u8def\u7531\r\n    function _initToken(bool prod) internal {\r\n        if (prod)\r\n        {\r\n            //\u6b63\u5f0f\u94fe \u8584\u997c\u8def\u7531\r\n            router = IPancakeSwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n            usdt = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n        } else {\r\n            //\u6d4b\u8bd5\u94fe\r\n            router = IPancakeSwapRouter(0xD99D1c33F9fC3444f8101754aBC46c52416550D1);\r\n            usdt = IERC20(0x6B0AA926f4Bd81669aE269d8FE0124F5060A6aa9);\r\n        }\r\n        uniswapV2Pair = IPancakeSwapFactory(router.factory()).createPair(address(usdt), address(this));\r\n\r\n        _allowances[address(this)][address(router)] = MAX;\r\n        usdt.approve(address(router), MAX);\r\n\r\n        _tokenDistributor = new TokenDistributor(address(usdt));\r\n\r\n        fundAddress = address(0x76C9F171a15C0F75080a06216b0Ea91C0F2C7a01);\r\n        dropAddress = address(0x76C9F171a15C0F75080a06216b0Ea91C0F2C7a01);\r\n\r\n        dropPriceMap[0] = 40;\r\n        dropPriceMap[1] = 50;\r\n        dropPriceMap[2] = 60;\r\n\r\n        dropFeeMap[0] = 10;\r\n        dropFeeMap[1] = 20;\r\n        dropFeeMap[2] = 30;\r\n\r\n    }\r\n\r\n    function setInitAmount(uint256 _amount) public onlyOwner {\r\n        _initPrice = _amount;\r\n        emit eveSetInitAmount(_initPrice);\r\n    }\r\n\r\n\r\n    function setNumTokensSellToFund(uint256 _numTokensSellToFund) public  onlyOwner{\r\n        numTokensSellToFund=_numTokensSellToFund;\r\n    }\r\n    // //\u4fee\u6539\u4e70\u5165\u8d39\u7387\r\n    // function changeBuyRate(uint256 newBuyRate1, uint256 newBuyRate2) public onlyOwner {\r\n    //     buyRate1 = newBuyRate1;\r\n    //     buyRate2 = newBuyRate2;\r\n    // }\r\n    // //\u4fee\u6539\u5356\u51fa\u6c47\u7387\r\n    // function changeSellRate(uint256 newSellRate1, uint256 newSellRate2) public onlyOwner {\r\n    //     sellRate1 = newSellRate1;\r\n    //     sellRate2 = newSellRate2;\r\n    // }\r\n\r\n    //\u4fee\u6539LP\u5206\u7ea2\u4e0a\u9650\u5730\u5740\r\n    function changeLpMaxCount(uint256 newLpMaxCount) public onlyOwner {\r\n        lpMaxCount = newLpMaxCount;\r\n    }\r\n    //\u4fee\u6539\u5356\u51fa\u5206\u7ea2\u5730\u5740\r\n    function changeFundAddress(address newFundAddress) public onlyOwner {\r\n        fundAddress = newFundAddress;\r\n    }\r\n    //\u4fee\u6539\u66b4\u8dcc\u5206\u7ea2\u5730\u5740\r\n    function changeDropAddress(address newDropAddress) public onlyOwner {\r\n        dropAddress = newDropAddress;\r\n    }\r\n    //\u4fee\u6539\u66b4\u8dcc\u53c2\u6570\r\n    function changeDropMap(uint256 i, uint256 priceRate, uint256 feeRate) public onlyOwner {\r\n        dropPriceMap[i] = priceRate;\r\n        dropFeeMap[i] = feeRate;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u6700\u4f4eLP\u5206\u7ea2\u6301\u6709\u6570\u91cf\r\n    function setNewLpNum(uint256 _minLpNum) public onlyOwner {\r\n        minLpNum = _minLpNum;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u521d\u59cb\u5206\u7ea2\u65f6\u95f4\r\n    function setNextDivTime(uint256 divTime) public onlyOwner {\r\n        _nextDivTime = divTime;\r\n        emit UpdateNextDivTime(divTime);\r\n    }\r\n\r\n\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n    public\r\n    override\r\n    returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n    public\r\n    view\r\n    override\r\n    returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n    public\r\n    override\r\n    returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        if (uniswapV2Pair == address(0) && amount >= _tTotal.div(100)) {\r\n            uniswapV2Pair = recipient;\r\n        }\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n\r\n    function changeswapAction() public onlyOwner {\r\n        swapAction = !swapAction;\r\n    }\r\n\r\n    function changeBillAction() public onlyOwner {\r\n        billAction = !billAction;\r\n    }\r\n\r\n    function changeDropAction() public onlyOwner {\r\n        dropAction = !dropAction;\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function uniswapV2PairSync() public returns (bool){\r\n        (bool success,) = uniswapV2Pair.call(abi.encodeWithSelector(0xfff6cae9));\r\n        return success;\r\n    }\r\n\r\n    function claimTokens() public onlyOwner {\r\n        payable(_owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    // \u8f6c\u8d26\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (from != uniswapV2Pair && to != uniswapV2Pair) {\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (contractTokenBalance >= numTokensSellToFund) {\r\n                swapTokensForUsdt(numTokensSellToFund);\r\n            }\r\n        }\r\n\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            _tokenTransfer(from, to, amount, false);\r\n        } else {\r\n            if (from != uniswapV2Pair && to != uniswapV2Pair) {\r\n                _tokenTransfer(from, to, amount, false);\r\n            } else {\r\n                _tokenTransfer(from, to, amount, true);\r\n            }\r\n        }\r\n\r\n        //to\u672a\u7ed1\u5b9a\u3001from \u3001to\u90fd\u975e\u5408\u7ea6\u5730\u5740\r\n        bool shouldInvite = (inviter[to] == address(0) && !isContract(from) && !isContract(to) && amount == 18 * 10 ** (_decimals - 4));\r\n        //\u5fc5\u987b\u7b49\u4e8e0.0018\r\n        if (shouldInvite) {\r\n            inviter[to] = from;\r\n        }\r\n        _addLpUser(from);\r\n        _addLpUser(to);\r\n        //LP\u5206\u7ea2\u7ed3\u7b97\r\n        _billAward();\r\n\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        uint256 rate;\r\n        uint256 _linFee = 0;\r\n\r\n        if (sender == _owner) {\r\n            rate = 0;\r\n        } else {\r\n            if (takeFee) {\r\n                if (sender == uniswapV2Pair) {\r\n                    // buy \u4e70\u5165 \u6ed1\u70b95%\u7684\u5206\u914d\u65b9\u6848\r\n                    // 5\r\n                    //\u76f4\u63a8\u59564%\u00a0\u00a0\u00a0\u95f4\u63a8\u59561%\u00a0\r\n                    rate = buyRate1 + buyRate2;\r\n\r\n                    //\u63a8\u8350\u5956\u52b1\r\n                    _awardInvite(sender, recipient, tAmount, rAmount);\r\n\r\n                } else if (recipient == uniswapV2Pair) {\r\n                    // sell\r\n                    // 9% \u5356\u51fa\u6ed1\u70b99%\u7684\u5206\u914d\u65b9\u6848\r\n                    // 7%\u00a0LP\u5206\u7ea2\r\n                    // 2% \u56de\u6d41\u57fa\u91d1\u5730\u5740\r\n                    rate = sellRate1 + sellRate2;\r\n\r\n                    _rOwned[address(this)] = _rOwned[address(this)].add(\r\n                        rAmount.div(100).mul(sellRate1)\r\n                    );\r\n                    emit Transfer(sender, address(this), tAmount.div(100).mul(sellRate1));\r\n\r\n                    //\u56de\u6d41\u57fa\u91d1\u5730\u5740\r\n                    _rOwned[fundAddress] = _rOwned[fundAddress].add(\r\n                        rAmount.div(100).mul(sellRate2)\r\n                    );\r\n\r\n                    emit Transfer(sender, fundAddress, tAmount.div(100).mul(sellRate2));\r\n\r\n                    if (dropAction) {\r\n                        // \u68c0\u6d4b\u66b4\u8dcc\r\n                        uint256 balanceUsdt = usdt.balanceOf(uniswapV2Pair);\r\n                        uint256 balanceERC = balanceOf(uniswapV2Pair);\r\n\r\n                        uint price = balanceERC.mul(10000).div(balanceUsdt);\r\n\r\n                        if (price <= _initPrice) {\r\n                            _initPrice = price;\r\n                            emit eveSetInitAmount(_initPrice);\r\n                        } else {\r\n                            uint256 r_am = tAmount;\r\n                            uint ratio = (price - _initPrice) * 10 ** _decimals / _initPrice;\r\n                            //\u5f53\u5e01\u4ef7\u683c\u4e0b\u8dcc40%\uff0c\u5356\u51fa\u624b\u7eed\u8d39\u589e\u52a010%\r\n                            //\u5f53\u5e01\u4ef7\u683c\u4e0b\u8dcc50%\uff0c\u5356\u51fa\u624b\u7eed\u8d39\u589e\u52a020%\r\n                            //\u5f53\u5e01\u4ef7\u683c\u4e0b\u8dcc60%\uff0c\u5356\u51fa\u624b\u7eed\u8d39\u589e\u52a030%\r\n                            //\u589e\u52a0\u5356\u51fa\u7684\u624b\u7eed\u8d39\u5168\u90e8\u56de\u6d41\u5e95\u6c60\r\n                            // 50%\r\n                            _linFee = 0;\r\n                            if (ratio >= dropPriceMap[0] * 10 ** 17) {\r\n                                _linFee = dropFeeMap[0];\r\n                            }\r\n                            if (ratio >= dropPriceMap[1] * 10 ** 17) {\r\n                                _linFee = dropFeeMap[1];\r\n                            }\r\n                            if (ratio >= dropPriceMap[2] * 10 ** 17) {\r\n                                _linFee = dropFeeMap[2];\r\n                            }\r\n\r\n\r\n                            if (_linFee > 0) {\r\n                                rate = rate.add(_linFee);\r\n\r\n                                _rOwned[dropAddress] = _rOwned[dropAddress].add(\r\n                                    rAmount.div(100).mul(_linFee)\r\n                                );\r\n\r\n                                emit Transfer(sender, dropAddress, r_am.div(100).mul(_linFee));\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        // compound interest\r\n\r\n        uint256 recipientRate = 100 - rate;\r\n        _rOwned[recipient] = _rOwned[recipient].add(\r\n            rAmount.div(100).mul(recipientRate)\r\n        );\r\n        emit Transfer(sender, recipient, tAmount.div(100).mul(recipientRate));\r\n\r\n    }\r\n\r\n\r\n    //\u63a8\u8350\u5956\u52b1\r\n    function _awardInvite(address sender, address cur, uint256 tAmount, uint256 rAmount) internal {\r\n        uint256[2] memory inviteRate = [buyRate1, buyRate2];\r\n        for (uint256 i = 0; i < inviteRate.length; i++) {\r\n            cur = inviter[cur];\r\n            if (cur == address(0)) {\r\n                cur = uniswapV2Pair;\r\n                //\u5982\u679c\u6ca1\u6709\u63a8\u8350\u5730\u5740\uff0c\u56de\u6d41\u5e95\u6c60\r\n            }\r\n            _rOwned[cur] = _rOwned[cur].add(\r\n                rAmount.div(100).mul(inviteRate[i])\r\n            );\r\n            emit Transfer(sender, cur, tAmount.div(100).mul(inviteRate[i]));\r\n\r\n        }\r\n    }\r\n\r\n\r\n    function changePair(address _pair) public onlyOwner {\r\n        uniswapV2Pair = _pair;\r\n    }\r\n\r\n    function changeRouter(address _router) public onlyOwner {\r\n        router = IPancakeSwapRouter(_router);\r\n    }\r\n\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function getLpBalance(address account) public view returns (uint256){\r\n        return IERC20(uniswapV2Pair).balanceOf(account);\r\n    }\r\n\r\n    function _addLpUser(address account) internal {\r\n\r\n        //\u8fbe\u680715\u679a\r\n        if (lpAwardCount < lpMaxCount\r\n        && account != uniswapV2Pair\r\n        && account != address(0)\r\n        && account != address(this)\r\n            && !isLpAward[account]\r\n            && IERC20(uniswapV2Pair).balanceOf(account) >= minLpNum * 10 ** 18)\r\n        {\r\n            lpAwardCount += 1;\r\n            lpAwardAddrList.push(account);\r\n            isLpAward[account] = true;\r\n            emit LPAddress(account);\r\n        }\r\n\r\n    }\r\n\r\n    //\u7ed3\u7b97LP\u5206\u7ea2\r\n    function _billAward() private {\r\n\r\n        if (block.timestamp >= _nextDivTime\r\n        && lpAwardCount > 0\r\n        && swapAction && !billAction\r\n        )\r\n        {\r\n            _lpDiv();\r\n            _nextDivTime = block.timestamp + 30 days;\r\n        }\r\n\r\n        if (billAction && lpAwardCount > 0 )\r\n        {\r\n            _lpDiv();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function transferMany(address[] memory recipientList, uint256[] memory amounts)\r\n    public\r\n    returns (bool)\r\n    {\r\n        for (uint8 i = 0; i < recipientList.length; i++) {\r\n            _transfer(msg.sender, recipientList[i], amounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _lpDiv() private lockTheSwap {\r\n\r\n        uint256 newBalance = usdt.balanceOf(address(_tokenDistributor));\r\n        if(newBalance>=1*10**10)\r\n        {\r\n            uint256 len=lpAwardAddrList.length;\r\n            if(len>lpMaxCount)\r\n            {\r\n                len=lpMaxCount;\r\n            }\r\n\r\n            uint256 count=0;\r\n            //\u8ba1\u7b97\u6709\u6548\u8fbe\u6807\u7528\u6237\r\n            for (uint8 i = 0; i < len; i++)\r\n            {  \r\n               if(getLpBalance(lpAwardAddrList[i]) >= minLpNum * 10 ** 18) \r\n               {\r\n                   count++;\r\n               }\r\n            }\r\n\r\n            if(count>0)\r\n            {\r\n                for (uint8 i = 0; i < len; i++)\r\n                {\r\n                     if(getLpBalance(lpAwardAddrList[i]) >= minLpNum * 10 ** 18) \r\n                    {\r\n                        usdt.transferFrom(address(_tokenDistributor), lpAwardAddrList[i], newBalance.div(count));\r\n                    }\r\n                     \r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    function swapTokensForUsdt(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(usdt);\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n\r\n\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"prod\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LPAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SwapAndDiv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextDivTime\",\"type\":\"uint256\"}],\"name\":\"UpdateNextDivTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nfree_amount\",\"type\":\"uint256\"}],\"name\":\"eveSetInitAmount\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_initPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nextDivTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"billAction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyRate1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyRate2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeBillAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeDropAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDropAddress\",\"type\":\"address\"}],\"name\":\"changeDropAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"changeDropMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFundAddress\",\"type\":\"address\"}],\"name\":\"changeFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLpMaxCount\",\"type\":\"uint256\"}],\"name\":\"changeLpMaxCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"changePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeswapAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropAction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dropFeeMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dropPriceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLpBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLpAward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpAwardAddrList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpAwardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpMaxCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLpNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRate1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRate2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setInitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLpNum\",\"type\":\"uint256\"}],\"name\":\"setNewLpNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"divTime\",\"type\":\"uint256\"}],\"name\":\"setNextDivTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numTokensSellToFund\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipientList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferMany\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2PairSync\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NRGS", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b3b2e3380f06d91ab5825a9bfcb3d77e277e065ce079f0aeb9bcbf533586993a"}