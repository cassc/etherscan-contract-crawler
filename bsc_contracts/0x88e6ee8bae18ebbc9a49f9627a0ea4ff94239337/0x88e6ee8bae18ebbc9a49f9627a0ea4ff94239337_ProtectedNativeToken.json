{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0\r\npragma solidity ^0.8.10;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address payable) {\r\n    return payable(msg.sender);\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\r\n/// @author Gnosis Developers\r\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\r\nlibrary GPv2SafeERC20 {\r\n  /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\r\n  /// also when the token returns `false`.\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    bytes4 selector_ = token.transfer.selector;\r\n\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      let freeMemoryPointer := mload(0x40)\r\n      mstore(freeMemoryPointer, selector_)\r\n      mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\r\n      mstore(add(freeMemoryPointer, 36), value)\r\n\r\n      if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\r\n        returndatacopy(0, 0, returndatasize())\r\n        revert(0, returndatasize())\r\n      }\r\n    }\r\n\r\n    require(getLastTransferResult(token), 'GPv2: failed transfer');\r\n  }\r\n\r\n  /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\r\n  /// reverts also when the token returns `false`.\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    bytes4 selector_ = token.transferFrom.selector;\r\n\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      let freeMemoryPointer := mload(0x40)\r\n      mstore(freeMemoryPointer, selector_)\r\n      mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\r\n      mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\r\n      mstore(add(freeMemoryPointer, 68), value)\r\n\r\n      if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\r\n        returndatacopy(0, 0, returndatasize())\r\n        revert(0, returndatasize())\r\n      }\r\n    }\r\n\r\n    require(getLastTransferResult(token), 'GPv2: failed transferFrom');\r\n  }\r\n\r\n  /// @dev Verifies that the last return was a successful `transfer*` call.\r\n  /// This is done by checking that the return data is either empty, or\r\n  /// is a valid ABI encoded boolean.\r\n  function getLastTransferResult(IERC20 token) private view returns (bool success) {\r\n    // NOTE: Inspecting previous return data requires assembly. Note that\r\n    // we write the return data to memory 0 in the case where the return\r\n    // data size is 32, this is OK since the first 64 bytes of memory are\r\n    // reserved by Solidy as a scratch space that can be used within\r\n    // assembly blocks.\r\n    // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      /// @dev Revert with an ABI encoded Solidity error with a message\r\n      /// that fits into 32-bytes.\r\n      ///\r\n      /// An ABI encoded Solidity error has the following memory layout:\r\n      ///\r\n      /// ------------+----------------------------------\r\n      ///  byte range | value\r\n      /// ------------+----------------------------------\r\n      ///  0x00..0x04 |        selector(\"Error(string)\")\r\n      ///  0x04..0x24 |      string offset (always 0x20)\r\n      ///  0x24..0x44 |                    string length\r\n      ///  0x44..0x64 | string value, padded to 32-bytes\r\n      function revertWithMessage(length, message) {\r\n        mstore(0x00, '\\x08\\xc3\\x79\\xa0')\r\n        mstore(0x04, 0x20)\r\n        mstore(0x24, length)\r\n        mstore(0x44, message)\r\n        revert(0x00, 0x64)\r\n      }\r\n\r\n      switch returndatasize()\r\n      // Non-standard ERC20 transfer without return.\r\n      case 0 {\r\n        // NOTE: When the return data size is 0, verify that there\r\n        // is code at the address. This is done in order to maintain\r\n        // compatibility with Solidity calling conventions.\r\n        // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\r\n        if iszero(extcodesize(token)) {\r\n          revertWithMessage(20, 'GPv2: not a contract')\r\n        }\r\n\r\n        success := 1\r\n      }\r\n      // Standard ERC20 transfer returning boolean success value.\r\n      case 32 {\r\n        returndatacopy(0, 0, returndatasize())\r\n\r\n        // NOTE: For ABI encoding v1, any non-zero value is accepted\r\n        // as `true` for a boolean. In order to stay compatible with\r\n        // OpenZeppelin's `SafeERC20` library which is known to work\r\n        // with the existing ERC20 implementation we care about,\r\n        // make sure we return success for any non-zero return value\r\n        // from the `transfer*` call.\r\n        success := iszero(iszero(mload(0)))\r\n      }\r\n      default {\r\n        revertWithMessage(31, 'GPv2: malformed transfer result')\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title IPoolAddressesProvider\r\n * @author Aave\r\n * @notice Defines the basic interface for a Pool Addresses Provider.\r\n **/\r\ninterface IPoolAddressesProvider {\r\n  /**\r\n   * @dev Emitted when the market identifier is updated.\r\n   * @param oldMarketId The old id of the market\r\n   * @param newMarketId The new id of the market\r\n   */\r\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\r\n\r\n  /**\r\n   * @dev Emitted when the pool is updated.\r\n   * @param oldAddress The old address of the Pool\r\n   * @param newAddress The new address of the Pool\r\n   */\r\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\r\n\r\n  /**\r\n   * @dev Emitted when the pool configurator is updated.\r\n   * @param oldAddress The old address of the PoolConfigurator\r\n   * @param newAddress The new address of the PoolConfigurator\r\n   */\r\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\r\n\r\n  /**\r\n   * @dev Emitted when the price oracle is updated.\r\n   * @param oldAddress The old address of the PriceOracle\r\n   * @param newAddress The new address of the PriceOracle\r\n   */\r\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\r\n\r\n  /**\r\n   * @dev Emitted when the ACL manager is updated.\r\n   * @param oldAddress The old address of the ACLManager\r\n   * @param newAddress The new address of the ACLManager\r\n   */\r\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\r\n\r\n  /**\r\n   * @dev Emitted when the ACL admin is updated.\r\n   * @param oldAddress The old address of the ACLAdmin\r\n   * @param newAddress The new address of the ACLAdmin\r\n   */\r\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\r\n\r\n  /**\r\n   * @dev Emitted when the price oracle sentinel is updated.\r\n   * @param oldAddress The old address of the PriceOracleSentinel\r\n   * @param newAddress The new address of the PriceOracleSentinel\r\n   */\r\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\r\n\r\n  /**\r\n   * @dev Emitted when the pool data provider is updated.\r\n   * @param oldAddress The old address of the PoolDataProvider\r\n   * @param newAddress The new address of the PoolDataProvider\r\n   */\r\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\r\n\r\n  /**\r\n   * @dev Emitted when a new proxy is created.\r\n   * @param id The identifier of the proxy\r\n   * @param proxyAddress The address of the created proxy contract\r\n   * @param implementationAddress The address of the implementation contract\r\n   */\r\n  event ProxyCreated(\r\n    bytes32 indexed id,\r\n    address indexed proxyAddress,\r\n    address indexed implementationAddress\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when a new non-proxied contract address is registered.\r\n   * @param id The identifier of the contract\r\n   * @param oldAddress The address of the old contract\r\n   * @param newAddress The address of the new contract\r\n   */\r\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\r\n\r\n  /**\r\n   * @dev Emitted when the implementation of the proxy registered with id is updated\r\n   * @param id The identifier of the contract\r\n   * @param proxyAddress The address of the proxy contract\r\n   * @param oldImplementationAddress The address of the old implementation contract\r\n   * @param newImplementationAddress The address of the new implementation contract\r\n   */\r\n  event AddressSetAsProxy(\r\n    bytes32 indexed id,\r\n    address indexed proxyAddress,\r\n    address oldImplementationAddress,\r\n    address indexed newImplementationAddress\r\n  );\r\n\r\n  /**\r\n   * @notice Returns the id of the Aave market to which this contract points to.\r\n   * @return The market id\r\n   **/\r\n  function getMarketId() external view returns (string memory);\r\n\r\n  /**\r\n   * @notice Associates an id with a specific PoolAddressesProvider.\r\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\r\n   * identify and validate multiple Aave markets.\r\n   * @param newMarketId The market id\r\n   */\r\n  function setMarketId(string calldata newMarketId) external;\r\n\r\n  /**\r\n   * @notice Returns an address by its identifier.\r\n   * @dev The returned address might be an EOA or a contract, potentially proxied\r\n   * @dev It returns ZERO if there is no registered address with the given id\r\n   * @param id The id\r\n   * @return The address of the registered for the specified id\r\n   */\r\n  function getAddress(bytes32 id) external view returns (address);\r\n\r\n  /**\r\n   * @notice General function to update the implementation of a proxy registered with\r\n   * certain `id`. If there is no proxy registered, it will instantiate one and\r\n   * set as implementation the `newImplementationAddress`.\r\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\r\n   * setter function, in order to avoid unexpected consequences\r\n   * @param id The id\r\n   * @param newImplementationAddress The address of the new implementation\r\n   */\r\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\r\n\r\n  /**\r\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\r\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\r\n   * @param id The id\r\n   * @param newAddress The address to set\r\n   */\r\n  function setAddress(bytes32 id, address newAddress) external;\r\n\r\n  /**\r\n   * @notice Returns the address of the Pool proxy.\r\n   * @return The Pool proxy address\r\n   **/\r\n  function getPool() external view returns (address);\r\n\r\n  /**\r\n   * @notice Updates the implementation of the Pool, or creates a proxy\r\n   * setting the new `pool` implementation when the function is called for the first time.\r\n   * @param newPoolImpl The new Pool implementation\r\n   **/\r\n  function setPoolImpl(address newPoolImpl) external;\r\n\r\n  /**\r\n   * @notice Returns the address of the PoolConfigurator proxy.\r\n   * @return The PoolConfigurator proxy address\r\n   **/\r\n  function getPoolConfigurator() external view returns (address);\r\n\r\n  /**\r\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\r\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\r\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\r\n   **/\r\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\r\n\r\n  /**\r\n   * @notice Returns the address of the price oracle.\r\n   * @return The address of the PriceOracle\r\n   */\r\n  function getPriceOracle() external view returns (address);\r\n\r\n  /**\r\n   * @notice Updates the address of the price oracle.\r\n   * @param newPriceOracle The address of the new PriceOracle\r\n   */\r\n  function setPriceOracle(address newPriceOracle) external;\r\n\r\n  /**\r\n   * @notice Returns the address of the ACL manager.\r\n   * @return The address of the ACLManager\r\n   */\r\n  function getACLManager() external view returns (address);\r\n\r\n  /**\r\n   * @notice Updates the address of the ACL manager.\r\n   * @param newAclManager The address of the new ACLManager\r\n   **/\r\n  function setACLManager(address newAclManager) external;\r\n\r\n  /**\r\n   * @notice Returns the address of the ACL admin.\r\n   * @return The address of the ACL admin\r\n   */\r\n  function getACLAdmin() external view returns (address);\r\n\r\n  /**\r\n   * @notice Updates the address of the ACL admin.\r\n   * @param newAclAdmin The address of the new ACL admin\r\n   */\r\n  function setACLAdmin(address newAclAdmin) external;\r\n\r\n  /**\r\n   * @notice Returns the address of the price oracle sentinel.\r\n   * @return The address of the PriceOracleSentinel\r\n   */\r\n  function getPriceOracleSentinel() external view returns (address);\r\n\r\n  /**\r\n   * @notice Updates the address of the price oracle sentinel.\r\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\r\n   **/\r\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\r\n\r\n  /**\r\n   * @notice Returns the address of the data provider.\r\n   * @return The address of the DataProvider\r\n   */\r\n  function getPoolDataProvider() external view returns (address);\r\n\r\n  /**\r\n   * @notice Updates the address of the data provider.\r\n   * @param newDataProvider The address of the new DataProvider\r\n   **/\r\n  function setPoolDataProvider(address newDataProvider) external;\r\n}\r\n\r\nlibrary DataTypes {\r\n  struct ReserveData {\r\n    //stores the reserve configuration\r\n    ReserveConfigurationMap configuration;\r\n    //the liquidity index. Expressed in ray\r\n    uint128 liquidityIndex;\r\n    //the current supply rate. Expressed in ray\r\n    uint128 currentLiquidityRate;\r\n    //variable borrow index. Expressed in ray\r\n    uint128 variableBorrowIndex;\r\n    //the current variable borrow rate. Expressed in ray\r\n    uint128 currentVariableBorrowRate;\r\n    //the current stable borrow rate. Expressed in ray\r\n    uint128 currentStableBorrowRate;\r\n    //timestamp of last update\r\n    uint40 lastUpdateTimestamp;\r\n    //the id of the reserve. Represents the position in the list of the active reserves\r\n    uint16 id;\r\n    //aToken address\r\n    address aTokenAddress;\r\n    //stableDebtToken address\r\n    address stableDebtTokenAddress;\r\n    //variableDebtToken address\r\n    address variableDebtTokenAddress;\r\n    //address of the interest rate strategy\r\n    address interestRateStrategyAddress;\r\n    //the current treasury balance, scaled\r\n    uint128 accruedToTreasury;\r\n    //the outstanding unbacked aTokens minted through the bridging feature\r\n    uint128 unbacked;\r\n    //the outstanding debt borrowed against this asset in isolation mode\r\n    uint128 isolationModeTotalDebt;\r\n  }\r\n\r\n  struct ReserveConfigurationMap {\r\n    //bit 0-15: LTV\r\n    //bit 16-31: Liq. threshold\r\n    //bit 32-47: Liq. bonus\r\n    //bit 48-55: Decimals\r\n    //bit 56: reserve is active\r\n    //bit 57: reserve is frozen\r\n    //bit 58: borrowing is enabled\r\n    //bit 59: stable rate borrowing enabled\r\n    //bit 60: asset is paused\r\n    //bit 61: borrowing in isolation mode is enabled\r\n    //bit 62-63: reserved\r\n    //bit 64-79: reserve factor\r\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\r\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\r\n    //bit 152-167 liquidation protocol fee\r\n    //bit 168-175 eMode category\r\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\r\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\r\n    //bit 252-255 unused\r\n\r\n    uint256 data;\r\n  }\r\n\r\n  struct UserConfigurationMap {\r\n    /**\r\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\r\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\r\n     * asset is borrowed by the user.\r\n     */\r\n    uint256 data;\r\n  }\r\n\r\n  struct EModeCategory {\r\n    // each eMode category has a custom ltv and liquidation threshold\r\n    uint16 ltv;\r\n    uint16 liquidationThreshold;\r\n    uint16 liquidationBonus;\r\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\r\n    address priceSource;\r\n    string label;\r\n  }\r\n\r\n  enum InterestRateMode {\r\n    NONE,\r\n    STABLE,\r\n    VARIABLE\r\n  }\r\n\r\n  struct ReserveCache {\r\n    uint256 currScaledVariableDebt;\r\n    uint256 nextScaledVariableDebt;\r\n    uint256 currPrincipalStableDebt;\r\n    uint256 currAvgStableBorrowRate;\r\n    uint256 currTotalStableDebt;\r\n    uint256 nextAvgStableBorrowRate;\r\n    uint256 nextTotalStableDebt;\r\n    uint256 currLiquidityIndex;\r\n    uint256 nextLiquidityIndex;\r\n    uint256 currVariableBorrowIndex;\r\n    uint256 nextVariableBorrowIndex;\r\n    uint256 currLiquidityRate;\r\n    uint256 currVariableBorrowRate;\r\n    uint256 reserveFactor;\r\n    ReserveConfigurationMap reserveConfiguration;\r\n    address aTokenAddress;\r\n    address stableDebtTokenAddress;\r\n    address variableDebtTokenAddress;\r\n    uint40 reserveLastUpdateTimestamp;\r\n    uint40 stableDebtLastUpdateTimestamp;\r\n  }\r\n\r\n  struct ExecuteLiquidationCallParams {\r\n    uint256 reservesCount;\r\n    uint256 debtToCover;\r\n    address collateralAsset;\r\n    address debtAsset;\r\n    address user;\r\n    bool receiveAToken;\r\n    address priceOracle;\r\n    uint8 userEModeCategory;\r\n    address priceOracleSentinel;\r\n  }\r\n\r\n  struct ExecuteSupplyParams {\r\n    address asset;\r\n    uint256 amount;\r\n    address onBehalfOf;\r\n    uint16 referralCode;\r\n  }\r\n\r\n  struct ExecuteBorrowParams {\r\n    address asset;\r\n    address user;\r\n    address onBehalfOf;\r\n    uint256 amount;\r\n    InterestRateMode interestRateMode;\r\n    uint16 referralCode;\r\n    bool releaseUnderlying;\r\n    uint256 maxStableRateBorrowSizePercent;\r\n    uint256 reservesCount;\r\n    address oracle;\r\n    uint8 userEModeCategory;\r\n    address priceOracleSentinel;\r\n  }\r\n\r\n  struct ExecuteRepayParams {\r\n    address asset;\r\n    uint256 amount;\r\n    InterestRateMode interestRateMode;\r\n    address onBehalfOf;\r\n    bool useATokens;\r\n  }\r\n\r\n  struct ExecuteWithdrawParams {\r\n    address asset;\r\n    uint256 amount;\r\n    address to;\r\n    uint256 reservesCount;\r\n    address oracle;\r\n    uint8 userEModeCategory;\r\n  }\r\n\r\n  struct ExecuteSetUserEModeParams {\r\n    uint256 reservesCount;\r\n    address oracle;\r\n    uint8 categoryId;\r\n  }\r\n\r\n  struct FinalizeTransferParams {\r\n    address asset;\r\n    address from;\r\n    address to;\r\n    uint256 amount;\r\n    uint256 balanceFromBefore;\r\n    uint256 balanceToBefore;\r\n    uint256 reservesCount;\r\n    address oracle;\r\n    uint8 fromEModeCategory;\r\n  }\r\n\r\n  struct FlashloanParams {\r\n    address receiverAddress;\r\n    address[] assets;\r\n    uint256[] amounts;\r\n    uint256[] interestRateModes;\r\n    address onBehalfOf;\r\n    bytes params;\r\n    uint16 referralCode;\r\n    uint256 flashLoanPremiumToProtocol;\r\n    uint256 flashLoanPremiumTotal;\r\n    uint256 maxStableRateBorrowSizePercent;\r\n    uint256 reservesCount;\r\n    address addressesProvider;\r\n    uint8 userEModeCategory;\r\n    bool isAuthorizedFlashBorrower;\r\n  }\r\n\r\n  struct FlashloanSimpleParams {\r\n    address receiverAddress;\r\n    address asset;\r\n    uint256 amount;\r\n    bytes params;\r\n    uint16 referralCode;\r\n    uint256 flashLoanPremiumToProtocol;\r\n    uint256 flashLoanPremiumTotal;\r\n  }\r\n\r\n  struct FlashLoanRepaymentParams {\r\n    uint256 amount;\r\n    uint256 totalPremium;\r\n    uint256 flashLoanPremiumToProtocol;\r\n    address asset;\r\n    address receiverAddress;\r\n    uint16 referralCode;\r\n  }\r\n\r\n  struct CalculateUserAccountDataParams {\r\n    UserConfigurationMap userConfig;\r\n    uint256 reservesCount;\r\n    address user;\r\n    address oracle;\r\n    uint8 userEModeCategory;\r\n  }\r\n\r\n  struct ValidateBorrowParams {\r\n    ReserveCache reserveCache;\r\n    UserConfigurationMap userConfig;\r\n    address asset;\r\n    address userAddress;\r\n    uint256 amount;\r\n    InterestRateMode interestRateMode;\r\n    uint256 maxStableLoanPercent;\r\n    uint256 reservesCount;\r\n    address oracle;\r\n    uint8 userEModeCategory;\r\n    address priceOracleSentinel;\r\n    bool isolationModeActive;\r\n    address isolationModeCollateralAddress;\r\n    uint256 isolationModeDebtCeiling;\r\n  }\r\n\r\n  struct ValidateLiquidationCallParams {\r\n    ReserveCache debtReserveCache;\r\n    uint256 totalDebt;\r\n    uint256 healthFactor;\r\n    address priceOracleSentinel;\r\n  }\r\n\r\n  struct CalculateInterestRatesParams {\r\n    uint256 unbacked;\r\n    uint256 liquidityAdded;\r\n    uint256 liquidityTaken;\r\n    uint256 totalStableDebt;\r\n    uint256 totalVariableDebt;\r\n    uint256 averageStableBorrowRate;\r\n    uint256 reserveFactor;\r\n    address reserve;\r\n    address aToken;\r\n  }\r\n\r\n  struct InitReserveParams {\r\n    address asset;\r\n    address aTokenAddress;\r\n    address stableDebtAddress;\r\n    address variableDebtAddress;\r\n    address interestRateStrategyAddress;\r\n    uint16 reservesCount;\r\n    uint16 maxNumberReserves;\r\n  }\r\n}\r\n\r\n/**\r\n * @title IPool\r\n * @author Aave\r\n * @notice Defines the basic interface for an Aave Pool.\r\n **/\r\ninterface IPool {\r\n  /**\r\n   * @dev Emitted on mintUnbacked()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address initiating the supply\r\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\r\n   * @param amount The amount of supplied assets\r\n   * @param referralCode The referral code used\r\n   **/\r\n  event MintUnbacked(\r\n    address indexed reserve,\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    uint16 indexed referralCode\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on backUnbacked()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param backer The address paying for the backing\r\n   * @param amount The amount added as backing\r\n   * @param fee The amount paid in fees\r\n   **/\r\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\r\n\r\n  /**\r\n   * @dev Emitted on supply()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address initiating the supply\r\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\r\n   * @param amount The amount supplied\r\n   * @param referralCode The referral code used\r\n   **/\r\n  event Supply(\r\n    address indexed reserve,\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    uint16 indexed referralCode\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on withdraw()\r\n   * @param reserve The address of the underlying asset being withdrawn\r\n   * @param user The address initiating the withdrawal, owner of aTokens\r\n   * @param to The address that will receive the underlying\r\n   * @param amount The amount to be withdrawn\r\n   **/\r\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\r\n\r\n  /**\r\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\r\n   * @param reserve The address of the underlying asset being borrowed\r\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\r\n   * initiator of the transaction on flashLoan()\r\n   * @param onBehalfOf The address that will be getting the debt\r\n   * @param amount The amount borrowed out\r\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\r\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\r\n   * @param referralCode The referral code used\r\n   **/\r\n  event Borrow(\r\n    address indexed reserve,\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    DataTypes.InterestRateMode interestRateMode,\r\n    uint256 borrowRate,\r\n    uint16 indexed referralCode\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on repay()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The beneficiary of the repayment, getting his debt reduced\r\n   * @param repayer The address of the user initiating the repay(), providing the funds\r\n   * @param amount The amount repaid\r\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\r\n   **/\r\n  event Repay(\r\n    address indexed reserve,\r\n    address indexed user,\r\n    address indexed repayer,\r\n    uint256 amount,\r\n    bool useATokens\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on swapBorrowRateMode()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user swapping his rate mode\r\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\r\n   **/\r\n  event SwapBorrowRateMode(\r\n    address indexed reserve,\r\n    address indexed user,\r\n    DataTypes.InterestRateMode interestRateMode\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @param totalDebt The total isolation mode debt for the reserve\r\n   */\r\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\r\n\r\n  /**\r\n   * @dev Emitted when the user selects a certain asset category for eMode\r\n   * @param user The address of the user\r\n   * @param categoryId The category id\r\n   **/\r\n  event UserEModeSet(address indexed user, uint8 categoryId);\r\n\r\n  /**\r\n   * @dev Emitted on setUserUseReserveAsCollateral()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user enabling the usage as collateral\r\n   **/\r\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on setUserUseReserveAsCollateral()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user enabling the usage as collateral\r\n   **/\r\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on rebalanceStableBorrowRate()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user for which the rebalance has been executed\r\n   **/\r\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on flashLoan()\r\n   * @param target The address of the flash loan receiver contract\r\n   * @param initiator The address initiating the flash loan\r\n   * @param asset The address of the asset being flash borrowed\r\n   * @param amount The amount flash borrowed\r\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\r\n   * @param premium The fee flash borrowed\r\n   * @param referralCode The referral code used\r\n   **/\r\n  event FlashLoan(\r\n    address indexed target,\r\n    address initiator,\r\n    address indexed asset,\r\n    uint256 amount,\r\n    DataTypes.InterestRateMode interestRateMode,\r\n    uint256 premium,\r\n    uint16 indexed referralCode\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when a borrower is liquidated.\r\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n   * @param user The address of the borrower getting liquidated\r\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\r\n   * @param liquidator The address of the liquidator\r\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n   * to receive the underlying collateral asset directly\r\n   **/\r\n  event LiquidationCall(\r\n    address indexed collateralAsset,\r\n    address indexed debtAsset,\r\n    address indexed user,\r\n    uint256 debtToCover,\r\n    uint256 liquidatedCollateralAmount,\r\n    address liquidator,\r\n    bool receiveAToken\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when the state of a reserve is updated.\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param liquidityRate The next liquidity rate\r\n   * @param stableBorrowRate The next stable borrow rate\r\n   * @param variableBorrowRate The next variable borrow rate\r\n   * @param liquidityIndex The next liquidity index\r\n   * @param variableBorrowIndex The next variable borrow index\r\n   **/\r\n  event ReserveDataUpdated(\r\n    address indexed reserve,\r\n    uint256 liquidityRate,\r\n    uint256 stableBorrowRate,\r\n    uint256 variableBorrowRate,\r\n    uint256 liquidityIndex,\r\n    uint256 variableBorrowIndex\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\r\n   * @param reserve The address of the reserve\r\n   * @param amountMinted The amount minted to the treasury\r\n   **/\r\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\r\n\r\n  /**\r\n   * @dev Mints an `amount` of aTokens to the `onBehalfOf`\r\n   * @param asset The address of the underlying asset to mint\r\n   * @param amount The amount to mint\r\n   * @param onBehalfOf The address that will receive the aTokens\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function mintUnbacked(\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Back the current unbacked underlying with `amount` and pay `fee`.\r\n   * @param asset The address of the underlying asset to back\r\n   * @param amount The amount to back\r\n   * @param fee The amount paid in fees\r\n   **/\r\n  function backUnbacked(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 fee\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\r\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\r\n   * @param asset The address of the underlying asset to supply\r\n   * @param amount The amount to be supplied\r\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n   *   is a different wallet\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function supply(\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\r\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\r\n   * @param asset The address of the underlying asset to supply\r\n   * @param amount The amount to be supplied\r\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n   *   is a different wallet\r\n   * @param deadline The deadline timestamp that the permit is valid\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   * @param permitV The V parameter of ERC712 permit sig\r\n   * @param permitR The R parameter of ERC712 permit sig\r\n   * @param permitS The S parameter of ERC712 permit sig\r\n   **/\r\n  function supplyWithPermit(\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode,\r\n    uint256 deadline,\r\n    uint8 permitV,\r\n    bytes32 permitR,\r\n    bytes32 permitS\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\r\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\r\n   * @param asset The address of the underlying asset to withdraw\r\n   * @param amount The underlying amount to be withdrawn\r\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\r\n   * @param to The address that will receive the underlying, same as msg.sender if the user\r\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\r\n   *   different wallet\r\n   * @return The final amount withdrawn\r\n   **/\r\n  function withdraw(\r\n    address asset,\r\n    uint256 amount,\r\n    address to\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\r\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\r\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\r\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\r\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\r\n   * @param asset The address of the underlying asset to borrow\r\n   * @param amount The amount to be borrowed\r\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\r\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\r\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\r\n   * if he has been given credit delegation allowance\r\n   **/\r\n  function borrow(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode,\r\n    uint16 referralCode,\r\n    address onBehalfOf\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\r\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\r\n   * @param asset The address of the borrowed underlying asset previously borrowed\r\n   * @param amount The amount to repay\r\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\r\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\r\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\r\n   * other borrower whose debt should be removed\r\n   * @return The final amount repaid\r\n   **/\r\n  function repay(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode,\r\n    address onBehalfOf\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\r\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\r\n   * @param asset The address of the borrowed underlying asset previously borrowed\r\n   * @param amount The amount to repay\r\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\r\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\r\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\r\n   * other borrower whose debt should be removed\r\n   * @param deadline The deadline timestamp that the permit is valid\r\n   * @param permitV The V parameter of ERC712 permit sig\r\n   * @param permitR The R parameter of ERC712 permit sig\r\n   * @param permitS The S parameter of ERC712 permit sig\r\n   * @return The final amount repaid\r\n   **/\r\n  function repayWithPermit(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode,\r\n    address onBehalfOf,\r\n    uint256 deadline,\r\n    uint8 permitV,\r\n    bytes32 permitR,\r\n    bytes32 permitS\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\r\n   * equivalent debt tokens\r\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\r\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\r\n   * balance is not enough to cover the whole debt\r\n   * @param asset The address of the borrowed underlying asset previously borrowed\r\n   * @param amount The amount to repay\r\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\r\n   * @return The final amount repaid\r\n   **/\r\n  function repayWithATokens(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\r\n   * @param asset The address of the underlying asset borrowed\r\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\r\n   **/\r\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\r\n\r\n  /**\r\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\r\n   * - Users can be rebalanced if the following conditions are satisfied:\r\n   *     1. Usage ratio is above 95%\r\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\r\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\r\n   * @param asset The address of the underlying asset borrowed\r\n   * @param user The address of the user to be rebalanced\r\n   **/\r\n  function rebalanceStableBorrowRate(address asset, address user) external;\r\n\r\n  /**\r\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\r\n   * @param asset The address of the underlying asset supplied\r\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\r\n   **/\r\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\r\n\r\n  /**\r\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\r\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\r\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\r\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n   * @param user The address of the borrower getting liquidated\r\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n   * to receive the underlying collateral asset directly\r\n   **/\r\n  function liquidationCall(\r\n    address collateralAsset,\r\n    address debtAsset,\r\n    address user,\r\n    uint256 debtToCover,\r\n    bool receiveAToken\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\r\n   * as long as the amount taken plus a fee is returned.\r\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\r\n   * into consideration. For further details please visit https://developers.aave.com\r\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\r\n   * @param assets The addresses of the assets being flash-borrowed\r\n   * @param amounts The amounts of the assets being flash-borrowed\r\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\r\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\r\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\r\n   * @param params Variadic packed params to pass to the receiver as extra information\r\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function flashLoan(\r\n    address receiverAddress,\r\n    address[] calldata assets,\r\n    uint256[] calldata amounts,\r\n    uint256[] calldata interestRateModes,\r\n    address onBehalfOf,\r\n    bytes calldata params,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\r\n   * as long as the amount taken plus a fee is returned.\r\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\r\n   * into consideration. For further details please visit https://developers.aave.com\r\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\r\n   * @param asset The address of the asset being flash-borrowed\r\n   * @param amount The amount of the asset being flash-borrowed\r\n   * @param params Variadic packed params to pass to the receiver as extra information\r\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function flashLoanSimple(\r\n    address receiverAddress,\r\n    address asset,\r\n    uint256 amount,\r\n    bytes calldata params,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Returns the user account data across all the reserves\r\n   * @param user The address of the user\r\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\r\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\r\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\r\n   * @return currentLiquidationThreshold The liquidation threshold of the user\r\n   * @return ltv The loan to value of The user\r\n   * @return healthFactor The current health factor of the user\r\n   **/\r\n  function getUserAccountData(address user)\r\n    external\r\n    view\r\n    returns (\r\n      uint256 totalCollateralBase,\r\n      uint256 totalDebtBase,\r\n      uint256 availableBorrowsBase,\r\n      uint256 currentLiquidationThreshold,\r\n      uint256 ltv,\r\n      uint256 healthFactor\r\n    );\r\n\r\n  /**\r\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\r\n   * interest rate strategy\r\n   * @dev Only callable by the PoolConfigurator contract\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\r\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\r\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\r\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\r\n   **/\r\n  function initReserve(\r\n    address asset,\r\n    address aTokenAddress,\r\n    address stableDebtAddress,\r\n    address variableDebtAddress,\r\n    address interestRateStrategyAddress\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Drop a reserve\r\n   * @dev Only callable by the PoolConfigurator contract\r\n   * @param asset The address of the underlying asset of the reserve\r\n   **/\r\n  function dropReserve(address asset) external;\r\n\r\n  /**\r\n   * @notice Updates the address of the interest rate strategy contract\r\n   * @dev Only callable by the PoolConfigurator contract\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @param rateStrategyAddress The address of the interest rate strategy contract\r\n   **/\r\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\r\n    external;\r\n\r\n  /**\r\n   * @notice Sets the configuration bitmap of the reserve as a whole\r\n   * @dev Only callable by the PoolConfigurator contract\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @param configuration The new configuration bitmap\r\n   **/\r\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\r\n    external;\r\n\r\n  /**\r\n   * @notice Returns the configuration of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The configuration of the reserve\r\n   **/\r\n  function getConfiguration(address asset)\r\n    external\r\n    view\r\n    returns (DataTypes.ReserveConfigurationMap memory);\r\n\r\n  /**\r\n   * @notice Returns the configuration of the user across all the reserves\r\n   * @param user The user address\r\n   * @return The configuration of the user\r\n   **/\r\n  function getUserConfiguration(address user)\r\n    external\r\n    view\r\n    returns (DataTypes.UserConfigurationMap memory);\r\n\r\n  /**\r\n   * @notice Returns the normalized income normalized income of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The reserve's normalized income\r\n   */\r\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the normalized variable debt per unit of asset\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The reserve normalized variable debt\r\n   */\r\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the state and configuration of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The state and configuration data of the reserve\r\n   **/\r\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\r\n\r\n  /**\r\n   * @notice Validates and finalizes an aToken transfer\r\n   * @dev Only callable by the overlying aToken of the `asset`\r\n   * @param asset The address of the underlying asset of the aToken\r\n   * @param from The user from which the aTokens are transferred\r\n   * @param to The user receiving the aTokens\r\n   * @param amount The amount being transferred/withdrawn\r\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\r\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\r\n   */\r\n  function finalizeTransfer(\r\n    address asset,\r\n    address from,\r\n    address to,\r\n    uint256 amount,\r\n    uint256 balanceFromBefore,\r\n    uint256 balanceToBefore\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Returns the list of the underlying assets of all the initialized reserves\r\n   * @dev It does not include dropped reserves\r\n   * @return The addresses of the underlying assets of the initialized reserves\r\n   **/\r\n  function getReservesList() external view returns (address[] memory);\r\n\r\n  /**\r\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\r\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\r\n   * @return The address of the reserve associated with id\r\n   **/\r\n  function getReserveAddressById(uint16 id) external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns the PoolAddressesProvider connected to this contract\r\n   * @return The address of the PoolAddressesProvider\r\n   **/\r\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\r\n\r\n  /**\r\n   * @notice Updates the protocol fee on the bridging\r\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\r\n   */\r\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\r\n\r\n  /**\r\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\r\n   * - A part is sent to aToken holders as extra, one time accumulated interest\r\n   * - A part is collected by the protocol treasury\r\n   * @dev The total premium is calculated on the total borrowed amount\r\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\r\n   * @dev Only callable by the PoolConfigurator contract\r\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\r\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\r\n   */\r\n  function updateFlashloanPremiums(\r\n    uint128 flashLoanPremiumTotal,\r\n    uint128 flashLoanPremiumToProtocol\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Configures a new category for the eMode.\r\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\r\n   * The category 0 is reserved as it's the default for volatile assets\r\n   * @param id The id of the category\r\n   * @param config The configuration of the category\r\n   */\r\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\r\n\r\n  /**\r\n   * @notice Returns the data of an eMode category\r\n   * @param id The id of the category\r\n   * @return The configuration data of the category\r\n   */\r\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\r\n\r\n  /**\r\n   * @notice Allows a user to use the protocol in eMode\r\n   * @param categoryId The id of the category\r\n   */\r\n  function setUserEMode(uint8 categoryId) external;\r\n\r\n  /**\r\n   * @notice Returns the eMode the user is using\r\n   * @param user The address of the user\r\n   * @return The eMode id\r\n   */\r\n  function getUserEMode(address user) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Resets the isolation mode total debt of the given asset to zero\r\n   * @dev It requires the given asset has zero debt ceiling\r\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\r\n   */\r\n  function resetIsolationModeTotalDebt(address asset) external;\r\n\r\n  /**\r\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\r\n   * @return The percentage of available liquidity to borrow, expressed in bps\r\n   */\r\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the total fee on flash loans\r\n   * @return The total fee on flashloans\r\n   */\r\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\r\n\r\n  /**\r\n   * @notice Returns the part of the bridge fees sent to protocol\r\n   * @return The bridge fee sent to the protocol treasury\r\n   */\r\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the part of the flashloan fees sent to protocol\r\n   * @return The flashloan fee sent to the protocol treasury\r\n   */\r\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\r\n\r\n  /**\r\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\r\n   * @return The maximum number of reserves supported\r\n   */\r\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\r\n\r\n  /**\r\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\r\n   * @param assets The list of reserves for which the minting needs to be executed\r\n   **/\r\n  function mintToTreasury(address[] calldata assets) external;\r\n\r\n  /**\r\n   * @notice Rescue and transfer tokens locked in this contract\r\n   * @param token The address of the token\r\n   * @param to The address of the recipient\r\n   * @param amount The amount of token to transfer\r\n   */\r\n  function rescueTokens(\r\n    address token,\r\n    address to,\r\n    uint256 amount\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\r\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\r\n   * @dev Deprecated: Use the `supply` function instead\r\n   * @param asset The address of the underlying asset to supply\r\n   * @param amount The amount to be supplied\r\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n   *   is a different wallet\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function deposit(\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode\r\n  ) external;\r\n}\r\n\r\n/**\r\n * @title IScaledBalanceToken\r\n * @author Aave\r\n * @notice Defines the basic interface for a scaledbalance token.\r\n **/\r\ninterface IScaledBalanceToken {\r\n  /**\r\n   * @dev Emitted after the mint action\r\n   * @param caller The address performing the mint\r\n   * @param onBehalfOf The address of the user that will receive the minted scaled balance tokens\r\n   * @param value The amount being minted (user entered amount + balance increase from interest)\r\n   * @param balanceIncrease The increase in balance since the last action of the user\r\n   * @param index The next liquidity index of the reserve\r\n   **/\r\n  event Mint(\r\n    address indexed caller,\r\n    address indexed onBehalfOf,\r\n    uint256 value,\r\n    uint256 balanceIncrease,\r\n    uint256 index\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted after scaled balance tokens are burned\r\n   * @param from The address from which the scaled tokens will be burned\r\n   * @param target The address that will receive the underlying, if any\r\n   * @param value The amount being burned (user entered amount - balance increase from interest)\r\n   * @param balanceIncrease The increase in balance since the last action of the user\r\n   * @param index The next liquidity index of the reserve\r\n   **/\r\n  event Burn(\r\n    address indexed from,\r\n    address indexed target,\r\n    uint256 value,\r\n    uint256 balanceIncrease,\r\n    uint256 index\r\n  );\r\n\r\n  /**\r\n   * @notice Returns the scaled balance of the user.\r\n   * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\r\n   * at the moment of the update\r\n   * @param user The user whose balance is calculated\r\n   * @return The scaled balance of the user\r\n   **/\r\n  function scaledBalanceOf(address user) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the scaled balance of the user and the scaled total supply.\r\n   * @param user The address of the user\r\n   * @return The scaled balance of the user\r\n   * @return The scaled total supply\r\n   **/\r\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\r\n\r\n  /**\r\n   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\r\n   * @return The scaled total supply\r\n   **/\r\n  function scaledTotalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns last index interest was accrued to the user's balance\r\n   * @param user The address of the user\r\n   * @return The last index interest was accrued to the user's balance, expressed in ray\r\n   **/\r\n  function getPreviousIndex(address user) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title IAaveIncentivesController\r\n * @author Aave\r\n * @notice Defines the basic interface for an Aave Incentives Controller.\r\n **/\r\ninterface IAaveIncentivesController {\r\n  /**\r\n   * @dev Emitted during `handleAction`, `claimRewards` and `claimRewardsOnBehalf`\r\n   * @param user The user that accrued rewards\r\n   * @param amount The amount of accrued rewards\r\n   */\r\n  event RewardsAccrued(address indexed user, uint256 amount);\r\n\r\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\r\n\r\n  /**\r\n   * @dev Emitted during `claimRewards` and `claimRewardsOnBehalf`\r\n   * @param user The address that accrued rewards\r\n   *\u00a0@param to The address that will be receiving the rewards\r\n   * @param claimer The address that performed the claim\r\n   * @param amount The amount of rewards\r\n   */\r\n  event RewardsClaimed(\r\n    address indexed user,\r\n    address indexed to,\r\n    address indexed claimer,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted during `setClaimer`\r\n   * @param user The address of the user\r\n   * @param claimer The address of the claimer\r\n   */\r\n  event ClaimerSet(address indexed user, address indexed claimer);\r\n\r\n  /**\r\n   * @notice Returns the configuration of the distribution for a certain asset\r\n   * @param asset The address of the reference asset of the distribution\r\n   * @return The asset index\r\n   * @return The emission per second\r\n   * @return The last updated timestamp\r\n   **/\r\n  function getAssetData(address asset)\r\n    external\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    );\r\n\r\n  /**\r\n   * LEGACY **************************\r\n   * @dev Returns the configuration of the distribution for a certain asset\r\n   * @param asset The address of the reference asset of the distribution\r\n   * @return The asset index, the emission per second and the last updated timestamp\r\n   **/\r\n  function assets(address asset)\r\n    external\r\n    view\r\n    returns (\r\n      uint128,\r\n      uint128,\r\n      uint256\r\n    );\r\n\r\n  /**\r\n   * @notice Whitelists an address to claim the rewards on behalf of another address\r\n   * @param user The address of the user\r\n   * @param claimer The address of the claimer\r\n   */\r\n  function setClaimer(address user, address claimer) external;\r\n\r\n  /**\r\n   * @notice Returns the whitelisted claimer for a certain address (0x0 if not set)\r\n   * @param user The address of the user\r\n   * @return The claimer address\r\n   */\r\n  function getClaimer(address user) external view returns (address);\r\n\r\n  /**\r\n   * @notice Configure assets for a certain rewards emission\r\n   * @param assets The assets to incentivize\r\n   * @param emissionsPerSecond The emission for each asset\r\n   */\r\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\r\n    external;\r\n\r\n  /**\r\n   * @notice Called by the corresponding asset on any update that affects the rewards distribution\r\n   * @param asset The address of the user\r\n   * @param userBalance The balance of the user of the asset in the pool\r\n   * @param totalSupply The total supply of the asset in the pool\r\n   **/\r\n  function handleAction(\r\n    address asset,\r\n    uint256 userBalance,\r\n    uint256 totalSupply\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Returns the total of rewards of a user, already accrued + not yet accrued\r\n   * @param assets The assets to accumulate rewards for\r\n   * @param user The address of the user\r\n   * @return The rewards\r\n   **/\r\n  function getRewardsBalance(address[] calldata assets, address user)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @notice Claims reward for a user, on the assets of the pool, accumulating the pending rewards\r\n   * @param assets The assets to accumulate rewards for\r\n   * @param amount Amount of rewards to claim\r\n   * @param to Address that will be receiving the rewards\r\n   * @return Rewards claimed\r\n   **/\r\n  function claimRewards(\r\n    address[] calldata assets,\r\n    uint256 amount,\r\n    address to\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @notice Claims reward for a user on its behalf, on the assets of the pool, accumulating the pending rewards.\r\n   * @dev The caller must be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\r\n   * @param assets The assets to accumulate rewards for\r\n   * @param amount The amount of rewards to claim\r\n   * @param user The address to check and claim rewards\r\n   * @param to The address that will be receiving the rewards\r\n   * @return The amount of rewards claimed\r\n   **/\r\n  function claimRewardsOnBehalf(\r\n    address[] calldata assets,\r\n    uint256 amount,\r\n    address user,\r\n    address to\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the unclaimed rewards of the user\r\n   * @param user The address of the user\r\n   * @return The unclaimed user rewards\r\n   */\r\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the user index for a specific asset\r\n   * @param user The address of the user\r\n   * @param asset The asset to incentivize\r\n   * @return The user index for the asset\r\n   */\r\n  function getUserAssetData(address user, address asset) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice for backward compatibility with previous implementation of the Incentives controller\r\n   * @return The address of the reward token\r\n   */\r\n  function REWARD_TOKEN() external view returns (address);\r\n\r\n  /**\r\n   * @notice for backward compatibility with previous implementation of the Incentives controller\r\n   * @return The precision used in the incentives controller\r\n   */\r\n  function PRECISION() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Gets the distribution end timestamp of the emissions\r\n   */\r\n  function DISTRIBUTION_END() external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title IInitializableAToken\r\n * @author Aave\r\n * @notice Interface for the initialize function on AToken\r\n **/\r\ninterface IInitializableAToken {\r\n  /**\r\n   * @dev Emitted when an aToken is initialized\r\n   * @param underlyingAsset The address of the underlying asset\r\n   * @param pool The address of the associated pool\r\n   * @param treasury The address of the treasury\r\n   * @param incentivesController The address of the incentives controller for this aToken\r\n   * @param aTokenDecimals The decimals of the underlying\r\n   * @param aTokenName The name of the aToken\r\n   * @param aTokenSymbol The symbol of the aToken\r\n   * @param params A set of encoded parameters for additional initialization\r\n   **/\r\n  event Initialized(\r\n    address indexed underlyingAsset,\r\n    address indexed pool,\r\n    address treasury,\r\n    address incentivesController,\r\n    uint8 aTokenDecimals,\r\n    string aTokenName,\r\n    string aTokenSymbol,\r\n    bytes params\r\n  );\r\n\r\n  /**\r\n   * @notice Initializes the aToken\r\n   * @param pool The pool contract that is initializing this contract\r\n   * @param treasury The address of the Aave treasury, receiving the fees on this aToken\r\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\r\n   * @param incentivesController The smart contract managing potential incentives distribution\r\n   * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\r\n   * @param aTokenName The name of the aToken\r\n   * @param aTokenSymbol The symbol of the aToken\r\n   * @param params A set of encoded parameters for additional initialization\r\n   */\r\n  function initialize(\r\n    IPool pool,\r\n    address treasury,\r\n    address underlyingAsset,\r\n    IAaveIncentivesController incentivesController,\r\n    uint8 aTokenDecimals,\r\n    string calldata aTokenName,\r\n    string calldata aTokenSymbol,\r\n    bytes calldata params\r\n  ) external;\r\n}\r\n\r\n/**\r\n * @title IAToken\r\n * @author Aave\r\n * @notice Defines the basic interface for an AToken.\r\n **/\r\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\r\n  /**\r\n   * @dev Emitted during the transfer action\r\n   * @param from The user whose tokens are being transferred\r\n   * @param to The recipient\r\n   * @param value The amount being transferred\r\n   * @param index The next liquidity index of the reserve\r\n   **/\r\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\r\n\r\n  /**\r\n   * @notice Mints `amount` aTokens to `user`\r\n   * @param caller The address performing the mint\r\n   * @param onBehalfOf The address of the user that will receive the minted aTokens\r\n   * @param amount The amount of tokens getting minted\r\n   * @param index The next liquidity index of the reserve\r\n   * @return `true` if the the previous balance of the user was 0\r\n   */\r\n  function mint(\r\n    address caller,\r\n    address onBehalfOf,\r\n    uint256 amount,\r\n    uint256 index\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @notice Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\r\n   * @dev In some instances, the mint event could be emitted from a burn transaction\r\n   * if the amount to burn is less than the interest that the user accrued\r\n   * @param from The address from which the aTokens will be burned\r\n   * @param receiverOfUnderlying The address that will receive the underlying\r\n   * @param amount The amount being burned\r\n   * @param index The next liquidity index of the reserve\r\n   **/\r\n  function burn(\r\n    address from,\r\n    address receiverOfUnderlying,\r\n    uint256 amount,\r\n    uint256 index\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Mints aTokens to the reserve treasury\r\n   * @param amount The amount of tokens getting minted\r\n   * @param index The next liquidity index of the reserve\r\n   */\r\n  function mintToTreasury(uint256 amount, uint256 index) external;\r\n\r\n  /**\r\n   * @notice Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\r\n   * @param from The address getting liquidated, current owner of the aTokens\r\n   * @param to The recipient\r\n   * @param value The amount of tokens getting transferred\r\n   **/\r\n  function transferOnLiquidation(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Transfers the underlying asset to `target`.\r\n   * @dev Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()\r\n   * @param user The recipient of the underlying\r\n   * @param amount The amount getting transferred\r\n   **/\r\n  function transferUnderlyingTo(address user, uint256 amount) external;\r\n\r\n  /**\r\n   * @notice Handles the underlying received by the aToken after the transfer has been completed.\r\n   * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the\r\n   * transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying\r\n   * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\r\n   * @param user The user executing the repayment\r\n   * @param amount The amount getting repaid\r\n   **/\r\n  function handleRepayment(address user, uint256 amount) external;\r\n\r\n  /**\r\n   * @notice Allow passing a signed message to approve spending\r\n   * @dev implements the permit function as for\r\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\r\n   * @param owner The owner of the funds\r\n   * @param spender The spender\r\n   * @param value The amount\r\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\r\n   * @param v Signature param\r\n   * @param s Signature param\r\n   * @param r Signature param\r\n   */\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 value,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\r\n   * @return The address of the underlying asset\r\n   **/\r\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns the address of the Aave treasury, receiving the fees on this aToken.\r\n   * @return Address of the Aave treasury\r\n   **/\r\n  function RESERVE_TREASURY_ADDRESS() external view returns (address);\r\n\r\n  /**\r\n   * @notice Get the domain separator for the token\r\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\r\n   * @return The domain separator of the token at current chain\r\n   */\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n  /**\r\n   * @notice Returns the nonce for owner.\r\n   * @param owner The address of the owner\r\n   * @return The nonce of the owner\r\n   **/\r\n  function nonces(address owner) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Rescue and transfer tokens locked in this contract\r\n   * @param token The address of the token\r\n   * @param to The address of the recipient\r\n   * @param amount The amount of token to transfer\r\n   */\r\n  function rescueTokens(\r\n    address token,\r\n    address to,\r\n    uint256 amount\r\n  ) external;\r\n}\r\n\r\ninterface IWBNB {\r\n  function deposit() external payable;\r\n\r\n  function withdraw(uint256) external;\r\n\r\n  function approve(address guy, uint256 wad) external returns (bool);\r\n\r\n  function transferFrom(address src, address dst, uint256 wad) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Extension of the ERC20 token contract to support token wrapping.\r\n *\r\n * Users can deposit and withdraw \"underlying tokens\" and receive a matching number of \"wrapped tokens\". This is useful\r\n * in conjunction with other modules. For example, combining this wrapping mechanism with {ERC20Votes} will allow the\r\n * wrapping of an existing \"basic\" ERC20 into a governance token.\r\n *\r\n * _Available since v4.2._\r\n */\r\ninterface IPERC20 is IERC20 {\r\n    \r\n    function underlying() external returns(address);\r\n    function depositFor(address account, uint256 amount) external returns (bool);\r\n\r\n    function withdrawTo(address account, uint256 amount) external returns (bool);\r\n\r\n}\r\n\r\nlibrary UtilLib {\r\n    error ZeroAddress();\r\n    function checkNonZeroAddress(address _address) internal pure {\r\n        if (_address == address(0)) revert ZeroAddress();\r\n    }\r\n}\r\n\r\ncontract ProtectedNativeTokenGateway is Ownable {\r\n  using GPv2SafeERC20 for IERC20;\r\n\r\n  IWBNB internal immutable WBNB;\r\n  IPool internal immutable POOL;\r\n  IPERC20 internal immutable pWBNB;\r\n\r\n  /**\r\n   * @dev Sets the WBNB address and the PoolAddressesProvider address. Infinite approves pool.\r\n   * @param wbnb Address of the Wrapped BNB contrac\r\n   **/\r\n  constructor(\r\n    address wbnb,\r\n    address pwbnb,\r\n    IPool pool\r\n  ) {\r\n    UtilLib.checkNonZeroAddress(wbnb);\r\n    UtilLib.checkNonZeroAddress(pwbnb);\r\n    UtilLib.checkNonZeroAddress(address(pool));\r\n    WBNB = IWBNB(wbnb);\r\n    pWBNB = IPERC20(pwbnb);\r\n    POOL = pool;\r\n    WBNB.approve(address(pwbnb), type(uint256).max);\r\n    IERC20(pwbnb).approve(address(pool), type(uint256).max);\r\n  }\r\n\r\n  /**\r\n   * @dev deposits pWBNB into the reserve, using native token. A corresponding amount of the overlying asset (aTokens)\r\n   * is minted.\r\n   * @param onBehalfOf address of the user who will receive the aTokens representing the deposit\r\n   * @param referralCode integrators are assigned a referral code and can potentially receive rewards.\r\n   **/\r\n  function depositProtectedBNB(\r\n    address onBehalfOf,\r\n    uint16 referralCode\r\n  ) external payable {\r\n    WBNB.deposit{value: msg.value}();\r\n    pWBNB.depositFor(address(this), msg.value);\r\n    POOL.deposit(address(pWBNB), msg.value, onBehalfOf, referralCode);\r\n  }\r\n\r\n  /**\r\n   * @dev withdraws the WBNB _reserves of msg.sender.\r\n   * @param amount amount of aWBNB to withdraw and receive native token\r\n   * @param to address of the user who will receive native token\r\n   */\r\n  function withdrawProtectedBNB(\r\n    uint256 amount,\r\n    address to\r\n  ) external {\r\n    IAToken apWBNB = IAToken(POOL.getReserveData(address(pWBNB)).aTokenAddress);\r\n    uint256 userBalance = apWBNB.balanceOf(msg.sender);\r\n    uint256 amountToWithdraw = amount;\r\n    if (amount == type(uint256).max) {\r\n      amountToWithdraw = userBalance;\r\n    }\r\n    // transfer aPToken from msg.sender to this contract\r\n    apWBNB.transferFrom(msg.sender, address(this), amountToWithdraw);\r\n    // withdraw aPToken to pToken\r\n    uint256 withdrawnAmount = POOL.withdraw(address(pWBNB), amountToWithdraw, address(this));\r\n    // withdraw the pToken to wToken first\r\n    pWBNB.withdrawTo(address(this), withdrawnAmount);\r\n    // withdraw the wToken to native token\r\n    WBNB.withdraw(withdrawnAmount);\r\n    // transfer BNB back to the caller \r\n    _safeTransferBNB(to, withdrawnAmount);\r\n  }\r\n\r\n  function withdrawBNBWithPermit(\r\n    uint256 amount,\r\n    address to,\r\n    uint256 deadline,\r\n    uint8 permitV,\r\n    bytes32 permitR,\r\n    bytes32 permitS\r\n  ) external {\r\n    IAToken apWBNB = IAToken(POOL.getReserveData(address(pWBNB)).aTokenAddress);\r\n    uint256 userBalance = apWBNB.balanceOf(msg.sender);\r\n    uint256 amountToWithdraw = amount;\r\n    if (amount == type(uint256).max) {\r\n      amountToWithdraw = userBalance;\r\n    }\r\n    // permit `amount` rather than `amountToWithdraw` to make it easier for front-ends and integrators\r\n    apWBNB.permit(msg.sender, address(this), amount, deadline, permitV, permitR, permitS);\r\n    apWBNB.transferFrom(msg.sender, address(this), amountToWithdraw);\r\n    uint256 withdrawnAmount = POOL.withdraw(address(pWBNB), amountToWithdraw, address(this));\r\n    // withdraw the pToken to wToken first\r\n    pWBNB.withdrawTo(address(this), withdrawnAmount);\r\n    // withdraw the wToken to native token\r\n    WBNB.withdraw(withdrawnAmount);\r\n    _safeTransferBNB(to, withdrawnAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev transfer native token to an address, revert if it fails.\r\n   * @param to recipient of the transfer\r\n   * @param value the amount to send\r\n   */\r\n  function _safeTransferBNB(address to, uint256 value) internal {\r\n    (bool success, ) = to.call{value: value}(new bytes(0));\r\n    require(success, 'BNB_TRANSFER_FAILED');\r\n  }\r\n\r\n  /**\r\n   * @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\r\n   * direct transfers to the contract address.\r\n   * @param token token to transfer\r\n   * @param to recipient of the transfer\r\n   * @param amount amount to send\r\n   */\r\n  function emergencyTokenTransfer(\r\n    address token,\r\n    address to,\r\n    uint256 amount\r\n  ) external onlyOwner {\r\n    IERC20(token).safeTransfer(to, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev transfer native token from the utility contract, for native token recovery in case of stuck token\r\n   * due to selfdestructs or token transfers to the pre-computed contract address before deployment.\r\n   * @param to recipient of the transfer\r\n   * @param amount amount to send\r\n   */\r\n  function emergencyBNBTransfer(address to, uint256 amount) external onlyOwner {\r\n    _safeTransferBNB(to, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Get WBNB address used by WrappedTokenGatewayV3\r\n   */\r\n  function getWBNBAddress() external view returns (address) {\r\n    return address(WBNB);\r\n  }\r\n\r\n  /**\r\n   * @dev Only WBNB contract is allowed to transfer BNB here. Prevent other addresses to send BNB to this contract.\r\n   */\r\n  receive() external payable {\r\n    require(msg.sender == address(WBNB), 'Receive not allowed');\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wbnb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pwbnb\",\"type\":\"address\"},{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"depositProtectedBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyBNBTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWBNBAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"permitV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"permitR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"permitS\",\"type\":\"bytes32\"}],\"name\":\"withdrawBNBWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawProtectedBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ProtectedNativeTokenGateway", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000cee8c9ccd07ac0981ef42f80fb63df3cc36f196e000000000000000000000000cb0620b181140e57d1c0d8b724cde623ca963c8c", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f1cf66dc32f424295b9060c56340a9cfc8d4aa52f8d9c33ea92e583bdf5dfd66"}