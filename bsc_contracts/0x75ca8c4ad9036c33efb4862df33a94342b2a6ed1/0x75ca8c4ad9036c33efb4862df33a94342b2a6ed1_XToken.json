{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-08-23\r\n*/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface NFTinfo{\r\n    function getallR() external  view returns(uint256);\r\n    function getallSSR() external  view returns(uint256);\r\n    function getssrcount(address from) external view returns(uint256,uint256);\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success,) = recipient.call{value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value : weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\ncontract Ownable is Context {\r\n    address internal _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n}\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function sync() external;\r\n}\r\ncontract XToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    \r\n    address  _holder;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 _decimals=18;\r\n\r\n    uint256 starttime;\r\n\r\n    address private lpaddress;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    mapping(address => bool) public ammPairs;\r\n\r\n    address private lpad=0xEA3D650ED0980933082A329d7fbFe33834cB88Cc;\r\n    address private rad=0x1752f5cc9501db6616492de80740Ee570A4e6beC;\r\n    address private ssrad=0xe2B851C4500ef2776a4A96C4e27c8FB50a124b24;\r\n\r\n    address private deadad=0x000000000000000000000000000000000000dEaD;\r\n\r\n    address private uad;\r\n    mapping(address=>uint256) private usersharelp;\r\n    mapping(address=>uint256) private usershareR;\r\n    mapping(address=>uint256) private usershareSSR;\r\n    \r\n\r\n    uint256[] private sharedetaillp;\r\n    uint256[] private sharedetailR;\r\n    uint256[] private sharedetailSSR;\r\n\r\n    uint256 private lpaward;\r\n    uint256 private Raward;\r\n    uint256 private SSRaward;\r\n\r\n    uint256 private maxfenhonglp=10*1e18;\r\n    uint256 private maxfenhongR=5*1e18;\r\n    uint256 private maxfenhongSSR=5*1e18;\r\n\r\n    NFTinfo private iNFTinfo;\r\n    address private nftad;\r\n\r\n    address public uniswapV2Pair;\r\n    address private noprofitaddress;\r\n\r\n    constructor(string memory name,string memory symbol,address holder,address owner) public {\r\n        _totalSupply = 3600*10**_decimals;\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _holder = holder;\r\n        _owner = owner;\r\n        \r\n        sharedetaillp.push(0);\r\n        sharedetailR.push(0);\r\n        sharedetailSSR.push(0);\r\n\r\n        nftad=0xeb5Dd8f8bC77d44741945C4d4cE8c1e65D2dfF17;\r\n        uad=0x55d398326f99059fF775485246999027B3197955;\r\n        noprofitaddress=0x1ED094cF7264CeE38c0528EE8516113F523E7539;\r\n        iNFTinfo=NFTinfo(nftad);\r\n        _balances[_holder] = _totalSupply;\r\n        \r\n        emit Transfer(address(0), _holder, _totalSupply);\r\n\r\n        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        // uniswapV2Router = IUniswapV2Router02(0xCc7aDc94F3D80127849D2b41b6439b7CF1eB4Ae0);\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n        .createPair(address(this), uad);\r\n        lpaddress=address(uniswapV2Pair);\r\n        ammPairs[uniswapV2Pair] = true;\r\n        starttime=1680700680;\r\n      \r\n    }\r\n    \r\n    \r\n     function _isLiquidity(address from, address to) internal view returns (bool isAdd, bool isDel, bool isSell, bool isBuy){\r\n        address token0 = IUniswapV2Pair(address(uniswapV2Pair)).token0();\r\n        (uint r0,,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();\r\n        uint bal0 = IERC20(token0).balanceOf(address(uniswapV2Pair));\r\n\r\n        \r\n        if (ammPairs[to]) {\r\n            if (token0 != address(this) && bal0 > r0) {\r\n                isAdd = bal0 - r0 > 0;\r\n            }\r\n            if (!isAdd) {\r\n                isSell = true;\r\n            }\r\n        }\r\n        if (ammPairs[from]) {\r\n            if (token0 != address(this) && bal0 < r0) {\r\n                isDel = r0 - bal0 > 0;\r\n            }\r\n            if (!isDel) {\r\n                isBuy = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function burn(uint256 amount) public returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    receive() external payable {}\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n  \r\n   \r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        // require(to != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        // require(transferLock==false,\"Transaction is locked\");\r\n\r\n        \r\n        if(noprofitaddress!=from ||noprofitaddress!=to){\r\n            divshare() ;\r\n            shareoutbonus(from);\r\n            setshare(from);\r\n        }\r\n        \r\n        (bool isAdd, , bool isSell, bool isBuy) = _isLiquidity(from, to);\r\n        if(isAdd){\r\n            _balances[from] = _balances[from].sub(amount);\r\n            _balances[to] = _balances[to].add(amount);\r\n            emit Transfer(from, to, amount);\r\n        }\r\n        else if(_isExcludedFromFee[from]==true ||_isExcludedFromFee[to]==true){\r\n            _balances[from] = _balances[from].sub(amount);\r\n            _balances[to] = _balances[to].add(amount);\r\n            emit Transfer(from, to, amount);\r\n        }else{\r\n            if(isSell==true || isBuy ==true){\r\n                require(block.timestamp>=starttime,\"not start\");\r\n                _balances[from] = _balances[from].sub(amount);\r\n                _balances[to] = _balances[to].add(amount.mul(970).div(1000));\r\n       \r\n                emit Transfer(from, to, amount.mul(970).div(1000));\r\n\r\n                _balances[lpad] = _balances[lpad].add(amount.mul(15).div(1000));\r\n                lpaward=lpaward.add(amount.mul(15).div(1000));\r\n                emit Transfer(from, lpad, amount.mul(15).div(1000));\r\n\r\n                _balances[rad] = _balances[rad].add(amount.mul(75).div(10000));\r\n                Raward=Raward.add(amount.mul(75).div(10000));\r\n                emit Transfer(from, rad, amount.mul(75).div(10000));\r\n\r\n                _balances[ssrad] = _balances[ssrad].add(amount.mul(75).div(10000));\r\n                SSRaward=SSRaward.add(amount.mul(75).div(10000));\r\n                emit Transfer(from, ssrad, amount.mul(75).div(10000));\r\n\r\n            }else{\r\n                if(block.timestamp<starttime){\r\n                    _balances[from] = _balances[from].sub(amount);\r\n                    _balances[to] = _balances[to].add(amount.mul(90).div(100));\r\n\r\n                    // _burn(deadad,amount.mul(10).div(100));\r\n                    emit Transfer(from, to, amount);\r\n\r\n                    _totalSupply = _totalSupply.sub(amount.mul(10).div(100));\r\n                    _balances[deadad] = _balances[deadad].add(amount.mul(10).div(100));\r\n                    emit Transfer(from, deadad, amount.mul(10).div(100));\r\n                }else{\r\n                    _balances[from] = _balances[from].sub(amount);\r\n                    _balances[to] = _balances[to].add(amount.mul(97).div(100));\r\n\r\n                    // _burn(deadad,amount.mul(3).div(100));\r\n                    emit Transfer(from, to, amount);\r\n\r\n                    _totalSupply = _totalSupply.sub(amount.mul(3).div(100));\r\n                    _balances[deadad] = _balances[deadad].add(amount.mul(3).div(100));\r\n                    emit Transfer(from, deadad, amount.mul(3).div(100));\r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    function setstarttime(uint256 _starttime) public onlyOwner{\r\n        starttime=_starttime;\r\n    }\r\n    function setshare(address owner) private {\r\n        uint lpAmount = IERC20(lpaddress).balanceOf(owner);\r\n        if(lpAmount>0){\r\n            usersharelp[owner]=sharedetaillp.length-1;\r\n        }\r\n        (uint256 Rcount,uint256 SSRcount)=iNFTinfo.getssrcount(owner);\r\n        if(Rcount>0){\r\n            usershareR[owner]=sharedetailR.length-1;\r\n        }\r\n        if(SSRcount>0){\r\n            usershareSSR[owner]=sharedetailSSR.length-1;\r\n        }\r\n    }\r\n\r\n    function testcount(address _fromad) public view returns(uint256,uint256){\r\n        (uint256 Rcount,uint256 SSRcount)=iNFTinfo.getssrcount(_fromad);\r\n        return (Rcount,SSRcount);\r\n    }\r\n\r\n    function divshare() private{\r\n        if (lpaward >= maxfenhonglp ) {\r\n\r\n            uint256 tmp = (lpaward.mul(1e18)).div(IERC20(lpaddress).totalSupply()-IERC20(lpaddress).balanceOf(noprofitaddress));\r\n            if(tmp>0){\r\n               sharedetaillp.push(tmp);\r\n               lpaward = 0; \r\n            }\r\n            \r\n        }\r\n        if(Raward>=maxfenhongR && iNFTinfo.getallR()>0){\r\n            uint256 tmp = Raward.mul(1e18).div(iNFTinfo.getallR());\r\n            sharedetailR.push(tmp);\r\n            Raward = 0;\r\n        }\r\n        if(SSRaward>=maxfenhongSSR && iNFTinfo.getallSSR()>0){\r\n            uint256 tmp = SSRaward.mul(1e18).div(iNFTinfo.getallSSR());\r\n            sharedetailSSR.push(tmp);\r\n            SSRaward = 0;\r\n        }\r\n    }\r\n\r\n    function setnoprofitaddress(address _fromad) public onlyOwner{\r\n        noprofitaddress=_fromad;\r\n    }\r\n    function shareoutbonus(address owner) private {\r\n        uint256 lpvalue = IERC20(lpaddress).balanceOf(owner);\r\n        if (lpvalue > 0) {\r\n            uint256 tmp;\r\n            if (usersharelp[owner] < sharedetaillp.length-1) {\r\n                for (uint256 i = usersharelp[owner]+1; i < sharedetaillp.length; i++) {\r\n                    tmp = tmp.add((sharedetaillp[i]).mul(lpvalue).div(1e18));\r\n                }\r\n                _transfer(lpad, owner, tmp);\r\n                usersharelp[owner] = sharedetaillp.length-1;\r\n            }\r\n        }\r\n\r\n        (uint256 Rcount,uint256 SSRcount)=iNFTinfo.getssrcount(owner);\r\n        if (Rcount > 0) {\r\n            uint256 tmp;\r\n            if (usershareR[owner] < sharedetailR.length-1) {\r\n                for (uint256 i = usershareR[owner]+1; i < sharedetailR.length; i++) {\r\n                    tmp = tmp.add((sharedetailR[i]).mul(Rcount).div(1e18));\r\n                }\r\n                _transfer(rad, owner, tmp);\r\n                usershareR[owner] = sharedetailR.length-1;\r\n            }\r\n        }\r\n\r\n        if (SSRcount > 0) {\r\n            uint256 tmp;\r\n            if (usershareSSR[owner] < sharedetailSSR.length-1) {\r\n                for (uint256 i = usersharelp[owner]+1; i < sharedetailSSR.length; i++) {\r\n                    tmp = tmp.add((sharedetailSSR[i]).mul(SSRcount).div(1e18));\r\n                }\r\n                _transfer(ssrad, owner, tmp);\r\n                usershareSSR[owner] = sharedetailSSR.length-1;\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function excludeFromFee(address[] memory accounts) public onlyOwner {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = true;\r\n        }\r\n    }\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function setlpaddress(address _lpaddress) public onlyOwner {\r\n        lpaddress = _lpaddress;\r\n    }\r\n\r\n    function setnftad(address _nftad) public onlyOwner {\r\n        nftad = _nftad;\r\n    }\r\n    \r\n    function gettoken01() public view returns (address, address, bool){\r\n        return (IUniswapV2Pair(address(uniswapV2Pair)).token0(), address(this), IUniswapV2Pair(address(uniswapV2Pair)).token0() < address(this));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gettoken01\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpaddress\",\"type\":\"address\"}],\"name\":\"setlpaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftad\",\"type\":\"address\"}],\"name\":\"setnftad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromad\",\"type\":\"address\"}],\"name\":\"setnoprofitaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_starttime\",\"type\":\"uint256\"}],\"name\":\"setstarttime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromad\",\"type\":\"address\"}],\"name\":\"testcount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000001ed094cf7264cee38c0528ee8516113f523e75390000000000000000000000006f3c9b33e7899b987cfde4a95d63a672e0c9077c0000000000000000000000000000000000000000000000000000000000000003544149000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035441490000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b062c3770b9f3cd3053d7d4cf3fb7810e6065850cef94e92e6053a8063e51c37"}