{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/src/contracts/Paychanger.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\r\\n\\r\\nlibrary Zero {\\r\\n  function requireNotZero(uint256 a) internal pure {\\r\\n    require(a != 0, \\\"require not zero\\\");\\r\\n  }\\r\\n\\r\\n  function requireNotZero(address addr) internal pure {\\r\\n    require(addr != address(0), \\\"require not zero address\\\");\\r\\n  }\\r\\n\\r\\n  function notZero(address addr) internal pure returns(bool) {\\r\\n    return !(addr == address(0));\\r\\n  }\\r\\n\\r\\n  function isZero(address addr) internal pure returns(bool) {\\r\\n    return addr == address(0);\\r\\n  }\\r\\n}\\r\\n\\r\\nlibrary Percent {\\r\\n  // Solidity automatically throws when dividing by 0\\r\\n  struct percent {\\r\\n    uint256 num;\\r\\n    uint256 den;\\r\\n  }\\r\\n  function mul(percent storage p, uint256 a) internal view returns (uint) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    return a*p.num/p.den;\\r\\n  }\\r\\n\\r\\n  function div(percent storage p, uint256 a) internal view returns (uint) {\\r\\n    return a/p.num*p.den;\\r\\n  }\\r\\n\\r\\n  function sub(percent storage p, uint256 a) internal view returns (uint) {\\r\\n    uint256 b = mul(p, a);\\r\\n    if (b >= a) return 0;\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  function add(percent storage p, uint256 a) internal view returns (uint) {\\r\\n    return a + mul(p, a);\\r\\n  }\\r\\n}\\r\\n\\r\\ncontract TokenVesting is Ownable, ReentrancyGuard{\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    struct VestingSchedule{\\r\\n        bool initialized;\\r\\n        // beneficiary of tokens after they are released\\r\\n        address  beneficiary;\\r\\n        // cliff period in seconds\\r\\n        uint256  cliff;\\r\\n        // start time of the vesting period\\r\\n        uint256  start;\\r\\n        // duration of the vesting period in seconds\\r\\n        uint256  duration;\\r\\n        // duration of a slice period for the vesting in seconds\\r\\n        uint256 slicePeriodSeconds;\\r\\n        // whether or not the vesting is revocable\\r\\n        bool  revocable;\\r\\n        // total amount of tokens to be released at the end of the vesting\\r\\n        uint256 amountTotal;\\r\\n        // amount of tokens released\\r\\n        uint256  released;\\r\\n        // whether or not the vesting has been revoked\\r\\n        bool revoked;\\r\\n    }\\r\\n\\r\\n    // address of the ERC20 token\\r\\n    IERC20 immutable private _token;\\r\\n\\r\\n    bytes32[] private vestingSchedulesIds;\\r\\n    mapping(bytes32 => VestingSchedule) private vestingSchedules;\\r\\n    uint256 private vestingSchedulesTotalAmount;\\r\\n    mapping(address => uint256) private holdersVestingCount;\\r\\n    mapping(address => uint256) internal holdersVestingTokens;\\r\\n\\r\\n    event Released(uint256 amount);\\r\\n    event Revoked();\\r\\n\\r\\n    /**\\r\\n    * @dev Reverts if no vesting schedule matches the passed identifier.\\r\\n    */\\r\\n    modifier onlyIfVestingScheduleExists(bytes32 vestingScheduleId) {\\r\\n        require(vestingSchedules[vestingScheduleId].initialized == true);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Reverts if the vesting schedule does not exist or has been revoked.\\r\\n    */\\r\\n    modifier onlyIfVestingScheduleNotRevoked(bytes32 vestingScheduleId) {\\r\\n        require(vestingSchedules[vestingScheduleId].initialized == true);\\r\\n        require(vestingSchedules[vestingScheduleId].revoked == false);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a vesting contract.\\r\\n     * @param token address of the ERC20 token contract\\r\\n     */\\r\\n    constructor(IERC20 token) {\\r\\n        _token = token;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the number of vesting schedules associated to a beneficiary.\\r\\n    * @return the number of vesting schedules\\r\\n    */\\r\\n    function getVestingSchedulesCountByBeneficiary(address _beneficiary)\\r\\n    external\\r\\n    view\\r\\n    returns(uint256){\\r\\n        return holdersVestingCount[_beneficiary];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the vesting schedule id at the given index.\\r\\n    * @return the vesting id\\r\\n    */\\r\\n    function getVestingIdAtIndex(uint256 index)\\r\\n    external\\r\\n    view\\r\\n    returns(bytes32){\\r\\n        require(index < getVestingSchedulesCount(), \\\"TokenVesting: index out of bounds\\\");\\r\\n        return vestingSchedulesIds[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Returns the vesting schedule information for a given holder and index.\\r\\n    * @return the vesting schedule structure information\\r\\n    */\\r\\n    function getVestingScheduleByAddressAndIndex(address holder, uint256 index)\\r\\n    external\\r\\n    view\\r\\n    returns(VestingSchedule memory){\\r\\n        return getVestingSchedule(computeVestingScheduleIdForAddressAndIndex(holder, index));\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    * @notice Returns the total amount of vesting schedules.\\r\\n    * @return the total amount of vesting schedules\\r\\n    */\\r\\n    function getVestingSchedulesTotalAmount()\\r\\n    public \\r\\n    view\\r\\n    returns(uint256){\\r\\n        return vestingSchedulesTotalAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the address of the ERC20 token managed by the vesting contract.\\r\\n    */\\r\\n    function getToken()\\r\\n    external\\r\\n    view\\r\\n    returns(address){\\r\\n        return address(_token);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Creates a new vesting schedule for a beneficiary.\\r\\n    * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\\r\\n    * @param _start start time of the vesting period\\r\\n    * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\\r\\n    * @param _duration duration in seconds of the period in which the tokens will vest\\r\\n    * @param _slicePeriodSeconds duration of a slice period for the vesting in seconds\\r\\n    * @param _revocable whether the vesting is revocable or not\\r\\n    * @param _amount total amount of tokens to be released at the end of the vesting\\r\\n    */\\r\\n    function createVestingSchedule(\\r\\n        address _beneficiary,\\r\\n        uint256 _start,\\r\\n        uint256 _cliff,\\r\\n        uint256 _duration,\\r\\n        uint256 _slicePeriodSeconds,\\r\\n        bool _revocable,\\r\\n        uint256 _amount\\r\\n    )\\r\\n        public\\r\\n        onlyOwner returns(bytes32) {\\r\\n\\r\\n        require(_duration > 0, \\\"TokenVesting: duration must be > 0\\\");\\r\\n        require(_amount > 0, \\\"TokenVesting: amount must be > 0\\\");\\r\\n        require(_slicePeriodSeconds >= 1, \\\"TokenVesting: slicePeriodSeconds must be >= 1\\\");\\r\\n        bytes32 vestingScheduleId = this.computeNextVestingScheduleIdForHolder(_beneficiary);\\r\\n        uint256 cliff = _start.add(_cliff);\\r\\n        vestingSchedules[vestingScheduleId] = VestingSchedule(\\r\\n            true,\\r\\n            _beneficiary,\\r\\n            cliff,\\r\\n            _start,\\r\\n            _duration,\\r\\n            _slicePeriodSeconds,\\r\\n            _revocable,\\r\\n            _amount,\\r\\n            0,\\r\\n            false\\r\\n        );\\r\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount.add(_amount);\\r\\n        vestingSchedulesIds.push(vestingScheduleId);\\r\\n        uint256 currentVestingCount = holdersVestingCount[_beneficiary];\\r\\n        holdersVestingCount[_beneficiary] = currentVestingCount.add(1);\\r\\n        holdersVestingTokens[_beneficiary] += _amount;\\r\\n        return vestingScheduleId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Revokes the vesting schedule for given identifier.\\r\\n    * @param vestingScheduleId the vesting schedule identifier\\r\\n    */\\r\\n    function revoke(bytes32 vestingScheduleId)\\r\\n        public\\r\\n        onlyOwner\\r\\n        onlyIfVestingScheduleNotRevoked(vestingScheduleId){\\r\\n        VestingSchedule storage vestingSchedule = vestingSchedules[vestingScheduleId];\\r\\n        require(vestingSchedule.revocable == true, \\\"TokenVesting: vesting is not revocable\\\");\\r\\n        /*uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\\r\\n        if(vestedAmount > 0){\\r\\n            release(vestingScheduleId, vestedAmount);\\r\\n        }*/\\r\\n        uint256 unreleased = vestingSchedule.amountTotal.sub(vestingSchedule.released);\\r\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount.sub(unreleased);\\r\\n        holdersVestingTokens[vestingSchedule.beneficiary] -= unreleased;\\r\\n        vestingSchedule.revoked = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Release vested amount of tokens.\\r\\n    * @param vestingScheduleId the vesting schedule identifier\\r\\n    * @param amount the amount to release\\r\\n    */\\r\\n    function release(\\r\\n        bytes32 vestingScheduleId,\\r\\n        address beneficiary,\\r\\n        uint256 amount\\r\\n    )\\r\\n        public\\r\\n        nonReentrant\\r\\n        onlyIfVestingScheduleNotRevoked(vestingScheduleId){\\r\\n        VestingSchedule storage vestingSchedule = vestingSchedules[vestingScheduleId];\\r\\n        bool isBeneficiary = beneficiary == vestingSchedule.beneficiary;\\r\\n        bool isOwner = beneficiary == owner();\\r\\n        require(\\r\\n            isBeneficiary || isOwner,\\r\\n            \\\"TokenVesting: only beneficiary and owner can release vested tokens\\\"\\r\\n        );\\r\\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\\r\\n        require(vestedAmount >= amount, \\\"TokenVesting: cannot release tokens, not enough vested tokens\\\");\\r\\n        vestingSchedule.released = vestingSchedule.released.add(amount);\\r\\n        //address payable beneficiaryPayable = payable(vestingSchedule.beneficiary);\\r\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount.sub(amount);\\r\\n        //_token.safeTransfer(beneficiaryPayable, amount);\\r\\n        //return amount;\\r\\n    }\\r\\n\\r\\n    function getReleasedAmountByScheduleId(bytes32 vestingScheduleId)\\r\\n        public view returns (uint256) {\\r\\n        VestingSchedule storage vestingSchedule = vestingSchedules[vestingScheduleId];\\r\\n\\r\\n        return vestingSchedule.released;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the number of vesting schedules managed by this contract.\\r\\n    * @return the number of vesting schedules\\r\\n    */\\r\\n    function getVestingSchedulesCount()\\r\\n        public\\r\\n        view\\r\\n        returns(uint256){\\r\\n        return vestingSchedulesIds.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Computes the vested amount of tokens for the given vesting schedule identifier.\\r\\n    * @return the vested amount\\r\\n    */\\r\\n    function computeReleasableAmount(bytes32 vestingScheduleId)\\r\\n        public\\r\\n        onlyIfVestingScheduleNotRevoked(vestingScheduleId)\\r\\n        view\\r\\n        returns(uint256){\\r\\n        VestingSchedule storage vestingSchedule = vestingSchedules[vestingScheduleId];\\r\\n        return _computeReleasableAmount(vestingSchedule);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Returns the vesting schedule information for a given identifier.\\r\\n    * @return the vesting schedule structure information\\r\\n    */\\r\\n    function getVestingSchedule(bytes32 vestingScheduleId)\\r\\n        public\\r\\n        view\\r\\n        returns(VestingSchedule memory){\\r\\n        return vestingSchedules[vestingScheduleId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Computes the next vesting schedule identifier for a given holder address.\\r\\n    */\\r\\n    function computeNextVestingScheduleIdForHolder(address holder)\\r\\n        public\\r\\n        view\\r\\n        returns(bytes32){\\r\\n        return computeVestingScheduleIdForAddressAndIndex(holder, holdersVestingCount[holder]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the last vesting schedule for a given holder address.\\r\\n    */\\r\\n    function getLastVestingScheduleForHolder(address holder)\\r\\n        public\\r\\n        view\\r\\n        returns(VestingSchedule memory){\\r\\n        return vestingSchedules[computeVestingScheduleIdForAddressAndIndex(holder, holdersVestingCount[holder] - 1)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Computes the vesting schedule identifier for an address and an index.\\r\\n    */\\r\\n    function computeVestingScheduleIdForAddressAndIndex(address holder, uint256 index)\\r\\n        public\\r\\n        pure\\r\\n        returns(bytes32){\\r\\n        return keccak256(abi.encodePacked(holder, index));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Computes the releasable amount of tokens for a vesting schedule.\\r\\n    * @return the amount of releasable tokens\\r\\n    */\\r\\n    function _computeReleasableAmount(VestingSchedule memory vestingSchedule)\\r\\n    internal\\r\\n    view\\r\\n    returns(uint256){\\r\\n        uint256 currentTime = getCurrentTime();\\r\\n        if ((currentTime < vestingSchedule.cliff) || vestingSchedule.revoked == true) {\\r\\n            return 0;\\r\\n        } else if (currentTime >= vestingSchedule.start.add(vestingSchedule.duration)) {\\r\\n            return vestingSchedule.amountTotal.sub(vestingSchedule.released);\\r\\n        } else {\\r\\n            uint256 timeFromStart = currentTime.sub(vestingSchedule.start);\\r\\n            uint256 secondsPerSlice = vestingSchedule.slicePeriodSeconds;\\r\\n            uint256 vestedSlicePeriods = timeFromStart.div(secondsPerSlice);\\r\\n            uint256 vestedSeconds = vestedSlicePeriods.mul(secondsPerSlice);\\r\\n            uint256 vestedAmount = vestingSchedule.amountTotal.mul(vestedSeconds).div(vestingSchedule.duration);\\r\\n            vestedAmount = vestedAmount.sub(vestingSchedule.released);\\r\\n            return vestedAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getCurrentTime()\\r\\n        internal\\r\\n        virtual\\r\\n        view\\r\\n        returns(uint256){\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    function getVestingAmountByAddress(address holder) public view returns(uint256) {\\r\\n        return holdersVestingTokens[holder];\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\ncontract UsersStorage is Ownable {\\r\\n\\r\\n  struct userSubscription {\\r\\n    uint256 value;\\r\\n    uint256 valueUsd;\\r\\n    uint256 releasedUsd;\\r\\n    uint256 startFrom;\\r\\n    uint256 endDate;\\r\\n    uint256 takenFromPool;\\r\\n    uint256 takenFromPoolUsd;\\r\\n    bytes32 vestingId;\\r\\n    bool active;\\r\\n    bool haveVesting;\\r\\n    bool vestingPaid;\\r\\n  }\\r\\n\\r\\n  struct user {\\r\\n    uint256 keyIndex;\\r\\n    uint256 bonusUsd;\\r\\n    uint256 refBonus;\\r\\n    uint256 turnoverToken;\\r\\n    uint256 turnoverUsd;\\r\\n    uint256 refFirst;\\r\\n    uint256 careerPercent;\\r\\n    userSubscription[] subscriptions;\\r\\n  }\\r\\n\\r\\n  struct itmap {\\r\\n    mapping(address => user) data;\\r\\n    address[] keys;\\r\\n  }\\r\\n  \\r\\n  itmap internal s;\\r\\n\\r\\n  bool public stopMintBonusUsd;\\r\\n\\r\\n  constructor(address wallet) {\\r\\n    insertUser(wallet);\\r\\n    s.data[wallet].bonusUsd += 1000000;\\r\\n  }\\r\\n\\r\\n  function insertUser(address addr) public onlyOwner returns (bool) {\\r\\n    uint256 keyIndex = s.data[addr].keyIndex;\\r\\n    if (keyIndex != 0) return false;\\r\\n\\r\\n    uint256 keysLength = s.keys.length;\\r\\n    keyIndex = keysLength+1;\\r\\n    \\r\\n    s.data[addr].keyIndex = keyIndex;\\r\\n    s.keys.push(addr);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function insertSubscription(bytes32 vestingId, address addr, uint256 value, uint256 valueUsd) public onlyOwner returns (bool) {\\r\\n    if (s.data[addr].keyIndex == 0) return false;\\r\\n\\r\\n    s.data[addr].subscriptions.push(\\r\\n      userSubscription(value, valueUsd, 0, block.timestamp, 0, 0, 0, vestingId, true, vestingId != bytes32(0) ? true : false, false)\\r\\n    );\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function setNotActiveSubscription(address addr, uint256 index) public onlyOwner returns (bool) {\\r\\n      s.data[addr].subscriptions[index].endDate = block.timestamp;\\r\\n      s.data[addr].subscriptions[index].active = false;\\r\\n\\r\\n      return true;\\r\\n  }\\r\\n\\r\\n  function setCareerPercent(address addr, uint256 careerPercent) public onlyOwner {\\r\\n    s.data[addr].careerPercent = careerPercent;\\r\\n  }\\r\\n\\r\\n  function setBonusUsd(address addr, uint256 bonusUsd, bool increment) public onlyOwner returns (bool) {\\r\\n    if (s.data[addr].keyIndex == 0) return false;\\r\\n\\r\\n    address systemAddress = s.keys[0];\\r\\n\\r\\n    if (increment) {\\r\\n        if (s.data[systemAddress].bonusUsd < bonusUsd && !stopMintBonusUsd) {\\r\\n            s.data[systemAddress].bonusUsd += 1000000;\\r\\n        }\\r\\n        \\r\\n        if (s.data[systemAddress].bonusUsd >= bonusUsd) {\\r\\n            s.data[systemAddress].bonusUsd -= bonusUsd;\\r\\n            s.data[addr].bonusUsd += bonusUsd;\\r\\n        }\\r\\n        \\r\\n    } else {\\r\\n        s.data[systemAddress].bonusUsd += bonusUsd;\\r\\n        s.data[addr].bonusUsd -= bonusUsd;\\r\\n    }\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function setTakenFromPool(address addr, uint256 index, uint256 value, uint256 valueUsd) public onlyOwner returns (bool) {\\r\\n    if (s.data[addr].keyIndex == 0) return false;\\r\\n    s.data[addr].subscriptions[index].takenFromPool += value;\\r\\n    s.data[addr].subscriptions[index].takenFromPoolUsd += valueUsd;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function addTurnover(address addr, uint256 turnoverUsd) public onlyOwner {\\r\\n    s.data[addr].turnoverUsd += turnoverUsd; \\r\\n  }\\r\\n  \\r\\n  function addRefBonus(address addr, uint256 refBonus, uint256 level) public onlyOwner returns (bool) {\\r\\n    if (s.data[addr].keyIndex == 0) return false;\\r\\n    s.data[addr].refBonus += refBonus;\\r\\n\\r\\n    if (level == 1) {\\r\\n     s.data[addr].refFirst += refBonus;\\r\\n    }  \\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function setStopMintBonusUsd() public onlyOwner {\\r\\n    stopMintBonusUsd = !stopMintBonusUsd;\\r\\n  }\\r\\n\\r\\n  function setSubscriptionReleasedUsd(address addr, uint256 index, uint256 releasedUsd) public onlyOwner returns(bool) {\\r\\n    s.data[addr].subscriptions[index].releasedUsd += releasedUsd;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function userTurnover(address addr) public view returns(uint, uint, uint) {\\r\\n    return (\\r\\n        s.data[addr].turnoverToken,\\r\\n        s.data[addr].turnoverUsd,\\r\\n        s.data[addr].careerPercent\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function userReferralBonuses(address addr) public view returns(uint, uint) {\\r\\n    return (\\r\\n        s.data[addr].refFirst,\\r\\n        s.data[addr].refBonus\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function userSingleSubscriptionActive(address addr, uint256 index) public view returns(bytes32, uint256, bool, bool, bool) {\\r\\n     return (\\r\\n      s.data[addr].subscriptions[index].vestingId,\\r\\n      s.data[addr].subscriptions[index].valueUsd,\\r\\n      s.data[addr].subscriptions[index].active,\\r\\n      s.data[addr].subscriptions[index].vestingPaid,\\r\\n      s.data[addr].subscriptions[index].haveVesting\\r\\n    );   \\r\\n  }\\r\\n\\r\\n  function userSubscriptionReleasedUsd(address addr, uint256 index) public view returns(uint256, uint256) {\\r\\n    return (\\r\\n        s.data[addr].subscriptions[index].releasedUsd,\\r\\n        s.data[addr].subscriptions[index].takenFromPoolUsd\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function userSingleSubscriptionStruct(address addr, uint256 index) public view returns(userSubscription memory) {\\r\\n     return (\\r\\n      s.data[addr].subscriptions[index]\\r\\n    );   \\r\\n  }\\r\\n\\r\\n  function userSingleSubscriptionPool(address addr, uint256 index) public view returns(uint, uint, uint, uint, uint, bool) {\\r\\n    return (\\r\\n      s.data[addr].subscriptions[index].valueUsd,\\r\\n      s.data[addr].subscriptions[index].startFrom,\\r\\n      s.data[addr].subscriptions[index].endDate,\\r\\n      s.data[addr].subscriptions[index].takenFromPool,\\r\\n      s.data[addr].subscriptions[index].takenFromPoolUsd,\\r\\n      s.data[addr].subscriptions[index].active\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function contains(address addr) public view returns (bool) {\\r\\n    return s.data[addr].keyIndex > 0;\\r\\n  }\\r\\n\\r\\n  function haveValue(address addr) public view returns (bool) {\\r\\n    if (s.data[addr].subscriptions.length > 0) {\\r\\n        for(uint256 i = 0; i < s.data[addr].subscriptions.length; i++) {\\r\\n            if (s.data[addr].subscriptions[i].active) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    } else {\\r\\n        return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function isFirstValue(address addr) public view returns (bool) {\\r\\n    if (s.data[addr].subscriptions.length > 0) {\\r\\n      return false;\\r\\n    } else {\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getBonusUsd(address addr) public view returns (uint) {\\r\\n    return s.data[addr].bonusUsd;\\r\\n  }\\r\\n\\r\\n  function getCareerPercent(address addr) public view returns (uint) {\\r\\n    return s.data[addr].careerPercent;\\r\\n  }\\r\\n\\r\\n  function getTotalSubscription(address addr) public view returns (uint) {\\r\\n      return s.data[addr].subscriptions.length;\\r\\n  }\\r\\n\\r\\n  function size() public view returns (uint) {\\r\\n    return s.keys.length;\\r\\n  }\\r\\n\\r\\n  function getUserAddress(uint256 index) public view returns (address) {\\r\\n    return s.keys[index];\\r\\n  }\\r\\n}\\r\\n\\r\\ncontract PoolApi is ChainlinkClient, Ownable {\\r\\n    using Chainlink for Chainlink.Request;\\r\\n    bytes32 private jobId;\\r\\n    uint256 private fee;\\r\\n    bool public canset;\\r\\n    string public api;\\r\\n    mapping(address => uint256) public userPools;\\r\\n    address admin;\\r\\n\\r\\n    event RequestVolume(bytes32 indexed requestId, string data, address user);\\r\\n\\r\\n    constructor(address _admin) {\\r\\n      admin = _admin;\\r\\n      canset = true;\\r\\n        setChainlinkToken(0x404460C6A5EdE2D891e8297795264fDe62ADBB75);\\r\\n        setChainlinkOracle(0x9bA20D237964ce692A73168AdA08163807368040);\\r\\n        jobId = \\\"cd99bc931eea4432abb6b99e9819101d\\\"; //string\\r\\n        fee = (15 * LINK_DIVISIBILITY) / 100; // 0,15 * 10**18 (Varies by network and job)\\r\\n        api = \\\"https://api.paychanger.io/api/v1/contract/poolamount/\\\";\\r\\n    }\\r\\n\\r\\n    function setData(address _addr, uint256 _volume) public {\\r\\n      require(msg.sender == admin, \\\"You havent access to this function\\\");\\r\\n      require(canset == true, \\\"Manual method blocked\\\");\\r\\n      userPools[_addr] = _volume;\\r\\n    }\\r\\n\\r\\n    function changeOracleData(address _oracle, bytes32 _job, uint256 _fee) public {\\r\\n      require(msg.sender == admin, \\\"You havent access to this function\\\");\\r\\n      setChainlinkOracle(_oracle);\\r\\n      jobId = _job;\\r\\n      fee = _fee;\\r\\n    }\\r\\n\\r\\n    function changeCanSet() public {\\r\\n      require(msg.sender == admin, \\\"You havent access to this function\\\");\\r\\n      canset = false;\\r\\n    }\\r\\n\\r\\n    function requestVolumeData(address wallet) public onlyOwner returns (bytes32 requestId) {\\r\\n\\r\\n      Chainlink.Request memory req = buildChainlinkRequest(\\r\\n          jobId,\\r\\n          address(this),\\r\\n          this.fulfill.selector\\r\\n      );\\r\\n\\r\\n      req.add(\\r\\n          \\\"get\\\",\\r\\n          string(\\r\\n              abi.encodePacked(\\r\\n                  api,\\r\\n                  addressToString(wallet)\\r\\n              )\\r\\n          )\\r\\n      );\\r\\n\\r\\n      req.add(\\\"path1\\\", \\\"poolamount\\\"); \\r\\n\\r\\n      int256 timesAmount = 10 ** 18;\\r\\n      req.addInt(\\\"times\\\", timesAmount);\\r\\n\\r\\n      return sendChainlinkRequest(req, fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Receive the response in the form of uint256\\r\\n     */\\r\\n    function fulfill(\\r\\n        bytes32 _requestId,\\r\\n        string calldata _apidata\\r\\n    ) public recordChainlinkFulfillment(_requestId) {\\r\\n        emit RequestVolume(_requestId, _apidata, msg.sender);\\r\\n        string memory _data = _apidata;\\r\\n        (uint256 _volume, address _addr) = splitString(_data);\\r\\n        userPools[_addr] = _volume;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Allow withdraw of Link tokens from the contract\\r\\n     */\\r\\n    function withdrawLink() public onlyOwner {\\r\\n        LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\\r\\n        require(\\r\\n            link.transfer(msg.sender, link.balanceOf(address(this))),\\r\\n            \\\"Unable to transfer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getUserPoolAmount(address addr) public view returns (uint256 poolAmount) {\\r\\n      poolAmount = userPools[addr];\\r\\n    }\\r\\n\\r\\n    function addressToString(address _address) internal pure returns(string memory) {\\r\\n        bytes32 _bytes = bytes32(uint256(uint160(_address)));\\r\\n        bytes memory HEX = \\\"0123456789abcdef\\\";\\r\\n        bytes memory _string = new bytes(42);\\r\\n        _string[0] = '0';\\r\\n        _string[1] = 'x';\\r\\n        for(uint i = 0; i < 20; i++) {\\r\\n            _string[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\\r\\n            _string[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\r\\n        }\\r\\n        return string(_string);\\r\\n    }\\r\\n\\r\\n    function splitString(string memory input) public pure returns (uint256, address) {\\r\\n        bytes memory inputBytes = bytes(input);\\r\\n        uint256 delimiterIndex = indexOf(inputBytes, \\\"_\\\");\\r\\n\\r\\n        bytes memory uint256Part = new bytes(delimiterIndex);\\r\\n        bytes memory addressPart = new bytes(inputBytes.length - delimiterIndex - 1);\\r\\n\\r\\n        for (uint256 i = 0; i < delimiterIndex; i++) {\\r\\n            uint256Part[i] = inputBytes[i];\\r\\n        }\\r\\n        for (uint256 i = 0; i < inputBytes.length - delimiterIndex - 1; i++) {\\r\\n            addressPart[i] = inputBytes[i + delimiterIndex + 1];\\r\\n        }\\r\\n\\r\\n        uint256 value = bytesToUint(uint256Part);\\r\\n        address addr = bytesToAddress(addressPart);\\r\\n\\r\\n        return (value, addr);\\r\\n    }\\r\\n\\r\\n    function indexOf(bytes memory inputBytes, string memory delimiter) private pure returns (uint256) {\\r\\n        bytes memory delimiterBytes = bytes(delimiter);\\r\\n        for (uint256 i = 0; i <= inputBytes.length - delimiterBytes.length; i++) {\\r\\n            bool found = true;\\r\\n            for (uint256 j = 0; j < delimiterBytes.length; j++) {\\r\\n                if (inputBytes[i + j] != delimiterBytes[j]) {\\r\\n                    found = false;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            if (found) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n        return inputBytes.length;\\r\\n    }\\r\\n    \\r\\n    function bytesToUint(bytes memory input) private pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        for (uint256 i = 0; i < input.length; i++) {\\r\\n            uint8 digit = uint8(input[i]) - 48; // Convert ASCII to integer (0-9)\\r\\n            result = result * 10 + digit;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n    \\r\\n    function bytesToAddress(bytes memory input) private pure returns (address) {\\r\\n        require(input.length == 42, \\\"Invalid address length\\\");\\r\\n        bytes memory addressBytes = new bytes(20);\\r\\n        for (uint256 i = 2; i < input.length; i += 2) {\\r\\n            addressBytes[(i - 2) / 2] = bytes1((uint8(fromHexChar(input[i])) * 16) + uint8(fromHexChar(input[i + 1])));\\r\\n        }\\r\\n        return address(bytes20(addressBytes));\\r\\n    }\\r\\n    \\r\\n    function fromHexChar(bytes1 c) private pure returns (uint8) {\\r\\n        if (c >= bytes1(\\\"0\\\") && c <= bytes1(\\\"9\\\")) {\\r\\n            return uint8(c) - 48; // ASCII(\\\"0\\\") = 48\\r\\n        }\\r\\n        if (c >= bytes1(\\\"a\\\") && c <= bytes1(\\\"f\\\")) {\\r\\n            return uint8(c) - 87; // ASCII(\\\"a\\\") = 97\\r\\n        }\\r\\n        if (c >= bytes1(\\\"A\\\") && c <= bytes1(\\\"F\\\")) {\\r\\n            return uint8(c) - 55; // ASCII(\\\"A\\\") = 65\\r\\n        }\\r\\n        revert(\\\"Invalid hex character\\\");\\r\\n    }\\r\\n\\r\\n    function getContractAddress() public view returns(address) {\\r\\n      return address(this);\\r\\n    } \\r\\n}\\r\\n\\r\\nerror packageBuy__Failed();\\r\\nerror payment__Failed();\\r\\n\\r\\ncontract Paychanger is Context, Ownable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Percent for Percent.percent;\\r\\n    using Zero for *;\\r\\n\\r\\n    struct careerInfo {\\r\\n      uint256 percentFrom;\\r\\n      uint256 turnoverFrom;\\r\\n      uint256 turnoverTo;\\r\\n    }\\r\\n\\r\\n    careerInfo[] public career;\\r\\n\\r\\n    struct poolTransaction {\\r\\n      uint256 date;\\r\\n      uint256 value;\\r\\n    }\\r\\n\\r\\n    poolTransaction[] public pools;\\r\\n\\r\\n    struct subscriptionInfo {\\r\\n      bytes32 uid;\\r\\n      uint256 valueUsd;\\r\\n      uint256 releasedUsdAmount;\\r\\n      uint256 takenFromPoolUsd;\\r\\n      bool active;\\r\\n      bool vestingPaid;\\r\\n      bool haveVesting;\\r\\n    }\\r\\n\\r\\n    uint256 public freezeInPools;\\r\\n\\r\\n    mapping(uint256 => uint256[]) public openedSubscriptions;\\r\\n    mapping(uint256 => uint256[]) public closedSubscriptions;\\r\\n    mapping(address => uint256) public takenFromPools;\\r\\n    mapping(address => uint256) public lastApiRequestByUser;\\r\\n\\r\\n    Percent.percent internal m_adminPercent = Percent.percent(40, 100); // 40/100*100% = 40%\\r\\n    Percent.percent internal m_adminPercentHalf = Percent.percent(20, 100); // 20/100*100% = 20%\\r\\n    Percent.percent internal m_poolPercent = Percent.percent(10, 100); // 10/100*100% = 10%\\r\\n    Percent.percent internal m_bonusUsdPercent = Percent.percent(30, 100); // 30/100*100% = 30%\\r\\n    Percent.percent internal m_paymentComissionPercent = Percent.percent(10, 100); // 10/100*100% = 10%\\r\\n    Percent.percent internal m_paymentReferralPercent = Percent.percent(10, 100); // 10/100*100% = 10%\\r\\n    Percent.percent internal m_paymentCashbackPercent = Percent.percent(10, 100); // 10/100*100% = 10%\\r\\n\\r\\n    IERC20 public _token;\\r\\n\\r\\n    IERC20 public _linkToken;\\r\\n\\r\\n    uint256 public _rate;\\r\\n\\r\\n    address payable _wallet;\\r\\n\\r\\n    address public newAddress;\\r\\n\\r\\n    uint256 public voteScore;\\r\\n\\r\\n    bool public voteSuccess;\\r\\n\\r\\n    bool public dataTransfered;\\r\\n\\r\\n    mapping(address => uint256) public voteWalletWeight;\\r\\n\\r\\n    mapping(address => bool) public votedWallets;\\r\\n\\r\\n    address[375] public voteWallets;\\r\\n\\r\\n    uint public addedCanVoteWalletsCount;\\r\\n\\r\\n    mapping(address => address) public referral_tree; //referral - sponsor\\r\\n\\r\\n    uint16[4] public packages = [100,500,1000,2500];\\r\\n\\r\\n    uint256 internal _durationVesting;\\r\\n\\r\\n    uint256 internal _periodVesting;\\r\\n\\r\\n    uint256 internal _cliffVesting;\\r\\n\\r\\n    uint256 public limitRequest;\\r\\n\\r\\n    UsersStorage internal _users;\\r\\n\\r\\n    TokenVesting internal vesting;\\r\\n\\r\\n    PoolApi private poolApi;\\r\\n\\r\\n    event AdminWalletChanged(address indexed oldWallet, address indexed newWallet);\\r\\n\\r\\n    event referralBonusPaid(address indexed from, address indexed to, uint256 indexed tokenAmount, uint256 value, uint256 date);\\r\\n\\r\\n    event compressionBonusPaid(address indexed from, address indexed to, uint256 indexed package, uint256 value, uint256 date);\\r\\n\\r\\n    event transactionCompleted(address indexed from, address indexed to, uint256 tokenAmount, string txdata, uint256 date);\\r\\n\\r\\n    event referralTree(address indexed referral, address indexed sponsor);\\r\\n\\r\\n    event WithdrawOriginalBNB(address indexed owner, uint256 value);\\r\\n\\r\\n    event subscriptionBuyed(address indexed user, uint256 indexed subscription, uint256 indexed tokens, bytes32 vestingId, uint256 startDate);\\r\\n\\r\\n    event bonusUsdSpended(address indexed user, uint256 indexed package, uint256 indexed bonusPackage, uint256 date);\\r\\n\\r\\n    event bonusUsdAccrued(address indexed user, uint256 indexed bonusAmount, uint256 date);\\r\\n\\r\\n    event priceChanged(uint256 rate, uint256 date);\\r\\n\\r\\n    event payedFromPool(address indexed beneficiary, uint256 indexed withdrawAmount, uint256 date);\\r\\n\\r\\n    event getWithdraw(address indexed beneficiary, uint256 indexed withdrawAmount, uint256 date);\\r\\n\\r\\n    event vestingReleased(address indexed beneficiary, bytes32 vestingScheduleId, uint256 vestingAmount, uint256 date);\\r\\n\\r\\n    event vestingRevoked(address indexed beneficiary, bytes32 vestingScheduleId, uint256 date);\\r\\n    \\r\\n    modifier checkPackage(uint256 package) {\\r\\n      require(_havePackage(package) == true, \\\"There is no such subscription\\\");\\r\\n      _;\\r\\n    }\\r\\n\\r\\n    modifier activeSponsor(address walletSponsor) {\\r\\n      require(_users.contains(walletSponsor) == true,\\\"There is no such sponsor\\\");\\r\\n      require(walletSponsor.notZero() == true, \\\"Please set a sponsor\\\");\\r\\n      require(walletSponsor != _msgSender(),\\\"You need a sponsor referral link, not yours\\\");\\r\\n      _;\\r\\n    }\\r\\n\\r\\n    modifier canVote() {\\r\\n      require(voteWalletWeight[_msgSender()] > 0, \\\"You cannot vote\\\");\\r\\n      require(votedWallets[_msgSender()] == false, \\\"already vote\\\");\\r\\n      _;\\r\\n    }\\r\\n\\r\\n    modifier checkTransfered() {\\r\\n        require (dataTransfered == false, \\\"already transfered\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(IERC20 token, IERC20 linktoken, UsersStorage userstorage, TokenVesting tokenvesting,  address payable wallet, uint256 rate) {\\r\\n      _token = token;\\r\\n      _linkToken = linktoken;\\r\\n      _wallet = wallet;\\r\\n      _rate = rate;\\r\\n\\r\\n      _users = userstorage;\\r\\n\\r\\n      vesting = tokenvesting;\\r\\n\\r\\n      poolApi = new PoolApi(_wallet);\\r\\n\\r\\n      _durationVesting = 31104000; //- 360days in seconds\\r\\n      _periodVesting = 604800; //- 7 days in seconds\\r\\n      _cliffVesting = 0;\\r\\n      limitRequest = 604800;\\r\\n\\r\\n      career.push(careerInfo(50, 0, 999)); //5%\\r\\n      career.push(careerInfo(60, 1000, 2499)); //6%\\r\\n      career.push(careerInfo(70, 2500, 4999)); //7%\\r\\n      career.push(careerInfo(80, 5000, 9999)); //8%\\r\\n      career.push(careerInfo(90, 10000, 24999)); //9%\\r\\n      career.push(careerInfo(100, 25000, 49999)); //10%\\r\\n      career.push(careerInfo(110, 50000, 99999)); //11%\\r\\n      career.push(careerInfo(120, 100000, 249999)); //12%\\r\\n      career.push(careerInfo(135, 250000, 499999)); //13,5%\\r\\n      career.push(careerInfo(150, 500000, 999999)); //15%\\r\\n      career.push(careerInfo(165, 1000000, 2499999)); //16,5%\\r\\n      career.push(careerInfo(175, 2500000, 4999999)); //17,5%\\r\\n      career.push(careerInfo(185, 5000000, 9999999)); //18,5%\\r\\n      career.push(careerInfo(190, 10000000, 24999999)); //19%\\r\\n      career.push(careerInfo(195, 25000000, 49999999)); //19,5%\\r\\n      career.push(careerInfo(200, 50000000, 10000000000000000)); //20%\\r\\n\\r\\n      referral_tree[wallet] = address(this);\\r\\n      emit referralTree(wallet, address(this));\\r\\n    }\\r\\n\\r\\n    function _havePackage(uint256 package) internal view returns(bool) {\\r\\n      for (uint256 i = 0; i < packages.length; i++) {\\r\\n        if (packages[i] == package) {\\r\\n          return true;\\r\\n        }\\r\\n      }\\r\\n      return false;\\r\\n    }\\r\\n\\r\\n    function buyPackage(uint256 package, address sponsor) public payable activeSponsor(sponsor) checkPackage(package) nonReentrant {\\r\\n      address beneficiary = _msgSender();\\r\\n\\r\\n      if (!_users.contains(beneficiary)) {\\r\\n        _activateReferralLink(sponsor, beneficiary, true);\\r\\n      }\\r\\n\\r\\n      uint256 bonusPackage = 0;\\r\\n\\r\\n      if (_users.contains(beneficiary)) {\\r\\n\\r\\n        if (_users.getBonusUsd(beneficiary) > 0) {\\r\\n          if (_users.getBonusUsd(beneficiary) <= m_bonusUsdPercent.mul(package)) {\\r\\n              bonusPackage = _users.getBonusUsd(beneficiary);\\r\\n          } else {\\r\\n              bonusPackage = m_bonusUsdPercent.mul(package);               \\r\\n          }\\r\\n        }\\r\\n\\r\\n        uint256 tokenAmountForPay = _getTokenAmountByUSD(package-bonusPackage);\\r\\n        uint256 tokenAmount = _getTokenAmountByUSD(package);\\r\\n\\r\\n        require(_token.balanceOf(beneficiary) >= tokenAmountForPay, \\\"Not enough tokens\\\");\\r\\n\\r\\n        require(_token.allowance(beneficiary,address(this)) >= tokenAmountForPay, \\\"Please allow fund first\\\");\\r\\n        bool success = _token.transferFrom(beneficiary, address(this), tokenAmountForPay);\\r\\n\\r\\n        if (!success) {\\r\\n          revert packageBuy__Failed();\\r\\n        } else {\\r\\n          uint256 adminAmount = 0;\\r\\n          bytes32 vestingId = bytes32(0);\\r\\n\\r\\n          if (bonusPackage > 0) {\\r\\n            adminAmount = m_adminPercent.mul(tokenAmount) - (tokenAmount-tokenAmountForPay);\\r\\n            _users.setBonusUsd(beneficiary, bonusPackage, false);\\r\\n            emit bonusUsdSpended(beneficiary, package, bonusPackage, block.timestamp);\\r\\n          } else {\\r\\n            adminAmount = m_adminPercent.mul(tokenAmount);\\r\\n          }\\r\\n\\r\\n          _token.transfer(_wallet, adminAmount);\\r\\n\\r\\n          _sendToPools(tokenAmount);\\r\\n\\r\\n          if (getAvailableTokenAmount() >= tokenAmount) {\\r\\n            vestingId = vesting.createVestingSchedule(beneficiary, block.timestamp, _cliffVesting, _durationVesting, _periodVesting, true, tokenAmount*2);\\r\\n          }\\r\\n\\r\\n          if (referral_tree[beneficiary].isZero()) {\\r\\n            referral_tree[beneficiary] = sponsor;\\r\\n\\r\\n            emit referralTree(beneficiary, sponsor);\\r\\n          }\\r\\n\\r\\n          if (_users.isFirstValue(beneficiary)) {\\r\\n            assert(_users.setBonusUsd(referral_tree[beneficiary], 1, true));\\r\\n            emit bonusUsdAccrued(referral_tree[beneficiary], 1, block.timestamp);\\r\\n          }\\r\\n\\r\\n          assert(_users.insertSubscription(vestingId, beneficiary, tokenAmount, package));\\r\\n          openedSubscriptions[package].push(block.timestamp);\\r\\n            \\r\\n          address payable mySponsor = payable(referral_tree[beneficiary]);\\r\\n\\r\\n          if (_users.haveValue(mySponsor)) {\\r\\n            _addReferralBonus(beneficiary, mySponsor, tokenAmount, true);\\r\\n          }\\t\\r\\n          _compressionBonus(tokenAmount, package, mySponsor, 0, 1);\\r\\n\\r\\n          emit subscriptionBuyed(beneficiary, package, tokenAmount, vestingId, block.timestamp);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the amount of tokens that can be use.\\r\\n    * @return the amount of tokens\\r\\n    */\\r\\n    function getAvailableTokenAmount()\\r\\n      public\\r\\n      view\\r\\n      returns(uint256){\\r\\n      return _token.balanceOf(address(this)).sub(vesting.getVestingSchedulesTotalAmount()).sub(freezeInPools);\\r\\n    }\\r\\n\\r\\n    function setPoolAmountToApi() public {\\r\\n      require((lastApiRequestByUser[_msgSender()] + limitRequest) < block.timestamp, \\\"you already calculate in current period\\\");\\r\\n\\r\\n      poolApi.requestVolumeData(_msgSender());\\r\\n      lastApiRequestByUser[_msgSender()] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function setPoolAmountToApiByUser() public {\\r\\n      address poolApiAddress = poolApi.getContractAddress();\\r\\n\\r\\n      require(_linkToken.allowance(_msgSender(),poolApiAddress) >= (15/100)*10**18, \\\"Please allow fund first\\\");\\r\\n      bool success = _linkToken.transferFrom(_msgSender(), poolApiAddress, (15/100)*10**18);\\r\\n      if (success) {\\r\\n        poolApi.requestVolumeData(_msgSender());\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function getPoolAmountFromApi(address addr) public view returns (uint256 poolAmount) {\\r\\n      poolAmount = poolApi.getUserPoolAmount(addr);\\r\\n      if (poolAmount > freezeInPools) {\\r\\n        poolAmount = freezeInPools;\\r\\n      } \\r\\n    }\\r\\n\\r\\n    function _compressionBonus(uint256 tokenAmount, uint256 package, address payable user, uint256 prevPercent, uint256 line) internal {\\r\\n      address payable mySponsor = payable(referral_tree[user]);\\r\\n\\r\\n      uint256 careerPercent = _users.getCareerPercent(user);\\r\\n\\r\\n      _users.addTurnover(user, _getUsdAmount(tokenAmount));\\r\\n      _checkCareerPercent(user);\\r\\n\\r\\n      if (_users.haveValue(user)) {\\r\\n\\r\\n        if (line == 1) {\\r\\n          prevPercent = careerPercent;\\r\\n        }\\r\\n        if (line >= 2) {\\r\\n\\r\\n          if (prevPercent < careerPercent) {\\r\\n\\r\\n            uint256 finalPercent = career[careerPercent].percentFrom - career[prevPercent].percentFrom;\\r\\n            uint256 bonus = tokenAmount*finalPercent/1000;\\r\\n\\r\\n            if (bonus > 0 && _users.haveValue(user)) {\\r\\n              assert(_users.addRefBonus(user, bonus, line));\\r\\n              _token.transfer(user, bonus);\\r\\n              emit compressionBonusPaid(_msgSender(), user, package, bonus, block.timestamp);\\r\\n\\r\\n              prevPercent = careerPercent;\\r\\n            }           \\r\\n          }\\r\\n        }\\r\\n      }\\r\\n      if (_notZeroNotSender(mySponsor) && _users.contains(mySponsor)) {\\r\\n        line = line + 1;\\r\\n        if (line < 51) {\\r\\n          _compressionBonus(tokenAmount, package, mySponsor, prevPercent, line);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function withdraw(address payable beneficiary) public payable nonReentrant {\\r\\n      require(_msgSender() == beneficiary, \\\"you cannot access to release\\\");\\r\\n\\r\\n      subscriptionInfo memory subs;\\r\\n\\r\\n      uint256 poolAmount = getPoolAmountFromApi(beneficiary);\\r\\n      uint256 poolUsdAmount;\\r\\n      uint256 availablePoolAmount;\\r\\n      uint256 vestingAmount;\\r\\n      uint256 vestingUsdAmount;\\r\\n      uint256 withdrawAmount;\\r\\n      uint256 subsPoolAmount;\\r\\n\\r\\n      for (uint256 i = 0; i < _users.getTotalSubscription(beneficiary); i++) {\\r\\n        subs = updateSubscriptionInfo(beneficiary, i);\\r\\n\\r\\n        if (subs.active) {\\r\\n          availablePoolAmount = poolAmount-takenFromPools[beneficiary];\\r\\n          if (availablePoolAmount > 0) {\\r\\n            if ((((subs.valueUsd*2)*10**10) - (subs.releasedUsdAmount + subs.takenFromPoolUsd)) >= _getUsdAmount(availablePoolAmount)) {\\r\\n              poolUsdAmount = _getUsdAmount(availablePoolAmount);\\r\\n              subsPoolAmount = availablePoolAmount;\\r\\n            } else {\\r\\n              subsPoolAmount = _getTokenAmountByUSD(((((subs.valueUsd*2)+1)*10**10) - (subs.releasedUsdAmount + subs.takenFromPoolUsd))/10**10);\\r\\n              poolUsdAmount = _getUsdAmount(subsPoolAmount);\\r\\n            }\\r\\n            _users.setTakenFromPool(beneficiary, i, subsPoolAmount, poolUsdAmount);\\r\\n            takenFromPools[beneficiary] += subsPoolAmount;\\r\\n            freezeInPools -= subsPoolAmount;\\r\\n\\r\\n            emit payedFromPool(beneficiary, subsPoolAmount, block.timestamp);\\r\\n          } else {\\r\\n            poolUsdAmount = 0;\\r\\n            subsPoolAmount = 0;\\r\\n          }\\r\\n\\r\\n          if (subs.haveVesting && !subs.vestingPaid) {\\r\\n            vestingAmount = vesting.computeReleasableAmount(subs.uid);\\r\\n            vestingUsdAmount = _getUsdAmount(vestingAmount);\\r\\n\\r\\n            vesting.release(subs.uid, beneficiary, vestingAmount);\\r\\n            assert(_users.setSubscriptionReleasedUsd(beneficiary, i, vestingUsdAmount));\\r\\n            emit vestingReleased(beneficiary, subs.uid, vestingAmount, block.timestamp);\\r\\n            \\r\\n            if ((vestingUsdAmount+subs.releasedUsdAmount+poolUsdAmount+subs.takenFromPoolUsd) >= ((subs.valueUsd*2)*10**10)) {\\r\\n              vesting.revoke(subs.uid);\\r\\n              assert(_users.setNotActiveSubscription(beneficiary, i));\\r\\n              closedSubscriptions[subs.valueUsd].push(block.timestamp);\\r\\n              emit vestingRevoked(beneficiary, subs.uid, block.timestamp);\\r\\n            }\\r\\n          } else {\\r\\n            vestingAmount = 0;\\r\\n            if ((poolUsdAmount+subs.takenFromPoolUsd) >= ((subs.valueUsd*2)*10**10)) {\\r\\n              assert(_users.setNotActiveSubscription(beneficiary, i));\\r\\n              closedSubscriptions[subs.valueUsd].push(block.timestamp);\\r\\n            }\\r\\n          }\\r\\n          if (subsPoolAmount > 0 || vestingAmount > 0) {\\r\\n            withdrawAmount += calculateAmountForWithdraw(subs.releasedUsdAmount, subs.takenFromPoolUsd, subs.valueUsd, (vestingAmount+subsPoolAmount));\\r\\n          }       \\r\\n        }\\r\\n      }\\r\\n      if (withdrawAmount > 0) {\\r\\n        _token.transfer(beneficiary, withdrawAmount);\\r\\n\\r\\n        emit getWithdraw(beneficiary, withdrawAmount, block.timestamp);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function updateSubscriptionInfo(address beneficiary, uint256 index) internal view returns (subscriptionInfo memory subs) {\\r\\n      (subs.uid, subs.valueUsd, subs.active, subs.vestingPaid, subs.haveVesting) = _users.userSingleSubscriptionActive(beneficiary, index);\\r\\n      (subs.releasedUsdAmount, subs.takenFromPoolUsd) = _users.userSubscriptionReleasedUsd(beneficiary, index);\\r\\n      return subs;\\r\\n    }\\r\\n\\r\\n    function calculateAmountForWithdraw(uint256 releasedAmount, uint256 releasedFromPools, uint256 availableAmount, uint256 neededAmount) internal view returns (uint256 withdrawAmount) {\\r\\n      int leftAmountUsd = (int(availableAmount*2)*10**10) - (int(releasedAmount)+int(releasedFromPools));\\r\\n      if (leftAmountUsd > 0) {\\r\\n        uint256 leftAmount = _getTokenAmountByUSD(uint256(leftAmountUsd)/10**10);\\r\\n        withdrawAmount = (int(leftAmount) - int(neededAmount)) >= 0 ? neededAmount : leftAmount;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function _addReferralBonus(address user, address payable sponsor, uint256 tokenAmount, bool isPackage) internal {\\r\\n      uint256 reward;\\r\\n\\r\\n      if (isPackage == true) {\\r\\n        uint256 careerPercent = _users.getCareerPercent(sponsor);\\r\\n        reward = tokenAmount*career[careerPercent].percentFrom/1000;\\r\\n        assert(_users.addRefBonus(sponsor, reward, 1));\\r\\n      } else {\\r\\n        reward = m_paymentReferralPercent.mul(tokenAmount);\\r\\n      }\\r\\n      _token.transfer(sponsor, reward);\\r\\n      emit referralBonusPaid(user, sponsor, tokenAmount, reward, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function payment(uint256 tokenAmount, address receiver, string calldata txdata) public payable nonReentrant {\\r\\n      require(_token.balanceOf(_msgSender()) >= tokenAmount, \\\"Not enough tokens\\\");\\r\\n\\r\\n      require(_token.allowance(_msgSender(),address(this)) >= tokenAmount, \\\"Please allow fund first\\\");\\r\\n      bool success = _token.transferFrom(_msgSender(), address(this), tokenAmount);\\r\\n\\r\\n      if (!success) {\\r\\n        revert payment__Failed();\\r\\n      } else {\\r\\n\\r\\n        if (!_users.contains(_msgSender())) {\\r\\n            assert(_users.insertUser(_msgSender()));\\r\\n            referral_tree[_msgSender()] = address(this);\\r\\n            emit referralTree(_msgSender(), address(this));\\r\\n        }\\r\\n\\r\\n        if (!_users.contains(receiver)) {\\r\\n            assert(_users.insertUser(receiver));\\r\\n            referral_tree[receiver] = address(this);\\r\\n            emit referralTree(receiver, address(this));\\r\\n        }\\r\\n\\r\\n        uint256 tokenCommission = m_paymentComissionPercent.mul(tokenAmount);\\r\\n\\r\\n        address payable sponsorSenderOne = payable(referral_tree[_msgSender()]);\\r\\n        address payable sponsorReceiverOne = payable(referral_tree[receiver]);       \\r\\n        \\r\\n\\r\\n        if (_users.contains(sponsorSenderOne)) {\\r\\n          assert(_users.setBonusUsd(sponsorSenderOne, 1, true));\\r\\n          emit bonusUsdAccrued(sponsorSenderOne, 1, block.timestamp);\\r\\n          if (_users.haveValue(sponsorSenderOne)) {\\r\\n            _addReferralBonus(_msgSender(), sponsorSenderOne, tokenCommission, false);\\r\\n          }\\r\\n        }\\r\\n\\r\\n        if (_users.contains(sponsorReceiverOne)) {\\r\\n          assert(_users.setBonusUsd(sponsorReceiverOne, 1, true));\\r\\n          emit bonusUsdAccrued(sponsorReceiverOne, 1, block.timestamp);\\r\\n          if (_users.haveValue(sponsorReceiverOne)) {\\r\\n            _addReferralBonus(receiver, sponsorReceiverOne, tokenCommission, false);\\r\\n          }\\r\\n        }\\r\\n        \\r\\n        _token.transfer(_wallet, m_adminPercentHalf.mul(tokenCommission));\\r\\n\\r\\n        _sendToPools(tokenCommission);\\r\\n\\r\\n        uint256 package = _getUsdAmount(tokenCommission);\\r\\n\\r\\n        if (getAvailableTokenAmount() >= (tokenCommission*3)) {\\r\\n          bytes32 vestingSenderId = vesting.createVestingSchedule(_msgSender(), block.timestamp, _cliffVesting, _durationVesting, _periodVesting, false, tokenCommission*2); //sender\\r\\n          bytes32 vestingReceiverId = vesting.createVestingSchedule(receiver, block.timestamp, _cliffVesting, _durationVesting, _periodVesting, false, tokenCommission); //reciever\\r\\n          assert(_users.insertSubscription(vestingSenderId, _msgSender(), tokenCommission, package));\\r\\n          assert(_users.insertSubscription(vestingReceiverId, receiver, tokenCommission, package));\\r\\n        }\\r\\n\\r\\n        _token.transfer(receiver, (tokenAmount-tokenCommission));\\r\\n\\r\\n        emit transactionCompleted(_msgSender(), receiver, tokenAmount, txdata, block.timestamp);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function _checkCareerPercent(address addr) internal {\\r\\n      (, uint256 turnoverUsd, uint256 careerPercent) = _users.userTurnover(addr);\\r\\n\\r\\n      uint256 cleanTurnoverUsd = turnoverUsd/10**10;\\r\\n      if (career[careerPercent+1].turnoverFrom <= cleanTurnoverUsd && career[careerPercent+1].turnoverTo >= cleanTurnoverUsd) {\\r\\n        _users.setCareerPercent(addr, careerPercent+1);\\r\\n      } else if (career[careerPercent+2].turnoverFrom <= cleanTurnoverUsd && career[careerPercent+2].turnoverTo >= cleanTurnoverUsd) {\\r\\n        _users.setCareerPercent(addr, careerPercent+2);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function usersNumber() public view returns(uint) {\\r\\n      return _users.size();\\r\\n    }\\r\\n\\r\\n    function _notZeroNotSender(address addr) internal view returns(bool) {\\r\\n      return addr.notZero() && addr != _msgSender();\\r\\n    }\\r\\n\\r\\n    function _getUsdAmount(uint256 tokenAmount) internal view returns (uint256){\\r\\n      return tokenAmount.mul(_rate).div(10**18);   \\r\\n    }\\r\\n\\r\\n    function _getTokenAmountByUSD(uint256 usdAmount) internal view returns(uint256) {\\r\\n      return usdAmount.mul(10**28).div(_rate);\\r\\n    }\\r\\n\\r\\n    function _sendToPools(uint256 tokenAmount) internal {\\r\\n      uint256 toPool = m_poolPercent.mul(tokenAmount);\\r\\n      freezeInPools += toPool*4;\\r\\n      pools.push(poolTransaction(block.timestamp, toPool));\\r\\n    }\\r\\n\\r\\n    function activateReferralLinkByOwner(address sponsor, address referral, bool needBonusUsd) public onlyOwner activeSponsor(sponsor) returns(bool) {\\r\\n      _activateReferralLink(sponsor, referral, needBonusUsd);\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    function activateReferralLinkByUser(address sponsor) public nonReentrant returns(bool) {\\r\\n      _activateReferralLink(sponsor, _msgSender(), true);\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    function _activateReferralLink(address sponsor, address referral, bool needBonusUsd) internal activeSponsor(sponsor) {\\r\\n      require(_users.contains(referral) == false, \\\"already activate\\\");\\r\\n\\r\\n      assert(_users.insertUser(referral));\\r\\n      referral_tree[referral] = sponsor;\\r\\n\\r\\n      emit referralTree(referral, sponsor);\\r\\n\\r\\n      if (needBonusUsd) {\\r\\n        assert(_users.setBonusUsd(sponsor, 1, true));\\r\\n        emit bonusUsdAccrued(sponsor, 1, block.timestamp);\\r\\n      }\\r\\n    }\\r\\n \\r\\n    function changeAdminWallet(address payable wallet) public onlyOwner {\\r\\n      require(wallet != address(0), \\\"New admin address is the zero address\\\");\\r\\n      address oldWallet = _wallet;\\r\\n      _wallet = wallet;\\r\\n      emit AdminWalletChanged(oldWallet, wallet);\\r\\n    }\\r\\n\\r\\n    function setRate(uint256 rate) public onlyOwner {\\r\\n      require(rate < 1e11, \\\"support only 10 decimals\\\"); //max token price 99,99 usd\\r\\n      require(rate > 0, \\\"price should be greater than zero\\\");\\r\\n      _rate = rate; //10 decimal\\r\\n      emit priceChanged(rate, block.timestamp);\\r\\n    } \\r\\n\\r\\n    function sendBonusUsd(address beneficiary, uint256 amount) public onlyOwner {\\r\\n      require(_users.contains(beneficiary) == true, \\\"This address does not exists\\\");\\r\\n      _users.setBonusUsd(beneficiary, amount, true);\\r\\n      emit bonusUsdAccrued(beneficiary, 1, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function stopMintBonusUsd() public onlyOwner {\\r\\n        _users.setStopMintBonusUsd();\\r\\n    }\\r\\n\\r\\n    function setVote(address addr) public onlyOwner {\\r\\n      newAddress = addr;\\r\\n    }\\r\\n\\r\\n    function cancelVote() public onlyOwner {\\r\\n      voteScore = 0;\\r\\n      newAddress = address(0);\\r\\n      voteSuccess = false;\\r\\n      for(uint256 i = 0; i < voteWallets.length; i++) {\\r\\n        votedWallets[voteWallets[i]] = false;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function vote() public canVote {\\r\\n      require(newAddress.notZero() == true, \\\"No votes at this moment\\\");\\r\\n      voteScore += voteWalletWeight[_msgSender()];\\r\\n      votedWallets[_msgSender()] = true;\\r\\n      if (voteScore >= 360) {\\r\\n        voteSuccess = true;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function addVoteWallet(address wallet, uint256 weight) public onlyOwner {\\r\\n      require(addedCanVoteWalletsCount < 375, \\\"No more wallets can be added.\\\");\\r\\n      require(weight < 4, \\\"Weight can be only between 1 and 3\\\");\\r\\n\\r\\n      voteWalletWeight[wallet] = weight;\\r\\n      voteWallets[addedCanVoteWalletsCount] = wallet;\\r\\n      addedCanVoteWalletsCount++;\\r\\n    }\\r\\n\\r\\n    function setNewContract(bool newOwnerContracts) public onlyOwner {\\r\\n      if (voteSuccess) {\\r\\n        if (newOwnerContracts) {\\r\\n          _users.transferOwnership(newAddress);\\r\\n          vesting.transferOwnership(newAddress);\\r\\n          _token.transfer(newAddress, _token.balanceOf(address(this)));\\r\\n        } else {\\r\\n          _token.transfer(newAddress, getAvailableTokenAmount());\\r\\n        }        \\r\\n        voteSuccess = false;\\r\\n        voteScore = 0;\\r\\n        newAddress = address(0);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function changeLimitRequest(uint256 _limitRequest) public onlyOwner {\\r\\n      limitRequest = _limitRequest;\\r\\n    }\\r\\n\\r\\n    function withdrawBNB() public onlyOwner {\\r\\n      uint256 weiAmount = address(this).balance;\\r\\n      _wallet.transfer(weiAmount);\\r\\n      emit WithdrawOriginalBNB(_msgSender(), weiAmount);\\r\\n    }\\r\\n\\r\\n    function transferNftOwner(address newowner) public {\\r\\n      require(voteWalletWeight[_msgSender()] > 0, \\\"You dont have a vote access\\\");\\r\\n      uint256 weight = voteWalletWeight[_msgSender()];\\r\\n      delete voteWalletWeight[_msgSender()];\\r\\n      for(uint256 i = 0; i < voteWallets.length; i++) {\\r\\n        if (voteWallets[i] == _msgSender()) {\\r\\n          voteWallets[i] = newowner;\\r\\n        }\\r\\n      }\\r\\n      voteWalletWeight[newowner] = weight;\\r\\n    }\\r\\n\\r\\n    function setReferralTree(address sponsor, address referral) public checkTransfered onlyOwner {\\r\\n        require(_users.contains(referral) == true, \\\"user is no exist\\\");\\r\\n        require(referral_tree[referral] == address(0), \\\"user is exist\\\");\\r\\n\\r\\n        referral_tree[referral] = sponsor;\\r\\n        emit referralTree(referral, sponsor);\\r\\n    }\\r\\n\\r\\n    function setFreezeInPools(uint256 _freezeInPools) public checkTransfered onlyOwner {\\r\\n        freezeInPools = _freezeInPools;\\r\\n    }\\r\\n\\r\\n    function setTakeFromPool(address beneficiary, uint256 amount) public checkTransfered onlyOwner {\\r\\n        require(takenFromPools[beneficiary] == 0, \\\"already set\\\");\\r\\n        takenFromPools[beneficiary] = amount;\\r\\n    }\\r\\n\\r\\n    function setDataTransfered() public checkTransfered onlyOwner {\\r\\n        dataTransfered = true;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/Chainlink.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"linktoken\",\"type\":\"address\"},{\"internalType\":\"contract UsersStorage\",\"name\":\"userstorage\",\"type\":\"address\"},{\"internalType\":\"contract TokenVesting\",\"name\":\"tokenvesting\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"packageBuy__Failed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"payment__Failed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"AdminWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawOriginalBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"bonusUsdAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"package\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bonusPackage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"bonusUsdSpended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"package\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"compressionBonusPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"getWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"payedFromPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"priceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"referralBonusPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"referralTree\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscription\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"vestingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"}],\"name\":\"subscriptionBuyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txdata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"transactionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"vestingReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"vestingRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_linkToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"needBonusUsd\",\"type\":\"bool\"}],\"name\":\"activateReferralLinkByOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"activateReferralLinkByUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"addVoteWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addedCanVoteWalletsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"package\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"buyPackage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"career\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnoverFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnoverTo\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"changeAdminWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limitRequest\",\"type\":\"uint256\"}],\"name\":\"changeLimitRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"closedSubscriptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataTransfered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeInPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPoolAmountFromApi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastApiRequestByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openedSubscriptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packages\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"txdata\",\"type\":\"string\"}],\"name\":\"payment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referral_tree\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendBonusUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDataTransfered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_freezeInPools\",\"type\":\"uint256\"}],\"name\":\"setFreezeInPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newOwnerContracts\",\"type\":\"bool\"}],\"name\":\"setNewContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPoolAmountToApi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPoolAmountToApiByUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"setReferralTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTakeFromPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopMintBonusUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takenFromPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"transferNftOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteSuccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteWalletWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votedWallets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Paychanger", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000053e83d8ae58598a0adf2f3b57834d7e811751ec0000000000000000000000004a991a5b0962b7219615eeab87e40bfe4ea6a727000000000000000000000000e3f2ad28e2febe4a33d101120f8498191949e7a6000000000000000000000000404460c6a5ede2d891e8297795264fde62adbb750000000000000000000000007b55fea7c7e288b8822e6829d8e04c32a6c2a8c70000000000000000000000000000000000000000000000000000000025bc56e0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}