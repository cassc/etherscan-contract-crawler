{"SourceCode": "pragma solidity ^0.5.17;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Cowboy_Snake_Fund_BUSD_Contract\r\n * @dev Cowboy_Snake_Fund_BUSD_Contract is a token holder contract \r\n */\r\ncontract Cowboy_Snake_Fund_BUSD_Contract {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // ERC20 basic token contract being held\r\n    IERC20 private _token;\r\n    uint constant E18 = 10**18;\r\n    // payout wallet\r\n    address private _accountant;\r\n    // owner wallet\r\n    address public owner;\r\n    // send wallet\r\n    address private _signer;\r\n    address public founder_1;\r\n    uint256 public _vote1;\r\n    address public founder_2;\r\n    uint256 public _vote2;\r\n    address public founder_3;\r\n    uint256 public _vote3;\r\n    address public founder_4;\r\n    uint256 public _vote4;\r\n    address public founder_5;\r\n    uint256 public _vote5;\r\n\r\n    event releaseAmountAt(address indexed senderAddress,address indexed payoutAddress,uint256 amount);\r\n    event updateSignerAt(address indexed oldAddress,address indexed newAddress);\r\n \r\n\r\n    constructor (IERC20 token,  address accountantAddress, address signerAddress, \r\n    address founderAddress_1, address founderAddress_2, address founderAddress_3, \r\n    address founderAddress_4, address founderAddress_5) public \r\n    {\r\n       \r\n       owner = tx.origin;\r\n        _token = token; // BUSD : 0xe9e7cea3dedca5984780bafc599bd69add087d56\r\n        _signer = signerAddress;\r\n        _accountant = accountantAddress;\r\n        founder_1 =  founderAddress_1;\r\n        founder_2 =  founderAddress_2;\r\n        founder_3 =  founderAddress_3;\r\n        founder_4 =  founderAddress_4;\r\n        founder_5 =  founderAddress_5;\r\n        \r\n        _vote1=0;\r\n        _vote2=0;\r\n        _vote3=0;\r\n        _vote4=0;\r\n        _vote5=0;\r\n\r\n    }\r\n    function token() public view returns (IERC20) {\r\n            return _token;\r\n    }\r\n\r\n    function totalBUSD() public view returns (uint256) {\r\n        uint256 balanceWallet = _token.balanceOf(address(this));\r\n        return balanceWallet;\r\n    }\r\n    \r\n    function updateSigner(address newSigner) public {\r\n        require(msg.sender == owner, \"!access denied\");\r\n        emit updateSignerAt(_signer,newSigner);\r\n        _signer = address(newSigner);\r\n    }\r\n    \r\n    function signerAddress() public view returns (address) {\r\n        return _signer;\r\n    }\r\n    \r\n    function accountantAddress() public view returns (address) {\r\n        require(msg.sender == _signer, \"!wrong sender. access denied\");\r\n        return _accountant;\r\n    }\r\n\r\n\r\n    function setVote1(uint256 amount) public  returns (uint256) {\r\n        require(msg.sender == founder_1, \"!access denied\");\r\n         _vote1 = amount;\r\n        return _vote1;\r\n    }\r\n    \r\n    function unsetVote1() public  returns (uint256) {\r\n        require(msg.sender == founder_1, \"!access denied\");\r\n         _vote1 = 0;\r\n        return _vote1;\r\n    }\r\n    \r\n    function setVote2(uint256 amount) public  returns (uint256) {\r\n        require(msg.sender == founder_2, \"!access denied\");\r\n         _vote2 = amount;\r\n        return _vote2;\r\n    }\r\n    \r\n    function unsetVote2() public  returns (uint256) {\r\n        require(msg.sender == founder_2, \"!access denied\");\r\n         _vote2 = 0;\r\n        return _vote2;\r\n    }\r\n    function setVote3(uint256 amount) public  returns (uint256) {\r\n        require(msg.sender == founder_3, \"!access denied\");\r\n         _vote3 = amount;\r\n        return _vote3;\r\n    }\r\n    function unsetVote3() public  returns (uint256) {\r\n        require(msg.sender == founder_3, \"!access denied\");\r\n         _vote3 = 0;\r\n        return _vote3;\r\n    }\r\n    \r\n    function setVote4(uint256 amount) public  returns (uint256) {\r\n        require(msg.sender == founder_4, \"!access denied\");\r\n         _vote4 = amount;\r\n        return _vote4;\r\n    }\r\n    \r\n    function unsetVote4() public  returns (uint256) {\r\n        require(msg.sender == founder_4, \"!access denied\");\r\n         _vote4 = 0;\r\n        return _vote4;\r\n    }\r\n    \r\n    function setVote5(uint256 amount) public  returns (uint256) {\r\n        require(msg.sender == founder_5, \"!access denied\");\r\n         _vote5 = amount;\r\n        return _vote5;\r\n    }\r\n    \r\n    function unsetVote5() public  returns (uint256) {\r\n        require(msg.sender == founder_5, \"!access denied\");\r\n         _vote5 = 0;\r\n        return _vote5;\r\n    }\r\n    \r\n    /**\r\n     * @notice Transfers tokens held by _signer to _accountant.\r\n     */\r\n    \r\n    function releaseAmount(uint256 amount) public {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(msg.sender == _signer, \"!wrong sender. access denied\");\r\n        uint256 balanceWallet = _token.balanceOf(address(this));\r\n        require(amount <= balanceWallet, \"Sorry: not enough tokens to send\");\r\n        \r\n        uint256 vote=0;\r\n        if ( _vote1 > 0 && _vote2 > 0 && _vote3 > 0 && _vote4 > 0 && _vote1==_vote2 && _vote2==_vote3 && _vote3==_vote4){\r\n            vote=_vote1;\r\n        }\r\n        if ( _vote1 > 0 && _vote2 > 0 && _vote3 > 0 && _vote5 > 0 && _vote1==_vote2 && _vote2==_vote3 && _vote3==_vote5){\r\n            vote=_vote1;\r\n        }\r\n        if (_vote1 > 0 && _vote2 > 0 && _vote4 > 0 && _vote5 > 0 && _vote1==_vote2 && _vote2==_vote4 && _vote4==_vote5){\r\n            vote=_vote1;\r\n        }\r\n        if (_vote1 > 0 && _vote3 > 0 && _vote4 > 0 && _vote5 > 0 && _vote1==_vote3 && _vote3==_vote4 && _vote4==_vote5){\r\n            vote=_vote1;\r\n        }\r\n        if (_vote2 > 0 && _vote3 > 0 && _vote4 > 0 && _vote5 > 0 && _vote2==_vote3 && _vote3==_vote4 && _vote4==_vote5){\r\n            vote=_vote2;\r\n        }\r\n        require(vote > 0, \"Sorry: Not enought 4 vote\");\r\n        require(amount >0 , \"Sorry: not allow tokens to send\");\r\n        require(amount == vote, \"Sorry: amount not equal vote\");\r\n        \r\n         if( ( _vote1 > 0 && _vote2 > 0 && _vote3 > 0 && _vote4 > 0 && _vote1==_vote2 && _vote2==_vote3 && _vote3==_vote4)||\r\n            ( _vote1 > 0 && _vote2 > 0 && _vote3 > 0 && _vote5 > 0 && _vote1==_vote2 && _vote2==_vote3 && _vote3==_vote5)||\r\n            ( _vote1 > 0 && _vote2 > 0 && _vote4 > 0 && _vote5 > 0 && _vote1==_vote2 && _vote2==_vote4 && _vote4==_vote5)||\r\n            ( _vote1 > 0 && _vote3 > 0 && _vote4 > 0 && _vote5 > 0 && _vote1==_vote3 && _vote3==_vote4 && _vote4==_vote5)||\r\n            ( _vote2 > 0 && _vote3 > 0 && _vote4 > 0 && _vote5 > 0 && _vote2==_vote3 && _vote3==_vote4 && _vote4==_vote5) ){\r\n            \r\n           \r\n            _token.safeTransfer(_accountant, amount*E18);\r\n            _vote1 = 0;\r\n            _vote2 = 0;\r\n            _vote3 = 0;\r\n            _vote4 = 0;\r\n            _vote5 = 0;\r\n            emit releaseAmountAt(msg.sender,_accountant,amount*E18);\r\n         }\r\n         else{\r\n             revert('Not enought 4 vote');\r\n         }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @notice Transfers any BEP20 tokens held by _signer to _accountant.\r\n     */\r\n    \r\n    function releaseAmountBEP20(IERC20 tokenBEP20,uint256 amount) public {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(msg.sender == _signer, \"!wrong sender. access denied\");\r\n        uint256 balanceWallet = tokenBEP20.balanceOf(address(this));\r\n        require(amount <= balanceWallet, \"Sorry: not enough tokens to send\");\r\n        \r\n        uint256 vote=0;\r\n        if ( _vote1 > 0 && _vote2 > 0 && _vote3 > 0 && _vote4 > 0 && _vote1==_vote2 && _vote2==_vote3 && _vote3==_vote4){\r\n            vote=_vote1;\r\n        }\r\n        if ( _vote1 > 0 && _vote2 > 0 && _vote3 > 0 && _vote5 > 0 && _vote1==_vote2 && _vote2==_vote3 && _vote3==_vote5){\r\n            vote=_vote1;\r\n        }\r\n        if (_vote1 > 0 && _vote2 > 0 && _vote4 > 0 && _vote5 > 0 && _vote1==_vote2 && _vote2==_vote4 && _vote4==_vote5){\r\n            vote=_vote1;\r\n        }\r\n        if (_vote1 > 0 && _vote3 > 0 && _vote4 > 0 && _vote5 > 0 && _vote1==_vote3 && _vote3==_vote4 && _vote4==_vote5){\r\n            vote=_vote1;\r\n        }\r\n        if (_vote2 > 0 && _vote3 > 0 && _vote4 > 0 && _vote5 > 0 && _vote2==_vote3 && _vote3==_vote4 && _vote4==_vote5){\r\n            vote=_vote2;\r\n        }\r\n        require(vote > 0, \"Sorry: Not enought 4 vote\");\r\n        require(amount >0 , \"Sorry: not allow tokens to send\");\r\n        require(amount == vote, \"Sorry: amount not equal vote\");\r\n        \r\n         if( ( _vote1 > 0 && _vote2 > 0 && _vote3 > 0 && _vote4 > 0 && _vote1==_vote2 && _vote2==_vote3 && _vote3==_vote4)||\r\n            ( _vote1 > 0 && _vote2 > 0 && _vote3 > 0 && _vote5 > 0 && _vote1==_vote2 && _vote2==_vote3 && _vote3==_vote5)||\r\n            ( _vote1 > 0 && _vote2 > 0 && _vote4 > 0 && _vote5 > 0 && _vote1==_vote2 && _vote2==_vote4 && _vote4==_vote5)||\r\n            ( _vote1 > 0 && _vote3 > 0 && _vote4 > 0 && _vote5 > 0 && _vote1==_vote3 && _vote3==_vote4 && _vote4==_vote5)||\r\n            ( _vote2 > 0 && _vote3 > 0 && _vote4 > 0 && _vote5 > 0 && _vote2==_vote3 && _vote3==_vote4 && _vote4==_vote5) ){\r\n            \r\n           \r\n            tokenBEP20.safeTransfer(_accountant, amount);\r\n            _vote1 = 0;\r\n            _vote2 = 0;\r\n            _vote3 = 0;\r\n            _vote4 = 0;\r\n            _vote5 = 0;\r\n            emit releaseAmountAt(msg.sender,_accountant,amount);\r\n         }\r\n         else{\r\n             revert('Not enought 4 vote');\r\n         }\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\ncontract Cowboy_Snake_Fund_BUSD is Cowboy_Snake_Fund_BUSD_Contract {\r\n    constructor(IERC20 token, address accountant, address signer,address founderAddress_1, address founderAddress_2, address founderAddress_3, \r\n    address founderAddress_4, address founderAddress_5)\r\n        public\r\n        Cowboy_Snake_Fund_BUSD_Contract(token, accountant, signer,founderAddress_1,founderAddress_2,founderAddress_3,founderAddress_4,founderAddress_5)\r\n    {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"founderAddress_1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"founderAddress_2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"founderAddress_3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"founderAddress_4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"founderAddress_5\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseAmountAt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateSignerAt\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"_vote1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_vote2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_vote3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_vote4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_vote5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountantAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder_1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder_2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder_3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder_4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder_5\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenBEP20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseAmountBEP20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setVote1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setVote2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setVote3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setVote4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setVote5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unsetVote1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unsetVote2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unsetVote3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unsetVote4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unsetVote5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"updateSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Cowboy_Snake_Fund_BUSD", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000388212947c9a4fe2bfe3320873c374f42a2eefb80000000000000000000000000e1bb06c45feefacd1736056f4a1b1a4e00855750000000000000000000000007888c7e4614e00e11f3e0aa2cf3062eaa593bad0000000000000000000000000b86d77ad6fe0655607725c0dae58170cbe547a2400000000000000000000000025af534c5cbabab2ccfab3840faf8b1047b219c300000000000000000000000012b442fa479105ea97ff32ae507edd8c3cc926be000000000000000000000000ae8f93529bea589688b7cee29bcdc303b83df508", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://a728b87e249d8486e2bced3c317297a1699b884843c95d080e082d5d6513c590"}