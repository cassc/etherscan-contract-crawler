{"SourceCode": "/*\r\n* \r\n* $DEWO Token - The Native Token In DecentraWorld's Ecosystem\r\n* DecentraWorld - Increasing Privacy Standards In DeFi\r\n*\r\n* Documentation: http://docs.decentraworld.co/\r\n* GitHub: https://github.com/decentraworldDEWO\r\n* DecentraWorld: https://DecentraWorld.co/\r\n* DAO: https://dao.decentraworld.co/\r\n* Governance: https://gov.decentraworld.co/\r\n* DecentraMix: https://decentramix.io/\r\n*\r\n*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\r\n*\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\r\n*\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\r\n*\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u255a\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2591\u2591\r\n*\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2591\u2591\r\n*\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\r\n*\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\r\n*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\r\n*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\r\n*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\r\n*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\r\n*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\r\n*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\r\n*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\r\n*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\r\n*\r\n*/\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File: @OpenZeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @OpenZeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @OpenZeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/DecentraWorld.sol\r\n\r\n/*\r\n* \r\n* $DEWO Token - The Native Token In DecentraWorld's Ecosystem\r\n* DecentraWorld - Increasing Privacy Standards In DeFi\r\n*\r\n* Documentation: http://docs.decentraworld.co/\r\n* GitHub: https://github.com/decentraworldDEWO\r\n* DecentraWorld: https://DecentraWorld.co/\r\n* DAO: https://dao.decentraworld.co/\r\n* Governance: https://gov.decentraworld.co/\r\n* DecentraMix: https://decentramix.io/\r\n*\r\n*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\r\n*\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\r\n*\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\r\n*\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u255a\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2591\u2591\r\n*\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2591\u2591\r\n*\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\r\n*\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\r\n*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\r\n*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\r\n*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\r\n*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\r\n*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\r\n*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\r\n*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\r\n*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\r\n*\r\n*/\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\n/**\r\n * @dev Interfaces\r\n */\r\n\r\ninterface IDEXFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPancakeswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n}\r\n\r\ncontract DecentraWorld is Context, IERC20, IERC20Metadata, Ownable {\r\n    using SafeMath for uint256;\r\n\t// DecentraWorld - $DEWO\r\n    uint256 _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    // Mapping\r\n    mapping (string => uint) txTaxes;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping (address => bool) public excludeFromTax;\r\n    mapping (address => bool) public exclueFromMaxTx;\r\n    // Addresses Of Tax Receivers\r\n    address public daoandfarmingAddress;\r\n    address public marketingAddress;\r\n    address public developmentAddress;\r\n    address public coreteamAddress;\r\n\r\n    // taxes for differnet levels\r\n    struct TaxLevels {\r\n        uint taxDiscount;\r\n        uint amount;\r\n    }\r\n\r\n    struct DEWOTokenTax {\r\n        uint forMarketing;\r\n        uint forCoreTeam;\r\n        uint forDevelopment;\r\n        uint forDAOAndFarming;\r\n    }\r\n\r\n    struct TxLimit {\r\n        uint buyMaxTx;\r\n        uint sellMaxTx;\r\n        uint txcooldown;\r\n        mapping(address => uint) buys;\r\n        mapping(address => uint) sells;\r\n        mapping(address => uint) lastTx;\r\n    }\r\n\r\n    mapping (uint => TaxLevels) taxTiers;\r\n    TxLimit txSettings;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    constructor() {\r\n        _name = \"DecentraWorld\";\r\n        _symbol = \"$DEWO\";\r\n        _decimals = 18;\r\n        _totalSupply = 100000000 * (10 ** decimals());\r\n\r\n        //Temporary Tax Receivers\r\n        daoandfarmingAddress = msg.sender;\r\n        marketingAddress = 0x5d5a0368b8C383c45c625a7241473A1a4F61eA4E;\r\n        developmentAddress = 0xdA9f5e831b7D18c35CA7778eD271b4d4f3bE183E;\r\n        coreteamAddress = 0x797BD28BaE691B21e235E953043337F4794Ff9DB;\r\n\r\n        // Exclude From Taxes By Default\r\n        excludeFromTax[msg.sender] = true;\r\n        excludeFromTax[daoandfarmingAddress] = true;\r\n        excludeFromTax[marketingAddress] = true;\r\n        excludeFromTax[developmentAddress] = true;\r\n        excludeFromTax[coreteamAddress] = true;\r\n\r\n        // Exclude From MaxTx By Default\r\n        exclueFromMaxTx[msg.sender] = true;\r\n        exclueFromMaxTx[daoandfarmingAddress] = true;\r\n        exclueFromMaxTx[marketingAddress] = true;\r\n        exclueFromMaxTx[developmentAddress] = true;\r\n        exclueFromMaxTx[coreteamAddress] = true;\r\n\r\n\r\n        // Transaction taxes apply solely on swaps (buys/sells)\r\n        // Tier 1 - Default Buy Fee [6% Total]\r\n        // Tier 2 - Buy Fee [3% Total]\r\n        // Tier 3 - Buy Fee [0% Total]\r\n        //\r\n        // Automatically set the default transactions taxes\r\n        // [Tier 1: 6% Buy Fee]\r\n        txTaxes[\"marketingBuyTax\"] = 3;      // [3%] DAO, Governance, Farming Pools\r\n        txTaxes[\"developmentBuyTax\"] = 1;    // [1%] Marketing Fee\r\n        txTaxes[\"coreteamBuyTax\"] = 1;       // [1%] Development Fee\r\n        txTaxes[\"daoandfarmingBuyTax\"] = 1;  // [1%] DecentraWorld's Core-Team\r\n        // [Tier 1: 10% Sell Fee]\r\n        txTaxes[\"marketingSellTax\"] = 4;     // 4% DAO, Governance, Farming Pools \r\n        txTaxes[\"developmentSellTax\"] = 3;   // 3% Marketing Fee\r\n        txTaxes[\"coreteamSellTax\"] = 1;      // 1% Development Fee\r\n        txTaxes[\"daoandfarmingSellTax\"] = 2; // 2% DecentraWorld's Core-Team\r\n        /*\r\n           Buy Transaction Tax - 3 tiers:\r\n           *** Must buy these amounts to qualify\r\n           Tier 1: 6%/10% (0+    $DEWO balance)\r\n           Tier 2: 3%/8%  (100K+ $DEWO balance)\r\n           Tier 3: 0%/6%  (400K+ $DEWO balance) \r\n\r\n           Sell Transaction Tax - 3 tiers:\r\n           *** Must hold these amounts to qualify\r\n           Tier 1: 6%/10% (0+    $DEWO balance)\r\n           Tier 2: 3%/8%  (150K+ $DEWO balance)\r\n           Tier 3: 0%/6%  (300K+ $DEWO balance) \r\n\r\n           Tax Re-distribution Buys (6%/3%/0%):\r\n           DAO Fund/Farming:      3% | 1% | 0%\r\n           Marketing Budget:      1% | 1% | 0% \r\n           Development Fund:      1% | 0% | 0%\r\n           Core-Team:             1% | 1% | 0% \r\n\r\n           Tax Re-distribution Sells (10%/8%/6%):\r\n           DAO Fund/Farming:        4% | 3% | 3%\r\n           Marketing Budget:        3% | 2% | 1% \r\n           Development Fund:        1% | 1% | 1%\r\n           Core-Team:               2% | 2% | 1% \r\n           The community can disable the holder rewards fee and migrate that \r\n           fee to the rewards/staking pool. This can be done via the Governance portal.\r\n        */\r\n        // Default Tax Tiers & Discounts\r\n        // Get a 50% discount on purchase tax taxes\r\n        taxTiers[0].taxDiscount = 50;\r\n        // When buying over 0.1% of total supply (100,000 $DEWO)\r\n        taxTiers[0].amount = 100000 * (10 ** decimals()); \r\n\r\n        // Get a 100% discount on purchase tax taxes\r\n        taxTiers[1].taxDiscount = 99;\r\n        // When buying over 0.4% of total supply (400,000 $DEWO)\r\n        taxTiers[1].amount = 400000 * (10 ** decimals());\r\n\r\n        // Get a 20% discount on sell tax taxes\r\n        taxTiers[2].taxDiscount = 20;\r\n        // When holding over 0.15% of total supply (150,000 $DEWO)\r\n        taxTiers[2].amount = 150000 * (10 ** decimals());\r\n\r\n        // Get a 40% discount on sell tax taxes\r\n        taxTiers[3].taxDiscount = 40;\r\n        // When holding over 0.3% of total supply (300,000 $DEWO)\r\n        taxTiers[3].amount = 300000 * (10 ** decimals());\r\n\r\n        // Default txcooldown limit in minutes\r\n        txSettings.txcooldown = 30 minutes;\r\n\r\n        // Default buy limit: 1.25% of total supply\r\n        txSettings.buyMaxTx = _totalSupply.div(80);\r\n\r\n        // Default sell limit: 0.25% of total supply\r\n        txSettings.sellMaxTx = _totalSupply.div(800);\r\n\r\n\r\n        // Create a PancakeSwap (DEX) Pair For $DEWO \r\n        // This will be used to track the price of $DEWO & charge taxes to all pool buys/sells\r\n        address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // Wrapped BNB on Binance Smart Chain\r\n        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // PancakeSwap Router (ChainID: 56 = BSC)\r\n        router = IDEXRouter(_router);\r\n        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n        _allowances[address(this)][address(router)] = _totalSupply;\r\n        approve(_router, _totalSupply);\r\n        \r\n        // Send 100,000,000 $DEWO tokens to the dev (one time only)\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    // Set Buy Taxes\r\n    event BuyTaxes(\r\n        uint _daoandfarmingBuyTax,\r\n        uint _coreteamBuyTax,\r\n        uint _developmentBuyTax, \r\n        uint _marketingBuyTax\r\n    );\r\n    function setBuyTaxes(\r\n        uint _daoandfarmingBuyTax,\r\n        uint _coreteamBuyTax,\r\n        uint _developmentBuyTax, \r\n        uint _marketingBuyTax\r\n    // Hardcoded limitation to the maximum tax fee per address \r\n    // Maximum tax for each buys/sells: 6% max tax per tax receiver, 24% max tax total\r\n    ) external onlyOwner {\r\n        require(_daoandfarmingBuyTax <= 6, \"DAO & Farming tax is above 6%!\");\r\n        require(_coreteamBuyTax <= 6, \"Core-Team Buy tax is above 6%!\");\r\n        require(_developmentBuyTax <= 6, \"Development Fund tax is above 6%!\");\r\n        require(_marketingBuyTax <= 6, \"Marketing tax is above 6%!\");\r\n        txTaxes[\"daoandfarmingBuyTax\"] = _daoandfarmingBuyTax;\r\n        txTaxes[\"coreteamBuyTax\"] = _coreteamBuyTax; \r\n        txTaxes[\"developmentBuyTax\"] = _developmentBuyTax; \r\n        txTaxes[\"marketingBuyTax\"] = _marketingBuyTax; \r\n        emit BuyTaxes(\r\n            _daoandfarmingBuyTax,\r\n            _coreteamBuyTax, \r\n            _developmentBuyTax, \r\n            _marketingBuyTax\r\n        );\r\n    }\r\n\r\n    // Set Sell Taxes\r\n        event SellTaxes(\r\n        uint _daoandfarmingSellTax,\r\n        uint _coreteamSellTax, \r\n        uint _developmentSellTax,\r\n        uint _marketingSellTax\r\n    );\r\n    function setSellTaxes(\r\n        uint _daoandfarmingSellTax,\r\n        uint _coreteamSellTax, \r\n        uint _developmentSellTax,\r\n        uint _marketingSellTax\r\n        // Hardcoded limitation to the maximum tax fee per address \r\n        // Maximum tax for buys/sells: 6% max tax per tax receiver, 24% max tax total\r\n    ) external onlyOwner {\r\n        require(_daoandfarmingSellTax <= 6, \"DAO & Farming tax is above 6%!\");\r\n        require(_coreteamSellTax <= 6, \"Core-team tax is above 6%!\");\r\n        require(_developmentSellTax <= 6, \"Development tax is above 6%!\");\r\n        require(_marketingSellTax <= 6, \"Marketing tax is above 6%!\");\r\n        txTaxes[\"daoandfarmingSellTax\"] = _daoandfarmingSellTax;\r\n        txTaxes[\"coreteamSellTax\"] = _coreteamSellTax; \r\n        txTaxes[\"developmentSellTax\"] = _developmentSellTax; \r\n        txTaxes[\"marketingSellTax\"] = _marketingSellTax; \r\n        emit SellTaxes(\r\n            _daoandfarmingSellTax,\r\n            _coreteamSellTax, \r\n            _developmentSellTax, \r\n            _marketingSellTax\r\n        );\r\n    }\r\n\r\n\r\n    // Displays a list of all current taxes\r\n    function getSellTaxes() public view returns(\r\n        uint marketingSellTax,\r\n        uint developmentSellTax,\r\n        uint coreteamSellTax,\r\n        uint daoandfarmingSellTax\r\n    ) {\r\n        return (\r\n            txTaxes[\"marketingSellTax\"],\r\n            txTaxes[\"developmentSellTax\"],\r\n            txTaxes[\"coreteamSellTax\"],\r\n            txTaxes[\"daoandfarmingSellTax\"]\r\n        );\r\n    }\r\n\r\n        // Displays a list of all current taxes\r\n    function getBuyTaxes() public view returns(\r\n        uint marketingBuyTax,\r\n        uint developmentBuyTax,\r\n        uint coreteamBuyTax,\r\n        uint daoandfarmingBuyTax\r\n    ) {\r\n        return (\r\n            txTaxes[\"marketingBuyTax\"],\r\n            txTaxes[\"developmentBuyTax\"],\r\n            txTaxes[\"coreteamBuyTax\"],\r\n            txTaxes[\"daoandfarmingBuyTax\"]\r\n        );\r\n    }\r\n    \r\n    // Set the DAO and Farming Tax Receiver Address (daoandfarmingAddress)\r\n    function setDAOandFarmingAddress(address _daoandfarmingAddress) external onlyOwner {\r\n        daoandfarmingAddress = _daoandfarmingAddress;\r\n    }\r\n\r\n    // Set the Marketing Tax Receiver Address (marketingAddress)\r\n    function setMarketingAddress(address _marketingAddress) external onlyOwner {\r\n        marketingAddress = _marketingAddress;\r\n    }\r\n\r\n    // Set the Development Tax Receiver Address (developmentAddress)\r\n    function setDevelopmentAddress(address _developmentAddress) external onlyOwner {\r\n        developmentAddress = _developmentAddress;\r\n    }\r\n\r\n    // Set the Core-Team Tax Receiver Address (coreteamAddress)\r\n    function setCoreTeamAddress(address _coreteamAddress) external onlyOwner {\r\n        coreteamAddress = _coreteamAddress;\r\n    }\r\n\r\n    // Exclude an address from tax\r\n    function setExcludeFromTax(address _address, bool _value) external onlyOwner {\r\n        excludeFromTax[_address] = _value;\r\n    }\r\n\r\n    // Exclude an address from maximum transaction limit\r\n    function setExclueFromMaxTx(address _address, bool _value) external onlyOwner {\r\n        exclueFromMaxTx[_address] = _value;\r\n    }\r\n\r\n    // Set Buy Tax Tiers\r\n    function setBuyTaxTiers(uint _discount1, uint _amount1, uint _discount2, uint _amount2) external onlyOwner {\r\n        require(_discount1 > 0 && _discount1 < 100 && _discount2 > 0 && _discount2 < 100 && _amount1 > 0 && _amount2 > 0, \"Values have to be bigger than zero!\");\r\n        taxTiers[0].taxDiscount = _discount1;\r\n        taxTiers[0].amount = _amount1;\r\n        taxTiers[1].taxDiscount = _discount2;\r\n        taxTiers[1].amount = _amount2;\r\n        \r\n    }\r\n\r\n    // Set Sell Tax Tiers\r\n        function setSellTaxTiers(uint _discount3, uint _amount3, uint _discount4, uint _amount4) external onlyOwner {\r\n        require(_discount3 > 0 && _discount3 < 100 && _discount4 > 0 && _discount4 < 100 && _amount3 > 0 && _amount4 > 0, \"Values have to be bigger than zero!\");\r\n        taxTiers[2].taxDiscount = _discount3;\r\n        taxTiers[2].amount = _amount3;\r\n        taxTiers[3].taxDiscount = _discount4;\r\n        taxTiers[3].amount = _amount4;\r\n        \r\n    }\r\n\r\n    // Get Buy Tax Tiers\r\n    function getBuyTaxTiers() public view returns(uint discount1, uint amount1, uint discount2, uint amount2) {\r\n        return (taxTiers[0].taxDiscount, taxTiers[0].amount, taxTiers[1].taxDiscount, taxTiers[1].amount);\r\n    }\r\n\r\n    // Get Sell Tax Tiers\r\n    function getSellTaxTiers() public view returns(uint discount3, uint amount3, uint discount4, uint amount4) {\r\n        return (taxTiers[2].taxDiscount, taxTiers[2].amount, taxTiers[3].taxDiscount, taxTiers[3].amount);\r\n    }\r\n\r\n    // Set Transaction Settings: Max Buy Limit, Max Sell Limit, Cooldown Limit. \r\n    function setTxSettings(uint _buyMaxTx, uint _sellMaxTx, uint _txcooldown) external onlyOwner {\r\n        require(_buyMaxTx >= _totalSupply.div(200), \"Buy transaction limit is too low!\"); // 0.5%\r\n        require(_sellMaxTx >= _totalSupply.div(400), \"Sell transaction limit is too low!\"); // 0.25%\r\n        require(_txcooldown <= 4 minutes, \"Cooldown should be 4 minutes or less!\");\r\n        txSettings.buyMaxTx = _buyMaxTx;\r\n        txSettings.sellMaxTx = _sellMaxTx;\r\n        txSettings.txcooldown = _txcooldown;\r\n    }\r\n\r\n    // Get Max Transaction Settings: Max Buy, Max Sell, Cooldown Limit.\r\n    function getTxSettings() public view returns(uint buyMaxTx, uint sellMaxTx, uint txcooldown) {\r\n        return (txSettings.buyMaxTx, txSettings.sellMaxTx, txSettings.txcooldown);\r\n    }\r\n\r\n    // Check Buy Limit During A Cooldown (used in _transfer)\r\n    function checkBuyTxLimit(address _sender, uint256 _amount) internal view {\r\n        require(\r\n            exclueFromMaxTx[_sender] == true ||\r\n            txSettings.buys[_sender].add(_amount) < txSettings.buyMaxTx,\r\n            \"Buy transaction limit reached!\"\r\n        );\r\n    }\r\n\r\n    // Check Sell Limit During A Cooldown (used in _transfer)\r\n    function checkSellTxLimit(address _sender, uint256 _amount) internal view {\r\n        require(\r\n            exclueFromMaxTx[_sender] == true ||\r\n            txSettings.sells[_sender].add(_amount) < txSettings.sellMaxTx,\r\n            \"Sell transaction limit reached!\"\r\n        );\r\n    }\r\n    \r\n    // Saves the recent buys & sells during a cooldown  (used in _transfer)\r\n    function setRecentTx(bool _isSell, address _sender, uint _amount) internal {\r\n        if(txSettings.lastTx[_sender].add(txSettings.txcooldown) < block.timestamp) {\r\n            _isSell ? txSettings.sells[_sender] = _amount : txSettings.buys[_sender] = _amount;\r\n        } else {\r\n            _isSell ? txSettings.sells[_sender] += _amount : txSettings.buys[_sender] += _amount;\r\n        }\r\n\r\n        txSettings.lastTx[_sender] = block.timestamp;\r\n    }\r\n\r\n    // Get the recent buys, sells, and the last transaction\r\n    function getRecentTx(address _address) public view returns(uint buys, uint sells, uint lastTx) {\r\n        return (txSettings.buys[_address], txSettings.sells[_address], txSettings.lastTx[_address]);\r\n    }\r\n\r\n    // Get $DEWO Token Price In BNB\r\n    function getTokenPrice(uint _amount) public view returns(uint) {\r\n        IPancakeswapV2Pair pcsPair = IPancakeswapV2Pair(pair);\r\n        IERC20 token1 = IERC20(pcsPair.token1());\r\n        (uint Res0, uint Res1,) = pcsPair.getReserves();\r\n        uint res0 = Res0*(10**token1.decimals());\r\n        return((_amount.mul(res0)).div(Res1)); \r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token taxes, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        uint marketingFee;\r\n        uint developmentFee;\r\n        uint coreteamFee;\r\n        uint daoandfarmingFee;\r\n\r\n        uint taxDiscount;\r\n        bool hasTaxes = true;\r\n\r\n        // Buys from PancakeSwap's $DEWO pool\r\n        if(from == pair) {\r\n            checkBuyTxLimit(to, amount); \r\n            setRecentTx(false, to, amount);\r\n            marketingFee = txTaxes[\"marketingBuyTax\"];\r\n            developmentFee = txTaxes[\"developmentBuyTax\"];\r\n            coreteamFee = txTaxes[\"coreteamBuyTax\"];\r\n            daoandfarmingFee = txTaxes[\"daoandfarmingBuyTax\"];\r\n            // Transaction Tax Tiers 2 & 3 - Discounted Rate\r\n            if(amount >= taxTiers[0].amount && amount < taxTiers[1].amount) {\r\n                taxDiscount = taxTiers[0].taxDiscount;\r\n            } else if(amount >= taxTiers[1].amount) {\r\n                taxDiscount = taxTiers[1].taxDiscount;\r\n            }\r\n        }\r\n\r\n        // Sells from PancakeSwap's $DEWO pool\r\n        else if(to == pair) {\r\n            checkSellTxLimit(from, amount);\r\n            setRecentTx(true, from, amount);\r\n            marketingFee = txTaxes[\"marketingSellTax\"];\r\n            developmentFee = txTaxes[\"developmentSellTax\"];\r\n            coreteamFee = txTaxes[\"coreteamSellTax\"];\r\n            daoandfarmingFee = txTaxes[\"daoandfarmingSellTax\"];\r\n            // Calculate the balance after this transaction\r\n            uint newBalanceAmount = fromBalance.sub(amount);\r\n            // Transaction Tax Tiers 2 & 3 - Discounted Rate\r\n            if(newBalanceAmount >= taxTiers[2].amount && newBalanceAmount < taxTiers[3].amount) {\r\n                taxDiscount = taxTiers[2].taxDiscount;\r\n            } else if(newBalanceAmount >= taxTiers[3].amount) {\r\n                taxDiscount = taxTiers[3].taxDiscount;\r\n            }\r\n        }\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        if(excludeFromTax[to] || excludeFromTax[from]) {\r\n            hasTaxes = false;\r\n        }\r\n\r\n        // Calculate taxes if this wallet is not excluded and buys/sells from $DEWO's PCS pair pool\r\n        if(hasTaxes && (to == pair || from == pair)) {\r\n            DEWOTokenTax memory DEWOTokenTaxes;\r\n            DEWOTokenTaxes.forDAOAndFarming = amount.mul(daoandfarmingFee).mul(100 - taxDiscount).div(10000);\r\n            DEWOTokenTaxes.forDevelopment = amount.mul(developmentFee).mul(100 - taxDiscount).div(10000);\r\n            DEWOTokenTaxes.forCoreTeam = amount.mul(coreteamFee).mul(100 - taxDiscount).div(10000);\r\n            DEWOTokenTaxes.forMarketing = amount.mul(marketingFee).mul(100 - taxDiscount).div(10000);\r\n             \r\n\r\n            // Calculate total taxes and deduct from the transfered amount\r\n            uint totalTaxes =\r\n                DEWOTokenTaxes.forDAOAndFarming\r\n                .add(DEWOTokenTaxes.forDevelopment)\r\n                .add(DEWOTokenTaxes.forCoreTeam)\r\n                .add(DEWOTokenTaxes.forMarketing);\r\n            amount = amount.sub(totalTaxes);\r\n\r\n            // Pay DAO And Farming Taxes\r\n            _balances[daoandfarmingAddress] += DEWOTokenTaxes.forDAOAndFarming;\r\n            emit Transfer(from, daoandfarmingAddress, DEWOTokenTaxes.forDAOAndFarming);\r\n\r\n            // Pay Development Fund Taxes\r\n            _balances[developmentAddress] += DEWOTokenTaxes.forDevelopment;\r\n            emit Transfer(from, developmentAddress, DEWOTokenTaxes.forDevelopment);\r\n\r\n            // Pay Core-Team Taxes\r\n            _balances[coreteamAddress] += DEWOTokenTaxes.forCoreTeam;\r\n            emit Transfer(from, coreteamAddress, DEWOTokenTaxes.forCoreTeam);\r\n\r\n            // Pay Marketing Taxes\r\n            _balances[marketingAddress] += DEWOTokenTaxes.forMarketing;\r\n            emit Transfer(from, marketingAddress, DEWOTokenTaxes.forMarketing);\r\n\r\n        }\r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_daoandfarmingBuyTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coreteamBuyTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_developmentBuyTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_marketingBuyTax\",\"type\":\"uint256\"}],\"name\":\"BuyTaxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_daoandfarmingSellTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coreteamSellTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_developmentSellTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_marketingSellTax\",\"type\":\"uint256\"}],\"name\":\"SellTaxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreteamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoandfarmingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeFromTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exclueFromMaxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyTaxTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"discount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discount2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coreteamBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoandfarmingBuyTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getRecentTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sells\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTx\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellTaxTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"discount3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discount4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount4\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingSellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentSellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coreteamSellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoandfarmingSellTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTxSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyMaxTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellMaxTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txcooldown\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discount2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount2\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daoandfarmingBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coreteamBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_developmentBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingBuyTax\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coreteamAddress\",\"type\":\"address\"}],\"name\":\"setCoreTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoandfarmingAddress\",\"type\":\"address\"}],\"name\":\"setDAOandFarmingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_developmentAddress\",\"type\":\"address\"}],\"name\":\"setDevelopmentAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setExcludeFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setExclueFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discount3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discount4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount4\",\"type\":\"uint256\"}],\"name\":\"setSellTaxTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daoandfarmingSellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coreteamSellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_developmentSellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingSellTax\",\"type\":\"uint256\"}],\"name\":\"setSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyMaxTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellMaxTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_txcooldown\",\"type\":\"uint256\"}],\"name\":\"setTxSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DecentraWorld", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://df39cfa7733708c529f7fd8c20957f2e9526936a7a7422f04a0d26b1d9fceefe"}