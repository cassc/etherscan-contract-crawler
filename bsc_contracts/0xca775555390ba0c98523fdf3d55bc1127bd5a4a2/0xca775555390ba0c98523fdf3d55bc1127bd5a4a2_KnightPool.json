{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ninterface IMasterChefV2 {\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n\r\n    function pendingKnight(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function userInfo(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint256, uint256);\r\n\r\n    function emergencyWithdraw(uint256 _pid) external;\r\n}\r\n\r\ninterface IBoostContract {\r\n    function onKnightPoolUpdate(\r\n        address _user,\r\n        uint256 _lockedAmount,\r\n        uint256 _lockedDuration,\r\n        uint256 _totalLockedAmount,\r\n        uint256 _maxLockDuration\r\n    ) external;\r\n}\r\n\r\ninterface IVCake {\r\n    function deposit(\r\n        address _user,\r\n        uint256 _amount,\r\n        uint256 _lockDuration\r\n    ) external;\r\n\r\n    function withdraw(address _user) external;\r\n}\r\n\r\ncontract KnightPool is Ownable, Pausable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct UserInfo {\r\n        uint256 shares; // number of shares for a user.\r\n        uint256 lastDepositedTime; // keep track of deposited time for potential penalty.\r\n        uint256 knightAtLastUserAction; // keep track of Knight deposited at the last user action.\r\n        uint256 lastUserActionTime; // keep track of the last user action time.\r\n        uint256 lockStartTime; // lock start time.\r\n        uint256 lockEndTime; // lock end time.\r\n        uint256 userBoostedShare; // boost share, in order to give the user higher reward. The user only enjoys the reward, so the principal needs to be recorded as a debt.\r\n        bool locked; //lock status.\r\n        uint256 lockedAmount; // amount deposited during lock period.\r\n    }\r\n\r\n    IERC20 public immutable token; // knight token.\r\n\r\n    IMasterChefV2 public immutable masterchefV2;\r\n\r\n    address public boostContract; // boost contract used in Masterchef.\r\n    address public VCake;\r\n\r\n    mapping(address => UserInfo) public userInfo;\r\n    mapping(address => bool) public freePerformanceFeeUsers; // free performance fee users.\r\n    mapping(address => bool) public freeWithdrawFeeUsers; // free withdraw fee users.\r\n    mapping(address => bool) public freeOverdueFeeUsers; // free overdue fee users.\r\n\r\n    uint256 public totalShares;\r\n    address public admin;\r\n    address public treasury;\r\n    address public operator;\r\n    uint256 public knightPoolPID;\r\n    uint256 public totalBoostDebt; // total boost debt.\r\n    uint256 public totalLockedAmount; // total lock amount.\r\n\r\n    uint256 public constant MAX_PERFORMANCE_FEE = 2000; // 20%\r\n    uint256 public constant MAX_WITHDRAW_FEE = 500; // 5%\r\n    uint256 public constant MAX_OVERDUE_FEE = 100 * 1e10; // 100%\r\n    uint256 public constant MAX_WITHDRAW_FEE_PERIOD = 1 weeks; // 1 week\r\n    uint256 public constant MIN_LOCK_DURATION = 1 weeks; // 1 week\r\n    uint256 public constant MAX_LOCK_DURATION_LIMIT = 1000 days; // 1000 days\r\n    uint256 public constant BOOST_WEIGHT_LIMIT = 5000 * 1e10; // 5000%\r\n    uint256 public constant PRECISION_FACTOR = 1e12; // precision factor.\r\n    uint256 public constant PRECISION_FACTOR_SHARE = 1e28; // precision factor for share.\r\n    uint256 public constant MIN_DEPOSIT_AMOUNT = 0.00001 ether;\r\n    uint256 public constant MIN_WITHDRAW_AMOUNT = 0.00001 ether;\r\n    uint256 public UNLOCK_FREE_DURATION = 1 weeks; // 1 week\r\n    uint256 public MAX_LOCK_DURATION = 365 days; // 365 days\r\n    uint256 public DURATION_FACTOR = 365 days; // 365 days, in order to calculate user additional boost.\r\n    uint256 public DURATION_FACTOR_OVERDUE = 180 days; // 180 days, in order to calculate overdue fee.\r\n    uint256 public BOOST_WEIGHT = 20000000000000; // 100%\r\n\r\n    uint256 public performanceFee = 200; // 2%\r\n    uint256 public performanceFeeContract = 200; // 2%\r\n    uint256 public withdrawFee = 10; // 0.1%\r\n    uint256 public withdrawFeeContract = 10; // 0.1%\r\n    uint256 public overdueFee = 100 * 1e10; // 100%\r\n    uint256 public withdrawFeePeriod = 72 hours; // 3 days\r\n\r\n    event Deposit(\r\n        address indexed sender,\r\n        uint256 amount,\r\n        uint256 shares,\r\n        uint256 duration,\r\n        uint256 lastDepositedTime\r\n    );\r\n    event Withdraw(address indexed sender, uint256 amount, uint256 shares);\r\n    event Harvest(address indexed sender, uint256 amount);\r\n    event Pause();\r\n    event Unpause();\r\n    event Init();\r\n    event Lock(\r\n        address indexed sender,\r\n        uint256 lockedAmount,\r\n        uint256 shares,\r\n        uint256 lockedDuration,\r\n        uint256 blockTimestamp\r\n    );\r\n    event Unlock(\r\n        address indexed sender,\r\n        uint256 amount,\r\n        uint256 blockTimestamp\r\n    );\r\n    event NewAdmin(address admin);\r\n    event NewTreasury(address treasury);\r\n    event NewOperator(address operator);\r\n    event NewBoostContract(address boostContract);\r\n    event NewVCakeContract(address VCake);\r\n    event FreeFeeUser(address indexed user, bool indexed free);\r\n    event NewPerformanceFee(uint256 performanceFee);\r\n    event NewPerformanceFeeContract(uint256 performanceFeeContract);\r\n    event NewWithdrawFee(uint256 withdrawFee);\r\n    event NewOverdueFee(uint256 overdueFee);\r\n    event NewWithdrawFeeContract(uint256 withdrawFeeContract);\r\n    event NewWithdrawFeePeriod(uint256 withdrawFeePeriod);\r\n    event NewMaxLockDuration(uint256 maxLockDuration);\r\n    event NewDurationFactor(uint256 durationFactor);\r\n    event NewDurationFactorOverdue(uint256 durationFactorOverdue);\r\n    event NewUnlockFreeDuration(uint256 unlockFreeDuration);\r\n    event NewBoostWeight(uint256 boostWeight);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _token: Knight token contract\r\n     * @param _masterchefV2: MasterChefV2 contract\r\n     * @param _admin: address of the admin\r\n     * @param _treasury: address of the treasury (collects fees)\r\n     * @param _operator: address of operator\r\n     * @param _pid: knight pool ID in MasterChefV2\r\n     */\r\n    constructor(\r\n        IERC20 _token,\r\n        IMasterChefV2 _masterchefV2,\r\n        address _admin,\r\n        address _treasury,\r\n        address _operator,\r\n        uint256 _pid\r\n    ) {\r\n        token = _token;\r\n        masterchefV2 = _masterchefV2;\r\n        admin = _admin;\r\n        treasury = _treasury;\r\n        operator = _operator;\r\n        knightPoolPID = _pid;\r\n    }\r\n\r\n    /**\r\n     * @notice Deposits a dummy token to `MASTER_CHEF` MCV2.\r\n     * It will transfer all the `dummyToken` in the tx sender address.\r\n     * @param dummyToken The address of the token to be deposited into MCV2.\r\n     */\r\n    function init(IERC20 dummyToken) external onlyOwner {\r\n        uint256 balance = dummyToken.balanceOf(msg.sender);\r\n        require(balance != 0, \"Balance must exceed 0\");\r\n        dummyToken.safeTransferFrom(msg.sender, address(this), balance);\r\n        dummyToken.approve(address(masterchefV2), balance);\r\n        masterchefV2.deposit(knightPoolPID, balance);\r\n        emit Init();\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if the msg.sender is the admin address.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"admin: wut?\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if the msg.sender is either the knight owner address or the operator address.\r\n     */\r\n    modifier onlyOperatorOrKnightOwner(address _user) {\r\n        require(\r\n            msg.sender == _user || msg.sender == operator,\r\n            \"Not operator or knight owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Update user info in Boost Contract.\r\n     * @param _user: User address\r\n     */\r\n    function updateBoostContractInfo(address _user) internal {\r\n        if (boostContract != address(0)) {\r\n            UserInfo storage user = userInfo[_user];\r\n            uint256 lockDuration = user.lockEndTime - user.lockStartTime;\r\n            IBoostContract(boostContract).onKnightPoolUpdate(\r\n                _user,\r\n                user.lockedAmount,\r\n                lockDuration,\r\n                totalLockedAmount,\r\n                DURATION_FACTOR\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Update user share When need to unlock or charges a fee.\r\n     * @param _user: User address\r\n     */\r\n    function updateUserShare(address _user) internal {\r\n        UserInfo storage user = userInfo[_user];\r\n        if (user.shares > 0) {\r\n            if (user.locked) {\r\n                // Calculate the user's current token amount and update related parameters.\r\n                uint256 currentAmount = (balanceOf() * (user.shares)) /\r\n                    totalShares -\r\n                    user.userBoostedShare;\r\n                totalBoostDebt -= user.userBoostedShare;\r\n                user.userBoostedShare = 0;\r\n                totalShares -= user.shares;\r\n                //Charge a overdue fee after the free duration has expired.\r\n                if (\r\n                    !freeOverdueFeeUsers[_user] &&\r\n                    ((user.lockEndTime + UNLOCK_FREE_DURATION) <\r\n                        block.timestamp)\r\n                ) {\r\n                    uint256 earnAmount = currentAmount - user.lockedAmount;\r\n                    uint256 overdueDuration = block.timestamp -\r\n                        user.lockEndTime -\r\n                        UNLOCK_FREE_DURATION;\r\n                    if (overdueDuration > DURATION_FACTOR_OVERDUE) {\r\n                        overdueDuration = DURATION_FACTOR_OVERDUE;\r\n                    }\r\n                    // Rates are calculated based on the user's overdue duration.\r\n                    uint256 overdueWeight = (overdueDuration * overdueFee) /\r\n                        DURATION_FACTOR_OVERDUE;\r\n                    uint256 currentOverdueFee = (earnAmount * overdueWeight) /\r\n                        PRECISION_FACTOR;\r\n                    token.safeTransfer(treasury, currentOverdueFee);\r\n                    currentAmount -= currentOverdueFee;\r\n                }\r\n                // Recalculate the user's share.\r\n                uint256 pool = balanceOf();\r\n                uint256 currentShares;\r\n                if (totalShares != 0) {\r\n                    currentShares =\r\n                        (currentAmount * totalShares) /\r\n                        (pool - currentAmount);\r\n                } else {\r\n                    currentShares = currentAmount;\r\n                }\r\n                user.shares = currentShares;\r\n                totalShares += currentShares;\r\n                // After the lock duration, update related parameters.\r\n                if (user.lockEndTime < block.timestamp) {\r\n                    user.locked = false;\r\n                    user.lockStartTime = 0;\r\n                    user.lockEndTime = 0;\r\n                    totalLockedAmount -= user.lockedAmount;\r\n                    user.lockedAmount = 0;\r\n                    emit Unlock(_user, currentAmount, block.timestamp);\r\n                }\r\n            } else if (!freePerformanceFeeUsers[_user]) {\r\n                // Calculate Performance fee.\r\n                uint256 totalAmount = (user.shares * balanceOf()) / totalShares;\r\n                totalShares -= user.shares;\r\n                user.shares = 0;\r\n                uint256 earnAmount = totalAmount - user.knightAtLastUserAction;\r\n                uint256 feeRate = performanceFee;\r\n                if (_isContract(_user)) {\r\n                    feeRate = performanceFeeContract;\r\n                }\r\n                uint256 currentPerformanceFee = (earnAmount * feeRate) / 10000;\r\n                if (currentPerformanceFee > 0) {\r\n                    token.safeTransfer(treasury, currentPerformanceFee);\r\n                    totalAmount -= currentPerformanceFee;\r\n                }\r\n                // Recalculate the user's share.\r\n                uint256 pool = balanceOf();\r\n                uint256 newShares;\r\n                if (totalShares != 0) {\r\n                    newShares =\r\n                        (totalAmount * totalShares) /\r\n                        (pool - totalAmount);\r\n                } else {\r\n                    newShares = totalAmount;\r\n                }\r\n                user.shares = newShares;\r\n                totalShares += newShares;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Unlock user knight funds.\r\n     * @dev Only possible when contract not paused.\r\n     * @param _user: User address\r\n     */\r\n    function unlock(address _user)\r\n        external\r\n        onlyOperatorOrKnightOwner(_user)\r\n        whenNotPaused\r\n    {\r\n        UserInfo storage user = userInfo[_user];\r\n        require(\r\n            user.locked && user.lockEndTime < block.timestamp,\r\n            \"Cannot unlock yet\"\r\n        );\r\n        depositOperation(0, 0, _user);\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit funds into the Knight Pool.\r\n     * @dev Only possible when contract not paused.\r\n     * @param _amount: number of tokens to deposit (in KNIGHT)\r\n     * @param _lockDuration: Token lock duration\r\n     */\r\n    function deposit(uint256 _amount, uint256 _lockDuration)\r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(_amount > 0 || _lockDuration > 0, \"Nothing to deposit\");\r\n        depositOperation(_amount, _lockDuration, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice The operation of deposite.\r\n     * @param _amount: number of tokens to deposit (in KNIGHT)\r\n     * @param _lockDuration: Token lock duration\r\n     * @param _user: User address\r\n     */\r\n    function depositOperation(\r\n        uint256 _amount,\r\n        uint256 _lockDuration,\r\n        address _user\r\n    ) internal {\r\n        UserInfo storage user = userInfo[_user];\r\n        if (user.shares == 0 || _amount > 0) {\r\n            require(\r\n                _amount > MIN_DEPOSIT_AMOUNT,\r\n                \"Deposit amount must be greater than MIN_DEPOSIT_AMOUNT\"\r\n            );\r\n        }\r\n        // Calculate the total lock duration and check whether the lock duration meets the conditions.\r\n        uint256 totalLockDuration = _lockDuration;\r\n        if (user.lockEndTime >= block.timestamp) {\r\n            // Adding funds during the lock duration is equivalent to re-locking the position, needs to update some variables.\r\n            if (_amount > 0) {\r\n                user.lockStartTime = block.timestamp;\r\n                totalLockedAmount -= user.lockedAmount;\r\n                user.lockedAmount = 0;\r\n            }\r\n            totalLockDuration += user.lockEndTime - user.lockStartTime;\r\n        }\r\n        require(\r\n            _lockDuration == 0 || totalLockDuration >= MIN_LOCK_DURATION,\r\n            \"Minimum lock period is one week\"\r\n        );\r\n        require(\r\n            totalLockDuration <= MAX_LOCK_DURATION,\r\n            \"Maximum lock period exceeded\"\r\n        );\r\n\r\n        if (VCake != address(0)) {\r\n            IVCake(VCake).deposit(_user, _amount, _lockDuration);\r\n        }\r\n\r\n        // Harvest tokens from Masterchef.\r\n        harvest();\r\n\r\n        // Handle stock funds.\r\n        if (totalShares == 0) {\r\n            uint256 stockAmount = available();\r\n            token.safeTransfer(treasury, stockAmount);\r\n        }\r\n        // Update user share.\r\n        updateUserShare(_user);\r\n\r\n        // Update lock duration.\r\n        if (_lockDuration > 0) {\r\n            if (user.lockEndTime < block.timestamp) {\r\n                user.lockStartTime = block.timestamp;\r\n                user.lockEndTime = block.timestamp + _lockDuration;\r\n            } else {\r\n                user.lockEndTime += _lockDuration;\r\n            }\r\n            user.locked = true;\r\n        }\r\n\r\n        uint256 currentShares;\r\n        uint256 currentAmount;\r\n        uint256 userCurrentLockedBalance;\r\n        uint256 pool = balanceOf();\r\n        if (_amount > 0) {\r\n            token.safeTransferFrom(_user, address(this), _amount);\r\n            currentAmount = _amount;\r\n        }\r\n\r\n        // Calculate lock funds\r\n        if (user.shares > 0 && user.locked) {\r\n            userCurrentLockedBalance = (pool * user.shares) / totalShares;\r\n            currentAmount += userCurrentLockedBalance;\r\n            totalShares -= user.shares;\r\n            user.shares = 0;\r\n\r\n            // Update lock amount\r\n            if (user.lockStartTime == block.timestamp) {\r\n                user.lockedAmount = userCurrentLockedBalance;\r\n                totalLockedAmount += user.lockedAmount;\r\n            }\r\n        }\r\n        if (totalShares != 0) {\r\n            currentShares =\r\n                (currentAmount * totalShares) /\r\n                (pool - userCurrentLockedBalance);\r\n        } else {\r\n            currentShares = currentAmount;\r\n        }\r\n\r\n        // Calculate the boost weight share.\r\n        if (user.lockEndTime > user.lockStartTime) {\r\n            // Calculate boost share.\r\n            uint256 boostWeight = ((user.lockEndTime - user.lockStartTime) *\r\n                BOOST_WEIGHT) / DURATION_FACTOR;\r\n            uint256 boostShares = (boostWeight * currentShares) /\r\n                PRECISION_FACTOR;\r\n            currentShares += boostShares;\r\n            user.shares += currentShares;\r\n\r\n            // Calculate boost share , the user only enjoys the reward, so the principal needs to be recorded as a debt.\r\n            uint256 userBoostedShare = (boostWeight * currentAmount) /\r\n                PRECISION_FACTOR;\r\n            user.userBoostedShare += userBoostedShare;\r\n            totalBoostDebt += userBoostedShare;\r\n\r\n            // Update lock amount.\r\n            user.lockedAmount += _amount;\r\n            totalLockedAmount += _amount;\r\n\r\n            emit Lock(\r\n                _user,\r\n                user.lockedAmount,\r\n                user.shares,\r\n                (user.lockEndTime - user.lockStartTime),\r\n                block.timestamp\r\n            );\r\n        } else {\r\n            user.shares += currentShares;\r\n        }\r\n\r\n        if (_amount > 0 || _lockDuration > 0) {\r\n            user.lastDepositedTime = block.timestamp;\r\n        }\r\n        totalShares += currentShares;\r\n\r\n        user.knightAtLastUserAction =\r\n            (user.shares * balanceOf()) /\r\n            totalShares -\r\n            user.userBoostedShare;\r\n        user.lastUserActionTime = block.timestamp;\r\n\r\n        // Update user info in Boost Contract.\r\n        updateBoostContractInfo(_user);\r\n\r\n        emit Deposit(\r\n            _user,\r\n            _amount,\r\n            currentShares,\r\n            _lockDuration,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw funds from the KNIGHT Pool.\r\n     * @param _amount: Number of amount to withdraw\r\n     */\r\n    function withdrawByAmount(uint256 _amount) public whenNotPaused {\r\n        require(\r\n            _amount > MIN_WITHDRAW_AMOUNT,\r\n            \"Withdraw amount must be greater than MIN_WITHDRAW_AMOUNT\"\r\n        );\r\n        withdrawOperation(0, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw funds from the Knight Pool.\r\n     * @param _shares: Number of shares to withdraw\r\n     */\r\n    function withdraw(uint256 _shares) public whenNotPaused {\r\n        require(_shares > 0, \"Nothing to withdraw\");\r\n        withdrawOperation(_shares, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice The operation of withdraw.\r\n     * @param _shares: Number of shares to withdraw\r\n     * @param _amount: Number of amount to withdraw\r\n     */\r\n    function withdrawOperation(uint256 _shares, uint256 _amount) internal {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(_shares <= user.shares, \"Withdraw amount exceeds balance\");\r\n        require(user.lockEndTime < block.timestamp, \"Still in lock\");\r\n\r\n        if (VCake != address(0)) {\r\n            IVCake(VCake).withdraw(msg.sender);\r\n        }\r\n\r\n        // Calculate the percent of withdraw shares, when unlocking or calculating the Performance fee, the shares will be updated.\r\n        uint256 currentShare = _shares;\r\n        uint256 sharesPercent = (_shares * PRECISION_FACTOR_SHARE) /\r\n            user.shares;\r\n\r\n        // Harvest token from MasterchefV2.\r\n        harvest();\r\n\r\n        // Update user share.\r\n        updateUserShare(msg.sender);\r\n\r\n        if (_shares == 0 && _amount > 0) {\r\n            uint256 pool = balanceOf();\r\n            currentShare = (_amount * totalShares) / pool; // Calculate equivalent shares\r\n            if (currentShare > user.shares) {\r\n                currentShare = user.shares;\r\n            }\r\n        } else {\r\n            currentShare =\r\n                (sharesPercent * user.shares) /\r\n                PRECISION_FACTOR_SHARE;\r\n        }\r\n        uint256 currentAmount = (balanceOf() * currentShare) / totalShares;\r\n        user.shares -= currentShare;\r\n        totalShares -= currentShare;\r\n\r\n        // Calculate withdraw fee\r\n        if (\r\n            !freeWithdrawFeeUsers[msg.sender] &&\r\n            (block.timestamp < user.lastDepositedTime + withdrawFeePeriod)\r\n        ) {\r\n            uint256 feeRate = withdrawFee;\r\n            if (_isContract(msg.sender)) {\r\n                feeRate = withdrawFeeContract;\r\n            }\r\n            uint256 currentWithdrawFee = (currentAmount * feeRate) / 10000;\r\n            token.safeTransfer(treasury, currentWithdrawFee);\r\n            currentAmount -= currentWithdrawFee;\r\n        }\r\n\r\n        token.safeTransfer(msg.sender, currentAmount);\r\n\r\n        if (user.shares > 0) {\r\n            user.knightAtLastUserAction =\r\n                (user.shares * balanceOf()) /\r\n                totalShares;\r\n        } else {\r\n            user.knightAtLastUserAction = 0;\r\n        }\r\n\r\n        user.lastUserActionTime = block.timestamp;\r\n\r\n        // Update user info in Boost Contract.\r\n        updateBoostContractInfo(msg.sender);\r\n\r\n        emit Withdraw(msg.sender, currentAmount, currentShare);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw all funds for a user\r\n     */\r\n    function withdrawAll() external {\r\n        withdraw(userInfo[msg.sender].shares);\r\n    }\r\n\r\n    /**\r\n     * @notice Harvest pending KNIGHT tokens from MasterChef\r\n     */\r\n    function harvest() internal {\r\n        uint256 pendingKnight = masterchefV2.pendingKnight(\r\n            knightPoolPID,\r\n            address(this)\r\n        );\r\n        if (pendingKnight > 0) {\r\n            uint256 balBefore = available();\r\n            masterchefV2.withdraw(knightPoolPID, 0);\r\n            uint256 balAfter = available();\r\n            emit Harvest(msg.sender, (balAfter - balBefore));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Set admin address\r\n     * @dev Only callable by the contract owner.\r\n     */\r\n    function setAdmin(address _admin) external onlyOwner {\r\n        require(_admin != address(0), \"Cannot be zero address\");\r\n        admin = _admin;\r\n        emit NewAdmin(admin);\r\n    }\r\n\r\n    /**\r\n     * @notice Set treasury address\r\n     * @dev Only callable by the contract owner.\r\n     */\r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        require(_treasury != address(0), \"Cannot be zero address\");\r\n        treasury = _treasury;\r\n        emit NewTreasury(treasury);\r\n    }\r\n\r\n    /**\r\n     * @notice Set operator address\r\n     * @dev Callable by the contract owner.\r\n     */\r\n    function setOperator(address _operator) external onlyOwner {\r\n        require(_operator != address(0), \"Cannot be zero address\");\r\n        operator = _operator;\r\n        emit NewOperator(operator);\r\n    }\r\n\r\n    /**\r\n     * @notice Set Boost Contract address\r\n     * @dev Callable by the contract admin.\r\n     */\r\n    function setBoostContract(address _boostContract) external onlyAdmin {\r\n        require(_boostContract != address(0), \"Cannot be zero address\");\r\n        boostContract = _boostContract;\r\n        emit NewBoostContract(boostContract);\r\n    }\r\n\r\n    /**\r\n     * @notice Set VCake Contract address\r\n     * @dev Callable by the contract admin.\r\n     */\r\n    function setVCakeContract(address _VCake) external onlyAdmin {\r\n        require(_VCake != address(0), \"Cannot be zero address\");\r\n        VCake = _VCake;\r\n        emit NewVCakeContract(VCake);\r\n    }\r\n\r\n    /**\r\n     * @notice Set free performance fee address\r\n     * @dev Only callable by the contract admin.\r\n     * @param _user: User address\r\n     * @param _free: true:free false:not free\r\n     */\r\n    function setFreePerformanceFeeUser(address _user, bool _free)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        require(_user != address(0), \"Cannot be zero address\");\r\n        freePerformanceFeeUsers[_user] = _free;\r\n        emit FreeFeeUser(_user, _free);\r\n    }\r\n\r\n    /**\r\n     * @notice Set free overdue fee address\r\n     * @dev Only callable by the contract admin.\r\n     * @param _user: User address\r\n     * @param _free: true:free false:not free\r\n     */\r\n    function setOverdueFeeUser(address _user, bool _free) external onlyAdmin {\r\n        require(_user != address(0), \"Cannot be zero address\");\r\n        freeOverdueFeeUsers[_user] = _free;\r\n        emit FreeFeeUser(_user, _free);\r\n    }\r\n\r\n    /**\r\n     * @notice Set free withdraw fee address\r\n     * @dev Only callable by the contract admin.\r\n     * @param _user: User address\r\n     * @param _free: true:free false:not free\r\n     */\r\n    function setWithdrawFeeUser(address _user, bool _free) external onlyAdmin {\r\n        require(_user != address(0), \"Cannot be zero address\");\r\n        freeWithdrawFeeUsers[_user] = _free;\r\n        emit FreeFeeUser(_user, _free);\r\n    }\r\n\r\n    /**\r\n     * @notice Set performance fee\r\n     * @dev Only callable by the contract admin.\r\n     */\r\n    function setPerformanceFee(uint256 _performanceFee) external onlyAdmin {\r\n        require(\r\n            _performanceFee <= MAX_PERFORMANCE_FEE,\r\n            \"performanceFee cannot be more than MAX_PERFORMANCE_FEE\"\r\n        );\r\n        performanceFee = _performanceFee;\r\n        emit NewPerformanceFee(performanceFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Set performance fee for contract\r\n     * @dev Only callable by the contract admin.\r\n     */\r\n    function setPerformanceFeeContract(uint256 _performanceFeeContract)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        require(\r\n            _performanceFeeContract <= MAX_PERFORMANCE_FEE,\r\n            \"performanceFee cannot be more than MAX_PERFORMANCE_FEE\"\r\n        );\r\n        performanceFeeContract = _performanceFeeContract;\r\n        emit NewPerformanceFeeContract(performanceFeeContract);\r\n    }\r\n\r\n    /**\r\n     * @notice Set withdraw fee\r\n     * @dev Only callable by the contract admin.\r\n     */\r\n    function setWithdrawFee(uint256 _withdrawFee) external onlyAdmin {\r\n        require(\r\n            _withdrawFee <= MAX_WITHDRAW_FEE,\r\n            \"withdrawFee cannot be more than MAX_WITHDRAW_FEE\"\r\n        );\r\n        withdrawFee = _withdrawFee;\r\n        emit NewWithdrawFee(withdrawFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Set overdue fee\r\n     * @dev Only callable by the contract admin.\r\n     */\r\n    function setOverdueFee(uint256 _overdueFee) external onlyAdmin {\r\n        require(\r\n            _overdueFee <= MAX_OVERDUE_FEE,\r\n            \"overdueFee cannot be more than MAX_OVERDUE_FEE\"\r\n        );\r\n        overdueFee = _overdueFee;\r\n        emit NewOverdueFee(_overdueFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Set withdraw fee for contract\r\n     * @dev Only callable by the contract admin.\r\n     */\r\n    function setWithdrawFeeContract(uint256 _withdrawFeeContract)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        require(\r\n            _withdrawFeeContract <= MAX_WITHDRAW_FEE,\r\n            \"withdrawFee cannot be more than MAX_WITHDRAW_FEE\"\r\n        );\r\n        withdrawFeeContract = _withdrawFeeContract;\r\n        emit NewWithdrawFeeContract(withdrawFeeContract);\r\n    }\r\n\r\n    /**\r\n     * @notice Set withdraw fee period\r\n     * @dev Only callable by the contract admin.\r\n     */\r\n    function setWithdrawFeePeriod(uint256 _withdrawFeePeriod)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        require(\r\n            _withdrawFeePeriod <= MAX_WITHDRAW_FEE_PERIOD,\r\n            \"withdrawFeePeriod cannot be more than MAX_WITHDRAW_FEE_PERIOD\"\r\n        );\r\n        withdrawFeePeriod = _withdrawFeePeriod;\r\n        emit NewWithdrawFeePeriod(withdrawFeePeriod);\r\n    }\r\n\r\n    /**\r\n     * @notice Set MAX_LOCK_DURATION\r\n     * @dev Only callable by the contract admin.\r\n     */\r\n    function setMaxLockDuration(uint256 _maxLockDuration) external onlyAdmin {\r\n        require(\r\n            _maxLockDuration <= MAX_LOCK_DURATION_LIMIT,\r\n            \"MAX_LOCK_DURATION cannot be more than MAX_LOCK_DURATION_LIMIT\"\r\n        );\r\n        MAX_LOCK_DURATION = _maxLockDuration;\r\n        emit NewMaxLockDuration(_maxLockDuration);\r\n    }\r\n\r\n    /**\r\n     * @notice Set DURATION_FACTOR\r\n     * @dev Only callable by the contract admin.\r\n     */\r\n    function setDurationFactor(uint256 _durationFactor) external onlyAdmin {\r\n        require(_durationFactor > 0, \"DURATION_FACTOR cannot be zero\");\r\n        DURATION_FACTOR = _durationFactor;\r\n        emit NewDurationFactor(_durationFactor);\r\n    }\r\n\r\n    /**\r\n     * @notice Set DURATION_FACTOR_OVERDUE\r\n     * @dev Only callable by the contract admin.\r\n     */\r\n    function setDurationFactorOverdue(uint256 _durationFactorOverdue)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        require(\r\n            _durationFactorOverdue > 0,\r\n            \"DURATION_FACTOR_OVERDUE cannot be zero\"\r\n        );\r\n        DURATION_FACTOR_OVERDUE = _durationFactorOverdue;\r\n        emit NewDurationFactorOverdue(_durationFactorOverdue);\r\n    }\r\n\r\n    /**\r\n     * @notice Set UNLOCK_FREE_DURATION\r\n     * @dev Only callable by the contract admin.\r\n     */\r\n    function setUnlockFreeDuration(uint256 _unlockFreeDuration)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        require(_unlockFreeDuration > 0, \"UNLOCK_FREE_DURATION cannot be zero\");\r\n        UNLOCK_FREE_DURATION = _unlockFreeDuration;\r\n        emit NewUnlockFreeDuration(_unlockFreeDuration);\r\n    }\r\n\r\n    /**\r\n     * @notice Set BOOST_WEIGHT\r\n     * @dev Only callable by the contract admin.\r\n     */\r\n    function setBoostWeight(uint256 _boostWeight) external onlyAdmin {\r\n        require(\r\n            _boostWeight <= BOOST_WEIGHT_LIMIT,\r\n            \"BOOST_WEIGHT cannot be more than BOOST_WEIGHT_LIMIT\"\r\n        );\r\n        BOOST_WEIGHT = _boostWeight;\r\n        emit NewBoostWeight(_boostWeight);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw unexpected tokens sent to the Knight Pool\r\n     */\r\n    function inCaseTokensGetStuck(address _token) external onlyAdmin {\r\n        require(\r\n            _token != address(token),\r\n            \"Token cannot be same as deposit token\"\r\n        );\r\n\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).safeTransfer(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Trigger stopped state\r\n     * @dev Only possible when contract not paused.\r\n     */\r\n    function pause() external onlyAdmin whenNotPaused {\r\n        _pause();\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @notice Return to normal state\r\n     * @dev Only possible when contract is paused.\r\n     */\r\n    function unpause() external onlyAdmin whenPaused {\r\n        _unpause();\r\n        emit Unpause();\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate Performance fee.\r\n     * @param _user: User address\r\n     * @return Returns Performance fee.\r\n     */\r\n    function calculatePerformanceFee(address _user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        UserInfo storage user = userInfo[_user];\r\n        if (\r\n            user.shares > 0 && !user.locked && !freePerformanceFeeUsers[_user]\r\n        ) {\r\n            uint256 pool = balanceOf() + calculateTotalPendingKnightRewards();\r\n            uint256 totalAmount = (user.shares * pool) / totalShares;\r\n            uint256 earnAmount = totalAmount - user.knightAtLastUserAction;\r\n            uint256 feeRate = performanceFee;\r\n            if (_isContract(_user)) {\r\n                feeRate = performanceFeeContract;\r\n            }\r\n            uint256 currentPerformanceFee = (earnAmount * feeRate) / 10000;\r\n            return currentPerformanceFee;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate overdue fee.\r\n     * @param _user: User address\r\n     * @return Returns Overdue fee.\r\n     */\r\n    function calculateOverdueFee(address _user) public view returns (uint256) {\r\n        UserInfo storage user = userInfo[_user];\r\n        if (\r\n            user.shares > 0 &&\r\n            user.locked &&\r\n            !freeOverdueFeeUsers[_user] &&\r\n            ((user.lockEndTime + UNLOCK_FREE_DURATION) < block.timestamp)\r\n        ) {\r\n            uint256 pool = balanceOf() + calculateTotalPendingKnightRewards();\r\n            uint256 currentAmount = (pool * (user.shares)) /\r\n                totalShares -\r\n                user.userBoostedShare;\r\n            uint256 earnAmount = currentAmount - user.lockedAmount;\r\n            uint256 overdueDuration = block.timestamp -\r\n                user.lockEndTime -\r\n                UNLOCK_FREE_DURATION;\r\n            if (overdueDuration > DURATION_FACTOR_OVERDUE) {\r\n                overdueDuration = DURATION_FACTOR_OVERDUE;\r\n            }\r\n            // Rates are calculated based on the user's overdue duration.\r\n            uint256 overdueWeight = (overdueDuration * overdueFee) /\r\n                DURATION_FACTOR_OVERDUE;\r\n            uint256 currentOverdueFee = (earnAmount * overdueWeight) /\r\n                PRECISION_FACTOR;\r\n            return currentOverdueFee;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate Performance Fee Or Overdue Fee\r\n     * @param _user: User address\r\n     * @return Returns  Performance Fee Or Overdue Fee.\r\n     */\r\n    function calculatePerformanceFeeOrOverdueFee(address _user)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return calculatePerformanceFee(_user) + calculateOverdueFee(_user);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate withdraw fee.\r\n     * @param _user: User address\r\n     * @param _shares: Number of shares to withdraw\r\n     * @return Returns Withdraw fee.\r\n     */\r\n    function calculateWithdrawFee(address _user, uint256 _shares)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        UserInfo storage user = userInfo[_user];\r\n        if (user.shares < _shares) {\r\n            _shares = user.shares;\r\n        }\r\n        if (\r\n            !freeWithdrawFeeUsers[msg.sender] &&\r\n            (block.timestamp < user.lastDepositedTime + withdrawFeePeriod)\r\n        ) {\r\n            uint256 pool = balanceOf() + calculateTotalPendingKnightRewards();\r\n            uint256 sharesPercent = (_shares * PRECISION_FACTOR) / user.shares;\r\n            uint256 currentTotalAmount = (pool * (user.shares)) /\r\n                totalShares -\r\n                user.userBoostedShare -\r\n                calculatePerformanceFeeOrOverdueFee(_user);\r\n            uint256 currentAmount = (currentTotalAmount * sharesPercent) /\r\n                PRECISION_FACTOR;\r\n            uint256 feeRate = withdrawFee;\r\n            if (_isContract(msg.sender)) {\r\n                feeRate = withdrawFeeContract;\r\n            }\r\n            uint256 currentWithdrawFee = (currentAmount * feeRate) / 10000;\r\n            return currentWithdrawFee;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the total pending rewards that can be harvested\r\n     * @return Returns total pending knight rewards\r\n     */\r\n    function calculateTotalPendingKnightRewards() public view returns (uint256) {\r\n        uint256 amount = masterchefV2.pendingKnight(knightPoolPID, address(this));\r\n        return amount;\r\n    }\r\n\r\n    function getPricePerFullShare() external view returns (uint256) {\r\n        return\r\n            totalShares == 0\r\n                ? 1e18\r\n                : (((balanceOf() + calculateTotalPendingKnightRewards()) *\r\n                    (1e18)) / totalShares);\r\n    }\r\n\r\n    /**\r\n     * @notice Current pool available balance\r\n     * @dev The contract puts 100% of the tokens to work.\r\n     */\r\n    function available() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the total underlying tokens\r\n     * @dev It includes tokens held by the contract and the boost debt amount.\r\n     */\r\n    function balanceOf() public view returns (uint256) {\r\n        return token.balanceOf(address(this)) + totalBoostDebt;\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if address is a contract\r\n     */\r\n    function _isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IMasterChefV2\",\"name\":\"_masterchefV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastDepositedTime\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"free\",\"type\":\"bool\"}],\"name\":\"FreeFeeUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"boostContract\",\"type\":\"address\"}],\"name\":\"NewBoostContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boostWeight\",\"type\":\"uint256\"}],\"name\":\"NewBoostWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationFactor\",\"type\":\"uint256\"}],\"name\":\"NewDurationFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationFactorOverdue\",\"type\":\"uint256\"}],\"name\":\"NewDurationFactorOverdue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLockDuration\",\"type\":\"uint256\"}],\"name\":\"NewMaxLockDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"NewOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"overdueFee\",\"type\":\"uint256\"}],\"name\":\"NewOverdueFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"}],\"name\":\"NewPerformanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFeeContract\",\"type\":\"uint256\"}],\"name\":\"NewPerformanceFeeContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"NewTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockFreeDuration\",\"type\":\"uint256\"}],\"name\":\"NewUnlockFreeDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"VCake\",\"type\":\"address\"}],\"name\":\"NewVCakeContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"name\":\"NewWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFeeContract\",\"type\":\"uint256\"}],\"name\":\"NewWithdrawFeeContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFeePeriod\",\"type\":\"uint256\"}],\"name\":\"NewWithdrawFeePeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOOST_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOST_WEIGHT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DURATION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DURATION_FACTOR_OVERDUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOCK_DURATION_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_OVERDUE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERFORMANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW_FEE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WITHDRAW_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNLOCK_FREE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VCake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateOverdueFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculatePerformanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateTotalPendingKnightRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeOverdueFeeUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freePerformanceFeeUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeWithdrawFeeUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"dummyToken\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"knightPoolPID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterchefV2\",\"outputs\":[{\"internalType\":\"contract IMasterChefV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overdueFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boostContract\",\"type\":\"address\"}],\"name\":\"setBoostContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boostWeight\",\"type\":\"uint256\"}],\"name\":\"setBoostWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationFactor\",\"type\":\"uint256\"}],\"name\":\"setDurationFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationFactorOverdue\",\"type\":\"uint256\"}],\"name\":\"setDurationFactorOverdue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_free\",\"type\":\"bool\"}],\"name\":\"setFreePerformanceFeeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLockDuration\",\"type\":\"uint256\"}],\"name\":\"setMaxLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_overdueFee\",\"type\":\"uint256\"}],\"name\":\"setOverdueFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_free\",\"type\":\"bool\"}],\"name\":\"setOverdueFeeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFeeContract\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockFreeDuration\",\"type\":\"uint256\"}],\"name\":\"setUnlockFreeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_VCake\",\"type\":\"address\"}],\"name\":\"setVCakeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFeeContract\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFeeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFeePeriod\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFeePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_free\",\"type\":\"bool\"}],\"name\":\"setWithdrawFeeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBoostDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"knightAtLastUserAction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUserActionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBoostedShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawByAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "KnightPool", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d23811058eb6e7967d9a00dc3886e75610c4abba000000000000000000000000e50cb76a71b0c52ab091860cd61b9ba2fa4074140000000000000000000000002add64a6077aa946282da263a839dd0caa0d16680000000000000000000000002add64a6077aa946282da263a839dd0caa0d16680000000000000000000000002add64a6077aa946282da263a839dd0caa0d16680000000000000000000000000000000000000000000000000000000000000029", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://222069d9cbd4732a9d3b6aff8e11ad9e098ef6033b48a71f67771556c8d85d63"}