{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/LBRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\nimport {BinHelper} from \\\"./libraries/BinHelper.sol\\\";\\nimport {Constants} from \\\"./libraries/Constants.sol\\\";\\nimport {Encoded} from \\\"./libraries/math/Encoded.sol\\\";\\nimport {FeeHelper} from \\\"./libraries/FeeHelper.sol\\\";\\nimport {JoeLibrary} from \\\"./libraries/JoeLibrary.sol\\\";\\nimport {LiquidityConfigurations} from \\\"./libraries/math/LiquidityConfigurations.sol\\\";\\nimport {PackedUint128Math} from \\\"./libraries/math/PackedUint128Math.sol\\\";\\nimport {TokenHelper} from \\\"./libraries/TokenHelper.sol\\\";\\nimport {Uint256x256Math} from \\\"./libraries/math/Uint256x256Math.sol\\\";\\n\\nimport {IJoePair} from \\\"./interfaces/IJoePair.sol\\\";\\nimport {ILBPair} from \\\"./interfaces/ILBPair.sol\\\";\\nimport {ILBLegacyPair} from \\\"./interfaces/ILBLegacyPair.sol\\\";\\nimport {ILBToken} from \\\"./interfaces/ILBToken.sol\\\";\\nimport {ILBRouter} from \\\"./interfaces/ILBRouter.sol\\\";\\nimport {ILBLegacyRouter} from \\\"./interfaces/ILBLegacyRouter.sol\\\";\\nimport {IJoeFactory} from \\\"./interfaces/IJoeFactory.sol\\\";\\nimport {ILBLegacyFactory} from \\\"./interfaces/ILBLegacyFactory.sol\\\";\\nimport {ILBFactory} from \\\"./interfaces/ILBFactory.sol\\\";\\nimport {IWNATIVE} from \\\"./interfaces/IWNATIVE.sol\\\";\\n\\n/**\\n * @title Liquidity Book Router\\n * @author Trader Joe\\n * @notice Main contract to interact with to swap and manage liquidity on Joe V2 exchange.\\n */\\ncontract LBRouter is ILBRouter {\\n    using TokenHelper for IERC20;\\n    using TokenHelper for IWNATIVE;\\n    using JoeLibrary for uint256;\\n    using PackedUint128Math for bytes32;\\n\\n    ILBFactory private immutable _factory;\\n    IJoeFactory private immutable _factoryV1;\\n    ILBLegacyFactory private immutable _legacyFactory;\\n    ILBLegacyRouter private immutable _legacyRouter;\\n    IWNATIVE private immutable _wnative;\\n\\n    modifier onlyFactoryOwner() {\\n        if (msg.sender != _factory.owner()) revert LBRouter__NotFactoryOwner();\\n        _;\\n    }\\n\\n    modifier ensure(uint256 deadline) {\\n        if (block.timestamp > deadline) revert LBRouter__DeadlineExceeded(deadline, block.timestamp);\\n        _;\\n    }\\n\\n    modifier verifyPathValidity(Path memory path) {\\n        if (\\n            path.pairBinSteps.length == 0 || path.versions.length != path.pairBinSteps.length\\n                || path.pairBinSteps.length + 1 != path.tokenPath.length\\n        ) revert LBRouter__LengthsMismatch();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     * @param factory Address of Joe V2.1 factory\\n     * @param factoryV1 Address of Joe V1 factory\\n     * @param legacyFactory Address of Joe V2 factory\\n     * @param legacyRouter Address of Joe V2 router\\n     * @param wnative Address of WNATIVE\\n     */\\n    constructor(\\n        ILBFactory factory,\\n        IJoeFactory factoryV1,\\n        ILBLegacyFactory legacyFactory,\\n        ILBLegacyRouter legacyRouter,\\n        IWNATIVE wnative\\n    ) {\\n        _factory = factory;\\n        _factoryV1 = factoryV1;\\n        _legacyFactory = legacyFactory;\\n        _legacyRouter = legacyRouter;\\n        _wnative = wnative;\\n    }\\n\\n    /**\\n     * @dev Receive function that only accept NATIVE from the WNATIVE contract\\n     */\\n    receive() external payable {\\n        if (msg.sender != address(_wnative)) revert LBRouter__SenderIsNotWNATIVE();\\n    }\\n\\n    /**\\n     * View function to get the factory V2.1 address\\n     * @return lbFactory The address of the factory V2.1\\n     */\\n    function getFactory() external view override returns (ILBFactory lbFactory) {\\n        return _factory;\\n    }\\n\\n    /**\\n     * View function to get the factory V2 address\\n     * @return legacyLBfactory The address of the factory V2\\n     */\\n    function getLegacyFactory() external view override returns (ILBLegacyFactory legacyLBfactory) {\\n        return _legacyFactory;\\n    }\\n\\n    /**\\n     * View function to get the factory V1 address\\n     * @return factoryV1 The address of the factory V1\\n     */\\n    function getV1Factory() external view override returns (IJoeFactory factoryV1) {\\n        return _factoryV1;\\n    }\\n\\n    /**\\n     * View function to get the router V2 address\\n     * @return legacyRouter The address of the router V2\\n     */\\n    function getLegacyRouter() external view override returns (ILBLegacyRouter legacyRouter) {\\n        return _legacyRouter;\\n    }\\n\\n    /**\\n     * View function to get the WNATIVE address\\n     * @return wnative The address of WNATIVE\\n     */\\n    function getWNATIVE() external view override returns (IWNATIVE wnative) {\\n        return _wnative;\\n    }\\n\\n    /**\\n     * @notice Returns the approximate id corresponding to the inputted price.\\n     * Warning, the returned id may be inaccurate close to the start price of a bin\\n     * @param pair The address of the LBPair\\n     * @param price The price of y per x (multiplied by 1e36)\\n     * @return The id corresponding to this price\\n     */\\n    function getIdFromPrice(ILBPair pair, uint256 price) external view override returns (uint24) {\\n        return pair.getIdFromPrice(price);\\n    }\\n\\n    /**\\n     * @notice Returns the price corresponding to the inputted id\\n     * @param pair The address of the LBPair\\n     * @param id The id\\n     * @return The price corresponding to this id\\n     */\\n    function getPriceFromId(ILBPair pair, uint24 id) external view override returns (uint256) {\\n        return pair.getPriceFromId(id);\\n    }\\n\\n    /**\\n     * @notice Simulate a swap in\\n     * @param pair The address of the LBPair\\n     * @param amountOut The amount of token to receive\\n     * @param swapForY Whether you swap X for Y (true), or Y for X (false)\\n     * @return amountIn The amount of token to send in order to receive amountOut token\\n     * @return amountOutLeft The amount of token Out that can't be returned due to a lack of liquidity\\n     * @return fee The amount of fees paid in token sent\\n     */\\n    function getSwapIn(ILBPair pair, uint128 amountOut, bool swapForY)\\n        public\\n        view\\n        override\\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee)\\n    {\\n        (amountIn, amountOutLeft, fee) = pair.getSwapIn(amountOut, swapForY);\\n    }\\n\\n    /**\\n     * @notice Simulate a swap out\\n     * @param pair The address of the LBPair\\n     * @param amountIn The amount of token sent\\n     * @param swapForY Whether you swap X for Y (true), or Y for X (false)\\n     * @return amountInLeft The amount of token In that can't be swapped due to a lack of liquidity\\n     * @return amountOut The amount of token received if amountIn tokenX are sent\\n     * @return fee The amount of fees paid in token sent\\n     */\\n    function getSwapOut(ILBPair pair, uint128 amountIn, bool swapForY)\\n        external\\n        view\\n        override\\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee)\\n    {\\n        (amountInLeft, amountOut, fee) = pair.getSwapOut(amountIn, swapForY);\\n    }\\n\\n    /**\\n     * @notice Create a liquidity bin LBPair for tokenX and tokenY using the factory\\n     * @param tokenX The address of the first token\\n     * @param tokenY The address of the second token\\n     * @param activeId The active id of the pair\\n     * @param binStep The bin step in basis point, used to calculate log(1 + binStep)\\n     * @return pair The address of the newly created LBPair\\n     */\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        override\\n        returns (ILBPair pair)\\n    {\\n        pair = _factory.createLBPair(tokenX, tokenY, activeId, binStep);\\n    }\\n\\n    /**\\n     * @notice Add liquidity while performing safety checks\\n     * @dev This function is compliant with fee on transfer tokens\\n     * @param liquidityParameters The liquidity parameters\\n     * @return amountXAdded The amount of token X added\\n     * @return amountYAdded The amount of token Y added\\n     * @return amountXLeft The amount of token X left (sent back to liquidityParameters.refundTo)\\n     * @return amountYLeft The amount of token Y left (sent back to liquidityParameters.refundTo)\\n     * @return depositIds The ids of the deposits\\n     * @return liquidityMinted The amount of liquidity minted\\n     */\\n    function addLiquidity(LiquidityParameters calldata liquidityParameters)\\n        external\\n        override\\n        returns (\\n            uint256 amountXAdded,\\n            uint256 amountYAdded,\\n            uint256 amountXLeft,\\n            uint256 amountYLeft,\\n            uint256[] memory depositIds,\\n            uint256[] memory liquidityMinted\\n        )\\n    {\\n        ILBPair lbPair = ILBPair(\\n            _getLBPairInformation(\\n                liquidityParameters.tokenX, liquidityParameters.tokenY, liquidityParameters.binStep, Version.V2_1\\n            )\\n        );\\n        if (liquidityParameters.tokenX != lbPair.getTokenX()) revert LBRouter__WrongTokenOrder();\\n\\n        liquidityParameters.tokenX.safeTransferFrom(msg.sender, address(lbPair), liquidityParameters.amountX);\\n        liquidityParameters.tokenY.safeTransferFrom(msg.sender, address(lbPair), liquidityParameters.amountY);\\n\\n        (amountXAdded, amountYAdded, amountXLeft, amountYLeft, depositIds, liquidityMinted) =\\n            _addLiquidity(liquidityParameters, lbPair);\\n    }\\n\\n    /**\\n     * @notice Add liquidity with NATIVE while performing safety checks\\n     * @dev This function is compliant with fee on transfer tokens\\n     * @param liquidityParameters The liquidity parameters\\n     * @return amountXAdded The amount of token X added\\n     * @return amountYAdded The amount of token Y added\\n     * @return amountXLeft The amount of token X left (sent back to liquidityParameters.refundTo)\\n     * @return amountYLeft The amount of token Y left (sent back to liquidityParameters.refundTo)\\n     * @return depositIds The ids of the deposits\\n     * @return liquidityMinted The amount of liquidity minted\\n     */\\n    function addLiquidityNATIVE(LiquidityParameters calldata liquidityParameters)\\n        external\\n        payable\\n        override\\n        returns (\\n            uint256 amountXAdded,\\n            uint256 amountYAdded,\\n            uint256 amountXLeft,\\n            uint256 amountYLeft,\\n            uint256[] memory depositIds,\\n            uint256[] memory liquidityMinted\\n        )\\n    {\\n        ILBPair _LBPair = ILBPair(\\n            _getLBPairInformation(\\n                liquidityParameters.tokenX, liquidityParameters.tokenY, liquidityParameters.binStep, Version.V2_1\\n            )\\n        );\\n        if (liquidityParameters.tokenX != _LBPair.getTokenX()) revert LBRouter__WrongTokenOrder();\\n\\n        if (liquidityParameters.tokenX == _wnative && liquidityParameters.amountX == msg.value) {\\n            _wnativeDepositAndTransfer(address(_LBPair), msg.value);\\n            liquidityParameters.tokenY.safeTransferFrom(msg.sender, address(_LBPair), liquidityParameters.amountY);\\n        } else if (liquidityParameters.tokenY == _wnative && liquidityParameters.amountY == msg.value) {\\n            liquidityParameters.tokenX.safeTransferFrom(msg.sender, address(_LBPair), liquidityParameters.amountX);\\n            _wnativeDepositAndTransfer(address(_LBPair), msg.value);\\n        } else {\\n            revert LBRouter__WrongNativeLiquidityParameters(\\n                address(liquidityParameters.tokenX),\\n                address(liquidityParameters.tokenY),\\n                liquidityParameters.amountX,\\n                liquidityParameters.amountY,\\n                msg.value\\n            );\\n        }\\n\\n        (amountXAdded, amountYAdded, amountXLeft, amountYLeft, depositIds, liquidityMinted) =\\n            _addLiquidity(liquidityParameters, _LBPair);\\n    }\\n\\n    /**\\n     * @notice Remove liquidity while performing safety checks\\n     * @dev This function is compliant with fee on transfer tokens\\n     * @param tokenX The address of token X\\n     * @param tokenY The address of token Y\\n     * @param binStep The bin step of the LBPair\\n     * @param amountXMin The min amount to receive of token X\\n     * @param amountYMin The min amount to receive of token Y\\n     * @param ids The list of ids to burn\\n     * @param amounts The list of amounts to burn of each id in `_ids`\\n     * @param to The address of the recipient\\n     * @param deadline The deadline of the tx\\n     * @return amountX Amount of token X returned\\n     * @return amountY Amount of token Y returned\\n     */\\n    function removeLiquidity(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint256 amountXMin,\\n        uint256 amountYMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address to,\\n        uint256 deadline\\n    ) external override ensure(deadline) returns (uint256 amountX, uint256 amountY) {\\n        ILBPair _LBPair = ILBPair(_getLBPairInformation(tokenX, tokenY, binStep, Version.V2_1));\\n        bool isWrongOrder = tokenX != _LBPair.getTokenX();\\n\\n        if (isWrongOrder) (amountXMin, amountYMin) = (amountYMin, amountXMin);\\n\\n        (amountX, amountY) = _removeLiquidity(_LBPair, amountXMin, amountYMin, ids, amounts, to);\\n\\n        if (isWrongOrder) (amountX, amountY) = (amountY, amountX);\\n    }\\n\\n    /**\\n     * @notice Remove NATIVE liquidity while performing safety checks\\n     * @dev This function is **NOT** compliant with fee on transfer tokens.\\n     * This is wanted as it would make users pays the fee on transfer twice,\\n     * use the `removeLiquidity` function to remove liquidity with fee on transfer tokens.\\n     * @param token The address of token\\n     * @param binStep The bin step of the LBPair\\n     * @param amountTokenMin The min amount to receive of token\\n     * @param amountNATIVEMin The min amount to receive of NATIVE\\n     * @param ids The list of ids to burn\\n     * @param amounts The list of amounts to burn of each id in `_ids`\\n     * @param to The address of the recipient\\n     * @param deadline The deadline of the tx\\n     * @return amountToken Amount of token returned\\n     * @return amountNATIVE Amount of NATIVE returned\\n     */\\n    function removeLiquidityNATIVE(\\n        IERC20 token,\\n        uint16 binStep,\\n        uint256 amountTokenMin,\\n        uint256 amountNATIVEMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address payable to,\\n        uint256 deadline\\n    ) external override ensure(deadline) returns (uint256 amountToken, uint256 amountNATIVE) {\\n        IWNATIVE wnative = _wnative;\\n\\n        ILBPair lbPair = ILBPair(_getLBPairInformation(token, IERC20(wnative), binStep, Version.V2_1));\\n\\n        {\\n            bool isNATIVETokenY = IERC20(wnative) == lbPair.getTokenY();\\n\\n            if (!isNATIVETokenY) {\\n                (amountTokenMin, amountNATIVEMin) = (amountNATIVEMin, amountTokenMin);\\n            }\\n\\n            (uint256 amountX, uint256 amountY) =\\n                _removeLiquidity(lbPair, amountTokenMin, amountNATIVEMin, ids, amounts, address(this));\\n\\n            (amountToken, amountNATIVE) = isNATIVETokenY ? (amountX, amountY) : (amountY, amountX);\\n        }\\n\\n        token.safeTransfer(to, amountToken);\\n\\n        wnative.withdraw(amountNATIVE);\\n        _safeTransferNATIVE(to, amountNATIVE);\\n    }\\n\\n    /**\\n     * @notice Swaps exact tokens for tokens while performing safety checks\\n     * @param amountIn The amount of token to send\\n     * @param amountOutMin The min amount of token to receive\\n     * @param path The path of the swap\\n     * @param to The address of the recipient\\n     * @param deadline The deadline of the tx\\n     * @return amountOut Output amount of the swap\\n     */\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external override ensure(deadline) verifyPathValidity(path) returns (uint256 amountOut) {\\n        address[] memory pairs = _getPairs(path.pairBinSteps, path.versions, path.tokenPath);\\n\\n        path.tokenPath[0].safeTransferFrom(msg.sender, pairs[0], amountIn);\\n\\n        amountOut = _swapExactTokensForTokens(amountIn, pairs, path.versions, path.tokenPath, to);\\n\\n        if (amountOutMin > amountOut) revert LBRouter__InsufficientAmountOut(amountOutMin, amountOut);\\n    }\\n\\n    /**\\n     * @notice Swaps exact tokens for NATIVE while performing safety checks\\n     * @param amountIn The amount of token to send\\n     * @param amountOutMinNATIVE The min amount of NATIVE to receive\\n     * @param path The path of the swap\\n     * @param to The address of the recipient\\n     * @param deadline The deadline of the tx\\n     * @return amountOut Output amount of the swap\\n     */\\n    function swapExactTokensForNATIVE(\\n        uint256 amountIn,\\n        uint256 amountOutMinNATIVE,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external override ensure(deadline) verifyPathValidity(path) returns (uint256 amountOut) {\\n        if (path.tokenPath[path.pairBinSteps.length] != IERC20(_wnative)) {\\n            revert LBRouter__InvalidTokenPath(address(path.tokenPath[path.pairBinSteps.length]));\\n        }\\n\\n        address[] memory pairs = _getPairs(path.pairBinSteps, path.versions, path.tokenPath);\\n\\n        path.tokenPath[0].safeTransferFrom(msg.sender, pairs[0], amountIn);\\n\\n        amountOut = _swapExactTokensForTokens(amountIn, pairs, path.versions, path.tokenPath, address(this));\\n\\n        if (amountOutMinNATIVE > amountOut) revert LBRouter__InsufficientAmountOut(amountOutMinNATIVE, amountOut);\\n\\n        _wnative.withdraw(amountOut);\\n        _safeTransferNATIVE(to, amountOut);\\n    }\\n\\n    /**\\n     * @notice Swaps exact NATIVE for tokens while performing safety checks\\n     * @param amountOutMin The min amount of token to receive\\n     * @param path The path of the swap\\n     * @param to The address of the recipient\\n     * @param deadline The deadline of the tx\\n     * @return amountOut Output amount of the swap\\n     */\\n    function swapExactNATIVEForTokens(uint256 amountOutMin, Path memory path, address to, uint256 deadline)\\n        external\\n        payable\\n        override\\n        ensure(deadline)\\n        verifyPathValidity(path)\\n        returns (uint256 amountOut)\\n    {\\n        if (path.tokenPath[0] != IERC20(_wnative)) revert LBRouter__InvalidTokenPath(address(path.tokenPath[0]));\\n\\n        address[] memory pairs = _getPairs(path.pairBinSteps, path.versions, path.tokenPath);\\n\\n        _wnativeDepositAndTransfer(pairs[0], msg.value);\\n\\n        amountOut = _swapExactTokensForTokens(msg.value, pairs, path.versions, path.tokenPath, to);\\n\\n        if (amountOutMin > amountOut) revert LBRouter__InsufficientAmountOut(amountOutMin, amountOut);\\n    }\\n\\n    /**\\n     * @notice Swaps tokens for exact tokens while performing safety checks\\n     * @param amountOut The amount of token to receive\\n     * @param amountInMax The max amount of token to send\\n     * @param path The path of the swap\\n     * @param to The address of the recipient\\n     * @param deadline The deadline of the tx\\n     * @return amountsIn Input amounts of the swap\\n     */\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external override ensure(deadline) verifyPathValidity(path) returns (uint256[] memory amountsIn) {\\n        address[] memory pairs = _getPairs(path.pairBinSteps, path.versions, path.tokenPath);\\n\\n        {\\n            amountsIn = _getAmountsIn(path.versions, pairs, path.tokenPath, amountOut);\\n\\n            if (amountsIn[0] > amountInMax) revert LBRouter__MaxAmountInExceeded(amountInMax, amountsIn[0]);\\n\\n            path.tokenPath[0].safeTransferFrom(msg.sender, pairs[0], amountsIn[0]);\\n\\n            uint256 _amountOutReal = _swapTokensForExactTokens(pairs, path.versions, path.tokenPath, amountsIn, to);\\n\\n            if (_amountOutReal < amountOut) revert LBRouter__InsufficientAmountOut(amountOut, _amountOutReal);\\n        }\\n    }\\n\\n    /**\\n     * @notice Swaps tokens for exact NATIVE while performing safety checks\\n     * @param amountNATIVEOut The amount of NATIVE to receive\\n     * @param amountInMax The max amount of token to send\\n     * @param path The path of the swap\\n     * @param to The address of the recipient\\n     * @param deadline The deadline of the tx\\n     * @return amountsIn path amounts for every step of the swap\\n     */\\n    function swapTokensForExactNATIVE(\\n        uint256 amountNATIVEOut,\\n        uint256 amountInMax,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external override ensure(deadline) verifyPathValidity(path) returns (uint256[] memory amountsIn) {\\n        if (path.tokenPath[path.pairBinSteps.length] != IERC20(_wnative)) {\\n            revert LBRouter__InvalidTokenPath(address(path.tokenPath[path.pairBinSteps.length]));\\n        }\\n\\n        address[] memory pairs = _getPairs(path.pairBinSteps, path.versions, path.tokenPath);\\n        amountsIn = _getAmountsIn(path.versions, pairs, path.tokenPath, amountNATIVEOut);\\n\\n        if (amountsIn[0] > amountInMax) revert LBRouter__MaxAmountInExceeded(amountInMax, amountsIn[0]);\\n\\n        path.tokenPath[0].safeTransferFrom(msg.sender, pairs[0], amountsIn[0]);\\n\\n        uint256 _amountOutReal =\\n            _swapTokensForExactTokens(pairs, path.versions, path.tokenPath, amountsIn, address(this));\\n\\n        if (_amountOutReal < amountNATIVEOut) revert LBRouter__InsufficientAmountOut(amountNATIVEOut, _amountOutReal);\\n\\n        _wnative.withdraw(_amountOutReal);\\n        _safeTransferNATIVE(to, _amountOutReal);\\n    }\\n\\n    /**\\n     * @notice Swaps NATIVE for exact tokens while performing safety checks\\n     * @dev Will refund any NATIVE amount sent in excess to `msg.sender`\\n     * @param amountOut The amount of tokens to receive\\n     * @param path The path of the swap\\n     * @param to The address of the recipient\\n     * @param deadline The deadline of the tx\\n     * @return amountsIn path amounts for every step of the swap\\n     */\\n    function swapNATIVEForExactTokens(uint256 amountOut, Path memory path, address to, uint256 deadline)\\n        external\\n        payable\\n        override\\n        ensure(deadline)\\n        verifyPathValidity(path)\\n        returns (uint256[] memory amountsIn)\\n    {\\n        if (path.tokenPath[0] != IERC20(_wnative)) revert LBRouter__InvalidTokenPath(address(path.tokenPath[0]));\\n\\n        address[] memory pairs = _getPairs(path.pairBinSteps, path.versions, path.tokenPath);\\n        amountsIn = _getAmountsIn(path.versions, pairs, path.tokenPath, amountOut);\\n\\n        if (amountsIn[0] > msg.value) revert LBRouter__MaxAmountInExceeded(msg.value, amountsIn[0]);\\n\\n        _wnativeDepositAndTransfer(pairs[0], amountsIn[0]);\\n\\n        uint256 amountOutReal = _swapTokensForExactTokens(pairs, path.versions, path.tokenPath, amountsIn, to);\\n\\n        if (amountOutReal < amountOut) revert LBRouter__InsufficientAmountOut(amountOut, amountOutReal);\\n\\n        if (msg.value > amountsIn[0]) _safeTransferNATIVE(msg.sender, msg.value - amountsIn[0]);\\n    }\\n\\n    /**\\n     * @notice Swaps exact tokens for tokens while performing safety checks supporting for fee on transfer tokens\\n     * @param amountIn The amount of token to send\\n     * @param amountOutMin The min amount of token to receive\\n     * @param path The path of the swap\\n     * @param to The address of the recipient\\n     * @param deadline The deadline of the tx\\n     * @return amountOut Output amount of the swap\\n     */\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external override ensure(deadline) verifyPathValidity(path) returns (uint256 amountOut) {\\n        address[] memory pairs = _getPairs(path.pairBinSteps, path.versions, path.tokenPath);\\n\\n        IERC20 targetToken = path.tokenPath[pairs.length];\\n\\n        uint256 balanceBefore = targetToken.balanceOf(to);\\n\\n        path.tokenPath[0].safeTransferFrom(msg.sender, pairs[0], amountIn);\\n\\n        _swapSupportingFeeOnTransferTokens(pairs, path.versions, path.tokenPath, to);\\n\\n        amountOut = targetToken.balanceOf(to) - balanceBefore;\\n        if (amountOutMin > amountOut) revert LBRouter__InsufficientAmountOut(amountOutMin, amountOut);\\n    }\\n\\n    /**\\n     * @notice Swaps exact tokens for NATIVE while performing safety checks supporting for fee on transfer tokens\\n     * @param amountIn The amount of token to send\\n     * @param amountOutMinNATIVE The min amount of NATIVE to receive\\n     * @param path The path of the swap\\n     * @param to The address of the recipient\\n     * @param deadline The deadline of the tx\\n     * @return amountOut Output amount of the swap\\n     */\\n    function swapExactTokensForNATIVESupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMinNATIVE,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external override ensure(deadline) verifyPathValidity(path) returns (uint256 amountOut) {\\n        if (path.tokenPath[path.pairBinSteps.length] != IERC20(_wnative)) {\\n            revert LBRouter__InvalidTokenPath(address(path.tokenPath[path.pairBinSteps.length]));\\n        }\\n\\n        address[] memory pairs = _getPairs(path.pairBinSteps, path.versions, path.tokenPath);\\n\\n        uint256 balanceBefore = _wnative.balanceOf(address(this));\\n\\n        path.tokenPath[0].safeTransferFrom(msg.sender, pairs[0], amountIn);\\n\\n        _swapSupportingFeeOnTransferTokens(pairs, path.versions, path.tokenPath, address(this));\\n\\n        amountOut = _wnative.balanceOf(address(this)) - balanceBefore;\\n        if (amountOutMinNATIVE > amountOut) revert LBRouter__InsufficientAmountOut(amountOutMinNATIVE, amountOut);\\n\\n        _wnative.withdraw(amountOut);\\n        _safeTransferNATIVE(to, amountOut);\\n    }\\n\\n    /**\\n     * @notice Swaps exact NATIVE for tokens while performing safety checks supporting for fee on transfer tokens\\n     * @param amountOutMin The min amount of token to receive\\n     * @param path The path of the swap\\n     * @param to The address of the recipient\\n     * @param deadline The deadline of the tx\\n     * @return amountOut Output amount of the swap\\n     */\\n    function swapExactNATIVEForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external payable override ensure(deadline) verifyPathValidity(path) returns (uint256 amountOut) {\\n        if (path.tokenPath[0] != IERC20(_wnative)) revert LBRouter__InvalidTokenPath(address(path.tokenPath[0]));\\n\\n        address[] memory pairs = _getPairs(path.pairBinSteps, path.versions, path.tokenPath);\\n\\n        IERC20 targetToken = path.tokenPath[pairs.length];\\n\\n        uint256 balanceBefore = targetToken.balanceOf(to);\\n\\n        _wnativeDepositAndTransfer(pairs[0], msg.value);\\n\\n        _swapSupportingFeeOnTransferTokens(pairs, path.versions, path.tokenPath, to);\\n\\n        amountOut = targetToken.balanceOf(to) - balanceBefore;\\n        if (amountOutMin > amountOut) revert LBRouter__InsufficientAmountOut(amountOutMin, amountOut);\\n    }\\n\\n    /**\\n     * @notice Unstuck tokens that are sent to this contract by mistake\\n     * @dev Only callable by the factory owner\\n     * @param token The address of the token\\n     * @param to The address of the user to send back the tokens\\n     * @param amount The amount to send\\n     */\\n    function sweep(IERC20 token, address to, uint256 amount) external override onlyFactoryOwner {\\n        if (address(token) == address(0)) {\\n            if (amount == type(uint256).max) amount = address(this).balance;\\n            _safeTransferNATIVE(to, amount);\\n        } else {\\n            if (amount == type(uint256).max) amount = token.balanceOf(address(this));\\n            token.safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Unstuck LBTokens that are sent to this contract by mistake\\n     * @dev Only callable by the factory owner\\n     * @param lbToken The address of the LBToken\\n     * @param to The address of the user to send back the tokens\\n     * @param ids The list of token ids\\n     * @param amounts The list of amounts to send\\n     */\\n    function sweepLBToken(ILBToken lbToken, address to, uint256[] calldata ids, uint256[] calldata amounts)\\n        external\\n        override\\n        onlyFactoryOwner\\n    {\\n        lbToken.batchTransferFrom(address(this), to, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice Helper function to add liquidity\\n     * @param liq The liquidity parameter\\n     * @param pair LBPair where liquidity is deposited\\n     * @return amountXAdded Amount of token X added\\n     * @return amountYAdded Amount of token Y added\\n     * @return amountXLeft Amount of token X left\\n     * @return amountYLeft Amount of token Y left\\n     * @return depositIds The list of deposit ids\\n     * @return liquidityMinted The list of liquidity minted\\n     */\\n    function _addLiquidity(LiquidityParameters calldata liq, ILBPair pair)\\n        private\\n        ensure(liq.deadline)\\n        returns (\\n            uint256 amountXAdded,\\n            uint256 amountYAdded,\\n            uint256 amountXLeft,\\n            uint256 amountYLeft,\\n            uint256[] memory depositIds,\\n            uint256[] memory liquidityMinted\\n        )\\n    {\\n        unchecked {\\n            if (liq.deltaIds.length != liq.distributionX.length || liq.deltaIds.length != liq.distributionY.length) {\\n                revert LBRouter__LengthsMismatch();\\n            }\\n\\n            if (liq.activeIdDesired > type(uint24).max || liq.idSlippage > type(uint24).max) {\\n                revert LBRouter__IdDesiredOverflows(liq.activeIdDesired, liq.idSlippage);\\n            }\\n\\n            bytes32[] memory liquidityConfigs = new bytes32[](liq.deltaIds.length);\\n            depositIds = new uint256[](liq.deltaIds.length);\\n            {\\n                uint256 _activeId = pair.getActiveId();\\n                if (\\n                    liq.activeIdDesired + liq.idSlippage < _activeId || _activeId + liq.idSlippage < liq.activeIdDesired\\n                ) {\\n                    revert LBRouter__IdSlippageCaught(liq.activeIdDesired, liq.idSlippage, _activeId);\\n                }\\n\\n                for (uint256 i; i < liquidityConfigs.length; ++i) {\\n                    int256 _id = int256(_activeId) + liq.deltaIds[i];\\n\\n                    if (_id < 0 || uint256(_id) > type(uint24).max) revert LBRouter__IdOverflows(_id);\\n                    depositIds[i] = uint256(_id);\\n                    liquidityConfigs[i] = LiquidityConfigurations.encodeParams(\\n                        uint64(liq.distributionX[i]), uint64(liq.distributionY[i]), uint24(uint256(_id))\\n                    );\\n                }\\n            }\\n\\n            bytes32 amountsReceived;\\n            bytes32 amountsLeft;\\n            (amountsReceived, amountsLeft, liquidityMinted) = pair.mint(liq.to, liquidityConfigs, liq.refundTo);\\n\\n            amountXAdded = amountsReceived.decodeX();\\n            amountYAdded = amountsReceived.decodeY();\\n\\n            if (amountXAdded < liq.amountXMin || amountYAdded < liq.amountYMin) {\\n                revert LBRouter__AmountSlippageCaught(liq.amountXMin, amountXAdded, liq.amountYMin, amountYAdded);\\n            }\\n\\n            amountXLeft = amountsLeft.decodeX();\\n            amountYLeft = amountsLeft.decodeY();\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to return the amounts in\\n     * @param versions The list of versions (V1, V2 or V2_1)\\n     * @param pairs The list of pairs\\n     * @param tokenPath The swap path\\n     * @param amountOut The amount out\\n     * @return amountsIn The list of amounts in\\n     */\\n    function _getAmountsIn(\\n        Version[] memory versions,\\n        address[] memory pairs,\\n        IERC20[] memory tokenPath,\\n        uint256 amountOut\\n    ) private view returns (uint256[] memory amountsIn) {\\n        amountsIn = new uint256[](tokenPath.length);\\n        // Avoid doing -1, as `pairs.length == pairBinSteps.length-1`\\n        amountsIn[pairs.length] = amountOut;\\n\\n        for (uint256 i = pairs.length; i != 0; i--) {\\n            IERC20 token = tokenPath[i - 1];\\n            Version version = versions[i - 1];\\n            address pair = pairs[i - 1];\\n\\n            if (version == Version.V1) {\\n                (uint256 reserveIn, uint256 reserveOut,) = IJoePair(pair).getReserves();\\n                if (token > tokenPath[i]) {\\n                    (reserveIn, reserveOut) = (reserveOut, reserveIn);\\n                }\\n\\n                uint256 amountOut_ = amountsIn[i];\\n                amountsIn[i - 1] = uint128(amountOut_.getAmountIn(reserveIn, reserveOut));\\n            } else if (version == Version.V2) {\\n                (amountsIn[i - 1],) = _legacyRouter.getSwapIn(\\n                    ILBLegacyPair(pair), uint128(amountsIn[i]), ILBLegacyPair(pair).tokenX() == token\\n                );\\n            } else {\\n                (amountsIn[i - 1],,) =\\n                    getSwapIn(ILBPair(pair), uint128(amountsIn[i]), ILBPair(pair).getTokenX() == token);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to remove liquidity\\n     * @param pair The address of the LBPair\\n     * @param amountXMin The min amount to receive of token X\\n     * @param amountYMin The min amount to receive of token Y\\n     * @param ids The list of ids to burn\\n     * @param amounts The list of amounts to burn of each id in `_ids`\\n     * @param to The address of the recipient\\n     * @return amountX The amount of token X sent by the pair\\n     * @return amountY The amount of token Y sent by the pair\\n     */\\n    function _removeLiquidity(\\n        ILBPair pair,\\n        uint256 amountXMin,\\n        uint256 amountYMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address to\\n    ) private returns (uint256 amountX, uint256 amountY) {\\n        (bytes32[] memory amountsBurned) = pair.burn(msg.sender, to, ids, amounts);\\n\\n        for (uint256 i; i < amountsBurned.length; ++i) {\\n            amountX += amountsBurned[i].decodeX();\\n            amountY += amountsBurned[i].decodeY();\\n        }\\n\\n        if (amountX < amountXMin || amountY < amountYMin) {\\n            revert LBRouter__AmountSlippageCaught(amountXMin, amountX, amountYMin, amountY);\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to swap exact tokens for tokens\\n     * @param amountIn The amount of token sent\\n     * @param pairs The list of pairs\\n     * @param versions The list of versions (V1, V2 or V2_1)\\n     * @param tokenPath The swap path using the binSteps following `pairBinSteps`\\n     * @param to The address of the recipient\\n     * @return amountOut The amount of token sent to `to`\\n     */\\n    function _swapExactTokensForTokens(\\n        uint256 amountIn,\\n        address[] memory pairs,\\n        Version[] memory versions,\\n        IERC20[] memory tokenPath,\\n        address to\\n    ) private returns (uint256 amountOut) {\\n        IERC20 token;\\n        Version version;\\n        address recipient;\\n        address pair;\\n\\n        IERC20 tokenNext = tokenPath[0];\\n        amountOut = amountIn;\\n\\n        unchecked {\\n            for (uint256 i; i < pairs.length; ++i) {\\n                pair = pairs[i];\\n                version = versions[i];\\n\\n                token = tokenNext;\\n                tokenNext = tokenPath[i + 1];\\n\\n                recipient = i + 1 == pairs.length ? to : pairs[i + 1];\\n\\n                if (version == Version.V1) {\\n                    (uint256 reserve0, uint256 reserve1,) = IJoePair(pair).getReserves();\\n\\n                    if (token < tokenNext) {\\n                        amountOut = amountOut.getAmountOut(reserve0, reserve1);\\n                        IJoePair(pair).swap(0, amountOut, recipient, \\\"\\\");\\n                    } else {\\n                        amountOut = amountOut.getAmountOut(reserve1, reserve0);\\n                        IJoePair(pair).swap(amountOut, 0, recipient, \\\"\\\");\\n                    }\\n                } else if (version == Version.V2) {\\n                    bool swapForY = tokenNext == ILBLegacyPair(pair).tokenY();\\n\\n                    (uint256 amountXOut, uint256 amountYOut) = ILBLegacyPair(pair).swap(swapForY, recipient);\\n\\n                    if (swapForY) amountOut = amountYOut;\\n                    else amountOut = amountXOut;\\n                } else {\\n                    bool swapForY = tokenNext == ILBPair(pair).getTokenY();\\n\\n                    (uint256 amountXOut, uint256 amountYOut) = ILBPair(pair).swap(swapForY, recipient).decode();\\n\\n                    if (swapForY) amountOut = amountYOut;\\n                    else amountOut = amountXOut;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to swap tokens for exact tokens\\n     * @param pairs The array of pairs\\n     * @param versions The list of versions (V1, V2 or V2_1)\\n     * @param tokenPath The swap path using the binSteps following `pairBinSteps`\\n     * @param amountsIn The list of amounts in\\n     * @param to The address of the recipient\\n     * @return amountOut The amount of token sent to `to`\\n     */\\n    function _swapTokensForExactTokens(\\n        address[] memory pairs,\\n        Version[] memory versions,\\n        IERC20[] memory tokenPath,\\n        uint256[] memory amountsIn,\\n        address to\\n    ) private returns (uint256 amountOut) {\\n        IERC20 token;\\n        address recipient;\\n        address pair;\\n        Version version;\\n\\n        IERC20 tokenNext = tokenPath[0];\\n\\n        unchecked {\\n            for (uint256 i; i < pairs.length; ++i) {\\n                pair = pairs[i];\\n                version = versions[i];\\n\\n                token = tokenNext;\\n                tokenNext = tokenPath[i + 1];\\n\\n                recipient = i + 1 == pairs.length ? to : pairs[i + 1];\\n\\n                if (version == Version.V1) {\\n                    amountOut = amountsIn[i + 1];\\n                    if (token < tokenNext) {\\n                        IJoePair(pair).swap(0, amountOut, recipient, \\\"\\\");\\n                    } else {\\n                        IJoePair(pair).swap(amountOut, 0, recipient, \\\"\\\");\\n                    }\\n                } else if (version == Version.V2) {\\n                    bool swapForY = tokenNext == ILBLegacyPair(pair).tokenY();\\n\\n                    (uint256 amountXOut, uint256 amountYOut) = ILBLegacyPair(pair).swap(swapForY, recipient);\\n\\n                    if (swapForY) amountOut = amountYOut;\\n                    else amountOut = amountXOut;\\n                } else {\\n                    bool swapForY = tokenNext == ILBPair(pair).getTokenY();\\n\\n                    (uint256 amountXOut, uint256 amountYOut) = ILBPair(pair).swap(swapForY, recipient).decode();\\n\\n                    if (swapForY) amountOut = amountYOut;\\n                    else amountOut = amountXOut;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to swap exact tokens supporting for fee on transfer tokens\\n     * @param pairs The list of pairs\\n     * @param versions The list of versions (V1, V2 or V2_1)\\n     * @param tokenPath The swap path using the binSteps following `pairBinSteps`\\n     * @param to The address of the recipient\\n     */\\n    function _swapSupportingFeeOnTransferTokens(\\n        address[] memory pairs,\\n        Version[] memory versions,\\n        IERC20[] memory tokenPath,\\n        address to\\n    ) private {\\n        IERC20 token;\\n        Version version;\\n        address recipient;\\n        address pair;\\n\\n        IERC20 tokenNext = tokenPath[0];\\n\\n        unchecked {\\n            for (uint256 i; i < pairs.length; ++i) {\\n                pair = pairs[i];\\n                version = versions[i];\\n\\n                token = tokenNext;\\n                tokenNext = tokenPath[i + 1];\\n\\n                recipient = i + 1 == pairs.length ? to : pairs[i + 1];\\n\\n                if (version == Version.V1) {\\n                    (uint256 _reserve0, uint256 _reserve1,) = IJoePair(pair).getReserves();\\n                    if (token < tokenNext) {\\n                        uint256 amountIn = token.balanceOf(pair) - _reserve0;\\n                        uint256 amountOut = amountIn.getAmountOut(_reserve0, _reserve1);\\n\\n                        IJoePair(pair).swap(0, amountOut, recipient, \\\"\\\");\\n                    } else {\\n                        uint256 amountIn = token.balanceOf(pair) - _reserve1;\\n                        uint256 amountOut = amountIn.getAmountOut(_reserve1, _reserve0);\\n\\n                        IJoePair(pair).swap(amountOut, 0, recipient, \\\"\\\");\\n                    }\\n                } else if (version == Version.V2) {\\n                    ILBLegacyPair(pair).swap(tokenNext == ILBLegacyPair(pair).tokenY(), recipient);\\n                } else {\\n                    ILBPair(pair).swap(tokenNext == ILBPair(pair).getTokenY(), recipient);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to return the address of the LBPair\\n     * @dev Revert if the pair is not created yet\\n     * @param tokenX The address of the tokenX\\n     * @param tokenY The address of the tokenY\\n     * @param binStep The bin step of the LBPair\\n     * @param version The version of the LBPair\\n     * @return lbPair The address of the LBPair\\n     */\\n    function _getLBPairInformation(IERC20 tokenX, IERC20 tokenY, uint256 binStep, Version version)\\n        private\\n        view\\n        returns (address lbPair)\\n    {\\n        if (version == Version.V2) {\\n            lbPair = address(_legacyFactory.getLBPairInformation(tokenX, tokenY, binStep).LBPair);\\n        } else {\\n            lbPair = address(_factory.getLBPairInformation(tokenX, tokenY, binStep).LBPair);\\n        }\\n\\n        if (lbPair == address(0)) {\\n            revert LBRouter__PairNotCreated(address(tokenX), address(tokenY), binStep);\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to return the address of the pair (v1 or v2, according to `binStep`)\\n     * @dev Revert if the pair is not created yet\\n     * @param tokenX The address of the tokenX\\n     * @param tokenY The address of the tokenY\\n     * @param binStep The bin step of the LBPair\\n     * @param version The version of the LBPair\\n     * @return pair The address of the pair of binStep `binStep`\\n     */\\n    function _getPair(IERC20 tokenX, IERC20 tokenY, uint256 binStep, Version version)\\n        private\\n        view\\n        returns (address pair)\\n    {\\n        if (version == Version.V1) {\\n            pair = _factoryV1.getPair(address(tokenX), address(tokenY));\\n            if (pair == address(0)) revert LBRouter__PairNotCreated(address(tokenX), address(tokenY), binStep);\\n        } else {\\n            pair = address(_getLBPairInformation(tokenX, tokenY, binStep, version));\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to return a list of pairs\\n     * @param pairBinSteps The list of bin steps\\n     * @param versions The list of versions (V1, V2 or V2_1)\\n     * @param tokenPath The swap path using the binSteps following `pairBinSteps`\\n     * @return pairs The list of pairs\\n     */\\n    function _getPairs(uint256[] memory pairBinSteps, Version[] memory versions, IERC20[] memory tokenPath)\\n        private\\n        view\\n        returns (address[] memory pairs)\\n    {\\n        pairs = new address[](pairBinSteps.length);\\n\\n        IERC20 token;\\n        IERC20 tokenNext = tokenPath[0];\\n        unchecked {\\n            for (uint256 i; i < pairs.length; ++i) {\\n                token = tokenNext;\\n                tokenNext = tokenPath[i + 1];\\n\\n                pairs[i] = _getPair(token, tokenNext, pairBinSteps[i], versions[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to transfer NATIVE\\n     * @param to The address of the recipient\\n     * @param amount The NATIVE amount to send\\n     */\\n    function _safeTransferNATIVE(address to, uint256 amount) private {\\n        (bool success,) = to.call{value: amount}(\\\"\\\");\\n        if (!success) revert LBRouter__FailedToSendNATIVE(to, amount);\\n    }\\n\\n    /**\\n     * @notice Helper function to deposit and transfer _wnative\\n     * @param to The address of the recipient\\n     * @param amount The NATIVE amount to wrap\\n     */\\n    function _wnativeDepositAndTransfer(address to, uint256 amount) private {\\n        _wnative.deposit{value: amount}();\\n        _wnative.safeTransfer(to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IJoeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\n/// @title Joe V1 Factory Interface\\n/// @notice Interface to interact with Joe V1 Factory\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IJoePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\n/// @title Joe V1 Pair Interface\\n/// @notice Interface to interact with Joe V1 Pairs\\ninterface IJoePair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILBFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBPair} from \\\"./ILBPair.sol\\\";\\nimport {IPendingOwnable} from \\\"./IPendingOwnable.sol\\\";\\n\\n/**\\n * @title Liquidity Book Factory Interface\\n * @author Trader Joe\\n * @notice Required interface of LBFactory contract\\n */\\ninterface ILBFactory is IPendingOwnable {\\n    error LBFactory__IdenticalAddresses(IERC20 token);\\n    error LBFactory__QuoteAssetNotWhitelisted(IERC20 quoteAsset);\\n    error LBFactory__QuoteAssetAlreadyWhitelisted(IERC20 quoteAsset);\\n    error LBFactory__AddressZero();\\n    error LBFactory__LBPairAlreadyExists(IERC20 tokenX, IERC20 tokenY, uint256 _binStep);\\n    error LBFactory__LBPairDoesNotExist(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\n    error LBFactory__LBPairNotCreated(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\n    error LBFactory__FlashLoanFeeAboveMax(uint256 fees, uint256 maxFees);\\n    error LBFactory__BinStepTooLow(uint256 binStep);\\n    error LBFactory__PresetIsLockedForUsers(address user, uint256 binStep);\\n    error LBFactory__LBPairIgnoredIsAlreadyInTheSameState();\\n    error LBFactory__BinStepHasNoPreset(uint256 binStep);\\n    error LBFactory__PresetOpenStateIsAlreadyInTheSameState();\\n    error LBFactory__SameFeeRecipient(address feeRecipient);\\n    error LBFactory__SameFlashLoanFee(uint256 flashLoanFee);\\n    error LBFactory__LBPairSafetyCheckFailed(address LBPairImplementation);\\n    error LBFactory__SameImplementation(address LBPairImplementation);\\n    error LBFactory__ImplementationNotSet();\\n\\n    /**\\n     * @dev Structure to store the LBPair information, such as:\\n     * binStep: The bin step of the LBPair\\n     * LBPair: The address of the LBPair\\n     * createdByOwner: Whether the pair was created by the owner of the factory\\n     * ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\\n     */\\n    struct LBPairInformation {\\n        uint16 binStep;\\n        ILBPair LBPair;\\n        bool createdByOwner;\\n        bool ignoredForRouting;\\n    }\\n\\n    event LBPairCreated(\\n        IERC20 indexed tokenX, IERC20 indexed tokenY, uint256 indexed binStep, ILBPair LBPair, uint256 pid\\n    );\\n\\n    event FeeRecipientSet(address oldRecipient, address newRecipient);\\n\\n    event FlashLoanFeeSet(uint256 oldFlashLoanFee, uint256 newFlashLoanFee);\\n\\n    event LBPairImplementationSet(address oldLBPairImplementation, address LBPairImplementation);\\n\\n    event LBPairIgnoredStateChanged(ILBPair indexed LBPair, bool ignored);\\n\\n    event PresetSet(\\n        uint256 indexed binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator\\n    );\\n\\n    event PresetOpenStateChanged(uint256 indexed binStep, bool indexed isOpen);\\n\\n    event PresetRemoved(uint256 indexed binStep);\\n\\n    event QuoteAssetAdded(IERC20 indexed quoteAsset);\\n\\n    event QuoteAssetRemoved(IERC20 indexed quoteAsset);\\n\\n    function getMinBinStep() external pure returns (uint256);\\n\\n    function getFeeRecipient() external view returns (address);\\n\\n    function getMaxFlashLoanFee() external pure returns (uint256);\\n\\n    function getFlashLoanFee() external view returns (uint256);\\n\\n    function getLBPairImplementation() external view returns (address);\\n\\n    function getNumberOfLBPairs() external view returns (uint256);\\n\\n    function getLBPairAtIndex(uint256 id) external returns (ILBPair);\\n\\n    function getNumberOfQuoteAssets() external view returns (uint256);\\n\\n    function getQuoteAssetAtIndex(uint256 index) external view returns (IERC20);\\n\\n    function isQuoteAsset(IERC20 token) external view returns (bool);\\n\\n    function getLBPairInformation(IERC20 tokenX, IERC20 tokenY, uint256 binStep)\\n        external\\n        view\\n        returns (LBPairInformation memory);\\n\\n    function getPreset(uint256 binStep)\\n        external\\n        view\\n        returns (\\n            uint256 baseFactor,\\n            uint256 filterPeriod,\\n            uint256 decayPeriod,\\n            uint256 reductionFactor,\\n            uint256 variableFeeControl,\\n            uint256 protocolShare,\\n            uint256 maxAccumulator,\\n            bool isOpen\\n        );\\n\\n    function getAllBinSteps() external view returns (uint256[] memory presetsBinStep);\\n\\n    function getOpenBinSteps() external view returns (uint256[] memory openBinStep);\\n\\n    function getAllLBPairs(IERC20 tokenX, IERC20 tokenY)\\n        external\\n        view\\n        returns (LBPairInformation[] memory LBPairsBinStep);\\n\\n    function setLBPairImplementation(address lbPairImplementation) external;\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBPair pair);\\n\\n    function setLBPairIgnored(IERC20 tokenX, IERC20 tokenY, uint16 binStep, bool ignored) external;\\n\\n    function setPreset(\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        bool isOpen\\n    ) external;\\n\\n    function setPresetOpenState(uint16 binStep, bool isOpen) external;\\n\\n    function removePreset(uint16 binStep) external;\\n\\n    function setFeesParametersOnPair(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function setFeeRecipient(address feeRecipient) external;\\n\\n    function setFlashLoanFee(uint256 flashLoanFee) external;\\n\\n    function addQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function removeQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function forceDecay(ILBPair lbPair) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILBFlashLoanCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Liquidity Book Flashloan Callback Interface\\n/// @author Trader Joe\\n/// @notice Required interface to interact with LB flash loans\\ninterface ILBFlashLoanCallback {\\n    function LBFlashLoanCallback(\\n        address sender,\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        bytes32 amounts,\\n        bytes32 totalFees,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILBLegacyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBLegacyPair} from \\\"./ILBLegacyPair.sol\\\";\\nimport {IPendingOwnable} from \\\"./IPendingOwnable.sol\\\";\\n\\n/// @title Liquidity Book Factory Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBFactory contract\\ninterface ILBLegacyFactory is IPendingOwnable {\\n    /// @dev Structure to store the LBPair information, such as:\\n    /// - binStep: The bin step of the LBPair\\n    /// - LBPair: The address of the LBPair\\n    /// - createdByOwner: Whether the pair was created by the owner of the factory\\n    /// - ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\\n    struct LBPairInformation {\\n        uint16 binStep;\\n        ILBLegacyPair LBPair;\\n        bool createdByOwner;\\n        bool ignoredForRouting;\\n    }\\n\\n    event LBPairCreated(\\n        IERC20 indexed tokenX, IERC20 indexed tokenY, uint256 indexed binStep, ILBLegacyPair LBPair, uint256 pid\\n    );\\n\\n    event FeeRecipientSet(address oldRecipient, address newRecipient);\\n\\n    event FlashLoanFeeSet(uint256 oldFlashLoanFee, uint256 newFlashLoanFee);\\n\\n    event FeeParametersSet(\\n        address indexed sender,\\n        ILBLegacyPair indexed LBPair,\\n        uint256 binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator\\n    );\\n\\n    event FactoryLockedStatusUpdated(bool unlocked);\\n\\n    event LBPairImplementationSet(address oldLBPairImplementation, address LBPairImplementation);\\n\\n    event LBPairIgnoredStateChanged(ILBLegacyPair indexed LBPair, bool ignored);\\n\\n    event PresetSet(\\n        uint256 indexed binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator,\\n        uint256 sampleLifetime\\n    );\\n\\n    event PresetRemoved(uint256 indexed binStep);\\n\\n    event QuoteAssetAdded(IERC20 indexed quoteAsset);\\n\\n    event QuoteAssetRemoved(IERC20 indexed quoteAsset);\\n\\n    function MAX_FEE() external pure returns (uint256);\\n\\n    function MIN_BIN_STEP() external pure returns (uint256);\\n\\n    function MAX_BIN_STEP() external pure returns (uint256);\\n\\n    function MAX_PROTOCOL_SHARE() external pure returns (uint256);\\n\\n    function LBPairImplementation() external view returns (address);\\n\\n    function getNumberOfQuoteAssets() external view returns (uint256);\\n\\n    function getQuoteAsset(uint256 index) external view returns (IERC20);\\n\\n    function isQuoteAsset(IERC20 token) external view returns (bool);\\n\\n    function feeRecipient() external view returns (address);\\n\\n    function flashLoanFee() external view returns (uint256);\\n\\n    function creationUnlocked() external view returns (bool);\\n\\n    function allLBPairs(uint256 id) external returns (ILBLegacyPair);\\n\\n    function getNumberOfLBPairs() external view returns (uint256);\\n\\n    function getLBPairInformation(IERC20 tokenX, IERC20 tokenY, uint256 binStep)\\n        external\\n        view\\n        returns (LBPairInformation memory);\\n\\n    function getPreset(uint16 binStep)\\n        external\\n        view\\n        returns (\\n            uint256 baseFactor,\\n            uint256 filterPeriod,\\n            uint256 decayPeriod,\\n            uint256 reductionFactor,\\n            uint256 variableFeeControl,\\n            uint256 protocolShare,\\n            uint256 maxAccumulator,\\n            uint256 sampleLifetime\\n        );\\n\\n    function getAllBinSteps() external view returns (uint256[] memory presetsBinStep);\\n\\n    function getAllLBPairs(IERC20 tokenX, IERC20 tokenY)\\n        external\\n        view\\n        returns (LBPairInformation[] memory LBPairsBinStep);\\n\\n    function setLBPairImplementation(address LBPairImplementation) external;\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBLegacyPair pair);\\n\\n    function setLBPairIgnored(IERC20 tokenX, IERC20 tokenY, uint256 binStep, bool ignored) external;\\n\\n    function setPreset(\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        uint16 sampleLifetime\\n    ) external;\\n\\n    function removePreset(uint16 binStep) external;\\n\\n    function setFeesParametersOnPair(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function setFeeRecipient(address feeRecipient) external;\\n\\n    function setFlashLoanFee(uint256 flashLoanFee) external;\\n\\n    function setFactoryLockedState(bool locked) external;\\n\\n    function addQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function removeQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function forceDecay(ILBLegacyPair LBPair) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILBLegacyPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBLegacyToken} from \\\"./ILBLegacyToken.sol\\\";\\n\\n/// @title Liquidity Book Pair V2 Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBPair contract\\ninterface ILBLegacyPair is ILBLegacyToken {\\n    /// @dev Structure to store the protocol fees:\\n    /// - binStep: The bin step\\n    /// - baseFactor: The base factor\\n    /// - filterPeriod: The filter period, where the fees stays constant\\n    /// - decayPeriod: The decay period, where the fees are halved\\n    /// - reductionFactor: The reduction factor, used to calculate the reduction of the accumulator\\n    /// - variableFeeControl: The variable fee control, used to control the variable fee, can be 0 to disable them\\n    /// - protocolShare: The share of fees sent to protocol\\n    /// - maxVolatilityAccumulated: The max value of volatility accumulated\\n    /// - volatilityAccumulated: The value of volatility accumulated\\n    /// - volatilityReference: The value of volatility reference\\n    /// - indexRef: The index reference\\n    /// - time: The last time the accumulator was called\\n    struct FeeParameters {\\n        // 144 lowest bits in slot\\n        uint16 binStep;\\n        uint16 baseFactor;\\n        uint16 filterPeriod;\\n        uint16 decayPeriod;\\n        uint16 reductionFactor;\\n        uint24 variableFeeControl;\\n        uint16 protocolShare;\\n        uint24 maxVolatilityAccumulated;\\n        // 112 highest bits in slot\\n        uint24 volatilityAccumulated;\\n        uint24 volatilityReference;\\n        uint24 indexRef;\\n        uint40 time;\\n    }\\n\\n    /// @dev Structure used during swaps to distributes the fees:\\n    /// - total: The total amount of fees\\n    /// - protocol: The amount of fees reserved for protocol\\n    struct FeesDistribution {\\n        uint128 total;\\n        uint128 protocol;\\n    }\\n\\n    /// @dev Structure to store the reserves of bins:\\n    /// - reserveX: The current reserve of tokenX of the bin\\n    /// - reserveY: The current reserve of tokenY of the bin\\n    struct Bin {\\n        uint112 reserveX;\\n        uint112 reserveY;\\n        uint256 accTokenXPerShare;\\n        uint256 accTokenYPerShare;\\n    }\\n\\n    /// @dev Structure to store the information of the pair such as:\\n    /// slot0:\\n    /// - activeId: The current id used for swaps, this is also linked with the price\\n    /// - reserveX: The sum of amounts of tokenX across all bins\\n    /// slot1:\\n    /// - reserveY: The sum of amounts of tokenY across all bins\\n    /// - oracleSampleLifetime: The lifetime of an oracle sample\\n    /// - oracleSize: The current size of the oracle, can be increase by users\\n    /// - oracleActiveSize: The current active size of the oracle, composed only from non empty data sample\\n    /// - oracleLastTimestamp: The current last timestamp at which a sample was added to the circular buffer\\n    /// - oracleId: The current id of the oracle\\n    /// slot2:\\n    /// - feesX: The current amount of fees to distribute in tokenX (total, protocol)\\n    /// slot3:\\n    /// - feesY: The current amount of fees to distribute in tokenY (total, protocol)\\n    struct PairInformation {\\n        uint24 activeId;\\n        uint136 reserveX;\\n        uint136 reserveY;\\n        uint16 oracleSampleLifetime;\\n        uint16 oracleSize;\\n        uint16 oracleActiveSize;\\n        uint40 oracleLastTimestamp;\\n        uint16 oracleId;\\n        FeesDistribution feesX;\\n        FeesDistribution feesY;\\n    }\\n\\n    /// @dev Structure to store the debts of users\\n    /// - debtX: The tokenX's debt\\n    /// - debtY: The tokenY's debt\\n    struct Debts {\\n        uint256 debtX;\\n        uint256 debtY;\\n    }\\n\\n    /// @dev Structure to store fees:\\n    /// - tokenX: The amount of fees of token X\\n    /// - tokenY: The amount of fees of token Y\\n    struct Fees {\\n        uint128 tokenX;\\n        uint128 tokenY;\\n    }\\n\\n    /// @dev Structure to minting informations:\\n    /// - amountXIn: The amount of token X sent\\n    /// - amountYIn: The amount of token Y sent\\n    /// - amountXAddedToPair: The amount of token X that have been actually added to the pair\\n    /// - amountYAddedToPair: The amount of token Y that have been actually added to the pair\\n    /// - activeFeeX: Fees X currently generated\\n    /// - activeFeeY: Fees Y currently generated\\n    /// - totalDistributionX: Total distribution of token X. Should be 1e18 (100%) or 0 (0%)\\n    /// - totalDistributionY: Total distribution of token Y. Should be 1e18 (100%) or 0 (0%)\\n    /// - id: Id of the current working bin when looping on the distribution array\\n    /// - amountX: The amount of token X deposited in the current bin\\n    /// - amountY: The amount of token Y deposited in the current bin\\n    /// - distributionX: Distribution of token X for the current working bin\\n    /// - distributionY: Distribution of token Y for the current working bin\\n    struct MintInfo {\\n        uint256 amountXIn;\\n        uint256 amountYIn;\\n        uint256 amountXAddedToPair;\\n        uint256 amountYAddedToPair;\\n        uint256 activeFeeX;\\n        uint256 activeFeeY;\\n        uint256 totalDistributionX;\\n        uint256 totalDistributionY;\\n        uint256 id;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 distributionX;\\n        uint256 distributionY;\\n    }\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed id,\\n        bool swapForY,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 volatilityAccumulated,\\n        uint256 fees\\n    );\\n\\n    event FlashLoan(address indexed sender, address indexed receiver, IERC20 token, uint256 amount, uint256 fee);\\n\\n    event CompositionFee(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 feesX, uint256 feesY\\n    );\\n\\n    event DepositedToBin(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 amountX, uint256 amountY\\n    );\\n\\n    event WithdrawnFromBin(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 amountX, uint256 amountY\\n    );\\n\\n    event FeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\\n\\n    event ProtocolFeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\\n\\n    event OracleSizeIncreased(uint256 previousSize, uint256 newSize);\\n\\n    function tokenX() external view returns (IERC20);\\n\\n    function tokenY() external view returns (IERC20);\\n\\n    function factory() external view returns (address);\\n\\n    function getReservesAndId() external view returns (uint256 reserveX, uint256 reserveY, uint256 activeId);\\n\\n    function getGlobalFees()\\n        external\\n        view\\n        returns (uint128 feesXTotal, uint128 feesYTotal, uint128 feesXProtocol, uint128 feesYProtocol);\\n\\n    function getOracleParameters()\\n        external\\n        view\\n        returns (\\n            uint256 oracleSampleLifetime,\\n            uint256 oracleSize,\\n            uint256 oracleActiveSize,\\n            uint256 oracleLastTimestamp,\\n            uint256 oracleId,\\n            uint256 min,\\n            uint256 max\\n        );\\n\\n    function getOracleSampleFrom(uint256 timeDelta)\\n        external\\n        view\\n        returns (uint256 cumulativeId, uint256 cumulativeAccumulator, uint256 cumulativeBinCrossed);\\n\\n    function feeParameters() external view returns (FeeParameters memory);\\n\\n    function findFirstNonEmptyBinId(uint24 id_, bool sentTokenY) external view returns (uint24 id);\\n\\n    function getBin(uint24 id) external view returns (uint256 reserveX, uint256 reserveY);\\n\\n    function pendingFees(address account, uint256[] memory ids)\\n        external\\n        view\\n        returns (uint256 amountX, uint256 amountY);\\n\\n    function swap(bool sentTokenY, address to) external returns (uint256 amountXOut, uint256 amountYOut);\\n\\n    function flashLoan(address receiver, IERC20 token, uint256 amount, bytes calldata data) external;\\n\\n    function mint(\\n        uint256[] calldata ids,\\n        uint256[] calldata distributionX,\\n        uint256[] calldata distributionY,\\n        address to\\n    ) external returns (uint256 amountXAddedToPair, uint256 amountYAddedToPair, uint256[] memory liquidityMinted);\\n\\n    function burn(uint256[] calldata ids, uint256[] calldata amounts, address to)\\n        external\\n        returns (uint256 amountX, uint256 amountY);\\n\\n    function increaseOracleLength(uint16 newSize) external;\\n\\n    function collectFees(address account, uint256[] calldata ids) external returns (uint256 amountX, uint256 amountY);\\n\\n    function collectProtocolFees() external returns (uint128 amountX, uint128 amountY);\\n\\n    function setFeesParameters(bytes32 packedFeeParameters) external;\\n\\n    function forceDecay() external;\\n\\n    function initialize(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint24 activeId,\\n        uint16 sampleLifetime,\\n        bytes32 packedFeeParameters\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILBLegacyRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {IJoeFactory} from \\\"./IJoeFactory.sol\\\";\\nimport {ILBLegacyPair} from \\\"./ILBLegacyPair.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\nimport {IWNATIVE} from \\\"./IWNATIVE.sol\\\";\\n\\n/// @title Liquidity Book Router Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBRouter contract\\ninterface ILBLegacyRouter {\\n    struct LiquidityParameters {\\n        IERC20 tokenX;\\n        IERC20 tokenY;\\n        uint256 binStep;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 amountXMin;\\n        uint256 amountYMin;\\n        uint256 activeIdDesired;\\n        uint256 idSlippage;\\n        int256[] deltaIds;\\n        uint256[] distributionX;\\n        uint256[] distributionY;\\n        address to;\\n        uint256 deadline;\\n    }\\n\\n    function factory() external view returns (address);\\n\\n    function wavax() external view returns (address);\\n\\n    function oldFactory() external view returns (address);\\n\\n    function getIdFromPrice(ILBLegacyPair LBPair, uint256 price) external view returns (uint24);\\n\\n    function getPriceFromId(ILBLegacyPair LBPair, uint24 id) external view returns (uint256);\\n\\n    function getSwapIn(ILBLegacyPair lbPair, uint256 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint256 amountIn, uint256 feesIn);\\n\\n    function getSwapOut(ILBLegacyPair lbPair, uint256 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint256 amountOut, uint256 feesIn);\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBLegacyPair pair);\\n\\n    function addLiquidity(LiquidityParameters calldata liquidityParameters)\\n        external\\n        returns (uint256[] memory depositIds, uint256[] memory liquidityMinted);\\n\\n    function addLiquidityAVAX(LiquidityParameters calldata liquidityParameters)\\n        external\\n        payable\\n        returns (uint256[] memory depositIds, uint256[] memory liquidityMinted);\\n\\n    function removeLiquidity(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint256 amountXMin,\\n        uint256 amountYMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    function removeLiquidityAVAX(\\n        IERC20 token,\\n        uint16 binStep,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMinAVAX,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amountsIn);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMinAVAX,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function sweep(IERC20 token, address to, uint256 amount) external;\\n\\n    function sweepLBToken(ILBToken _lbToken, address _to, uint256[] calldata _ids, uint256[] calldata _amounts)\\n        external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILBLegacyToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin/utils/introspection/IERC165.sol\\\";\\n\\n/// @title Liquidity Book V2 Token Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBToken contract\\ninterface ILBLegacyToken is IERC165 {\\n    event TransferSingle(address indexed sender, address indexed from, address indexed to, uint256 id, uint256 amount);\\n\\n    event TransferBatch(\\n        address indexed sender, address indexed from, address indexed to, uint256[] ids, uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed sender, bool approved);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory batchBalances);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function isApprovedForAll(address owner, address spender) external view returns (bool);\\n\\n    function setApprovalForAll(address sender, bool approved) external;\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount) external;\\n\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata id, uint256[] calldata amount)\\n        external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILBPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {ILBFlashLoanCallback} from \\\"./ILBFlashLoanCallback.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\n\\ninterface ILBPair is ILBToken {\\n    error LBPair__ZeroBorrowAmount();\\n    error LBPair__AddressZero();\\n    error LBPair__AlreadyInitialized();\\n    error LBPair__EmptyMarketConfigs();\\n    error LBPair__FlashLoanCallbackFailed();\\n    error LBPair__FlashLoanInsufficientAmount();\\n    error LBPair__InsufficientAmountIn();\\n    error LBPair__InsufficientAmountOut();\\n    error LBPair__InvalidInput();\\n    error LBPair__InvalidStaticFeeParameters();\\n    error LBPair__OnlyFactory();\\n    error LBPair__OnlyProtocolFeeRecipient();\\n    error LBPair__OutOfLiquidity();\\n    error LBPair__TokenNotSupported();\\n    error LBPair__ZeroAmount(uint24 id);\\n    error LBPair__ZeroAmountsOut(uint24 id);\\n    error LBPair__ZeroShares(uint24 id);\\n    error LBPair__MaxTotalFeeExceeded();\\n\\n    struct MintArrays {\\n        uint256[] ids;\\n        bytes32[] amounts;\\n        uint256[] liquidityMinted;\\n    }\\n\\n    event DepositedToBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\\n\\n    event WithdrawnFromBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\\n\\n    event CompositionFees(address indexed sender, uint24 id, bytes32 totalFees, bytes32 protocolFees);\\n\\n    event CollectedProtocolFees(address indexed feeRecipient, bytes32 protocolFees);\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed to,\\n        uint24 id,\\n        bytes32 amountsIn,\\n        bytes32 amountsOut,\\n        uint24 volatilityAccumulator,\\n        bytes32 totalFees,\\n        bytes32 protocolFees\\n    );\\n\\n    event StaticFeeParametersSet(\\n        address indexed sender,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    );\\n\\n    event FlashLoan(\\n        address indexed sender,\\n        ILBFlashLoanCallback indexed receiver,\\n        uint24 activeId,\\n        bytes32 amounts,\\n        bytes32 totalFees,\\n        bytes32 protocolFees\\n    );\\n\\n    event OracleLengthIncreased(address indexed sender, uint16 oracleLength);\\n\\n    event ForcedDecay(address indexed sender, uint24 idReference, uint24 volatilityReference);\\n\\n    function initialize(\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        uint24 activeId\\n    ) external;\\n\\n    function getFactory() external view returns (ILBFactory factory);\\n\\n    function getTokenX() external view returns (IERC20 tokenX);\\n\\n    function getTokenY() external view returns (IERC20 tokenY);\\n\\n    function getBinStep() external view returns (uint16 binStep);\\n\\n    function getReserves() external view returns (uint128 reserveX, uint128 reserveY);\\n\\n    function getActiveId() external view returns (uint24 activeId);\\n\\n    function getBin(uint24 id) external view returns (uint128 binReserveX, uint128 binReserveY);\\n\\n    function getNextNonEmptyBin(bool swapForY, uint24 id) external view returns (uint24 nextId);\\n\\n    function getProtocolFees() external view returns (uint128 protocolFeeX, uint128 protocolFeeY);\\n\\n    function getStaticFeeParameters()\\n        external\\n        view\\n        returns (\\n            uint16 baseFactor,\\n            uint16 filterPeriod,\\n            uint16 decayPeriod,\\n            uint16 reductionFactor,\\n            uint24 variableFeeControl,\\n            uint16 protocolShare,\\n            uint24 maxVolatilityAccumulator\\n        );\\n\\n    function getVariableFeeParameters()\\n        external\\n        view\\n        returns (uint24 volatilityAccumulator, uint24 volatilityReference, uint24 idReference, uint40 timeOfLastUpdate);\\n\\n    function getOracleParameters()\\n        external\\n        view\\n        returns (uint8 sampleLifetime, uint16 size, uint16 activeSize, uint40 lastUpdated, uint40 firstTimestamp);\\n\\n    function getOracleSampleAt(uint40 lookupTimestamp)\\n        external\\n        view\\n        returns (uint64 cumulativeId, uint64 cumulativeVolatility, uint64 cumulativeBinCrossed);\\n\\n    function getPriceFromId(uint24 id) external view returns (uint256 price);\\n\\n    function getIdFromPrice(uint256 price) external view returns (uint24 id);\\n\\n    function getSwapIn(uint128 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);\\n\\n    function getSwapOut(uint128 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\\n\\n    function swap(bool swapForY, address to) external returns (bytes32 amountsOut);\\n\\n    function flashLoan(ILBFlashLoanCallback receiver, bytes32 amounts, bytes calldata data) external;\\n\\n    function mint(address to, bytes32[] calldata liquidityConfigs, address refundTo)\\n        external\\n        returns (bytes32 amountsReceived, bytes32 amountsLeft, uint256[] memory liquidityMinted);\\n\\n    function burn(address from, address to, uint256[] calldata ids, uint256[] calldata amountsToBurn)\\n        external\\n        returns (bytes32[] memory amounts);\\n\\n    function collectProtocolFees() external returns (bytes32 collectedProtocolFees);\\n\\n    function increaseOracleLength(uint16 newLength) external;\\n\\n    function setStaticFeeParameters(\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function forceDecay() external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILBRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\nimport {IJoeFactory} from \\\"./IJoeFactory.sol\\\";\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {ILBLegacyFactory} from \\\"./ILBLegacyFactory.sol\\\";\\nimport {ILBLegacyRouter} from \\\"./ILBLegacyRouter.sol\\\";\\nimport {ILBPair} from \\\"./ILBPair.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\nimport {IWNATIVE} from \\\"./IWNATIVE.sol\\\";\\n\\n/**\\n * @title Liquidity Book Router Interface\\n * @author Trader Joe\\n * @notice Required interface of LBRouter contract\\n */\\ninterface ILBRouter {\\n    error LBRouter__SenderIsNotWNATIVE();\\n    error LBRouter__PairNotCreated(address tokenX, address tokenY, uint256 binStep);\\n    error LBRouter__WrongAmounts(uint256 amount, uint256 reserve);\\n    error LBRouter__SwapOverflows(uint256 id);\\n    error LBRouter__BrokenSwapSafetyCheck();\\n    error LBRouter__NotFactoryOwner();\\n    error LBRouter__TooMuchTokensIn(uint256 excess);\\n    error LBRouter__BinReserveOverflows(uint256 id);\\n    error LBRouter__IdOverflows(int256 id);\\n    error LBRouter__LengthsMismatch();\\n    error LBRouter__WrongTokenOrder();\\n    error LBRouter__IdSlippageCaught(uint256 activeIdDesired, uint256 idSlippage, uint256 activeId);\\n    error LBRouter__AmountSlippageCaught(uint256 amountXMin, uint256 amountX, uint256 amountYMin, uint256 amountY);\\n    error LBRouter__IdDesiredOverflows(uint256 idDesired, uint256 idSlippage);\\n    error LBRouter__FailedToSendNATIVE(address recipient, uint256 amount);\\n    error LBRouter__DeadlineExceeded(uint256 deadline, uint256 currentTimestamp);\\n    error LBRouter__AmountSlippageBPTooBig(uint256 amountSlippage);\\n    error LBRouter__InsufficientAmountOut(uint256 amountOutMin, uint256 amountOut);\\n    error LBRouter__MaxAmountInExceeded(uint256 amountInMax, uint256 amountIn);\\n    error LBRouter__InvalidTokenPath(address wrongToken);\\n    error LBRouter__InvalidVersion(uint256 version);\\n    error LBRouter__WrongNativeLiquidityParameters(\\n        address tokenX, address tokenY, uint256 amountX, uint256 amountY, uint256 msgValue\\n    );\\n\\n    /**\\n     * @dev This enum represents the version of the pair requested\\n     * - V1: Joe V1 pair\\n     * - V2: LB pair V2. Also called legacyPair\\n     * - V2_1: LB pair V2.1 (current version)\\n     */\\n    enum Version {\\n        V1,\\n        V2,\\n        V2_1\\n    }\\n\\n    /**\\n     * @dev The liquidity parameters, such as:\\n     * - tokenX: The address of token X\\n     * - tokenY: The address of token Y\\n     * - binStep: The bin step of the pair\\n     * - amountX: The amount to send of token X\\n     * - amountY: The amount to send of token Y\\n     * - amountXMin: The min amount of token X added to liquidity\\n     * - amountYMin: The min amount of token Y added to liquidity\\n     * - activeIdDesired: The active id that user wants to add liquidity from\\n     * - idSlippage: The number of id that are allowed to slip\\n     * - deltaIds: The list of delta ids to add liquidity (`deltaId = activeId - desiredId`)\\n     * - distributionX: The distribution of tokenX with sum(distributionX) = 100e18 (100%) or 0 (0%)\\n     * - distributionY: The distribution of tokenY with sum(distributionY) = 100e18 (100%) or 0 (0%)\\n     * - to: The address of the recipient\\n     * - refundTo: The address of the recipient of the refunded tokens if too much tokens are sent\\n     * - deadline: The deadline of the transaction\\n     */\\n    struct LiquidityParameters {\\n        IERC20 tokenX;\\n        IERC20 tokenY;\\n        uint256 binStep;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 amountXMin;\\n        uint256 amountYMin;\\n        uint256 activeIdDesired;\\n        uint256 idSlippage;\\n        int256[] deltaIds;\\n        uint256[] distributionX;\\n        uint256[] distributionY;\\n        address to;\\n        address refundTo;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @dev The path parameters, such as:\\n     * - pairBinSteps: The list of bin steps of the pairs to go through\\n     * - versions: The list of versions of the pairs to go through\\n     * - tokenPath: The list of tokens in the path to go through\\n     */\\n    struct Path {\\n        uint256[] pairBinSteps;\\n        Version[] versions;\\n        IERC20[] tokenPath;\\n    }\\n\\n    function getFactory() external view returns (ILBFactory);\\n\\n    function getLegacyFactory() external view returns (ILBLegacyFactory);\\n\\n    function getV1Factory() external view returns (IJoeFactory);\\n\\n    function getLegacyRouter() external view returns (ILBLegacyRouter);\\n\\n    function getWNATIVE() external view returns (IWNATIVE);\\n\\n    function getIdFromPrice(ILBPair LBPair, uint256 price) external view returns (uint24);\\n\\n    function getPriceFromId(ILBPair LBPair, uint24 id) external view returns (uint256);\\n\\n    function getSwapIn(ILBPair LBPair, uint128 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);\\n\\n    function getSwapOut(ILBPair LBPair, uint128 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBPair pair);\\n\\n    function addLiquidity(LiquidityParameters calldata liquidityParameters)\\n        external\\n        returns (\\n            uint256 amountXAdded,\\n            uint256 amountYAdded,\\n            uint256 amountXLeft,\\n            uint256 amountYLeft,\\n            uint256[] memory depositIds,\\n            uint256[] memory liquidityMinted\\n        );\\n\\n    function addLiquidityNATIVE(LiquidityParameters calldata liquidityParameters)\\n        external\\n        payable\\n        returns (\\n            uint256 amountXAdded,\\n            uint256 amountYAdded,\\n            uint256 amountXLeft,\\n            uint256 amountYLeft,\\n            uint256[] memory depositIds,\\n            uint256[] memory liquidityMinted\\n        );\\n\\n    function removeLiquidity(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint256 amountXMin,\\n        uint256 amountYMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    function removeLiquidityNATIVE(\\n        IERC20 token,\\n        uint16 binStep,\\n        uint256 amountTokenMin,\\n        uint256 amountNATIVEMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountNATIVE);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForNATIVE(\\n        uint256 amountIn,\\n        uint256 amountOutMinNATIVE,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNATIVEForTokens(uint256 amountOutMin, Path memory path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapTokensForExactNATIVE(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapNATIVEForExactTokens(uint256 amountOut, Path memory path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amountsIn);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForNATIVESupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMinNATIVE,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNATIVEForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function sweep(IERC20 token, address to, uint256 amount) external;\\n\\n    function sweepLBToken(ILBToken _lbToken, address _to, uint256[] calldata _ids, uint256[] calldata _amounts)\\n        external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILBToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Token Interface\\n * @author Trader Joe\\n * @notice Interface to interact with the LBToken.\\n */\\ninterface ILBToken {\\n    error LBToken__AddressThisOrZero();\\n    error LBToken__InvalidLength();\\n    error LBToken__SelfApproval(address owner);\\n    error LBToken__SpenderNotApproved(address from, address spender);\\n    error LBToken__TransferExceedsBalance(address from, uint256 id, uint256 amount);\\n    error LBToken__BurnExceedsBalance(address from, uint256 id, uint256 amount);\\n\\n    event TransferBatch(\\n        address indexed sender, address indexed from, address indexed to, uint256[] ids, uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed sender, bool approved);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isApprovedForAll(address owner, address spender) external view returns (bool);\\n\\n    function approveForAll(address spender, bool approved) external;\\n\\n    function batchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IPendingOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Pending Ownable Interface\\n * @author Trader Joe\\n * @notice Required interface of Pending Ownable contract used for LBFactory\\n */\\ninterface IPendingOwnable {\\n    error PendingOwnable__AddressZero();\\n    error PendingOwnable__NoPendingOwner();\\n    error PendingOwnable__NotOwner();\\n    error PendingOwnable__NotPendingOwner();\\n    error PendingOwnable__PendingOwnerAlreadySet();\\n\\n    event PendingOwnerSet(address indexed pendingOwner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function setPendingOwner(address pendingOwner) external;\\n\\n    function revokePendingOwner() external;\\n\\n    function becomeOwner() external;\\n\\n    function renounceOwnership() external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWNATIVE.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title WNATIVE Interface\\n * @notice Required interface of Wrapped NATIVE contract\\n */\\ninterface IWNATIVE is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"src/libraries/AddressHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Address Helper Library\\n * @author Trader Joe\\n * @notice This library contains functions to check if an address is a contract and\\n * catch low level calls errors\\n */\\nlibrary AddressHelper {\\n    error AddressHelper__NonContract();\\n    error AddressHelper__CallFailed();\\n\\n    /**\\n     * @notice Private view function to perform a low level call on `target`\\n     * @dev Revert if the call doesn't succeed\\n     * @param target The address of the account\\n     * @param data The data to execute on `target`\\n     * @return returnData The data returned by the call\\n     */\\n    function callAndCatch(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returnData) = target.call(data);\\n\\n        if (success) {\\n            if (returnData.length == 0 && !isContract(target)) revert AddressHelper__NonContract();\\n        } else {\\n            if (returnData.length == 0) {\\n                revert AddressHelper__CallFailed();\\n            } else {\\n                // Look for revert reason and bubble it up if present\\n                assembly {\\n                    revert(add(32, returnData), mload(returnData))\\n                }\\n            }\\n        }\\n\\n        return returnData;\\n    }\\n\\n    /**\\n     * @notice Private view function to return if an address is a contract\\n     * @dev It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * @param account The address of the account\\n     * @return Whether the account is a contract (true) or not (false)\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        return account.code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/BinHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\nimport {PackedUint128Math} from \\\"./math/PackedUint128Math.sol\\\";\\nimport {Uint256x256Math} from \\\"./math/Uint256x256Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {Constants} from \\\"./Constants.sol\\\";\\nimport {PairParameterHelper} from \\\"./PairParameterHelper.sol\\\";\\nimport {FeeHelper} from \\\"./FeeHelper.sol\\\";\\nimport {PriceHelper} from \\\"./PriceHelper.sol\\\";\\nimport {TokenHelper} from \\\"./TokenHelper.sol\\\";\\n\\n/**\\n * @title Liquidity Book Bin Helper Library\\n * @author Trader Joe\\n * @notice This library contains functions to help interaction with bins.\\n */\\nlibrary BinHelper {\\n    using PackedUint128Math for bytes32;\\n    using PackedUint128Math for uint128;\\n    using Uint256x256Math for uint256;\\n    using PriceHelper for uint24;\\n    using SafeCast for uint256;\\n    using PairParameterHelper for bytes32;\\n    using FeeHelper for uint128;\\n    using TokenHelper for IERC20;\\n\\n    error BinHelper__CompositionFactorFlawed(uint24 id);\\n    error BinHelper__LiquidityOverflow();\\n\\n    /**\\n     * @dev Returns the amount of tokens that will be received when burning the given amount of liquidity\\n     * @param binReserves The reserves of the bin\\n     * @param amountToBurn The amount of liquidity to burn\\n     * @param totalSupply The total supply of the liquidity book\\n     * @return amountsOut The encoded amount of tokens that will be received\\n     */\\n    function getAmountOutOfBin(bytes32 binReserves, uint256 amountToBurn, uint256 totalSupply)\\n        internal\\n        pure\\n        returns (bytes32 amountsOut)\\n    {\\n        (uint128 binReserveX, uint128 binReserveY) = binReserves.decode();\\n\\n        uint128 amountXOutFromBin;\\n        uint128 amountYOutFromBin;\\n\\n        if (binReserveX > 0) {\\n            amountXOutFromBin = (amountToBurn.mulDivRoundDown(binReserveX, totalSupply)).safe128();\\n        }\\n\\n        if (binReserveY > 0) {\\n            amountYOutFromBin = (amountToBurn.mulDivRoundDown(binReserveY, totalSupply)).safe128();\\n        }\\n\\n        amountsOut = amountXOutFromBin.encode(amountYOutFromBin);\\n    }\\n\\n    /**\\n     * @dev Returns the share and the effective amounts in when adding liquidity\\n     * @param binReserves The reserves of the bin\\n     * @param amountsIn The amounts of tokens to add\\n     * @param price The price of the bin\\n     * @param totalSupply The total supply of the liquidity book\\n     * @return shares The share of the liquidity book that the user will receive\\n     * @return effectiveAmountsIn The encoded effective amounts of tokens that the user will add.\\n     * This is the amount of tokens that the user will actually add to the liquidity book,\\n     * and will always be less than or equal to the amountsIn.\\n     */\\n    function getSharesAndEffectiveAmountsIn(bytes32 binReserves, bytes32 amountsIn, uint256 price, uint256 totalSupply)\\n        internal\\n        pure\\n        returns (uint256 shares, bytes32 effectiveAmountsIn)\\n    {\\n        (uint256 x, uint256 y) = amountsIn.decode();\\n\\n        uint256 userLiquidity = getLiquidity(x, y, price);\\n        if (totalSupply == 0 || userLiquidity == 0) return (userLiquidity, amountsIn);\\n\\n        uint256 binLiquidity = getLiquidity(binReserves, price);\\n        if (binLiquidity == 0) return (userLiquidity, amountsIn);\\n\\n        shares = userLiquidity.mulDivRoundDown(totalSupply, binLiquidity);\\n        uint256 effectiveLiquidity = shares.mulDivRoundUp(binLiquidity, totalSupply);\\n\\n        if (userLiquidity > effectiveLiquidity) {\\n            uint256 deltaLiquidity = userLiquidity - effectiveLiquidity;\\n\\n            // The other way might be more efficient, but as y is the quote asset, it is more valuable\\n            if (deltaLiquidity >= Constants.SCALE) {\\n                uint256 deltaY = deltaLiquidity >> Constants.SCALE_OFFSET;\\n                deltaY = deltaY > y ? y : deltaY;\\n\\n                y -= deltaY;\\n                deltaLiquidity -= deltaY << Constants.SCALE_OFFSET;\\n            }\\n\\n            if (deltaLiquidity >= price) {\\n                uint256 deltaX = deltaLiquidity / price;\\n                deltaX = deltaX > x ? x : deltaX;\\n\\n                x -= deltaX;\\n            }\\n\\n            amountsIn = uint128(x).encode(uint128(y));\\n        }\\n\\n        return (shares, amountsIn);\\n    }\\n\\n    /**\\n     * @dev Returns the amount of liquidity following the constant sum formula `L = price * x + y`\\n     * @param amounts The amounts of tokens\\n     * @param price The price of the bin\\n     * @return liquidity The amount of liquidity\\n     */\\n    function getLiquidity(bytes32 amounts, uint256 price) internal pure returns (uint256 liquidity) {\\n        (uint256 x, uint256 y) = amounts.decode();\\n        return getLiquidity(x, y, price);\\n    }\\n\\n    /**\\n     * @dev Returns the amount of liquidity following the constant sum formula `L = price * x + y`\\n     * @param x The amount of the token X\\n     * @param y The amount of the token Y\\n     * @param price The price of the bin\\n     * @return liquidity The amount of liquidity\\n     */\\n    function getLiquidity(uint256 x, uint256 y, uint256 price) internal pure returns (uint256 liquidity) {\\n        if (x > 0) {\\n            unchecked {\\n                liquidity = price * x;\\n                if (liquidity / x != price) revert BinHelper__LiquidityOverflow();\\n            }\\n        }\\n        if (y > 0) {\\n            unchecked {\\n                y <<= Constants.SCALE_OFFSET;\\n                liquidity += y;\\n\\n                if (liquidity < y) revert BinHelper__LiquidityOverflow();\\n            }\\n        }\\n\\n        return liquidity;\\n    }\\n\\n    /**\\n     * @dev Verify that the amounts are correct and that the composition factor is not flawed\\n     * @param amounts The amounts of tokens\\n     * @param activeId The id of the active bin\\n     * @param id The id of the bin\\n     */\\n    function verifyAmounts(bytes32 amounts, uint24 activeId, uint24 id) internal pure {\\n        if (id < activeId && (amounts << 128) > 0 || id > activeId && uint256(amounts) > type(uint128).max) {\\n            revert BinHelper__CompositionFactorFlawed(id);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the composition fees when adding liquidity to the active bin with a different\\n     * composition factor than the bin's one, as it does an implicit swap\\n     * @param binReserves The reserves of the bin\\n     * @param parameters The parameters of the liquidity book\\n     * @param binStep The step of the bin\\n     * @param amountsIn The amounts of tokens to add\\n     * @param totalSupply The total supply of the liquidity book\\n     * @param shares The share of the liquidity book that the user will receive\\n     * @return fees The encoded fees that will be charged\\n     */\\n    function getCompositionFees(\\n        bytes32 binReserves,\\n        bytes32 parameters,\\n        uint16 binStep,\\n        bytes32 amountsIn,\\n        uint256 totalSupply,\\n        uint256 shares\\n    ) internal pure returns (bytes32 fees) {\\n        if (shares == 0) return 0;\\n\\n        (uint128 amountX, uint128 amountY) = amountsIn.decode();\\n        (uint128 receivedAmountX, uint128 receivedAmountY) =\\n            getAmountOutOfBin(binReserves.add(amountsIn), shares, totalSupply + shares).decode();\\n\\n        if (receivedAmountX > amountX) {\\n            uint128 feeY = (amountY - receivedAmountY).getCompositionFee(parameters.getTotalFee(binStep));\\n\\n            fees = feeY.encodeSecond();\\n        } else if (receivedAmountY > amountY) {\\n            uint128 feeX = (amountX - receivedAmountX).getCompositionFee(parameters.getTotalFee(binStep));\\n\\n            fees = feeX.encodeFirst();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the bin is empty (true) or not (false)\\n     * @param binReserves The reserves of the bin\\n     * @param isX Whether the reserve to check is the X reserve (true) or the Y reserve (false)\\n     * @return Whether the bin is empty (true) or not (false)\\n     */\\n    function isEmpty(bytes32 binReserves, bool isX) internal pure returns (bool) {\\n        return isX ? binReserves.decodeX() == 0 : binReserves.decodeY() == 0;\\n    }\\n\\n    /**\\n     * @dev Returns the amounts of tokens that will be added and removed from the bin during a swap\\n     * along with the fees that will be charged\\n     * @param binReserves The reserves of the bin\\n     * @param parameters The parameters of the liquidity book\\n     * @param binStep The step of the bin\\n     * @param swapForY Whether the swap is for Y (true) or for X (false)\\n     * @param activeId The id of the active bin\\n     * @param amountsInLeft The amounts of tokens left to swap\\n     * @return amountsInWithFees The encoded amounts of tokens that will be added to the bin, including fees\\n     * @return amountsOutOfBin The encoded amounts of tokens that will be removed from the bin\\n     * @return totalFees The encoded fees that will be charged\\n     */\\n    function getAmounts(\\n        bytes32 binReserves,\\n        bytes32 parameters,\\n        uint16 binStep,\\n        bool swapForY, // swap `swapForY` and `activeId` to avoid stack too deep\\n        uint24 activeId,\\n        bytes32 amountsInLeft\\n    ) internal pure returns (bytes32 amountsInWithFees, bytes32 amountsOutOfBin, bytes32 totalFees) {\\n        uint256 price = activeId.getPriceFromId(binStep);\\n\\n        uint128 binReserveOut = binReserves.decode(!swapForY);\\n\\n        uint128 maxAmountIn = swapForY\\n            ? uint256(binReserveOut).shiftDivRoundUp(Constants.SCALE_OFFSET, price).safe128()\\n            : uint256(binReserveOut).mulShiftRoundUp(price, Constants.SCALE_OFFSET).safe128();\\n\\n        uint128 totalFee = parameters.getTotalFee(binStep);\\n        uint128 maxFee = maxAmountIn.getFeeAmount(totalFee);\\n\\n        maxAmountIn += maxFee;\\n\\n        uint128 amountIn128 = amountsInLeft.decode(swapForY);\\n        uint128 fee128;\\n        uint128 amountOut128;\\n\\n        if (amountIn128 >= maxAmountIn) {\\n            fee128 = maxFee;\\n\\n            amountIn128 = maxAmountIn;\\n            amountOut128 = binReserveOut;\\n        } else {\\n            fee128 = amountIn128.getFeeAmountFrom(totalFee);\\n\\n            uint256 amountIn = amountIn128 - fee128;\\n\\n            amountOut128 = swapForY\\n                ? uint256(amountIn).mulShiftRoundDown(price, Constants.SCALE_OFFSET).safe128()\\n                : uint256(amountIn).shiftDivRoundDown(Constants.SCALE_OFFSET, price).safe128();\\n\\n            if (amountOut128 > binReserveOut) amountOut128 = binReserveOut;\\n        }\\n\\n        (amountsInWithFees, amountsOutOfBin, totalFees) = swapForY\\n            ? (amountIn128.encodeFirst(), amountOut128.encodeSecond(), fee128.encodeFirst())\\n            : (amountIn128.encodeSecond(), amountOut128.encodeFirst(), fee128.encodeSecond());\\n    }\\n\\n    /**\\n     * @dev Returns the encoded amounts that were transferred to the contract\\n     * @param reserves The reserves\\n     * @param tokenX The token X\\n     * @param tokenY The token Y\\n     * @return amounts The amounts, encoded as follows:\\n     * [0 - 128[: amountX\\n     * [128 - 256[: amountY\\n     */\\n    function received(bytes32 reserves, IERC20 tokenX, IERC20 tokenY) internal view returns (bytes32 amounts) {\\n        amounts = _balanceOf(tokenX).encode(_balanceOf(tokenY)).sub(reserves);\\n    }\\n\\n    /**\\n     * @dev Returns the encoded amounts that were transferred to the contract, only for token X\\n     * @param reserves The reserves\\n     * @param tokenX The token X\\n     * @return amounts The amounts, encoded as follows:\\n     * [0 - 128[: amountX\\n     * [128 - 256[: empty\\n     */\\n    function receivedX(bytes32 reserves, IERC20 tokenX) internal view returns (bytes32) {\\n        uint128 reserveX = reserves.decodeX();\\n        return (_balanceOf(tokenX) - reserveX).encodeFirst();\\n    }\\n\\n    /**\\n     * @dev Returns the encoded amounts that were transferred to the contract, only for token Y\\n     * @param reserves The reserves\\n     * @param tokenY The token Y\\n     * @return amounts The amounts, encoded as follows:\\n     * [0 - 128[: empty\\n     * [128 - 256[: amountY\\n     */\\n    function receivedY(bytes32 reserves, IERC20 tokenY) internal view returns (bytes32) {\\n        uint128 reserveY = reserves.decodeY();\\n        return (_balanceOf(tokenY) - reserveY).encodeSecond();\\n    }\\n\\n    /**\\n     * @dev Transfers the encoded amounts to the recipient\\n     * @param amounts The amounts, encoded as follows:\\n     * [0 - 128[: amountX\\n     * [128 - 256[: amountY\\n     * @param tokenX The token X\\n     * @param tokenY The token Y\\n     * @param recipient The recipient\\n     */\\n    function transfer(bytes32 amounts, IERC20 tokenX, IERC20 tokenY, address recipient) internal {\\n        (uint128 amountX, uint128 amountY) = amounts.decode();\\n\\n        if (amountX > 0) tokenX.safeTransfer(recipient, amountX);\\n        if (amountY > 0) tokenY.safeTransfer(recipient, amountY);\\n    }\\n\\n    /**\\n     * @dev Transfers the encoded amounts to the recipient, only for token X\\n     * @param amounts The amounts, encoded as follows:\\n     * [0 - 128[: amountX\\n     * [128 - 256[: empty\\n     * @param tokenX The token X\\n     * @param recipient The recipient\\n     */\\n    function transferX(bytes32 amounts, IERC20 tokenX, address recipient) internal {\\n        uint128 amountX = amounts.decodeX();\\n\\n        if (amountX > 0) tokenX.safeTransfer(recipient, amountX);\\n    }\\n\\n    /**\\n     * @dev Transfers the encoded amounts to the recipient, only for token Y\\n     * @param amounts The amounts, encoded as follows:\\n     * [0 - 128[: empty\\n     * [128 - 256[: amountY\\n     * @param tokenY The token Y\\n     * @param recipient The recipient\\n     */\\n    function transferY(bytes32 amounts, IERC20 tokenY, address recipient) internal {\\n        uint128 amountY = amounts.decodeY();\\n\\n        if (amountY > 0) tokenY.safeTransfer(recipient, amountY);\\n    }\\n\\n    function _balanceOf(IERC20 token) private view returns (uint128) {\\n        return token.balanceOf(address(this)).safe128();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Constants Library\\n * @author Trader Joe\\n * @notice Set of constants for Liquidity Book contracts\\n */\\nlibrary Constants {\\n    uint8 internal constant SCALE_OFFSET = 128;\\n    uint256 internal constant SCALE = 1 << SCALE_OFFSET;\\n\\n    uint256 internal constant PRECISION = 1e18;\\n    uint256 internal constant SQUARED_PRECISION = PRECISION * PRECISION;\\n\\n    uint256 internal constant MAX_FEE = 0.1e18; // 10%\\n    uint256 internal constant MAX_PROTOCOL_SHARE = 2_500; // 25% of the fee\\n\\n    uint256 internal constant BASIS_POINT_MAX = 10_000;\\n\\n    /// @dev The expected return after a successful flash loan\\n    bytes32 internal constant CALLBACK_SUCCESS = keccak256(\\\"LBPair.onFlashLoan\\\");\\n}\\n\"\r\n    },\r\n    \"src/libraries/FeeHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {Constants} from \\\"./Constants.sol\\\";\\n\\n/**\\n * @title Liquidity Book Fee Helper Library\\n * @author Trader Joe\\n * @notice This library contains functions to calculate fees\\n */\\nlibrary FeeHelper {\\n    error FeeHelper__FeeTooLarge();\\n    error FeeHelper__ProtocolShareTooLarge();\\n\\n    /**\\n     * @dev Modifier to check that the fee is not too large\\n     * @param fee The fee\\n     */\\n    modifier verifyFee(uint128 fee) {\\n        if (fee > Constants.MAX_FEE) revert FeeHelper__FeeTooLarge();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check that the protocol share is not too large\\n     * @param protocolShare The protocol share\\n     */\\n    modifier verifyProtocolShare(uint128 protocolShare) {\\n        if (protocolShare > Constants.MAX_PROTOCOL_SHARE) revert FeeHelper__ProtocolShareTooLarge();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Calculates the fee amount from the amount with fees, rounding up\\n     * @param amountWithFees The amount with fees\\n     * @param totalFee The total fee\\n     * @return feeAmount The fee amount\\n     */\\n    function getFeeAmountFrom(uint128 amountWithFees, uint128 totalFee)\\n        internal\\n        pure\\n        verifyFee(totalFee)\\n        returns (uint128)\\n    {\\n        unchecked {\\n            // Can't overflow, max(result) = (type(uint128).max * 0.1e18 + 1e18 - 1) / 1e18 < 2^128\\n            return uint128((uint256(amountWithFees) * totalFee + Constants.PRECISION - 1) / Constants.PRECISION);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the fee amount that will be charged, rounding up\\n     * @param amount The amount\\n     * @param totalFee The total fee\\n     * @return feeAmount The fee amount\\n     */\\n    function getFeeAmount(uint128 amount, uint128 totalFee) internal pure verifyFee(totalFee) returns (uint128) {\\n        unchecked {\\n            uint256 denominator = Constants.PRECISION - totalFee;\\n            // Can't overflow, max(result) = (type(uint128).max * 0.1e18 + (1e18 - 1)) / 0.9e18 < 2^128\\n            return uint128((uint256(amount) * totalFee + denominator - 1) / denominator);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the composition fee amount from the amount with fees, rounding down\\n     * @param amountWithFees The amount with fees\\n     * @param totalFee The total fee\\n     * @return The amount with fees\\n     */\\n    function getCompositionFee(uint128 amountWithFees, uint128 totalFee)\\n        internal\\n        pure\\n        verifyFee(totalFee)\\n        returns (uint128)\\n    {\\n        unchecked {\\n            uint256 denominator = Constants.SQUARED_PRECISION;\\n            // Can't overflow, max(result) = type(uint128).max * 0.1e18 * 1.1e18 / 1e36 <= 2^128 * 0.11e36 / 1e36 < 2^128\\n            return uint128(uint256(amountWithFees) * totalFee * (uint256(totalFee) + Constants.PRECISION) / denominator);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the protocol fee amount from the fee amount and the protocol share, rounding down\\n     * @param feeAmount The fee amount\\n     * @param protocolShare The protocol share\\n     * @return protocolFeeAmount The protocol fee amount\\n     */\\n    function getProtocolFeeAmount(uint128 feeAmount, uint128 protocolShare)\\n        internal\\n        pure\\n        verifyProtocolShare(protocolShare)\\n        returns (uint128)\\n    {\\n        unchecked {\\n            return uint128(uint256(feeAmount) * protocolShare / Constants.BASIS_POINT_MAX);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/JoeLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Joe Library Helper Library\\n * @author Trader Joe\\n * @notice Helper contract used for Joe V1 related calculations\\n */\\nlibrary JoeLibrary {\\n    error JoeLibrary__AddressZero();\\n    error JoeLibrary__IdenticalAddresses();\\n    error JoeLibrary__InsufficientAmount();\\n    error JoeLibrary__InsufficientLiquidity();\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        if (tokenA == tokenB) revert JoeLibrary__IdenticalAddresses();\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        if (token0 == address(0)) revert JoeLibrary__AddressZero();\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) internal pure returns (uint256 amountB) {\\n        if (amountA == 0) revert JoeLibrary__InsufficientAmount();\\n        if (reserveA == 0 || reserveB == 0) revert JoeLibrary__InsufficientLiquidity();\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut)\\n        internal\\n        pure\\n        returns (uint256 amountOut)\\n    {\\n        if (amountIn == 0) revert JoeLibrary__InsufficientAmount();\\n        if (reserveIn == 0 || reserveOut == 0) revert JoeLibrary__InsufficientLiquidity();\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut)\\n        internal\\n        pure\\n        returns (uint256 amountIn)\\n    {\\n        if (amountOut == 0) revert JoeLibrary__InsufficientAmount();\\n        if (reserveIn == 0 || reserveOut == 0) revert JoeLibrary__InsufficientLiquidity();\\n        uint256 numerator = reserveIn * amountOut * 1000;\\n        uint256 denominator = (reserveOut - amountOut) * 997;\\n        amountIn = numerator / denominator + 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/PairParameterHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {Constants} from \\\"./Constants.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {Encoded} from \\\"./math/Encoded.sol\\\";\\n\\n/**\\n * @title Liquidity Book Pair Parameter Helper Library\\n * @author Trader Joe\\n * @dev This library contains functions to get and set parameters of a pair\\n * The parameters are stored in a single bytes32 variable in the following format:\\n * [0 - 16[: base factor (16 bits)\\n * [16 - 28[: filter period (12 bits)\\n * [28 - 40[: decay period (12 bits)\\n * [40 - 54[: reduction factor (14 bits)\\n * [54 - 78[: variable fee control (24 bits)\\n * [78 - 92[: protocol share (14 bits)\\n * [92 - 112[: max volatility accumulator (20 bits)\\n * [112 - 132[: volatility accumulator (20 bits)\\n * [132 - 152[: volatility reference (20 bits)\\n * [152 - 176[: index reference (24 bits)\\n * [176 - 216[: time of last update (40 bits)\\n * [216 - 232[: oracle index (16 bits)\\n * [232 - 256[: active index (24 bits)\\n */\\nlibrary PairParameterHelper {\\n    using SafeCast for uint256;\\n    using Encoded for bytes32;\\n\\n    error PairParametersHelper__InvalidParameter();\\n\\n    uint256 internal constant OFFSET_BASE_FACTOR = 0;\\n    uint256 internal constant OFFSET_FILTER_PERIOD = 16;\\n    uint256 internal constant OFFSET_DECAY_PERIOD = 28;\\n    uint256 internal constant OFFSET_REDUCTION_FACTOR = 40;\\n    uint256 internal constant OFFSET_VAR_FEE_CONTROL = 54;\\n    uint256 internal constant OFFSET_PROTOCOL_SHARE = 78;\\n    uint256 internal constant OFFSET_MAX_VOL_ACC = 92;\\n    uint256 internal constant OFFSET_VOL_ACC = 112;\\n    uint256 internal constant OFFSET_VOL_REF = 132;\\n    uint256 internal constant OFFSET_ID_REF = 152;\\n    uint256 internal constant OFFSET_TIME_LAST_UPDATE = 176;\\n    uint256 internal constant OFFSET_ORACLE_ID = 216;\\n    uint256 internal constant OFFSET_ACTIVE_ID = 232;\\n\\n    uint256 internal constant MASK_STATIC_PARAMETER = 0xffffffffffffffffffffffffffff;\\n\\n    /**\\n     * @dev Get the base factor from the encoded pair parameters\\n     * @param params The encoded pair parameters, as follows:\\n     * [0 - 16[: base factor (16 bits)\\n     * [16 - 256[: other parameters\\n     * @return baseFactor The base factor\\n     */\\n    function getBaseFactor(bytes32 params) internal pure returns (uint16 baseFactor) {\\n        baseFactor = params.decodeUint16(OFFSET_BASE_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Get the filter period from the encoded pair parameters\\n     * @param params The encoded pair parameters, as follows:\\n     * [0 - 16[: other parameters\\n     * [16 - 28[: filter period (12 bits)\\n     * [28 - 256[: other parameters\\n     * @return filterPeriod The filter period\\n     */\\n    function getFilterPeriod(bytes32 params) internal pure returns (uint16 filterPeriod) {\\n        filterPeriod = params.decodeUint12(OFFSET_FILTER_PERIOD);\\n    }\\n\\n    /**\\n     * @dev Get the decay period from the encoded pair parameters\\n     * @param params The encoded pair parameters, as follows:\\n     * [0 - 28[: other parameters\\n     * [28 - 40[: decay period (12 bits)\\n     * [40 - 256[: other parameters\\n     * @return decayPeriod The decay period\\n     */\\n    function getDecayPeriod(bytes32 params) internal pure returns (uint16 decayPeriod) {\\n        decayPeriod = params.decodeUint12(OFFSET_DECAY_PERIOD);\\n    }\\n\\n    /**\\n     * @dev Get the reduction factor from the encoded pair parameters\\n     * @param params The encoded pair parameters, as follows:\\n     * [0 - 40[: other parameters\\n     * [40 - 54[: reduction factor (14 bits)\\n     * [54 - 256[: other parameters\\n     * @return reductionFactor The reduction factor\\n     */\\n    function getReductionFactor(bytes32 params) internal pure returns (uint16 reductionFactor) {\\n        reductionFactor = params.decodeUint14(OFFSET_REDUCTION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Get the variable fee control from the encoded pair parameters\\n     * @param params The encoded pair parameters, as follows:\\n     * [0 - 54[: other parameters\\n     * [54 - 78[: variable fee control (24 bits)\\n     * [78 - 256[: other parameters\\n     * @return variableFeeControl The variable fee control\\n     */\\n    function getVariableFeeControl(bytes32 params) internal pure returns (uint24 variableFeeControl) {\\n        variableFeeControl = params.decodeUint24(OFFSET_VAR_FEE_CONTROL);\\n    }\\n\\n    /**\\n     * @dev Get the protocol share from the encoded pair parameters\\n     * @param params The encoded pair parameters, as follows:\\n     * [0 - 78[: other parameters\\n     * [78 - 92[: protocol share (14 bits)\\n     * [92 - 256[: other parameters\\n     * @return protocolShare The protocol share\\n     */\\n    function getProtocolShare(bytes32 params) internal pure returns (uint16 protocolShare) {\\n        protocolShare = params.decodeUint14(OFFSET_PROTOCOL_SHARE);\\n    }\\n\\n    /**\\n     * @dev Get the max volatility accumulator from the encoded pair parameters\\n     * @param params The encoded pair parameters, as follows:\\n     * [0 - 92[: other parameters\\n     * [92 - 112[: max volatility accumulator (20 bits)\\n     * [112 - 256[: other parameters\\n     * @return maxVolatilityAccumulator The max volatility accumulator\\n     */\\n    function getMaxVolatilityAccumulator(bytes32 params) internal pure returns (uint24 maxVolatilityAccumulator) {\\n        maxVolatilityAccumulator = params.decodeUint20(OFFSET_MAX_VOL_ACC);\\n    }\\n\\n    /**\\n     * @dev Get the volatility accumulator from the encoded pair parameters\\n     * @param params The encoded pair parameters, as follows:\\n     * [0 - 112[: other parameters\\n     * [112 - 132[: volatility accumulator (20 bits)\\n     * [132 - 256[: other parameters\\n     * @return volatilityAccumulator The volatility accumulator\\n     */\\n    function getVolatilityAccumulator(bytes32 params) internal pure returns (uint24 volatilityAccumulator) {\\n        volatilityAccumulator = params.decodeUint20(OFFSET_VOL_ACC);\\n    }\\n\\n    /**\\n     * @dev Get the volatility reference from the encoded pair parameters\\n     * @param params The encoded pair parameters, as follows:\\n     * [0 - 132[: other parameters\\n     * [132 - 152[: volatility reference (20 bits)\\n     * [152 - 256[: other parameters\\n     * @return volatilityReference The volatility reference\\n     */\\n    function getVolatilityReference(bytes32 params) internal pure returns (uint24 volatilityReference) {\\n        volatilityReference = params.decodeUint20(OFFSET_VOL_REF);\\n    }\\n\\n    /**\\n     * @dev Get the index reference from the encoded pair parameters\\n     * @param params The encoded pair parameters, as follows:\\n     * [0 - 152[: other parameters\\n     * [152 - 176[: index reference (24 bits)\\n     * [176 - 256[: other parameters\\n     * @return idReference The index reference\\n     */\\n    function getIdReference(bytes32 params) internal pure returns (uint24 idReference) {\\n        idReference = params.decodeUint24(OFFSET_ID_REF);\\n    }\\n\\n    /**\\n     * @dev Get the time of last update from the encoded pair parameters\\n     * @param params The encoded pair parameters, as follows:\\n     * [0 - 176[: other parameters\\n     * [176 - 216[: time of last update (40 bits)\\n     * [216 - 256[: other parameters\\n     * @return timeOflastUpdate The time of last update\\n     */\\n    function getTimeOfLastUpdate(bytes32 params) internal pure returns (uint40 timeOflastUpdate) {\\n        timeOflastUpdate = params.decodeUint40(OFFSET_TIME_LAST_UPDATE);\\n    }\\n\\n    /**\\n     * @dev Get the oracle id from the encoded pair parameters\\n     * @param params The encoded pair parameters, as follows:\\n     * [0 - 216[: other parameters\\n     * [216 - 232[: oracle id (16 bits)\\n     * [232 - 256[: other parameters\\n     * @return oracleId The oracle id\\n     */\\n    function getOracleId(bytes32 params) internal pure returns (uint16 oracleId) {\\n        oracleId = params.decodeUint16(OFFSET_ORACLE_ID);\\n    }\\n\\n    /**\\n     * @dev Get the active index from the encoded pair parameters\\n     * @param params The encoded pair parameters, as follows:\\n     * [0 - 232[: other parameters\\n     * [232 - 256[: active index (24 bits)\\n     * @return activeId The active index\\n     */\\n    function getActiveId(bytes32 params) internal pure returns (uint24 activeId) {\\n        activeId = params.decodeUint24(OFFSET_ACTIVE_ID);\\n    }\\n\\n    /**\\n     * @dev Get the delta between the current active index and the cached active index\\n     * @param params The encoded pair parameters, as follows:\\n     * [0 - 232[: other parameters\\n     * [232 - 256[: active index (24 bits)\\n     * @param activeId The current active index\\n     * @return The delta\\n     */\\n    function getDeltaId(bytes32 params, uint24 activeId) internal pure returns (uint24) {\\n        uint24 id = getActiveId(params);\\n        unchecked {\\n            return activeId > id ? activeId - id : id - activeId;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the base fee, with 18 decimals\\n     * @param params The encoded pair parameters\\n     * @param binStep The bin step (in basis points)\\n     * @return baseFee The base fee\\n     */\\n    function getBaseFee(bytes32 params, uint16 binStep) internal pure returns (uint256) {\\n        unchecked {\\n            // Base factor is in basis points, binStep is in basis points, so we multiply by 1e10\\n            return uint256(getBaseFactor(params)) * binStep * 1e10;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the variable fee\\n     * @param params The encoded pair parameters\\n     * @param binStep The bin step (in basis points)\\n     * @return variableFee The variable fee\\n     */\\n    function getVariableFee(bytes32 params, uint16 binStep) internal pure returns (uint256 variableFee) {\\n        uint256 variableFeeControl = getVariableFeeControl(params);\\n\\n        if (variableFeeControl != 0) {\\n            unchecked {\\n                // The volatility accumulator is in basis points, binStep is in basis points,\\n                // and the variable fee control is in basis points, so the result is in 100e18th\\n                uint256 prod = uint256(getVolatilityAccumulator(params)) * binStep;\\n                variableFee = (prod * prod * variableFeeControl + 99) / 100;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the total fee, which is the sum of the base fee and the variable fee\\n     * @param params The encoded pair parameters\\n     * @param binStep The bin step (in basis points)\\n     * @return totalFee The total fee\\n     */\\n    function getTotalFee(bytes32 params, uint16 binStep) internal pure returns (uint128) {\\n        unchecked {\\n            return (getBaseFee(params, binStep) + getVariableFee(params, binStep)).safe128();\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the oracle id in the encoded pair parameters\\n     * @param params The encoded pair parameters\\n     * @param oracleId The oracle id\\n     * @return The updated encoded pair parameters\\n     */\\n    function setOracleId(bytes32 params, uint16 oracleId) internal pure returns (bytes32) {\\n        return params.set(oracleId, Encoded.MASK_UINT16, OFFSET_ORACLE_ID);\\n    }\\n\\n    /**\\n     * @dev Set the volatility reference in the encoded pair parameters\\n     * @param params The encoded pair parameters\\n     * @param volRef The volatility reference\\n     * @return The updated encoded pair parameters\\n     */\\n    function setVolatilityReference(bytes32 params, uint24 volRef) internal pure returns (bytes32) {\\n        if (volRef > Encoded.MASK_UINT20) revert PairParametersHelper__InvalidParameter();\\n\\n        return params.set(volRef, Encoded.MASK_UINT20, OFFSET_VOL_REF);\\n    }\\n\\n    /**\\n     * @dev Set the volatility accumulator in the encoded pair parameters\\n     * @param params The encoded pair parameters\\n     * @param volAcc The volatility accumulator\\n     * @return The updated encoded pair parameters\\n     */\\n    function setVolatilityAccumulator(bytes32 params, uint24 volAcc) internal pure returns (bytes32) {\\n        if (volAcc > Encoded.MASK_UINT20) revert PairParametersHelper__InvalidParameter();\\n\\n        return params.set(volAcc, Encoded.MASK_UINT20, OFFSET_VOL_ACC);\\n    }\\n\\n    /**\\n     * @dev Set the active id in the encoded pair parameters\\n     * @param params The encoded pair parameters\\n     * @param activeId The active id\\n     * @return newParams The updated encoded pair parameters\\n     */\\n    function setActiveId(bytes32 params, uint24 activeId) internal pure returns (bytes32 newParams) {\\n        return params.set(activeId, Encoded.MASK_UINT24, OFFSET_ACTIVE_ID);\\n    }\\n\\n    /**\\n     * @dev Sets the static fee parameters in the encoded pair parameters\\n     * @param params The encoded pair parameters\\n     * @param baseFactor The base factor\\n     * @param filterPeriod The filter period\\n     * @param decayPeriod The decay period\\n     * @param reductionFactor The reduction factor\\n     * @param variableFeeControl The variable fee control\\n     * @param protocolShare The protocol share\\n     * @param maxVolatilityAccumulator The max volatility accumulator\\n     * @return newParams The updated encoded pair parameters\\n     */\\n    function setStaticFeeParameters(\\n        bytes32 params,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) internal pure returns (bytes32 newParams) {\\n        if (\\n            filterPeriod > decayPeriod || decayPeriod > Encoded.MASK_UINT12\\n                || reductionFactor > Constants.BASIS_POINT_MAX || protocolShare > Constants.MAX_PROTOCOL_SHARE\\n                || maxVolatilityAccumulator > Encoded.MASK_UINT20\\n        ) revert PairParametersHelper__InvalidParameter();\\n\\n        newParams = newParams.set(baseFactor, Encoded.MASK_UINT16, OFFSET_BASE_FACTOR);\\n        newParams = newParams.set(filterPeriod, Encoded.MASK_UINT12, OFFSET_FILTER_PERIOD);\\n        newParams = newParams.set(decayPeriod, Encoded.MASK_UINT12, OFFSET_DECAY_PERIOD);\\n        newParams = newParams.set(reductionFactor, Encoded.MASK_UINT14, OFFSET_REDUCTION_FACTOR);\\n        newParams = newParams.set(variableFeeControl, Encoded.MASK_UINT24, OFFSET_VAR_FEE_CONTROL);\\n        newParams = newParams.set(protocolShare, Encoded.MASK_UINT14, OFFSET_PROTOCOL_SHARE);\\n        newParams = newParams.set(maxVolatilityAccumulator, Encoded.MASK_UINT20, OFFSET_MAX_VOL_ACC);\\n\\n        return params.set(uint256(newParams), MASK_STATIC_PARAMETER, 0);\\n    }\\n\\n    /**\\n     * @dev Updates the index reference in the encoded pair parameters\\n     * @param params The encoded pair parameters\\n     * @return newParams The updated encoded pair parameters\\n     */\\n    function updateIdReference(bytes32 params) internal pure returns (bytes32 newParams) {\\n        uint24 activeId = getActiveId(params);\\n        return params.set(activeId, Encoded.MASK_UINT24, OFFSET_ID_REF);\\n    }\\n\\n    /**\\n     * @dev Updates the time of last update in the encoded pair parameters\\n     * @param params The encoded pair parameters\\n     * @return newParams The updated encoded pair parameters\\n     */\\n    function updateTimeOfLastUpdate(bytes32 params) internal view returns (bytes32 newParams) {\\n        uint40 currentTime = block.timestamp.safe40();\\n        return params.set(currentTime, Encoded.MASK_UINT40, OFFSET_TIME_LAST_UPDATE);\\n    }\\n\\n    /**\\n     * @dev Updates the volatility reference in the encoded pair parameters\\n     * @param params The encoded pair parameters\\n     * @return The updated encoded pair parameters\\n     */\\n    function updateVolatilityReference(bytes32 params) internal pure returns (bytes32) {\\n        uint256 volAcc = getVolatilityAccumulator(params);\\n        uint256 reductionFactor = getReductionFactor(params);\\n\\n        uint24 volRef;\\n        unchecked {\\n            volRef = uint24(volAcc * reductionFactor / Constants.BASIS_POINT_MAX);\\n        }\\n\\n        return setVolatilityReference(params, volRef);\\n    }\\n\\n    /**\\n     * @dev Updates the volatility accumulator in the encoded pair parameters\\n     * @param params The encoded pair parameters\\n     * @param activeId The active id\\n     * @return The updated encoded pair parameters\\n     */\\n    function updateVolatilityAccumulator(bytes32 params, uint24 activeId) internal pure returns (bytes32) {\\n        uint256 idReference = getIdReference(params);\\n\\n        uint256 deltaId;\\n        uint256 volAcc;\\n\\n        unchecked {\\n            deltaId = activeId > idReference ? activeId - idReference : idReference - activeId;\\n            volAcc = (uint256(getVolatilityReference(params)) + deltaId * Constants.BASIS_POINT_MAX);\\n        }\\n\\n        uint256 maxVolAcc = getMaxVolatilityAccumulator(params);\\n\\n        volAcc = volAcc > maxVolAcc ? maxVolAcc : volAcc;\\n\\n        return setVolatilityAccumulator(params, uint24(volAcc));\\n    }\\n\\n    /**\\n     * @dev Updates the volatility reference and the volatility accumulator in the encoded pair parameters\\n     * @param params The encoded pair parameters\\n     * @return The updated encoded pair parameters\\n     */\\n    function updateReferences(bytes32 params) internal view returns (bytes32) {\\n        uint256 dt = block.timestamp - getTimeOfLastUpdate(params);\\n\\n        if (dt >= getFilterPeriod(params)) {\\n            params = updateIdReference(params);\\n            params = dt < getDecayPeriod(params) ? updateVolatilityReference(params) : setVolatilityReference(params, 0);\\n        }\\n\\n        return updateTimeOfLastUpdate(params);\\n    }\\n\\n    /**\\n     * @dev Updates the volatility reference and the volatility accumulator in the encoded pair parameters\\n     * @param params The encoded pair parameters\\n     * @param activeId The active id\\n     * @return The updated encoded pair parameters\\n     */\\n    function updateVolatilityParameters(bytes32 params, uint24 activeId) internal view returns (bytes32) {\\n        params = updateReferences(params);\\n        return updateVolatilityAccumulator(params, activeId);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/PriceHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {Uint128x128Math} from \\\"./math/Uint128x128Math.sol\\\";\\nimport {Uint256x256Math} from \\\"./math/Uint256x256Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {Constants} from \\\"./Constants.sol\\\";\\n\\n/**\\n * @title Liquidity Book Price Helper Library\\n * @author Trader Joe\\n * @notice This library contains functions to calculate prices\\n */\\nlibrary PriceHelper {\\n    using Uint128x128Math for uint256;\\n    using Uint256x256Math for uint256;\\n    using SafeCast for uint256;\\n\\n    int256 private constant REAL_ID_SHIFT = 1 << 23;\\n\\n    /**\\n     * @dev Calculates the price from the id and the bin step\\n     * @param id The id\\n     * @param binStep The bin step\\n     * @return price The price as a 128.128-binary fixed-point number\\n     */\\n    function getPriceFromId(uint24 id, uint16 binStep) internal pure returns (uint256 price) {\\n        uint256 base = getBase(binStep);\\n        int256 exponent = getExponent(id);\\n\\n        price = base.pow(exponent);\\n    }\\n\\n    /**\\n     * @dev Calculates the id from the price and the bin step\\n     * @param price The price as a 128.128-binary fixed-point number\\n     * @param binStep The bin step\\n     * @return id The id\\n     */\\n    function getIdFromPrice(uint256 price, uint16 binStep) internal pure returns (uint24 id) {\\n        uint256 base = getBase(binStep);\\n        int256 realId = price.log2() / base.log2();\\n\\n        unchecked {\\n            id = uint256(REAL_ID_SHIFT + realId).safe24();\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the base from the bin step, which is `1 + binStep / BASIS_POINT_MAX`\\n     * @param binStep The bin step\\n     * @return base The base\\n     */\\n    function getBase(uint16 binStep) internal pure returns (uint256) {\\n        unchecked {\\n            return Constants.SCALE + (uint256(binStep) << Constants.SCALE_OFFSET) / Constants.BASIS_POINT_MAX;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the exponent from the id, which is `id - REAL_ID_SHIFT`\\n     * @param id The id\\n     * @return exponent The exponent\\n     */\\n    function getExponent(uint24 id) internal pure returns (int256) {\\n        unchecked {\\n            return int256(uint256(id)) - REAL_ID_SHIFT;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a price with 18 decimals to a 128.128-binary fixed-point number\\n     * @param price The price with 18 decimals\\n     * @return price128x128 The 128.128-binary fixed-point number\\n     */\\n    function convertDecimalPriceTo128x128(uint256 price) internal pure returns (uint256) {\\n        return price.shiftDivRoundDown(Constants.SCALE_OFFSET, Constants.PRECISION);\\n    }\\n\\n    /**\\n     * @dev Converts a 128.128-binary fixed-point number to a price with 18 decimals\\n     * @param price128x128 The 128.128-binary fixed-point number\\n     * @return price The price with 18 decimals\\n     */\\n    function convert128x128PriceToDecimal(uint256 price128x128) internal pure returns (uint256) {\\n        return price128x128.mulShiftRoundDown(Constants.PRECISION, Constants.SCALE_OFFSET);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/TokenHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\nimport {AddressHelper} from \\\"./AddressHelper.sol\\\";\\n\\n/**\\n * @title Liquidity Book Token Helper Library\\n * @author Trader Joe\\n * @notice Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using TokenHelper for IERC20;` statement to your contract,\\n * which allows you to call the safe operation as `token.safeTransfer(...)`\\n */\\nlibrary TokenHelper {\\n    using AddressHelper for address;\\n\\n    error TokenHelper__TransferFailed();\\n\\n    /**\\n     * @notice Transfers token and reverts if the transfer fails\\n     * @param token The address of the token\\n     * @param owner The owner of the tokens\\n     * @param recipient The address of the recipient\\n     * @param amount The amount to send\\n     */\\n    function safeTransferFrom(IERC20 token, address owner, address recipient, uint256 amount) internal {\\n        bytes memory data = abi.encodeWithSelector(token.transferFrom.selector, owner, recipient, amount);\\n\\n        bytes memory returnData = address(token).callAndCatch(data);\\n\\n        if (returnData.length > 0 && !abi.decode(returnData, (bool))) revert TokenHelper__TransferFailed();\\n    }\\n\\n    /**\\n     * @notice Transfers token and reverts if the transfer fails\\n     * @param token The address of the token\\n     * @param recipient The address of the recipient\\n     * @param amount The amount to send\\n     */\\n    function safeTransfer(IERC20 token, address recipient, uint256 amount) internal {\\n        bytes memory data = abi.encodeWithSelector(token.transfer.selector, recipient, amount);\\n\\n        bytes memory returnData = address(token).callAndCatch(data);\\n\\n        if (returnData.length > 0 && !abi.decode(returnData, (bool))) revert TokenHelper__TransferFailed();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/math/BitMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Bit Math Library\\n * @author Trader Joe\\n * @notice Helper contract used for bit calculations\\n */\\nlibrary BitMath {\\n    /**\\n     * @dev Returns the index of the closest bit on the right of x that is non null\\n     * @param x The value as a uint256\\n     * @param bit The index of the bit to start searching at\\n     * @return id The index of the closest non null bit on the right of x.\\n     * If there is no closest bit, it returns max(uint256)\\n     */\\n    function closestBitRight(uint256 x, uint8 bit) internal pure returns (uint256 id) {\\n        unchecked {\\n            uint256 shift = 255 - bit;\\n            x <<= shift;\\n\\n            // can't overflow as it's non-zero and we shifted it by `_shift`\\n            return (x == 0) ? type(uint256).max : mostSignificantBit(x) - shift;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the index of the closest bit on the left of x that is non null\\n     * @param x The value as a uint256\\n     * @param bit The index of the bit to start searching at\\n     * @return id The index of the closest non null bit on the left of x.\\n     * If there is no closest bit, it returns max(uint256)\\n     */\\n    function closestBitLeft(uint256 x, uint8 bit) internal pure returns (uint256 id) {\\n        unchecked {\\n            x >>= bit;\\n\\n            return (x == 0) ? type(uint256).max : leastSignificantBit(x) + bit;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the index of the most significant bit of x\\n     * This function returns 0 if x is 0\\n     * @param x The value as a uint256\\n     * @return msb The index of the most significant bit of x\\n     */\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 msb) {\\n        assembly {\\n            if gt(x, 0xffffffffffffffffffffffffffffffff) {\\n                x := shr(128, x)\\n                msb := 128\\n            }\\n            if gt(x, 0xffffffffffffffff) {\\n                x := shr(64, x)\\n                msb := add(msb, 64)\\n            }\\n            if gt(x, 0xffffffff) {\\n                x := shr(32, x)\\n                msb := add(msb, 32)\\n            }\\n            if gt(x, 0xffff) {\\n                x := shr(16, x)\\n                msb := add(msb, 16)\\n            }\\n            if gt(x, 0xff) {\\n                x := shr(8, x)\\n                msb := add(msb, 8)\\n            }\\n            if gt(x, 0xf) {\\n                x := shr(4, x)\\n                msb := add(msb, 4)\\n            }\\n            if gt(x, 0x3) {\\n                x := shr(2, x)\\n                msb := add(msb, 2)\\n            }\\n            if gt(x, 0x1) { msb := add(msb, 1) }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the index of the least significant bit of x\\n     * This function returns 255 if x is 0\\n     * @param x The value as a uint256\\n     * @return lsb The index of the least significant bit of x\\n     */\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 lsb) {\\n        assembly {\\n            let sx := shl(128, x)\\n            if iszero(iszero(sx)) {\\n                lsb := 128\\n                x := sx\\n            }\\n            sx := shl(64, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 64)\\n            }\\n            sx := shl(32, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 32)\\n            }\\n            sx := shl(16, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 16)\\n            }\\n            sx := shl(8, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 8)\\n            }\\n            sx := shl(4, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 4)\\n            }\\n            sx := shl(2, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 2)\\n            }\\n            if iszero(iszero(shl(1, x))) { lsb := add(lsb, 1) }\\n\\n            lsb := sub(255, lsb)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/math/Encoded.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Encoded Library\\n * @author Trader Joe\\n * @notice Helper contract used for decoding bytes32 sample\\n */\\nlibrary Encoded {\\n    uint256 internal constant MASK_UINT1 = 0x1;\\n    uint256 internal constant MASK_UINT8 = 0xff;\\n    uint256 internal constant MASK_UINT12 = 0xfff;\\n    uint256 internal constant MASK_UINT14 = 0x3fff;\\n    uint256 internal constant MASK_UINT16 = 0xffff;\\n    uint256 internal constant MASK_UINT20 = 0xfffff;\\n    uint256 internal constant MASK_UINT24 = 0xffffff;\\n    uint256 internal constant MASK_UINT40 = 0xffffffffff;\\n    uint256 internal constant MASK_UINT64 = 0xffffffffffffffff;\\n    uint256 internal constant MASK_UINT128 = 0xffffffffffffffffffffffffffffffff;\\n\\n    /**\\n     * @notice Internal function to set a value in an encoded bytes32 using a mask and offset\\n     * @dev This function can overflow\\n     * @param encoded The previous encoded value\\n     * @param value The value to encode\\n     * @param mask The mask\\n     * @param offset The offset\\n     * @return newEncoded The new encoded value\\n     */\\n    function set(bytes32 encoded, uint256 value, uint256 mask, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes32 newEncoded)\\n    {\\n        assembly {\\n            newEncoded := and(encoded, not(shl(offset, mask)))\\n            newEncoded := or(newEncoded, shl(offset, and(value, mask)))\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to set a bool in an encoded bytes32 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The previous encoded value\\n     * @param boolean The bool to encode\\n     * @param offset The offset\\n     * @return newEncoded The new encoded value\\n     */\\n    function setBool(bytes32 encoded, bool boolean, uint256 offset) internal pure returns (bytes32 newEncoded) {\\n        return set(encoded, boolean ? 1 : 0, MASK_UINT1, offset);\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample using a mask and offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param mask The mask\\n     * @param offset The offset\\n     * @return value The decoded value\\n     */\\n    function decode(bytes32 encoded, uint256 mask, uint256 offset) internal pure returns (uint256 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a bool using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return boolean The decoded value as a bool\\n     */\\n    function decodeBool(bytes32 encoded, uint256 offset) internal pure returns (bool boolean) {\\n        assembly {\\n            boolean := and(shr(offset, encoded), MASK_UINT1)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a uint8 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return value The decoded value\\n     */\\n    function decodeUint8(bytes32 encoded, uint256 offset) internal pure returns (uint8 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), MASK_UINT8)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a uint12 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return value The decoded value as a uint16, since uint12 is not supported\\n     */\\n    function decodeUint12(bytes32 encoded, uint256 offset) internal pure returns (uint16 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), MASK_UINT12)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a uint14 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return value The decoded value as a uint16, since uint14 is not supported\\n     */\\n    function decodeUint14(bytes32 encoded, uint256 offset) internal pure returns (uint16 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), MASK_UINT14)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a uint16 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return value The decoded value\\n     */\\n    function decodeUint16(bytes32 encoded, uint256 offset) internal pure returns (uint16 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), MASK_UINT16)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a uint20 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return value The decoded value as a uint24, since uint20 is not supported\\n     */\\n    function decodeUint20(bytes32 encoded, uint256 offset) internal pure returns (uint24 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), MASK_UINT20)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a uint24 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return value The decoded value\\n     */\\n    function decodeUint24(bytes32 encoded, uint256 offset) internal pure returns (uint24 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), MASK_UINT24)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a uint40 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return value The decoded value\\n     */\\n    function decodeUint40(bytes32 encoded, uint256 offset) internal pure returns (uint40 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), MASK_UINT40)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a uint64 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return value The decoded value\\n     */\\n    function decodeUint64(bytes32 encoded, uint256 offset) internal pure returns (uint64 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), MASK_UINT64)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a uint128 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return value The decoded value\\n     */\\n    function decodeUint128(bytes32 encoded, uint256 offset) internal pure returns (uint128 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), MASK_UINT128)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/math/LiquidityConfigurations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {PackedUint128Math} from \\\"./PackedUint128Math.sol\\\";\\nimport {Encoded} from \\\"./Encoded.sol\\\";\\n\\n/**\\n * @title Liquidity Book Liquidity Configurations Library\\n * @author Trader Joe\\n * @notice This library contains functions to encode and decode the config of a pool and interact with the encoded bytes32.\\n */\\nlibrary LiquidityConfigurations {\\n    using PackedUint128Math for bytes32;\\n    using PackedUint128Math for uint128;\\n    using Encoded for bytes32;\\n\\n    error LiquidityConfigurations__InvalidConfig();\\n\\n    uint256 private constant OFFSET_ID = 0;\\n    uint256 private constant OFFSET_DISTRIBUTION_Y = 24;\\n    uint256 private constant OFFSET_DISTRIBUTION_X = 88;\\n\\n    uint256 private constant PRECISION = 1e18;\\n\\n    /**\\n     * @dev Encode the distributionX, distributionY and id into a single bytes32\\n     * @param distributionX The distribution of the first token\\n     * @param distributionY The distribution of the second token\\n     * @param id The id of the pool\\n     * @return config The encoded config as follows:\\n     * [0 - 24[: id\\n     * [24 - 88[: distributionY\\n     * [88 - 152[: distributionX\\n     * [152 - 256[: empty\\n     */\\n    function encodeParams(uint64 distributionX, uint64 distributionY, uint24 id)\\n        internal\\n        pure\\n        returns (bytes32 config)\\n    {\\n        config = config.set(distributionX, Encoded.MASK_UINT64, OFFSET_DISTRIBUTION_X);\\n        config = config.set(distributionY, Encoded.MASK_UINT64, OFFSET_DISTRIBUTION_Y);\\n        config = config.set(id, Encoded.MASK_UINT24, OFFSET_ID);\\n    }\\n\\n    /**\\n     * @dev Decode the distributionX, distributionY and id from a single bytes32\\n     * @param config The encoded config as follows:\\n     * [0 - 24[: id\\n     * [24 - 88[: distributionY\\n     * [88 - 152[: distributionX\\n     * [152 - 256[: empty\\n     * @return distributionX The distribution of the first token\\n     * @return distributionY The distribution of the second token\\n     * @return id The id of the bin to add the liquidity to\\n     */\\n    function decodeParams(bytes32 config)\\n        internal\\n        pure\\n        returns (uint64 distributionX, uint64 distributionY, uint24 id)\\n    {\\n        distributionX = config.decodeUint64(OFFSET_DISTRIBUTION_X);\\n        distributionY = config.decodeUint64(OFFSET_DISTRIBUTION_Y);\\n        id = config.decodeUint24(OFFSET_ID);\\n\\n        if (uint256(config) > type(uint152).max || distributionX > PRECISION || distributionY > PRECISION) {\\n            revert LiquidityConfigurations__InvalidConfig();\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the amounts and id from a config and amountsIn\\n     * @param config The encoded config as follows:\\n     * [0 - 24[: id\\n     * [24 - 88[: distributionY\\n     * [88 - 152[: distributionX\\n     * [152 - 256[: empty\\n     * @param amountsIn The amounts to distribute as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @return amounts The distributed amounts as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @return id The id of the bin to add the liquidity to\\n     */\\n    function getAmountsAndId(bytes32 config, bytes32 amountsIn) internal pure returns (bytes32, uint24) {\\n        (uint64 distributionX, uint64 distributionY, uint24 id) = decodeParams(config);\\n\\n        (uint128 x1, uint128 x2) = amountsIn.decode();\\n\\n        assembly {\\n            x1 := div(mul(x1, distributionX), PRECISION)\\n            x2 := div(mul(x2, distributionY), PRECISION)\\n        }\\n\\n        return (x1.encode(x2), id);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/math/PackedUint128Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {Constants} from \\\"../Constants.sol\\\";\\n\\n/**\\n * @title Liquidity Book Packed Uint128 Math Library\\n * @author Trader Joe\\n * @notice This library contains functions to encode and decode two uint128 into a single bytes32\\n * and interact with the encoded bytes32.\\n */\\nlibrary PackedUint128Math {\\n    error PackedUint128Math__AddOverflow();\\n    error PackedUint128Math__SubUnderflow();\\n    error PackedUint128Math__MultiplierTooLarge();\\n\\n    uint256 private constant OFFSET = 128;\\n    uint256 private constant MASK_128 = 0xffffffffffffffffffffffffffffffff;\\n    uint256 private constant MASK_128_PLUS_ONE = MASK_128 + 1;\\n\\n    /**\\n     * @dev Encodes two uint128 into a single bytes32\\n     * @param x1 The first uint128\\n     * @param x2 The second uint128\\n     * @return z The encoded bytes32 as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     */\\n    function encode(uint128 x1, uint128 x2) internal pure returns (bytes32 z) {\\n        assembly {\\n            z := or(and(x1, MASK_128), shl(OFFSET, x2))\\n        }\\n    }\\n\\n    /**\\n     * @dev Encodes a uint128 into a single bytes32 as the first uint128\\n     * @param x1 The uint128\\n     * @return z The encoded bytes32 as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: empty\\n     */\\n    function encodeFirst(uint128 x1) internal pure returns (bytes32 z) {\\n        assembly {\\n            z := and(x1, MASK_128)\\n        }\\n    }\\n\\n    /**\\n     * @dev Encodes a uint128 into a single bytes32 as the second uint128\\n     * @param x2 The uint128\\n     * @return z The encoded bytes32 as follows:\\n     * [0 - 128[: empty\\n     * [128 - 256[: x2\\n     */\\n    function encodeSecond(uint128 x2) internal pure returns (bytes32 z) {\\n        assembly {\\n            z := shl(OFFSET, x2)\\n        }\\n    }\\n\\n    /**\\n     * @dev Encodes a uint128 into a single bytes32 as the first or second uint128\\n     * @param x The uint128\\n     * @param first Whether to encode as the first or second uint128\\n     * @return z The encoded bytes32 as follows:\\n     * if first:\\n     * [0 - 128[: x\\n     * [128 - 256[: empty\\n     * else:\\n     * [0 - 128[: empty\\n     * [128 - 256[: x\\n     */\\n    function encode(uint128 x, bool first) internal pure returns (bytes32 z) {\\n        return first ? encodeFirst(x) : encodeSecond(x);\\n    }\\n\\n    /**\\n     * @dev Decodes a bytes32 into two uint128\\n     * @param z The encoded bytes32 as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @return x1 The first uint128\\n     * @return x2 The second uint128\\n     */\\n    function decode(bytes32 z) internal pure returns (uint128 x1, uint128 x2) {\\n        assembly {\\n            x1 := and(z, MASK_128)\\n            x2 := shr(OFFSET, z)\\n        }\\n    }\\n\\n    /**\\n     * @dev Decodes a bytes32 into a uint128 as the first uint128\\n     * @param z The encoded bytes32 as follows:\\n     * [0 - 128[: x\\n     * [128 - 256[: any\\n     * @return x The first uint128\\n     */\\n    function decodeX(bytes32 z) internal pure returns (uint128 x) {\\n        assembly {\\n            x := and(z, MASK_128)\\n        }\\n    }\\n\\n    /**\\n     * @dev Decodes a bytes32 into a uint128 as the second uint128\\n     * @param z The encoded bytes32 as follows:\\n     * [0 - 128[: any\\n     * [128 - 256[: y\\n     * @return y The second uint128\\n     */\\n    function decodeY(bytes32 z) internal pure returns (uint128 y) {\\n        assembly {\\n            y := shr(OFFSET, z)\\n        }\\n    }\\n\\n    /**\\n     * @dev Decodes a bytes32 into a uint128 as the first or second uint128\\n     * @param z The encoded bytes32 as follows:\\n     * if first:\\n     * [0 - 128[: x1\\n     * [128 - 256[: empty\\n     * else:\\n     * [0 - 128[: empty\\n     * [128 - 256[: x2\\n     * @param first Whether to decode as the first or second uint128\\n     * @return x The decoded uint128\\n     */\\n    function decode(bytes32 z, bool first) internal pure returns (uint128 x) {\\n        return first ? decodeX(z) : decodeY(z);\\n    }\\n\\n    /**\\n     * @dev Adds two encoded bytes32, reverting on overflow on any of the uint128\\n     * @param x The first bytes32 encoded as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @param y The second bytes32 encoded as follows:\\n     * [0 - 128[: y1\\n     * [128 - 256[: y2\\n     * @return z The sum of x and y encoded as follows:\\n     * [0 - 128[: x1 + y1\\n     * [128 - 256[: x2 + y2\\n     */\\n    function add(bytes32 x, bytes32 y) internal pure returns (bytes32 z) {\\n        assembly {\\n            z := add(x, y)\\n        }\\n\\n        if (z < x || uint128(uint256(z)) < uint128(uint256(x))) {\\n            revert PackedUint128Math__AddOverflow();\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds an encoded bytes32 and two uint128, reverting on overflow on any of the uint128\\n     * @param x The bytes32 encoded as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @param y1 The first uint128\\n     * @param y2 The second uint128\\n     * @return z The sum of x and y encoded as follows:\\n     * [0 - 128[: x1 + y1\\n     * [128 - 256[: x2 + y2\\n     */\\n    function add(bytes32 x, uint128 y1, uint128 y2) internal pure returns (bytes32) {\\n        return add(x, encode(y1, y2));\\n    }\\n\\n    /**\\n     * @dev Subtracts two encoded bytes32, reverting on underflow on any of the uint128\\n     * @param x The first bytes32 encoded as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @param y The second bytes32 encoded as follows:\\n     * [0 - 128[: y1\\n     * [128 - 256[: y2\\n     * @return z The difference of x and y encoded as follows:\\n     * [0 - 128[: x1 - y1\\n     * [128 - 256[: x2 - y2\\n     */\\n    function sub(bytes32 x, bytes32 y) internal pure returns (bytes32 z) {\\n        assembly {\\n            z := sub(x, y)\\n        }\\n\\n        if (z > x || uint128(uint256(z)) > uint128(uint256(x))) {\\n            revert PackedUint128Math__SubUnderflow();\\n        }\\n    }\\n\\n    /**\\n     * @dev Subtracts an encoded bytes32 and two uint128, reverting on underflow on any of the uint128\\n     * @param x The bytes32 encoded as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @param y1 The first uint128\\n     * @param y2 The second uint128\\n     * @return z The difference of x and y encoded as follows:\\n     * [0 - 128[: x1 - y1\\n     * [128 - 256[: x2 - y2\\n     */\\n    function sub(bytes32 x, uint128 y1, uint128 y2) internal pure returns (bytes32) {\\n        return sub(x, encode(y1, y2));\\n    }\\n\\n    /**\\n     * @dev Returns whether any of the uint128 of x is strictly greater than the corresponding uint128 of y\\n     * @param x The first bytes32 encoded as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @param y The second bytes32 encoded as follows:\\n     * [0 - 128[: y1\\n     * [128 - 256[: y2\\n     * @return x1 < y1 || x2 < y2\\n     */\\n    function lt(bytes32 x, bytes32 y) internal pure returns (bool) {\\n        (uint128 x1, uint128 x2) = decode(x);\\n        (uint128 y1, uint128 y2) = decode(y);\\n\\n        return x1 < y1 || x2 < y2;\\n    }\\n\\n    /**\\n     * @dev Returns whether any of the uint128 of x is strictly greater than the corresponding uint128 of y\\n     * @param x The first bytes32 encoded as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @param y The second bytes32 encoded as follows:\\n     * [0 - 128[: y1\\n     * [128 - 256[: y2\\n     * @return x1 < y1 || x2 < y2\\n     */\\n    function gt(bytes32 x, bytes32 y) internal pure returns (bool) {\\n        (uint128 x1, uint128 x2) = decode(x);\\n        (uint128 y1, uint128 y2) = decode(y);\\n\\n        return x1 > y1 || x2 > y2;\\n    }\\n\\n    /**\\n     * @dev Multiplies an encoded bytes32 by a uint128 then divides the result by 10_000, rounding down\\n     * The result can't overflow as the multiplier needs to be smaller or equal to 10_000\\n     * @param x The bytes32 encoded as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @param multiplier The uint128 to multiply by (must be smaller or equal to 10_000)\\n     * @return z The product of x and multiplier encoded as follows:\\n     * [0 - 128[: floor((x1 * multiplier) / 10_000)\\n     * [128 - 256[: floor((x2 * multiplier) / 10_000)\\n     */\\n    function scalarMulDivBasisPointRoundDown(bytes32 x, uint128 multiplier) internal pure returns (bytes32 z) {\\n        if (multiplier == 0) return 0;\\n\\n        uint256 BASIS_POINT_MAX = Constants.BASIS_POINT_MAX;\\n        if (multiplier > BASIS_POINT_MAX) revert PackedUint128Math__MultiplierTooLarge();\\n\\n        (uint128 x1, uint128 x2) = decode(x);\\n\\n        assembly {\\n            x1 := div(mul(x1, multiplier), BASIS_POINT_MAX)\\n            x2 := div(mul(x2, multiplier), BASIS_POINT_MAX)\\n        }\\n\\n        return encode(x1, x2);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Safe Cast Library\\n * @author Trader Joe\\n * @notice This library contains functions to safely cast uint256 to different uint types.\\n */\\nlibrary SafeCast {\\n    error SafeCast__Exceeds248Bits();\\n    error SafeCast__Exceeds240Bits();\\n    error SafeCast__Exceeds232Bits();\\n    error SafeCast__Exceeds224Bits();\\n    error SafeCast__Exceeds216Bits();\\n    error SafeCast__Exceeds208Bits();\\n    error SafeCast__Exceeds200Bits();\\n    error SafeCast__Exceeds192Bits();\\n    error SafeCast__Exceeds184Bits();\\n    error SafeCast__Exceeds176Bits();\\n    error SafeCast__Exceeds168Bits();\\n    error SafeCast__Exceeds160Bits();\\n    error SafeCast__Exceeds152Bits();\\n    error SafeCast__Exceeds144Bits();\\n    error SafeCast__Exceeds136Bits();\\n    error SafeCast__Exceeds128Bits();\\n    error SafeCast__Exceeds120Bits();\\n    error SafeCast__Exceeds112Bits();\\n    error SafeCast__Exceeds104Bits();\\n    error SafeCast__Exceeds96Bits();\\n    error SafeCast__Exceeds88Bits();\\n    error SafeCast__Exceeds80Bits();\\n    error SafeCast__Exceeds72Bits();\\n    error SafeCast__Exceeds64Bits();\\n    error SafeCast__Exceeds56Bits();\\n    error SafeCast__Exceeds48Bits();\\n    error SafeCast__Exceeds40Bits();\\n    error SafeCast__Exceeds32Bits();\\n    error SafeCast__Exceeds24Bits();\\n    error SafeCast__Exceeds16Bits();\\n    error SafeCast__Exceeds8Bits();\\n\\n    /**\\n     * @dev Returns x on uint248 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint248\\n     */\\n    function safe248(uint256 x) internal pure returns (uint248 y) {\\n        if ((y = uint248(x)) != x) revert SafeCast__Exceeds248Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint240 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint240\\n     */\\n    function safe240(uint256 x) internal pure returns (uint240 y) {\\n        if ((y = uint240(x)) != x) revert SafeCast__Exceeds240Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint232 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint232\\n     */\\n    function safe232(uint256 x) internal pure returns (uint232 y) {\\n        if ((y = uint232(x)) != x) revert SafeCast__Exceeds232Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint224 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint224\\n     */\\n    function safe224(uint256 x) internal pure returns (uint224 y) {\\n        if ((y = uint224(x)) != x) revert SafeCast__Exceeds224Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint216 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint216\\n     */\\n    function safe216(uint256 x) internal pure returns (uint216 y) {\\n        if ((y = uint216(x)) != x) revert SafeCast__Exceeds216Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint208 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint208\\n     */\\n    function safe208(uint256 x) internal pure returns (uint208 y) {\\n        if ((y = uint208(x)) != x) revert SafeCast__Exceeds208Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint200 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint200\\n     */\\n    function safe200(uint256 x) internal pure returns (uint200 y) {\\n        if ((y = uint200(x)) != x) revert SafeCast__Exceeds200Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint192 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint192\\n     */\\n    function safe192(uint256 x) internal pure returns (uint192 y) {\\n        if ((y = uint192(x)) != x) revert SafeCast__Exceeds192Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint184 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint184\\n     */\\n    function safe184(uint256 x) internal pure returns (uint184 y) {\\n        if ((y = uint184(x)) != x) revert SafeCast__Exceeds184Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint176 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint176\\n     */\\n    function safe176(uint256 x) internal pure returns (uint176 y) {\\n        if ((y = uint176(x)) != x) revert SafeCast__Exceeds176Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint168 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint168\\n     */\\n    function safe168(uint256 x) internal pure returns (uint168 y) {\\n        if ((y = uint168(x)) != x) revert SafeCast__Exceeds168Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint160 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint160\\n     */\\n    function safe160(uint256 x) internal pure returns (uint160 y) {\\n        if ((y = uint160(x)) != x) revert SafeCast__Exceeds160Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint152 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint152\\n     */\\n    function safe152(uint256 x) internal pure returns (uint152 y) {\\n        if ((y = uint152(x)) != x) revert SafeCast__Exceeds152Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint144 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint144\\n     */\\n    function safe144(uint256 x) internal pure returns (uint144 y) {\\n        if ((y = uint144(x)) != x) revert SafeCast__Exceeds144Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint136 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint136\\n     */\\n    function safe136(uint256 x) internal pure returns (uint136 y) {\\n        if ((y = uint136(x)) != x) revert SafeCast__Exceeds136Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint128 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint128\\n     */\\n    function safe128(uint256 x) internal pure returns (uint128 y) {\\n        if ((y = uint128(x)) != x) revert SafeCast__Exceeds128Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint120 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint120\\n     */\\n    function safe120(uint256 x) internal pure returns (uint120 y) {\\n        if ((y = uint120(x)) != x) revert SafeCast__Exceeds120Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint112 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint112\\n     */\\n    function safe112(uint256 x) internal pure returns (uint112 y) {\\n        if ((y = uint112(x)) != x) revert SafeCast__Exceeds112Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint104 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint104\\n     */\\n    function safe104(uint256 x) internal pure returns (uint104 y) {\\n        if ((y = uint104(x)) != x) revert SafeCast__Exceeds104Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint96 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint96\\n     */\\n    function safe96(uint256 x) internal pure returns (uint96 y) {\\n        if ((y = uint96(x)) != x) revert SafeCast__Exceeds96Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint88 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint88\\n     */\\n    function safe88(uint256 x) internal pure returns (uint88 y) {\\n        if ((y = uint88(x)) != x) revert SafeCast__Exceeds88Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint80 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint80\\n     */\\n    function safe80(uint256 x) internal pure returns (uint80 y) {\\n        if ((y = uint80(x)) != x) revert SafeCast__Exceeds80Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint72 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint72\\n     */\\n    function safe72(uint256 x) internal pure returns (uint72 y) {\\n        if ((y = uint72(x)) != x) revert SafeCast__Exceeds72Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint64 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint64\\n     */\\n    function safe64(uint256 x) internal pure returns (uint64 y) {\\n        if ((y = uint64(x)) != x) revert SafeCast__Exceeds64Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint56 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint56\\n     */\\n    function safe56(uint256 x) internal pure returns (uint56 y) {\\n        if ((y = uint56(x)) != x) revert SafeCast__Exceeds56Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint48 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint48\\n     */\\n    function safe48(uint256 x) internal pure returns (uint48 y) {\\n        if ((y = uint48(x)) != x) revert SafeCast__Exceeds48Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint40 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint40\\n     */\\n    function safe40(uint256 x) internal pure returns (uint40 y) {\\n        if ((y = uint40(x)) != x) revert SafeCast__Exceeds40Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint32 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint32\\n     */\\n    function safe32(uint256 x) internal pure returns (uint32 y) {\\n        if ((y = uint32(x)) != x) revert SafeCast__Exceeds32Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint24 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint24\\n     */\\n    function safe24(uint256 x) internal pure returns (uint24 y) {\\n        if ((y = uint24(x)) != x) revert SafeCast__Exceeds24Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint16 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint16\\n     */\\n    function safe16(uint256 x) internal pure returns (uint16 y) {\\n        if ((y = uint16(x)) != x) revert SafeCast__Exceeds16Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint8 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint8\\n     */\\n    function safe8(uint256 x) internal pure returns (uint8 y) {\\n        if ((y = uint8(x)) != x) revert SafeCast__Exceeds8Bits();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/math/Uint128x128Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {BitMath} from \\\"./BitMath.sol\\\";\\n\\n/**\\n * @title Liquidity Book Uint128x128 Math Library\\n * @author Trader Joe\\n * @notice Helper contract used for power and log calculations\\n */\\nlibrary Uint128x128Math {\\n    using BitMath for uint256;\\n\\n    error Uint128x128Math__LogUnderflow();\\n    error Uint128x128Math__PowUnderflow(uint256 x, int256 y);\\n\\n    uint256 constant LOG_SCALE_OFFSET = 127;\\n    uint256 constant LOG_SCALE = 1 << LOG_SCALE_OFFSET;\\n    uint256 constant LOG_SCALE_SQUARED = LOG_SCALE * LOG_SCALE;\\n\\n    /**\\n     * @notice Calculates the binary logarithm of x.\\n     * @dev Based on the iterative approximation algorithm.\\n     * https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n     * Requirements:\\n     * - x must be greater than zero.\\n     * Caveats:\\n     * - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation\\n     * Also because x is converted to an unsigned 129.127-binary fixed-point number during the operation to optimize the multiplication\\n     * @param x The unsigned 128.128-binary fixed-point number for which to calculate the binary logarithm.\\n     * @return result The binary logarithm as a signed 128.128-binary fixed-point number.\\n     */\\n    function log2(uint256 x) internal pure returns (int256 result) {\\n        // Convert x to a unsigned 129.127-binary fixed-point number to optimize the multiplication.\\n        // If we use an offset of 128 bits, y would need 129 bits and y**2 would would overflow and we would have to\\n        // use mulDiv, by reducing x to 129.127-binary fixed-point number we assert that y will use 128 bits, and we\\n        // can use the regular multiplication\\n\\n        if (x == 1) return -128;\\n        if (x == 0) revert Uint128x128Math__LogUnderflow();\\n\\n        x >>= 1;\\n\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= LOG_SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas\\n                x = LOG_SCALE_SQUARED / x;\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = (x >> LOG_SCALE_OFFSET).mostSignificantBit();\\n\\n            // The integer part of the logarithm as a signed 129.127-binary fixed-point number. The operation can't overflow\\n            // because n is maximum 255, LOG_SCALE_OFFSET is 127 bits and sign is either 1 or -1.\\n            result = int256(n) << LOG_SCALE_OFFSET;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y != LOG_SCALE) {\\n                // Calculate the fractional part via the iterative approximation.\\n                // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n                for (int256 delta = int256(1 << (LOG_SCALE_OFFSET - 1)); delta > 0; delta >>= 1) {\\n                    y = (y * y) >> LOG_SCALE_OFFSET;\\n\\n                    // Is y^2 > 2 and so in the range [2,4)?\\n                    if (y >= 1 << (LOG_SCALE_OFFSET + 1)) {\\n                        // Add the 2^(-m) factor to the logarithm.\\n                        result += delta;\\n\\n                        // Corresponds to z/2 on Wikipedia.\\n                        y >>= 1;\\n                    }\\n                }\\n            }\\n            // Convert x back to unsigned 128.128-binary fixed-point number\\n            result = (result * sign) << 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the value of x^y. It calculates `1 / x^abs(y)` if x is bigger than 2^128.\\n     * At the end of the operations, we invert the result if needed.\\n     * @param x The unsigned 128.128-binary fixed-point number for which to calculate the power\\n     * @param y A relative number without any decimals, needs to be between ]2^21; 2^21[\\n     */\\n    function pow(uint256 x, int256 y) internal pure returns (uint256 result) {\\n        bool invert;\\n        uint256 absY;\\n\\n        if (y == 0) return Constants.SCALE;\\n\\n        assembly {\\n            absY := y\\n            if slt(absY, 0) {\\n                absY := sub(0, absY)\\n                invert := iszero(invert)\\n            }\\n        }\\n\\n        if (absY < 0x100000) {\\n            result = Constants.SCALE;\\n            assembly {\\n                let squared := x\\n                if gt(x, 0xffffffffffffffffffffffffffffffff) {\\n                    squared := div(not(0), squared)\\n                    invert := iszero(invert)\\n                }\\n\\n                if and(absY, 0x1) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x2) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x4) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x8) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x10) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x20) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x40) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x80) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x100) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x200) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x400) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x800) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x1000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x2000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x4000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x8000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x10000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x20000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x40000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x80000) { result := shr(128, mul(result, squared)) }\\n            }\\n        }\\n\\n        // revert if y is too big or if x^y underflowed\\n        if (result == 0) revert Uint128x128Math__PowUnderflow(x, y);\\n\\n        return invert ? type(uint256).max / result : result;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/math/Uint256x256Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Uint256x256 Math Library\\n * @author Trader Joe\\n * @notice Helper contract used for full precision calculations\\n */\\nlibrary Uint256x256Math {\\n    error Uint256x256Math__MulShiftOverflow();\\n    error Uint256x256Math__MulDivOverflow();\\n\\n    /**\\n     * @notice Calculates floor(x*y/denominator) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The denominator cannot be zero\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function mulDivRoundDown(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        (uint256 prod0, uint256 prod1) = _getMulProds(x, y);\\n\\n        return _getEndOfDivRoundDown(x, y, denominator, prod0, prod1);\\n    }\\n\\n    /**\\n     * @notice Calculates ceil(x*y/denominator) with full precision\\n     * The result will be rounded up\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The denominator cannot be zero\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function mulDivRoundUp(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        result = mulDivRoundDown(x, y, denominator);\\n        if (mulmod(x, y, denominator) != 0) result += 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / 2**offset) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param offset The offset as an uint256, can't be greater than 256\\n     * @return result The result as an uint256\\n     */\\n    function mulShiftRoundDown(uint256 x, uint256 y, uint8 offset) internal pure returns (uint256 result) {\\n        (uint256 prod0, uint256 prod1) = _getMulProds(x, y);\\n\\n        if (prod0 != 0) result = prod0 >> offset;\\n        if (prod1 != 0) {\\n            // Make sure the result is less than 2^256.\\n            if (prod1 >= 1 << offset) revert Uint256x256Math__MulShiftOverflow();\\n\\n            unchecked {\\n                result += prod1 << (256 - offset);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / 2**offset) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param offset The offset as an uint256, can't be greater than 256\\n     * @return result The result as an uint256\\n     */\\n    function mulShiftRoundUp(uint256 x, uint256 y, uint8 offset) internal pure returns (uint256 result) {\\n        result = mulShiftRoundDown(x, y, offset);\\n        if (mulmod(x, y, 1 << offset) != 0) result += 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x << offset / y) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param offset The number of bit to shift x as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function shiftDivRoundDown(uint256 x, uint8 offset, uint256 denominator) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n\\n        prod0 = x << offset; // Least significant 256 bits of the product\\n        unchecked {\\n            prod1 = x >> (256 - offset); // Most significant 256 bits of the product\\n        }\\n\\n        return _getEndOfDivRoundDown(x, 1 << offset, denominator, prod0, prod1);\\n    }\\n\\n    /**\\n     * @notice Calculates ceil(x << offset / y) with full precision\\n     * The result will be rounded up\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param offset The number of bit to shift x as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function shiftDivRoundUp(uint256 x, uint8 offset, uint256 denominator) internal pure returns (uint256 result) {\\n        result = shiftDivRoundDown(x, offset, denominator);\\n        if (mulmod(x, 1 << offset, denominator) != 0) result += 1;\\n    }\\n\\n    /**\\n     * @notice Helper function to return the result of `x * y` as 2 uint256\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @return prod0 The least significant 256 bits of the product\\n     * @return prod1 The most significant 256 bits of the product\\n     */\\n    function _getMulProds(uint256 x, uint256 y) private pure returns (uint256 prod0, uint256 prod1) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to return the result of `x * y / denominator` with full precision\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @param prod0 The least significant 256 bits of the product\\n     * @param prod1 The most significant 256 bits of the product\\n     * @return result The result as an uint256\\n     */\\n    function _getEndOfDivRoundDown(uint256 x, uint256 y, uint256 denominator, uint256 prod0, uint256 prod1)\\n        private\\n        pure\\n        returns (uint256 result)\\n    {\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n        } else {\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0\\n            if (prod1 >= denominator) revert Uint256x256Math__MulDivOverflow();\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1\\n            // See https://cs.stackexchange.com/q/138556/92363\\n            unchecked {\\n                // Does not overflow because the denominator cannot be zero at this stage in the function\\n                uint256 lpotdod = denominator & (~denominator + 1);\\n                assembly {\\n                    // Divide denominator by lpotdod.\\n                    denominator := div(denominator, lpotdod)\\n\\n                    // Divide [prod1 prod0] by lpotdod.\\n                    prod0 := div(prod0, lpotdod)\\n\\n                    // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one\\n                    lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n                }\\n\\n                // Shift in bits from prod1 into prod0\\n                prod0 |= prod1 * lpotdod;\\n\\n                // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n                // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n                // four bits. That is, denominator * inv = 1 mod 2^4\\n                uint256 inverse = (3 * denominator) ^ 2;\\n\\n                // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n                // in modular arithmetic, doubling the correct bits in each step\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n                // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n                // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n                // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n                // is no longer required.\\n                result = prod0 * inverse;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ILBFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"contract IJoeFactory\",\"name\":\"factoryV1\",\"type\":\"address\"},{\"internalType\":\"contract ILBLegacyFactory\",\"name\":\"legacyFactory\",\"type\":\"address\"},{\"internalType\":\"contract ILBLegacyRouter\",\"name\":\"legacyRouter\",\"type\":\"address\"},{\"internalType\":\"contract IWNATIVE\",\"name\":\"wnative\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressHelper__CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressHelper__NonContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoeLibrary__InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JoeLibrary__InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountSlippage\",\"type\":\"uint256\"}],\"name\":\"LBRouter__AmountSlippageBPTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountXMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountYMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"}],\"name\":\"LBRouter__AmountSlippageCaught\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LBRouter__BinReserveOverflows\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LBRouter__BrokenSwapSafetyCheck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"}],\"name\":\"LBRouter__DeadlineExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LBRouter__FailedToSendNATIVE\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idSlippage\",\"type\":\"uint256\"}],\"name\":\"LBRouter__IdDesiredOverflows\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"id\",\"type\":\"int256\"}],\"name\":\"LBRouter__IdOverflows\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"activeIdDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeId\",\"type\":\"uint256\"}],\"name\":\"LBRouter__IdSlippageCaught\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"LBRouter__InsufficientAmountOut\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrongToken\",\"type\":\"address\"}],\"name\":\"LBRouter__InvalidTokenPath\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"LBRouter__InvalidVersion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LBRouter__LengthsMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"LBRouter__MaxAmountInExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LBRouter__NotFactoryOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"binStep\",\"type\":\"uint256\"}],\"name\":\"LBRouter__PairNotCreated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LBRouter__SenderIsNotWNATIVE\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LBRouter__SwapOverflows\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"name\":\"LBRouter__TooMuchTokensIn\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"name\":\"LBRouter__WrongAmounts\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"LBRouter__WrongNativeLiquidityParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LBRouter__WrongTokenOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenHelper__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"binStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountXMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountYMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeIdDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idSlippage\",\"type\":\"uint256\"},{\"internalType\":\"int256[]\",\"name\":\"deltaIds\",\"type\":\"int256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"distributionX\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"distributionY\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ILBRouter.LiquidityParameters\",\"name\":\"liquidityParameters\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountXAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountYAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountXLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountYLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"depositIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"liquidityMinted\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"binStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountXMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountYMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeIdDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idSlippage\",\"type\":\"uint256\"},{\"internalType\":\"int256[]\",\"name\":\"deltaIds\",\"type\":\"int256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"distributionX\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"distributionY\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ILBRouter.LiquidityParameters\",\"name\":\"liquidityParameters\",\"type\":\"tuple\"}],\"name\":\"addLiquidityNATIVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountXAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountYAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountXLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountYLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"depositIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"liquidityMinted\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"activeId\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"binStep\",\"type\":\"uint16\"}],\"name\":\"createLBPair\",\"outputs\":[{\"internalType\":\"contract ILBPair\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactory\",\"outputs\":[{\"internalType\":\"contract ILBFactory\",\"name\":\"lbFactory\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILBPair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"getIdFromPrice\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLegacyFactory\",\"outputs\":[{\"internalType\":\"contract ILBLegacyFactory\",\"name\":\"legacyLBfactory\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLegacyRouter\",\"outputs\":[{\"internalType\":\"contract ILBLegacyRouter\",\"name\":\"legacyRouter\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILBPair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"id\",\"type\":\"uint24\"}],\"name\":\"getPriceFromId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILBPair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amountOut\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"swapForY\",\"type\":\"bool\"}],\"name\":\"getSwapIn\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amountIn\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountOutLeft\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILBPair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amountIn\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"swapForY\",\"type\":\"bool\"}],\"name\":\"getSwapOut\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amountInLeft\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountOut\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getV1Factory\",\"outputs\":[{\"internalType\":\"contract IJoeFactory\",\"name\":\"factoryV1\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWNATIVE\",\"outputs\":[{\"internalType\":\"contract IWNATIVE\",\"name\":\"wnative\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"binStep\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amountXMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountYMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"binStep\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountNATIVEMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityNATIVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountNATIVE\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"pairBinSteps\",\"type\":\"uint256[]\"},{\"internalType\":\"enum ILBRouter.Version[]\",\"name\":\"versions\",\"type\":\"uint8[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"}],\"internalType\":\"struct ILBRouter.Path\",\"name\":\"path\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactNATIVEForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"pairBinSteps\",\"type\":\"uint256[]\"},{\"internalType\":\"enum ILBRouter.Version[]\",\"name\":\"versions\",\"type\":\"uint8[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"}],\"internalType\":\"struct ILBRouter.Path\",\"name\":\"path\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactNATIVEForTokensSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinNATIVE\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"pairBinSteps\",\"type\":\"uint256[]\"},{\"internalType\":\"enum ILBRouter.Version[]\",\"name\":\"versions\",\"type\":\"uint8[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"}],\"internalType\":\"struct ILBRouter.Path\",\"name\":\"path\",\"type\":\"tuple\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForNATIVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinNATIVE\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"pairBinSteps\",\"type\":\"uint256[]\"},{\"internalType\":\"enum ILBRouter.Version[]\",\"name\":\"versions\",\"type\":\"uint8[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"}],\"internalType\":\"struct ILBRouter.Path\",\"name\":\"path\",\"type\":\"tuple\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForNATIVESupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"pairBinSteps\",\"type\":\"uint256[]\"},{\"internalType\":\"enum ILBRouter.Version[]\",\"name\":\"versions\",\"type\":\"uint8[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"}],\"internalType\":\"struct ILBRouter.Path\",\"name\":\"path\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"pairBinSteps\",\"type\":\"uint256[]\"},{\"internalType\":\"enum ILBRouter.Version[]\",\"name\":\"versions\",\"type\":\"uint8[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"}],\"internalType\":\"struct ILBRouter.Path\",\"name\":\"path\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"pairBinSteps\",\"type\":\"uint256[]\"},{\"internalType\":\"enum ILBRouter.Version[]\",\"name\":\"versions\",\"type\":\"uint8[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"}],\"internalType\":\"struct ILBRouter.Path\",\"name\":\"path\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapNATIVEForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountNATIVEOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"pairBinSteps\",\"type\":\"uint256[]\"},{\"internalType\":\"enum ILBRouter.Version[]\",\"name\":\"versions\",\"type\":\"uint8[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"}],\"internalType\":\"struct ILBRouter.Path\",\"name\":\"path\",\"type\":\"tuple\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactNATIVE\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"pairBinSteps\",\"type\":\"uint256[]\"},{\"internalType\":\"enum ILBRouter.Version[]\",\"name\":\"versions\",\"type\":\"uint8[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"}],\"internalType\":\"struct ILBRouter.Path\",\"name\":\"path\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILBToken\",\"name\":\"lbToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"sweepLBToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LBRouter", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "0000000000000000000000008e42f2f4101563bf679975178e880fd87d3efd4e0000000000000000000000004f8bdc85e3eec5b9de67097c3f59b6db025d998600000000000000000000000043646a8e839b2f2766392c1bf8f60f6e587b6960000000000000000000000000b66a2704a0dabc1660941628be987b4418f7a9e8000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}