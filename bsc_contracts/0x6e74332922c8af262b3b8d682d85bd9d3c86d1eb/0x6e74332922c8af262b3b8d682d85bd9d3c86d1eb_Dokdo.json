{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\n                                                                  dddddddd                 \r\nDDDDDDDDDDDDD                         kkkkkkkk                    d::::::d                 \r\nD::::::::::::DDD                      k::::::k                    d::::::d                 \r\nD:::::::::::::::DD                    k::::::k                    d::::::d                 \r\nDDD:::::DDDDD:::::D                   k::::::k                    d:::::d                  \r\n  D:::::D    D:::::D    ooooooooooo    k:::::k    kkkkkkk ddddddddd:::::d    ooooooooooo   \r\n  D:::::D     D:::::D oo:::::::::::oo  k:::::k   k:::::kdd::::::::::::::d  oo:::::::::::oo \r\n  D:::::D     D:::::Do:::::::::::::::o k:::::k  k:::::kd::::::::::::::::d o:::::::::::::::o\r\n  D:::::D     D:::::Do:::::ooooo:::::o k:::::k k:::::kd:::::::ddddd:::::d o:::::ooooo:::::o\r\n  D:::::D     D:::::Do::::o     o::::o k::::::k:::::k d::::::d    d:::::d o::::o     o::::o\r\n  D:::::D     D:::::Do::::o     o::::o k:::::::::::k  d:::::d     d:::::d o::::o     o::::o\r\n  D:::::D     D:::::Do::::o     o::::o k:::::::::::k  d:::::d     d:::::d o::::o     o::::o\r\n  D:::::D    D:::::D o::::o     o::::o k::::::k:::::k d:::::d     d:::::d o::::o     o::::o\r\nDDD:::::DDDDD:::::D  o:::::ooooo:::::ok::::::k k:::::kd::::::ddddd::::::ddo:::::ooooo:::::o\r\nD:::::::::::::::DD   o:::::::::::::::ok::::::k  k:::::kd:::::::::::::::::do:::::::::::::::o\r\nD::::::::::::DDD      oo:::::::::::oo k::::::k   k:::::kd:::::::::ddd::::d oo:::::::::::oo \r\nDDDDDDDDDDDDD           ooooooooooo   kkkkkkkk    kkkkkkkddddddddd   ddddd   ooooooooooo   \r\n                                                                                           \r\nDokdo Team - 2022\r\nDokdo Token\r\nhttps://dokdo.sh/\r\n\r\n*/\r\n\r\npragma solidity ^0.8.8;\r\n\r\n/**\r\n * Standard SafeMath, stripped down to just add/sub/mul/div\r\n */\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * BEP20 standard interface.\r\n */\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * Allows for contract ownership along with multi-address authorization\r\n */\r\nabstract contract DokdoAuth {\r\n    address owner;\r\n    mapping (address => bool) private authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    /**\r\n     * Authorize address. Any authorized address\r\n     */\r\n    function authorize(address adr) public authorized {\r\n        authorizations[adr] = true;\r\n        emit Authorized(adr);\r\n    }\r\n\r\n    /**\r\n     * Remove address' authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n        emit Unauthorized(adr);\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner.\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n    event Authorized(address adr);\r\n    event Unauthorized(address adr);\r\n}\r\n\r\n/**\r\n * Pause and unpause certain functions using modifiers\r\n */\r\nabstract contract DokdoPausable is DokdoAuth {\r\n    bool public paused;\r\n\r\n    constructor (bool _paused) { paused = _paused; }\r\n\r\n    modifier whenPaused() {\r\n        require(paused || isAuthorized(msg.sender), \"!PAUSED\"); _;\r\n    }\r\n\r\n    modifier notPaused() {\r\n        require(!paused || isAuthorized(msg.sender), \"PAUSED\"); _;\r\n    }\r\n\r\n    function pause() external notPaused authorized {\r\n        paused = true;\r\n        emit Paused();\r\n    }\r\n\r\n    function unpause() public whenPaused authorized {\r\n        _unpause();\r\n    }\r\n\r\n    function _unpause() internal {\r\n        paused = false;\r\n        emit Unpaused();\r\n    }\r\n\r\n    event Paused();\r\n    event Unpaused();\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract Dokdo is IBEP20, DokdoAuth, DokdoPausable {\r\n    using SafeMath for uint256;\r\n\r\n    string constant _name = \"Dokdo\";\r\n    string constant _symbol = \"DKD\";\r\n    uint8 constant _decimals = 18;\r\n\r\n    uint256 private _totalSupply = 50000000 * (10 ** _decimals);\r\n    uint256 public _maxTxAmount = 50000 * (10 ** _decimals);\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) public hasFee;\r\n    mapping (address => bool) public isExempt;\r\n\r\n    uint256 public autoLiquidityFee = 2;\r\n    uint256 public stakingFee = 3;\r\n    uint256 public feeDenominator = 100;\r\n\r\n    address public autoLiquidityReceiver;\r\n    address public stakingFeeReceiver;\r\n\r\n    IDEXRouter public router;\r\n    address private WBNB;\r\n    address public liquifyPair;\r\n\r\n    uint256 launchedAt;\r\n\r\n    bool public liquifyEnabled = true;\r\n    uint256 public liquifyAmount = 250 * (10 ** _decimals);\r\n    bool private inLiquify;\r\n    modifier liquifying() { inLiquify = true; _; inLiquify = false; }\r\n\r\n    constructor (address _owner, address _router) DokdoAuth(_owner) DokdoPausable(true) {\r\n        router = IDEXRouter(_router);\r\n        WBNB = router.WETH();\r\n        liquifyPair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n\r\n        _allowances[address(this)][_router] = type(uint256).max;\r\n        hasFee[liquifyPair] = true;\r\n        isExempt[_owner] = true;\r\n        isExempt[address(this)] = true;\r\n\r\n        _balances[_owner] = _totalSupply;\r\n        emit Transfer(address(0), _owner, _totalSupply);\r\n\r\n        payable(_owner).transfer(address(this).balance);\r\n    }\r\n\r\n    receive() external payable {\r\n        assert(msg.sender == WBNB || msg.sender == address(router));\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) external view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        checkTxLimit(sender, recipient, amount);\r\n\r\n        if(sender != msg.sender && _allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        if(launchedAt == 0 && recipient == liquifyPair){ launch(); }\r\n\r\n        bool shouldLiquify = shouldAutoLiquify() && !(isExempt[sender] || isExempt[recipient]);\r\n        if(shouldLiquify){ autoLiquify(); }\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, amount) : amount;\r\n\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function checkTxLimit(address sender, address recipient, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isExempt[sender] || isExempt[recipient], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function takeFee(address sender, uint256 amount) internal returns (uint256) {\r\n        uint256 liquidityFeeAmount = amount.mul(getLiquidityFee()).div(feeDenominator);\r\n        uint256 stakingFeeAmount = amount.mul(stakingFee).div(feeDenominator);\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(liquidityFeeAmount);\r\n        _balances[stakingFeeReceiver] = _balances[stakingFeeReceiver].add(stakingFeeAmount);\r\n\r\n        emit Transfer(sender, address(this), liquidityFeeAmount);\r\n        emit Transfer(sender, stakingFeeReceiver, stakingFeeAmount);\r\n\r\n        return amount.sub(liquidityFeeAmount).sub(stakingFeeAmount);\r\n    }\r\n\r\n    function getLiquidityFee() internal view returns (uint256) {\r\n        if(launchedAt + 1 >= block.number){ return feeDenominator.sub(stakingFee).sub(1); }\r\n        return autoLiquidityFee;\r\n    }\r\n\r\n    function shouldAutoLiquify() internal view returns (bool) {\r\n        return msg.sender != liquifyPair\r\n        && !inLiquify\r\n        && liquifyEnabled\r\n        && _balances[address(this)] >= liquifyAmount;\r\n    }\r\n\r\n    function autoLiquify() internal liquifying {\r\n        uint256 amountToSwap = liquifyAmount.div(2);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        try router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        ) {} catch {}\r\n\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n\r\n        try router.addLiquidityETH{value: amountBNB}(\r\n            address(this),\r\n            amountToSwap,\r\n            0,\r\n            0,\r\n            autoLiquidityReceiver,\r\n            block.timestamp\r\n        ) {\r\n            emit AutoLiquify(amountBNB, amountToSwap);\r\n        } catch {}\r\n    }\r\n\r\n    function launch() internal {\r\n        launchedAt = block.number;\r\n        _unpause();\r\n    }\r\n\r\n    function setTxLimit(uint256 amount) external authorized {\r\n        require(amount >= _totalSupply / 1000, \"Limit too low\");\r\n        _maxTxAmount = amount;\r\n    }\r\n\r\n    function setLiquify(bool enabled, uint256 amount) external authorized {\r\n        require(amount <= 1000 * (10 ** _decimals));\r\n        liquifyEnabled = enabled;\r\n        liquifyAmount = amount;\r\n    }\r\n\r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        if(isExempt[sender] || isExempt[recipient] || inLiquify){ return false; }\r\n        return hasFee[sender] || hasFee[recipient];\r\n    }\r\n\r\n    function setHasFee(address adr, bool state) external authorized {\r\n        require(!isExempt[adr], \"Is Exempt\");\r\n        hasFee[adr] = state;\r\n    }\r\n\r\n    function setIsExempt(address adr, bool state) external authorized {\r\n        require(!hasFee[adr], \"Has Fee\");\r\n        isExempt[adr] = state;\r\n    }\r\n\r\n    function setFees(uint256 _liquidityFee, uint256 _stakingFee, uint256 _feeDenominator) external authorized {\r\n        autoLiquidityFee = _liquidityFee;\r\n        stakingFee = _stakingFee;\r\n\r\n        feeDenominator = _feeDenominator;\r\n\r\n        require(autoLiquidityFee.add(stakingFee).mul(100).div(feeDenominator) <= 10, \"Fee Limit Exceeded\");\r\n    }\r\n\r\n    function setFeeReceivers(address _autoLiquidityReceiver, address _stakingFeeReceiver) external authorized {\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n        stakingFeeReceiver = _stakingFeeReceiver;\r\n    }\r\n\r\n    function rescueBNB() external authorized {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountDokdo);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDokdo\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifyPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setHasFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setIsExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Dokdo", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000df2b9fcbcff34ea813b020622fd78aa16dfe2df00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0027994699870df5124cbb29ef4e697916eccac90dd5b28567b48b8a943a47aa"}