{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\ninterface IERC20Extended {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// Factory interface\r\ninterface IDexFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pancakeSwapPair);\r\n}\r\n\r\n// Dex Router contract interface\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = payable(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// main contract\r\ncontract DeFiSage is IERC20Extended, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = \"DeFi Sage\";\r\n    string private constant _symbol = \"Dsage\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _totalSupply = 10_000_000_000 * 10**_decimals;\r\n\r\n    IDexRouter public router;\r\n    address public pancakeSwapPair;\r\n    address public lpReceiver;\r\n    address public farmingPool;\r\n    address public marketingFundsReceiver;\r\n    address public lotteryReceiver;\r\n    address public airdropsFeeReceiver;\r\n\r\n    uint256 _farmingBuyFee = 2_00;\r\n    uint256 _liquidityBuyFee = 2_00;\r\n    uint256 _marketingBuyFee = 2_00;\r\n    uint256 _lotterBuyFee = 2_00;\r\n    uint256 _airdropsBuyFee = 2_00;\r\n\r\n    uint256 _farmingSellFee = 2_00;\r\n    uint256 _liquiditySellFee = 2_00;\r\n    uint256 _marketingSellFee = 2_00;\r\n    uint256 _lotterySellFee = 2_00;\r\n    uint256 _airdropsSellFee = 2_00;\r\n\r\n    uint256 _farmingFeeCount;\r\n    uint256 _autoliquidityFeeCount;\r\n    uint256 _marketingFeeCount;\r\n    uint256 _lotteryFeeCount;\r\n    uint256 _airdropsFeeCount;\r\n\r\n    uint256 public totalBuyFee = 10_00;\r\n    uint256 public totalSellFee = 10_00;\r\n    uint256 public feeDenominator = 100_00;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public _exemptFromFee;\r\n\r\n    bool public swapEnabled;\r\n    bool public trading; // once enable can't be disable\r\n    uint256 public swapThreshold = _totalSupply / 2000;\r\n    bool inSwap;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountSage);\r\n\r\n    constructor(\r\n        address _lpReceiver,\r\n        address _farmingPool,\r\n        address _marketingFundsReceiver,\r\n        address _lotteryReceiver,\r\n        address _airdropsFeeReceiver\r\n    ) {\r\n        address router_ = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        lpReceiver = _lpReceiver;\r\n        farmingPool = _farmingPool;\r\n        marketingFundsReceiver = _marketingFundsReceiver;\r\n        lotteryReceiver = _lotteryReceiver;\r\n        airdropsFeeReceiver = _airdropsFeeReceiver;\r\n\r\n        router = IDexRouter(router_);\r\n        pancakeSwapPair = IDexFactory(router.factory()).createPair(\r\n            address(this),\r\n            router.WETH()\r\n        );\r\n        _exemptFromFee[router_]=  true;\r\n        _exemptFromFee[msg.sender] = true;\r\n        _exemptFromFee[_lpReceiver] = true;\r\n        _exemptFromFee[_farmingPool] = true;\r\n        _exemptFromFee[_marketingFundsReceiver] = true;\r\n        _exemptFromFee[_lotteryReceiver] = true;\r\n        _exemptFromFee[_airdropsFeeReceiver] = true;\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address holder, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, _totalSupply);\r\n    }\r\n\r\n    function multiTransfer(address[] memory recipient, uint256[] memory amount)\r\n        external\r\n    {\r\n        require(recipient.length == amount.length, \"Invalid array\");\r\n        for (uint256 i; i < recipient.length; i++) {\r\n            _transferFrom(msg.sender, recipient[i], amount[i]);\r\n        }\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != _totalSupply) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]\r\n                .sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        if (!_exemptFromFee[sender] && !_exemptFromFee[recipient]) {\r\n            require(trading, \"Trading not enabled yet\");\r\n        }\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if (shouldSwapAndLiquify()) {\r\n            SwapAndLiquify();\r\n        }\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n\r\n        uint256 amountReceived;\r\n        if (\r\n            _exemptFromFee[sender] ||\r\n            _exemptFromFee[recipient] ||\r\n            (sender != pancakeSwapPair && recipient != pancakeSwapPair)\r\n        ) {\r\n            amountReceived = amount;\r\n        } else {\r\n            uint256 feeAmount;\r\n            if (sender == pancakeSwapPair) {\r\n                feeAmount = amount.mul(totalBuyFee).div(feeDenominator);\r\n                amountReceived = amount.sub(feeAmount);\r\n                takeFee(sender, feeAmount);\r\n                setBuyFee(amount);\r\n            } else {\r\n                feeAmount = amount.mul(totalSellFee).div(feeDenominator);\r\n                amountReceived = amount.sub(feeAmount);\r\n                takeFee(sender, feeAmount);\r\n                setSellFee(amount);\r\n            }\r\n        }\r\n\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function takeFee(address sender, uint256 feeAmount) internal {\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n    }\r\n\r\n    function setBuyFee(uint256 _amount) internal {\r\n        _autoliquidityFeeCount += _amount.mul(_liquidityBuyFee).div(\r\n            feeDenominator\r\n        );\r\n        _farmingFeeCount += _amount.mul(_farmingBuyFee).div(feeDenominator);\r\n        _marketingFeeCount += _amount.mul(_marketingBuyFee).div(feeDenominator);\r\n        _lotteryFeeCount += _amount.mul(_lotterBuyFee).div(feeDenominator);\r\n        _airdropsFeeCount += _amount.mul(_airdropsBuyFee).div(feeDenominator);\r\n    }\r\n\r\n    function setSellFee(uint256 _amount) internal {\r\n        _autoliquidityFeeCount += _amount.mul(_liquiditySellFee).div(\r\n            feeDenominator\r\n        );\r\n        _farmingFeeCount += _amount.mul(_farmingSellFee).div(feeDenominator);\r\n        _marketingFeeCount += _amount.mul(_marketingSellFee).div(\r\n            feeDenominator\r\n        );\r\n        _lotteryFeeCount += _amount.mul(_lotterySellFee).div(feeDenominator);\r\n        _airdropsFeeCount += _amount.mul(_airdropsSellFee).div(feeDenominator);\r\n    }\r\n\r\n    function shouldSwapAndLiquify() internal view returns (bool) {\r\n        return\r\n            msg.sender != pancakeSwapPair &&\r\n            !inSwap &&\r\n            swapEnabled &&\r\n            _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function SwapAndLiquify() internal swapping {\r\n        uint256 totalFee = _autoliquidityFeeCount\r\n            .add(_farmingFeeCount)\r\n            .add(_marketingFeeCount)\r\n            .add(_lotteryFeeCount)\r\n            .add(_airdropsFeeCount);\r\n\r\n        uint256 amountToLiquify = swapThreshold\r\n            .mul(_autoliquidityFeeCount)\r\n            .div(totalFee)\r\n            .div(2);\r\n\r\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\r\n        _allowances[address(this)][address(router)] = _totalSupply;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n\r\n        uint256 BNBFee = totalFee.sub(_autoliquidityFeeCount.div(2));\r\n\r\n        uint256 amountBNBLiquidity = amountBNB\r\n            .mul(_autoliquidityFeeCount)\r\n            .div(BNBFee)\r\n            .div(2);\r\n        uint256 amountBNBFarming = amountBNB.mul(_farmingFeeCount).div(BNBFee);\r\n        uint256 amountBNBEmarketing = amountBNB.mul(_marketingFeeCount).div(\r\n            BNBFee\r\n        );\r\n        uint256 amountBNBLotteryPool = amountBNB.mul(_lotteryFeeCount).div(\r\n            BNBFee\r\n        );\r\n        uint256 amountBNBAirdrops = amountBNB.mul(_airdropsFeeCount).div(\r\n            BNBFee\r\n        );\r\n\r\n        if (amountBNBFarming > 0) {\r\n            payable(farmingPool).transfer(amountBNBEmarketing);\r\n        }\r\n        if (amountBNBEmarketing > 0) {\r\n            payable(marketingFundsReceiver).transfer(amountBNBEmarketing);\r\n        }\r\n        if (amountBNBLotteryPool > 0) {\r\n            payable(lotteryReceiver).transfer(amountBNBLotteryPool);\r\n        }\r\n        if (amountBNBAirdrops > 0) {\r\n            payable(airdropsFeeReceiver).transfer(amountBNBAirdrops);\r\n        }\r\n\r\n        if (amountToLiquify > 0) {\r\n            router.addLiquidityETH{value: amountBNBLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                lpReceiver,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\r\n        }\r\n\r\n        _autoliquidityFeeCount = 0;\r\n        _farmingFeeCount = 0;\r\n        _marketingFeeCount = 0;\r\n        _lotteryFeeCount = 0;\r\n        _airdropsFeeCount = 0;\r\n    }\r\n\r\n    function removeStuckBnb(address receiver, uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        payable(receiver).transfer(amount);\r\n    }\r\n\r\n    function set_exemptFromFee(address holder, bool exempt) external onlyOwner {\r\n        _exemptFromFee[holder] = exempt;\r\n    }\r\n\r\n    function setFeeReceivers(\r\n        address _lpReceiver,\r\n        address _farmingPool,\r\n        address _marketingFundsReceiver,\r\n        address _lotteryReceiver,\r\n        address _airdropsFeeReceiver\r\n    ) external onlyOwner {\r\n        lpReceiver = _lpReceiver;\r\n        farmingPool = _farmingPool;\r\n        marketingFundsReceiver = _marketingFundsReceiver;\r\n        lotteryReceiver = _lotteryReceiver;\r\n        airdropsFeeReceiver = _airdropsFeeReceiver;\r\n    }\r\n\r\n    function setSwapAndLiquifySettings(bool _enabled, uint256 _amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(swapThreshold > 0);\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!trading, \"Already enabled\");\r\n        trading = true;\r\n        swapEnabled = true;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFundsReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_airdropsFeeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSage\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_exemptFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropsFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFundsReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipient\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeSwapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeStuckBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFundsReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_airdropsFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapAndLiquifySettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"set_exemptFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DeFiSage", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a057de3b58ac927419119b71126648b0f4e5827a00000000000000000000000062fd43a5ce04500387a2685ca99dbdb64d5145fd000000000000000000000000a49ed924a1aee3973fb759dc722de214e752667200000000000000000000000065009fbe918d0e3d882e7f357710c4f44e6a7edf0000000000000000000000000811420e52b7595f6cdb4bc6459798a7dbc5b326", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://917d72dc685f7606f3fee4c94acaba7be68e9398ff2ec5c5ead25666c398dd9e"}