{"SourceCode": "// File: @chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (\r\n      uint8\r\n    );\r\n\r\n  function description()\r\n    external\r\n    view\r\n    returns (\r\n      string memory\r\n    );\r\n\r\n  function version()\r\n    external\r\n    view\r\n    returns (\r\n      uint256\r\n    );\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(\r\n    uint80 _roundId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: ECDSA.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12; // >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        return recover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\r\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: ReentrancyGuard.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12; // >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n// File: Context.sol\r\n\r\n\r\npragma solidity 0.6.12; // >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n// File: Ownable.sol\r\n\r\n\r\npragma solidity 0.6.12; // >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// File: Address.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12; // >=0.6.2 <0.8;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n// File: IBEP20.sol\r\n\r\n\r\npragma solidity 0.6.12; // >=0.6.4;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: SafeMath.sol\r\n\r\n\r\npragma solidity 0.6.12; // >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n// File: SafeBEP20.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\npragma solidity 0.6.12; // >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IBEP20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeBEP20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeBEP20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeBEP20: BEP20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n// File: BEP20.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12; // >=0.4.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IBEP20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {BEP20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of BEP20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IBEP20-approve}.\r\n */\r\ncontract BEP20 is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external override view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the number of decimals used to get its user representation.\r\n    */\r\n    function decimals() public override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-totalSupply}.\r\n     */\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom (address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(amount, 'BEP20: transfer amount exceeds allowance')\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, 'BEP20: decreased allowance below zero'));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\r\n     * the total supply.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `msg.sender` must be the token owner\r\n     */\r\n    function mint(uint256 amount) public virtual onlyOwner returns (bool) {\r\n        _mint(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer (address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), 'BEP20: transfer from the zero address');\r\n        require(recipient != address(0), 'BEP20: transfer to the zero address');\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, 'BEP20: transfer amount exceeds balance');\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), 'BEP20: mint to the zero address');\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), 'BEP20: burn from the zero address');\r\n\r\n        _balances[account] = _balances[account].sub(amount, 'BEP20: burn amount exceeds balance');\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve (address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), 'BEP20: approve from the zero address');\r\n        require(spender != address(0), 'BEP20: approve to the zero address');\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, 'BEP20: burn amount exceeds allowance'));\r\n    }\r\n}\r\n// File: HyperToken.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// File: contracts\\HYPERToken.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n//import \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.2/contracts/access/Ownable.sol\";\r\n\r\n// HyperToken with Governance.\r\ncontract HyperToken is BEP20('Hyper Token', 'HYP') {\r\n    address[] public managers;\r\n    \r\n    modifier onlyManagers {\r\n        require(isManager(msg.sender) != 0, 'HyperToken: caller is not a manager');\r\n        _;\r\n    }\r\n\r\n    event Mint(address indexed user, uint256 amount);\r\n    event AddManager(address indexed user, address indexed manager);\r\n    event RemoveManager(address indexed user, address indexed manager);\r\n    \r\n    function mint(address _to, uint256 _amount) public onlyManagers {\r\n        _mint(_to, _amount);\r\n        _moveDelegates(address(0), _delegates[_to], _amount);\r\n    }\r\n    function mint(uint256 amount) public override onlyOwner returns (bool) {\r\n        _mint(msg.sender, amount);\r\n        _moveDelegates(address(0), _delegates[msg.sender], amount);\r\n        emit Mint(msg.sender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function addManager(address _manager) public onlyOwner {\r\n        if (isManager(_manager) == 0) {\r\n            managers.push(_manager);\r\n        }\r\n        emit AddManager(msg.sender, _manager);\r\n    }\r\n    function removeManager(address _manager) public onlyOwner {\r\n        uint256 id = isManager(_manager);\r\n        if (id != 0) {\r\n            managers[id - 1] = managers[managers.length - 1];\r\n            managers.pop();\r\n        }\r\n        emit RemoveManager(msg.sender, _manager);\r\n    }\r\n    function isManager(address _manager) internal view returns (uint256) {\r\n        for (uint256 t = 0; t < managers.length; t++) {\r\n            if (managers[t] == _manager) {\r\n                return t + 1;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    function getManagers() public view returns (uint256 count, address[] memory managersList) {\r\n        return (managers.length, managers);\r\n    }\r\n\r\n    // Copied and modified from YAM code:\r\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\r\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\r\n    // Which is copied and modified from COMPOUND:\r\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\r\n\r\n    /// @dev A record of each accounts delegate\r\n    mapping (address => address) internal _delegates;\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint256 votes;\r\n    }\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping (address => uint32) public numCheckpoints;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping (address => uint) public nonces;\r\n\r\n      /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegator The address to get delegatee for\r\n     */\r\n    function delegates(address delegator)\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        return _delegates[delegator];\r\n    }\r\n\r\n   /**\r\n    * @notice Delegate votes from `msg.sender` to `delegatee`\r\n    * @param delegatee The address to delegate votes to\r\n    */\r\n    function delegate(address delegatee) external {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(\r\n        address delegatee,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        external\r\n    {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name())),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(\r\n                DELEGATION_TYPEHASH,\r\n                delegatee,\r\n                nonce,\r\n                expiry\r\n            )\r\n        );\r\n\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                domainSeparator,\r\n                structHash\r\n            )\r\n        );\r\n\r\n        // address signatory = ecrecover(digest, v, r, s);\r\n        address signatory = ECDSA.recover(digest, v, r, s);\r\n        require(signatory != address(0), \"HYP::delegateBySig: invalid signature\");\r\n        require(nonce == nonces[signatory]++, \"HYP::delegateBySig: invalid nonce\");\r\n        require(now <= expiry, \"HYP::delegateBySig: signature expired\");\r\n        return _delegate(signatory, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint blockNumber)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(blockNumber < block.number, \"HYP::getPriorVotes: not yet determined\");\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    function _delegate(address delegator, address delegatee)\r\n        internal\r\n    {\r\n        address currentDelegate = _delegates[delegator];\r\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying HYPs (not scaled);\r\n        _delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {\r\n                // decrease old representative\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n                uint256 srcRepNew = srcRepOld.sub(amount);\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                // increase new representative\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n                uint256 dstRepNew = dstRepOld.add(amount);\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(\r\n        address delegatee,\r\n        uint32 nCheckpoints,\r\n        uint256 oldVotes,\r\n        uint256 newVotes\r\n    )\r\n        internal\r\n    {\r\n        uint32 blockNumber = safe32(block.number, \"HYP::_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n        } else {\r\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n            numCheckpoints[delegatee] = nCheckpoints + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint) {\r\n        uint256 chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        super.transfer(recipient, amount);\r\n        _moveDelegates(_delegates[_msgSender()], _delegates[recipient], amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender, \r\n        address recipient, \r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        super.transferFrom(sender, recipient, amount); \r\n        _moveDelegates(_delegates[sender], _delegates[recipient], amount); \r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _amount) public {\r\n        _burn(_msgSender(), _amount);\r\n        _moveDelegates(_delegates[_msgSender()], address(0), _amount);\r\n    }\r\n}\r\n// File: FundManager_Algo.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// File: contracts\\FundManager_Algo.sol\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IHyperdexPair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n\r\n    function getTwapPrice() external view returns (uint256 price0, uint256 price1);\r\n}\r\n\r\ncontract FundManagerAlgo is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeBEP20 for IBEP20;\r\n\r\n    modifier isEnabled {\r\n        require(enabled, \"FM Disabled\");\r\n        _;\r\n    }\r\n\r\n    modifier validatePoolByCubeId(uint256 _cubeId) {\r\n        require (_cubeId < cubeInfo.length , \"E000\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyBackend {\r\n        require(msg.sender == backendAddress, \"E999\");\r\n        _;\r\n    }\r\n\r\n    struct Totals {\r\n        uint256 shares;\r\n        uint256 assetAmount;\r\n        uint256 pendingAssetAmount;\r\n        uint256 earlyUnlockedShares;\r\n        uint256 earlyUnlockedAssetAmount;\r\n        uint256 lastAvailUpdate;\r\n        uint256 hyperTokenAmount;\r\n    }\r\n\r\n    struct Fees {\r\n        uint256 depositFeeBP;\r\n        uint256 performanceFeeBP;\r\n        uint256 guaranteedBP;\r\n        uint256 referralBonusBP;\r\n        uint256 minHyperTokenRatioBP;\r\n        uint256 maxHyperTokenRatioBP;\r\n    }\r\n    \r\n    struct Bonus {\r\n        uint256 stepUSD;\r\n        uint256 bonusRewardBP;\r\n    }\r\n    \r\n    struct ProfitDetail {\r\n        uint256 assetProfit;\r\n        uint256 assetLoss;\r\n        uint256 hyperTokenProfitBase;\r\n        uint256 hyperTokenProfitBonus;\r\n    }\r\n    \r\n    struct ProfitInfo {\r\n        uint256 assetInvestment;\r\n        uint256 hyperTokenInvestment;\r\n        uint256 hyperTokenInvestmentUSD;\r\n        ProfitDetail profitDetail;\r\n        uint256 userElapsed;\r\n        uint256 secondsToExpiration;\r\n        uint256 assetPriceUSD;\r\n        uint256 hyperTokenPrice;\r\n    }\r\n    \r\n    struct LedgerEntry {\r\n        uint240 timestamp;\r\n        uint16 operationType;\r\n        uint256 assetAmount;\r\n        uint256 shares;\r\n        uint256 profitAmount;\r\n        uint256 lossAmount;\r\n        uint256 hyperTokenAmount;\r\n        uint256 hyperTokenProfitBase;\r\n        uint256 hyperTokenProfitBonus;\r\n        uint256 assetPrice;\r\n        uint256 hyperTokenPrice;\r\n        uint256 sharePrice;\r\n    }\r\n    \r\n    struct Unlocked {\r\n        uint256 shares;\r\n        uint256 assetAmount;\r\n        uint256 hyperTokenAmount;\r\n        uint256 hyperTokenAmountUSD;\r\n        uint256 assetProfit;\r\n        uint256 assetLoss;\r\n        uint256 hyperTokenProfitBase;\r\n        uint256 hyperTokenProfitBonus;\r\n        uint256 nextWithdrawalAllowed;\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint256 assetAmount;\r\n        uint256 pendingAssetAmount;\r\n        uint256 shares;\r\n        Unlocked earlyUnlockedValues;\r\n        uint256 price;\r\n        uint256 avgEntrySecond;\r\n        uint256 hyperTokenAmount;\r\n        uint256 hyperTokenUSDvalue;\r\n        uint256 bonusRewardBP;\r\n        uint256 referralBonusBP;\r\n        bool referralUsed;\r\n        LedgerEntry[] ledgerEntries;\r\n    }\r\n    \r\n    struct Times {\r\n        uint256 start;\r\n        uint256 expiration;\r\n        uint256 duration;\r\n        uint256 lastUpdateBlock;\r\n    }\r\n\r\n    struct CubeInfo {\r\n        IBEP20 asset;\r\n        string symbol;\r\n        Times times;\r\n        Fees fees;\r\n        Totals totals;\r\n        uint256 sharePrice;\r\n        address[] suspendedUsersIndex;\r\n        uint256 suspendedUsersCount;\r\n        address managedAddress;\r\n        address priceFeed;\r\n        bool enabled;\r\n    }\r\n\r\n    HyperToken public hyperToken;\r\n    address public backendAddress;\r\n    IHyperdexPair public hyperTokenPricePair;\r\n    Bonus[] public bonuses;\r\n    bool public enabled;\r\n    \r\n    CubeInfo[] public cubeInfo;\r\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\r\n\r\n    event Invest(address indexed user, uint256 indexed cubeId, uint256 amount, uint256 hyperTokenAmount, address indexed _referral);\r\n    event DepositFromSuspended(address indexed user, uint256 indexed cubeId, uint256 count);\r\n    event Withdraw(address indexed user, uint256 indexed cubeId, uint256 amount);\r\n    event EarlyUnlockShares(address indexed user, uint256 indexed cubeId, uint256 amount);\r\n    // event TokenOwnershipTransferred(address indexed owner, address indexed newOwner);\r\n    event StatusChange(bool indexed enabled);\r\n    event BackendAddressChange(address indexed oldBackendAddress, address indexed newBackendAddress);\r\n    event HyperTokenPricePairChange(IHyperdexPair indexed oldHyperTokenPricePair, IHyperdexPair indexed _hyperTokenPricePair);\r\n    event AddCube(address indexed user, IBEP20 indexed asset, uint256 duration);\r\n    event SetCube(address indexed user, uint256 indexed cubeId);\r\n    event SetBonus(address indexed user, uint16 indexed bonusID, uint256 stepUSD, uint256 bonusRewardBP);\r\n    event UpdateCube(address indexed user, uint256 indexed cubeId, uint256 totalAssetAmount, bool availUpdate);\r\n    event ExtractToken(address indexed user, IBEP20 indexed asset, address indexed to, uint256 amount);\r\n    event ExtractBNB(address indexed user, address indexed to, uint256 amount);\r\n\r\n    constructor(\r\n        HyperToken _hyperToken,\r\n        address _backendAddress,\r\n        IHyperdexPair _hyperTokenPricePair\r\n    ) public {\r\n        require(address(_hyperToken) != address(0), \"Ec01\");\r\n        require(_backendAddress != address(0), \"Ec03\");\r\n        require(address(_hyperTokenPricePair) != address(0), \"Ec04\");\r\n        hyperToken = _hyperToken;\r\n        backendAddress = _backendAddress;\r\n        hyperTokenPricePair = _hyperTokenPricePair;\r\n        bonuses.push(Bonus({ stepUSD: 0, bonusRewardBP: 0 }));\r\n        bonuses.push(Bonus({ stepUSD: 100 * 1e18, bonusRewardBP: 250 }));\r\n        bonuses.push(Bonus({ stepUSD: 500 * 1e18, bonusRewardBP: 500 }));\r\n        bonuses.push(Bonus({ stepUSD: 1000 * 1e18, bonusRewardBP: 750 }));\r\n        bonuses.push(Bonus({ stepUSD: 10000 * 1e18, bonusRewardBP: 1000 }));\r\n        enabled = true;\r\n    }\r\n    \r\n    // Manager\r\n/*\r\n    function transferTokenOwnership(address newOwner) external onlyOwner nonReentrant {\r\n        require(newOwner != address(0), \"E001\"); // transferOwnership: new owner is the zero address\r\n        address oldOwner = hyperToken.getOwner();\r\n        hyperToken.transferOwnership(newOwner);\r\n        emit TokenOwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n*/\r\n    function setStatus(bool _enabled) external onlyOwner {\r\n        enabled = _enabled;\r\n        emit StatusChange(_enabled);\r\n    }\r\n\r\n    function setBackendAddress(address _backendAddress) external onlyOwner {\r\n        require(_backendAddress != address(0), \"E005\"); // setBackendAddress: ZERO\r\n        address oldBackendAddress = backendAddress;\r\n        backendAddress = _backendAddress;\r\n        emit BackendAddressChange(oldBackendAddress, _backendAddress);\r\n    }\r\n    \r\n     function setHyperTokenPricePair(IHyperdexPair _hyperTokenPricePair) external onlyOwner {\r\n        require(address(_hyperTokenPricePair) != address(0), \"E006\"); // setHyperTokenPricePair: ZERO\r\n        IHyperdexPair oldHyperTokenPricePair = hyperTokenPricePair;\r\n        hyperTokenPricePair = _hyperTokenPricePair;\r\n        emit HyperTokenPricePairChange(oldHyperTokenPricePair, _hyperTokenPricePair);\r\n    }\r\n\r\n    function cubeLength() external view returns (uint256) {\r\n        return cubeInfo.length;\r\n    }\r\n\r\n    function addCube(IBEP20 _asset, uint256 _duration, uint256 _sharePrice, Fees calldata _fees, uint256 _start, uint256 _expiration, \r\n        address _managedAddress, address _priceFeed, bool _enabled) external onlyOwner {\r\n        require(_sharePrice > 0, \"E007\"); // add: invalid share price\r\n        require(_fees.depositFeeBP <= 10000, \"E008\"); // add: invalid deposit fee\r\n        require(_fees.performanceFeeBP <= 10000, \"E009\"); // add: invalid performance fee\r\n        require(_fees.guaranteedBP <= 10000, \"E010\"); // add: invalid guaranteed\r\n        require(_fees.referralBonusBP <= 10000, \"E011\"); // add: invalid referral bonus\r\n        require(_fees.maxHyperTokenRatioBP <= 10000 && _fees.minHyperTokenRatioBP >= 1000 && _fees.minHyperTokenRatioBP <= _fees.maxHyperTokenRatioBP, \"E014\"); // add: invalid max HYP ratio\r\n        require(_expiration > _start, \"E015\"); // add: check start/expiration\r\n        require(_expiration > block.timestamp, \"E016\"); // add: invalid expiration\r\n        require(_duration > 0, \"E017\"); // add: invalid duration\r\n        require(_managedAddress != address(0), \"E018\"); // add: invalid managed address\r\n        require(_priceFeed != address(0), \"E019\"); // add: invalid price feed address\r\n        cubeInfo.push(CubeInfo({\r\n            asset: _asset,\r\n            symbol: _asset.symbol(),\r\n            sharePrice: _sharePrice,\r\n            fees: _fees,\r\n            times: Times({\r\n                start: _start,\r\n                expiration: _expiration,\r\n                duration: _duration,\r\n                lastUpdateBlock: 0\r\n            }),\r\n            totals: Totals({ \r\n                shares: 0, \r\n                assetAmount: 0,\r\n                pendingAssetAmount: 0,\r\n                earlyUnlockedShares: 0,\r\n                lastAvailUpdate: 0,\r\n                hyperTokenAmount: 0,\r\n                earlyUnlockedAssetAmount: 0\r\n            }),\r\n            suspendedUsersIndex: new address[](0),\r\n            suspendedUsersCount: 0,\r\n            managedAddress: _managedAddress,\r\n            priceFeed: _priceFeed,\r\n            enabled: _enabled\r\n        }));\r\n        emit AddCube(msg.sender, _asset, _duration);\r\n    }\r\n\r\n    function setCube(uint256 _cubeId, Fees memory _fees, uint256 _expiration, uint256 _duration, \r\n        address _managedAddress, address _priceFeed, bool _enabled) external onlyOwner validatePoolByCubeId(_cubeId) {\r\n        require(_fees.depositFeeBP <= 10000, \"E020\"); // set: invalid deposit fee\r\n        require(_fees.performanceFeeBP <= 10000, \"E021\"); // set: invalid performance fee\r\n        require(_fees.referralBonusBP <= 10000, \"E022\"); // set: invalid referral bonus\r\n        require(_fees.maxHyperTokenRatioBP <= 10000 && _fees.minHyperTokenRatioBP >= 1000 && _fees.minHyperTokenRatioBP <= _fees.maxHyperTokenRatioBP, \"E025\"); // set: invalid max HYP ratio\r\n        require(_expiration > block.timestamp, \"E026\"); // set: invalid expiration\r\n        require(_managedAddress != address(0), \"E027\"); // set: invalid managed address\r\n        require(_priceFeed != address(0), \"E028\"); // set: invalid price feed address\r\n        require(_duration > 0, \"E029\"); // set: invalid duration\r\n        CubeInfo storage cube = cubeInfo[_cubeId];\r\n        require(_expiration > cube.times.start, \"E030\"); // set: check start/expiration\r\n        cube.fees = _fees;\r\n        cube.times.expiration = _expiration;\r\n        cube.times.duration = _duration;\r\n        cube.managedAddress = _managedAddress;\r\n        cube.priceFeed = _priceFeed;\r\n        cube.enabled = _enabled;\r\n        emit SetCube(msg.sender, _cubeId);\r\n    }\r\n    \r\n    function setBonus(uint16 _bonusID, uint256 _stepUSD, uint256 _bonusRewardBP) external onlyOwner {\r\n        require(_bonusID < bonuses.length, \"E031\"); // setBonus: wrong bonus ID\r\n        require(_bonusRewardBP <= 10000, \"E032\"); // setBonus: invalid bonus reward\r\n        bonuses[_bonusID].stepUSD = _stepUSD;\r\n        bonuses[_bonusID].bonusRewardBP = _bonusRewardBP;\r\n        emit SetBonus(msg.sender, _bonusID, _stepUSD, _bonusRewardBP);\r\n    }\r\n    \r\n    function getHyperTokenPrice() public view returns (uint256) {\r\n        IHyperdexPair h = IHyperdexPair(hyperTokenPricePair);\r\n        /*\r\n        ( uint112 reserve0, uint112 reserve1, ) = h.getReserves();\r\n        if (reserve1 == 0) {\r\n            return 0;\r\n        }\r\n        return uint256(reserve0).mul(1e18).div(reserve1);\r\n        */\r\n        ( , uint256 price1 ) = h.getTwapPrice();\r\n        return price1;\r\n    }\r\n    \r\n    function depositFromSuspended(uint256 _cubeId, uint256 _count) external onlyBackend nonReentrant validatePoolByCubeId(_cubeId) {\r\n        CubeInfo storage cube = cubeInfo[_cubeId];\r\n        require(cube.suspendedUsersCount != 0 && _count != 0, \"E033\"); // depositFromSuspended: no suspended users\r\n        if (_count > cube.suspendedUsersCount) _count = cube.suspendedUsersCount;\r\n        uint256 limit = cube.suspendedUsersCount.sub(_count);\r\n        uint256 assetPriceUSD = getLatestPrice(_cubeId);\r\n        uint256 hyperTokenPrice = getHyperTokenPrice();\r\n        uint256 totalDepositAmount = 0;\r\n        for (uint256 i = cube.suspendedUsersCount; i > limit; i--) {\r\n            address userAddress = cube.suspendedUsersIndex[i - 1];\r\n            UserInfo storage user = userInfo[_cubeId][userAddress];\r\n            uint256 amount = user.pendingAssetAmount;\r\n            if (amount > 0) {\r\n                totalDepositAmount = totalDepositAmount.add(amount);\r\n                uint256 newAmount = user.assetAmount.add(amount);\r\n                if (block.timestamp <= cube.times.start) {\r\n                    user.avgEntrySecond = 0;\r\n                } else {\r\n                    user.avgEntrySecond = (user.avgEntrySecond.mul(user.assetAmount).add((block.timestamp - cube.times.start).mul(amount))).div(newAmount);\r\n                }\r\n                user.assetAmount = newAmount;\r\n                uint256 buyShares = amount.mul(1e12).div(cube.sharePrice);\r\n                uint256 newShares = user.shares.add(buyShares);\r\n                user.shares = newShares;\r\n                user.price = newAmount.mul(1e12).div(newShares);\r\n                cube.totals.shares = cube.totals.shares.add(buyShares);\r\n                user.pendingAssetAmount = 0;\r\n                user.bonusRewardBP = getBonusRewardBP(newAmount.mul(assetPriceUSD).div(1e18));\r\n                user.ledgerEntries.push(LedgerEntry({\r\n                    timestamp: uint240(block.timestamp),\r\n                    operationType: 5,\r\n                    assetAmount: amount,\r\n                    shares: buyShares,\r\n                    profitAmount: 0,\r\n                    lossAmount: 0,\r\n                    hyperTokenAmount: 0,\r\n                    hyperTokenProfitBase: 0,\r\n                    hyperTokenProfitBonus: 0,\r\n                    assetPrice: assetPriceUSD,\r\n                    hyperTokenPrice: hyperTokenPrice,\r\n                    sharePrice: cube.sharePrice\r\n                }));\r\n            }\r\n        }\r\n        cube.totals.pendingAssetAmount = cube.totals.pendingAssetAmount.sub(totalDepositAmount);\r\n        cube.suspendedUsersCount = limit;\r\n        emit DepositFromSuspended(msg.sender, _cubeId, _count);\r\n    }\r\n    \r\n    function updateCube(uint256 _cubeId, uint256 _totalAssetAmount, bool _availUpdate) external onlyBackend validatePoolByCubeId(_cubeId) {\r\n        CubeInfo storage cube = cubeInfo[_cubeId];\r\n        if (block.number <= cube.times.lastUpdateBlock) {\r\n            return;\r\n        }\r\n        cube.totals.assetAmount = _totalAssetAmount;\r\n        if (cube.totals.shares != 0) {\r\n            cube.sharePrice = cube.totals.assetAmount.mul(1e12).div(cube.totals.shares);\r\n        }\r\n        cube.times.lastUpdateBlock = block.number;\r\n        if (_availUpdate) {\r\n            cube.totals.lastAvailUpdate = block.timestamp;\r\n        }\r\n        emit UpdateCube(msg.sender, _cubeId, _totalAssetAmount, _availUpdate);\r\n    }\r\n    \r\n    function extractToken(IBEP20 _asset, address _to, uint256 _amount) external onlyOwner nonReentrant {\r\n        _asset.safeTransfer(_to, _amount);\r\n        emit ExtractToken(msg.sender, _asset, _to, _amount);\r\n    }\r\n    \r\n    function extractBNB(address payable _to, uint256 _amount) external payable onlyOwner nonReentrant {\r\n        (bool sent, ) = _to.call{value: _amount}(\"\");\r\n        require(sent, \"E034\"); // Failed to send BNB\r\n        emit ExtractBNB(msg.sender, _to, _amount);\r\n    }\r\n    \r\n    function getInfo() external view returns (address _backendAddress, address _hyperToken, uint256 _hyperTokenPrice) {\r\n        return (backendAddress, address(hyperToken), getHyperTokenPrice());\r\n    }\r\n    \r\n    // Cube\r\n    \r\n    function getLatestPrice(uint256 _cubeId) private view returns (uint256) {\r\n        CubeInfo storage cube = cubeInfo[_cubeId];\r\n        AggregatorV3Interface pf = AggregatorV3Interface(cube.priceFeed);\r\n\t    (, int256 price, , ,) = pf.latestRoundData();\r\n        uint256 decimals = 18 - uint256(pf.decimals());\r\n        return uint256(price).mul(10**decimals);\r\n    }\r\n    \r\n    function getAUM() external view returns (uint256 totalUsdAUM) {\r\n        uint256 total = 0;\r\n        uint256 hyperTokenPrice = getHyperTokenPrice();\r\n        for (uint256 id = 0; id < cubeInfo.length; id++) {\r\n            total = total.add(cubeInfo[id].totals.assetAmount.mul(getLatestPrice(id)).div(1e18));\r\n            total = total.add(cubeInfo[id].totals.hyperTokenAmount.mul(hyperTokenPrice).div(1e18));\r\n        }\r\n        return total;\r\n    }\r\n    \r\n    // User\r\n    \r\n    function invest(uint256 _cubeId, uint256 _amount, uint256 _hyperTokenAmount, address _referral) external nonReentrant isEnabled validatePoolByCubeId(_cubeId) {\r\n        require(_amount != 0, \"E035\"); // invest: amount is zero.\r\n        CubeInfo storage cube = cubeInfo[_cubeId];\r\n        require(cube.enabled, \"E037\"); // invest: cube is not enabled\r\n        require(cube.times.expiration > block.timestamp, \"E037b\"); // invest: cube is expired\r\n        UserInfo storage user = userInfo[_cubeId][msg.sender];\r\n        if (_referral != address(0)) {\r\n            require(!user.referralUsed, \"E038\"); // invest: referral bonus already used\r\n            require(_referral != msg.sender, \"E039\"); // invest: referral cannot be the sender\r\n        }\r\n        uint256 assetPriceUSD = getLatestPrice(_cubeId);\r\n        uint256 hyperTokenPrice = getHyperTokenPrice();\r\n        if (_hyperTokenAmount != 0) {\r\n            uint256 ratioBP = _hyperTokenAmount.mul(hyperTokenPrice).mul(10000).div(_amount).div(assetPriceUSD);\r\n            require(ratioBP >= cube.fees.minHyperTokenRatioBP, \"E040\"); // invest: hyperTokenAmount under minimum\r\n            require(ratioBP <= cube.fees.maxHyperTokenRatioBP, \"E041\"); // invest: hyperTokenAmount over maximum\r\n        }\r\n        uint256 fee;\r\n        if (!user.referralUsed && _referral != address(0) && cube.fees.referralBonusBP != 0) {\r\n            fee = _amount.mul(cube.fees.referralBonusBP).mul(assetPriceUSD);\r\n            fee = fee.div(hyperTokenPrice).div(10000);\r\n            if (_hyperTokenAmount != 0) {\r\n                fee = fee.add(_hyperTokenAmount.mul(cube.fees.referralBonusBP).div(10000));\r\n            }\r\n            hyperToken.mint(_referral, fee);\r\n            user.referralBonusBP = cube.fees.referralBonusBP;\r\n            user.referralUsed = true;\r\n        }\r\n        if (cube.fees.depositFeeBP > 0) {\r\n            fee = _amount.mul(cube.fees.depositFeeBP).div(10000);\r\n            cube.asset.safeTransferFrom(address(msg.sender), backendAddress, fee);\r\n            _amount = _amount.sub(fee);\r\n        }\r\n        cube.asset.safeTransferFrom(address(msg.sender), cube.managedAddress, _amount);\r\n        cube.totals.assetAmount = cube.totals.assetAmount.add(_amount);\r\n        cube.totals.pendingAssetAmount = cube.totals.pendingAssetAmount.add(_amount);\r\n        if (!suspendedUserExists(_cubeId, msg.sender)) {\r\n            if (cube.suspendedUsersCount >= cube.suspendedUsersIndex.length) {\r\n                cube.suspendedUsersIndex.push(msg.sender);\r\n            } else {\r\n                cube.suspendedUsersIndex[cube.suspendedUsersCount] = msg.sender;\r\n            }\r\n            cube.suspendedUsersCount++;\r\n        }\r\n        user.pendingAssetAmount = user.pendingAssetAmount.add(_amount);\r\n        if (_hyperTokenAmount != 0) {\r\n            bool transferOK = true;\r\n            if (cube.fees.depositFeeBP > 0) {\r\n                uint256 depositFee = _hyperTokenAmount.mul(cube.fees.depositFeeBP).div(10000);\r\n                transferOK = hyperToken.transferFrom(address(msg.sender), backendAddress, depositFee);\r\n                _hyperTokenAmount = _hyperTokenAmount.sub(depositFee);\r\n            }\r\n            transferOK = transferOK && hyperToken.transferFrom(address(msg.sender), address(this), _hyperTokenAmount);\r\n            require(transferOK, \"E041b\");\r\n            user.hyperTokenAmount = user.hyperTokenAmount.add(_hyperTokenAmount);\r\n            user.hyperTokenUSDvalue = user.hyperTokenUSDvalue.add(_hyperTokenAmount.mul(hyperTokenPrice).div(1e18));\r\n            cube.totals.hyperTokenAmount = cube.totals.hyperTokenAmount.add(_hyperTokenAmount);\r\n        }\r\n        user.ledgerEntries.push(LedgerEntry({\r\n            timestamp: uint240(block.timestamp),\r\n            operationType: 1,\r\n            assetAmount: _amount,\r\n            shares: 0,\r\n            profitAmount: 0,\r\n            lossAmount: 0,\r\n            hyperTokenAmount: _hyperTokenAmount,\r\n            hyperTokenProfitBase: 0,\r\n            hyperTokenProfitBonus: 0,\r\n            assetPrice: assetPriceUSD,\r\n            hyperTokenPrice: hyperTokenPrice,\r\n            sharePrice: cube.sharePrice\r\n        }));\r\n        emit Invest(msg.sender, _cubeId, _amount, _hyperTokenAmount, _referral);\r\n    }\r\n    \r\n    function earlyUnlockShares(uint256 _cubeId, uint256 _sharesAmount) external nonReentrant isEnabled validatePoolByCubeId(_cubeId) {\r\n        CubeInfo storage cube = cubeInfo[_cubeId];\r\n        require(block.timestamp < cube.times.expiration, \"E045b\"); // cube expired\r\n        UserInfo storage user = userInfo[_cubeId][msg.sender];\r\n        require(user.earlyUnlockedValues.shares == 0, \"E046\"); // earlyUnlockShares: previous early unlock still pending\r\n        require(user.shares != 0, \"E046b\");\r\n        if (_sharesAmount > user.shares) _sharesAmount = user.shares;\r\n        uint256 unlockPercBP = _sharesAmount.mul(10000).div(user.shares);\r\n        uint256 amount = user.assetAmount.mul(unlockPercBP).div(10000);\r\n        uint256 hyperTokenAmount = user.hyperTokenAmount.mul(unlockPercBP).div(10000);\r\n        ProfitInfo memory profitInfo = getActualProfit(_cubeId, msg.sender);\r\n        user.earlyUnlockedValues = Unlocked({\r\n            shares: _sharesAmount,\r\n            assetAmount: amount.mul(cube.fees.guaranteedBP).div(10000),\r\n            hyperTokenAmount: hyperTokenAmount.mul(cube.fees.guaranteedBP).div(10000),\r\n            hyperTokenAmountUSD: user.hyperTokenUSDvalue.mul(unlockPercBP).mul(cube.fees.guaranteedBP).div(1e8),\r\n            assetProfit: profitInfo.profitDetail.assetProfit.mul(unlockPercBP).mul(cube.fees.guaranteedBP).div(1e8),\r\n            assetLoss: profitInfo.profitDetail.assetLoss.mul(unlockPercBP).mul(cube.fees.guaranteedBP).div(1e8),\r\n            hyperTokenProfitBase: profitInfo.profitDetail.hyperTokenProfitBase.mul(unlockPercBP).mul(cube.fees.guaranteedBP).div(1e8),\r\n            hyperTokenProfitBonus: profitInfo.profitDetail.hyperTokenProfitBonus.mul(unlockPercBP).mul(cube.fees.guaranteedBP).div(1e8),\r\n            nextWithdrawalAllowed: block.timestamp\r\n        });\r\n        cube.totals.earlyUnlockedAssetAmount = cube.totals.earlyUnlockedAssetAmount.add(amount.mul(cube.fees.guaranteedBP).div(10000));\r\n        cube.totals.earlyUnlockedAssetAmount = cube.totals.earlyUnlockedAssetAmount.add(profitInfo.profitDetail.assetProfit.mul(unlockPercBP).mul(cube.fees.guaranteedBP).div(1e8));\r\n        cube.totals.earlyUnlockedAssetAmount = cube.totals.earlyUnlockedAssetAmount.sub(profitInfo.profitDetail.assetLoss.mul(unlockPercBP).mul(cube.fees.guaranteedBP).div(1e8));\r\n        cube.totals.earlyUnlockedShares = cube.totals.earlyUnlockedShares.add(_sharesAmount);\r\n        user.shares = user.shares.sub(_sharesAmount);\r\n        user.assetAmount = user.assetAmount.sub(amount);\r\n        cube.totals.shares = cube.totals.shares.sub(_sharesAmount);\r\n        cube.totals.assetAmount = cube.totals.assetAmount.sub(amount);\r\n        user.hyperTokenAmount = user.hyperTokenAmount.sub(hyperTokenAmount);\r\n        cube.totals.hyperTokenAmount = cube.totals.hyperTokenAmount.sub(hyperTokenAmount);\r\n        user.hyperTokenUSDvalue = user.hyperTokenUSDvalue.sub(user.hyperTokenUSDvalue.mul(unlockPercBP).div(10000));\r\n        user.ledgerEntries.push(LedgerEntry({\r\n            timestamp: uint240(block.timestamp),\r\n            operationType: 4,\r\n            assetAmount: amount.mul(cube.fees.guaranteedBP).div(10000),\r\n            shares: _sharesAmount,\r\n            profitAmount: profitInfo.profitDetail.assetProfit.mul(unlockPercBP).mul(cube.fees.guaranteedBP).div(1e8),\r\n            lossAmount: profitInfo.profitDetail.assetLoss.mul(unlockPercBP).mul(cube.fees.guaranteedBP).div(1e8),\r\n            hyperTokenAmount: hyperTokenAmount.mul(cube.fees.guaranteedBP).div(10000),\r\n            hyperTokenProfitBase: profitInfo.profitDetail.hyperTokenProfitBase.mul(unlockPercBP).mul(cube.fees.guaranteedBP).div(1e8),\r\n            hyperTokenProfitBonus: profitInfo.profitDetail.hyperTokenProfitBonus.mul(unlockPercBP).mul(cube.fees.guaranteedBP).div(1e8),\r\n            assetPrice: getLatestPrice(_cubeId),\r\n            hyperTokenPrice: getHyperTokenPrice(),\r\n            sharePrice: cube.sharePrice\r\n        }));\r\n        emit EarlyUnlockShares(msg.sender, _cubeId, _sharesAmount);\r\n    }\r\n    \r\n    function withdraw(uint256 _cubeId) external nonReentrant isEnabled validatePoolByCubeId(_cubeId) {\r\n        CubeInfo storage cube = cubeInfo[_cubeId];\r\n        UserInfo storage user = userInfo[_cubeId][msg.sender];\r\n        require(block.timestamp >= cube.times.expiration || user.earlyUnlockedValues.shares > 0, \"E048\"); // withdraw: no unlocked shares for peer\r\n        require(canWithdraw(_cubeId, msg.sender), \"E049\"); // withdraw: not allowed by lock time\r\n        require(fundsAvailable(_cubeId, msg.sender), \"E050\"); // withdraw: waiting for funds\r\n        uint256[3] memory withdrawAmount; // assetProfit, assetLoss, total\r\n        uint256[3] memory hyperTokenProfit; // base, bonus, total\r\n        uint256 hyperTokenWithdrawAmount = 0;\r\n        uint256 totalUnlockedShares = 0;\r\n        if (block.timestamp >= cube.times.expiration && user.shares != 0) {\r\n            ProfitInfo memory profitInfo = getActualProfit(_cubeId, msg.sender);\r\n            withdrawAmount[0] = profitInfo.profitDetail.assetProfit;\r\n            withdrawAmount[1] = profitInfo.profitDetail.assetLoss;\r\n            withdrawAmount[2] = user.assetAmount.add(profitInfo.profitDetail.assetProfit).sub(profitInfo.profitDetail.assetLoss);\r\n            hyperTokenProfit[0] = profitInfo.profitDetail.hyperTokenProfitBase;\r\n            hyperTokenProfit[1] = profitInfo.profitDetail.hyperTokenProfitBonus;\r\n            hyperTokenProfit[2] = profitInfo.profitDetail.hyperTokenProfitBase.add(profitInfo.profitDetail.hyperTokenProfitBonus);\r\n            hyperTokenWithdrawAmount = user.hyperTokenAmount;\r\n            totalUnlockedShares = user.shares;\r\n            cube.totals.hyperTokenAmount = cube.totals.hyperTokenAmount.sub(hyperTokenWithdrawAmount);\r\n            cube.totals.assetAmount = cube.totals.assetAmount.sub(user.assetAmount);\r\n            user.hyperTokenAmount = 0;\r\n            user.shares = 0;\r\n            user.assetAmount = 0;\r\n        }\r\n        if (block.timestamp >= user.earlyUnlockedValues.nextWithdrawalAllowed && user.earlyUnlockedValues.shares != 0) {\r\n            withdrawAmount[0] = withdrawAmount[0].add(user.earlyUnlockedValues.assetProfit);\r\n            withdrawAmount[1] = withdrawAmount[1].add(user.earlyUnlockedValues.assetLoss);\r\n            withdrawAmount[2] = withdrawAmount[2].add(user.earlyUnlockedValues.assetAmount).add(user.earlyUnlockedValues.assetProfit).sub(user.earlyUnlockedValues.assetLoss);\r\n            hyperTokenProfit[0] = hyperTokenProfit[0].add(user.earlyUnlockedValues.hyperTokenProfitBase);\r\n            hyperTokenProfit[1] = hyperTokenProfit[1].add(user.earlyUnlockedValues.hyperTokenProfitBonus);\r\n            hyperTokenProfit[2] = hyperTokenProfit[2].add(user.earlyUnlockedValues.hyperTokenProfitBase).add(user.earlyUnlockedValues.hyperTokenProfitBonus);\r\n            hyperTokenWithdrawAmount = hyperTokenWithdrawAmount.add(user.earlyUnlockedValues.hyperTokenAmount);\r\n            cube.totals.earlyUnlockedShares = cube.totals.earlyUnlockedShares.sub(user.earlyUnlockedValues.shares);\r\n        }\r\n        require(cube.asset.balanceOf(address(this)) >= withdrawAmount[2], \"E051\"); // withdraw: waiting for asset funds\r\n        require(hyperToken.balanceOf(address(this)) >= hyperTokenWithdrawAmount, \"E052\"); // withdraw: waiting for HYP funds\r\n        cube.totals.shares = cube.totals.shares.sub(totalUnlockedShares);\r\n        user.ledgerEntries.push(LedgerEntry({\r\n            timestamp: uint240(block.timestamp),\r\n            operationType: 2,\r\n            assetAmount: withdrawAmount[2],\r\n            shares: totalUnlockedShares,\r\n            profitAmount: withdrawAmount[0],\r\n            lossAmount: withdrawAmount[1],\r\n            hyperTokenAmount: hyperTokenWithdrawAmount,\r\n            hyperTokenProfitBase: hyperTokenProfit[0],\r\n            hyperTokenProfitBonus: hyperTokenProfit[1],\r\n            assetPrice: getLatestPrice(_cubeId),\r\n            hyperTokenPrice: getHyperTokenPrice(),\r\n            sharePrice: cube.sharePrice\r\n        }));\r\n        if (block.timestamp >= user.earlyUnlockedValues.nextWithdrawalAllowed && user.earlyUnlockedValues.shares != 0) {\r\n            cube.totals.earlyUnlockedAssetAmount = cube.totals.earlyUnlockedAssetAmount.sub(user.earlyUnlockedValues.assetAmount.add(user.earlyUnlockedValues.assetProfit).sub(user.earlyUnlockedValues.assetLoss));\r\n            user.earlyUnlockedValues = Unlocked({\r\n                shares: 0,\r\n                assetAmount: 0,\r\n                assetProfit: 0,\r\n                assetLoss: 0,\r\n                hyperTokenAmount: 0,\r\n                hyperTokenAmountUSD: 0,\r\n                hyperTokenProfitBase: 0,\r\n                hyperTokenProfitBonus: 0,\r\n                nextWithdrawalAllowed: 0\r\n            });\r\n        }\r\n        user.referralBonusBP = 0;\r\n        if (withdrawAmount[2] != 0) {\r\n            cube.asset.safeTransfer(address(msg.sender), withdrawAmount[2]);\r\n        }\r\n        if (hyperTokenProfit[2] != 0) {\r\n            hyperToken.mint(address(msg.sender), hyperTokenProfit[2]);\r\n        }\r\n        if (hyperTokenWithdrawAmount != 0) {\r\n            hyperToken.transfer(address(msg.sender), hyperTokenWithdrawAmount);\r\n        }\r\n        emit Withdraw(msg.sender, _cubeId, withdrawAmount[2]);\r\n    }\r\n\r\n    function getActualProfit(uint256 _cubeId, address _user) public view returns (ProfitInfo memory profitInfo) {\r\n        CubeInfo storage cube = cubeInfo[_cubeId];\r\n        UserInfo storage user = userInfo[_cubeId][_user];\r\n        ProfitInfo memory localProfitInfo = ProfitInfo({\r\n            assetInvestment: user.assetAmount.add(user.pendingAssetAmount),\r\n            hyperTokenInvestment: user.hyperTokenAmount,\r\n            hyperTokenInvestmentUSD: user.hyperTokenUSDvalue,\r\n            profitDetail: ProfitDetail({\r\n                assetProfit: 0,\r\n                assetLoss: 0,\r\n                hyperTokenProfitBase: 0,\r\n                hyperTokenProfitBonus: 0\r\n            }),\r\n            userElapsed: 0,\r\n            secondsToExpiration: 0,\r\n            assetPriceUSD: 0,\r\n            hyperTokenPrice: 0\r\n        });\r\n        localProfitInfo.assetPriceUSD = getLatestPrice(_cubeId);\r\n        localProfitInfo.hyperTokenPrice = getHyperTokenPrice();\r\n        uint256 limitTimestamp = block.timestamp;\r\n        if (limitTimestamp > cube.times.expiration) {\r\n            limitTimestamp = cube.times.expiration;\r\n        }\r\n        if (block.timestamp > cube.times.start) {\r\n            uint256 userElapsed = limitTimestamp - cube.times.start - user.avgEntrySecond;\r\n            if (cube.sharePrice > user.price && user.price != 0) {\r\n                localProfitInfo.profitDetail.assetProfit = (cube.sharePrice.sub(user.price)).mul(user.shares).div(1e12);\r\n                localProfitInfo.profitDetail.assetProfit = localProfitInfo.profitDetail.assetProfit.mul(10000 - cube.fees.performanceFeeBP).div(10000);\r\n                if (user.hyperTokenAmount != 0) {\r\n                    uint256 profitBP = cube.sharePrice.mul(10000).div(user.price).sub(10000);\r\n                    uint256 baseHyperTokenProfit = user.hyperTokenUSDvalue.mul(profitBP);\r\n                    uint256 bonusHyperTokenProfit = baseHyperTokenProfit.mul(user.bonusRewardBP.add(user.referralBonusBP)).div(10000);\r\n                    localProfitInfo.profitDetail.hyperTokenProfitBase = baseHyperTokenProfit.mul(1e14).div(localProfitInfo.hyperTokenPrice);\r\n                    localProfitInfo.profitDetail.hyperTokenProfitBonus = bonusHyperTokenProfit.mul(1e14).div(localProfitInfo.hyperTokenPrice);\r\n                }\r\n            } else if (cube.sharePrice < user.price && user.price != 0) {\r\n                localProfitInfo.profitDetail.assetLoss = (user.price.sub(cube.sharePrice)).mul(user.shares).div(1e12);\r\n            }\r\n            localProfitInfo.userElapsed = userElapsed;\r\n            localProfitInfo.secondsToExpiration = cube.times.expiration - limitTimestamp;\r\n        }\r\n        if (user.hyperTokenAmount == 0 && localProfitInfo.hyperTokenPrice != 0) {\r\n            localProfitInfo.profitDetail.hyperTokenProfitBonus = localProfitInfo.profitDetail.assetProfit.mul(localProfitInfo.assetPriceUSD).mul(user.bonusRewardBP.add(user.referralBonusBP)).div(localProfitInfo.hyperTokenPrice).div(10000);\r\n        }\r\n        return localProfitInfo;\r\n    }\r\n\r\n    function getTotalUserActualProfit(address _user) external view returns (uint256 usdInvestment, uint256 usdProfit, uint256 usdLoss, uint256 hyperTokenProfitBase, uint256 hyperTokenProfitBonus) {\r\n        for (uint256 id = 0; id < cubeInfo.length; id++) {\r\n            ProfitInfo memory profitInfo = getActualProfit(id, _user);\r\n            usdInvestment = usdInvestment.add(profitInfo.assetInvestment.mul(profitInfo.assetPriceUSD).div(1e18));\r\n            usdProfit = usdProfit.add(profitInfo.profitDetail.assetProfit.mul(profitInfo.assetPriceUSD).div(1e18));\r\n            usdLoss = usdLoss.add(profitInfo.profitDetail.assetLoss.mul(profitInfo.assetPriceUSD).div(1e18));\r\n            hyperTokenProfitBase = hyperTokenProfitBase.add(profitInfo.profitDetail.hyperTokenProfitBase);\r\n            hyperTokenProfitBonus = hyperTokenProfitBonus.add(profitInfo.profitDetail.hyperTokenProfitBonus);\r\n        }\r\n        return (usdInvestment, usdProfit, usdLoss, hyperTokenProfitBase, hyperTokenProfitBonus);\r\n    }\r\n    \r\n    function getLedgerEntries(uint256 _cubeId, address _user, uint256 _backLimit, uint256 _backStep) external view\r\n        returns (uint256 totalLedgerEntriesCount, uint256 thisListCount, LedgerEntry[] memory ledgerEntriesList) {\r\n        UserInfo storage user = userInfo[_cubeId][_user];\r\n        uint256 start = 0;\r\n        uint256 end = 0;\r\n        if (_backStep + _backLimit >= user.ledgerEntries.length) {\r\n            start = 0;\r\n            end = user.ledgerEntries.length;\r\n        } else {\r\n            start = user.ledgerEntries.length - _backStep - _backLimit;\r\n            end = user.ledgerEntries.length - _backStep;\r\n        }\r\n        uint256 count = end - start;\r\n        LedgerEntry[] memory le = new LedgerEntry[](count);\r\n        if (count > 0) {\r\n            count = 0;\r\n            for (uint256 t = start; t < end; t++) {\r\n                le[count] = user.ledgerEntries[t];\r\n                count++;\r\n            }\r\n        }\r\n        return (user.ledgerEntries.length, le.length, le);\r\n    }\r\n    \r\n    // Misc\r\n\r\n    function canWithdraw(uint256 _cubeId, address _user) public view returns (bool) {\r\n        CubeInfo storage cube = cubeInfo[_cubeId];\r\n        UserInfo storage user = userInfo[_cubeId][_user];\r\n        return (block.timestamp >= user.earlyUnlockedValues.nextWithdrawalAllowed && user.earlyUnlockedValues.nextWithdrawalAllowed != 0)\r\n            || (block.timestamp >= cube.times.expiration);\r\n    }\r\n    \r\n    function fundsAvailable(uint256 _cubeId, address _user) public view returns (bool) {\r\n        CubeInfo storage cube = cubeInfo[_cubeId];\r\n        UserInfo storage user = userInfo[_cubeId][_user];\r\n        return (cube.totals.lastAvailUpdate > user.earlyUnlockedValues.nextWithdrawalAllowed) \r\n            || (cube.totals.lastAvailUpdate > cube.times.expiration);\r\n    }\r\n    \r\n    function suspendedUserExists(uint256 _cubeId, address _user) public view returns (bool) {\r\n        CubeInfo storage cube = cubeInfo[_cubeId];\r\n        if (cube.suspendedUsersCount == 0) return false;\r\n        UserInfo storage user = userInfo[_cubeId][_user];\r\n        return (user.pendingAssetAmount != 0);\r\n    }\r\n    \r\n    function getBonusRewardBP(uint256 _usdValue) private view returns (uint256) {\r\n        for (uint256 id = bonuses.length; id > 0; id--) {\r\n            if (_usdValue > bonuses[id - 1].stepUSD) {\r\n                return bonuses[id - 1].bonusRewardBP;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function getUsdValue(uint256 _cubeId, uint256 _amount) external view returns (uint256) {\r\n        uint256 price = getLatestPrice(_cubeId);\r\n        return price.mul(_amount).div(1e18);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract HyperToken\",\"name\":\"_hyperToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_backendAddress\",\"type\":\"address\"},{\"internalType\":\"contract IHyperdexPair\",\"name\":\"_hyperTokenPricePair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IBEP20\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"AddCube\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldBackendAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBackendAddress\",\"type\":\"address\"}],\"name\":\"BackendAddressChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cubeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"DepositFromSuspended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cubeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EarlyUnlockShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExtractBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IBEP20\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExtractToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IHyperdexPair\",\"name\":\"oldHyperTokenPricePair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IHyperdexPair\",\"name\":\"_hyperTokenPricePair\",\"type\":\"address\"}],\"name\":\"HyperTokenPricePairChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cubeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hyperTokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"bonusID\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stepUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusRewardBP\",\"type\":\"uint256\"}],\"name\":\"SetBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cubeId\",\"type\":\"uint256\"}],\"name\":\"SetCube\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"StatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cubeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"availUpdate\",\"type\":\"bool\"}],\"name\":\"UpdateCube\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cubeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sharePrice\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositFeeBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFeeBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteedBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralBonusBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minHyperTokenRatioBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxHyperTokenRatioBP\",\"type\":\"uint256\"}],\"internalType\":\"struct FundManagerAlgo.Fees\",\"name\":\"_fees\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_managedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"addCube\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backendAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stepUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusRewardBP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cubeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cubeInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct FundManagerAlgo.Times\",\"name\":\"times\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositFeeBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFeeBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteedBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralBonusBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minHyperTokenRatioBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxHyperTokenRatioBP\",\"type\":\"uint256\"}],\"internalType\":\"struct FundManagerAlgo.Fees\",\"name\":\"fees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyUnlockedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyUnlockedAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAvailUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hyperTokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct FundManagerAlgo.Totals\",\"name\":\"totals\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"sharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"suspendedUsersCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"managedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cubeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cubeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"depositFromSuspended\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cubeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"}],\"name\":\"earlyUnlockShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"extractBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"extractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cubeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"fundsAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUsdAUM\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cubeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getActualProfit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"assetInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hyperTokenInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hyperTokenInvestmentUSD\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"assetProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetLoss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hyperTokenProfitBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hyperTokenProfitBonus\",\"type\":\"uint256\"}],\"internalType\":\"struct FundManagerAlgo.ProfitDetail\",\"name\":\"profitDetail\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"userElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsToExpiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hyperTokenPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct FundManagerAlgo.ProfitInfo\",\"name\":\"profitInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHyperTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_backendAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hyperToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hyperTokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cubeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_backLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_backStep\",\"type\":\"uint256\"}],\"name\":\"getLedgerEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLedgerEntriesCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thisListCount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint240\",\"name\":\"timestamp\",\"type\":\"uint240\"},{\"internalType\":\"uint16\",\"name\":\"operationType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lossAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hyperTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hyperTokenProfitBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hyperTokenProfitBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hyperTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePrice\",\"type\":\"uint256\"}],\"internalType\":\"struct FundManagerAlgo.LedgerEntry[]\",\"name\":\"ledgerEntriesList\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalUserActualProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdLoss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hyperTokenProfitBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hyperTokenProfitBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cubeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getUsdValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hyperToken\",\"outputs\":[{\"internalType\":\"contract HyperToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hyperTokenPricePair\",\"outputs\":[{\"internalType\":\"contract IHyperdexPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cubeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hyperTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_backendAddress\",\"type\":\"address\"}],\"name\":\"setBackendAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_bonusID\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_stepUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusRewardBP\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cubeId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositFeeBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFeeBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteedBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralBonusBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minHyperTokenRatioBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxHyperTokenRatioBP\",\"type\":\"uint256\"}],\"internalType\":\"struct FundManagerAlgo.Fees\",\"name\":\"_fees\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_managedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setCube\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHyperdexPair\",\"name\":\"_hyperTokenPricePair\",\"type\":\"address\"}],\"name\":\"setHyperTokenPricePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cubeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"suspendedUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cubeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_availUpdate\",\"type\":\"bool\"}],\"name\":\"updateCube\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hyperTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hyperTokenAmountUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetLoss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hyperTokenProfitBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hyperTokenProfitBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextWithdrawalAllowed\",\"type\":\"uint256\"}],\"internalType\":\"struct FundManagerAlgo.Unlocked\",\"name\":\"earlyUnlockedValues\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgEntrySecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hyperTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hyperTokenUSDvalue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusRewardBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralBonusBP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"referralUsed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cubeId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FundManagerAlgo", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "0000000000000000000000005caecd1e44b354568557bee3d1dc4b7c57fb11a60000000000000000000000004c7df612b3605a67d9e1865f0b7f7a9066ce38590000000000000000000000001cda9f2fe33598f9e33f5bac9dffa00840ef03aa", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2d1c256f8a440ae04909ad6fb7809694de5369595182cc79cf07a955432539b8"}