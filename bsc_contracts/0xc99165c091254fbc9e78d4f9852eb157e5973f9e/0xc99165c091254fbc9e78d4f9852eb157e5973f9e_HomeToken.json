{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom( address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n  function name() external view returns (string memory);\r\n  function symbol() external view returns (string memory);\r\n  function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address) { return msg.sender; }\r\n  function _msgData() internal view virtual returns (bytes calldata) { return msg.data; }\r\n}\r\n\r\ncontract Ownable is Context {\r\n  address public _owner;\r\n  address public _creator;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  constructor() {\r\n    _transferOwnership(_msgSender());\r\n    _creator = _msgSender();\r\n  }\r\n\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    _transferOwnership(address(0));\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal virtual {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n}\r\n\r\ninterface IFactory {\r\n\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\tfunction feeTo() external view returns (address);\r\n\tfunction feeToSetter() external view returns (address);\r\n\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\tfunction allPairs(uint256) external view returns (address pair);\r\n\tfunction allPairsLength() external view returns (uint256);\r\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n\tfunction setFeeTo(address) external;\r\n\tfunction setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IRouter {\r\n\tfunction factory() external pure returns (address);\r\n\tfunction WETH() external pure returns (address);\r\n\tfunction addLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 amountADesired,\r\n\t\tuint256 amountBDesired,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256 amountA, uint256 amountB, uint256 liquidity );\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 amountTokenDesired,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\tfunction swapExactTokensForTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\tfunction swapTokensForExactTokens(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\tfunction swapExactETHForTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable returns (uint256[] memory amounts);\r\n\tfunction swapTokensForExactETH(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\tfunction swapExactTokensForETH(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\tfunction swapETHForExactTokens(\r\n\t\tuint256 amountOut,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable returns (uint256[] memory amounts);\r\n\tfunction quote(\r\n\t\tuint256 amountA,\r\n\t\tuint256 reserveA,\r\n\t\tuint256 reserveB\r\n\t) external pure returns (uint256 amountB);\r\n\tfunction getAmountOut(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 reserveIn,\r\n\t\tuint256 reserveOut\r\n\t) external pure returns (uint256 amountOut);\r\n\tfunction getAmountIn(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 reserveIn,\r\n\t\tuint256 reserveOut\r\n\t) external pure returns (uint256 amountIn);\r\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external;\r\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external payable;\r\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external;\r\n\tfunction getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\tfunction getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b; require(c >= a, \"SafeMath: addition overflow\"); return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, \"SafeMath: subtraction overflow\"); }\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage); uint256 c = a - b; return c;\r\n  }\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) { return 0; }\r\n    uint256 c = a * b; require(c / a == b, \"SafeMath: multiplication overflow\");\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, \"SafeMath: division by zero\"); }\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage); uint256 c = a / b; return c;\r\n  }\r\n}\r\n\r\ncontract HomeToken is \r\n  Context\r\n  , Ownable\r\n  , IERC20\r\n  , IERC20Metadata\r\n{\r\n\r\n  using SafeMath for uint256;\r\n  string private _name = \"Home Token\";\r\n  string private _symbol = \"HOME\";\r\n  uint8 private _decimals = 18;\r\n  uint256 private _totalSupply;\r\n  uint256 private _taxBuy = 5;\r\n  uint256 private _taxSell = 5;    \r\n  uint256 public _taxDivider = 100;\r\n  uint256 public _taxSellTokenLimit = 250000000000000000000000;\r\n  uint256 public _maxTaxPercentage = 20;\r\n  \r\n    function setRndWallet(address input_) public onlyOwner { \r\n    require(input_ != address(0), \"Zero Address.\"); \r\n    _rndWallet = input_; \r\n        }\r\n\r\n    function setMktWallet(address input_) public onlyOwner { \r\n    require(input_ != address(0), \"Zero Address.\"); \r\n    _mktWallet = input_; \r\n        }\r\n\r\n    function SetTaxSellTokenLimit(uint256 input_) public onlyOwner { \r\n            _taxSellTokenLimit = input_; \r\n        }\r\n\r\n    function setTaxSell(uint256 input_) public onlyOwner { \r\n             require(input_ <= _maxTaxPercentage, \"Max set tax is 20\"); \r\n            _taxBuy = input_; \r\n        }\r\n\r\n    function setTaxBuy(uint256 input_) public onlyOwner {\r\n            require(input_ <= _maxTaxPercentage, \"Max set tax is 20\"); \r\n            _taxSell = input_;\r\n        }\r\n\r\n    function setTaxDivider(uint256 input_) public onlyOwner {\r\n            _taxDivider = input_;\r\n        }\r\n\r\n  address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n  address ZERO = address(0);\r\n  address ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n  address FACTORY = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\r\n  address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n  address public _rndWallet = 0xcaF725D3747CC754eFF8f2612A7D771561ba2946;\r\n  address public _mktWallet = 0x2852bC6CBb459CB1928348c99e4A2A7B185642b7;\r\n\r\n  address public _pair;\r\n  IRouter public _router;\r\n  bool public inSwap;\r\n  modifier swapping() { inSwap = true; _; inSwap = false; }\r\n  mapping(address => uint256) private _balances;\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n  mapping(address => bool) public _excludedBuyFee;\r\n  mapping(address => bool) public _excludedSellFee;\r\n  function changeExcludeBuyFee (address input_) public onlyOwner { _excludedBuyFee[input_] = !_excludedBuyFee[input_]; }\r\n  function changeExcludeSellFee (address input_) public onlyOwner { _excludedSellFee[input_] = !_excludedSellFee[input_]; }\r\n\r\n  constructor() {\r\n    emit OwnershipTransferred(address(0), _msgSender());\r\n    _router = IRouter(ROUTER);\r\n    _pair = IFactory(_router.factory()).createPair(WBNB, address(this));\r\n    _excludedSellFee[owner()] = true;\r\n    _excludedSellFee[address(this)] = true;\r\n    _excludedSellFee[DEAD] = true;\r\n    _excludedBuyFee[owner()] = true;\r\n    _excludedBuyFee[address(this)] = true;\r\n    _excludedBuyFee[DEAD] = true;\r\n    _allowances[address(this)][address(_router)] = ~uint256(0);\r\n    _mint(_msgSender(), 10000000000 * 10 ** uint256(_decimals));\r\n  }\r\n\r\n  receive() external payable {  }\r\n\r\n  function name() public view virtual override returns (string memory) { return _name; }\r\n  function symbol() public view virtual override returns (string memory) { return _symbol; }\r\n  function decimals() public view virtual override returns (uint8) { return _decimals; }\r\n  function totalSupply() public view virtual override returns (uint256) { return _totalSupply; }\r\n  function balanceOf(address account) public view virtual override returns (uint256) { return _balances[account]; }\r\n  function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; }\r\n  function currentBalance() public view returns(uint256) { return balanceOf(address(this)); }\r\n  function contractBalance() public view returns(uint256) { return address(this).balance; }\r\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    _transferTax(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    if(_allowances[sender][_msgSender()] != ~uint256(0)){\r\n      _allowances[sender][_msgSender()] = _allowances[sender][_msgSender()].sub(amount, \"Insufficient allowance.\");\r\n    }\r\n\r\n    _transferTax(sender, recipient, amount);\r\n\r\n    return true;\r\n  }\r\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n    return true;\r\n  }\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n    uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n    require(currentAllowance >= subtractedValue, \"token: decreased allowance below zero\");\r\n    unchecked {\r\n      _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function _transfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal virtual returns(bool) {\r\n    require(sender != address(0), \"token: transfer from the zero address\");\r\n    require(recipient != address(0), \"token: transfer to the zero address\");\r\n    uint256 senderBalance = _balances[sender];\r\n    require(senderBalance >= amount, \"token: transfer amount exceeds balance\");\r\n\r\n    unchecked {\r\n       _balances[sender] = senderBalance - amount;\r\n    }\r\n\r\n    _balances[recipient] += amount;\r\n    emit Transfer(sender, recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function _transferTax(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n    if(inSwap) return _transfer(sender, recipient, amount);\r\n\r\n    uint256 amountReceived = amount;\r\n\r\n    if (sender == _pair) { \r\n      _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n      if (!_excludedBuyFee[recipient]) {\r\n        amountReceived = takeFeeBuy(amount);\r\n      }\r\n    } else if (recipient == _pair) { \r\n      _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n      if (!_excludedSellFee[sender]) {\r\n        amountReceived = takeFeeSell(amount);\r\n        if ( _balances[address(this)] >= _taxSellTokenLimit){\r\n            distributeFee();\r\n        }\r\n      }\r\n    } else { \r\n      _transfer(sender, recipient, amount);\r\n       return true;\r\n    }\r\n    _balances[recipient] = _balances[recipient].add(amountReceived);\r\n    emit Transfer(sender, recipient, amountReceived);\r\n    return true;\r\n  }\r\n\r\n  function takeFeeBuy (uint256 amount_) private returns(uint256){\r\n    uint256 fee = _taxBuy.mul(amount_).div(_taxDivider);\r\n    _balances[address(this)] = _balances[address(this)].add(fee);\r\n    return amount_.sub(fee);\r\n  }\r\n\r\n  function takeFeeSell (uint256 amount_) private returns(uint256){\r\n    uint256 fee = _taxSell.mul(amount_).div(_taxDivider);\r\n    _balances[address(this)] = _balances[address(this)].add(fee);\r\n    return amount_.sub(fee);\r\n  }\r\n\r\n  function distributeFee () private swapping {\r\n    uint256 swapAmount = _balances[address(this)];\r\n    if (_balances[address(this)] > 0) {\r\n      address[] memory path = new address[](2);\r\n      path[0] = address(this);\r\n      path[1] = address(WBNB);\r\n      uint256 currentBNBBalance = address(this).balance;\r\n      try _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        swapAmount,\r\n        0,\r\n        path,\r\n        address(this),\r\n        block.timestamp\r\n      ) {\r\n        uint256 amountBNB = address(this).balance.sub(currentBNBBalance);\r\n        (bool sent_1, ) = payable(_rndWallet).call{value: (amountBNB * 60 / 100), gas: 30000}(\"\"); require(sent_1, \"Transfer wallet_1 error.\"); \r\n        (bool sent_2, ) = payable(_mktWallet).call{value: (amountBNB * 40 / 100), gas: 30000}(\"\"); require(sent_2, \"Transfer wallet_2 error.\");\r\n      } catch Error(string memory e) { emit DistributeFailed(e); }\r\n    }\r\n  }\r\n\r\n  event DistributeFailed(string message);\r\n\r\n  function _mint(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"token: mint to the zero address\");\r\n    _totalSupply += amount;\r\n    _balances[account] += amount;\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"token: burn from the zero address\");\r\n    uint256 accountBalance = _balances[account];\r\n    require(accountBalance >= amount, \"token: burn amount exceeds balance\");\r\n    unchecked {\r\n      _balances[account] = accountBalance - amount;\r\n    }\r\n    _totalSupply -= amount;\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(owner != address(0), \"token: approve from the zero address\");\r\n    require(spender != address(0), \"token: approve to the zero address\");\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"DistributeFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input_\",\"type\":\"uint256\"}],\"name\":\"SetTaxSellTokenLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_excludedBuyFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_excludedSellFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTaxPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mktWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rndWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSellTokenLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"input_\",\"type\":\"address\"}],\"name\":\"changeExcludeBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"input_\",\"type\":\"address\"}],\"name\":\"changeExcludeSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"input_\",\"type\":\"address\"}],\"name\":\"setMktWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"input_\",\"type\":\"address\"}],\"name\":\"setRndWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input_\",\"type\":\"uint256\"}],\"name\":\"setTaxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input_\",\"type\":\"uint256\"}],\"name\":\"setTaxDivider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input_\",\"type\":\"uint256\"}],\"name\":\"setTaxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HomeToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a71c01671d6ef7228c88f851e781544bcf24b55d8f8018bbec41378b192724c0"}