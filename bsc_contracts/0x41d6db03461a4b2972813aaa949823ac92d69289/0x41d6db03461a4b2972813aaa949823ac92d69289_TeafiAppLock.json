{"SourceCode": "/**\r\n teafi.app - TEA Factory\r\n https://thecheems.com/\r\n https://twitter.com/Cheems_coins\r\n https://t.me/cheems_channel\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        /**\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);*/\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Set storage set, bytes32 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return set._values[index];\r\n    }\r\n\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    function values(AddressSet storage set)\r\n        internal\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\ncontract CheemsLock is Context, Ownable{\r\n    using SafeMath for uint256;\r\n    constructor(){\r\n        _owner = _msgSender();\r\n    }\r\n    lockInfo public lockOwner;\r\n    struct lockInfo {\r\n        address addr;\r\n        address token;\r\n        uint256 lockDay;\r\n        uint256 lockTime;\r\n        uint256 amount;\r\n        bool isLine;\r\n        uint256 releaseAmount;//\r\n        uint256 releaseDays;//\r\n        uint256 lastClaim;//\r\n    }\r\n    function resetLockInfo(\r\n        address addr,\r\n        address token,\r\n        uint256 lockDay,\r\n        uint256 lockTime,\r\n        uint256 amount,\r\n        bool isLine,\r\n        uint256 releaseAmount,\r\n        uint256 releaseDays,\r\n        uint256 lastClaim\r\n    ) external onlyOwner{\r\n        lockOwner.addr = addr;\r\n        lockOwner.token = token;\r\n        lockOwner.lockDay = lockDay;\r\n        lockOwner.lockTime = lockTime;\r\n        lockOwner.amount = amount;\r\n        lockOwner.isLine = isLine;\r\n        lockOwner.releaseAmount = releaseAmount;\r\n        lockOwner.releaseDays = releaseDays;\r\n        lockOwner.lastClaim = lastClaim;\r\n\r\n    }\r\n    function receiveERC20(\r\n        address addr,\r\n        address to,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        IERC20 token = IERC20(addr);\r\n        if (amount == 0) {\r\n            amount = token.balanceOf(address(this));\r\n        }\r\n        token.transfer(to, amount);\r\n    }\r\n    //\u63d0\u53d6\u5408\u7ea6ETH\r\n    function receiveETH(address payable to, uint256 amount) external onlyOwner {\r\n        if (amount == 0) {\r\n            amount = payable(address(this)).balance;\r\n        }\r\n        to.transfer(amount);\r\n    }\r\n}\r\ninterface teafilock {\r\n    function receiveETH(address payable to, uint256 amount) external;\r\n    function resetLockInfo(address addr,address token,uint256 lockDay,uint256 lockTime,uint256 amount,bool isLine,uint256 releaseAmount,uint256 releaseDays,uint256 lastClaim) external;\r\n    function receiveERC20(address addr,address to,uint256 amount) external;\r\n}\r\ncontract TeafiAppLock is Context, Ownable {\r\n    using SafeMath for uint256;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    constructor(){\r\n        _owner = _msgSender();\r\n    }\r\n    struct lockInfo {\r\n        address owner;\r\n        address token;\r\n        uint256 lockDay;\r\n        uint256 lockTime;\r\n        uint256 amount;\r\n        bool isLine;\r\n        uint256 releaseAmount;\r\n        uint256 releaseDays;\r\n        uint256 lastClaim;\r\n        address lockAddr;\r\n        uint256 balance;\r\n    }\r\n    mapping(address => lockInfo)  public lockOwner;\r\n    mapping(address => EnumerableSet.AddressSet) private tokenPools;\r\n    function deployLock(address addr,uint256 amount,uint256 lockDay,bool isLine,uint256 releaseAmount,uint256 releaseDays) external payable{\r\n        CheemsLock _lock = new CheemsLock();\r\n        IERC20 token = IERC20(addr);\r\n        address lockAddr = address(_lock);\r\n        if (amount == 0) {\r\n            amount = token.balanceOf(address(this));\r\n        }\r\n        tokenPools[addr].add(lockAddr);\r\n        \r\n        token.transferFrom(msg.sender, lockAddr, amount);\r\n        uint256 balance = token.balanceOf(lockAddr);\r\n        lockOwner[lockAddr] = lockInfo(_msgSender(),addr,lockDay,block.timestamp,amount,isLine,releaseAmount,releaseDays,block.timestamp,lockAddr,balance);\r\n        _lock.resetLockInfo(\r\n            lockOwner[lockAddr].owner, \r\n            lockOwner[lockAddr].token, \r\n            lockOwner[lockAddr].lockDay, \r\n            lockOwner[lockAddr].lockTime, \r\n            lockOwner[lockAddr].amount, \r\n            lockOwner[lockAddr].isLine, \r\n            lockOwner[lockAddr].releaseAmount, \r\n            lockOwner[lockAddr].releaseDays, \r\n            lockOwner[lockAddr].lastClaim\r\n        );\r\n        checkSubscribe(msg.sender,checkTxPrice);\r\n        emit Deploy(lockAddr);\r\n    }\r\n    event Deploy(address addr);\r\n    \r\n    function transferETH(address lockAddr,address payable to, uint256 amount) external  {\r\n        require(lockOwner[lockAddr].owner == _msgSender(),\"not owner\");\r\n        bool _unlock = block.timestamp >= lockOwner[lockAddr].lockTime + lockOwner[lockAddr].lockDay * 1 days;\r\n        require(_unlock,\"not unlock\");\r\n        teafilock _lock = teafilock(lockAddr);\r\n        if (amount == 0) {\r\n            amount = payable(address(_lock)).balance;\r\n        }\r\n        _lock.receiveETH(to,amount);\r\n    }\r\n    function transferERC20(address lockAddr,address token, uint256 amount) external  {\r\n        require(lockOwner[lockAddr].owner == _msgSender(),\"not owner\");\r\n        bool _unlock = block.timestamp >= lockOwner[lockAddr].lockTime + lockOwner[lockAddr].lockDay * 1 days;\r\n        require(_unlock,\"not unlock\");\r\n        teafilock _lock = teafilock(lockAddr);\r\n        if (amount == 0) {\r\n            amount = payable(address(_lock)).balance;\r\n        }\r\n        _lock.receiveERC20(token,_msgSender(),amount);\r\n    }\r\n    function checkUnlockTime(address lockAddr) public view returns(uint256){\r\n        return lockOwner[lockAddr].lockTime + lockOwner[lockAddr].lockDay * 1 days;\r\n    }\r\n    function checkNowTime() public view returns(uint256){\r\n        return block.timestamp;\r\n    }\r\n    function unlockClaim(address lockAddr,uint256 amount)external{\r\n        require(lockOwner[lockAddr].owner == _msgSender(),\"not owner\");\r\n        teafilock _lock = teafilock(lockAddr);\r\n        bool _unlock = block.timestamp >= lockOwner[lockAddr].lockTime + lockOwner[lockAddr].lockDay * 1 days;\r\n        if(lockOwner[lockAddr].isLine && !_unlock){\r\n            require(block.timestamp >= lockOwner[lockAddr].lastClaim + lockOwner[lockAddr].releaseDays * 1 days,\"not unlock\");\r\n            require(lockOwner[lockAddr].releaseAmount>0 && lockOwner[lockAddr].releaseDays>0,\"releaseAmount is 0\");\r\n            lockOwner[lockAddr].lastClaim = block.timestamp;\r\n            _lock.receiveERC20(lockOwner[lockAddr].token,_msgSender(),lockOwner[lockAddr].releaseAmount);\r\n            _lock.resetLockInfo(\r\n                lockOwner[lockAddr].owner, \r\n                lockOwner[lockAddr].token, \r\n                lockOwner[lockAddr].lockDay, \r\n                lockOwner[lockAddr].lockTime, \r\n                lockOwner[lockAddr].amount, \r\n                lockOwner[lockAddr].isLine, \r\n                lockOwner[lockAddr].releaseAmount, \r\n                lockOwner[lockAddr].releaseDays, \r\n                lockOwner[lockAddr].lastClaim\r\n            );\r\n        }else {\r\n            require(_unlock,\"not unlock\");\r\n            _lock.receiveERC20(lockOwner[lockAddr].token,_msgSender(),amount);\r\n        }\r\n        IERC20 token = IERC20(lockOwner[lockAddr].token);\r\n        uint256 balance = token.balanceOf(lockAddr);\r\n        lockOwner[lockAddr].balance = balance;\r\n    }\r\n    function addLockTime(address lockAddr,uint256 lockDay)external{\r\n        require(lockOwner[lockAddr].owner == _msgSender(),\"not owner\");\r\n        //require(block.timestamp >= lockOwner[lockAddr].lockTime + lockOwner[lockAddr].lockDay * 1 days,\"not unlock\");\r\n        if(block.timestamp >= lockOwner[lockAddr].lockTime + lockOwner[lockAddr].lockDay * 1 days){\r\n            lockOwner[lockAddr].lockTime = block.timestamp;\r\n            lockOwner[lockAddr].lockDay = lockDay;\r\n        }else{\r\n            lockOwner[lockAddr].lockDay = lockOwner[lockAddr].lockDay + lockDay;\r\n        }\r\n    }\r\n    function transferLock(address lockAddr,address to)external{\r\n        require(lockOwner[lockAddr].owner == _msgSender(),\"not owner\");\r\n        lockOwner[lockAddr].owner = to;\r\n        teafilock _lock = teafilock(lockAddr);\r\n        _lock.resetLockInfo(\r\n                lockOwner[lockAddr].owner, \r\n                lockOwner[lockAddr].token, \r\n                lockOwner[lockAddr].lockDay, \r\n                lockOwner[lockAddr].lockTime, \r\n                lockOwner[lockAddr].amount, \r\n                lockOwner[lockAddr].isLine, \r\n                lockOwner[lockAddr].releaseAmount, \r\n                lockOwner[lockAddr].releaseDays, \r\n                lockOwner[lockAddr].lastClaim\r\n            );\r\n    }\r\n\r\n    function getLockLength(address addr) external view returns (uint256) {\r\n        return tokenPools[addr].length();\r\n    }\r\n\r\n    function getLockList(\r\n        address tokenAddr,\r\n        uint256 from,\r\n        uint256 limit\r\n    ) external view returns (lockInfo[] memory items) {\r\n        items = new lockInfo[](limit);\r\n        uint256 length = tokenPools[tokenAddr].length();\r\n        if (from + limit > length) {\r\n            limit = length.sub(from);\r\n        }\r\n        address addr;\r\n        for (uint256 index = 0; index < limit; index++) {\r\n            addr = tokenPools[tokenAddr].at(from + index);\r\n            items[index] = lockOwner[addr];\r\n        }\r\n    }\r\n\r\n\r\n    \r\n    uint256 public callPay = 0.1 ether;//\r\n    uint256 public callFee = 0.005 ether;//\r\n    uint256 public checkTxPrice = 0.002 ether;//\r\n    mapping(address => uint256) public subscribeList;\r\n    function setTxPrice(uint256 _feeprice,uint256 _txPrice,uint256 _callPay) external onlyOwner {\r\n        callFee = _feeprice;\r\n        checkTxPrice = _txPrice;\r\n        callPay = _callPay;\r\n    }\r\n    function checkSubscribe(address addr,uint256 fee) private{\r\n        if(block.timestamp > subscribeList[addr]){\r\n            require(msg.value >= fee, \"INSUFFICIENT_BALANCE\");\r\n        }\r\n    }\r\n    \r\n    function subscribe() external payable{\r\n        require(msg.value >= callPay, \"TeaFactory: insufficient funds\");\r\n        uint256 multiplier = msg.value / callPay;\r\n        uint256 daysToAdd = 1 + multiplier / 10;\r\n        uint256 currentSubscription = subscribeList[msg.sender];\r\n        uint256 newSubscriptionTime;\r\n        if (currentSubscription < block.timestamp) {\r\n            newSubscriptionTime = block.timestamp + (multiplier * daysToAdd * 1 days);\r\n        } else {\r\n            newSubscriptionTime = currentSubscription + (multiplier * daysToAdd * 1 days);\r\n        }\r\n        subscribeList[msg.sender] = newSubscriptionTime;\r\n    }\r\n    function receiveERC20(\r\n        address addr,\r\n        address to,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        IERC20 token = IERC20(addr);\r\n        if (amount == 0) {\r\n            amount = token.balanceOf(address(this));\r\n        }\r\n        token.transfer(to, amount);\r\n    }\r\n    \r\n    function receiveETH(address payable to, uint256 amount) external onlyOwner {\r\n        if (amount == 0) {\r\n            amount = payable(address(this)).balance;\r\n        }\r\n        to.transfer(amount);\r\n    }\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Deploy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lockAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockDay\",\"type\":\"uint256\"}],\"name\":\"addLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callPay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkNowTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkTxPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lockAddr\",\"type\":\"address\"}],\"name\":\"checkUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDay\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLine\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDays\",\"type\":\"uint256\"}],\"name\":\"deployLock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getLockLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getLockList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLine\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lockAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct TeafiAppLock.lockInfo[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLine\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lockAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receiveERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receiveETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeprice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_txPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_callPay\",\"type\":\"uint256\"}],\"name\":\"setTxPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscribeList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lockAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lockAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lockAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lockAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TeafiAppLock", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://68395a4636642c63a05f89f1958541bf83df7b62e57e6cdbf8a737622bac39a8"}