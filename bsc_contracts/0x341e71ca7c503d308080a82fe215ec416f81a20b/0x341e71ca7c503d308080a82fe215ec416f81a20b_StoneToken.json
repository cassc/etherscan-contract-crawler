{"SourceCode": "pragma solidity 0.8.0;\r\n//SPDX-License-Identifier: UNLICENSED\r\n    \r\ninterface IBEP20 {\r\n    /**\r\n    * @dev Returns the amount of tokens in existence.\r\n    */\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    /**\r\n    * @dev Returns the token decimals.\r\n    */\r\n    function decimals() external view returns (uint8);\r\n    \r\n    /**\r\n    * @dev Returns the token symbol.\r\n    */\r\n    function symbol() external view returns (string memory);\r\n    \r\n    /**\r\n    * @dev Returns the token name.\r\n    */\r\n    function name() external view returns (string memory);\r\n    \r\n    /**\r\n    * @dev Returns the bep token owner.\r\n    */\r\n    function getOwner() external view returns (address);\r\n    \r\n    /**\r\n    * @dev Returns the amount of tokens owned by `account`.\r\n    */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n    * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    \r\n    /**\r\n    * @dev Returns the remaining number of tokens that `spender` will be\r\n    * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n    * zero by default.\r\n    *\r\n    * This value changes when {approve} or {transferFrom} are called.\r\n    */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    \r\n    /**\r\n    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n    * that someone may use both the old and the new allowance by unfortunate\r\n    * transaction ordering. One possible solution to mitigate this race\r\n    * condition is to first reduce the spender's allowance to 0 and set the\r\n    * desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    *\r\n    * Emits an {Approval} event.\r\n    */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    \r\n    /**\r\n    * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n    * allowance mechanism. `amount` is then deducted from the caller's\r\n    * allowance.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    /**\r\n    * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n    * another (`to`).\r\n    *\r\n    * Note that `value` may be zero.\r\n    */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    /**\r\n    * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n    * a call to {approve}. `value` is the new allowance.\r\n    */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Multiple administrators interface:\r\n * - Checks requiring a percentage of administrators to sign N times before executing functions\r\n * - Alive signatures: in case an admin does not execute any function in X days they will be marked as inactive, this is to avoid locking the signatures in case some admin loses its keys\r\n */\r\nabstract contract Administrable{\r\n    uint8 constant _percentageSignatures = 66;              // Percentage of admins required to sign\r\n    uint256 constant _adminExpiration = 60 days;            // Time after which an admin is marked as inactive if it does not execute any function\r\n    uint256 constant _signatureExpiration = 5 minutes;      // Duration of an admin signature, after which it will expire and will need to be signed again\r\n    uint256 constant _signatureSetExpiration = 10 minutes;  // Duration of an admins signature set, after which it will expire and will need to be validated again\r\n    \r\n    mapping (address => bool) internal _adminsMap;              // Map of admins, for fast check\r\n    address[] internal _adminsList;                             // Array of admins, for iteration\r\n    mapping (address => uint256) internal _adminsLastActivity;  // Last time an admin has called a function: admin => timestamp\r\n    uint8 internal _adminsSignaturesCause;                      // Cause for which the admins are currently signing: 1 = add admin, 2 = remove admin, 3 = lock contract, other values depend on implementation\r\n    address internal _adminSignaturesTarget;                    // User to add/remove from admins, used for signing causes 1 or 2\r\n    mapping (address => uint256) internal _adminsSignatures;    // Admins signature time: admin => timestamp\r\n    uint8 internal _adminsSignaturesSets = 0;                   // Times all the admins signed together, this is used for stronger actions which require all the admins signing together twice, three times, ...\r\n    uint256 internal _adminsSignaturesSetsCreation = 0;         // Timestamp of the last signature set creation\r\n    \r\n    bool internal _contractLocked = false;  // If true, the contract can be no longer executed, only reading functions are available\r\n    \r\n    event AddedAdministrator(address indexed admin);    // Called when a new admin is nominated\r\n    event RemovedAdministrator(address indexed admin);  // Called when an admin is removed\r\n\r\n\r\n    /**\r\n     * @dev Add the contract creator as the first admin\r\n     */\r\n    constructor (){\r\n        _addAdmin(msg.sender);\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns true if the contract is locked and cannot be interacted with\r\n     */\r\n    function isLocked() external view returns (bool){\r\n        return _contractLocked;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the addresses of the current admins.\r\n     */\r\n    function adminsList() external view returns (address[] memory){\r\n        return _adminsList;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the number of current admins.\r\n     */\r\n    function adminsNumber() external view returns (uint){\r\n        return _adminsList.length;\r\n    }\r\n    \r\n    /**\r\n     * @dev Checks if a given user is an admin\r\n     */\r\n    function isAdmin(address user) external view returns (bool){\r\n        return _adminsMap[user];\r\n    }\r\n    \r\n    /**\r\n     * @dev Checks if a given admin is active\r\n     */\r\n    function isAdminActive(address admin) external view returns (bool){\r\n        require(_adminsMap[admin], \"Administrable: passed user is not admin\");\r\n        return (_adminsLastActivity[admin] >= block.timestamp - _adminExpiration);\r\n    }\r\n    \r\n    /**\r\n     * @dev Add a new admin\r\n     */\r\n    function addAdmin() external notLocked requireAdmin requireAdminSignatureSets(1, 1){\r\n        require(!_adminsMap[_adminSignaturesTarget], \"Administrable: user is already admin\");\r\n        _addAdmin(_adminSignaturesTarget);\r\n    }\r\n    \r\n    /**\r\n     * @dev Remove an existing admin, this checks for admin signatures excluding inactive admins, this prevents getting stuck if some admin lost access to their keys\r\n     * To remove an inactive admin the required percentage is calculated on the remaining active admins, to remove an active admin the percentage is calculated on the total number of admins\r\n     */\r\n    function removeAdmin() external notLocked requireAdmin{\r\n        // Check if the cause corresponds to the cause being signed\r\n        require(2 == _adminsSignaturesCause, \"Administrable: signature cause does not correspond to the function cause\");\r\n        \r\n        // Check all the admin signatures, except the inactive ones\r\n        uint16 activeAdmins = 0;\r\n        uint16 signatures = 0;\r\n        for(uint i = 0; i < _adminsList.length; i++){\r\n            // Check if the admin is active\r\n            if(_adminsLastActivity[_adminsList[i]] >= block.timestamp - _adminExpiration){\r\n                activeAdmins++;\r\n                \r\n                // Check if it signed\r\n                if(_adminsSignatures[_adminsList[i]] >= block.timestamp - _signatureExpiration)\r\n                    signatures++;\r\n            }\r\n        }\r\n        \r\n        // Check if we have a minimum amount of signatures\r\n        require(activeAdmins > 0, \"Administrable: all admins are inactive or haven't signed\");\r\n        require(signatures >= (((_adminsLastActivity[_adminSignaturesTarget] >= block.timestamp - _adminExpiration ? _adminsList.length : activeAdmins) * _percentageSignatures) + 50) / 100, \"Administrable: not all admins signed or some signatures expired\");\r\n        \r\n        // Remove the admin\r\n        _removeAdmin(_adminSignaturesTarget);\r\n        \r\n        // Reset the signatures and sets\r\n        _resetSignaturesAndSets();\r\n    }\r\n    \r\n    /**\r\n     * @dev Permanently disables the contract, leaving only read-only interactions available\r\n     */\r\n    function lockContract() public notLocked requireAdmin requireAdminSignatureSets(3, 3){\r\n        _contractLocked = true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Retrieves the admins signatures cause\r\n     */\r\n    function adminSignaturesCause() external view returns (uint8){\r\n        return _adminsSignaturesCause;\r\n    }\r\n    \r\n    /**\r\n     * @dev Changes the admins signatures cause if there are no signatures already\r\n     */\r\n    function adminSetSignaturesCause(uint8 cause) external notLocked requireAdmin notSigned{\r\n        _adminsSignaturesCause = cause;\r\n        //_resetSignaturesAndSets();\r\n    }\r\n    \r\n    /**\r\n     * @dev Retrieves the user that will be targeted in the next admin signatures\r\n     */\r\n    function adminSignaturesTarget() external view returns (address){\r\n        return _adminSignaturesTarget;\r\n    }\r\n    \r\n    /**\r\n     * @dev Changes the admins signatures target if there are no signatures already\r\n     */\r\n    function adminSetSignaturesTarget(address user) external notLocked requireAdmin notSigned{\r\n        _adminSignaturesTarget = user;\r\n        //_resetSignaturesAndSets();\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the number of times the admins signed together\r\n     */\r\n    function adminSignatureSets() external view returns (uint8){\r\n        return _adminsSignaturesSets;\r\n    }\r\n    \r\n    /**\r\n     * @dev Puts an admin signature to allow calling function requiring all admins signatures\r\n     */\r\n    function adminSign() public notLocked requireAdmin{\r\n        // Check if the admin already signed\r\n        require(_adminsSignatures[msg.sender] < block.timestamp - _signatureExpiration, \"Administrable: the admin already signed\");\r\n        \r\n        // Update the signature\r\n        _adminsSignatures[msg.sender] = block.timestamp;\r\n    }\r\n    \r\n    /**\r\n     * @dev Checks if all admins signed\r\n     */\r\n    function checkSignatures() external view returns (bool){\r\n        return _checkSignatures();\r\n    }\r\n    \r\n    /**\r\n     * @dev Checks all the admins signatures and creates a new set if all valid, this should be called when more than 1 set is needed\r\n     */\r\n    function adminValidateSignatures() external notLocked requireAdmin{\r\n        // Check all the admin signatures\r\n        require(_checkSignatures(), \"Administrable: not all admins signed or some signatures expired\");\r\n        \r\n        // Check that the previous set has not expired (if any), and update time\r\n        if(_adminsSignaturesSets > 0 && _adminsSignaturesSetsCreation < block.timestamp - _signatureSetExpiration)\r\n            _adminsSignaturesSets = 1;\r\n        else\r\n            _adminsSignaturesSets++;\r\n        _adminsSignaturesSetsCreation = block.timestamp;\r\n        \r\n        // Reset the signatures, to allow signing again\r\n        _resetSignatures();\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev Throws if the contract is locked\r\n     */\r\n    modifier notLocked(){\r\n        require(!_contractLocked, \"Administrable: contract locked\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Throws if called by any account other than admins, also updates last activity at the end\r\n     */\r\n    modifier requireAdmin(){\r\n        // Check if the user is an admin\r\n        require(_adminsMap[msg.sender], \"Administrable: caller is not an admin\");\r\n        \r\n        // Execute function\r\n        _;\r\n        \r\n        // Update last activity to now\r\n        _adminsLastActivity[msg.sender] = block.timestamp;\r\n    }\r\n    \r\n    /**\r\n     * @dev Throws if there is at least a signature set or at least one signature\r\n     */\r\n    modifier notSigned(){\r\n        // Check that there are no signatures sets active\r\n        require(_adminsSignaturesSets == 0 || _adminsSignaturesSetsCreation < block.timestamp - _signatureSetExpiration, \"Administrable: one or more admin signatures sets are active\");\r\n        \r\n        // Check that no signature is available\r\n        for(uint i = 0; i < _adminsList.length; i++){\r\n            require(_adminsSignatures[_adminsList[i]] < block.timestamp - _signatureExpiration, \"Administrable: one or more admin signatures are active\");\r\n        }\r\n        \r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Throws if there are admin signatures or sets missing\r\n     */\r\n    modifier requireAdminSignatureSets(uint sets, uint cause){\r\n        // Check if the cause corresponds to the cause being signed\r\n        require(cause == _adminsSignaturesCause, \"Administrable: signature cause does not correspond to the function cause\");\r\n        \r\n        // Check if any previous signature sets expired\r\n        require(sets == 1 || (_adminsSignaturesSets >= sets-1 && _adminsSignaturesSetsCreation >= block.timestamp - _signatureSetExpiration), \"Administrable: missing signature sets or expired signature sets\");\r\n        \r\n        // If we are missing a signature set check all the admin signatures\r\n        if(_adminsSignaturesSets == sets-1)\r\n            require(_checkSignatures(), \"Administrable: not all admins signed or some signatures expired\");\r\n        \r\n        // Execute function\r\n        _;\r\n        \r\n        // Reset the signatures and sets\r\n        _resetSignaturesAndSets();\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev Adds an admin to the list and the map\r\n     */\r\n    function _addAdmin(address user) internal{\r\n        _adminsList.push(user);\r\n        _adminsMap[user] = true;\r\n        _adminsLastActivity[user] = block.timestamp;\r\n        emit AddedAdministrator(user);\r\n    }\r\n    \r\n    /**\r\n     * @dev Removes an admin from the list and the map\r\n     */\r\n    function _removeAdmin(address admin) internal{\r\n        // Delete the admin from the map\r\n        _adminsMap[admin] = false;\r\n        \r\n        // Delete the admin from the list\r\n        for(uint i = 0; i < _adminsList.length; i++){\r\n            if(_adminsList[i] == admin){\r\n                // Copy the last key to the current and shorten the array length by one\r\n                _adminsList[i] = _adminsList[_adminsList.length-1];\r\n                _adminsList.pop();\r\n                emit RemovedAdministrator(admin);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Checks if all admins signed\r\n     */\r\n    function _checkSignatures() internal view returns (bool){\r\n        // Retrieve the number of required admins\r\n        uint16 minAdmins = ((uint16(_adminsList.length) * _percentageSignatures) + 50) / 100;\r\n        \r\n        // Check the signatures\r\n        uint16 signatures = 0;\r\n        for(uint i = 0; i < _adminsList.length; i++){\r\n            if(_adminsSignatures[_adminsList[i]] >= block.timestamp - _signatureExpiration){\r\n                signatures++;\r\n                if(signatures >= minAdmins)\r\n                    return true;\r\n            }\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    /**\r\n     * @dev Deletes all the signatures\r\n     */\r\n    function _resetSignatures() internal{\r\n        // Reset all the signatures\r\n        for(uint i = 0; i < _adminsList.length; i++){\r\n            _adminsSignatures[_adminsList[i]] = 0;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Deletes all the signatures and resets any previous sets\r\n     */\r\n    function _resetSignaturesAndSets() internal{\r\n        // Reset the sets\r\n        _adminsSignaturesSets = 0;\r\n        \r\n        // Reset all the signatures\r\n        _resetSignatures();\r\n    }\r\n}\r\n\r\ncontract StoneToken is IBEP20, Administrable {\r\n  //uint8 _adminsSignaturesCause;   // 4 = mint, 5 = disable minting\r\n    \r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n  uint256 private _totalSupply;\r\n  uint8 private _decimals;\r\n  string private _symbol;\r\n  string private _name;\r\n  \r\n  bool private _canMint = true;\r\n  address[] _mintAddresses;\r\n  uint256[] _mintAmounts;\r\n\r\n  constructor() {\r\n    _name = \"Stone Token\";\r\n    _symbol = \"STONE\";\r\n    _decimals = 2;\r\n    _totalSupply = 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() override external view returns (address) {\r\n    // The named owner will be the first admin, this is required by the BEP-20 standard\r\n    return _adminsList[0];\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() override external view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() override external view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() override external view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-totalSupply}.\r\n   */\r\n  function totalSupply() override external view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-balanceOf}.\r\n   */\r\n  function balanceOf(address account) override external view returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-transfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `recipient` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n  function transfer(address recipient, uint256 amount) override external notLocked returns (bool) {\r\n    _transfer(msg.sender, recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-allowance}.\r\n   */\r\n  function allowance(address owner, address spender) override external view returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-approve}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function approve(address spender, uint256 amount) override external notLocked returns (bool) {\r\n    _approve(msg.sender, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-transferFrom}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance. This is not\r\n   * required by the EIP. See the note at the beginning of {BEP20};\r\n   *\r\n   * Requirements:\r\n   * - `sender` and `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   * - the caller must have allowance for `sender`'s tokens of at least\r\n   * `amount`.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) override external notLocked returns (bool) {\r\n    require(_allowances[sender][msg.sender] >= amount, \"BEP20: transfer amount exceeds allowance\");\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {BEP20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue) external notLocked returns (bool) {\r\n    _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {BEP20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subtractedValue`.\r\n   */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) external notLocked returns (bool) {\r\n    _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * @dev Returns true if more tokens can be minted, false if it is locked\r\n   */\r\n  function canMint() external view returns (bool){\r\n      return _canMint;\r\n  }\r\n  \r\n  /**\r\n   * @dev Permanently disables minting of new tokens\r\n   */\r\n  function disableMinting() external notLocked requireAdmin requireAdminSignatureSets(2, 5){\r\n      _canMint = false;\r\n  }\r\n  \r\n  /**\r\n   * @dev Throws if minting is locked\r\n   */\r\n  modifier mintingEnabled(){\r\n      require(_canMint, \"Token minting locked\");\r\n      _;\r\n  }\r\n  \r\n  /**\r\n   * @dev Reads the addresses list for minting\r\n   */\r\n  function mintAddresses() external view returns (address[] memory){\r\n      return _mintAddresses;\r\n  }\r\n  \r\n  /**\r\n   * @dev Sets the addresses list for minting\r\n   */\r\n  function mintSetAddresses(address[] memory addresses) external notLocked requireAdmin mintingEnabled notSigned returns (bool) {\r\n    _mintAddresses = addresses;\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * @dev Reads the amounts list for minting\r\n   */\r\n  function mintAmounts() external view returns (uint256[] memory){\r\n      return _mintAmounts;\r\n  }\r\n  \r\n  /**\r\n   * @dev Calculates the total amount to be minted\r\n   */\r\n  function mintTotalAmount() external view returns (uint256){\r\n      uint256 length = (_mintAddresses.length < _mintAmounts.length ? _mintAddresses.length : _mintAmounts.length);\r\n      uint256 total = 0;\r\n      for(uint i = 0; i < length; i++){\r\n          total = total + _mintAmounts[i];\r\n      }\r\n      return total;\r\n  }\r\n  \r\n  /**\r\n   * @dev Sets the amounts list for minting\r\n   */\r\n  function mintSetAmounts(uint256[] memory amounts) external notLocked requireAdmin mintingEnabled notSigned returns (bool) {\r\n    _mintAmounts = amounts;\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * @dev Creates tokens based on the previously loaded addresses and amounts. This requires 1 signature set from admins\r\n   */\r\n  function mint() external notLocked requireAdmin mintingEnabled requireAdminSignatureSets(1, 4) returns (bool) {\r\n    // Min length\r\n    uint256 length = (_mintAddresses.length < _mintAmounts.length ? _mintAddresses.length : _mintAmounts.length);\r\n    for(uint i = 0; i < length; i++){\r\n        if(_mintAmounts[i] > 0)\r\n            _mint(_mintAddresses[i], _mintAmounts[i]);\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * @dev Burns `amount` tokens from `msg.sender`\r\n   */\r\n  function burn(uint256 amount) external notLocked returns (bool){\r\n      _burn(msg.sender, amount);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n   *\r\n   * This is internal function is equivalent to {transfer}, and can be used to\r\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `sender` cannot be the zero address.\r\n   * - `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   */\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n    require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n    \r\n    require(_balances[sender] >= amount, \"BEP20: transfer amount exceeds balance\");\r\n    _balances[sender] = _balances[sender] - amount;\r\n    _balances[recipient] = _balances[recipient] + amount;\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n   * the total supply.\r\n   *\r\n   * Emits a {Transfer} event with `from` set to the zero address.\r\n   *\r\n   * Requirements\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   */\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(account != address(0), \"BEP20: mint to the zero address\");\r\n\r\n    _totalSupply = _totalSupply + amount;\r\n    _balances[account] = _balances[account] + amount;\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `amount` tokens from `account`, reducing the\r\n   * total supply.\r\n   *\r\n   * Emits a {Transfer} event with `to` set to the zero address.\r\n   *\r\n   * Requirements\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   * - `account` must have at least `amount` tokens.\r\n   */\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n    require(_balances[account] >= amount, \"BEP20: burn amount exceeds balance\");\r\n    _balances[account] = _balances[account] - amount;\r\n    _totalSupply = _totalSupply - amount;\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n   *\r\n   * This is internal function is equivalent to `approve`, and can be used to\r\n   * e.g. set automatic allowances for certain subsystems, etc.\r\n   *\r\n   * Emits an {Approval} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `owner` cannot be the zero address.\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0), \"BEP20: approve from the zero address\");\r\n    require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddedAdministrator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"RemovedAdministrator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"cause\",\"type\":\"uint8\"}],\"name\":\"adminSetSignaturesCause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"adminSetSignaturesTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminSign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminSignatureSets\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminSignaturesCause\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminSignaturesTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminValidateSignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminsList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminsNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkSignatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isAdminActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"mintSetAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintSetAmounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StoneToken", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://44c109f1470190ada919e8a3739a8408775089a9b922b0b556b3f50b7bc2f250"}