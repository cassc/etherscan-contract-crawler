{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC721 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function getAmountsIn(\r\n        uint amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function feeTo() external view returns (address);\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function sync() external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\ncontract NFTRewards {\r\n    address public owner;\r\n    address public dev;\r\n    address public token;\r\n    address public nft;\r\n    uint256 public holderRewardCondition;\r\n\r\n    constructor(\r\n        address _dev,\r\n        address _token,\r\n        address _nft,\r\n        uint256 _holderRewardCondition\r\n    ) {\r\n        owner = msg.sender;\r\n        dev = _dev;\r\n        token = _token;\r\n        nft = _nft;\r\n        holderRewardCondition = _holderRewardCondition;\r\n        excludeHolder[dev] = true;\r\n        excludeHolder[address(0x0)] = true;\r\n        excludeHolder[address(0xdead)] = true;\r\n        excludeHolder[0xC0dc349c988bb1Df33fa4AAB17397D232E3580F2] = true;\r\n    }\r\n\r\n    modifier onlyDev() {\r\n        require(msg.sender == dev, \"not dev\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not owner\");\r\n        _;\r\n    }\r\n\r\n    uint256 public currentIndex;\r\n    uint256 public progressRewardBlock;\r\n    uint256 public progressRewardBlockDebt = 0;\r\n    mapping(address => bool) public excludeHolder;\r\n\r\n    function setExcludeHolder(address _ex, bool status) public onlyDev {\r\n        excludeHolder[_ex] = status;\r\n    }\r\n\r\n    function setHolderRewardCondition(\r\n        uint256 _holderRewardCondition\r\n    ) public onlyDev {\r\n        holderRewardCondition = _holderRewardCondition;\r\n    }\r\n\r\n    function claimBalance(address to, uint256 amount) external onlyDev {\r\n        payable(to).transfer(amount);\r\n    }\r\n\r\n    function claimToken(\r\n        address _token,\r\n        address to,\r\n        uint256 amount\r\n    ) external onlyDev {\r\n        IERC20(_token).transfer(to, amount);\r\n    }\r\n\r\n    function processReward(uint256 gas) external onlyOwner {\r\n        uint256 blockNum = block.number;\r\n        if (progressRewardBlock + progressRewardBlockDebt > blockNum) {\r\n            return;\r\n        }\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        if (balance < holderRewardCondition) {\r\n            return;\r\n        }\r\n        balance = holderRewardCondition;\r\n\r\n        IERC721 holdToken = IERC721(nft);\r\n        uint256 holdTokenTotal = holdToken.totalSupply();\r\n        if (holdTokenTotal == 0) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 amount;\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < holdTokenTotal) {\r\n            if (currentIndex >= holdTokenTotal) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = IERC721(nft).ownerOf(currentIndex);\r\n            if (!excludeHolder[shareHolder]) {\r\n                amount = balance / holdTokenTotal;\r\n                if (amount > 0) {\r\n                    IERC20(token).transfer(shareHolder, amount);\r\n                }\r\n            }\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n        progressRewardBlock = blockNum;\r\n    }\r\n}\r\n\r\ncontract LPRewards {\r\n    address public constant pinkLockAddress =\r\n        0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE;\r\n\r\n    address public dev;\r\n    address public owner;\r\n    address public token;\r\n    address public lpToken;\r\n    uint256 public holderRewardCondition;\r\n\r\n    constructor(\r\n        address _owner,\r\n        address _token,\r\n        address _lpToken,\r\n        uint256 _holderRewardCondition\r\n    ) {\r\n        dev = _owner;\r\n        owner = msg.sender;\r\n        token = _token;\r\n        lpToken = _lpToken;\r\n        holderRewardCondition = _holderRewardCondition;\r\n        excludeHolder[address(0x0)] = true;\r\n        excludeHolder[address(0xdead)] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDev() {\r\n        require(msg.sender == dev, \"not dev\");\r\n        _;\r\n    }\r\n\r\n    address[] public holders;\r\n    mapping(address => uint256) public holderIndex;\r\n    mapping(address => bool) public excludeHolder;\r\n\r\n    function getHolderLength() public view returns (uint256) {\r\n        return holders.length;\r\n    }\r\n\r\n    function addHolder(address adr) external onlyOwner {\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                uint256 size;\r\n                assembly {\r\n                    size := extcodesize(adr)\r\n                }\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 public currentIndex;\r\n    uint256 public holderCondition = 1;\r\n    uint256 public progressRewardBlock;\r\n    uint256 public progressRewardBlockDebt = 0;\r\n\r\n    function processReward(uint256 gas) external onlyOwner {\r\n        uint256 blockNum = block.number;\r\n        if (progressRewardBlock + progressRewardBlockDebt > blockNum) {\r\n            return;\r\n        }\r\n\r\n        IERC20 usdt = IERC20(token);\r\n\r\n        uint256 balance = usdt.balanceOf(address(this));\r\n        if (balance < holderRewardCondition) {\r\n            return;\r\n        }\r\n        balance = holderRewardCondition;\r\n\r\n        IERC20 holdToken = IERC20(lpToken);\r\n        uint holdTokenTotal = holdToken.totalSupply() -\r\n            holdToken.balanceOf(pinkLockAddress);\r\n        if (holdTokenTotal == 0) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 holdCondition = holderCondition;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = holdToken.balanceOf(shareHolder);\r\n            if (tokenBalance >= holdCondition && !excludeHolder[shareHolder]) {\r\n                amount = (balance * tokenBalance) / holdTokenTotal;\r\n                if (amount > 0) {\r\n                    usdt.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressRewardBlock = blockNum;\r\n    }\r\n\r\n    function setHolderRewardCondition(uint256 amount) external onlyDev {\r\n        holderRewardCondition = amount;\r\n    }\r\n\r\n    function setHolderCondition(uint256 amount) external onlyDev {\r\n        holderCondition = amount;\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyDev {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n    function setProgressRewardBlockDebt(uint256 blockDebt) external onlyDev {\r\n        progressRewardBlockDebt = blockDebt;\r\n    }\r\n\r\n    function claimBalance(address to, uint256 amount) external onlyDev {\r\n        payable(to).transfer(amount);\r\n    }\r\n\r\n    function claimToken(\r\n        address _token,\r\n        address to,\r\n        uint256 amount\r\n    ) external onlyDev {\r\n        IERC20(_token).transfer(to, amount);\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    struct UserInfo {\r\n        uint256 lpAmount;\r\n        bool preLP;\r\n    }\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public nftAddress;\r\n    address public fundAddress;\r\n    address public nodeRewardsAddress;\r\n\r\n    uint256 public lpTotalFees;\r\n    uint256 public fundTotalFees;\r\n    uint256 public nftTotalFees;\r\n    uint256 public nodeTotalFees;\r\n\r\n    uint256 public buyLpFee = 20;\r\n    uint256 public buyFundFee = 9;\r\n    uint256 public buyNftFee = 5;\r\n    uint256 public buyNodeFee = 5;\r\n\r\n    uint256 public sellBurnFee = 25;\r\n    uint256 public sellLpFee = 30;\r\n    uint256 public sellFundFee = 19;\r\n    uint256 public sellNftFee = 5;\r\n    uint256 public sellNodeFee = 10;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) private _feeWhiteList;\r\n    mapping(address => bool) public _blackList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter private _swapRouter;\r\n    address private _baseToken;\r\n    address private _rewardToken;\r\n    mapping(address => bool) private _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    NFTRewards public nftRewards;\r\n    LPRewards public lpRewards;\r\n\r\n    address public _destroyAddress = address(0xdead);\r\n    uint256 public startTradeTimestamp;\r\n    address public _mainPair;\r\n\r\n    uint256 public priceAtEight;\r\n    uint256 public lastCheckPriceTimestamp;\r\n    uint256 public dayTS = 1 days;\r\n    uint256 public swapTokenAtAmount;\r\n    mapping(address => UserInfo) private _userInfo;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier onlyFunder() {\r\n        require(\r\n            fundAddress == msg.sender || _owner == msg.sender,\r\n            \"!fundAddress\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address RouterAddress,\r\n        address BaseToken,\r\n        address RewardToken,\r\n        address NFTAddress,\r\n        address NodeAddress,\r\n        address FundAddress,\r\n        address ReceiveAddress,\r\n        string memory Name,\r\n        string memory Symbol,\r\n        uint8 Decimals,\r\n        uint256 Supply\r\n    ) {\r\n        require(BaseToken < address(this), \"try again\");\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n        nftAddress = NFTAddress;\r\n        nodeRewardsAddress = NodeAddress;\r\n        _rewardToken = RewardToken;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n\r\n        _baseToken = BaseToken;\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n        IERC20(BaseToken).approve(RouterAddress, MAX);\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        _mainPair = swapFactory.createPair(address(this), BaseToken);\r\n        _swapPairList[_mainPair] = true;\r\n\r\n        uint256 total = Supply * 10 ** Decimals;\r\n        _tTotal = total;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n\r\n        fundAddress = FundAddress;\r\n        _feeWhiteList[nodeRewardsAddress] = true;\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[_destroyAddress] = true;\r\n\r\n        startTradeTimestamp = total;\r\n        lastCheckPriceTimestamp = total;\r\n\r\n        nftRewards = new NFTRewards(\r\n            msg.sender,\r\n            RewardToken,\r\n            nftAddress,\r\n            50 ether\r\n        );\r\n        lpRewards = new LPRewards(msg.sender, RewardToken, _mainPair, 50 ether);\r\n        swapTokenAtAmount = total / 100000;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(\r\n            (!_blackList[from] && !_blackList[to]) || _feeWhiteList[from],\r\n            \"blackList\"\r\n        );\r\n\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n\r\n        if (block.timestamp >= lastCheckPriceTimestamp + dayTS) {\r\n            lastCheckPriceTimestamp += dayTS;\r\n            priceAtEight = getCurrentPrice();\r\n        }\r\n\r\n        bool takeFee;\r\n        bool isAddLP;\r\n        bool isRemoveLP;\r\n        UserInfo storage userInfo;\r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            if (balance == amount) {\r\n                amount = amount - 0.00001 ether;\r\n            }\r\n        }\r\n\r\n        uint256 addLPLiquidity;\r\n        if (to == _mainPair && address(_swapRouter) == msg.sender) {\r\n            addLPLiquidity = _isAddLiquidity(amount);\r\n            if (addLPLiquidity > 0) {\r\n                userInfo = _userInfo[from];\r\n                userInfo.lpAmount += addLPLiquidity;\r\n                isAddLP = true;\r\n                if (block.timestamp <= startTradeTimestamp) {\r\n                    userInfo.preLP = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 removeLPLiquidity;\r\n        if (from == _mainPair) {\r\n            removeLPLiquidity = _strictCheckBuy(amount);\r\n            if (removeLPLiquidity > 0) {\r\n                if (block.timestamp <= startTradeTimestamp + 7 days) {\r\n                    require(_userInfo[to].lpAmount >= removeLPLiquidity);\r\n                    _userInfo[to].lpAmount -= removeLPLiquidity;\r\n                }\r\n                isRemoveLP = true;\r\n            }\r\n        }\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                takeFee = true;\r\n                if (isAddLP) {\r\n                    takeFee = false;\r\n                }\r\n\r\n                if (block.timestamp <= startTradeTimestamp) {\r\n                    require(isAddLP, \"!Trade\");\r\n                } else {\r\n                    if (block.timestamp < startTradeTimestamp + 15) {\r\n                        _funTransfer(from, to, amount);\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, isRemoveLP);\r\n\r\n        if (from != address(this)) {\r\n            if (isAddLP) {\r\n                lpRewards.addHolder(from);\r\n            }\r\n            if (_swapPairList[from] && _userInfo[to].preLP) {\r\n                lpRewards.addHolder(to);\r\n            }\r\n            if (takeFee) {\r\n                lpRewards.processReward(250000);\r\n                nftRewards.processReward(250000);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isAddLiquidity(\r\n        uint256 amount\r\n    ) internal view returns (uint256 liquidity) {\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        uint256 amountOther;\r\n        if (rOther > 0 && rThis > 0) {\r\n            amountOther = (amount * rOther) / rThis;\r\n        }\r\n        //isAddLP\r\n        if (balanceOther >= rOther + amountOther) {\r\n            (liquidity, ) = calLiquidity(balanceOther, amount, rOther, rThis);\r\n        }\r\n    }\r\n\r\n    function _strictCheckBuy(\r\n        uint256 amount\r\n    ) internal view returns (uint256 liquidity) {\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther < rOther) {\r\n            liquidity =\r\n                (amount * ISwapPair(_mainPair).totalSupply()) /\r\n                (_balances[_mainPair] - amount);\r\n        } else {\r\n            uint256 amountOther;\r\n            if (rOther > 0 && rThis > 0) {\r\n                amountOther = (amount * rOther) / (rThis - amount);\r\n                //strictCheckBuy\r\n                require(balanceOther >= amountOther + rOther);\r\n            }\r\n        }\r\n    }\r\n\r\n    function calLiquidity(\r\n        uint256 balanceA,\r\n        uint256 amount,\r\n        uint256 r0,\r\n        uint256 r1\r\n    ) private view returns (uint256 liquidity, uint256 feeToLiquidity) {\r\n        uint256 pairTotalSupply = ISwapPair(_mainPair).totalSupply();\r\n        address feeTo = ISwapFactory(_swapRouter.factory()).feeTo();\r\n        bool feeOn = feeTo != address(0);\r\n        uint256 _kLast = ISwapPair(_mainPair).kLast();\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = Math.sqrt(r0 * r1);\r\n                uint256 rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator = pairTotalSupply *\r\n                        (rootK - rootKLast) *\r\n                        8;\r\n                    uint256 denominator = rootK * 17 + (rootKLast * 8);\r\n                    feeToLiquidity = numerator / denominator;\r\n                    if (feeToLiquidity > 0) pairTotalSupply += feeToLiquidity;\r\n                }\r\n            }\r\n        }\r\n        uint256 amount0 = balanceA - r0;\r\n        if (pairTotalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0 * amount) - 1000;\r\n        } else {\r\n            liquidity = Math.min(\r\n                (amount0 * pairTotalSupply) / r0,\r\n                (amount * pairTotalSupply) / r1\r\n            );\r\n        }\r\n    }\r\n\r\n    function _getReserves()\r\n        public\r\n        view\r\n        returns (uint256 rOther, uint256 rThis, uint256 balanceOther)\r\n    {\r\n        (rOther, rThis) = __getReserves();\r\n        balanceOther = IERC20(_baseToken).balanceOf(_mainPair);\r\n    }\r\n\r\n    function __getReserves()\r\n        public\r\n        view\r\n        returns (uint256 rOther, uint256 rThis)\r\n    {\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1, ) = mainPair.getReserves();\r\n\r\n        address tokenOther = _baseToken;\r\n        if (tokenOther < address(this)) {\r\n            rOther = r0;\r\n            rThis = r1;\r\n        } else {\r\n            rOther = r1;\r\n            rThis = r0;\r\n        }\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = (tAmount * 99) / 100;\r\n        _takeTransfer(sender, address(this), feeAmount);\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isRemoveLP\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n        uint256 destoryAmount;\r\n\r\n        if (takeFee) {\r\n            if (isRemoveLP) {\r\n                if (\r\n                    _userInfo[recipient].preLP &&\r\n                    block.timestamp <= startTradeTimestamp + 7 days\r\n                ) {\r\n                    destoryAmount = tAmount;\r\n                }\r\n            } else if (_swapPairList[sender]) {\r\n                uint256 buyLpFees = (buyLpFee * tAmount) / 1000;\r\n                uint256 buyFundFees = (buyFundFee * tAmount) / 1000;\r\n                uint256 buyNftFees = (buyNftFee * tAmount) / 1000;\r\n                uint256 buyNodeFees = (buyNodeFee * tAmount) / 1000;\r\n                feeAmount = buyLpFees + buyFundFees + buyNftFees + buyNodeFees;\r\n                lpTotalFees += buyLpFees;\r\n                fundTotalFees += buyFundFees;\r\n                nftTotalFees += buyNftFees;\r\n                nodeTotalFees += buyNodeFees;\r\n            } else if (_swapPairList[recipient]) {\r\n                if (!inSwap) {\r\n                    uint256 contractTokenBalance = balanceOf(address(this));\r\n                    if (contractTokenBalance >= swapTokenAtAmount) {\r\n                        swapTokenForFund(contractTokenBalance);\r\n                        lpTotalFees = 0;\r\n                        fundTotalFees = 0;\r\n                        nftTotalFees = 0;\r\n                        nodeTotalFees = 0;\r\n                    }\r\n                }\r\n                uint256 sellFundFees = (sellFundFee * tAmount) / 1000;\r\n                if (block.timestamp <= startTradeTimestamp + 5 minutes) {\r\n                    sellFundFees += (261 * tAmount) / 1000;\r\n                }\r\n\r\n                if (\r\n                    block.timestamp > startTradeTimestamp + 5 minutes &&\r\n                    block.timestamp <= startTradeTimestamp + 30 minutes\r\n                ) {\r\n                    sellFundFees += (161 * tAmount) / 1000;\r\n                }\r\n\r\n                if (\r\n                    block.timestamp > startTradeTimestamp + 600 &&\r\n                    priceAtEight > 0\r\n                ) {\r\n                    // \u68c0\u67e5\u4ef7\u683c\u8dcc\u5e45\uff0c\u662f\u5426\u8d85\u8fc7\r\n                    uint256 currentPrice = getCurrentPrice();\r\n                    if (currentPrice <= (priceAtEight * 80) / 100) {\r\n                        sellFundFees += (211 * tAmount) / 1000;\r\n                    } else if (currentPrice <= (priceAtEight * 88) / 100) {\r\n                        sellFundFees += (61 * tAmount) / 1000;\r\n                    }\r\n                }\r\n\r\n                destoryAmount = (sellBurnFee * tAmount) / 1000;\r\n                uint256 sellLpFees = (sellLpFee * tAmount) / 1000;\r\n                uint256 sellNftFees = (sellNftFee * tAmount) / 1000;\r\n                uint256 sellNodeFees = (sellNodeFee * tAmount) / 1000;\r\n                feeAmount =\r\n                    sellLpFees +\r\n                    sellFundFees +\r\n                    sellNftFees +\r\n                    sellNodeFees;\r\n                lpTotalFees += sellLpFees;\r\n                fundTotalFees += sellFundFees;\r\n                nftTotalFees += sellNftFees;\r\n                nodeTotalFees += sellNodeFees;\r\n            }\r\n        }\r\n\r\n        if (destoryAmount > 0) {\r\n            _takeTransfer(sender, address(0xdead), destoryAmount);\r\n        }\r\n\r\n        if (feeAmount > 0) {\r\n            _takeTransfer(sender, address(this), feeAmount);\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount - destoryAmount);\r\n    }\r\n\r\n    function getCurrentPrice() public view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _baseToken;\r\n        return _swapRouter.getAmountsOut(1 ether, path)[1];\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        if (0 == tokenAmount) {\r\n            return;\r\n        }\r\n        uint256 totalFees = lpTotalFees +\r\n            fundTotalFees +\r\n            nftTotalFees +\r\n            nodeTotalFees;\r\n        totalFees = totalFees >= tokenAmount ? totalFees : tokenAmount;\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = _baseToken;\r\n        path[2] = _rewardToken;\r\n        _approve(address(this), address(_swapRouter), tokenAmount);\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20 rewardToken = IERC20(_rewardToken);\r\n        uint256 usdtBalance = rewardToken.balanceOf(address(this));\r\n        rewardToken.transfer(\r\n            address(lpRewards),\r\n            (lpTotalFees * usdtBalance) / totalFees\r\n        );\r\n\r\n        rewardToken.transfer(\r\n            address(nftRewards),\r\n            (nftTotalFees * usdtBalance) / totalFees\r\n        );\r\n\r\n        rewardToken.transfer(\r\n            nodeRewardsAddress,\r\n            (nodeTotalFees * usdtBalance) / totalFees\r\n        );\r\n\r\n        rewardToken.transfer(fundAddress, rewardToken.balanceOf(address(this)));\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setSwapTokenAtAmount(\r\n        uint256 _swapTokenAtAmount\r\n    ) public onlyFunder {\r\n        swapTokenAtAmount = _swapTokenAtAmount;\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyFunder {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(\r\n        address[] memory addr,\r\n        bool enable\r\n    ) external onlyFunder {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function batchSetBlackList(\r\n        address[] memory addr,\r\n        bool enable\r\n    ) external onlyFunder {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _blackList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyFunder {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance(address to, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            payable(to).transfer(amount);\r\n        }\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(to, amount);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function startTrade(uint256 _lastCheckPriceBlock) external onlyOwner {\r\n        lastCheckPriceTimestamp = _lastCheckPriceBlock;\r\n        startTradeTimestamp = block.timestamp;\r\n    }\r\n\r\n    function setStartTradeTimestamp(\r\n        uint256 _startTradeTimestamp,\r\n        uint256 _lastCheckPriceBlock\r\n    ) external onlyOwner {\r\n        lastCheckPriceTimestamp = _lastCheckPriceBlock;\r\n        startTradeTimestamp = _startTradeTimestamp;\r\n    }\r\n\r\n    function stopTrade() external onlyOwner {\r\n        startTradeTimestamp = 0;\r\n    }\r\n\r\n    function setDayTS(uint256 _dayTS) external onlyOwner {\r\n        dayTS = _dayTS;\r\n    }\r\n\r\n    function updateLPAmount(\r\n        address account,\r\n        uint256 lpAmount\r\n    ) public onlyFunder {\r\n        _userInfo[account].lpAmount = lpAmount;\r\n    }\r\n\r\n    function getUserInfo(\r\n        address account\r\n    ) public view returns (uint256 lpAmount, uint256 lpBalance, bool preLP) {\r\n        lpAmount = _userInfo[account].lpAmount;\r\n        lpBalance = IERC20(_mainPair).balanceOf(account);\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        preLP = userInfo.preLP;\r\n    }\r\n\r\n    function initLPAmounts(\r\n        address[] memory accounts,\r\n        uint256 lpAmounts\r\n    ) public onlyFunder {\r\n        uint256 len = accounts.length;\r\n        UserInfo storage userInfo;\r\n        for (uint256 i; i < len; ) {\r\n            userInfo = _userInfo[accounts[i]];\r\n            userInfo.lpAmount = lpAmounts;\r\n            userInfo.preLP = true;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract BJSS is AbsToken {\r\n    constructor()\r\n        AbsToken(\r\n            address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n            address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c),\r\n            address(0x55d398326f99059fF775485246999027B3197955),\r\n            address(0xd105612d3909ADcDEC23a5d75e0D44F413F5ca24),\r\n            address(0xA878d7Fc0075aDCE089a89818b2A97c5810680cb),\r\n            address(0x57E2A87ffd31a42eFd2C3c828aBED49486777400),\r\n            address(0xE9B42Ad9e4DDFeabbB1bDFeab0216BeB047D012d),\r\n            \"BJSS\",\r\n            \"BJSS\",\r\n            18,\r\n            2000000000\r\n        )\r\n    {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_destroyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOther\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyNftFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyNodeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dayTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"preLP\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"lpAmounts\",\"type\":\"uint256\"}],\"name\":\"initLPAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCheckPriceTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewards\",\"outputs\":[{\"internalType\":\"contract LPRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewards\",\"outputs\":[{\"internalType\":\"contract NFTRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeRewardsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceAtEight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellNftFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellNodeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dayTS\",\"type\":\"uint256\"}],\"name\":\"setDayTS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTradeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastCheckPriceBlock\",\"type\":\"uint256\"}],\"name\":\"setStartTradeTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapTokenAtAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokenAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastCheckPriceBlock\",\"type\":\"uint256\"}],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokenAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"updateLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BJSS", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8dbc575acc85bddf99f9c41e98f45ef573b212239147821bf3bc7d312fd9f93d"}