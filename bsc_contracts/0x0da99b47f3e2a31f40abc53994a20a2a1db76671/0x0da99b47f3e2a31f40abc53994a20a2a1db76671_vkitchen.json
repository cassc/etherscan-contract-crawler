{"SourceCode": "/**\r\n \r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.7;\r\n\r\ncontract vkitchen {\r\n    uint256 public EGGS_TO_HATCH_1MINERS = 2592000;\r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n    address addr0 = address(0x0);\r\n    address public ceoAddress;\r\n    address public ceoAddress2;\r\n    mapping(address => uint256) public hatcheryMiners;\r\n    mapping(address => uint256) public claimedEggs;\r\n    mapping(address => uint256) public lastHatch;\r\n    mapping(address => address) public referrals;\r\n    uint256 public marketEggs;\r\n\r\n    constructor() {\r\n        ceoAddress = address(0x1c7b6C3d4d70d34a0dC22e760dAFA02e984Af686);\r\n        ceoAddress2 = address(0x13fa87bDeF0735c5794d5aCaF2e13F9589227C89);\r\n        marketEggs = 259200000000;\r\n    }\r\n\r\n    function hatchEggs(address ref) public {\r\n        if (ref != msg.sender && referrals[msg.sender] == addr0) {\r\n            referrals[msg.sender] = ref;\r\n        }\r\n\r\n        uint256 eggsUsed = getMyEggs();\r\n        uint256 newMiners = SafeMath.div(eggsUsed, EGGS_TO_HATCH_1MINERS);\r\n        hatcheryMiners[msg.sender] = SafeMath.add(\r\n            hatcheryMiners[msg.sender],\r\n            newMiners\r\n        );\r\n        claimedEggs[msg.sender] = 0;\r\n        lastHatch[msg.sender] = block.timestamp;\r\n\r\n        //send referral eggs\r\n        address ref1 = referrals[msg.sender];\r\n        if (ref1 != addr0) {\r\n            claimedEggs[ref1] = SafeMath.add(\r\n                claimedEggs[ref1],\r\n                SafeMath.div(SafeMath.mul(eggsUsed, 10), 100)\r\n            );\r\n            address ref2 = referrals[ref1];\r\n            if (ref2 != addr0 && ref2 != msg.sender) {\r\n                claimedEggs[ref2] = SafeMath.add(\r\n                    claimedEggs[ref2],\r\n                    SafeMath.div(SafeMath.mul(eggsUsed, 2), 100)\r\n                );\r\n                address ref3 = referrals[ref2];\r\n                if (ref3 != addr0 && ref3 != msg.sender) {\r\n                    claimedEggs[ref3] = SafeMath.add(\r\n                        claimedEggs[ref3],\r\n                        SafeMath.div(SafeMath.mul(eggsUsed, 1), 100)\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        //boost market to nerf miners hoarding\r\n        marketEggs = SafeMath.add(marketEggs, SafeMath.div(eggsUsed, 8));\r\n    }\r\n\r\n    function sellEggs() public {\r\n        uint256 hasEggs = getMyEggs();\r\n        uint256 eggValue = calculateEggSell(hasEggs);\r\n        uint256 fee = devFee(eggValue);\r\n        uint256 fee2 = fee / 2;\r\n        claimedEggs[msg.sender] = 0;\r\n        lastHatch[msg.sender] = block.timestamp;\r\n        marketEggs = SafeMath.add(marketEggs, hasEggs);\r\n        payable(ceoAddress).transfer(fee2);\r\n        payable(ceoAddress2).transfer(fee2);\r\n        payable(msg.sender).transfer(SafeMath.sub(eggValue, fee));\r\n    }\r\n\r\n    function buyEggs(address ref) public payable {\r\n        uint256 eggsBought = calculateEggBuy(\r\n            msg.value,\r\n            SafeMath.sub(address(this).balance, msg.value)\r\n        );\r\n        eggsBought = SafeMath.sub(eggsBought, devFee(eggsBought));\r\n        uint256 fee = devFee(msg.value);\r\n        uint256 fee2 = fee / 2;\r\n        payable(ceoAddress).transfer(fee2);\r\n        payable(ceoAddress2).transfer(fee2);\r\n        claimedEggs[msg.sender] = SafeMath.add(\r\n            claimedEggs[msg.sender],\r\n            eggsBought\r\n        );\r\n        hatchEggs(ref);\r\n    }\r\n\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(\r\n        uint256 rt,\r\n        uint256 rs,\r\n        uint256 bs\r\n    ) public view returns (uint256) {\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return\r\n            SafeMath.div(\r\n                SafeMath.mul(PSN, bs),\r\n                SafeMath.add(\r\n                    PSNH,\r\n                    SafeMath.div(\r\n                        SafeMath.add(\r\n                            SafeMath.mul(PSN, rs),\r\n                            SafeMath.mul(PSNH, rt)\r\n                        ),\r\n                        rt\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function calculateEggSell(uint256 eggs) public view returns (uint256) {\r\n        return calculateTrade(eggs, marketEggs, address(this).balance);\r\n    }\r\n\r\n    function calculateEggBuy(uint256 eth, uint256 contractBalance)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return calculateTrade(eth, contractBalance, marketEggs);\r\n    }\r\n\r\n    function calculateEggBuySimple(uint256 eth) public view returns (uint256) {\r\n        return calculateEggBuy(eth, address(this).balance);\r\n    }\r\n\r\n    function devFee(uint256 amount) public pure returns (uint256) {\r\n        return SafeMath.div(SafeMath.mul(amount, 8), 100);\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getMyMiners() public view returns (uint256) {\r\n        return hatcheryMiners[msg.sender];\r\n    }\r\n\r\n    function getMyEggs() public view returns (uint256) {\r\n        return\r\n            SafeMath.add(\r\n                claimedEggs[msg.sender],\r\n                getEggsSinceLastHatch(msg.sender)\r\n            );\r\n    }\r\n\r\n    function getEggsSinceLastHatch(address adr) public view returns (uint256) {\r\n        uint256 secondsPassed = min(\r\n            EGGS_TO_HATCH_1MINERS,\r\n            SafeMath.sub(block.timestamp, lastHatch[adr])\r\n        );\r\n        return SafeMath.mul(secondsPassed, hatcheryMiners[adr]);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EGGS_TO_HATCH_1MINERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buyEggs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ceoAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcheryMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "vkitchen", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1cc265779bf4e1edec0eaf9f5e81451fbbdfbbfa5583504c696d4b9678e73c9f"}