{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-02-18\r\n*/\r\n\r\npragma solidity ^0.8.6;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable {\r\n    address public _owner;\r\n    \r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Util {\r\n\r\n    function toWei(uint256 price, uint decimals) public pure returns (uint256){\r\n        uint256 amount = price * (10 ** uint256(decimals));\r\n        return amount;\r\n    }\r\n\r\n    function mathDivisionToFloat(uint256 a, uint256 b, uint decimals) public pure returns (uint256) {\r\n        uint256 aPlus = a * (10 ** uint256(decimals));\r\n        uint256 amount = aPlus / b;\r\n        return amount;\r\n    }\r\n\r\n}\r\n\r\nabstract contract ERC20 {\r\n    function transferFrom(address _from, address _to, uint256 _value) external virtual returns (bool success);\r\n    function transfer(address recipient, uint256 amount) external virtual returns (bool);\r\n    function balanceOf(address account) external virtual view returns (uint256);\r\n    function approve(address spender, uint256 amount) external virtual returns (bool);\r\n}\r\n\r\nabstract contract ChaseHighAward {\r\n    function getPoolAmount() external virtual view returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external view returns (address);\r\n\r\n}\r\n\r\ncontract StarToken is IERC20, Ownable, Util {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => uint256) private lastPurchaseTime;\r\n    uint private shortestTradingTime; // second\r\n\r\n    mapping(address => address) private inviter;\r\n    address public swapRouter;\r\n\r\n    uint256 private lpPoolRatio;\r\n    uint256 private fmPoolRatio;\r\n    uint256 private marketingBuyRatio;\r\n    uint256 private marketingSellRatio;\r\n    uint256 private fundRatio;\r\n    uint256 private holdAwardRatio;\r\n    uint256 private destroyRatio;\r\n    uint256 private ecologyRatio;\r\n\r\n    address private lpPoolAddress;\r\n    address private lpTeamPoolAddress;\r\n    address private fmPoolAddress;\r\n    address private marketingAddress;\r\n    address private fundAddress;\r\n    address private holdAwardAddress;\r\n    address private holdAwardTeamAddress;\r\n    address private destroyAddress;\r\n    address private autoDestroyAddress;\r\n    address private ecologyOneAddress;\r\n    address private ecologyTwoAddress;\r\n\r\n    uint256 public highestPrice;\r\n\r\n    uint256 public fmPoolBalance;\r\n    uint256 public holdAwardBalance;\r\n    uint256 public lpTeamPoolBalance;\r\n\r\n    mapping(uint256 => mapping(address => uint256)) private purchaseRecord;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    ERC20 private usdtToken;\r\n    ERC20 private wbnbToken;\r\n    \r\n    constructor() {\r\n\r\n        _name = \"Star\";\r\n        _symbol = \"Star\";\r\n        _decimals = 18;\r\n\r\n        _totalSupply = 88000 * 10 ** uint(_decimals);\r\n\t\t\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _balances[msg.sender]);\r\n        \r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _owner = msg.sender;\r\n        shortestTradingTime = 0;\r\n\r\n        lpPoolAddress = 0x65F5fbB3a12DB3106a711B34b29Ea17B4202541b;\r\n        lpTeamPoolAddress = 0x91dF21656FB2169E669686BEE45E4800679cC2Bd;\r\n        fmPoolAddress = 0xf59a1e7D62d52256EB7E2ac423E1eF8B6a1399BA;\r\n        holdAwardAddress = 0xCE335e58c2dF9A25D9449879917f5c6abc3E5dDB;\r\n        holdAwardTeamAddress = 0x1B00502eB504778d0bca6714B8B1C301Fe599794;\r\n        autoDestroyAddress = 0x5593057f3A95A773EF40fCC9E4fA09c90CC341ef;\r\n        destroyAddress = 0x000000000000000000000000000000000000dEaD;\r\n        ecologyOneAddress = 0xcb9721042ac39f0cD103A1457656B6EFe69A2C82;\r\n        ecologyTwoAddress = 0x15b0F33cE6682db149ae0bB629DF8a57DD842D23;\r\n        \r\n        usdtToken = ERC20(0x55d398326f99059fF775485246999027B3197955);\r\n        wbnbToken = ERC20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        swapRouter = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), address(wbnbToken));\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        lpPoolRatio = 15;\r\n        fmPoolRatio = 20;\r\n        marketingBuyRatio = 5;\r\n        marketingSellRatio = 15;\r\n        fundRatio = 5;\r\n        holdAwardRatio = 10;\r\n        destroyRatio = 10;\r\n        ecologyRatio = 15;\r\n\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _address) public view override returns (uint256) {\r\n        return _balances[_address];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        \r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n    \r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function claimTokens() public onlyOwner {\r\n        payable(_owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if(sender != swapRouter && recipient != swapRouter && inviter[recipient] == address(0)) {\r\n            inviter[recipient] = sender;\r\n        }\r\n\r\n        if(sender == swapRouter && !_isExcludedFromFee[recipient]) {\r\n            // buy\r\n            lastPurchaseTime[recipient] = block.timestamp;\r\n\r\n            purchaseRecord[block.number][recipient] = queryStarToBnbPrice();\r\n\r\n            transferSlippage(sender, recipient, amount, 1);\r\n\r\n            updateHighestPrice();\r\n\r\n        } else if(recipient == swapRouter && !_isExcludedFromFee[sender]) {\r\n            // sell\r\n            require(block.timestamp - lastPurchaseTime[sender] >= shortestTradingTime, \"Frequent operation\");\r\n            \r\n            autoTrade();\r\n\r\n            transferSlippage(sender, recipient, amount, 2);\r\n\r\n            updateHighestPrice();\r\n            \r\n        } else {\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n        \r\n    }\r\n\r\n    function excludeFromFee(address _address) public onlyOwner {\r\n        _isExcludedFromFee[_address] = true;\r\n    }\r\n\r\n    function includeInFee(address _address) public onlyOwner {\r\n        _isExcludedFromFee[_address] = false;\r\n    }\r\n\r\n    function isExcludedFromFee(address _address) public view returns (bool) {\r\n        return _isExcludedFromFee[_address];\r\n    }\r\n\r\n    function changeRouter(address router) public onlyOwner {\r\n        swapRouter = router;\r\n        updateHighestPrice();\r\n    }\r\n\r\n    function setShortestTradingTime(uint _time) public onlyOwner {\r\n        shortestTradingTime = _time;\r\n    }\r\n\r\n    function getInviter(address _address) public view returns (address) {\r\n        return inviter[_address];\r\n    }\r\n\r\n    // 1 Star = ? BNB\r\n    function queryStarToBnbPrice() public view returns (uint256) {\r\n        uint256 reserveA = _balances[swapRouter];\r\n        uint256 reserveB = wbnbToken.balanceOf(swapRouter);\r\n        return Util.mathDivisionToFloat(reserveB, reserveA, 18);\r\n    }\r\n\r\n    function updateHighestPrice() private {\r\n        uint256 bnbToStarPrice = queryStarToBnbPrice(); // unit256: wei\r\n        if(bnbToStarPrice > highestPrice) {\r\n            highestPrice = bnbToStarPrice;   \r\n        }\r\n    }\r\n\r\n    function transferSlippage(address sender, address recipient, uint256 amount, uint8 transferType) private {\r\n\r\n        uint256 normalAmount = normalSlippage(sender, amount);\r\n\r\n        uint256 slippageAmount = 0;\r\n        if(transferType == 1) {\r\n\r\n            uint256 marketingAmount = amount.mul(marketingBuyRatio).div(1000);\r\n            _balances[marketingAddress] = _balances[marketingAddress].add(marketingAmount);\r\n            emit Transfer(sender, marketingAddress, marketingAmount);\r\n\r\n            slippageAmount = normalAmount.add(marketingAmount);\r\n        } else {\r\n\r\n            uint256 marketingAmount = amount.mul(marketingSellRatio).div(1000);\r\n            _balances[marketingAddress] = _balances[marketingAddress].add(marketingAmount);\r\n            emit Transfer(sender, marketingAddress, marketingAmount);\r\n\r\n            uint256 destroyAmount = amount.mul(destroyRatio).div(1000);\r\n            if(_balances[destroyAddress].add(destroyAmount) <= toWei(79200, 18)) {\r\n                _balances[destroyAddress] = _balances[destroyAddress].add(destroyAmount);\r\n                emit Transfer(sender, destroyAddress, destroyAmount);\r\n            } else {\r\n                destroyAmount = 0;\r\n            }\r\n\r\n            slippageAmount = normalAmount.add(marketingAmount).add(destroyAmount);\r\n\r\n            uint256 bnbToStarPrice = queryStarToBnbPrice(); // unit256: wei\r\n            if(bnbToStarPrice < highestPrice) {\r\n                \r\n                uint256 fallPercent = toWei((highestPrice.sub(bnbToStarPrice)), 18).div(highestPrice).mul(100);\r\n                \r\n                uint256 increaseAmount = 0;\r\n                if(fallPercent > toWei(20, 18)) {\r\n                    increaseAmount = amount.mul(190).div(1000);\r\n                } else if(fallPercent > toWei(10, 18)) {\r\n                    increaseAmount = amount.mul(90).div(1000);\r\n                }\r\n                \r\n                if(increaseAmount > 0) {\r\n                    slippageAmount = slippageAmount.add(increaseAmount);\r\n\r\n                    uint256 tempAmount = increaseAmount.mul(500).div(1000);\r\n                    _balances[address(this)] = _balances[address(this)].add(tempAmount);\r\n                    fmPoolBalance = fmPoolBalance.add(tempAmount);\r\n                    emit Transfer(sender, address(this), tempAmount);\r\n\r\n                    tempAmount = increaseAmount.mul(300).div(1000);\r\n                    _balances[address(this)] = _balances[address(this)].add(tempAmount);\r\n                    holdAwardBalance = holdAwardBalance.add(tempAmount);\r\n                    emit Transfer(sender, address(this), tempAmount); \r\n\r\n                    tempAmount = increaseAmount.mul(200).div(1000);\r\n                    _balances[autoDestroyAddress] = _balances[autoDestroyAddress].add(tempAmount);\r\n                    emit Transfer(sender, autoDestroyAddress, tempAmount);\r\n\r\n                }\r\n                \r\n                \r\n            }\r\n            \r\n        }\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount.sub(slippageAmount));\r\n        emit Transfer(sender, recipient, amount.sub(slippageAmount));\r\n    }\r\n\r\n    function normalSlippage(address sender, uint256 amount) private returns (uint256) {\r\n        \r\n        uint256 lpPoolAmount = amount.mul(lpPoolRatio).div(1000);\r\n        uint256 fmPoolAmount = amount.mul(fmPoolRatio).div(1000);\r\n        uint256 fundAmount = amount.mul(fundRatio).div(1000);\r\n        uint256 holdAwardAmount = amount.mul(holdAwardRatio).div(1000);\r\n        uint256 ecologyAmount = amount.mul(ecologyRatio).div(1000);\r\n\r\n        _balances[lpPoolAddress] = _balances[lpPoolAddress].add(lpPoolAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(fmPoolAmount);\r\n        _balances[fundAddress] = _balances[fundAddress].add(fundAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(holdAwardAmount);\r\n\r\n        _balances[ecologyOneAddress] = _balances[ecologyOneAddress].add(ecologyAmount.div(2));\r\n        _balances[ecologyTwoAddress] = _balances[ecologyTwoAddress].add(ecologyAmount.div(2));\r\n\r\n        fmPoolBalance = fmPoolBalance.add(fmPoolAmount);\r\n        holdAwardBalance = holdAwardBalance.add(holdAwardAmount);\r\n        \r\n        emit Transfer(sender, lpPoolAddress, lpPoolAmount);\r\n        emit Transfer(sender, address(this), fmPoolAmount);\r\n        emit Transfer(sender, fundAddress, fundAmount);\r\n        emit Transfer(sender, address(this), holdAwardAmount);\r\n        emit Transfer(sender, ecologyOneAddress, ecologyAmount.div(2));\r\n        emit Transfer(sender, ecologyTwoAddress, ecologyAmount.div(2));\r\n\r\n        return lpPoolAmount.add(fmPoolAmount).add(fundAmount).add(holdAwardAmount).add(ecologyAmount);\r\n    }\r\n\r\n    function autoTrade() private {\r\n        \r\n        if(fmPoolBalance >= toWei(30, 18)) {\r\n            uint256 fmAmount = ChaseHighAward(fmPoolAddress).getPoolAmount();\r\n            if(fmAmount < toWei(500000, 18)) {\r\n                swapThisToUsdt(fmPoolBalance, fmPoolAddress);\r\n            } else {\r\n                swapThisToUsdt(fmPoolBalance, address(this));\r\n                lpTeamPoolBalance = lpTeamPoolBalance.add(usdtToken.balanceOf(address(this)));\r\n            }\r\n            \r\n            fmPoolBalance = 0;\r\n        }\r\n\r\n        if(holdAwardBalance >= toWei(20, 18)) {\r\n            swapThisToBnb(holdAwardBalance.div(2), holdAwardAddress);\r\n            swapThisToBnb(holdAwardBalance.div(2), holdAwardTeamAddress);\r\n            holdAwardBalance = 0;\r\n        }\r\n        \r\n        if(lpTeamPoolBalance >= toWei(20, 18)) {\r\n            swapUsdtToThis(lpTeamPoolBalance, lpTeamPoolAddress);\r\n            lpTeamPoolBalance = 0;\r\n        }\r\n\r\n    }\r\n\r\n    function swapThisToUsdt(uint256 tokenAmount, address to) private {\r\n\r\n        if(tokenAmount > 0) {\r\n            address[] memory path = new address[](3);\r\n            path[0] = address(this);\r\n            path[1] = address(wbnbToken);\r\n            path[2] = address(usdtToken);\r\n\r\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n            // make the swap\r\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                to,\r\n                block.timestamp\r\n            );\r\n        }\r\n        \r\n    }\r\n\r\n    function swapThisToBnb(uint256 tokenAmount, address to) private {\r\n\r\n        if(tokenAmount > 0) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = address(wbnbToken);\r\n\r\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n            // make the swap\r\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                to,\r\n                block.timestamp\r\n            );\r\n        }\r\n        \r\n    }\r\n\r\n    function swapUsdtToThis(uint256 tokenAmount, address to) private {\r\n        if(tokenAmount > 0) {\r\n            address[] memory path = new address[](3);\r\n            path[0] = address(usdtToken);\r\n            path[1] = address(wbnbToken);\r\n            path[2] = address(this);\r\n\r\n            usdtToken.approve(address(uniswapV2Router), tokenAmount);\r\n\r\n            // make the swap\r\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                to,\r\n                block.timestamp\r\n            );\r\n        }\r\n        \r\n    }\r\n\r\n    function getPurchaseRecord(uint256 _number, address _address) public view returns (uint256 price) {\r\n        price = purchaseRecord[_number][_address];\r\n    }\r\n\r\n    function getSellSlippage() public view returns (uint256) {\r\n        uint256 bnbToStarPrice = queryStarToBnbPrice();\r\n        if(bnbToStarPrice < highestPrice) {\r\n            uint256 fallPercent = toWei((highestPrice.sub(bnbToStarPrice)), 18).div(highestPrice).mul(100);     \r\n            if(fallPercent > toWei(20, 18)) {\r\n                return toWei(28, 18);\r\n            } else if(fallPercent > toWei(10, 18)) {\r\n                return toWei(18, 18);\r\n            }\r\n        }\r\n        return toWei(9, 18);\r\n    }\r\n\r\n    function setLpPoolAddress(address _address) public onlyOwner {\r\n        lpPoolAddress = _address;\r\n    }\r\n\r\n    function setLpTeamPoolAddress(address _address) public onlyOwner {\r\n        lpTeamPoolAddress = _address;\r\n    }\r\n\r\n    function setFmPoolAddress(address _address) public onlyOwner {\r\n        fmPoolAddress = _address;\r\n    }\r\n\r\n    function setMarketingAddress(address _address) public onlyOwner {\r\n        marketingAddress = _address;\r\n    }\r\n\r\n    function setFundAddress(address _address) public onlyOwner {\r\n        fundAddress = _address;\r\n    }\r\n\r\n    function setholdAwardAddress(address _address) public onlyOwner {\r\n        holdAwardAddress = _address;\r\n    }\r\n\r\n    function setholdAwardTeamAddress(address _address) public onlyOwner {\r\n        holdAwardTeamAddress = _address;\r\n    }\r\n\r\n    function setAutoDestroyAddress(address _address) public onlyOwner {\r\n        autoDestroyAddress = _address;\r\n    }\r\n\r\n    function setUsdtToken(address _token) public onlyOwner {\r\n        usdtToken = ERC20(_token);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"changeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fmPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getInviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPurchaseRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdAwardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTeamPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"mathDivisionToFloat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryStarToBnbPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAutoDestroyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFmPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLpPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLpTeamPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setShortestTradingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setUsdtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setholdAwardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setholdAwardTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"toWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StarToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a8b0e8a7f0b1e3c9327a9c8ea7b2c6fad5e2a02aa62e68564d4e363f94c8c541"}