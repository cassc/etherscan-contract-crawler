{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/UltronGPT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title UltronGPT\\n * @dev A Solidity smart contract for managing a robot-based investment platform.\\n */\\ncontract UltronGPT is Ownable, AccessControl {\\n    using SafeMath for uint256;\\n\\n    struct DepositInfo {\\n        uint256 depositAmount;\\n        uint256 timestamp;\\n        address referrer;\\n    }\\n\\n    struct Referral {\\n        address referredBy;\\n    }\\n\\n    struct RobotInfo {\\n        uint256 activeRobots;\\n    }\\n\\n    struct Robot {\\n        uint256 robotId;\\n        uint256 value;\\n        uint256 activationTime;\\n        uint256 expiredOn;\\n        uint256 quantifiedOn;\\n        bool quantifiedActive;\\n        bool activated;\\n        bool profitClaimed;\\n    }\\n    struct TransactionRecord {\\n        uint256 timestamp;\\n        string action;\\n        uint256 amount;\\n        address from;\\n    }\\n\\n    struct TeamInfo {\\n        address[] totalTeam;\\n        uint256 totalInvestment;\\n    }\\n\\n    uint256 public platformShare;\\n    uint256[] public robotsPrice;\\n    uint256 public profitPercentage;\\n    uint256 public totalValueLocked;\\n    uint256 public minQuantTime;\\n\\n    uint256 BitcoinRobot = 20 * 1e18;\\n    uint256 EthereumRobot = 80 * 1e18;\\n    uint256 RippleRobot = 220 * 1e18;\\n    uint256 CardanoRobot = 500 * 1e18;\\n    uint256 DogeCoinRobot = 1000 * 1e18;\\n    uint256 ShibaInuRobot = 1500 * 1e18;\\n    uint256 SolanaRobot = 2000 * 1e18;\\n    uint256 LitCoinRobot = 3500 * 1e18;\\n    uint256 PolygonRobot = 5000 * 1e18;\\n\\n    address public depositToken;\\n    address public taxReceiver;\\n    address public firstSigner;\\n    address public secondSigner;\\n    address public thirdSigner;\\n    bool public isWithdrawActive;\\n    IERC20 public token;\\n\\n    bytes32 public constant SIGNER_ROLE = keccak256(\\\"SIGNER_ROLE\\\");\\n\\n    mapping(address => DepositInfo) public deposit;\\n    mapping(address => Referral) public referrals;\\n    mapping(address => uint256) public totalReferralCommissions;\\n    mapping(address => mapping(uint256 => RobotInfo)) public robots;\\n    mapping(address => uint256) public lastClaim;\\n    mapping(address => bool) public blackListed;\\n    mapping(address => uint256) public userRobotsValue;\\n    mapping(address => uint256) public teamRobotValue;\\n    mapping(address => uint256) public totalProfit;\\n\\n    mapping(address => bool) public isSigned;\\n    mapping(address => bool) public firstDepositReferral;\\n    mapping(address => mapping(uint256 => Robot)) public activatedRobots;\\n    mapping(address => uint256) public userActivatedRobots;\\n    mapping(address => uint256) public individualInvestment;\\n    mapping(address => TransactionRecord[]) public transactionHistory;\\n    mapping(address => bool) public firstWithdrawlReferral;\\n    mapping(address => TeamInfo) public team;\\n\\n    event WithdrawalAuthorized(address indexed initiator, uint256 amount);\\n    event WithdrawalSigned(address indexed signer, uint256 timestamp);\\n    event ProfitTransfered(address to, uint256 time, uint256 amount);\\n\\n    event FundDeposited(\\n        address depositer,\\n        address receiver,\\n        address referrer,\\n        uint256 amount\\n    );\\n\\n    event UserWithdraw(address from, uint256 amountWithdraw);\\n\\n    event RobotActivated(address activatedBy, uint256 robotAmount);\\n\\n    event OwnerWithdraw(address from, uint256 amount);\\n\\n    event PlatformShareUpdated(address from, uint256 newPlatformShare);\\n\\n    event ProfitPercentageUpdated(address from, uint256 newProfitPercentage);\\n\\n    event RewardTransfered(\\n        address user1,\\n        address user2,\\n        address user3,\\n        uint256 userPercentage1,\\n        uint256 userPercentage2,\\n        uint256 userPercentage3\\n    );\\n    event DepositPaused(address from, uint256 time, bool status);\\n    event userBlackListed(address from, address blacklistedUser);\\n\\n    /**\\n     * @dev Constructor function to initialize the contract.\\n     * @param _depositToken Address of the deposit token.\\n     * @param _taxReceiver Address to receive tax on deposits.\\n     * @param _platformShare Percentage of platform share.\\n     * @param _profitPercentage Percentage of profit on robots.\\n     */\\n    constructor(\\n        address _firstSigner,\\n        address _secondSigner,\\n        address _thirdSigner,\\n        address _depositToken,\\n        address _taxReceiver,\\n        uint256 _platformShare,\\n        uint256 _profitPercentage\\n    ) {\\n        require(_platformShare > 0, \\\"Platform Share Can't be Zero\\\");\\n        require(\\n            _depositToken != address(0),\\n            \\\"Deposit Token Address Can't be Zero\\\"\\n        );\\n        require(\\n            _profitPercentage > 0,\\n            \\\"Profit Percentage Should be Greater than zero\\\"\\n        );\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(SIGNER_ROLE, _firstSigner);\\n        _grantRole(SIGNER_ROLE, _secondSigner);\\n        _grantRole(SIGNER_ROLE, _thirdSigner);\\n        token = IERC20(_depositToken);\\n        platformShare = _platformShare;\\n        taxReceiver = _taxReceiver;\\n        profitPercentage = _profitPercentage;\\n\\n        firstSigner = _firstSigner;\\n        secondSigner = _secondSigner;\\n        thirdSigner = _thirdSigner;\\n    }\\n\\n    /**\\n     * @dev Throws if the withdrawal is not authorized by all signers.\\n     */\\n    modifier isWithDrawlApproved() {\\n        require(\\n            isSigned[firstSigner] && isSigned[secondSigner],\\n            \\\"Withdrawal is not authorized by all signers\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Function for a signer to sign the withdrawal.\\n     */\\n    function signWithdraw() public onlyRole(SIGNER_ROLE) {\\n        isSigned[msg.sender] = true;\\n        emit WithdrawalSigned(msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Deposits funds into the contract.\\n     * @param _amount The amount of funds to deposit.\\n     * @param _referrer The address of the referrer.\\n     * Requirements:\\n     * - The amount must be greater than zero.\\n     * - Transfers the user's deposit to the contract.\\n     * - Transfers the platform share to the tax receiver.\\n     * - Sets the user's deposit information (amount, timestamp, referrer).\\n     * - If the referrer is a valid address and different from the user:\\n     *   - Sets the user as the referrer for the caller.\\n     * Emits the `FundDeposited` event with the user's address, contract address, referrer, and amount deposited.\\n     */\\n    function depositFunds(uint256 _amount, address _referrer) external {\\n        require(\\n            _referrer != msg.sender,\\n            \\\"You cant use your own address as referrer\\\"\\n        );\\n        require(_amount > 0, \\\"Deposit Should be Greater Than Zero\\\");\\n        require(_amount >= 20 * 1e18, \\\"Minimum Deposit is 20 USDT\\\");\\n        if (\\n            _referrer != address(0) &&\\n            !firstDepositReferral[msg.sender] &&\\n            _referrer != msg.sender\\n        ) {\\n            deposit[msg.sender].depositAmount += _amount;\\n            deposit[msg.sender].timestamp = block.timestamp;\\n            deposit[msg.sender].referrer = _referrer;\\n            token.transferFrom(msg.sender, address(this), _amount);\\n            firstDepositReferral[msg.sender] = true;\\n            team[_referrer].totalTeam.push(msg.sender);\\n        } else {\\n            uint256 ownerShare = _amount.mul(platformShare).div(100);\\n            uint256 userDeposit = _amount.sub(ownerShare);\\n            deposit[msg.sender].depositAmount += userDeposit;\\n            deposit[msg.sender].timestamp = block.timestamp;\\n            deposit[msg.sender].referrer = _referrer;\\n            token.transferFrom(msg.sender, address(this), userDeposit);\\n            token.transferFrom(msg.sender, taxReceiver, ownerShare);\\n        }\\n\\n        if (\\n            _referrer != address(0) &&\\n            _referrer != msg.sender &&\\n            referrals[msg.sender].referredBy == address(0)\\n        ) {\\n            referrals[msg.sender] = Referral(_referrer);\\n        }\\n        TransactionRecord memory record = TransactionRecord({\\n            timestamp: block.timestamp,\\n            action: \\\"Deposit Funds\\\",\\n            amount: _amount,\\n            from: msg.sender\\n        });\\n\\n        transactionHistory[msg.sender].push(record);\\n\\n        emit FundDeposited(msg.sender, address(this), _referrer, _amount);\\n    }\\n\\n    /**\\n     * @dev Sets the platform share percentage.\\n     * @param _platformShare The new platform share percentage to be set.\\n     * Requirements:\\n     * - The caller must be the contract owner.\\n     */\\n    function setPlatformShare(uint256 _platformShare) public onlyOwner {\\n        platformShare = _platformShare;\\n        emit PlatformShareUpdated(msg.sender, _platformShare);\\n    }\\n\\n    /**\\n     * @dev Withdraws the remaining balance in the contract to the owner's address.\\n     * Requirements:\\n     * - The caller must be the multiSignatureAddress contract.\\n     * - Transfers the balance of the deposit token to the owner's address.\\n     * - Emits the `OwnerWithdraw` event with the owner's address and the amount withdrawn.\\n     */\\n    function withdrawOwner(\\n        uint256 _amount\\n    ) external isWithDrawlApproved onlyOwner {\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        require(balance >= _amount, \\\"InSufficient Balance\\\");\\n        IERC20(token).transfer(msg.sender, _amount);\\n        emit OwnerWithdraw(msg.sender, balance);\\n    }\\n\\n    /**\\n     * @dev Activates a robot for the caller.\\n     * @param _robotAmount The amount of robot to activate.\\n     * Requirements:\\n     * - The caller must have a sufficient deposit amount to purchase the robot.\\n     * - The robot amount must be one of the predefined values: 20, 80, 220, or greater than 220.\\n     * - The maximum limit for each robot amount should not be exceeded.\\n     * - For 20 robot amount, the maximum limit is 10.\\n     * - For 80 robot amount, the maximum limit is 5.\\n     * - For 220 robot amount, the maximum limit is 2.\\n     * - For robot amounts greater than 220, the maximum limit is 1.\\n     * - Updates the user's deposit amount by subtracting the robot amount.\\n     * - Sets the last claim time to the current block timestamp.\\n     * - If the caller has a valid referrer up to the 1st level, adds the robot amount to their total robots value.\\n     * - If the caller has a valid referrer up to the 2nd level, adds the robot amount to their total robots value.\\n     * - If the caller has a valid referrer up to the 3rd level, adds the robot amount to their total robots value.\\n     * - Emits the `RobotActivated` event with the caller's address and the robot amount.\\n     */\\n    function activateRobot(uint256 _robotAmount) public {\\n        require(\\n            deposit[msg.sender].depositAmount >= _robotAmount,\\n            \\\"Your Deposit Amount is insufficient to buy this Robot\\\"\\n        );\\n\\n        address refer = referrals[msg.sender].referredBy;\\n        team[refer].totalInvestment += _robotAmount;\\n\\n        robots[msg.sender][_robotAmount].activeRobots++;\\n\\n        if (_robotAmount == 20 * 1e18) {\\n            require(\\n                robots[msg.sender][_robotAmount].activeRobots <= 10,\\n                \\\"Maximum Robot Limit Reached\\\"\\n            );\\n        } else if (_robotAmount == 80 * 1e18) {\\n            require(\\n                robots[msg.sender][_robotAmount].activeRobots <= 5,\\n                \\\"Maximum Robot Limit Reached\\\"\\n            );\\n        } else if (_robotAmount == 220 * 1e18) {\\n            require(\\n                robots[msg.sender][_robotAmount].activeRobots <= 2,\\n                \\\"Maximum Robot Limit Reached\\\"\\n            );\\n        } else if (_robotAmount > 220 * 1e18) {\\n            require(\\n                robots[msg.sender][_robotAmount].activeRobots <= 1,\\n                \\\"Maximum Robot Limit Reached\\\"\\n            );\\n        }\\n\\n        deposit[msg.sender].depositAmount -= _robotAmount;\\n        if (referrals[msg.sender].referredBy != address(0)) {\\n            address referrer = referrals[msg.sender].referredBy;\\n            userRobotsValue[msg.sender] += _robotAmount;\\n            teamRobotValue[referrer] += _robotAmount;\\n        } else if (referrals[msg.sender].referredBy == address(0)) {\\n            userRobotsValue[msg.sender] += _robotAmount;\\n        }\\n        uint256 currentIndex = userActivatedRobots[msg.sender];\\n        userActivatedRobots[msg.sender]++;\\n\\n        activatedRobots[msg.sender][currentIndex] = Robot(\\n            currentIndex,\\n            _robotAmount,\\n            block.timestamp,\\n            block.timestamp + 365 days,\\n            0,\\n            false,\\n            true,\\n            false\\n        );\\n\\n        TransactionRecord memory robotActivated = TransactionRecord({\\n            timestamp: block.timestamp,\\n            action: \\\"Activated Robot\\\",\\n            amount: _robotAmount,\\n            from: msg.sender\\n        });\\n        transactionHistory[msg.sender].push(robotActivated);\\n        individualInvestment[msg.sender] += _robotAmount;\\n\\n        emit RobotActivated(msg.sender, _robotAmount);\\n    }\\n\\n    /**\\n     * @dev Withdraws the specified amount from the user's deposit balance.\\n     * @param _amount The amount to withdraw from the user's deposit balance.\\n     * Requirements:\\n     * - The deposit functionality must be active.\\n     * - The user must have a sufficient balance to withdraw the specified amount.\\n     * - The user must not be blacklisted.\\n     * - Transfers the specified amount to the user's address.\\n     * Emits the `UserWithdraw` event with the user's address and the amount withdrawn.\\n     */\\n    function withdrawUser(uint256 _amount) public {\\n        require(isWithdrawActive, \\\"Withdraw is not Active\\\");\\n        require(\\n            deposit[msg.sender].depositAmount >= _amount,\\n            \\\"InSufficient User Balance\\\"\\n        );\\n        require(!blackListed[msg.sender], \\\"Cant Withdraw You are blacklisted\\\");\\n        if (\\n            referrals[msg.sender].referredBy != address(0) &&\\n            !firstDepositReferral[msg.sender]\\n        ) {\\n            IERC20(token).transfer(msg.sender, _amount);\\n            firstDepositReferral[msg.sender] = true;\\n        }\\n        uint256 ownerShare = _amount.mul(platformShare).div(100);\\n\\n        uint256 userShare = _amount.sub(ownerShare);\\n        IERC20(token).transfer(msg.sender, userShare);\\n        IERC20(token).transfer(taxReceiver, ownerShare);\\n        deposit[msg.sender].depositAmount -= _amount;\\n\\n        TransactionRecord memory record = TransactionRecord({\\n            timestamp: block.timestamp,\\n            action: \\\"User Withdrawl\\\",\\n            amount: _amount,\\n            from: msg.sender\\n        });\\n\\n        transactionHistory[msg.sender].push(record);\\n        emit UserWithdraw(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @dev Claims the profit for a given robot amount.\\n     * @param robotId The RobotId Address.\\n     * Requirements:\\n     * - The robot must be active for the user.\\n     * - The last claim time must be at least 24 hours ago.\\n     * - The user must have valid referrals up to the 3rd level.\\n     * - The profit percentage must be set.\\n     * - The user must have enough balance to receive the profit.\\n     * - Emits the `levels` event with the referral addresses and their respective levels.\\n     * - Transfers the profit to the caller's address.\\n     */\\n\\n    function claimProfit(uint256 robotId) public {\\n        require(\\n            activatedRobots[msg.sender][robotId].activated,\\n            \\\"No Robot is Active\\\"\\n        );\\n        require(\\n            !activatedRobots[msg.sender][robotId].profitClaimed,\\n            \\\"You can only Claim Profit once in 24 hours\\\"\\n        );\\n        require(\\n            activatedRobots[msg.sender][robotId].quantifiedActive,\\n            \\\"Quantify is not Active Yet\\\"\\n        );\\n        uint256 _robotAmount = activatedRobots[msg.sender][robotId].value;\\n        require(\\n            activatedRobots[msg.sender][robotId].quantifiedOn + 7 hours <\\n                block.timestamp,\\n            \\\"You can only Claim Profit after 7 hours of Qunatifying\\\"\\n        );\\n        require(\\n            activatedRobots[msg.sender][robotId].expiredOn > block.timestamp,\\n            \\\"Robot is Expired\\\"\\n        );\\n        address user1 = referrals[msg.sender].referredBy; //user c referred user d\\n        address user2 = referrals[user1].referredBy; //user b referred user c\\n        address user3 = referrals[user2].referredBy; //user a referred user b\\n        uint256 todayProfit = _robotAmount.mul(profitPercentage).div(100);\\n\\n        if (user1 != address(0) && user2 != address(0) && user3 != address(0)) {\\n            (, , uint256 level3) = getUserAffiliatePercentage(user3);\\n            (, uint256 level2, ) = getUserAffiliatePercentage(user2);\\n            (uint256 level1, , ) = getUserAffiliatePercentage(user1);\\n\\n            uint256 user1Commision = todayProfit.mul(level1).div(100);\\n            uint256 user2Commision = todayProfit.mul(level2).div(100);\\n            uint256 user3Commision = todayProfit.mul(level3).div(100);\\n\\n            deposit[user1].depositAmount += user1Commision;\\n            deposit[user2].depositAmount += user2Commision;\\n            deposit[user3].depositAmount += user3Commision;\\n\\n            totalProfit[user1] += user1Commision;\\n            totalProfit[user2] += user2Commision;\\n            totalProfit[user3] += user2Commision;\\n\\n            TransactionRecord memory user1record = TransactionRecord({\\n                timestamp: block.timestamp,\\n                action: \\\"Referral Reward\\\",\\n                amount: user1Commision,\\n                from: msg.sender\\n            });\\n            TransactionRecord memory user2record = TransactionRecord({\\n                timestamp: block.timestamp,\\n                action: \\\"Referral Reward\\\",\\n                amount: user2Commision,\\n                from: msg.sender\\n            });\\n            TransactionRecord memory user3record = TransactionRecord({\\n                timestamp: block.timestamp,\\n                action: \\\"Referral Reward\\\",\\n                amount: user3Commision,\\n                from: msg.sender\\n            });\\n\\n            transactionHistory[user1].push(user1record);\\n            transactionHistory[user2].push(user2record);\\n            transactionHistory[user3].push(user3record);\\n\\n            emit RewardTransfered(user1, user2, user3, level1, level2, level3);\\n        } else if (\\n            user1 != address(0) && user2 != address(0) && user3 == address(0)\\n        ) {\\n            (, uint256 level2, ) = getUserAffiliatePercentage(user2);\\n            (uint256 level1, , ) = getUserAffiliatePercentage(user1);\\n\\n            uint256 user1Commision = todayProfit.mul(level1).div(100);\\n            uint256 user2Commision = todayProfit.mul(level2).div(100);\\n\\n            deposit[user1].depositAmount += user1Commision;\\n            deposit[user2].depositAmount += user2Commision;\\n\\n            totalProfit[user1] += user1Commision;\\n            totalProfit[user2] += user2Commision;\\n\\n            TransactionRecord memory user1record = TransactionRecord({\\n                timestamp: block.timestamp,\\n                action: \\\"Referral Reward\\\",\\n                amount: user1Commision,\\n                from: msg.sender\\n            });\\n            TransactionRecord memory user2record = TransactionRecord({\\n                timestamp: block.timestamp,\\n                action: \\\"Referral Reward\\\",\\n                amount: user2Commision,\\n                from: msg.sender\\n            });\\n\\n            transactionHistory[user1].push(user1record);\\n            transactionHistory[user2].push(user2record);\\n            emit RewardTransfered(user1, user2, user3, level1, level2, 0);\\n        } else if (\\n            user1 != address(0) && user2 == address(0) && user3 == address(0)\\n        ) {\\n            (uint256 level1, , ) = getUserAffiliatePercentage(user1);\\n\\n            uint256 user1Commision = todayProfit.mul(level1).div(100);\\n            deposit[user1].depositAmount += user1Commision;\\n            totalProfit[user1] += user1Commision;\\n\\n            TransactionRecord memory user1record = TransactionRecord({\\n                timestamp: block.timestamp,\\n                action: \\\"Referral Reward\\\",\\n                amount: user1Commision,\\n                from: msg.sender\\n            });\\n            transactionHistory[user1].push(user1record);\\n            emit RewardTransfered(user1, user2, user3, level1, 0, 0);\\n        }\\n        TransactionRecord memory profitClaim = TransactionRecord({\\n            timestamp: block.timestamp,\\n            action: \\\"Claim Profit\\\",\\n            amount: todayProfit,\\n            from: msg.sender\\n        });\\n        transactionHistory[msg.sender].push(profitClaim);\\n        deposit[msg.sender].depositAmount += todayProfit;\\n        totalProfit[msg.sender] += todayProfit;\\n        activatedRobots[msg.sender][robotId].quantifiedActive = false;\\n        activatedRobots[msg.sender][robotId].profitClaimed = true;\\n        emit ProfitTransfered(msg.sender, block.timestamp, todayProfit);\\n    }\\n\\n    /**\\n     * @dev Pauses or resumes the deposit functionality.\\n     * @param _deposit Boolean value indicating whether deposit should be active or not.\\n     * Requirements:\\n     * - The caller must be the contract owner.\\n     */\\n    function pauseDeposit(bool _deposit) public onlyOwner {\\n        isWithdrawActive = _deposit;\\n        emit DepositPaused(msg.sender, block.timestamp, _deposit);\\n    }\\n\\n    /**\\n     * @dev Sets the profit percentage for each robot.\\n     * @param _share The new profit percentage to be set.\\n     * Requirements:\\n     * - The caller must be the contract owner.\\n     * - The profit percentage should be greater than zero.\\n     */\\n    function setProfitPercentage(uint256 _share) public onlyOwner {\\n        require(_share > 0, \\\"Share Should be Greater than Zero\\\");\\n        profitPercentage = _share;\\n        emit ProfitPercentageUpdated(msg.sender, _share);\\n    }\\n\\n    function setminQuantTime(uint256 _time) public onlyOwner {\\n        minQuantTime = _time;\\n    }\\n\\n    /**\\n     * @dev Blacklists a user.\\n     * @param _user The address of the user that will be blacklisted.\\n     */\\n    function blackListUser(address _user) public onlyOwner {\\n        blackListed[_user] = true;\\n        emit userBlackListed(msg.sender, _user);\\n    }\\n\\n    function startQuantify(uint256 robotId) public {\\n        if (activatedRobots[msg.sender][robotId].quantifiedActive) {\\n            require(\\n                activatedRobots[msg.sender][robotId].quantifiedOn + 24 hours <\\n                    block.timestamp,\\n                \\\"You can only Start Quantify once within 24 hours\\\"\\n            );\\n        }\\n\\n        activatedRobots[msg.sender][robotId].quantifiedOn = block.timestamp;\\n        activatedRobots[msg.sender][robotId].quantifiedActive = true;\\n        activatedRobots[msg.sender][robotId].profitClaimed = false;\\n    }\\n\\n    /**\\n     * @dev Returns the rank of a user based on their total robots value.\\n     * @param _user The address of the user.\\n     * @return The rank of the user as a string.\\n     */\\n    function getRank(address _user) public view returns (string memory) {\\n        uint256 totaluservalue = userRobotsValue[_user];\\n        uint256 totalteamvalue = teamRobotValue[_user];\\n        if (\\n            totaluservalue <= 500 * 1e18 ||\\n            (totaluservalue >= 500 * 1e18 && totalteamvalue <= 2000 * 1e18)\\n        ) {\\n            return \\\"bronze\\\";\\n        } else if (\\n            totaluservalue >= 500 * 1e18 &&\\n            totaluservalue <= 2000 * 1e18 &&\\n            totalteamvalue >= 2000 * 1e18\\n        ) {\\n            return \\\"silver\\\";\\n        } else if (\\n            totaluservalue >= 3500 * 1e18 && totalteamvalue >= 18000 * 1e18\\n        ) {\\n            return \\\"gold\\\";\\n        } else if (totaluservalue >= 9000 * 1e18 && totalteamvalue >= 100000) {\\n            return \\\"diamond\\\";\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the percentage of affiliate commission for each level based on the user's rank.\\n     * @param _user The address of the user.\\n     * @return level1Percentage The percentage of affiliate commission for level 1.\\n     * @return level2Percentage The percentage of affiliate commission for level 2.\\n     * @return level3Percentage The percentage of affiliate commission for level 3.\\n     */\\n\\n    function getUserAffiliatePercentage(\\n        address _user\\n    ) public view returns (uint256, uint256, uint256) {\\n        uint256 level1Percentage;\\n        uint256 level2Percentage;\\n        uint256 level3Percentage;\\n\\n        string memory rank = getRank(_user);\\n        if (\\n            keccak256(abi.encodePacked(rank)) ==\\n            keccak256(abi.encodePacked(\\\"bronze\\\"))\\n        ) {\\n            level1Percentage = 14;\\n            level2Percentage = 8;\\n            level3Percentage = 3;\\n        } else if (\\n            keccak256(abi.encodePacked(rank)) ==\\n            keccak256(abi.encodePacked(\\\"silver\\\"))\\n        ) {\\n            level1Percentage = 17;\\n            level2Percentage = 10;\\n            level3Percentage = 4;\\n        } else if (\\n            keccak256(abi.encodePacked(rank)) ==\\n            keccak256(abi.encodePacked(\\\"gold\\\"))\\n        ) {\\n            level1Percentage = 20;\\n            level2Percentage = 12;\\n            level3Percentage = 5;\\n        } else if (\\n            keccak256(abi.encodePacked(rank)) ==\\n            keccak256(abi.encodePacked(\\\"diamond\\\"))\\n        ) {\\n            level1Percentage = 24;\\n            level2Percentage = 16;\\n            level3Percentage = 6;\\n        }\\n        return (level1Percentage, level2Percentage, level3Percentage);\\n    }\\n\\n    function userBalance(address _user) public view returns (uint256) {\\n        uint256 balance = deposit[_user].depositAmount;\\n        return balance;\\n    }\\n\\n    function updateTaxAddress(address _newAddress) public onlyOwner {\\n        taxReceiver = _newAddress;\\n    }\\n\\n    function totalInvestment() public view returns (uint256) {\\n        return totalValueLocked;\\n    }\\n\\n    function getActivatedRobotsForUser(\\n        address user\\n    ) external view returns (Robot[] memory) {\\n        uint256 count = userActivatedRobots[user];\\n\\n        Robot[] memory userRobots = new Robot[](count);\\n\\n        uint256 currentIndex = 0; // Start from 0\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            if (activatedRobots[user][i].activated) {\\n                userRobots[currentIndex] = activatedRobots[user][i];\\n                currentIndex++;\\n            }\\n        }\\n\\n        return userRobots;\\n    }\\n\\n    function getExpiredRobot(\\n        address user\\n    ) external view returns (Robot[] memory) {\\n        uint256 count = userActivatedRobots[user];\\n\\n        Robot[] memory userRobots = new Robot[](count);\\n\\n        uint256 currentIndex = 0;\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            if (activatedRobots[user][i].expiredOn < block.timestamp) {\\n                userRobots[currentIndex] = activatedRobots[user][i];\\n                currentIndex++;\\n            }\\n        }\\n\\n        return userRobots;\\n    }\\n\\n    function getIndividualRobotAmount(\\n        address _user\\n    ) public view returns (uint256) {\\n        uint256 investment = individualInvestment[_user];\\n        return investment;\\n    }\\n\\n    function timeTillQuantified(\\n        address user,\\n        uint256 robotId\\n    ) public view returns (uint256, uint256, uint256) {\\n        uint256 timeElapsed = block.timestamp -\\n            activatedRobots[user][robotId].quantifiedOn;\\n        uint256 quantifyEndsOn = activatedRobots[user][robotId].quantifiedOn +\\n            7 hours;\\n        uint256 totalTime = activatedRobots[user][robotId].quantifiedOn +\\n            24 hours;\\n        return (timeElapsed, quantifyEndsOn, totalTime);\\n    }\\n\\n    function getUserTransactionHistory(\\n        address _user\\n    ) public view returns (TransactionRecord[] memory) {\\n        return transactionHistory[_user];\\n    }\\n\\n    function totalTeamMember(\\n        address _userAddress\\n    ) public view returns (uint256) {\\n        uint256 totalTeam = team[_userAddress].totalTeam.length;\\n        return totalTeam;\\n    }\\n\\n    function totalTeamInvestment(\\n        address _userAddress\\n    ) public view returns (uint256) {\\n        uint256 total = team[_userAddress].totalInvestment;\\n        return total;\\n    }\\n\\n    function removeFromBlacklist(address _user) public onlyOwner {\\n        blackListed[_user] = false;\\n    }\\n\\n    function setTotalValueLocked(uint256 _totalValueLocked) public onlyOwner {\\n        totalValueLocked = _totalValueLocked;\\n    }\\n\\n    function gettotalProfit(address _user) public view returns (uint256) {\\n        uint256 profit = totalProfit[_user];\\n        return profit;\\n    }\\n\\n    function ownerDeposit(uint256 _amount) external onlyOwner {\\n        token.transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    function addToUserDepsoit(\\n        address _user,\\n        uint256 amount,\\n        address _referrer\\n    ) external onlyOwner {\\n        deposit[_user].depositAmount += amount;\\n        deposit[msg.sender].timestamp = block.timestamp;\\n        deposit[msg.sender].referrer = _referrer;\\n        referrals[_user] = Referral(_referrer);\\n        TransactionRecord memory record = TransactionRecord({\\n            timestamp: block.timestamp,\\n            action: \\\"Deposit Funds\\\",\\n            amount: amount,\\n            from: _user\\n        });\\n\\n        transactionHistory[_user].push(record);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_firstSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_thirdSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taxReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_platformShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profitPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"DepositPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OwnerWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPlatformShare\",\"type\":\"uint256\"}],\"name\":\"PlatformShareUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProfitPercentage\",\"type\":\"uint256\"}],\"name\":\"ProfitPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProfitTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userPercentage1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userPercentage2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userPercentage3\",\"type\":\"uint256\"}],\"name\":\"RewardTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"activatedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"robotAmount\",\"type\":\"uint256\"}],\"name\":\"RobotActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWithdraw\",\"type\":\"uint256\"}],\"name\":\"UserWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawalSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"blacklistedUser\",\"type\":\"address\"}],\"name\":\"userBlackListed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_robotAmount\",\"type\":\"uint256\"}],\"name\":\"activateRobot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activatedRobots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"robotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantifiedOn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"quantifiedActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"profitClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"addToUserDepsoit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"blackListUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"robotId\",\"type\":\"uint256\"}],\"name\":\"claimProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"depositFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"firstDepositReferral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"firstWithdrawlReferral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getActivatedRobotsForUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"robotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantifiedOn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"quantifiedActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"profitClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct UltronGPT.Robot[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getExpiredRobot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"robotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantifiedOn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"quantifiedActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"profitClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct UltronGPT.Robot[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getIndividualRobotAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRank\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserAffiliatePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTransactionHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"internalType\":\"struct UltronGPT.TransactionRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"gettotalProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"individualInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSigned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWithdrawActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minQuantTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ownerDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_deposit\",\"type\":\"bool\"}],\"name\":\"pauseDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referredBy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"robots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeRobots\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"robotsPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformShare\",\"type\":\"uint256\"}],\"name\":\"setPlatformShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"setProfitPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalValueLocked\",\"type\":\"uint256\"}],\"name\":\"setTotalValueLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setminQuantTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"robotId\",\"type\":\"uint256\"}],\"name\":\"startQuantify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"team\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalInvestment\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamRobotValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thirdSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"robotId\",\"type\":\"uint256\"}],\"name\":\"timeTillQuantified\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReferralCommissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"totalTeamInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"totalTeamMember\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactionHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateTaxAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userActivatedRobots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRobotsValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UltronGPT", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f174efc819a1d6ccea2c3ec7441e2c0f951e4216000000000000000000000000a6b39d33a78147a59be68168117c5ef5df8f4208000000000000000000000000992c505bebef4757a25b86883f3123afc40e4a8600000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000b31f35f7d518bc91f867aca7e897497d2644672200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}