{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\Context.sol\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts\r\n\r\ninterface IOracleToken {\r\n    function mint(address to, uint256 amount) external;\r\n}\r\n\r\ninterface IGuessToken {\r\n    function mint(address to, uint256 amount) external;\r\n}\r\n\r\ninterface INFTVerification {\r\n    function hasApprovedNFT(address _wallet) external view returns (bool);\r\n}\r\n\r\ncontract Presale is Ownable {\r\n    IOracleToken public oracleToken;\r\n    IGuessToken public guessToken;\r\n    INFTVerification public nftVerification;\r\n    IERC20 public orbToken;\r\n\r\n    uint256 public presaleStartTime;\r\n    uint256 public presaleEndTime;\r\n\r\n    // Presale pricing and distribution rate parameters\r\n    uint256 public regularPricePerToken;\r\n    uint256 public discountPricePerToken;\r\n    uint256 public regularGuessTokenRateBasisPoints;\r\n    uint256 public higherGuessTokenRateBasisPoints;\r\n\r\n    constructor(address _oracleTokenAddress, address _guessTokenAddress, address _nftVerificationAddress, address _orbTokenAddress) {\r\n        oracleToken = IOracleToken(_oracleTokenAddress);\r\n        guessToken = IGuessToken(_guessTokenAddress);\r\n        nftVerification = INFTVerification(_nftVerificationAddress);\r\n        orbToken = IERC20(_orbTokenAddress);\r\n    }\r\n\r\n    // Function to set up presale parameters\r\n    function setupPresale(uint256 _start, uint256 _end, uint256 _regularPrice, uint256 _discountPrice, uint256 _regularGuessRateBasisPoints, uint256 _higherGuessRateBasisPoints) external onlyOwner {\r\n        // Only callable by owner\r\n        presaleStartTime = _start;\r\n        presaleEndTime = _end;\r\n        regularPricePerToken = _regularPrice;\r\n        discountPricePerToken = _discountPrice;\r\n        regularGuessTokenRateBasisPoints = _regularGuessRateBasisPoints;\r\n        higherGuessTokenRateBasisPoints = _higherGuessRateBasisPoints;\r\n    }\r\n\r\n    function buyTokens(uint256 _orbAmount) external {\r\n    require(block.timestamp >= presaleStartTime && block.timestamp <= presaleEndTime, \"Presale not active\");\r\n    require(_orbAmount % (1 ether) == 0, \"Only whole Orbs allowed\");\r\n\r\n    bool hasNFT = nftVerification.hasApprovedNFT(msg.sender);\r\n    uint256 oracleTokenRate = hasNFT ? discountPricePerToken : regularPricePerToken;\r\n    uint256 guessTokenRateBasisPoints = hasNFT ? higherGuessTokenRateBasisPoints : regularGuessTokenRateBasisPoints;\r\n\r\n    uint256 oracleTokensToMint = _orbAmount * oracleTokenRate;\r\n\r\n    // Calculate Guess tokens in Wei, then round down to whole tokens\r\n    uint256 guessTokensInWei = (_orbAmount * guessTokenRateBasisPoints) / 10000;\r\n    uint256 guessTokensToMint = guessTokensInWei / (1 ether);\r\n\r\n    orbToken.transferFrom(msg.sender, address(this), _orbAmount);\r\n    oracleToken.mint(msg.sender, oracleTokensToMint);\r\n    guessToken.mint(msg.sender, guessTokensToMint * (1 ether)); // Mint whole tokens only\r\n}\r\n\r\n    // Function to withdraw collected Orbs Tokens\r\n    function withdrawOrbs() external onlyOwner {\r\n        uint256 balance = orbToken.balanceOf(address(this));\r\n        orbToken.transfer(msg.sender, balance);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guessTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftVerificationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_orbTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orbAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountPricePerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guessToken\",\"outputs\":[{\"internalType\":\"contract IGuessToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"higherGuessTokenRateBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftVerification\",\"outputs\":[{\"internalType\":\"contract INFTVerification\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleToken\",\"outputs\":[{\"internalType\":\"contract IOracleToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orbToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regularGuessTokenRateBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regularPricePerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_regularPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discountPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_regularGuessRateBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_higherGuessRateBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setupPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawOrbs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000024485aad80506696e8eb206e0ddc1277d50677670000000000000000000000007899ceaa11c9e77badde2b2cb256f4371ecdb825000000000000000000000000feeea9e8364c8e0f609102f917ae042f0656b9020000000000000000000000006dbff53ed69dabb890cf67140475bb49a8617eea", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e317e11a75c272a251164a023f5032f065703ed9ba9d99f9f884b741275672df"}