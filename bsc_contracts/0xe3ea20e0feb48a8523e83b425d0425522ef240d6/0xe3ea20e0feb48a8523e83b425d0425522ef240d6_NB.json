{"SourceCode": "pragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n   \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor () public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract NB is IERC20, Ownable {\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    uint256 public minRefNum = 1;\r\n    mapping (address => bool) public exclude1;\r\n    mapping (address => address) public uplines;\r\n    address public pair;\r\n    bool public pairIsCreated = true;\r\n    uint256 public tradingEnabledTimestamp = 1623967200;\r\n    address public liquidityAddress = 0xc14fb67506A807ADD77A2b9E4C1BCe4a364B9f56;\r\n    address payable public marketAddress = 0x90EbF9A283C797609F9Bcd611ca50E601Ed52d6d;\r\n    address public refAddress = 0xC189F754E8d1D4894cf7295258DD5A864BF424D8;\r\n    address public poolTempAddress = 0x1000000000000000000000000000000000000001;\r\n    mapping (address => bool) public isExcludedFromFees;\r\n    mapping (address => bool) public exclude2;\r\n    mapping (address => bool) public isBlacklist;\r\n    IPancakeRouter02 internal uniswapV2Router = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    IERC20 private c_usdt = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n    uint256 public numTokensSellToAddToLiquidity = 10**18;\r\n    uint256 public maxTokensSellAmount = 500*10**18;\r\n    uint256 public maxTokensBuyAmount = 300*10**18;\r\n    mapping (uint256 => uint256) public refRewardRate;\r\n    \r\n    constructor() public {\r\n        refRewardRate[1] = 2;\r\n        refRewardRate[2] = 1;\r\n        address _pair = pairFor(uniswapV2Router.factory(), address(this), uniswapV2Router.WETH());\r\n        pair = _pair;\r\n        exclude2[address(uniswapV2Router)] = true;\r\n        exclude2[_pair] = true;\r\n        uint256 total = 300000*10**18;\r\n        _balances[msg.sender] = total;\r\n        _totalSupply = total;\r\n        emit Transfer(address(0), msg.sender, total);\r\n        isExcludedFromFees[msg.sender] = true;\r\n        isExcludedFromFees[address(this)] = true;\r\n        isExcludedFromFees[liquidityAddress] = true;\r\n        exclude1[msg.sender] = true;\r\n        exclude1[address(this)] = true;\r\n        exclude1[address(uniswapV2Router)] = true;\r\n        exclude1[_pair] = true;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return \"NB\";\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return \"Nuclear Bomb\";\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer1(address sender, address recipient, uint256 amount) private {\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _transfer2(address sender, address recipient, uint256 amount) private {\r\n        _transfer1(sender, recipient, amount);\r\n        if(!pairIsCreated){\r\n            return;\r\n        }\r\n        uint256 poolTempAmount = _balances[poolTempAddress];\r\n        if(poolTempAmount != 0) {\r\n            _balances[pair] += poolTempAmount;\r\n            emit Transfer(poolTempAddress, pair, poolTempAmount);\r\n            _balances[poolTempAddress] = 0;\r\n            IPancakePair(pair).sync();\r\n        }\r\n        uint256 contractTokenBalance = _balances[address(this)];\r\n        if (contractTokenBalance >= numTokensSellToAddToLiquidity) {\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private {\r\n        uint256 half = contractTokenBalance/2;\r\n        uint256 otherHalf = contractTokenBalance - half;\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForEth(half);\r\n        uint256 newBalance = address(this).balance - initialBalance;\r\n        addLiquidity(otherHalf, newBalance);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            liquidityAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _transfer3(address sender, address recipient, uint256 amount) private {\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        require(senderBalance*9/10 >= amount, \"ERC20: sell amount exceed 90% balance\");\r\n        require(maxTokensSellAmount >= amount, \"ERC20: sell amount exceed max\");\r\n        _balances[sender] = senderBalance - amount;\r\n\r\n        uint256 one = amount/100;\r\n        _balances[address(this)] += 6*one;\r\n        _refPayoutUSDT(sender, 6*one);\r\n\r\n        uint256 receiveAmount = amount*88/100;\r\n        _balances[recipient] += receiveAmount;\r\n        emit Transfer(sender, recipient, receiveAmount);\r\n            \r\n        _balances[poolTempAddress] += 4*one;\r\n        emit Transfer(sender, poolTempAddress, 4*one);\r\n\r\n        _balances[address(this)] += 2*one;\r\n        emit Transfer(sender, address(this), 2*one);\r\n    }\r\n\r\n    function _transfer4(address sender, address recipient, uint256 amount) private {\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        require(maxTokensBuyAmount >= amount, \"ERC20: sell amount exceed max\");\r\n        _balances[sender] = senderBalance - amount;\r\n\r\n        uint256 receiveAmount = amount*88/100;\r\n        _balances[recipient] += receiveAmount;\r\n        emit Transfer(sender, recipient, receiveAmount);\r\n\r\n        uint256 one = amount/100;  \r\n        _refPayoutToken(tx.origin, one);\r\n            \r\n        _balances[poolTempAddress] += 4*one;\r\n        emit Transfer(tx.origin, poolTempAddress, 4*one);\r\n\r\n        _balances[address(this)] += 2*one;\r\n        emit Transfer(tx.origin, address(this), 2*one);\r\n            \r\n        _balances[marketAddress] += 3*one;\r\n        emit Transfer(tx.origin, marketAddress, 3*one);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        if(isExcludedFromFees[sender] || isExcludedFromFees[recipient]) {\r\n            _transfer1(sender, recipient, amount);\r\n            if(uplines[recipient]==address(0) && !exclude1[recipient] && amount >= minRefNum) {\r\n                uplines[recipient] = sender;\r\n            }\r\n            return;\r\n        }\r\n        require(!isBlacklist[sender], \"sender in blacklist\");\r\n        if(!exclude2[sender] && !exclude2[recipient]) {\r\n            _transfer2(sender, recipient, amount);\r\n            if(uplines[recipient]==address(0) && !exclude1[recipient] && amount >= minRefNum) {\r\n                uplines[recipient] = sender;\r\n            }\r\n            return;\r\n        }\r\n        require(block.timestamp >= tradingEnabledTimestamp, \"trade not open\");\r\n        if(block.timestamp <= tradingEnabledTimestamp + 9) {\r\n            if(!exclude2[sender]) {\r\n                isBlacklist[sender] = true;\r\n            }\r\n            if(!exclude2[recipient]) {\r\n                isBlacklist[recipient] = true;\r\n            }\r\n        }\r\n        if(recipient == pair) {\r\n            _transfer3(sender, recipient, amount);\r\n            return;\r\n        }\r\n        if(sender == pair && recipient != address(uniswapV2Router)) {\r\n            _transfer4(sender, recipient, amount);\r\n            return;\r\n        }\r\n        _transfer1(sender, recipient, amount);\r\n    }\r\n\r\n    function _refPayoutToken(address addr, uint256 amount) private {\r\n        address up = uplines[addr];\r\n        uint256 totalPayout = 0;\r\n        for(uint8 i = 1; i < 3; i++) {\r\n            if(up == address(0)) break;\r\n            uint256 reward = amount*refRewardRate[i];\r\n            _balances[up] += reward;\r\n            totalPayout += reward;\r\n            emit Transfer(addr, up, reward);\r\n            up = uplines[up];\r\n        }\r\n        totalPayout = 3*amount - totalPayout;\r\n        if(totalPayout > 0) {\r\n            _balances[refAddress] += totalPayout;\r\n            emit Transfer(addr, refAddress, totalPayout);\r\n        }\r\n    }\r\n\r\n    function _refPayoutUSDT(address addr, uint256 amount) private {\r\n        swapTokensForTokens(amount, address(c_usdt));\r\n        uint256 contractUSDTBalance = c_usdt.balanceOf(address(this));\r\n        uint256 one = contractUSDTBalance/6;\r\n        c_usdt.transfer(marketAddress, 3*one);\r\n        address up = uplines[addr];\r\n        uint256 totalPayout = 0;\r\n        for(uint8 i = 1; i < 3; i++) {\r\n            if(up == address(0)) break;\r\n            uint256 reward = one*refRewardRate[i];\r\n            totalPayout += reward;\r\n            c_usdt.transfer(up, reward);\r\n            up = uplines[up];\r\n        }\r\n        totalPayout = 3*one - totalPayout;\r\n        if(totalPayout > 0) {\r\n            c_usdt.transfer(refAddress, totalPayout);\r\n        }\r\n    }\r\n\r\n    function swapTokensForTokens(uint256 tokenAmount, address tokenDesireAddress) private {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        path[2] = tokenDesireAddress;\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair_) {\r\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        pair_ = address(uint160(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'\r\n        )))));\r\n    }\r\n\r\n    function setPair(address _pair) external onlyOwner {\r\n        pair = _pair;\r\n    }\r\n    function setPairIsCreated(bool b) external onlyOwner {\r\n        pairIsCreated = b;\r\n    }\r\n    function setTrade(uint256 t) external onlyOwner {\r\n        tradingEnabledTimestamp = t;\r\n    }\r\n    function setSell(uint256 t) external onlyOwner {\r\n        maxTokensSellAmount = t;\r\n    }\r\n    function setBuy(uint256 t) external onlyOwner {\r\n        maxTokensBuyAmount = t;\r\n    }\r\n    function setL(uint256 t) external onlyOwner {\r\n        numTokensSellToAddToLiquidity = t;\r\n    }\r\n    function setExcludeFee(address a, bool b) external onlyOwner {\r\n        isExcludedFromFees[a] = b;\r\n    }\r\n    function setBlacklist(address a, bool b) external onlyOwner {\r\n        isBlacklist[a] = b;\r\n    }\r\n    function setRP(address a, bool b) external onlyOwner {\r\n        exclude2[a] = b;\r\n    }\r\n    function setMinRefNum(uint256 newMinRefNum) external onlyOwner {\r\n        minRefNum = newMinRefNum;\r\n    }\r\n    function withdrawETH() external onlyOwner {\r\n        marketAddress.transfer(address(this).balance);\r\n    }\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPancakePair{\r\n    function token0() external view returns (address);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function sync() external;\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exclude1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exclude2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRefNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairIsCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTempAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"setBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setExcludeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"setL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinRefNum\",\"type\":\"uint256\"}],\"name\":\"setMinRefNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setPairIsCreated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setRP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"setSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"setTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabledTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uplines\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NB", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8dfca964b3c4f396d4c4cf942b8136765bd1115a138b60e801935f959f05e419"}