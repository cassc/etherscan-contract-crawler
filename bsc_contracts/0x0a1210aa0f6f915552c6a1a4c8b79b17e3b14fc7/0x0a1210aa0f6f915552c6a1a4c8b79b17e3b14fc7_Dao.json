{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-01-24\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-01-17\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.5.8;\r\nlibrary SafeMath {\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0);\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint amount) internal {\r\n        require(address(this).balance >= amount);\r\n\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success);\r\n    }\r\n}\r\ncontract Ownable {\r\n    using Address for address;\r\n    address payable public Owner;\r\n\r\n    event onOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        Owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == Owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        emit onOwnershipTransferred(Owner, _newOwner);\r\n        Owner = _newOwner.toPayable();\r\n    }\r\n}\r\ninterface ITRC20 {\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address who) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    // function mint(address owner, uint value) external returns(bool);\r\n    // function burn(uint value) external returns(bool);\r\n}\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint amount, address token, bytes calldata extraData) external;\r\n}\r\n\r\ncontract TRC20 is ITRC20, Ownable {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    mapping (address => uint) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint)) internal _allowances;\r\n\r\n    uint internal _totalSupply;\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\r\n        require(_allowances[sender][msg.sender] >= amount, \"insufficient allowance!\");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function burn(uint amount) public returns (bool) {\r\n        _burn(msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    // approveAndCall\r\n    function approveAndCall(address spender, uint amount, bytes memory extraData) public returns (bool) {\r\n        require(approve(spender, amount));\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, amount, address(this), extraData);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint amount) internal {\r\n        require(sender != address(0));\r\n        require(recipient != address(0));\r\n        require(_balances[sender] >= amount, \"insufficient balance\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint amount) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint amount) internal {\r\n        require(account != address(0));\r\n        require(_balances[account] >= amount, \"insufficient balance\");\r\n\r\n        _balances[account] = _balances[account].sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint amount) internal {\r\n        require(owner != address(0));\r\n        require(spender != address(0));\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\ncontract TRC20Detailed is ITRC20 {\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\ncontract Dao is TRC20Detailed, TRC20 {\r\n    using Address for address;\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n    uint public BURN_PERCENT = 30;//\ufffd\ufffd\ufffd\u0671\ufffd\ufffd\ufffd\r\n    uint256 public ecology = 10;//\ufffd\ufffd\u032c\r\n    uint256 public fund = 10;//\ufffd\ufffd\ufffd\ufffd\r\n    uint256 public node = 50;//\ufffd\u06b5\ufffd\r\n    uint public decimalVal = 1e18;\r\n   \r\n    uint public FOMO_MAX_LIMIT = 210000 * decimalVal;//\u0363\u05b9\u0368\ufffd\ufffd\r\n    uint public FomoRewardPool;\r\n     \r\n    address public ecologyAddr;//DAO\ufffd\ufffd\u032c\ufffd\ufffd\u05b7\r\n    address public fundAddr;//DAO\ufffd\ufffd\ufffd\ufffd\ufffd\u05b7\r\n    address public nodeAddr;//DAO\ufffd\ufffd\u05af\ufffd\ufffd\u05b7\r\n    mapping (address => bool) public specialAddress;\r\n    mapping (address => bool) public receiveAddress;\r\n    uint public transferNum = 100 * decimalVal;//\u05ea\ufffd\u02f5\u00f8\ufffd\ufffd\ufffd\r\n    mapping (address => uint) public transferTime;//\u05ea\ufffd\ufffd\u02b1\ufffd\ufffd\r\n    mapping (address => uint) public transferNumber;//24\u05ea\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\r\n    uint public dayTarnsferTime = 86400;\r\n    uint public dayNumber = 500* decimalVal;//\u04bb\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\r\n    function setMaxLimit(uint val) public onlyOwner {\r\n        FOMO_MAX_LIMIT = val;\r\n    }\r\n    function setTransferNum(uint val) public onlyOwner {\r\n        transferNum = val;\r\n    }\r\n    function setDayTarnsferTime(uint val) public onlyOwner {\r\n        dayTarnsferTime = val;\r\n    }\r\n    function setDayNumber(uint val) public onlyOwner {\r\n        dayNumber = val;\r\n    }\r\n    constructor (address addr_,address ecologyAddr_,address fundAddr_,address nodeAddr_, address storageAddress1, address storageAddress2, address storageAddress3) public TRC20Detailed(\"DarkHorse DAO\", \"DH\", 18) {\r\n        _mint(addr_, 4001314 * decimalVal);\r\n        _mint(storageAddress1, 300000 * decimalVal); \r\n        _mint(storageAddress2, 400000 * decimalVal); \r\n        _mint(storageAddress3, 500000 * decimalVal); \r\n        specialAddress[storageAddress1] = true;\r\n        specialAddress[storageAddress2] = true;\r\n        specialAddress[storageAddress3] = true;\r\n        specialAddress[addr_] = true;\r\n        ecologyAddr = ecologyAddr_;\r\n        fundAddr = fundAddr_;\r\n        nodeAddr = nodeAddr_;\r\n    }\r\n    \r\n    function setSpecialAddress(address addr) public onlyOwner{\r\n        require(address(0) != addr);\r\n        specialAddress[addr] = true;\r\n    }\r\n\r\n    function delSpecialAddress(address addr) public onlyOwner{\r\n        require(address(0) != addr);\r\n        specialAddress[addr] = false;\r\n    }\r\n    //\ufffd\ufffd\ufffd\u0375\ufffd\u05b7\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\r\n    function getSpecialAddress(address addr) public view returns(bool) {\r\n        require(address(0) != addr);\r\n        return specialAddress[addr];\r\n    }\r\n    function setReceiveAddress(address addr) public onlyOwner{\r\n        require(address(0) != addr);\r\n        receiveAddress[addr] = true;\r\n    }\r\n\r\n    function delReceiveAddress(address addr) public onlyOwner{\r\n        require(address(0) != addr);\r\n        receiveAddress[addr] = false;\r\n    }\r\n\r\n    //\ufffd\ufffd\ufffd\u0575\ufffd\u05b7\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\r\n    function getReceiveAddress(address addr) public view returns(bool) {\r\n        require(address(0) != addr);\r\n        return receiveAddress[addr];\r\n    }\r\n    \r\n    function _transferBurn(address from, uint amount) internal {\r\n        require(from != address(0));\r\n        // burn\r\n        _burn(from, amount);\r\n        // fomo reward pool\r\n        FomoRewardPool = FomoRewardPool.add(amount);\r\n    }\r\n    function burn(uint amount) public returns (bool)  {\r\n        super._burn(msg.sender, amount);\r\n    }\r\n    function _transferFrom(address from, address to, uint value) internal returns (bool) {\r\n        if (getSpecialAddress(from) || getReceiveAddress(to)) {\r\n            super._transfer(from,to, value);\r\n            return true;\r\n        }\r\n        require(value<=transferNum,'Exceeding the maximum quantity of a single transaction');\r\n        if(!address(from).isContract()){//\ufffd\u0436\ufffd\ufffd\u01f7\ufffd\ufffd\u01fa\ufffd\u053c\ufffd\ufffd\u05b7\r\n            if(transferTime[from]== 0 || (transferTime[from]>0 && block.timestamp.sub(transferTime[from]) > dayTarnsferTime)){\r\n                transferNumber[from] = value;\r\n                transferTime[from] = block.timestamp;\r\n            }else{\r\n                require((block.timestamp.sub(transferTime[from])<dayTarnsferTime && transferNumber[from].add(value)<=dayNumber),'day over transfer number');\r\n                transferNumber[from] = transferNumber[from].add(value);\r\n            }\r\n        }\r\n        uint transferAmount = value;\r\n        uint proportion = transferFee(balanceOf(from));//\ufffd\ufffd\ufffd\ufffd\ufffd\u0471\ufffd\ufffd\ufffd\r\n        uint feeAmount = value.mul(proportion).div(100);\r\n        transferAmount = transferAmount.sub(feeAmount);\r\n        uint BURN_PERCENTAmount = feeAmount.mul(BURN_PERCENT).div(100);//\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0471\ufffd\ufffd\ufffd30 \r\n        uint ecologyAmount = feeAmount.mul(ecology).div(100);//\ufffd\ufffd\ufffd\ufffd\ufffd\u0471\ufffd\ufffd\ufffd10 \r\n        uint fundAmount = feeAmount.mul(fund).div(100);//\ufffd\ufffd\ufffd\ufffd\ufffd\u0471\ufffd\ufffd\ufffd10 \r\n        uint nodeAmount = feeAmount.mul(node).div(100);//\ufffd\ufffd\ufffd\ufffd\ufffd\u0471\ufffd\ufffd\ufffd50\r\n            uint totalSupply = totalSupply();\r\n        if (totalSupply>FOMO_MAX_LIMIT) {\r\n            _transferBurn(from, BURN_PERCENTAmount);\r\n        }else{\r\n            ecologyAmount = ecologyAmount.add(BURN_PERCENTAmount);\r\n        }\r\n        if(ecologyAmount>0){\r\n           super._transfer(from,ecologyAddr, ecologyAmount);\r\n        }\r\n        if(fundAmount>0){\r\n           super._transfer(from,fundAddr, fundAmount);\r\n        }\r\n        if(nodeAmount>0){\r\n           super._transfer(from,nodeAddr, nodeAmount); \r\n        }\r\n        if(transferAmount>0){\r\n           super._transfer(from,to, transferAmount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint value) public returns (bool) {\r\n        return _transferFrom(msg.sender, to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint value) public returns (bool) {\r\n        super._approve(from, msg.sender, _allowances[from][msg.sender].sub(value));\r\n        return _transferFrom(from, to, value);\r\n    }\r\n\r\n    function rescue(address payable to, uint256 amount) external onlyOwner {\r\n        require(to != address(0), \"must not 0\");\r\n        require(amount > 0, \"must gt 0\");\r\n        require(address(this).balance >= amount, \"insufficient balance\");\r\n\r\n        to.transfer(amount);\r\n    }\r\n\r\n    function rescue(address to, ITRC20 token, uint256 amount) external onlyOwner {\r\n        require(to != address(0), \"must not 0\");\r\n        require(amount > 0, \"must gt 0\");\r\n        require(token.balanceOf(address(this)) >= amount, \"insufficent token balance\");\r\n\r\n        token.transfer(to, amount);\r\n    }\r\n\r\n    struct Fee{\r\n        uint8 proportion;\r\n        uint256 start_num;\r\n        uint256 end_num;\r\n    }\r\n    Fee[] private fees;\r\n    mapping (uint8=>bool) private isFee;\r\n    function editFee(uint8 proportion_, uint256 start_num_ , uint256 end_num_ ) public onlyOwner{\r\n        if (!isFee[proportion_]) {\r\n            fees.push(Fee({proportion:proportion_,start_num:start_num_,end_num:end_num_}));\r\n            isFee[proportion_] = true;\r\n            return;\r\n        }\r\n        for(uint256 i=0;i<fees.length;i++){\r\n            if (fees[i].proportion == proportion_) {\r\n                fees[i] = Fee({proportion:proportion_,start_num:start_num_,end_num:end_num_});\r\n            }\r\n        }\r\n    }\r\n    //\ufffd\u9ff4\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\r\n    function transferFee(uint256 num)public view returns(uint256){\r\n         uint fee = 0;\r\n         for(uint256 i=0;i<fees.length;i++){\r\n             if(num>= fees[i].start_num){\r\n                  fee = fees[i].proportion;\r\n             }else if(num>= fees[i].start_num && fees[i].end_num == 0){\r\n                  fee = fees[i].proportion;\r\n             }\r\n        }\r\n         return fee;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ecologyAddr_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundAddr_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddr_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"storageAddress1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"storageAddress2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"storageAddress3\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"onOwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOMO_MAX_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FomoRewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dayNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dayTarnsferTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalVal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delReceiveAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delSpecialAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecology\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecologyAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"proportion_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"start_num_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end_num_\",\"type\":\"uint256\"}],\"name\":\"editFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getReceiveAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getSpecialAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"node\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nodeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiveAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract ITRC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setDayNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setDayTarnsferTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setMaxLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setReceiveAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setSpecialAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setTransferNum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"specialAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Dao", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000003b05b9ba492eff3a28d5fcff479a5ba81184eda0000000000000000000000000a28ac7d7be318d6b587f80530dc3404c1721314e000000000000000000000000d984d2d165a2807a7a0036d9e07dd2203951314f0000000000000000000000009d0b4535d4187eaf4102a5ae4d3527e0d541314d000000000000000000000000fed6fb738d13271c87f48d244390231a76a23927000000000000000000000000ddb0659359079ae91642f5b6612c8472a5f7fbb80000000000000000000000000699d67f158a861dc16dbb0351dc04d2ab04268a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d2acf9edc239ff21226b5d50fb6bdb836101de168ef19588ec82e4067ba9b4f7"}