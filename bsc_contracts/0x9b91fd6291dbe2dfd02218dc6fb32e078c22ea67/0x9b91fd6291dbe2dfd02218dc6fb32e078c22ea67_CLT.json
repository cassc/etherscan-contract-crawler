{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-03-04\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-02-22\r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.11;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n       \r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n   modifier authorized() {require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;}\r\n\r\n    function authorize(address adr) public onlyOwner {authorizations[adr] = true;}\r\n\r\n    function unauthorize(address adr) public onlyOwner {authorizations[adr] = false;}\r\n\r\n    function isOwner(address account) public view returns (bool) {return account == owner;}\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {return authorizations[adr];}\r\n\r\n    function transferOwnership(address payable adr) public onlyOwner {owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function process(uint256 gas) external;\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n    using SafeMath for uint256;\r\n\r\n    address _token;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    IBEP20 private REWARD = IBEP20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);//Initial BUSD\r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;//0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\r\n    IDEXRouter router;\r\n\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) shareholderClaims;\r\n\r\n    mapping (address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n    \r\n    uint256 public minPeriod = 1 hours;\r\n    uint256 public minDistribution = 1 * (10 ** 8);\r\n\r\n    uint256 currentIndex;\r\n\r\n    bool initialized;\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n    \r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n    \r\n    constructor (address _router) {\r\n        router = _router != address(0)\r\n            ? IDEXRouter(_router)\r\n            : IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);  \r\n        _token = msg.sender;\r\n    }\r\n    \r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n    \r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if(shares[shareholder].amount > 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n    \r\n    function deposit() external payable override onlyToken {\r\n        uint256 balanceBefore = REWARD.balanceOf(address(this));\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = address(REWARD);\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        uint256 amount = REWARD.balanceOf(address(this)).sub(balanceBefore);\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n    }\r\n    \r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n        if(shareholderCount == 0) { return; }\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n            if(shouldDistribute(shareholders[currentIndex])){\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    \r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n                && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n    \r\n    function distributeDividend(address shareholder) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if(amount > 0){\r\n            totalDistributed = totalDistributed.add(amount);\r\n            REWARD.transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n    }\r\n    \r\n        function claimDividend(address shareholder) external onlyToken{\r\n        distributeDividend(shareholder);\r\n    }\r\n    \r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n       \r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n       \r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n    \r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n    \r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n    \r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n    \r\n    function setDividendTokenAddress(address newToken) external onlyToken{\r\n        REWARD = IBEP20(newToken);\r\n    }\r\n}\r\n\r\ncontract CLT is IBEP20, Auth {\r\n    using SafeMath for uint256;\r\n   \r\n    address WBNB     = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address DEAD     = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO     = 0x0000000000000000000000000000000000000000;\r\n\r\n    string constant _name = \"Cartoleiros Token\";\r\n    string constant _symbol = \"CLT\";\r\n    uint8 constant _decimals = 9;\r\n   \r\n    uint256 _totalSupply = 1000000 * (10 ** _decimals);\r\n    uint256 public _maxTxAmount = _totalSupply / 500; //20,000,000\r\n   \r\n    //max wallet holding of 5%\r\n    uint256 public _maxWalletToken =  _totalSupply  / 110; //100,000,000\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    \r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n    mapping (address => bool) isTimelockExempt;\r\n    mapping (address => bool) isDividendExempt;\r\n\r\n    uint256 liquidityFee = 100;\r\n    uint256 buybackFee = 0;\r\n    uint256 reflectionFee = 0;\r\n    uint256 marketingFee = 400;\r\n    uint256 projectFee = 300;\r\n    uint256 totalFee = 800;\r\n    uint256 feeDenominator = 10000;\r\n    \r\n    uint256 burnFee = 0;\r\n    uint256 extraFeeOnSell = 400;\r\n\r\n    address private developmentReceiver;\r\n    address private marketingFeeReceiver;\r\n    address private projectFeeReceiver;\r\n\r\n    uint256 targetLiquidity = 25;\r\n    uint256 targetLiquidityDenominator = 100;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n    uint256 public launchedAt;\r\n    uint256 buybackMultiplierNumerator = 200;\r\n    uint256 buybackMultiplierDenominator = 100;\r\n    uint256 buybackMultiplierTriggeredAt;\r\n    uint256 buybackMultiplierLength = 30 minutes;\r\n\r\n    bool public autoBuybackEnabled = false;\r\n    bool public autoBuybackMultiplier = true;\r\n   \r\n    uint256 autoBuybackCap;\r\n    uint256 autoBuybackAccumulator;\r\n    uint256 autoBuybackAmount;\r\n    uint256 autoBuybackBlockPeriod;\r\n    uint256 autoBuybackBlockLast;\r\n    \r\n    bool public tradingOpen = false;\r\n\r\n    DividendDistributor distributor;\r\n    uint256 distributorGas = 500000;\r\n\r\n    bool public swapEnabled = true;\r\n    bool public buyCooldownEnabled = true;\r\n    uint8 public cooldownTimerInterval = 30;\r\n    mapping (address => uint) private cooldownTimer;\r\n    \r\n    uint256 public swapThreshold = _totalSupply / 10000; //1,000,000\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor () Auth(msg.sender) {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n        distributor = new DividendDistributor(address(router));\r\n        \r\n        isTimelockExempt[msg.sender] = true;\r\n        isTimelockExempt[DEAD] = true;\r\n        isTimelockExempt[address(this)] = true;\r\n        \r\n        address _inicial = 0xCdAAD5D58C63934800373e8E35f7618FB26626B5;\r\n        isFeeExempt[_inicial] = true;\r\n        isTxLimitExempt[_inicial] = true;\r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[DEAD] = true;\r\n        developmentReceiver = msg.sender;\r\n        marketingFeeReceiver = msg.sender;\r\n        _balances[_inicial] = _totalSupply;\r\n        emit Transfer(address(0), _inicial, _totalSupply);\r\n    }\r\n    \r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        \r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n    \r\n    //settting the maximum permitted wallet holding (percent of total supply)\r\n     function setMaxWalletPercent(uint256 maxWallPercent) external onlyOwner() {\r\n        _maxWalletToken = (_totalSupply * maxWallPercent ) / 100;\r\n    }\r\n    \r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        uint256 burnFeeAmount = amount.mul(burnFee).div(feeDenominator);\r\n        uint256 amountWithFee = amount.sub(burnFeeAmount);\r\n        \r\n         if(!authorizations[sender] && !authorizations[recipient]){\r\n            require(tradingOpen,\"Trading not open yet\");\r\n        }\r\n        \r\n        //max wallet code\r\n        if (!authorizations[sender] && recipient != address(this)  && recipient != address(DEAD) && recipient != pair && recipient != marketingFeeReceiver && recipient != developmentReceiver){\r\n            uint256 heldTokens = balanceOf(recipient);\r\n            require((heldTokens + amount) <= _maxWalletToken,\"Total Holding is currently limited, you can not buy that much.\");}\r\n\r\n\r\n        if(inSwap){\r\n            if (burnFeeAmount > 0) { _burn(sender, burnFeeAmount); }\r\n            return _basicTransfer(sender, recipient, amountWithFee); \r\n        }\r\n        \r\n        checkTxLimit(sender, amount);\r\n        \r\n        if(shouldSwapBack()){ swapBack(); }\r\n        \r\n        if(shouldAutoBuyback()){ triggerAutoBuyback(); }\r\n        \r\n        if(!launched() && recipient == pair){ require(_balances[sender] > 0); launch(); }\r\n        \r\n        _balances[sender] = _balances[sender].sub(amountWithFee, \"Insufficient Balance\");\r\n        \r\n        if (burnFeeAmount > 0) { _burn(sender, burnFeeAmount); }\r\n        \r\n        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(sender, recipient, amountWithFee) : amountWithFee;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        \r\n        if(!isDividendExempt[sender]){ try distributor.setShare(sender, _balances[sender]) {} catch {} }\r\n        \r\n        if(!isDividendExempt[recipient]){ try distributor.setShare(recipient, _balances[recipient]) {} catch {} }\r\n        \r\n        try distributor.process(distributorGas) {} catch {}\r\n        \r\n            if (sender == pair &&\r\n            buyCooldownEnabled &&\r\n            !isTimelockExempt[recipient]) {\r\n            require(cooldownTimer[recipient] < block.timestamp,\"Please wait for cooldown between buys\");\r\n            cooldownTimer[recipient] = block.timestamp + cooldownTimerInterval;\r\n        }\r\n        \r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n    \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        \r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");\r\n    }\r\n    \r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n    \r\n    function getTotalFee(bool selling) public view returns (uint256) {\r\n        uint256 _totalFee = totalFee;\r\n        if(launchedAt + 1 >= block.number){ return feeDenominator.sub(1); }\r\n        if(selling && buybackMultiplierTriggeredAt.add(buybackMultiplierLength) > block.timestamp){ return getMultipliedFee(); }\r\n        if (selling) {\r\n            _totalFee = totalFee.add(extraFeeOnSell);\r\n        }\r\n        return _totalFee;\r\n    }\r\n    \r\n    function getMultipliedFee() public view returns (uint256) {\r\n        uint256 remainingTime = buybackMultiplierTriggeredAt.add(buybackMultiplierLength).sub(block.timestamp);\r\n        uint256 feeIncrease = totalFee.mul(buybackMultiplierNumerator).div(buybackMultiplierDenominator).sub(totalFee);\r\n        return totalFee.add(feeIncrease.mul(remainingTime).div(buybackMultiplierLength));\r\n    }\r\n    \r\n    function takeFee(address sender, address receiver, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount = amount.mul(getTotalFee(receiver == pair)).div(feeDenominator);\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n        return amount.sub(feeAmount);\r\n    }\r\n    \r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n    \r\n    function swapBack() internal swapping {\r\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee;\r\n        uint256 amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(totalFee).div(2);\r\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp);\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n        uint256 totalBNBFee = totalFee.sub(dynamicLiquidityFee.div(2));\r\n        uint256 amountBNBLiquidity = amountBNB.mul(dynamicLiquidityFee).div(totalBNBFee).div(2);\r\n        uint256 amountBNBReflection = amountBNB.mul(reflectionFee).div(totalBNBFee);\r\n        uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(totalBNBFee);\r\n        uint256 amountBNBProject = amountBNB.mul(projectFee).div(totalBNBFee);\r\n\r\n        try distributor.deposit{value: amountBNBReflection}() {} catch {}\r\n        (bool success, /* bytes memory data */) = payable(marketingFeeReceiver).call{value: amountBNBMarketing, gas: 50000}(\"\");\r\n        require(success, \"receiver rejected ETH transfer\");\r\n        (bool success2, /* bytes memory data */) = payable(projectFeeReceiver).call{value: amountBNBProject, gas: 50000}(\"\");\r\n        require(success2, \"receiver rejected ETH transfer\");\r\n\r\n\r\n        if(amountToLiquify > 0){\r\n            router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,developmentReceiver,block.timestamp);\r\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\r\n\r\n        \r\n        }\r\n\r\n    }\r\n    \r\n    function shouldAutoBuyback() internal view returns (bool) {\r\n        return msg.sender != pair\r\n            && !inSwap\r\n            && autoBuybackEnabled\r\n            && autoBuybackBlockLast + autoBuybackBlockPeriod <= block.number\r\n            && address(this).balance >= autoBuybackAmount;\r\n    }\r\n    \r\n    function triggerManualBuyback(uint256 amount, bool triggerBuybackMultiplier) external authorized {\r\n        buyTokens(amount, DEAD);\r\n        if(triggerBuybackMultiplier){\r\n            buybackMultiplierTriggeredAt = block.timestamp;\r\n            emit BuybackMultiplierActive(buybackMultiplierLength);\r\n        }\r\n    }\r\n    \r\n    function clearBuybackMultiplier() external authorized {\r\n        buybackMultiplierTriggeredAt = 0;\r\n    }\r\n    \r\n    function triggerAutoBuyback() internal {\r\n        buyTokens(autoBuybackAmount, DEAD);\r\n        if(autoBuybackMultiplier){\r\n            buybackMultiplierTriggeredAt = block.timestamp;\r\n            emit BuybackMultiplierActive(buybackMultiplierLength);\r\n        }\r\n        autoBuybackBlockLast = block.number;\r\n        autoBuybackAccumulator = autoBuybackAccumulator.add(autoBuybackAmount);\r\n        if(autoBuybackAccumulator > autoBuybackCap){ autoBuybackEnabled = false; }\r\n    }\r\n    \r\n    function buyTokens(uint256 amount, address to) internal swapping {\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = address(this);\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp);\r\n    }\r\n    \r\n    function setIsTimelockExempt(address holder, bool exempt) external authorized {\r\n        isTimelockExempt[holder] = exempt;\r\n    }\r\n    \r\n    function setAutoBuybackSettings(bool _enabled, uint256 _cap, uint256 _amount, uint256 _period, bool _autoBuybackMultiplier) external authorized {\r\n        autoBuybackEnabled = _enabled;\r\n        autoBuybackCap = _cap;\r\n        autoBuybackAccumulator = 0;\r\n        autoBuybackAmount = _amount;\r\n        autoBuybackBlockPeriod = _period;\r\n        autoBuybackBlockLast = block.number;\r\n        autoBuybackMultiplier = _autoBuybackMultiplier;\r\n    }\r\n    \r\n    function setBuybackMultiplierSettings(uint256 numerator, uint256 denominator, uint256 length) external authorized {\r\n        require(numerator / denominator <= 2 && numerator > denominator);\r\n        buybackMultiplierNumerator = numerator;\r\n        buybackMultiplierDenominator = denominator;\r\n        buybackMultiplierLength = length;\r\n    }\r\n    \r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n    \r\n    function launch() internal {\r\n        launchedAt = block.number;\r\n    }\r\n    \r\n    function setTxLimit(uint256 amount) external authorized {\r\n        require(amount >= _totalSupply / 1000);\r\n        _maxTxAmount = amount;\r\n    }\r\n    \r\n    function setIsDividendExempt(address holder, bool exempt) external authorized {\r\n        require(holder != address(this) && holder != pair);\r\n        isDividendExempt[holder] = exempt;\r\n        if(exempt){\r\n            distributor.setShare(holder, 0);\r\n        }else{\r\n            distributor.setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n    \r\n    function burn(uint256 amount) external {\r\n    _burn(msg.sender, amount);\r\n  }\r\n  \r\n    function _burn(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    require(amount <= _balances[account]);\r\n    _balances[account] = _balances[account].sub(amount);\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n  \r\n    function setIsFeeExempt(address holder, bool exempt) external authorized {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n    \r\n    function setIsTxLimitExempt(address holder, bool exempt) external authorized {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n    \r\n    function setFees(uint256 _liquidityFee, uint256 _buybackFee, uint256 _reflectionFee, uint256 _marketingFee, uint256 _projectFee, uint256 _burnFee, uint256 _extraFeeOnSell, uint256 _feeDenominator) external authorized {\r\n        \r\n        liquidityFee = _liquidityFee;\r\n        buybackFee = _buybackFee;\r\n        reflectionFee = _reflectionFee;\r\n        marketingFee = _marketingFee;\r\n        projectFee = _projectFee;\r\n        burnFee = _burnFee;\r\n        totalFee = _liquidityFee.add(_buybackFee).add(_reflectionFee).add(_marketingFee).add(_projectFee);\r\n        extraFeeOnSell = _extraFeeOnSell;\r\n        feeDenominator = _feeDenominator;\r\n    }\r\n    \r\n    function setFeeReceivers(address _developmentReceiver, address _marketingFeeReceiver, address _projectReceiver) external authorized {\r\n        developmentReceiver = _developmentReceiver;\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n        projectFeeReceiver = _projectReceiver;\r\n    }\r\n    \r\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external authorized {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n    \r\n    function setTargetLiquidity(uint256 _target, uint256 _denominator) external authorized {\r\n        targetLiquidity = _target;\r\n        targetLiquidityDenominator = _denominator;\r\n    }\r\n    \r\n    function manualSend() external authorized {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        payable(marketingFeeReceiver).transfer(contractETHBalance);\r\n    }\r\n    \r\n        function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external authorized {\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n    }\r\n    \r\n        function claimDividend() external {\r\n        distributor.claimDividend(msg.sender);\r\n    }\r\n    \r\n        function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        return distributor.getUnpaidEarnings(shareholder);\r\n    } \r\n    \r\n    function setDistributorSettings(uint256 gas) external authorized {\r\n        require(gas < 1500000);\r\n        distributorGas = gas;\r\n    }\r\n    \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n    \r\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\r\n        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\r\n    }\r\n    \r\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n\r\n    function setDividendToken(address _newContract) external authorized {\r\n        distributor.setDividendTokenAddress(_newContract);\r\n  \t}\r\n  \r\n        // switch Trading\r\n    function tradingStatus(bool _status) public onlyOwner {\r\n        tradingOpen = _status;\r\n    }\r\n    \r\n        // enable cooldown between trades\r\n    function cooldownEnabled(bool _status, uint8 _interval) public onlyOwner {\r\n        buyCooldownEnabled = _status;\r\n        cooldownTimerInterval = _interval;\r\n    }\r\n \r\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\r\n    event BuybackMultiplierActive(uint256 duration);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBOG\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"BuybackMultiplierActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuybackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuybackMultiplier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearBuybackMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_interval\",\"type\":\"uint8\"}],\"name\":\"cooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownTimerInterval\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMultipliedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"selling\",\"type\":\"bool\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getUnpaidEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_autoBuybackMultiplier\",\"type\":\"bool\"}],\"name\":\"setAutoBuybackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setBuybackMultiplierSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"setDividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_developmentReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_projectReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_projectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_extraFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTimelockExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"tradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerBuybackMultiplier\",\"type\":\"bool\"}],\"name\":\"triggerManualBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CLT", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dcf466abf1439f3d6aa18016347fc461fe06c8d9c2fa1d587c42e05d6a5e3fe7"}