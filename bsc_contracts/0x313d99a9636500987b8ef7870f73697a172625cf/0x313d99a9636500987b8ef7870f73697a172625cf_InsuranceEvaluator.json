{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GeneralTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nenum FundType {\\r\\n    RegularFunds,\\r\\n    SpecialFunds\\r\\n}\\r\\n\\r\\nenum FundState {\\r\\n    FUNDING,\\r\\n    RUNNING,\\r\\n    CLOSED,\\r\\n    CANCELLED\\r\\n}\\r\\n\\r\\nenum BlockSecurityPolicyType {\\r\\n    NONE,\\r\\n    FULL,\\r\\n    STAKING,\\r\\n    BALANCE\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/InsuranceEvaluator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./GeneralTypes.sol\\\";\\r\\n\\r\\ncontract InsuranceEvaluator {\\r\\n\\r\\n    constructor(){\\r\\n    }\\r\\n\\r\\n    modifier onlyPositiveAmountAvailableErrorMessage(string memory errorMsg, uint256 _tokenAmount) {\\r\\n        require(_tokenAmount > 0, errorMsg);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAvailableInsurancePercentErrorMessage(string memory errorMsg, uint256 _insurancePercent) {\\r\\n        require(_insurancePercent == 50 || _insurancePercent == 100 , errorMsg);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function estimateInsurancePolicyAmount(FundType _fundType, uint256 _tokenAmount, uint256 _insurancePercent)\\r\\n        public\\r\\n        pure\\r\\n        onlyPositiveAmountAvailableErrorMessage(\\\"Token amount is not correct\\\", _tokenAmount)\\r\\n        onlyAvailableInsurancePercentErrorMessage(\\\"Insurance percent (50% or 100%) is not correct\\\", _insurancePercent)\\r\\n        returns (uint256) {\\r\\n\\r\\n        if ( _fundType == FundType.RegularFunds && _insurancePercent == 100) {\\r\\n            return calculatePercent( _tokenAmount, 10 );\\r\\n        }\\r\\n\\r\\n        if (_fundType == FundType.SpecialFunds && _insurancePercent == 50) {\\r\\n            return calculatePercent( _tokenAmount, 10 );\\r\\n        }\\r\\n\\r\\n        if (_fundType == FundType.SpecialFunds && _insurancePercent == 100) {\\r\\n            return calculatePercent( _tokenAmount, 20 );\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function calculatePercent(uint256 _tokenAmount, uint256 _insurancePercent) private pure returns (uint256) {\\r\\n        return ( _tokenAmount * _insurancePercent ) / 100;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum FundType\",\"name\":\"_fundType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_insurancePercent\",\"type\":\"uint256\"}],\"name\":\"estimateInsurancePolicyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "InsuranceEvaluator", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}