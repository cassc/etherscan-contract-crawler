{"SourceCode": "pragma solidity ^0.5.0;\r\n\r\n \r\n\r\n \r\n\r\nlibrary SafeMath {\r\n\r\n \r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a + b;\r\n\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n \r\n\r\n        return c;\r\n\r\n    }\r\n\r\n \r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n\r\n        uint256 c = a - b;\r\n\r\n \r\n\r\n        return c;\r\n\r\n    }\r\n\r\n \r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n \r\n\r\n        uint256 c = a * b;\r\n\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n \r\n\r\n        return c;\r\n\r\n    }\r\n\r\n \r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n\r\n        uint256 c = a / b;\r\n\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n \r\n\r\n        return c;\r\n\r\n    }\r\n\r\n \r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n\r\n        return a % b;\r\n\r\n    }\r\n\r\n}\r\n\r\n \r\n\r\n \r\n\r\ncontract Ownable {\r\n\r\n \r\n\r\n    address private _owner;\r\n\r\n \r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n \r\n\r\n    constructor () internal {\r\n\r\n        _owner = msg.sender;\r\n\r\n        emit OwnershipTransferred(address(0), _owner);\r\n\r\n    }\r\n\r\n \r\n\r\n    function owner() public view returns (address) {\r\n\r\n        return _owner;\r\n\r\n    }\r\n\r\n \r\n\r\n    modifier onlyOwner() {\r\n\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n \r\n\r\n    function isOwner() public view returns (bool) {\r\n\r\n        return msg.sender == _owner;\r\n\r\n    }\r\n\r\n \r\n\r\n    // function renounceOwnership() public onlyOwner {\r\n\r\n    //     emit OwnershipTransferred(_owner, address(0));\r\n\r\n    //     _owner = address(0);\r\n\r\n    // }\r\n\r\n \r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n\r\n        _transferOwnership(newOwner);\r\n\r\n    }\r\n\r\n \r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        _owner = newOwner;\r\n\r\n    }\r\n\r\n}\r\n\r\n \r\n\r\n \r\n\r\nlibrary Roles {\r\n\r\n \r\n\r\n    struct Role {\r\n\r\n        mapping (address => bool) bearer;\r\n\r\n    }\r\n\r\n \r\n\r\n    function add(Role storage role, address account) internal {\r\n\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n\r\n        role.bearer[account] = true;\r\n\r\n    }\r\n\r\n \r\n\r\n    function remove(Role storage role, address account) internal {\r\n\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n\r\n        role.bearer[account] = false;\r\n\r\n    }\r\n\r\n \r\n\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n\r\n        return role.bearer[account];\r\n\r\n    }\r\n\r\n}\r\n\r\n \r\n\r\n \r\n\r\ncontract PauserRole is Ownable {\r\n\r\n \r\n\r\n    using Roles for Roles.Role;\r\n\r\n \r\n\r\n    event PauserAdded(address indexed account);\r\n\r\n \r\n\r\n    event PauserRemoved(address indexed account);\r\n\r\n \r\n\r\n    Roles.Role private _pausers;\r\n\r\n \r\n\r\n    constructor () internal {\r\n\r\n        _addPauser(msg.sender);\r\n\r\n    }\r\n\r\n \r\n\r\n    modifier onlyPauser() {\r\n\r\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n \r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n\r\n        return _pausers.has(account);\r\n\r\n    }\r\n\r\n \r\n\r\n    function addPauser(address account) public onlyOwner {\r\n\r\n        _addPauser(account);\r\n\r\n    }\r\n\r\n \r\n\r\n    function removePauser(address account) public onlyOwner {\r\n\r\n        _removePauser(account);\r\n\r\n    }\r\n\r\n \r\n\r\n    function renouncePauser() public {\r\n\r\n        _removePauser(msg.sender);\r\n\r\n    }\r\n\r\n \r\n\r\n    function _addPauser(address account) internal {\r\n\r\n        _pausers.add(account);\r\n\r\n        emit PauserAdded(account);\r\n\r\n    }\r\n\r\n \r\n\r\n    function _removePauser(address account) internal {\r\n\r\n        _pausers.remove(account);\r\n\r\n        emit PauserRemoved(account);\r\n\r\n    }\r\n\r\n}\r\n\r\n \r\n\r\n \r\n\r\ncontract Pausable is PauserRole {\r\n\r\n \r\n\r\n    event Paused(address account);\r\n\r\n \r\n\r\n    event Unpaused(address account);\r\n\r\n \r\n\r\n    bool private _paused;\r\n\r\n \r\n\r\n    constructor () internal {\r\n\r\n        _paused = false;\r\n\r\n    }\r\n\r\n \r\n\r\n    function paused() public view returns (bool) {\r\n\r\n        return _paused;\r\n\r\n    }\r\n\r\n \r\n\r\n    modifier whenNotPaused() {\r\n\r\n        require(!_paused, \"Pausable: paused\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n \r\n\r\n    modifier whenPaused() {\r\n\r\n        require(_paused, \"Pausable: not paused\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n \r\n\r\n    function pause() public onlyPauser whenNotPaused {\r\n\r\n        _paused = true;\r\n\r\n        emit Paused(msg.sender);\r\n\r\n    }\r\n\r\n \r\n\r\n    function unpause() public onlyPauser whenPaused {\r\n\r\n        _paused = false;\r\n\r\n        emit Unpaused(msg.sender);\r\n\r\n    }\r\n\r\n}\r\n\r\n \r\n\r\n \r\n\r\ninterface IERC20 {\r\n\r\n \r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n \r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n \r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n \r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n \r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n \r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n \r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n \r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n \r\n\r\n \r\n\r\ncontract ERC20 is IERC20, Ownable {\r\n\r\n \r\n\r\n    using SafeMath for uint256;\r\n\r\n \r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n \r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n \r\n\r\n    uint256 private _totalSupply;\r\n\r\n \r\n\r\n    event Issue(address indexed account, uint256 amount);\r\n\r\n \r\n\r\n    event Redeem(address indexed account, uint256 value);\r\n\r\n \r\n\r\n    function totalSupply() public view returns (uint256) {\r\n\r\n        return _totalSupply;\r\n\r\n    }\r\n\r\n \r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n\r\n        return _balances[account];\r\n\r\n    }\r\n\r\n \r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n\r\n        _transfer(msg.sender, recipient, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n \r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n\r\n        return _allowances[owner][spender];\r\n\r\n    }\r\n\r\n \r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n\r\n        _approve(msg.sender, spender, value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n \r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n \r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n \r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n \r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n \r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n    }\r\n\r\n \r\n\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n \r\n\r\n        _allowances[owner][spender] = value;\r\n\r\n        emit Approval(owner, spender, value);\r\n\r\n    }\r\n\r\n \r\n\r\n    function _issue(address account, uint256 amount) internal {\r\n\r\n        require(account != address(0), \"CoinFactory: issue to the zero address\");\r\n\r\n \r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n\r\n        _balances[account] = _balances[account].add(amount);\r\n\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        emit Issue(account, amount);\r\n\r\n    }\r\n\r\n \r\n\r\n    function _redeem(address account, uint256 value) internal {\r\n\r\n        require(account != address(0), \"CoinFactory: redeem from the zero address\");\r\n\r\n \r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n\r\n        _balances[account] = _balances[account].sub(value);\r\n\r\n        emit Transfer(account, address(0), value);\r\n\r\n        emit Redeem(account, value);\r\n\r\n    }\r\n\r\n}\r\n\r\n \r\n\r\n \r\n\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n\r\n \r\n\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n\r\n        return super.transfer(to, value);\r\n\r\n    }\r\n\r\n \r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n\r\n        return super.transferFrom(from, to, value);\r\n\r\n    }\r\n\r\n \r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n\r\n        return super.approve(spender, value);\r\n\r\n    }\r\n\r\n \r\n\r\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool) {\r\n\r\n        return super.increaseAllowance(spender, addedValue);\r\n\r\n    }\r\n\r\n \r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool) {\r\n\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n\r\n    }\r\n\r\n}\r\n\r\n \r\n\r\n \r\n\r\ncontract CoinFactoryAdminRole is Ownable {\r\n\r\n \r\n\r\n    using Roles for Roles.Role;\r\n\r\n \r\n\r\n    event CoinFactoryAdminRoleAdded(address indexed account);\r\n\r\n \r\n\r\n    event CoinFactoryAdminRoleRemoved(address indexed account);\r\n\r\n \r\n\r\n    Roles.Role private _coinFactoryAdmins;\r\n\r\n \r\n\r\n    constructor () internal {\r\n\r\n        _addCoinFactoryAdmin(msg.sender);\r\n\r\n    }\r\n\r\n \r\n\r\n    modifier onlyCoinFactoryAdmin() {\r\n\r\n        require(isCoinFactoryAdmin(msg.sender), \"CoinFactoryAdminRole: caller does not have the CoinFactoryAdmin role\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n \r\n\r\n    function isCoinFactoryAdmin(address account) public view returns (bool) {\r\n\r\n        return _coinFactoryAdmins.has(account);\r\n\r\n    }\r\n\r\n \r\n\r\n    function addCoinFactoryAdmin(address account) public onlyOwner {\r\n\r\n        _addCoinFactoryAdmin(account);\r\n\r\n    }\r\n\r\n \r\n\r\n    function removeCoinFactoryAdmin(address account) public onlyOwner {\r\n\r\n        _removeCoinFactoryAdmin(account);\r\n\r\n    }\r\n\r\n \r\n\r\n    function renounceCoinFactoryAdmin() public {\r\n\r\n        _removeCoinFactoryAdmin(msg.sender);\r\n\r\n    }\r\n\r\n \r\n\r\n    function _addCoinFactoryAdmin(address account) internal {\r\n\r\n        _coinFactoryAdmins.add(account);\r\n\r\n        emit CoinFactoryAdminRoleAdded(account);\r\n\r\n    }\r\n\r\n \r\n\r\n    function _removeCoinFactoryAdmin(address account) internal {\r\n\r\n        _coinFactoryAdmins.remove(account);\r\n\r\n        emit CoinFactoryAdminRoleRemoved(account);\r\n\r\n    }\r\n\r\n}\r\n\r\n \r\n\r\n \r\n\r\ncontract CoinFactory is ERC20, CoinFactoryAdminRole {\r\n\r\n \r\n\r\n    function issue(address account, uint256 amount) public onlyCoinFactoryAdmin returns (bool) {\r\n\r\n        _issue(account, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n \r\n\r\n    function redeem(address account, uint256 amount) public onlyCoinFactoryAdmin returns (bool) {\r\n\r\n        _redeem(account, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n}\r\n\r\n \r\n\r\n \r\n\r\ncontract BlacklistAdminRole is Ownable {\r\n\r\n \r\n\r\n    using Roles for Roles.Role;\r\n\r\n \r\n\r\n    event BlacklistAdminAdded(address indexed account);\r\n\r\n    event BlacklistAdminRemoved(address indexed account);\r\n\r\n \r\n\r\n    Roles.Role private _blacklistAdmins;\r\n\r\n \r\n\r\n    constructor () internal {\r\n\r\n        _addBlacklistAdmin(msg.sender);\r\n\r\n    }\r\n\r\n \r\n\r\n    modifier onlyBlacklistAdmin() {\r\n\r\n        require(isBlacklistAdmin(msg.sender), \"BlacklistAdminRole: caller does not have the BlacklistAdmin role\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n \r\n\r\n    function isBlacklistAdmin(address account) public view returns (bool) {\r\n\r\n        return _blacklistAdmins.has(account);\r\n\r\n    }\r\n\r\n \r\n\r\n    function addBlacklistAdmin(address account) public onlyOwner {\r\n\r\n        _addBlacklistAdmin(account);\r\n\r\n    }\r\n\r\n \r\n\r\n    function removeBlacklistAdmin(address account) public onlyOwner {\r\n\r\n        _removeBlacklistAdmin(account);\r\n\r\n    }\r\n\r\n \r\n\r\n    function renounceBlacklistAdmin() public {\r\n\r\n        _removeBlacklistAdmin(msg.sender);\r\n\r\n    }\r\n\r\n \r\n\r\n    function _addBlacklistAdmin(address account) internal {\r\n\r\n        _blacklistAdmins.add(account);\r\n\r\n        emit BlacklistAdminAdded(account);\r\n\r\n    }\r\n\r\n \r\n\r\n    function _removeBlacklistAdmin(address account) internal {\r\n\r\n        _blacklistAdmins.remove(account);\r\n\r\n        emit BlacklistAdminRemoved(account);\r\n\r\n    }\r\n\r\n}\r\n\r\n \r\n\r\n \r\n\r\ncontract Blacklist is ERC20, BlacklistAdminRole {\r\n\r\n \r\n\r\n    mapping (address => bool) private _blacklist;\r\n\r\n \r\n\r\n    event BlacklistAdded(address indexed account);\r\n\r\n \r\n\r\n    event BlacklistRemoved(address indexed account);\r\n\r\n \r\n\r\n    function isBlacklist(address account) public view returns (bool) {\r\n\r\n        return _blacklist[account];\r\n\r\n    }\r\n\r\n \r\n\r\n    function addBlacklist(address[] memory accounts) public onlyBlacklistAdmin returns (bool) {\r\n\r\n        for(uint i = 0; i < accounts.length; i++) {\r\n\r\n            _addBlacklist(accounts[i]);\r\n\r\n        }\r\n\r\n    }\r\n\r\n \r\n\r\n    function removeBlacklist(address[] memory accounts) public onlyBlacklistAdmin returns (bool) {\r\n\r\n        for(uint i = 0; i < accounts.length; i++) {\r\n\r\n            _removeBlacklist(accounts[i]);\r\n\r\n        }\r\n\r\n    }\r\n\r\n \r\n\r\n    function _addBlacklist(address account) internal {\r\n\r\n        _blacklist[account] = true;\r\n\r\n        emit BlacklistAdded(account);\r\n\r\n    }\r\n\r\n \r\n\r\n    function _removeBlacklist(address account) internal {\r\n\r\n        _blacklist[account] = false;\r\n\r\n        emit BlacklistRemoved(account);\r\n\r\n    }\r\n\r\n}\r\n\r\n \r\n\r\ncontract HPCToken is ERC20, ERC20Pausable, CoinFactory, Blacklist {\r\n\r\n \r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public decimals;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n \r\n\r\n    constructor (string memory _name, string memory _symbol, uint8 _decimals) public {\r\n\r\n        _totalSupply = 0;\r\n\r\n        name = _name;\r\n\r\n        symbol = _symbol;\r\n\r\n        decimals = _decimals;\r\n\r\n    }\r\n\r\n \r\n\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n\r\n        require(!isBlacklist(msg.sender), \"HPCToken: caller in blacklist can't transfer\");\r\n\r\n        require(!isBlacklist(to), \"HPCToken: not allow to transfer to recipient address in blacklist\");\r\n\r\n        return super.transfer(to, value);\r\n\r\n    }\r\n\r\n \r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n\r\n        require(!isBlacklist(msg.sender), \"HPCToken: caller in blacklist can't transferFrom\");\r\n\r\n        require(!isBlacklist(from), \"HPCToken: from in blacklist can't transfer\");\r\n\r\n        require(!isBlacklist(to), \"HPCToken: not allow to transfer to recipient address in blacklist\");\r\n\r\n        return super.transferFrom(from, to, value);\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceBlacklistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceCoinFactoryAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addBlacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBlacklistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"removeBlacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addCoinFactoryAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isCoinFactoryAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBlacklistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeCoinFactoryAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BlacklistAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BlacklistRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BlacklistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BlacklistAdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CoinFactoryAdminRoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CoinFactoryAdminRoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "HPCToken", "CompilerVersion": "v0.5.8+commit.23d335f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a476c6f62616c20486970686f70204173736f63696174696f6e2000000000000000000000000000000000000000000000000000000000000000000000000000034850430000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://10a158de035604eaffbd86be68eab48415ea08d7cdfee86472738bfd63f22a3b"}