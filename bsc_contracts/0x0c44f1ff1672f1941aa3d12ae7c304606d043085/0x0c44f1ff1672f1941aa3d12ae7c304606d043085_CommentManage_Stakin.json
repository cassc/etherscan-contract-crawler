{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n// Inheritancea\r\ninterface IStakingRewards {\r\n    // Views\r\n    function lastTimeRewardApplicable() external view returns (uint256);\r\n    function rewardPerToken() external view returns (uint256);\r\n    function earned(address account) external view returns (uint256);\r\n    function getRewardForDuration() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    // Mutative\r\n    function writeComment(string calldata str,uint256 score,bool bPraise,uint256 hamID) external;\r\n    function getReward() external;\r\n    // EVENTS\r\n    event WriteComment(address indexed user, uint256 amount,uint256 score,bool bPraise,uint256 hamID);\r\n    event RewardAdded(uint256 reward);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n}\r\ninterface IERC721 {\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function getValueByTokenId(uint256 tokenId) external view returns(uint256);\r\n}\r\n\r\ninterface IStakingRewardNFT {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function ownerTokenId(uint256 tokenId) external view returns (address);\r\n}\r\n\r\ncontract CommentManage_StakingRewards is IStakingRewards, Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    IERC721 public NFT_Token;\r\n    IStakingRewardNFT public DeFi_Token;\r\n\r\n    string private _name = \"CommentManage DeFi\";\r\n    string private _symbol = \"CM DeFi\";\r\n\r\n    IERC20 public rewardsToken;\r\n    uint256 public periodFinish = 0;\r\n    uint256 public rewardRate = 0;\r\n    uint256 public rewardsDuration = 30 days;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public rewardPerTokenStored;\r\n    uint256 public totalReward;\r\n\r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n    mapping(address => uint256) public rewards;\r\n\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _balances;\r\n    uint256 public totalRewardAlready;\r\n\r\n    mapping (address => bool) private _Is_WhiteContractArr;\r\n    address[] private _WhiteContractArr;\r\n    uint256 public basicDailyReward=33333;\r\n\r\n    struct sCommentPropertys {\r\n        uint256 id;\r\n        address addr;\r\n        uint256 score;\r\n        string str;\r\n        bool bPraise;\r\n        uint256 updataTime;\r\n    }\r\n    uint256 private _sumCount=0;\r\n    uint256 private _praiseNum;\r\n    uint256 private _sumScore;\r\n\r\n    mapping(uint256 => sCommentPropertys) private _CommentPropertys;\r\n    mapping(address => bool) private _bHaveComment;\r\n    mapping(uint256 => bool) private _bCommentHamId;\r\n    mapping(address => uint256) private _CommentIth;\r\n\r\n    constructor(){\r\n        NFT_Token = IERC721(0x1F599A0281d024bfeF7e198bDae78B49A6e87049);\r\n        DeFi_Token = IStakingRewardNFT(0x55F2856706872F69E8CfC00C2abDf2d4adf6aE50);\r\n        rewardsToken = IERC20(0xFD57aC98aA8E445C99bc2C41B23997573fAdf795);\r\n        rewardsDuration = 30 days;\r\n    }\r\n    \r\n    /* ========== VIEWS ========== */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function totalRewardYet() external view returns (uint256) {\r\n        return totalReward.sub(periodFinish.sub(lastTimeRewardApplicable()).mul(rewardRate));\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint256) {\r\n        return Math.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint256){\r\n        if (_totalSupply == 0){\r\n            return rewardPerTokenStored;\r\n        }\r\n        return rewardPerTokenStored.add(\r\n          lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)\r\n          );\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n        return _balances[account].mul(\r\n          rewardPerToken().sub(userRewardPerTokenPaid[account])\r\n        ).div(1e18).add(rewards[account]);\r\n    }\r\n\r\n    function getRewardForDuration() external view returns (uint256) {\r\n        return rewardRate.mul(rewardsDuration);\r\n    }\r\n\r\n    function getRewardPerDay() external view returns (uint256) {\r\n        return rewardRate.mul(86400);\r\n    }\r\n\r\n    function getRewardPerDayPerToken() external view returns (uint256) {\r\n        return rewardRate.mul(86400).mul(1e18).div(_totalSupply);\r\n    }\r\n\r\n    function getAdressRewardPerDay(address account) external view returns (uint256) {\r\n        return rewardRate.mul(86400).mul(_balances[account]).mul(1e18).div(_totalSupply);\r\n    }\r\n    function isWhiteContract(address account) public view returns (bool) {\r\n        if(!account.isContract()) return true;\r\n        return _Is_WhiteContractArr[account];\r\n    }\r\n    function getWhiteAccountNum() public view returns (uint256){\r\n        return _WhiteContractArr.length;\r\n    }\r\n    function getWhiteAccountIth(uint256 ith) public view returns (address WhiteAddress){\r\n        require(ith <_WhiteContractArr.length, \"ForthBoxcomment: not in White Adress\");\r\n        return _WhiteContractArr[ith];\r\n    }\r\n    function getParameters(address account) public view returns (uint256[] memory){\r\n        uint256[] memory paraList = new uint256[](uint256(9));\r\n        paraList[0]=totalRewardAlready;\r\n        paraList[1]=basicDailyReward;\r\n        paraList[2]=_totalSupply;\r\n        paraList[3]=_balances[account];\r\n        paraList[4]= earned(account);\r\n        paraList[5]= _sumCount;\r\n        paraList[6]= _praiseNum;\r\n        paraList[7]= _sumCount.sub(_praiseNum);\r\n        paraList[8]= _sumScore;\r\n        return paraList;\r\n    }\r\n\r\n    function sumCount() external view returns(uint256){\r\n        return _sumCount;\r\n    }\r\n    function infos() external view returns(uint256 tPraiseNum,uint256 tBadNum,uint256 tSumScore){\r\n        tPraiseNum = _praiseNum;\r\n        tBadNum = _sumCount.sub(_praiseNum);\r\n        tSumScore = _sumScore;\r\n        return (tPraiseNum,tBadNum,tSumScore);\r\n    }\r\n    //read info\r\n    function commentInfo(uint256 iD) external view returns (\r\n        uint256 id,\r\n        address addr,\r\n        uint256 score,\r\n        string memory str,\r\n        bool bPraise,\r\n        uint256 updataTime\r\n        ) {\r\n        require(iD <= _sumCount, \"ForthBoxcomment: exist num!\");\r\n        id = _CommentPropertys[iD].id;\r\n        addr = _CommentPropertys[iD].addr;\r\n        score = _CommentPropertys[iD].score;\r\n        str = _CommentPropertys[iD].str;\r\n        updataTime = _CommentPropertys[iD].updataTime;\r\n        bPraise = _CommentPropertys[iD].bPraise;\r\n        return (id,addr,score,str,bPraise,updataTime);\r\n    }\r\n    function commentInfoFromAddress(address addr) external view returns (\r\n        uint256 id,\r\n        address addr2,\r\n        uint256 score,\r\n        string memory str,\r\n        bool bPraise,\r\n        uint256 updataTime\r\n        ) {\r\n        require(_bHaveComment[addr], \"ForthBoxcomment: not have comment!\");\r\n\r\n        uint256 ith =  _CommentIth[addr];\r\n        id = _CommentPropertys[ith].id;\r\n        addr2 = _CommentPropertys[ith].addr;\r\n        score = _CommentPropertys[ith].score;\r\n        str = _CommentPropertys[ith].str;\r\n        updataTime = _CommentPropertys[ith].updataTime;\r\n        bPraise = _CommentPropertys[ith].bPraise;\r\n        return (id,addr,score,str,bPraise,updataTime);\r\n    }\r\n    function bComment(address addr) external view returns (bool){\r\n        return _bHaveComment[addr];\r\n    }\r\n    function bCommentHamId(uint256 hamID) external view returns (bool){\r\n        return _bCommentHamId[hamID];\r\n    }\r\n    function bCommentHamIds(uint256[] calldata tokenIdArr) external view returns(bool[] memory bComHamIds){\r\n        bComHamIds = new bool[](uint256(tokenIdArr.length));\r\n        for(uint256 i=0; i<tokenIdArr.length; ++i) {\r\n            bComHamIds[i] = _bCommentHamId[tokenIdArr[i]];\r\n        }\r\n        return bComHamIds;\r\n    }\r\n\r\n    function commentInfos(uint256 fromId,uint256 toId) external view returns (\r\n        uint256[] memory idArr,\r\n        address[] memory addrArr,\r\n        uint256[] memory scoreArr,\r\n        string[] memory strArr,\r\n        bool[] memory bPraiseArr,\r\n        uint256[] memory updataTimeArr\r\n        ) {\r\n        require(toId <= _sumCount, \"ForthBoxcomment: exist num!\");\r\n        require(fromId <= toId, \"ForthBoxcomment: exist num!\");\r\n        idArr = new uint256[](toId-fromId+1);\r\n        addrArr = new address[](toId-fromId+1);\r\n        scoreArr = new uint256[](toId-fromId+1);\r\n        strArr = new string[](toId-fromId+1);\r\n\r\n        updataTimeArr = new uint256[](toId-fromId+1);\r\n        bPraiseArr = new bool[](toId-fromId+1);\r\n        uint256 i=0;\r\n        for(uint256 ith=fromId; ith<=toId; ith++) {\r\n            idArr[i] = _CommentPropertys[ith].id;\r\n            addrArr[i] = _CommentPropertys[ith].addr;\r\n            scoreArr[i] = _CommentPropertys[ith].score;\r\n            strArr[i] = _CommentPropertys[ith].str;\r\n            updataTimeArr[i] = _CommentPropertys[ith].updataTime;\r\n            bPraiseArr[i] = _CommentPropertys[ith].bPraise;\r\n            i = i+1;\r\n        }\r\n        return (idArr,addrArr,scoreArr,strArr,bPraiseArr,updataTimeArr);\r\n    }\r\n\r\n    //---write---//\r\n    modifier updateReward(address account){\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n        if (account != address(0)){\r\n            rewards[account] = earned(account);\r\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\r\n        }\r\n        _;\r\n    }\r\n    //write\r\n    function writeComment(string calldata str,uint256 score,bool bPraise,uint256 hamID) external nonReentrant updateReward(msg.sender){\r\n        require(!_bHaveComment[_msgSender()], \"ForthBoxcomment: already comment!\");\r\n        require(!_bCommentHamId[hamID], \"ForthBoxcomment: already comment!\");\r\n        require(isWhiteContract(_msgSender()), \"ForthBoxcomment: Contract not in white list!\");\r\n        if(_msgSender() != NFT_Token.ownerOf(hamID)){\r\n            require(_msgSender() == DeFi_Token.ownerTokenId(hamID), \"ForthBoxcomment: hamID not owner\");\r\n        }\r\n        require(score<=5, \"ForthBoxcomment: exceed max score!\");\r\n\r\n        _bHaveComment[_msgSender()] = true;\r\n        _bCommentHamId[hamID] = true;\r\n\r\n        _sumCount = _sumCount.add(1);\r\n        _CommentIth[_msgSender()] = _sumCount;\r\n        _sumScore = _sumScore.add(score);\r\n        _CommentPropertys[_sumCount].id = _sumCount;\r\n        _CommentPropertys[_sumCount].addr = _msgSender();\r\n        _CommentPropertys[_sumCount].score = score;\r\n        _CommentPropertys[_sumCount].str = str;\r\n        _CommentPropertys[_sumCount].bPraise = bPraise;\r\n        _CommentPropertys[_sumCount].updataTime = block.timestamp;\r\n        if(bPraise) _praiseNum = _praiseNum.add(1);\r\n        \r\n        uint256 amount = (bytes(str).length).add(100);\r\n        if(amount>200){\r\n            amount = 200;\r\n        }\r\n        amount = amount.add(NFT_Token.getValueByTokenId(hamID).mul(5));\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n\r\n        emit WriteComment(msg.sender, amount, score,bPraise,hamID);\r\n    }\r\n\r\n    function getReward() public nonReentrant updateReward(msg.sender) {\r\n        require(isWhiteContract(_msgSender()), \"ForthBoxcomment: Contract not in white list!\");\r\n        uint256 reward = rewards[msg.sender];\r\n        if (reward > 0) {\r\n            rewards[msg.sender] = 0;\r\n            rewardsToken.safeTransfer(msg.sender, reward);\r\n            totalRewardAlready = totalRewardAlready.add(reward);\r\n            emit RewardPaid(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    //---write onlyOwner---//\r\n    function notifyRewardAmount(uint256 reward) external onlyOwner updateReward(address(0)){\r\n        if (block.timestamp >= periodFinish){\r\n            rewardRate = reward.div(rewardsDuration);\r\n        }\r\n        else{\r\n            uint256 remaining = periodFinish.sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(rewardRate);\r\n            rewardRate = reward.add(leftover).div(rewardsDuration);\r\n        }\r\n        totalReward = totalReward.add(reward);\r\n\r\n        uint256 balance = rewardsToken.balanceOf(address(this));\r\n        require(rewardRate <= balance.div(rewardsDuration), \"ForthBoxcomment:Provided reward too high\");\r\n\r\n        lastUpdateTime = block.timestamp;\r\n        periodFinish = block.timestamp.add(rewardsDuration);\r\n        emit RewardAdded(reward);\r\n    }\r\n\r\n    function addWhiteAccount(address account) external onlyOwner{\r\n        require(!_Is_WhiteContractArr[account], \"ForthBoxcomment:Account is already White list\");\r\n        require(account.isContract(), \"ForthBoxcomment: not Contract Adress\");\r\n        _Is_WhiteContractArr[account] = true;\r\n        _WhiteContractArr.push(account);\r\n    }\r\n    function removeWhiteAccount(address account) external onlyOwner{\r\n        require(_Is_WhiteContractArr[account], \"ForthBoxcomment:Account is already out White list\");\r\n        for (uint256 i = 0; i < _WhiteContractArr.length; i++){\r\n            if (_WhiteContractArr[i] == account){\r\n                _WhiteContractArr[i] = _WhiteContractArr[_WhiteContractArr.length - 1];\r\n                _WhiteContractArr.pop();\r\n                _Is_WhiteContractArr[account] = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"bPraise\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hamID\",\"type\":\"uint256\"}],\"name\":\"WriteComment\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DeFi_Token\",\"outputs\":[{\"internalType\":\"contract IStakingRewardNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT_Token\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhiteAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"bComment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hamID\",\"type\":\"uint256\"}],\"name\":\"bCommentHamId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIdArr\",\"type\":\"uint256[]\"}],\"name\":\"bCommentHamIds\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"bComHamIds\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basicDailyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iD\",\"type\":\"uint256\"}],\"name\":\"commentInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"bPraise\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"updataTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"commentInfoFromAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"bPraise\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"updataTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toId\",\"type\":\"uint256\"}],\"name\":\"commentInfos\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"idArr\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addrArr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"scoreArr\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"strArr\",\"type\":\"string[]\"},{\"internalType\":\"bool[]\",\"name\":\"bPraiseArr\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"updataTimeArr\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAdressRewardPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPerDayPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ith\",\"type\":\"uint256\"}],\"name\":\"getWhiteAccountIth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"WhiteAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhiteAccountNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"infos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tPraiseNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tBadNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tSumScore\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhiteContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhiteAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sumCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardAlready\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardYet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bPraise\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"hamID\",\"type\":\"uint256\"}],\"name\":\"writeComment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CommentManage_StakingRewards", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7a07b511ed644b7d6d1bff5ff08dad08ce9fc02f4678d2ea9aca35188665acd1"}