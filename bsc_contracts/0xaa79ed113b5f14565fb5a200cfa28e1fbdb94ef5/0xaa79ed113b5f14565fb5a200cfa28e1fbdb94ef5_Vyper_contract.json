{"SourceCode": "# @version 0.3.7\r\n\r\nstruct Deposit:\r\n    depositor: address\r\n    path: DynArray[address, 8]\r\n    input_amount: uint256\r\n    number_trades: uint256\r\n    interval: uint256\r\n    starting_time: uint256\r\n\r\ninterface PancakeswapRouter:\r\n    def swapExactTokensForTokens(amountIn: uint256, amountOutMin: uint256, path: DynArray[address, 8], to: address, deadline: uint256): nonpayable\r\n    def getAmountsOut(amountIn: uint256, path: DynArray[address, 8]) -> DynArray[uint256, 7]: view\r\n\r\ncompass_evm: public(address)\r\nadmin: public(address)\r\ndeposit_list: HashMap[uint256, Deposit]\r\nnext_deposit: public(uint256)\r\nPANCAKESWAP_ROUTER: constant(address) = 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n\r\nevent Deposited:\r\n    deposit_id: uint256\r\n    deposit: Deposit\r\n    time_stamp: uint256\r\n\r\nevent Swapped:\r\n    deposit_id: uint256\r\n    deposit: Deposit\r\n    time_stamp: uint256\r\n\r\nevent Canceled:\r\n    deposit_id: uint256\r\n    deposit: Deposit\r\n    time_stamp: uint256\r\n\r\n@external\r\ndef __init__(_compass_evm: address):\r\n    self.compass_evm = _compass_evm\r\n    self.admin = msg.sender\r\n\r\n@internal\r\ndef _safe_transfer_from(_token: address, _from: address, _to: address, _value: uint256):\r\n    _response: Bytes[32] = raw_call(\r\n        _token,\r\n        _abi_encode(_from, _to, _value, method_id=method_id(\"transferFrom(address,address,uint256)\")),\r\n        max_outsize=32\r\n    )  # dev: failed transferFrom\r\n    if len(_response) > 0:\r\n        assert convert(_response, bool), \"failed transferFrom\"  # dev: failed transferFrom\r\n\r\n@external\r\ndef deposit(path: DynArray[address, 8], input_amount: uint256, number_trades: uint256, interval: uint256, starting_time: uint256):\r\n    self._safe_transfer_from(path[0], msg.sender, self, input_amount)\r\n    _next_deposit: uint256 = self.next_deposit\r\n    _deposit: Deposit = Deposit({\r\n        depositor: msg.sender,\r\n        path: path,\r\n        input_amount: input_amount,\r\n        number_trades: number_trades,\r\n        interval: interval,\r\n        starting_time: starting_time\r\n    })\r\n    self.deposit_list[_next_deposit] = _deposit\r\n    log Deposited(_next_deposit, _deposit, block.timestamp)\r\n    _next_deposit += 1\r\n    self.next_deposit = _next_deposit\r\n\r\n@internal\r\ndef _safe_approve(_token: address, _to: address, _value: uint256):\r\n    _response: Bytes[32] = raw_call(\r\n        _token,\r\n        _abi_encode(_to, _value, method_id=method_id(\"approve(address,uint256)\")),\r\n        max_outsize=32\r\n    )  # dev: failed approve\r\n    if len(_response) > 0:\r\n        assert convert(_response, bool), \"failed approve\"  # dev: failed approve\r\n\r\n@external\r\ndef swap(swap_id: uint256, amount_out_min: uint256):\r\n    assert msg.sender == self.compass_evm, \"not compass\"\r\n    _next_deposit: uint256 = self.next_deposit\r\n    assert swap_id < _next_deposit\r\n    _deposit: Deposit = self.deposit_list[swap_id]\r\n    assert _deposit.number_trades > 0, \"all traded\"\r\n    assert _deposit.starting_time + _deposit.interval <= block.timestamp\r\n    _amount: uint256 = _deposit.input_amount / _deposit.number_trades\r\n    _deposit.input_amount -= _amount\r\n    _deposit.number_trades -= 1\r\n    _deposit.starting_time = block.timestamp\r\n    self._safe_approve(_deposit.path[0], PANCAKESWAP_ROUTER, _amount)\r\n    PancakeswapRouter(PANCAKESWAP_ROUTER).swapExactTokensForTokens(_amount, amount_out_min, _deposit.path, _deposit.depositor, block.timestamp)\r\n    if _deposit.number_trades == 0:\r\n        if swap_id < _next_deposit - 1:\r\n            self.deposit_list[swap_id] = self.deposit_list[_next_deposit - 1] # this blocks multiple swaps / cancel\r\n        self.next_deposit = _next_deposit - 1\r\n    else:\r\n        self.deposit_list[swap_id] = _deposit\r\n    log Swapped(swap_id, _deposit, block.timestamp)\r\n\r\n@internal\r\ndef _safe_transfer(_token: address, _to: address, _value: uint256):\r\n    _response: Bytes[32] = raw_call(\r\n        _token,\r\n        _abi_encode(_to, _value, method_id=method_id(\"transfer(address,uint256)\")),\r\n        max_outsize=32\r\n    )  # dev: failed transfer\r\n    if len(_response) > 0:\r\n        assert convert(_response, bool), \"failed transfer\"  # dev: failed transfer\r\n\r\n@external\r\ndef cancel(swap_id: uint256):\r\n    _deposit: Deposit = self.deposit_list[swap_id]\r\n    assert _deposit.depositor == msg.sender\r\n    _next_deposit: uint256 = self.next_deposit\r\n    assert swap_id < _next_deposit\r\n    self._safe_transfer(_deposit.path[0], msg.sender, _deposit.input_amount)\r\n    if swap_id < _next_deposit - 1:\r\n        self.deposit_list[swap_id] = self.deposit_list[_next_deposit - 1]\r\n    self.next_deposit = _next_deposit - 1\r\n    log Canceled(swap_id, _deposit, block.timestamp)\r\n\r\n@view\r\n@external\r\ndef triggerable_deposit() -> (uint256, uint256, uint256):\r\n    assert msg.sender == ZERO_ADDRESS\r\n    _size: uint256 = self.next_deposit\r\n    for i in range(1000000):\r\n        if i == _size:\r\n            return 0, 0, 0\r\n        _deposit: Deposit = self.deposit_list[i]\r\n        if _deposit.starting_time + _deposit.interval <= block.timestamp:\r\n            _amount: uint256 = _deposit.input_amount / _deposit.number_trades\r\n            _out_amount: DynArray[uint256, 7] = PancakeswapRouter(PANCAKESWAP_ROUTER).getAmountsOut(_amount, _deposit.path)\r\n            return i, _out_amount[len(_out_amount) - 1], _deposit.number_trades\r\n    return 0, 0, 0\r\n\r\n@external\r\ndef new_compass_evm(_compass_evm: address):\r\n    assert msg.sender == self.admin\r\n    self.compass_evm = _compass_evm\r\n\r\n@external\r\ndef new_admin(_admin: address):\r\n    assert msg.sender == self.admin\r\n    self.admin = _admin", "ABI": "[{\"name\":\"Deposited\",\"inputs\":[{\"name\":\"deposit_id\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"deposit\",\"type\":\"tuple\",\"components\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"path\",\"type\":\"address[]\"},{\"name\":\"input_amount\",\"type\":\"uint256\"},{\"name\":\"number_trades\",\"type\":\"uint256\"},{\"name\":\"interval\",\"type\":\"uint256\"},{\"name\":\"starting_time\",\"type\":\"uint256\"}],\"indexed\":false},{\"name\":\"time_stamp\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Swapped\",\"inputs\":[{\"name\":\"deposit_id\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"deposit\",\"type\":\"tuple\",\"components\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"path\",\"type\":\"address[]\"},{\"name\":\"input_amount\",\"type\":\"uint256\"},{\"name\":\"number_trades\",\"type\":\"uint256\"},{\"name\":\"interval\",\"type\":\"uint256\"},{\"name\":\"starting_time\",\"type\":\"uint256\"}],\"indexed\":false},{\"name\":\"time_stamp\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Canceled\",\"inputs\":[{\"name\":\"deposit_id\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"deposit\",\"type\":\"tuple\",\"components\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"path\",\"type\":\"address[]\"},{\"name\":\"input_amount\",\"type\":\"uint256\"},{\"name\":\"number_trades\",\"type\":\"uint256\"},{\"name\":\"interval\",\"type\":\"uint256\"},{\"name\":\"starting_time\",\"type\":\"uint256\"}],\"indexed\":false},{\"name\":\"time_stamp\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_compass_evm\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"path\",\"type\":\"address[]\"},{\"name\":\"input_amount\",\"type\":\"uint256\"},{\"name\":\"number_trades\",\"type\":\"uint256\"},{\"name\":\"interval\",\"type\":\"uint256\"},{\"name\":\"starting_time\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"swap\",\"inputs\":[{\"name\":\"swap_id\",\"type\":\"uint256\"},{\"name\":\"amount_out_min\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"cancel\",\"inputs\":[{\"name\":\"swap_id\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"triggerable_deposit\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"new_compass_evm\",\"inputs\":[{\"name\":\"_compass_evm\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"new_admin\",\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"compass_evm\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"next_deposit\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.3.7", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "000000000000000000000000370a1a665328170efa6a0bb51f948108c23528ba", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": ""}