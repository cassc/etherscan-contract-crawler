{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/footbucks_presale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ncontract Presale is ReentrancyGuard {\\n    // Immutable variables\\n    IERC20Upgradeable public immutable presaleToken; // ERC20 token for presale\\n    address public constant burnAddress = 0x000000000000000000000000000000000000dEaD; // Burn address\\n    address public immutable owner; // Contract owner's address\\n\\n    // Constants\\n    uint8 private constant vestingPeriods = 4; // Number of vesting periods\\n    uint256 public pricePerTokenInWei = 6000000000; // 0.000000006 ethers/token (18 decimal places)\\n    uint256 public softcap = 1000 ether;\\n    uint256 public hardcap = 3000 ether;\\n    uint256 public amountOfTokensPurchased;\\n\\n    // State variables\\n    // mapping(address => uint256) public referralRewards; // Referral rewards for each address\\n    mapping(address => uint256) public lockedUntil; // Lock timestamp for each address\\n    mapping (address => uint256) public vestedTokens; // Vested tokens for each address\\n    mapping (address => uint256) purchasedByUser;\\n\\n    uint256 public launchTimestamp; // Timestamp when presale starts\\n    uint256 public presaleEndTime; // Timestamp when presale ends\\n    uint256 public vestingTime = 90 days; // Vesting period duration\\n    // uint256 public TotalReferralAccumulated; // Total referral rewards accumulated\\n\\n    // Constructor\\n    constructor(\\n        address _presaleTokenAddress,\\n        uint256 _launchTimestamp,\\n        uint256 _presaleEndTime\\n    ) {\\n        presaleToken = IERC20Upgradeable(_presaleTokenAddress);\\n        launchTimestamp = _launchTimestamp;\\n        presaleEndTime = _presaleEndTime;\\n        owner = msg.sender;\\n    }\\n\\n    // Modifier to restrict function access to the owner\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    // Function to retrieve the contract's balance\\n    function getBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    // Function to set the launch timestamp\\n    function setLaunchTimestamp(uint256 _timestamp) external onlyOwner {\\n        launchTimestamp = _timestamp;\\n    }\\n\\n    // Function to set the presale end time\\n    function setPresaleEndTime(uint256 _timestamp) external onlyOwner {\\n        presaleEndTime = _timestamp;\\n    }\\n\\n    // Function to set the vesting time\\n    function setVestingTime(uint256 _time) external onlyOwner {\\n        vestingTime = _time;\\n    }\\n\\n    // Function to buy tokens in the presale\\n    function buyTokens() external payable nonReentrant {\\n        // Check presale timing\\n        require(block.timestamp >= launchTimestamp, \\\"Presale has not started yet\\\");\\n        require(block.timestamp <= presaleEndTime, \\\"Presale has ended\\\");\\n        require(address(this).balance <= hardcap, \\\"Hardcap reached\\\");\\n\\n        // Calculate Ether amount and perform checks\\n        uint256 ethAmount = msg.value;\\n        require(ethAmount >= 0.05 ether, \\\"Minimum purchase: 0.05 BNB\\\");\\n        require(ethAmount <= 100 ether, \\\"Maximum purchase: 100 BNB\\\");\\n\\n        // Calculate token amount based on Ether sent\\n        uint256 tokenAmount = (ethAmount) / pricePerTokenInWei;\\n        tokenAmount = (tokenAmount * 1e18);\\n\\n        // Ensure token amount is reasonable\\n        require(tokenAmount > 0, \\\"Token amount is too low\\\");\\n        require(presaleToken.balanceOf(address(this)) >= tokenAmount, \\\"Insufficient tokens in the contract\\\");\\n\\n        // Calculate immediate release and remaining tokens\\n        uint256 immediateRelease = tokenAmount * 20 / 100;\\n        require(presaleToken.transfer(msg.sender, immediateRelease), \\\"Token transfer failed\\\");\\n\\n        uint256 remainingTokens = tokenAmount - immediateRelease;\\n\\n        // Update vested tokens and lock until timestamp\\n        vestedTokens[msg.sender] += remainingTokens;\\n        purchasedByUser[msg.sender] += tokenAmount;\\n        lockedUntil[msg.sender] = block.timestamp + vestingTime;\\n        amountOfTokensPurchased += tokenAmount;\\n    }\\n\\n    // Function to unlock vested tokens\\n    function unlockTokens() external nonReentrant {\\n        uint256 tokenAmount = vestedTokens[msg.sender];\\n        require(lockedUntil[msg.sender] <= block.timestamp, \\\"Tokens are locked\\\");\\n        require(tokenAmount > 0, \\\"No tokens to unlock\\\");\\n\\n        uint256 purchasedAmount = purchasedByUser[msg.sender];\\n        uint256 unlockedAmount = (purchasedAmount * 20) / 100;\\n\\n        uint256 sentAmount;\\n\\n        if (tokenAmount <= unlockedAmount)\\n            sentAmount = tokenAmount;\\n        else {\\n            sentAmount = unlockedAmount;\\n        }\\n        lockedUntil[msg.sender] = block.timestamp + vestingTime;\\n        vestedTokens[msg.sender] -= sentAmount;\\n\\n        require(presaleToken.transfer(msg.sender, sentAmount), \\\"Token transfer failed\\\");\\n    }\\n\\n    // Function to withdraw Ether in case of emergency\\n    function emergencyWithdrawEther(uint256 amount) external onlyOwner {\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    // Function to withdraw BEP20 tokens in case of emergency\\n    function emergencyWithdrawBEP20(address tokenAddress, uint256 amount) external onlyOwner {\\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\\n        require(amount <= token.balanceOf(address(this)), \\\"Insufficient balance\\\");\\n        require(token.transfer(msg.sender, amount), \\\"Token transfer failed\\\");\\n    }\\n\\n    // Fallback function to receive Ether\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_presaleTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_launchTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_presaleEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"amountOfTokensPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawBEP20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerTokenInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setLaunchTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setPresaleEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setVestingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000061367e2c053449c3e3cdf5b01ae3e4bdfbce269600000000000000000000000000000000000000000000000000000000650fa6300000000000000000000000000000000000000000000000000000000065373330", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}