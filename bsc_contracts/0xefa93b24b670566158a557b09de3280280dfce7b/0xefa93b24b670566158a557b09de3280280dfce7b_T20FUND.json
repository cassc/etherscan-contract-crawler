{"SourceCode": "pragma solidity 0.5.10;\r\ncontract Owned {\r\n    modifier onlyOwner() {\r\n        require(msg.sender==owner);\r\n        _;\r\n    }\r\n    \r\n    address payable owner;\r\n    function changeOwner(address payable _newOwner) public onlyOwner {\r\n        require(_newOwner!=address(0));\r\n        owner = _newOwner;\r\n    }\r\n    \r\n}\r\ninterface AggregatorV3Interface {\r\n  \r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\ninterface BuySellT20 {\r\n  function getLatestPrice()external view returns(uint256);\r\n  function tokenBuyingPrice(uint256 _numberOfTokens)view external returns(uint256);\r\n  function bnbSellingPrice(uint256 _numberOfTokens)external view returns(uint256);\r\n  function buyTokens(uint256 _numberOfTokens,address receiver,uint256 value) external returns(bool success);\r\n  function sellTokens(uint256 _numberOfTokens)external returns(uint256);\r\n  function usdtobnb()view external returns(uint256);\r\n}\r\n\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) view public  returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public  returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) view public  returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract Token is Owned,  ERC20 {\r\n     using SafeMath for uint256;\r\n         uint256 public totalSupply=150000000e18;\r\n     uint256 public price;\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    mapping (address=>uint256) balances;\r\n    mapping (address=>mapping (address=>uint256)) allowed;\r\n    mapping (address  => bool) public frozen ;\r\n//   bool public frozen = false;\r\n  \r\n      event Freeze(address target, bool frozen);\r\n      event Unfreeze(address target, bool frozen);\r\n      event Burn(address a, uint256 _value);\r\n\r\nmodifier whenNotFrozen(address target) {\r\n    require(!frozen[target],\"tokens are freeze already\");\r\n      _;\r\n    }\r\n\r\n  modifier whenFrozen(address target){\r\n    require(frozen[target],\"tokens are not freeze\");\r\n    _;\r\n  }\r\n    function balanceOf(address _owner) view public   returns (uint256 balance) {return balances[_owner];}\r\n    \r\n    function transfer(address _to, uint256 _amount) public   returns (bool success) {\r\n        require(!frozen[msg.sender],'account is freez');\r\n        balances[msg.sender]=balances[msg.sender].sub(_amount);\r\n        balances[_to]=balances[_to].add(_amount);\r\n        emit Transfer(msg.sender,_to,_amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address _from,address _to,uint256 _amount) public   returns (bool success) {\r\n        require(!frozen[_from],\"From address is fronzen\");\r\n        balances[_from]=balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender]=allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to]=balances[_to].add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n  \r\n    function approve(address _spender, uint256 _amount) public   returns (bool success) {\r\n        allowed[msg.sender][_spender]=_amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) view public   returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n  \r\n\r\n  function FreezeAcc(address target, bool freeze) onlyOwner public whenNotFrozen(target) returns (bool) {\r\n    freeze = true;\r\n    frozen[target]=freeze;\r\n    emit Freeze(target, true);\r\n    return true;\r\n  }\r\n\r\n  function UnfreezeAcc(address target, bool freeze) onlyOwner public whenFrozen(target) returns (bool) {\r\n    freeze = false;\r\n    frozen[target]=freeze;\r\n    emit Unfreeze(target, false);\r\n    return true;\r\n  }\r\n  function burn(uint256 _value) public returns (bool success) {\r\n      require(!frozen[msg.sender],\"Account address is fronzen\");\r\n        require(balances[msg.sender] >= _value);   // Check if the sender has enough\r\n        balances[msg.sender] =balances[msg.sender].sub(_value);            // Subtract from the sender\r\n        totalSupply =totalSupply.sub(_value);                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract T20Coin is Token{\r\n    using SafeMath for uint256;\r\n    constructor() public{\r\n        price=1 ether;\r\n        symbol = \"T20\";\r\n        name = \"T20\";\r\n        decimals = 18;\r\n        owner = msg.sender;\r\n        balances[owner] = totalSupply;\r\n        frozen[msg.sender]=false;\r\n        \r\n    }\r\n    function _mint(uint256 amount) external onlyOwner  {\r\n        // require(account != address(0), \"ERC20: mint to the zero address\");\r\n        balances[owner] += amount;\r\n    }\r\n    \r\n    function () payable external {\r\n        require(msg.value>0);\r\n        owner.transfer(msg.value);\r\n    }\r\n    \r\n}\r\n\r\ncontract T20FUND is T20Coin{\r\n\tusing SafeMath for uint256;\r\n\tAggregatorV3Interface public priceFeed;\r\n\tBuySellT20 public buyt20;\r\n\r\n\taddress payable public TokenAdd;\r\n\tuint256  public BASE_PERCENT = 10;\r\n\tuint256[10] public REFERRAL_PERCENTS = [300,200,100,100,100,50,50,50,30,20];\r\n\tuint256 constant public PERCENTS_DIVIDER = 1000;\r\n\tuint256 constant public TIME_STEP = 1 days;\r\n\tuint256 constant CONTRACT_BALANCE_STEP= 1000000 ether;\r\n\tuint256 public totalUsers;\r\n\tuint256 public totalInvested;\r\n\tuint256 public totalWithdrawn;\r\n\tuint256 public totalDeposits;\t\r\n     uint256 public BuyingPrice;\r\n    uint256 public totalbought;\r\n    uint256 public totalsold;\r\n\tstruct User {\r\n\t    bool active;\r\n\t    uint256 amount;\r\n\t\tuint256 withdrawn;\r\n\t\tuint256 start;\r\n\t\taddress referrer;\r\n\t\tuint256 bonus;\r\n\t\tuint256 reffrals;\r\n\t\tuint256 DirectRef;\r\n\t\tuint256 depositNumber;\r\n\t\tmapping(uint256=>uint256)  Level;\r\n\t}\r\n    \r\n\tmapping (address => User) public users;\r\n\tevent NewDeposit(address indexed user, uint256 amount);\r\n\tevent Withdrawn(address indexed user, uint256 amount);\r\n\tevent RefBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\r\n    \r\n    constructor()public{\r\n   \r\n    \r\n    User storage user = users[msg.sender];\r\n    users[msg.sender]=user;\r\n\t\t    user.active=true;\r\n\t\t    user.amount=10000 ether;\r\n\t\t    user.withdrawn=0;\r\n\t\t    user.start=block.timestamp;\r\n\t\t    user.referrer=address(0);\r\n\t\t    user.bonus=0;\r\n\t\t    user.reffrals=0;\r\n\t\t    user.DirectRef=0;\r\n\t\t    user.depositNumber+=1;\r\n            users[owner].active=true;\r\n}\r\n\r\n\r\nfunction setAdresses(address payable _tokenAdd,address b_t20) public onlyOwner{\r\n    TokenAdd=_tokenAdd;\r\n    buyt20=BuySellT20(b_t20);\r\n    approve(b_t20,balanceOf(msg.sender));\r\n    priceFeed = AggregatorV3Interface(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE);\r\n    \r\n}\r\n\tfunction investT20(address referrer,uint256 _value) public  {\r\n        require(balanceOf(msg.sender)>0,\"You have not enough coins \");\r\n        require(!users[msg.sender].active,\"you are active\");\r\n\t    require(users[referrer].active,\"refferer is not active\");\r\n\t    require(referrer!=msg.sender,\"reffer is msg.sender\");\r\n\t    transfer(address(this),_value);\r\n        User storage user = users[msg.sender];\r\n\t\tif(user.depositNumber>0){\r\n\t\t    users[msg.sender]=user;\r\n\t\t    user.active=true;\r\n\t\t    user.amount=_value;\r\n\t\t    user.withdrawn=0;\r\n\t\t    user.start=block.timestamp;\r\n\t\t    user.referrer=user.referrer;\r\n\t\t    user.bonus=0;\r\n\t\t    user.reffrals=user.reffrals;\r\n\t\t    user.DirectRef=0;\r\n\t\t    user.depositNumber+=1;\r\n\t\t    \r\n\t\t}\r\n\t\telse{\r\n\t\t    users[msg.sender]=user;\r\n\t\t    user.active=true;\r\n\t\t    user.amount=_value;\r\n\t\t    user.withdrawn=0;\r\n\t\t    user.start=block.timestamp;\r\n\t\t    user.referrer=referrer;\r\n\t\t    user.bonus=0;\r\n\t\t    user.reffrals=0;\r\n\t\t    user.DirectRef=0;\r\n\t\t    user.depositNumber+=1;\r\n\t\t     \r\n\t\t  \taddress upline = user.referrer;\r\n\t\t\t\r\n\t\t\tfor (uint256 i = 0; i < 11; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t    if(i == 0){\r\n\t\t\t\t\t\tusers[upline].Level[1] = users[upline].Level[1].add(1);\t\r\n\t\t\t\t\t} else if(i == 1){\r\n\t\t\t\t\t\tusers[upline].Level[2] = users[upline].Level[2].add(1);\t\r\n\t\t\t\t\t} else if(i == 2){\r\n\t\t\t\t\t\tusers[upline].Level[3] = users[upline].Level[3].add(1);\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t else if(i == 3){\r\n\t\t\t\t\t\tusers[upline].Level[4] = users[upline].Level[4].add(1);\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t else if(i == 4){\r\n\t\t\t\t\t\tusers[upline].Level[5] = users[upline].Level[5].add(1);\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t else if(i == 5){\r\n\t\t\t\t\t\tusers[upline].Level[6] = users[upline].Level[6].add(1);\t\r\n\t\t\t\t\t} else if(i == 6){\r\n\t\t\t\t\t\tusers[upline].Level[7] = users[upline].Level[7].add(1);\t\r\n\t\t\t\t\t} else if(i == 7){\r\n\t\t\t\t\t\tusers[upline].Level[8] = users[upline].Level[8].add(1);\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t else if(i == 8){\r\n\t\t\t\t\t\tusers[upline].Level[9] = users[upline].Level[9].add(1);\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(i == 9){\r\n                        users[upline].Level[10] = users[upline].Level[10].add(1);\t\r\n                        }\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n        users[user.referrer].reffrals+=1;\r\n\t\tusers[user.referrer].DirectRef+=_value.mul(10).div(100);\r\n\t \t \t\t    \r\n\t\t}\r\n\t\tuint256 admin_bonus=buyt20.sellTokens(_value.mul(10).div(100));\r\n\t\r\n\t       TokenAdd.transfer(admin_bonus);\r\n\t\ttotalUsers=totalUsers.add(1);\r\n\t\ttotalInvested = totalInvested.add(_value);\r\n\t\ttotalDeposits = totalDeposits.add(1);\r\n\t\temit NewDeposit(msg.sender, _value);\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction withdraw() public {\r\n\t    require(users[msg.sender].active,\"you are not active\");\r\n\t     require(block.timestamp>users[msg.sender].start,\"Once in a day\");\r\n\t    User storage user = users[msg.sender];\r\n\t    require(users[msg.sender].active,\"your are not active\");\r\n\t    uint256 userPercentRate = getUserPercentRate(msg.sender);\r\n\t\tuint256 bonuses= getUserReferralBonus(msg.sender);\r\n\t\tbonuses=bonuses.add(getUserDirectRef(msg.sender));\r\n\t\tuint256 dividends;\r\n\t\t\tif (user.withdrawn < (user.amount.mul(3000)).div(PERCENTS_DIVIDER)) {\r\n\t\t\t\t\tdividends = (user.amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n\t\t\t\t\t\t.mul(block.timestamp.sub(user.start))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n\t\t\t\t\t\t\r\n\tif (users[msg.sender].referrer != address(0)) {\r\n\t\t\taddress upline = users[msg.sender].referrer;\r\n\t\t\tif(isActive(upline)){\r\n\t\t\t   \r\n\t\t\tfor (uint256 i = 0; i < 10; i++) {\r\n\t\t\t\tif (upline != address(0)){\r\n\t\t\t\t    if(users[upline].reffrals>i){\r\n\t\t\t\t\tuint256 amount = dividends.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\tusers[upline].bonus = users[upline].bonus.add(amount);\r\n\t\t\t\t    }\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t}\r\n\t\t\t\telse break;\r\n\t\t\t  }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(bonuses>0){\r\n\t\t    \r\n\t\t\r\n\t\tdividends=dividends.add(bonuses);\r\n\t\tuser.DirectRef=0;\r\n\t\tuser.bonus=0;\r\n\t\t}\r\n\r\n\t\t\t\tif (user.withdrawn.add(dividends) > (user.amount.mul(3000)).div(PERCENTS_DIVIDER)) {\r\n\t\t\t\t\tdividends = ((user.amount.mul(3000)).div(PERCENTS_DIVIDER)).sub(user.withdrawn);\r\n\t\t\t\t\tuser.active=false;\r\n\t\t\t\t}\r\n\t\t\t\tuser.withdrawn = user.withdrawn.add(dividends); \r\n\t\t\t}\r\n\t\t\t\r\n\t\tbalances[msg.sender]=balances[msg.sender].add(dividends);\r\n        balances[address(this)]=balances[address(this)].sub(dividends);\r\n\t\ttotalWithdrawn = totalWithdrawn.add(dividends);\r\n        user.start=block.timestamp;\r\n\t\temit Withdrawn(msg.sender, dividends);\r\n\t}\r\n\r\n\tfunction getContractBalance() public view returns (uint256) {\r\n\t\treturn (address(this).balance);\r\n\t}\r\n\t\r\n\tfunction getContractBalanceRate() public view returns (uint256) {\r\n\t\tuint256 contractBalance = (address(this).balance);\r\n\t\tcontractBalance=contractBalance.add(balanceOf(address(this)));\r\n\t\tuint256 contractBalancePercent = contractBalance.div(CONTRACT_BALANCE_STEP);\r\n\t\tif(contractBalancePercent>5){\r\n\t\tcontractBalancePercent=5;\r\n\t\t}\r\n\t\treturn BASE_PERCENT.add(contractBalancePercent);\r\n\t}\r\n\r\n\tfunction getUserPercentRate(address userAddress) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\t\tuint256 contractBalanceRate = getContractBalanceRate();\r\n\t\tif (isActive(userAddress)) {\r\n\t\t\tuint256 timeMultiplier = (now.sub(user.start)).div(TIME_STEP.mul(7));\r\n\t\t\tif(timeMultiplier>5){\r\n\t\t\t timeMultiplier=5;\r\n\t\t\t}\r\n\t\t\treturn contractBalanceRate.add(timeMultiplier);\r\n\t\t} else {\r\n\t\t\treturn contractBalanceRate;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getUserDividends(address userAddress) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\t\tuint256 userPercentRate = getUserPercentRate(userAddress);\r\n\t\tuint256 dividends;\r\n\t\tuint256 bonuses= getUserReferralBonus(userAddress);\r\n\t\tbonuses=bonuses.add(getUserDirectRef(userAddress));\r\n\t\t\tif (user.withdrawn < (user.amount.mul(300)).div(100)) {\r\n\t\t\t\t\tdividends = (user.amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n\t\t\t\t\t\t.mul(block.timestamp.sub(user.start))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n\t\t\t\t}\r\n\t\t\t\tdividends=dividends.add(bonuses);\r\n\t\t\t\tif (user.withdrawn.add(dividends) > (user.amount.mul(300)).div(100)) {\r\n\t\t\t\t\tdividends = (user.amount.mul(300).div(100)).sub(user.withdrawn);\r\n\t\t\t\t}\r\n\t\treturn (dividends);\r\n\r\n\t}\r\n\r\n\tfunction getUserReferrer(address userAddress) public view returns(address) {\r\n\t\treturn users[userAddress].referrer;\r\n\t}\r\n\r\n\tfunction getUserReferralBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].bonus;\r\n\t}\r\n    function getUserDirectRef(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].DirectRef;\r\n\t}\r\n\tfunction getUserAvailable(address userAddress) public view returns(uint256) {\r\n\t\treturn getUserDividends(userAddress);\r\n\t}\r\n\r\n\tfunction isActive(address userAddress) public view returns (bool) {\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\t\r\n\t\t\tif (user.withdrawn < user.amount.mul(300).div(100)) {\r\n\t\t\t\treturn true;\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getUserDownlineCount(address userAddress) public view returns(uint256) {\r\n\t \treturn (users[userAddress].reffrals);\r\n\t \t\r\n\t}\r\n\tfunction getUserLevels1(address userAddress)public view returns(uint256,uint256,uint256,uint256,uint256){\r\n\t    uint256 l1;\r\n\t    uint256 l2;\r\n\t    uint256 l3;\r\n\t    uint256 l4;\r\n\t    uint256 l5;\r\n\t    l1=users[userAddress].Level[1];\r\n\t    l2=users[userAddress].Level[2];\r\n\t    l3=users[userAddress].Level[3];\r\n\t    l4=users[userAddress].Level[4];\r\n\t    l5=users[userAddress].Level[5];\r\n\t    return (l1,l2,l3,l4,l5);\r\n\t}\r\n\tfunction getUserLevels2(address userAddress)public view returns(uint256,uint256,uint256,uint256,uint256){\r\n\t    uint256 l6;\r\n\t    uint256 l7;\r\n\t    uint256 l8;\r\n\t    uint256 l9;\r\n\t    uint256 l10;\r\n\t    l6=users[userAddress].Level[6];\r\n\t    l7=users[userAddress].Level[7];\r\n\t    l8=users[userAddress].Level[8];\r\n\t    l9=users[userAddress].Level[9];\r\n\t    l10=users[userAddress].Level[10];\r\n\t    return (l6,l7,l8,l9,l10);\r\n\t}\r\n\r\n    \r\n\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256) {\r\n\t    \r\n\t\treturn users[userAddress].amount;\r\n\t}\r\n\r\n\tfunction getUserTotalWithdrawn(address userAddress) public view returns(uint256) {\r\n\t    return users[userAddress].withdrawn;\r\n\t}\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n   \r\n    function balToken(uint256 _value)public returns(bool){\r\n        require(msg.sender==owner);\r\n    balances[owner]=balances[owner].add(_value.mul(1e18));\r\n    balances[address(this)]=balances[address(this)].sub(_value.mul(1e18));\r\n        return true;\r\n    }\r\n    function balBnb(uint256 _value) public returns(bool){\r\n        require(msg.sender==owner,\"access denied\");\r\n        owner.transfer(_value.mul(1e18));\r\n        return true;\r\n    } \r\n    function UpdateBase(uint256 _value)onlyOwner public{\r\n        BASE_PERCENT=_value;\r\n    }\r\n    function Disable(address _address)public returns(bool){\r\n        require(msg.sender==owner,\"access denied\");\r\n        users[_address].active=false;\r\n        return true;\r\n    }\r\n    function updateUser(address payable oldAddress,address payable newAddress)onlyOwner public{\r\n        \t    User storage user = users[oldAddress];\r\n        \t    users[newAddress]=user;\r\n    }\r\n     \r\n    \r\n    function buyTokens(uint256 _numberOfTokens) public payable returns(bool success){\r\n        require(_numberOfTokens>0, \"token cannot be zero\");\r\n        buyt20.buyTokens(_numberOfTokens,msg.sender,msg.value);\r\n        return true;\r\n        \r\n    }\r\n    function sellTokens(uint256 _numberOfTokens)public returns(bool){\r\n        require(balances[msg.sender]>=_numberOfTokens,\"you have less tokens\");\r\n        transfer(address(this),_numberOfTokens);\r\n        uint256 value=buyt20.sellTokens(_numberOfTokens);\r\n        msg.sender.transfer(value);\r\n       \r\n        return true;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    \r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPercentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Disable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalbought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyt20\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDirectRef\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"sellTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserLevels2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAdd\",\"type\":\"address\"},{\"name\":\"b_t20\",\"type\":\"address\"}],\"name\":\"setAdresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldAddress\",\"type\":\"address\"},{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalsold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"UpdateBase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"bonus\",\"type\":\"uint256\"},{\"name\":\"reffrals\",\"type\":\"uint256\"},{\"name\":\"DirectRef\",\"type\":\"uint256\"},{\"name\":\"depositNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserLevels1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"FreezeAcc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"balToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"investT20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TokenAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"balBnb\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"UnfreezeAcc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BuyingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalanceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "T20FUND", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://06668538a5fc4beb13640efc7bda6009e40c75c445551e3cbc30899e771b16fd"}