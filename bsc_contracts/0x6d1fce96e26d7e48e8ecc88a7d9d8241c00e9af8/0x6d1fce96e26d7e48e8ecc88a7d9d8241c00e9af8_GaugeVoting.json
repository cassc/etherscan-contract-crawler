{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-0.8/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/GaugeVoting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"./Interfaces.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title   GaugeVoting\\n * @author  WombexFinance\\n */\\ncontract GaugeVoting is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant DENOMINATOR = 10000;\\n\\n    IWmxLocker public wmxLocker;\\n    IBooster public booster;\\n    IBribeVoter public bribeVoter;\\n    address public voterProxy;\\n    IERC20 public veWom;\\n\\n    ITokenFactory public tokenFactory;\\n    IBribesRewardFactory public bribeRewardsFactory;\\n    INftLocker public nftLocker;\\n\\n    mapping(address => address) public lpTokenRewards;\\n\\n    enum LpTokenStatus {\\n        NOT_EXISTS,\\n        ADDED,\\n        ACTIVE\\n    }\\n    mapping(address => LpTokenStatus) public lpTokenStatus;\\n    address[] public lpTokensAdded;\\n\\n    mapping(address => bool) public rewardTokenAdded;\\n\\n    ITokenMinter public stakingToken;\\n    uint256 public lastVoteAt;\\n    uint256 public votePeriod;\\n    uint256 public voteIncentive;\\n    uint256 public voteThreshold;\\n    bool public executeOnVote;\\n    bool public addRewardOnExecute;\\n\\n    event SetVotingConfig(uint256 votePeriod, uint256 voteThreshold, uint256 voteIncentive, bool executeOnVote);\\n    event SetNftLocker(address indexed nftLocker);\\n    event SetFactories(address indexed tokenFactory, address indexed rewardFactory);\\n    event AddLpToken(address indexed lpToken, address indexed rewards);\\n    event SetLpTokenStatus(address indexed lpToken, LpTokenStatus indexed status);\\n    event StakingTokenMigrate(address indexed newOperator);\\n    event RewardPoolMigrate(address indexed rewards, address indexed newOperator);\\n    event Vote(address indexed voter, address[] lpTokens, int256[] deltas, uint256 availableVotes, uint256 votedAmount);\\n    event DistributeBribeRewards(address indexed lpToken, address indexed rewardsPool, address indexed bribe, address[] rewardTokens, uint256[] rewardAmounts);\\n    event ZeroRewards(address indexed lpToken, address indexed bribe, address indexed rewardToken);\\n    event TransferRewards(address indexed lpToken, address indexed rewardToken, address indexed recipient, uint256 rewardAmount, bool queueRewards);\\n    event VoteExecute(address[] lpTokens, int256[] deltas, int256[] votes);\\n\\n    constructor(\\n        IWmxLocker _wmxLocker,\\n        IBooster _booster,\\n        IBribeVoter _bribeVoter\\n    ) {\\n        wmxLocker = _wmxLocker;\\n        booster = _booster;\\n        voterProxy = _booster.voterProxy();\\n        veWom = IERC20(IStaker(voterProxy).veWom());\\n        bribeVoter = _bribeVoter;\\n    }\\n\\n    function updateBooster() public {\\n        booster = IBooster(IStaker(voterProxy).operator());\\n    }\\n\\n    function setVotingConfig(uint256 _votePeriod, uint256 _voteThreshold, uint256 _voteIncentive, bool _executeOnVote, bool _addRewardOnExecute) public onlyOwner {\\n        require(_voteIncentive <= 1000, \\\"voteIncentive>1000\\\");\\n        votePeriod = _votePeriod;\\n        voteThreshold = _voteThreshold;\\n        voteIncentive = _voteIncentive;\\n        executeOnVote = _executeOnVote;\\n        addRewardOnExecute = _addRewardOnExecute;\\n        emit SetVotingConfig(_votePeriod, _voteThreshold, _voteIncentive, _executeOnVote);\\n    }\\n\\n    function setNftLocker(INftLocker _nftLocker) public onlyOwner {\\n        nftLocker = _nftLocker;\\n        emit SetNftLocker(address(_nftLocker));\\n    }\\n\\n    function setFactories(address _tokenFactory, address _rewardFactory, address _stakingToken) public onlyOwner {\\n        require(address(tokenFactory) == address(0), \\\"!zero\\\");\\n        tokenFactory = ITokenFactory(_tokenFactory);\\n        bribeRewardsFactory = IBribesRewardFactory(_rewardFactory);\\n\\n        if (_stakingToken == address(0)) {\\n            stakingToken = ITokenMinter(tokenFactory.CreateBribesVotingToken());\\n        } else {\\n            stakingToken = ITokenMinter(_stakingToken);\\n        }\\n\\n        emit SetFactories(_tokenFactory, _rewardFactory);\\n    }\\n\\n    function approveRewards() external onlyOwner {\\n        uint256 lpLen = lpTokensAdded.length;\\n        for (uint256 i = 0; i < lpLen; i++) {\\n            if (lpTokenStatus[lpTokensAdded[i]] != LpTokenStatus.ACTIVE) {\\n                continue;\\n            }\\n            address rewardPool = lpTokenRewards[lpTokensAdded[i]];\\n\\n            (, , , , , , address bribe) = bribeVoter.infos(lpTokensAdded[i]);\\n            address[] memory rewardTokens = IMasterWombatRewarder(bribe).rewardTokens();\\n\\n            uint256 rtLen = rewardTokens.length;\\n            for (uint256 j = 0; j < rtLen; j++) {\\n                _approveRewardToPool(rewardTokens[j], rewardPool);\\n            }\\n        }\\n    }\\n\\n    function _approveRewardToPool(address _rewardToken, address _rewardPool) internal {\\n        IERC20(_rewardToken).approve(_rewardPool, 0);\\n        IERC20(_rewardToken).approve(_rewardPool, type(uint256).max);\\n    }\\n\\n    function updateBribeRewardsConfig(address[] calldata _rewards, bool _callOperatorOnGetReward) external onlyOwner {\\n        for(uint256 i = 0; i < _rewards.length; i++) {\\n            IBribeRewardsPool(_rewards[i]).updateBribesConfig(_callOperatorOnGetReward);\\n        }\\n    }\\n\\n    function updateRatioConfig(address[] calldata _rewards, uint256 _duration, uint256 _newRewardRatio) external onlyOwner {\\n        require(_duration >= 60 && _duration <= 30 days, \\\"!duration\\\");\\n        require(_newRewardRatio > 0, \\\"!maxRewardRatio\\\");\\n\\n        for(uint256 i = 0; i < _rewards.length; i++) {\\n            IBribeRewardsPool(_rewards[i]).updateRatioConfig(_duration, _newRewardRatio);\\n        }\\n    }\\n\\n    function setRewardTokenPausedInPools(address[] memory _rewardPools, address _token, bool _paused) external onlyOwner {\\n        for (uint256 i = 0; i < _rewardPools.length; i++) {\\n            IRewards(_rewardPools[i]).setRewardTokenPaused(_token, _paused);\\n        }\\n    }\\n\\n    function migrateStakingToken(address _newOperator) external onlyOwner {\\n        stakingToken.updateOperator(_newOperator);\\n        emit StakingTokenMigrate(_newOperator);\\n    }\\n\\n    function migrateRewards(address[] calldata _rewards, address _newOperator) external onlyOwner {\\n        uint256 len = _rewards.length;\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IRewards(_rewards[i]).updateOperatorData(_newOperator, 0);\\n            emit RewardPoolMigrate(_rewards[i], _newOperator);\\n        }\\n    }\\n\\n    function registerLpTokens(address[] memory _lpTokens) external onlyOwner {\\n        uint256 len = _lpTokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            _registerLpToken(_lpTokens[i]);\\n        }\\n    }\\n\\n    function registerCreatedLpTokens(address[] memory _rewards) external onlyOwner {\\n        uint256 len = _rewards.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            _registerCreatedLpToken(IBribeRewardsPool(_rewards[i]).asset(), _rewards[i]);\\n        }\\n    }\\n\\n    function setLpTokenStatus(address _lpToken, LpTokenStatus _status) external onlyOwner {\\n        lpTokenStatus[_lpToken] = _status;\\n        emit SetLpTokenStatus(_lpToken, _status);\\n    }\\n\\n    function _registerLpToken(address _lpToken) internal {\\n        _registerCreatedLpToken(_lpToken, bribeRewardsFactory.CreateBribesRewards(address(stakingToken), _lpToken, true));\\n    }\\n\\n    function _registerCreatedLpToken(address _lpToken, address _rewards) internal {\\n        (, , , , , , address bribe) = bribeVoter.infos(_lpToken);\\n        require(bribe != address(0), \\\"!bribe\\\");\\n\\n        require(lpTokenStatus[_lpToken] == LpTokenStatus.NOT_EXISTS, \\\"already exists\\\");\\n        lpTokenStatus[_lpToken] = LpTokenStatus.ACTIVE;\\n\\n        lpTokensAdded.push(_lpToken);\\n        lpTokenRewards[_lpToken] = _rewards;\\n\\n        stakingToken.approve(_rewards, 0);\\n        stakingToken.approve(_rewards, type(uint256).max);\\n\\n        emit AddLpToken(_lpToken, _rewards);\\n    }\\n\\n    function vote(address[] memory _lpTokens, int256[] memory _deltas) public {\\n        uint256 len = _lpTokens.length;\\n        require(len == _deltas.length, \\\"!len\\\");\\n        uint256 userLockerVotes = boostedUserVotes(msg.sender, true);\\n        require(userLockerVotes != 0, \\\"no votes\\\");\\n\\n        int256 lastDelta = 0;\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            require(_deltas[i] <= 0 || lpTokenStatus[_lpTokens[i]] == LpTokenStatus.ACTIVE, \\\"only negative delta for inactive\\\");\\n            require(i == 0 || _deltas[i] >= lastDelta, \\\"< lastDelta\\\");\\n            lastDelta = _deltas[i];\\n            address rewards = lpTokenRewards[_lpTokens[i]];\\n\\n            IBribeRewardsPool rewardsPool = IBribeRewardsPool(rewards);\\n            uint256 amount = _deltas[i] < 0 ? uint256(-_deltas[i]) : uint256(_deltas[i]);\\n            if (_deltas[i] < 0) {\\n                _rewardPoolWithdraw(rewardsPool, msg.sender, amount, msg.sender);\\n            } else if (_deltas[i] > 0) {\\n                _rewardPoolDeposit(rewardsPool, msg.sender, amount, msg.sender);\\n            }\\n        }\\n\\n        uint256 userVoted = getUserVoted(msg.sender);\\n        require(userVoted <= userLockerVotes, \\\"votes overflow\\\");\\n\\n        emit Vote(msg.sender, _lpTokens, _deltas, userLockerVotes, userVoted);\\n\\n        if (executeOnVote && isVoteExecuteReady()) {\\n            voteExecute(msg.sender);\\n        }\\n    }\\n\\n    function _rewardPoolWithdraw(IBribeRewardsPool _rewardsPool, address _user, uint256 _amount, address _claimFor) internal {\\n        _rewardsPool.withdrawAndUnwrapFrom(_user, _amount, _claimFor);\\n        stakingToken.burn(address(_rewardsPool), _amount);\\n    }\\n\\n    function _rewardPoolDeposit(IBribeRewardsPool _rewardsPool, address _user, uint256 _amount, address _claimFor) internal {\\n        stakingToken.mint(address(this), _amount);\\n        _rewardsPool.stakeFor(_user, _amount);\\n    }\\n\\n    function voteExecute(address _incentiveRecipient) public {\\n        require(isVoteExecuteReady(), \\\"!ready\\\");\\n\\n        (int256[] memory deltas, int256[] memory votes) = getVotesDelta();\\n        if (deltas.length == 0) {\\n            return;\\n        }\\n\\n        bytes memory rewardsData = booster.voteExecute(\\n            address(bribeVoter),\\n            0,\\n            abi.encodeWithSelector(IBribeVoter.vote.selector, lpTokensAdded, deltas)\\n        );\\n\\n        uint256[][] memory bribeRewards = abi.decode(rewardsData, (uint256[][]));\\n        for (uint256 i = 0; i < deltas.length; i++) {\\n            address lpToken = lpTokensAdded[i];\\n            if (lpTokenStatus[lpToken] != LpTokenStatus.ACTIVE) {\\n                continue;\\n            }\\n\\n            uint256[] memory rewards = bribeRewards[i];\\n            (, , , , , , address bribe) = bribeVoter.infos(lpToken);\\n            address[] memory rewardTokens = IMasterWombatRewarder(bribe).rewardTokens();\\n\\n            uint256 tLen = rewardTokens.length;\\n            for (uint256 j = 0; j < tLen; j++) {\\n                uint256 amount = rewards[j];\\n                if (amount == 0) {\\n                    emit ZeroRewards(lpToken, bribe, rewardTokens[j]);\\n                    continue;\\n                }\\n                if (addRewardOnExecute && !rewardTokenAdded[rewardTokens[j]]) {\\n                    booster.setVotingValid(rewardTokens[j], true);\\n                    _approveRewardToPool(rewardTokens[j], lpTokenRewards[lpToken]);\\n                    rewardTokenAdded[rewardTokens[j]] = true;\\n                }\\n                booster.voteExecute(\\n                    rewardTokens[j],\\n                    0,\\n                    abi.encodeWithSelector(IERC20.transfer.selector, address(this), amount)\\n                );\\n                uint256 incentiveAmount = amount * voteIncentive / DENOMINATOR;\\n                if (incentiveAmount > 0) {\\n                    IERC20(rewardTokens[j]).safeTransfer(_incentiveRecipient, incentiveAmount);\\n                    emit TransferRewards(lpToken, rewardTokens[j], _incentiveRecipient, incentiveAmount, false);\\n                }\\n                IBribeRewardsPool(lpTokenRewards[lpToken]).queueNewRewards(rewardTokens[j], amount - incentiveAmount);\\n                emit TransferRewards(lpToken, rewardTokens[j], lpTokenRewards[lpToken], amount - incentiveAmount, true);\\n            }\\n            emit DistributeBribeRewards(lpToken, lpTokenRewards[lpToken], bribe, rewardTokens, rewards);\\n        }\\n\\n        lastVoteAt = block.timestamp;\\n\\n        emit VoteExecute(lpTokensAdded, deltas, votes);\\n    }\\n\\n    function getVotesDelta() public view returns (int256[] memory deltas, int256[] memory votes) {\\n        uint256 totalVotesAmount = totalVotes();\\n        if (totalVotesAmount == 0) {\\n            return (deltas, votes);\\n        }\\n\\n        uint256 ratio = veWom.balanceOf(voterProxy) * 1 ether / totalVotesAmount;\\n        deltas = new int256[](lpTokensAdded.length);\\n        votes = new int256[](lpTokensAdded.length);\\n\\n        int256 activeVotes = 0;\\n        int256 unusedDelta = 0;\\n        for (uint256 i = 0; i < deltas.length; i++) {\\n            address lpToken = lpTokensAdded[i];\\n            address rewardsPool = lpTokenRewards[lpToken];\\n            int256 bribeVotes = int256(bribeVoter.votes(voterProxy, lpToken));\\n            uint256 supply = IERC20(rewardsPool).totalSupply();\\n\\n            int256 lpTokenVotes = int256(supply * ratio) / 1 ether;\\n            int256 lpTokenDelta = lpTokenVotes - bribeVotes;\\n            if (lpTokenStatus[lpToken] == LpTokenStatus.ACTIVE) {\\n                votes[i] = lpTokenVotes;\\n                deltas[i] = lpTokenDelta;\\n                activeVotes += lpTokenVotes;\\n            } else {\\n                votes[i] = 0;\\n                deltas[i] = -1 * bribeVotes;\\n                unusedDelta += lpTokenDelta + bribeVotes;\\n            }\\n        }\\n        if (activeVotes == 0 || unusedDelta == 0) {\\n            return (deltas, votes);\\n        }\\n        for (uint256 i = 0; i < deltas.length; i++) {\\n            if (lpTokenStatus[lpTokensAdded[i]] != LpTokenStatus.ACTIVE) {\\n                continue;\\n            }\\n            int256 deltaIncr = (unusedDelta * votes[i]) / activeVotes;\\n            deltas[i] += deltaIncr;\\n            votes[i] += deltaIncr;\\n        }\\n    }\\n\\n    function rewardClaimed(uint256, address _account, uint256, bool) external {\\n        IBribeRewardsPool rewardsPool = IBribeRewardsPool(msg.sender);\\n        address asset = rewardsPool.asset();\\n        require(lpTokenRewards[asset] == msg.sender, \\\"!lpTokenRewards\\\");\\n\\n        _onVotesChanged(_account, _account, _account);\\n        if (executeOnVote && isVoteExecuteReady()) {\\n            voteExecute(_account);\\n        }\\n    }\\n\\n    function onVotesChangedMultiple(address[] memory _users, address _incentiveRecipient) public {\\n        uint256 len = _users.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            onVotesChanged(_users[i], _incentiveRecipient);\\n        }\\n    }\\n\\n    function onVotesChanged(address _user, address _incentiveRecipient) public {\\n        address msgSender = msg.sender == address(nftLocker) ? _user : msg.sender;\\n        _onVotesChanged(_user, _incentiveRecipient, msgSender);\\n    }\\n\\n    function _onVotesChanged(address _user, address _incentiveRecipient, address _msgSender) internal {\\n        if (boostedUserVotes(_user, _user == _msgSender) >= getUserVoted(_user)) {\\n            return;\\n        }\\n\\n        uint256 len = lpTokensAdded.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            IBribeRewardsPool rewardsPool = IBribeRewardsPool(lpTokenRewards[lpTokensAdded[i]]);\\n            _rewardPoolWithdraw(rewardsPool, _user, rewardsPool.balanceOf(_user), _incentiveRecipient);\\n        }\\n    }\\n\\n    function burnDeprecatedPools(address[] memory _pools) public onlyOwner {\\n        uint256 len = _pools.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address rewardsPool = _pools[i];\\n            address lpToken = IRewards(rewardsPool).asset();\\n            require(rewardsPool != lpTokenRewards[lpToken], \\\"!deprecated\\\");\\n            stakingToken.burn(rewardsPool, stakingToken.balanceOf(rewardsPool));\\n        }\\n    }\\n\\n    function getUserVoted(address _user) public view returns(uint256 voted) {\\n        uint256 len = lpTokensAdded.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (lpTokenStatus[lpTokensAdded[i]] != LpTokenStatus.ACTIVE) {\\n                continue;\\n            }\\n            IBribeRewardsPool rewardsPool = IBribeRewardsPool(lpTokenRewards[lpTokensAdded[i]]);\\n            voted += rewardsPool.balanceOf(_user);\\n        }\\n    }\\n\\n    function isVoteExecuteReady() public view returns(bool) {\\n        return stakingToken.totalSupply() >= voteThreshold && isPeriodReady();\\n    }\\n\\n    function isPeriodReady() public view returns(bool) {\\n        return lastVoteAt + votePeriod < block.timestamp;\\n    }\\n\\n    function totalVotes() public view returns (uint256) {\\n        return stakingToken.totalSupply();\\n    }\\n\\n    function getLpTokensAdded() external view returns (address[] memory) {\\n        return lpTokensAdded;\\n    }\\n\\n    function getLpTokensRewardPools() external view returns (address[] memory rewardPools) {\\n        uint256 len = lpTokensAdded.length;\\n        rewardPools = new address[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            rewardPools[i] = lpTokenRewards[lpTokensAdded[i]];\\n        }\\n        return rewardPools;\\n    }\\n\\n    function boostedUserVotes(address _user, bool _locked) public view returns (uint256 userLockerVotes) {\\n        (uint256 totalBalance, , uint256 lockedBalance, ) = wmxLocker.lockedBalances(_user);\\n        userLockerVotes = _locked ? lockedBalance : totalBalance;\\n        if (address(nftLocker) != address(0)) {\\n            userLockerVotes = userLockerVotes * nftLocker.voteBoost(_user) / 1 ether;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWomDepositor {\\n    function deposit(uint256 _amount, address _stakeAddress) external returns (bool);\\n}\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function withdraw(uint wad) external;\\n}\\n\\ninterface IAsset is IERC20 {\\n    function underlyingToken() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function cash() external view returns (uint120);\\n\\n    function liability() external view returns (uint120);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function underlyingTokenDecimals() external view returns (uint8);\\n\\n    function setPool(address pool_) external;\\n\\n    function underlyingTokenBalance() external view returns (uint256);\\n\\n    function transferUnderlyingToken(address to, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address to, uint256 amount) external;\\n\\n    function addCash(uint256 amount) external;\\n\\n    function removeCash(uint256 amount) external;\\n\\n    function addLiability(uint256 amount) external;\\n\\n    function removeLiability(uint256 amount) external;\\n}\\n\\ninterface IWmxLocker {\\n    struct EarnedData {\\n        address token;\\n        uint256 amount;\\n    }\\n    struct LockedBalance {\\n        uint112 amount;\\n        uint32 unlockTime;\\n    }\\n\\n    function lock(address _account, uint256 _amount) external;\\n\\n    function checkpointEpoch() external;\\n\\n    function epochCount() external view returns (uint256);\\n\\n    function balanceAtEpochOf(uint256 _epoch, address _user) external view returns (uint256 amount);\\n\\n    function totalSupplyAtEpoch(uint256 _epoch) external view returns (uint256 supply);\\n\\n    function queueNewRewards(address _rewardsToken, uint256 reward) external;\\n\\n    function getReward(address _account, bool _stake) external;\\n\\n    function getReward(address _account) external;\\n\\n    function balanceOf(address _account) external view returns (uint256 amount);\\n\\n    function balances(address _account) external view returns (uint112 locked, uint32 nextUnlockIndex);\\n\\n    function claimableRewards(address _account) external view returns (EarnedData[] memory userRewards);\\n\\n    function getVotes(address account) external view returns (uint256);\\n\\n    function getPastVotes(address account, uint256 timestamp) external view returns (uint256 votes);\\n\\n    function lockedBalances(address _user) external view returns (\\n        uint256 total,\\n        uint256 unlockable,\\n        uint256 locked,\\n        LockedBalance[] memory lockData\\n    );\\n}\\n\\ninterface IBribeVoter {\\n    function vote(IERC20[] calldata _lpVote, int256[] calldata _deltas) external returns (uint256[][] memory bribeRewards);\\n    function votes(address _user, address _lpToken) external view returns (uint256);\\n    function infos(address _lpToken) external view returns (uint104 supplyBaseIndex, uint104 supplyVoteIndex, uint40 nextEpochStartTime, uint128 claimable, bool whitelist, address gaugeManager, address bribe);\\n    function weights(address _lpToken) external view returns (uint128 allocPoint, uint128 voteWeight);\\n    function getUserVotes(address _user, address _lpToken) external view returns (uint256);\\n}\\n\\ninterface IMasterWombatRewarder {\\n    function rewardTokens() external view returns (address[] memory tokens);\\n}\\n\\ninterface IExtraRewardsDistributor {\\n    function addReward(address _token, uint256 _amount) external;\\n}\\n\\ninterface IWomDepositorWrapper {\\n    function getMinOut(uint256, uint256) external view returns (uint256);\\n\\n    function deposit(\\n        uint256,\\n        uint256,\\n        bool,\\n        address _stakeAddress\\n    ) external;\\n}\\n\\ninterface ITokenFactory{\\n    function CreateDepositToken(address) external returns(address);\\n    function CreateBribesVotingToken() external returns(address);\\n}\\n\\ninterface IBribesRewardFactory {\\n    function CreateBribesRewards(address _stakingToken, address _lptoken, bool _callOperatorOnGetReward) external returns (address);\\n}\\n\\ninterface IRewards{\\n    function asset() external returns(address);\\n    function stake(address, uint256) external;\\n    function stakeFor(address, uint256) external;\\n    function withdraw(address, uint256) external;\\n    function withdraw(uint256 assets, address receiver, address owner) external;\\n    function exit(address) external;\\n    function getReward(address) external;\\n    function queueNewRewards(address, uint256) external;\\n    function notifyRewardAmount(uint256) external;\\n    function addExtraReward(address) external;\\n    function extraRewardsLength() external view returns (uint256);\\n    function stakingToken() external view returns (address);\\n    function rewardToken() external view returns(address);\\n    function earned(address _token, address _account) external view returns (uint256);\\n    function updateOperatorData(address operator_, uint256 pid_) external;\\n    function setRewardTokenPaused(address token_, bool paused_) external;\\n    function balanceOf(address _account) external view returns (uint256 amount);\\n    function rewardTokensList() external view returns (address[] memory);\\n    function tokenRewards(address _token) external view returns (address token, uint256 periodFinish, uint256 rewardRate, uint256 lastUpdateTime, uint256 rewardPerTokenStored, uint256 queuedRewards, uint256 currentRewards, uint256 historicalRewards, bool paused);\\n}\\n\\ninterface IGauge {\\n    function notifyRewardAmount(IERC20 token, uint256 amount) external;\\n}\\n\\ninterface IBribe {\\n    function onVote(\\n        address user,\\n        uint256 newVote,\\n        uint256 originalTotalVotes\\n    ) external returns (uint256[] memory rewards);\\n\\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\\n\\n    function rewardTokens() external view returns (IERC20[] memory tokens);\\n\\n    function rewardLength() external view returns (uint256);\\n\\n    function rewardInfo(uint256 i) external view returns (IERC20 rewardToken, uint96 tokenPerSec, uint128 accTokenPerShare, uint128 distributedAmount);\\n}\\n\\ninterface IVe {\\n    function vote(address user, int256 voteDelta) external;\\n}\\n\\ninterface INftLocker {\\n    function voteBoost(address _account) external view returns (uint256);\\n}\\n\\ninterface IBribeRewardsPool is IRewards {\\n    function withdrawAndUnwrapFrom(address _from, uint256 _amount, address _claimRecipient) external returns(bool);\\n    function updateBribesConfig(bool _callOperatorOnGetReward) external;\\n    function updateRatioConfig(uint256 _duration, uint256 _maxRewardRatio) external;\\n}\\n\\ninterface ITokenMinter is IERC20 {\\n    function mint(address,uint256) external;\\n    function burn(address,uint256) external;\\n    function setOperator(address) external;\\n    function updateOperator(address) external;\\n    function getFactAmounMint(uint256 _amount) external view returns(uint256 amount);\\n}\\n\\ninterface IStaker{\\n    function deposit(address, address) external returns (bool);\\n    function withdraw(address) external returns (uint256);\\n    function withdrawLp(address, address, uint256) external returns (bool);\\n    function withdrawAllLp(address, address) external returns (bool);\\n    function lock(uint256 _lockDays) external;\\n    function releaseLock(uint256 _slot) external returns(uint256);\\n    function getGaugeRewardTokens(address _lptoken, address _gauge) external returns (address[] memory tokens);\\n    function claimCrv(address, uint256) external returns (address[] memory tokens, uint256[] memory balances);\\n    function balanceOfPool(address, address) external view returns (uint256);\\n    function lpTokenToPid(address, address) external view returns (uint256);\\n    function operator() external view returns (address);\\n    function depositor() external view returns (address);\\n    function veWom() external view returns (address);\\n    function execute(address _to, uint256 _value, bytes calldata _data) external returns (bool, bytes memory);\\n    function setVote(bytes32 hash, bool valid) external;\\n    function setDepositor(address _depositor) external;\\n    function setOwner(address _owner) external;\\n}\\n\\ninterface IPool {\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\\n\\n    function quotePotentialDeposit(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256 liquidity, uint256 reward);\\n\\n    function quotePotentialWithdraw(\\n        address token,\\n        uint256 liquidity\\n    ) external view returns (uint256 amount, uint256 fee);\\n\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view returns (uint256 amountIn, uint256 haircut);\\n\\n    function addressOfAsset(address token) external view returns (address);\\n\\n    function getTokens() external view returns (address[] memory);\\n}\\n\\ninterface IWombatRouter {\\n    function getAmountOut(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        int256 amountIn\\n    ) external view returns (uint256 amountOut, uint256[] memory haircuts);\\n\\n    /**\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount\\n     * (accounting for fees and slippage)\\n     * Note: This function should be used as estimation only. The actual swap amount might\\n     * be different due to precision error (the error is typically under 1e-6)\\n     */\\n    function getAmountIn(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountOut\\n    ) external view returns (uint256 amountIn, uint256[] memory haircuts);\\n\\n    function swapExactTokensForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNativeForTokens(\\n        address[] calldata tokenPath, // the first address should be WBNB\\n        address[] calldata poolPath,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function swapExactTokensForNative(\\n        address[] calldata tokenPath, // the last address should be WBNB\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function addLiquidityNative(\\n        IPool pool,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external payable returns (uint256 liquidity);\\n\\n    function removeLiquidityNative(\\n        IPool pool,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function removeLiquidityFromOtherAssetAsNative(\\n        IPool pool,\\n        address fromToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n}\\n\\ninterface IBooster {\\n    struct PoolInfo {\\n        address lptoken;\\n        address token;\\n        address gauge;\\n        address crvRewards;\\n        bool shutdown;\\n    }\\n\\n    function crv() external view returns (address);\\n    function owner() external view returns (address);\\n    function voterProxy() external view returns (address);\\n    function earmarkDelegate() external view returns (address);\\n    function poolLength() external view returns (uint256);\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory);\\n    function depositFor(uint256 _pid, uint256 _amount, bool _stake, address _receiver) external returns (bool);\\n    function setOwner(address _owner) external;\\n    function setPoolManager(address _poolManager) external;\\n    function voterProxyClaimRewards(uint256 _pid, address[] memory pendingTokens) external returns (uint256[] memory pendingRewards);\\n    function addPool(address _lptoken, address _gauge) external returns (uint256);\\n    function addCreatedPool(address _lptoken, address _gauge, address _token, address _crvRewards) external returns (uint256);\\n    function approveDistribution(address _distro, address[] memory _distributionTokens, uint256 _amount) external;\\n    function approvePoolsCrvRewardsDistribution(address _token) external;\\n    function distributeRewards(uint256 _pid, address _lpToken, address _rewardToken, address[] memory _transferTo, uint256[] memory _transferAmount, bool[] memory _callQueue) external;\\n    function lpPendingRewards(address _lptoken, address _token) external view returns (uint256);\\n    function earmarkRewards(uint256 _pid) external;\\n    function earmarkRewardsIfAvailable(uint256 _pid) external;\\n    function shutdownPool(uint256 _pid) external returns (bool);\\n    function forceShutdownPool(uint256 _pid) external returns (bool);\\n    function gaugeMigrate(address _newGauge, uint256[] memory migratePids) external;\\n    function voteExecute(address _voting, uint256 _value, bytes calldata _data) external returns (bytes memory);\\n    function setVotingValid(address _voting, bool _value) external;\\n    function mintRatio() external view returns (uint256);\\n    function customMintRatio(uint256 _pid) external view returns (uint256);\\n    function crvLockRewards() external view returns (address);\\n    function cvxLocker() external view returns (address);\\n    function minterMint(address _address, uint256 _amount) external returns(bool);\\n}\\n\\ninterface IBoosterEarmark {\\n    function earmarkIncentive() external view returns (uint256);\\n    function distributionByTokenLength(address _token) external view returns (uint256);\\n    function distributionByTokens(address, uint256) external view returns (address, uint256, bool);\\n    function distributionTokenList() external view returns (address[] memory);\\n    function addPool(address _lptoken, address _gauge) external returns (uint256);\\n    function addCreatedPool(address _lptoken, address _gauge, address _token, address _crvRewards) external returns (uint256);\\n    function isEarmarkAvailable(uint256 _pid) external view returns(bool);\\n    function isEarmarkPoolAvailable(uint256 _pid, IBooster.PoolInfo memory _pool) external view returns (bool);\\n    function earmarkRewards(uint256[] memory _pids) external;\\n    function earmarkPeriod() external view returns (uint256);\\n    function lastEarmarkAt(uint256 pid) external view returns (uint256);\\n    function getEarmarkPoolExecuteOn(uint256 pid) external view returns (uint256);\\n}\\n\\ninterface ISwapRouter {\\n    function swapExactTokensForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function getAmountOut(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        int256 amountIn\\n    ) external view returns (uint256 amountOut, uint256[] memory haircuts);\\n}\\n\\ninterface IWomSwapDepositor {\\n    function pool() external view returns (address);\\n    function deposit(uint256 _amount, address _stakeAddress, uint256 _minAmountOut, uint256 _deadline) external returns (bool);\\n}\\n\\n/**\\n * @dev Interface of the MasterWombatV2\\n */\\ninterface IMasterWombatV2 {\\n    function getAssetPid(address asset) external view returns (uint256 pid);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n    external\\n    view\\n    returns (\\n        uint256 pendingRewards,\\n        IERC20[] memory bonusTokenAddresses,\\n        string[] memory bonusTokenSymbols,\\n        uint256[] memory pendingBonusRewards\\n    );\\n\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n    external\\n    view\\n    returns (IERC20[] memory bonusTokenAddresses, string[] memory bonusTokenSymbols);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\n\\n    function multiClaim(uint256[] memory _pids)\\n    external\\n    returns (\\n        uint256 transfered,\\n        uint256[] memory rewards,\\n        uint256[][] memory additionalRewards\\n    );\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\\n\\n    function poolInfo(uint256 _pid) external view returns (address lpToken, uint96 allocPoint, IMasterWombatRewarder rewarder, uint256 sumOfFactors, uint104 accWomPerShare, uint104 accWomPerFactorShare, uint40 lastRewardTimestamp);\\n}\\n\\ninterface IMasterWombatV3 {\\n    struct PoolInfoV3 {\\n        address lpToken; // Address of LP token contract.\\n        ////\\n        address rewarder;\\n        uint40 periodFinish;\\n        ////\\n        uint128 sumOfFactors; // 20.18 fixed point. the sum of all boosted factors by all of the users in the pool\\n        uint128 rewardRate; // 20.18 fixed point.\\n        ////\\n        uint104 accWomPerShare; // 19.12 fixed point. Accumulated WOM per share, times 1e12.\\n        uint104 accWomPerFactorShare; // 19.12 fixed point. Accumulated WOM per factor share\\n        uint40 lastRewardTimestamp;\\n    }\\n\\n    function poolInfoV3(uint256 _index) external view returns (PoolInfoV3 memory);\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        // storage slot 1\\n        uint128 amount; // 20.18 fixed point. How many LP tokens the user has provided.\\n        uint128 factor; // 20.18 fixed point. boosted factor = sqrt (lpAmount * veWom.balanceOf())\\n        // storage slot 2\\n        uint128 rewardDebt; // 20.18 fixed point. Reward debt. See explanation below.\\n        uint128 pendingWom; // 20.18 fixed point. Amount of pending wom\\n    }\\n    function userInfo(uint256 _pid, address _user) external view returns (UserInfo memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IWmxLocker\",\"name\":\"_wmxLocker\",\"type\":\"address\"},{\"internalType\":\"contract IBooster\",\"name\":\"_booster\",\"type\":\"address\"},{\"internalType\":\"contract IBribeVoter\",\"name\":\"_bribeVoter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"name\":\"AddLpToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardsPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardAmounts\",\"type\":\"uint256[]\"}],\"name\":\"DistributeBribeRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"RewardPoolMigrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardFactory\",\"type\":\"address\"}],\"name\":\"SetFactories\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum GaugeVoting.LpTokenStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"SetLpTokenStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftLocker\",\"type\":\"address\"}],\"name\":\"SetNftLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votePeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteIncentive\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"executeOnVote\",\"type\":\"bool\"}],\"name\":\"SetVotingConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"StakingTokenMigrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"queueRewards\",\"type\":\"bool\"}],\"name\":\"TransferRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"deltas\",\"type\":\"int256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"availableVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votedAmount\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"deltas\",\"type\":\"int256[]\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"votes\",\"type\":\"int256[]\"}],\"name\":\"VoteExecute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"ZeroRewards\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addRewardOnExecute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"boostedUserVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userLockerVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"booster\",\"outputs\":[{\"internalType\":\"contract IBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribeRewardsFactory\",\"outputs\":[{\"internalType\":\"contract IBribesRewardFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribeVoter\",\"outputs\":[{\"internalType\":\"contract IBribeVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"burnDeprecatedPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeOnVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpTokensAdded\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpTokensRewardPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardPools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserVoted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"voted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotesDelta\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"deltas\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"votes\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPeriodReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVoteExecuteReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastVoteAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpTokenRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpTokenStatus\",\"outputs\":[{\"internalType\":\"enum GaugeVoting.LpTokenStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpTokensAdded\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewards\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"migrateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"migrateStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftLocker\",\"outputs\":[{\"internalType\":\"contract INftLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_incentiveRecipient\",\"type\":\"address\"}],\"name\":\"onVotesChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_incentiveRecipient\",\"type\":\"address\"}],\"name\":\"onVotesChangedMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewards\",\"type\":\"address[]\"}],\"name\":\"registerCreatedLpTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_lpTokens\",\"type\":\"address[]\"}],\"name\":\"registerLpTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"rewardClaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardTokenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"setFactories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"enum GaugeVoting.LpTokenStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"setLpTokenStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INftLocker\",\"name\":\"_nftLocker\",\"type\":\"address\"}],\"name\":\"setNftLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardPools\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setRewardTokenPausedInPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_votePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteIncentive\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_executeOnVote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_addRewardOnExecute\",\"type\":\"bool\"}],\"name\":\"setVotingConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract ITokenMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"internalType\":\"contract ITokenFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateBooster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewards\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_callOperatorOnGetReward\",\"type\":\"bool\"}],\"name\":\"updateBribeRewardsConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewards\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRewardRatio\",\"type\":\"uint256\"}],\"name\":\"updateRatioConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veWom\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"_deltas\",\"type\":\"int256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incentiveRecipient\",\"type\":\"address\"}],\"name\":\"voteExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voterProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmxLocker\",\"outputs\":[{\"internalType\":\"contract IWmxLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GaugeVoting", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000d4e596c0d5ad06724f4980ff9b73438feb1504ee000000000000000000000000561050ffb188420d2605714f84eda714da58da6900000000000000000000000004d4e1c1f3d6539071b6d3849fdaed04d48d563d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}