{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\n//Interface for interacting with erc20\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n}\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function balanceOf(address account) view external returns (uint256);\r\n    function decimals() view external returns (uint256);\r\n\r\n\r\n}\r\n\r\ncontract Migrate {\r\n\r\n    address constant ROUTER_V2 = 0x10ED43C718714eb63d5aA57B78B54704E256024E;//addr pancakeRouter\r\n    address constant OLD_CELL = 0xf3E1449DDB6b218dA2C9463D4594CEccC8934346; // addr old cell token\r\n    address constant LP_OLD = 0x06155034f71811fe0D6568eA8bdF6EC12d04Bed2; // addr old lp token\r\n    address constant CELL =  0xd98438889Ae7364c7E2A3540547Fad042FB24642;// addr new cell token\r\n    address constant LP_NEW = 0x1c15f4E3fd885a34660829aE692918b4b9C1803d;// addr new lp token v2\r\n    address WETH = IUniswapV2Router01(ROUTER_V2).WETH();\r\n    address payable public marketingAddress = payable(0xC3b8A652e59d59A71b00808c1FB2432857080Ab8);\r\n    address public owner;\r\n\r\n\r\n    struct pairParams{\r\n        address tokenAddr;\r\n    }\r\n\r\n    mapping(address => uint) balanceLP;\r\n    mapping(string => pairParams) tokens;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner,\"You not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(){\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function migrate(uint amountLP) internal returns(uint) {\r\n\r\n        (uint token0,uint token1) = migrateLP(amountLP);\r\n        (uint eth,uint cell, ) = IUniswapV2Pair(LP_NEW).getReserves();\r\n\r\n        uint resoult = cell/eth;\r\n        token1 = resoult * token0;\r\n\r\n        IERC20(CELL).approve(ROUTER_V2,token1);\r\n        IERC20(WETH).approve(ROUTER_V2,token0);\r\n\r\n        (uint tokenA, , uint liquidity ) = IUniswapV2Router01(ROUTER_V2).addLiquidity(\r\n            WETH,\r\n            CELL,\r\n            token0,\r\n            token1,\r\n            0,\r\n            0,\r\n            msg.sender,\r\n            block.timestamp + 5000\r\n        );\r\n\r\n        uint balanceOldToken = IERC20(OLD_CELL).balanceOf(address(this));\r\n        IERC20(OLD_CELL).transfer(marketingAddress,balanceOldToken);\r\n\r\n        if (tokenA < token0) {\r\n            uint256 refund0 = token0 - tokenA;\r\n            IERC20(WETH).transfer(msg.sender,refund0);\r\n\r\n        }\r\n        return liquidity;\r\n\r\n     }\r\n\r\n\r\n    function migrateLP(uint amountLP) internal returns(uint256 token0,uint256 token1) {\r\n\r\n        IERC20(LP_OLD).transferFrom(msg.sender,address(this),amountLP);\r\n        IERC20(LP_OLD).approve(ROUTER_V2,amountLP);\r\n\r\n        return IUniswapV2Router01(ROUTER_V2).removeLiquidity(\r\n            WETH,\r\n            OLD_CELL,\r\n            amountLP,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp + 5000\r\n        );\r\n\r\n    }\r\n\r\n    function addPairV2(string memory tokenName, address tokenAddr) external onlyOwner{\r\n        tokens[tokenName] = pairParams({tokenAddr:tokenAddr});\r\n    }\r\n\r\n    function getPair(string memory pair) view public returns (address){\r\n        return tokens[pair].tokenAddr;\r\n    }\r\n\r\n\r\n    receive () external payable{\r\n\r\n    }\r\n\r\n}\r\n\r\ncontract Staking is Migrate{\r\n\r\n    bool pause;\r\n    uint time;\r\n    uint endTime;\r\n    uint32 txId;\r\n    uint8 constant idNetwork = 56;\r\n    uint32 constant months = 2629743;\r\n\r\n    struct Participant{\r\n        address sender;\r\n        uint timeLock;\r\n        string addrCN;\r\n        address token;\r\n        uint sum;\r\n        uint timeUnlock;\r\n        bool staked;\r\n    }\r\n\r\n\r\n    event staked(\r\n        address sender,\r\n        uint value,\r\n        uint8 countMonths,\r\n        string walletCN,\r\n        address token,\r\n        uint time,\r\n        uint timeUnlock,\r\n        uint32 txId,\r\n        uint8 procentage,\r\n        uint8 networkID,\r\n        uint _block\r\n    );\r\n\r\n    event unlocked(\r\n        address sender,\r\n        uint sumUnlock,\r\n        uint32 txID\r\n\r\n    );\r\n\r\n\r\n    Participant participant;\r\n\r\n    // information Participant\r\n    mapping(address => mapping(uint32 => Participant)) timeTokenLock;\r\n\r\n    mapping(uint32 => Participant) checkPart;\r\n\r\n\r\n    function pauseLock(bool answer) external onlyOwner returns(bool){\r\n        pause = answer;\r\n        return pause;\r\n    }\r\n\r\n    function setMarketingAddress(address _addy) external onlyOwner {\r\n    marketingAddress = payable(_addy);\r\n    }\r\n\r\n\r\n    //@dev calculate months in unixtime\r\n    function timeStaking(uint _time,uint8 countMonths) internal pure returns (uint){\r\n        require(countMonths >=3 , \"Minimal month 3\");\r\n        require(countMonths <=24 , \"Maximal month 24\");\r\n        return _time + (months * countMonths);\r\n    }\r\n\r\n    function seeAllStaking(address token) view public returns(uint){\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n\r\n    function stake(uint _sum,uint8 count,string memory addrCN,uint8 procentage,string memory pairName) public  returns(uint32) {\r\n        require(procentage <= 100,\"Max count procent 100\");\r\n        require(!pause,\"Staking paused\");\r\n        require(getPair(pairName) != address(0));\r\n\r\n        uint _timeUnlock = timeStaking(block.timestamp,count);\r\n        //creating a staking participant\r\n        participant = Participant(msg.sender,block.timestamp,addrCN,getPair(pairName),_sum,_timeUnlock,true);\r\n\r\n        //identifying a participant by three keys (address, transaction ID, token address)\r\n        timeTokenLock[msg.sender][txId] = participant;\r\n        checkPart[txId] = participant;\r\n\r\n        if(getPair(pairName) == LP_OLD) {\r\n            (timeTokenLock[msg.sender][txId].sum) = migrate(_sum);\r\n        }else{\r\n            IERC20(getPair(pairName)).transferFrom(msg.sender,address(this),_sum);\r\n        }\r\n\r\n\r\n        emit staked(msg.sender,_sum,count,addrCN,getPair(pairName),block.timestamp,\r\n            _timeUnlock,txId,procentage,idNetwork,block.number);\r\n\r\n        txId ++;\r\n        return txId -1;\r\n    }\r\n\r\n    function claimFund(uint32 _txID) external {\r\n        require(block.timestamp >= timeTokenLock[msg.sender][_txID].timeUnlock,\r\n           \"The time has not yet come\" );\r\n        require(timeTokenLock[msg.sender][_txID].staked,\"The steak was taken\");\r\n        require(msg.sender == timeTokenLock[msg.sender][_txID].sender,\"You are not a staker\");\r\n        require(timeTokenLock[msg.sender][_txID].timeLock != 0);\r\n\r\n        if(timeTokenLock[msg.sender][_txID].token == LP_OLD){\r\n            IERC20(LP_NEW).transfer(msg.sender,timeTokenLock[msg.sender][_txID].sum );\r\n        }else{\r\n            IERC20(timeTokenLock[msg.sender][_txID].token).transfer(msg.sender,timeTokenLock[msg.sender][_txID].sum);\r\n        }\r\n\r\n        timeTokenLock[msg.sender][_txID].staked = false;\r\n        checkPart[_txID].staked = false;\r\n        emit unlocked(msg.sender,timeTokenLock[msg.sender][_txID].sum,_txID);\r\n\r\n\r\n    }\r\n\r\n\r\n    function seeStaked (uint32 txID) view public returns\r\n                                                        (uint timeLock,\r\n                                                        string memory addrCN,\r\n                                                        uint sum,\r\n                                                        uint timeUnlock,\r\n                                                        bool _staked){\r\n        return (checkPart[txID].timeLock,\r\n                checkPart[txID].addrCN,\r\n                checkPart[txID].sum,\r\n                checkPart[txID].timeUnlock,\r\n                checkPart[txID].staked);\r\n    }\r\n\r\n    function withdrawCELL() external onlyOwner {\r\n        uint balance = IERC20(CELL).balanceOf(address(this));\r\n        IERC20(CELL).transfer(msg.sender,balance);\r\n    }\r\n\r\n    function withdraw(address tokenAddr, uint _amount) external onlyOwner {\r\n        IERC20(tokenAddr).transfer(msg.sender,_amount);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"countMonths\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"walletCN\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeUnlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"txId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"procentage\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"networkID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sumUnlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"txID\",\"type\":\"uint32\"}],\"name\":\"unlocked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"addPairV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_txID\",\"type\":\"uint32\"}],\"name\":\"claimFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pair\",\"type\":\"string\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"answer\",\"type\":\"bool\"}],\"name\":\"pauseLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"seeAllStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"txID\",\"type\":\"uint32\"}],\"name\":\"seeStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timeLock\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"addrCN\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeUnlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_staked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"addrCN\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"procentage\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"pairName\",\"type\":\"string\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCELL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fac6c1f87d347341896a9636027ede8e26e8eafdd65ab6c465b4fd23fca2390c"}