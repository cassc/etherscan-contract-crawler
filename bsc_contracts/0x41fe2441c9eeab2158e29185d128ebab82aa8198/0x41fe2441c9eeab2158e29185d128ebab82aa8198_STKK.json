{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface TokenRecipient {\r\n    function receiveApproval(\r\n        address _from,\r\n        uint256 _value,\r\n        address _token,\r\n        bytes calldata _extraData\r\n    ) external;\r\n\r\n    function tokenFallback(\r\n        address from,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the BEP20 token.\r\n */\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @title Ownership\r\n * @author Prashant Prabhakar Singh\r\n * @dev Contract that allows to hande ownership of contract\r\n */\r\ncontract Ownership {\r\n    address public owner;\r\n    event LogOwnershipTransferred(\r\n        address indexed oldOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit LogOwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner is allowed\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of contract to other address\r\n     * @param _newOwner address The address of new owner\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"Zero address not allowed\");\r\n        address oldOwner = owner;\r\n        owner = _newOwner;\r\n        emit LogOwnershipTransferred(oldOwner, _newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes owner from the contract.\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     * @param _code uint that prevents accidental calling of the function\r\n     */\r\n    function renounceOwnership(uint256 _code) public onlyOwner {\r\n        require(_code == 1234567890, \"Invalid code\");\r\n        owner = address(0);\r\n        emit LogOwnershipTransferred(owner, address(0));\r\n    }\r\n}\r\n\r\n/**\r\n * @title Freezable\r\n * @author Prashant Prabhakar Singh\r\n * @dev Contract that allows freezing/unfreezing an address or complete contract\r\n */\r\ncontract Freezable is Ownership {\r\n    bool public emergencyFreeze;\r\n    mapping(address => bool) public frozen;\r\n\r\n    event LogFreezed(address indexed target, bool freezeStatus);\r\n    event LogEmergencyFreezed(bool emergencyFreezeStatus);\r\n\r\n    modifier unfreezed(address _account) {\r\n        require(!frozen[_account], \"Account is freezed\");\r\n        _;\r\n    }\r\n\r\n    modifier noEmergencyFreeze() {\r\n        require(!emergencyFreeze, \"Contract is emergency freezed\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Freezes or unfreezes an addreess\r\n     * this does not check for previous state before applying new state\r\n     * @param _target the address which will be feeezed.\r\n     * @param _freeze boolean status. Use true to freeze and false to unfreeze.\r\n     */\r\n    function freezeAccount(address _target, bool _freeze) public onlyOwner {\r\n        require(_target != address(0), \"Zero address not allowed\");\r\n        frozen[_target] = _freeze;\r\n        emit LogFreezed(_target, _freeze);\r\n    }\r\n\r\n    /**\r\n     * @dev Freezes or unfreezes the contract\r\n     * this does not check for previous state before applying new state\r\n     * @param _freeze boolean status. Use true to freeze and false to unfreeze.\r\n     */\r\n    function emergencyFreezeAllAccounts(bool _freeze) public onlyOwner {\r\n        emergencyFreeze = _freeze;\r\n        emit LogEmergencyFreezed(_freeze);\r\n    }\r\n}\r\n\r\n/**\r\n * @title StandardToken\r\n * @author Prashant Prabhakar Singh\r\n * @dev A Standard Token contract that follows BEP-20 standard\r\n */\r\ncontract StandardToken is IBEP20, Freezable {\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals;\r\n    uint256 public currentCirculation;\r\n    uint256 internal _totalSupply;\r\n    uint256 internal initialTotalSupply;\r\n\r\n    mapping(address => uint256) internal balances;\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n    mapping(address => bool) public trustedContracts;\r\n\r\n    event TrustedContractUpdate(address _contractAddress, bool _added);\r\n\r\n    constructor() {\r\n        name = \"Streakk\";\r\n        symbol = \"STKK\";\r\n        decimals = 4;\r\n        initialTotalSupply = 5000000000 * (10 ** decimals);\r\n        _totalSupply = initialTotalSupply;\r\n        mint(owner, 100000000 * (10 ** decimals));\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to revert for zero address\r\n     */\r\n    modifier onlyNonZeroAddress(address account) {\r\n        require(account != address(0), \"Zero address not allowed\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _value The amount of tokens to mint.\r\n     */\r\n    function mint(address _to, uint256 _value) public onlyOwner {\r\n        balances[_to] = balances[_to] + _value;\r\n        currentCirculation += _value;\r\n        if(currentCirculation > initialTotalSupply) {\r\n          _totalSupply = currentCirculation;\r\n        }\r\n        emit Transfer(address(0), _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     * - the caller must not be freezed.\r\n     * - the recipient must not be freezed.\r\n     * - contract must not be freezed.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _transfer(msg.sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-transferFrom}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least `amount`.\r\n     * - the caller must not be freezed.\r\n     * - the recipient must not be freezed.\r\n     * - contract must not be freezed.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        require(\r\n            amount <= allowed[sender][msg.sender],\r\n            \"Insufficient allowance\"\r\n        );\r\n        allowed[sender][msg.sender] = allowed[sender][msg.sender] - amount;\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-transfer}.\r\n     * Bulk action for transfer tokens\r\n     * Requirements:\r\n     *\r\n     * - number of `recipients` and number of `amounts` must match\r\n     * - the caller must have a balance of at least sum of `amounts`.\r\n     * - the caller must not be freezed.\r\n     * - the recipients must not be freezed.\r\n     * - contract must not be freezed.\r\n     */\r\n    function bulkTransfer(address[] memory recipients, uint256[] memory amounts)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(recipients.length == amounts.length, \"Invalid length\");\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            _transfer(msg.sender, recipients[i], amounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function bulkTransferFrom(\r\n        address sender,\r\n        address[] memory recipients,\r\n        uint256[] memory amounts\r\n    ) public returns (bool) {\r\n        require(recipients.length == amounts.length, \"Invalid length\");\r\n        uint256 totalAmount = 0;\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            totalAmount += amounts[i];\r\n            _transfer(sender, recipients[i], amounts[i]);\r\n        }\r\n        require(\r\n            totalAmount <= allowed[sender][msg.sender],\r\n            \"Insufficient allowance\"\r\n        );\r\n        allowed[sender][msg.sender] = allowed[sender][msg.sender] - totalAmount;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _approve(msg.sender, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IBEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - contract must not be freezed.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        return\r\n            _approve(\r\n                msg.sender,\r\n                spender,\r\n                allowed[msg.sender][spender] + addedValue\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IBEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least `subtractedValue`.\r\n     * - contract must not be freezed.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 _value = allowed[msg.sender][spender] - subtractedValue;\r\n        if (subtractedValue > _value) {\r\n            _value = 0;\r\n        }\r\n        return _approve(msg.sender, spender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Utility method to check if an address is contract address\r\n     *\r\n     * @param _addr address which is being checked.\r\n     * @return true if address belongs to a contract else returns false\r\n     */\r\n    function isContract(address _addr) private view returns (bool) {\r\n        uint256 length;\r\n        assembly {\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length > 0);\r\n    }\r\n\r\n    function addTrustedContracts(address _contractAddress, bool _isActive)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            isContract(_contractAddress),\r\n            \"Only contract address can be added\"\r\n        );\r\n        trustedContracts[_contractAddress] = _isActive;\r\n        emit TrustedContractUpdate(_contractAddress, _isActive);\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     * Calls `tokenFallback` function if recipeitn is a trusted contract address\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least `amount`.\r\n     * - the caller must not be freezed.\r\n     * - the recipient must not be freezed.\r\n     * - contract must not be freezed.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    )\r\n        internal\r\n        unfreezed(recipient)\r\n        unfreezed(sender)\r\n        noEmergencyFreeze\r\n        onlyNonZeroAddress(recipient)\r\n        returns (bool)\r\n    {\r\n        require(balances[sender] >= amount, \"Insufficient funds\");\r\n        balances[sender] = balances[sender] - amount;\r\n        balances[recipient] = balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        notifyTrustedContract(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `owner` can not be freezed\r\n     * - `spender` can not be freezed\r\n     * - contract can not be freezed\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal noEmergencyFreeze onlyNonZeroAddress(spender) returns (bool) {\r\n        allowed[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Notifier trusted contracts when tokens are transferred to them\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` must be a trusted contract.\r\n     * - `recipient` must implement `tokenFallback` function\r\n     */\r\n    function notifyTrustedContract(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        // if the contract is trusted, notify it about the transfer\r\n        if (trustedContracts[recipient]) {\r\n            TokenRecipient trustedContract = TokenRecipient(recipient);\r\n            bytes memory data;\r\n            trustedContract.tokenFallback(sender, amount, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Owner can transfer any BEP20 compitable tokens send to this contract\r\n     *\r\n     */\r\n    function transferAnyBEP20Token(address _tokenAddress, uint256 _value)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        return IBEP20(_tokenAddress).transfer(owner, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Function that burns an amount of the token of a sender.\r\n     * reduces total supply.\r\n     * only owner is allowed to burn tokens.\r\n     *\r\n     * @param _value The amount that will be burn.\r\n     */\r\n    function burn(uint256 _value)\r\n        public\r\n        noEmergencyFreeze\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        require(balances[msg.sender] >= _value, \"Insufficient balance\");\r\n        balances[msg.sender] = balances[msg.sender] - _value;\r\n        _totalSupply -= _value;\r\n        emit Transfer(msg.sender, address(0), _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _tokenOwner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _tokenOwner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return balances[_tokenOwner];\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _tokenOwner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _tokenOwner, address _spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return allowed[_tokenOwner][_spender];\r\n    }\r\n}\r\n\r\ncontract STKK is StandardToken {\r\n    mapping(address => mapping(uint256 => bool)) public isNonceUsed;\r\n\r\n    struct Signature {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * @param from address The address from which you want to send tokens.\r\n     * @param to address The address to which you want to transfer tokens.\r\n     * @param value uint256 the amount of tokens to be transferred.\r\n     * @param sig Signature of {from}\r\n     * @param txNonce uint256 nonce to prevent tx replay\r\n     */\r\n    function signedTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        Signature calldata sig,\r\n        uint256 txNonce\r\n    ) public returns (bool success) {\r\n        bytes32 signedMessage = keccak256(\r\n            abi.encodePacked(\r\n                getChainID(),\r\n                address(this),\r\n                bytes4(keccak256(\"signedTransfer\")),\r\n                txNonce,\r\n                from,\r\n                to,\r\n                value\r\n            )\r\n        );\r\n        address signer = getSigner(signedMessage, sig);\r\n        require(!isNonceUsed[signer][txNonce], \"Tx nonce already used\");\r\n        isNonceUsed[signer][txNonce] = true;\r\n        return _transfer(signer, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev increases current allowance\r\n     * @param _spender address who is allowed to spend\r\n     * @param _addedValue the no of tokens added to previous allowance\r\n     * @param sig Signature of the user from which approval happens\r\n     * @param txNonce nonce to prevent tx replay\r\n     * @return success if everything goes well\r\n     */\r\n    function signedIncreaseAllowance(\r\n        address _spender,\r\n        uint256 _addedValue,\r\n        Signature calldata sig,\r\n        uint256 txNonce\r\n    ) public returns (bool) {\r\n        bytes32 signedMessage = keccak256(\r\n            abi.encodePacked(\r\n                getChainID(),\r\n                address(this),\r\n                bytes4(keccak256(\"signedIncreaseAllowance\")),\r\n                txNonce,\r\n                _spender,\r\n                _addedValue\r\n            )\r\n        );\r\n        address signer = getSigner(signedMessage, sig);\r\n        require(!isNonceUsed[signer][txNonce], \"Tx nonce already used\");\r\n        isNonceUsed[signer][txNonce] = true;\r\n        return\r\n            _approve(signer, _spender, allowed[signer][_spender] + _addedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev signedDecreaseApproval: decrease current allowance.\r\n     * @param _spender address who is allowed to spend.\r\n     * @param _subtractedValue the no of tokens deducted to previous allowance\r\n     * If _subtractedValue is greater than prev allowance, allowance becomes 0\r\n     * @param sig Signature of the user from which approval happens.\r\n     * @param txNonce uint256 nonce to prevent tx replay.\r\n     * @return success if everything goes well.\r\n     */\r\n    function signedDecreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue,\r\n        Signature calldata sig,\r\n        uint256 txNonce\r\n    ) public returns (bool) {\r\n        bytes32 signedMessage = keccak256(\r\n            abi.encodePacked(\r\n                getChainID(),\r\n                address(this),\r\n                bytes4(keccak256(\"signedDecreaseApproval\")),\r\n                txNonce,\r\n                _spender,\r\n                _subtractedValue\r\n            )\r\n        );\r\n        address signer = getSigner(signedMessage, sig);\r\n        require(!isNonceUsed[signer][txNonce], \"Tx nonce already used\");\r\n        isNonceUsed[signer][txNonce] = true;\r\n\r\n        uint256 _value = allowed[signer][_spender] - _subtractedValue;\r\n        if (_subtractedValue > _value) {\r\n            _value = 0;\r\n        }\r\n        return _approve(signer, _spender, _value);\r\n    }\r\n\r\n    function getSigner(bytes32 signedMessage, Signature calldata sig)\r\n        private\r\n        pure\r\n        returns (address)\r\n    {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        return\r\n            ecrecover(\r\n                keccak256(abi.encodePacked(prefix, signedMessage)),\r\n                sig.v,\r\n                sig.r,\r\n                sig.s\r\n            );\r\n    }\r\n\r\n    function getChainID() public view returns (uint256) {\r\n        uint256 id;\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        return id;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"emergencyFreezeStatus\",\"type\":\"bool\"}],\"name\":\"LogEmergencyFreezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"freezeStatus\",\"type\":\"bool\"}],\"name\":\"LogFreezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_added\",\"type\":\"bool\"}],\"name\":\"TrustedContractUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"addTrustedContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCirculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyFreeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"emergencyFreezeAllAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isNonceUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct STKK.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"txNonce\",\"type\":\"uint256\"}],\"name\":\"signedDecreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct STKK.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"txNonce\",\"type\":\"uint256\"}],\"name\":\"signedIncreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct STKK.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"txNonce\",\"type\":\"uint256\"}],\"name\":\"signedTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferAnyBEP20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trustedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "STKK", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://59ec0ba2012b7d40f3f79cf4251028207c430fcd9b24497ef2131fe6d094ded0"}