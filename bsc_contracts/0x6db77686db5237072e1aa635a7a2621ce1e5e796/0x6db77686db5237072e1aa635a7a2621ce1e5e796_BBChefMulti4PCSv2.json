{"SourceCode": "/*\r\n$$\\      $$\\  $$$$$$\\   $$$$$$\\   $$$$$$\\  $$$$$$$\\   $$$$$$\\  $$\\   $$\\  $$$$$$\\  $$\\      $$\\  $$$$$$\\  $$$$$$$\\  \r\n$$$\\    $$$ |$$  __$$\\ $$  __$$\\ $$  __$$\\ $$  __$$\\ $$  __$$\\ $$$\\  $$ |$$  __$$\\ $$ | $\\  $$ |$$  __$$\\ $$  __$$\\ \r\n$$$$\\  $$$$ |$$ /  $$ |$$ /  \\__|$$ /  $$ |$$ |  $$ |$$ /  $$ |$$$$\\ $$ |$$ /  \\__|$$ |$$$\\ $$ |$$ /  $$ |$$ |  $$ |\r\n$$\\$$\\$$ $$ |$$$$$$$$ |$$ |      $$$$$$$$ |$$$$$$$  |$$ |  $$ |$$ $$\\$$ |\\$$$$$$\\  $$ $$ $$\\$$ |$$$$$$$$ |$$$$$$$  |\r\n$$ \\$$$  $$ |$$  __$$ |$$ |      $$  __$$ |$$  __$$< $$ |  $$ |$$ \\$$$$ | \\____$$\\ $$$$  _$$$$ |$$  __$$ |$$  ____/ \r\n$$ |\\$  /$$ |$$ |  $$ |$$ |  $$\\ $$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |\\$$$ |$$\\   $$ |$$$  / \\$$$ |$$ |  $$ |$$ |      \r\n$$ | \\_/ $$ |$$ |  $$ |\\$$$$$$  |$$ |  $$ |$$ |  $$ | $$$$$$  |$$ | \\$$ |\\$$$$$$  |$$  /   \\$$ |$$ |  $$ |$$ |      \r\n\\__|     \\__|\\__|  \\__| \\______/ \\__|  \\__|\\__|  \\__| \\______/ \\__|  \\__| \\______/ \\__/     \\__|\\__|  \\__|\\__|      \r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity 0.6.12;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() external onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, 'SafeMath: subtraction overflow');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, 'SafeMath: division by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, 'SafeMath: modulo by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            'SafeBEP20: approve from non-zero to non-zero allowance'\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            'SafeBEP20: decreased allowance below zero'\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, 'Address: insufficient balance');\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}('');\r\n        require(success, 'Address: unable to send value, recipient may have reverted');\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, 'Address: low-level call failed');\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), 'Address: call to non-contract');\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ICakeMasterChefV2 {\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n\r\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\r\n\r\n    function userInfo(uint256 _pid, address _user) external view returns (uint256 amount, uint256 rewardDebt, uint256 boostMultiplier);\r\n\r\n    function emergencyWithdraw(uint256 _pid) external;\r\n\r\n    function CAKE_RATE_TOTAL_PRECISION() external view returns (uint256);\r\n\r\n    function MASTERCHEF_CAKE_PER_BLOCK() external view returns (uint256);\r\n\r\n    function cakePerBlock(bool _isRegular) external view returns (uint256);\r\n\r\n    function lpToken(uint256 _pid) external view returns (address);\r\n\r\n    function poolInfo(uint256 _pid) external view returns (uint256 accCakePerShare, uint256 lastRewardBlock, uint256 allocPoint, uint256 totalBoostedShare, bool isRegular);\r\n\r\n    function totalRegularAllocPoint() external view returns (uint256);\r\n\r\n    function totalSpecialAllocPoint() external view returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n/**\r\n    - Deploy BBChef\r\n    - Set swapRoute2 (optional) (require if reward token LP on different DEX)\r\n    - Set router2 (optional) (require if reward token LP on different DEX)\r\n */\r\ncontract BBChefMulti4PCSv2 is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeBEP20 for IBEP20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount;     // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IBEP20 lpToken;           // Address of LP token contract.\r\n        uint256 rewardPerBlock;  // MCRN tokens created per block.\r\n        uint256 lastRewardBlock;  // Last block number that MCRNs distribution occurs.\r\n        uint256 accMacaronPerShare; // Accumulated MCRNs per share, times 1e12. See below.\r\n        uint256 hostPid;            // hostchef pool id\r\n        bool isRegular;             // hostchef regular flag\r\n        uint256 lpSupply;\r\n        uint256 lastUpdateBlock;\r\n    }\r\n    \r\n    // Treasury\r\n    address treasury;\r\n\r\n    // REWARD TOKEN!\r\n    IBEP20 public rewardToken;\r\n\r\n    IBEP20 public hostRewardToken; // HOST MasterChef Reward Token\r\n    ICakeMasterChefV2 public hostChef;        // CAKE MasterChef for Strategy\r\n    mapping(uint256 => bool) public isHostPidSupported;\r\n    mapping(uint256 => uint256) public extraRewardPerBlock;\r\n    \r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\r\n    // The block number when MCRN mining starts.\r\n    uint256 public startBlock;\r\n\r\n    uint256 public hostRewardDistPercent = 1; // 1%\r\n    uint256 public routerLoss = 5; // 5%\r\n    uint256 public slippageTolerance = 10; // 1:0.1% 10:1% 20:2%\r\n\r\n    // About BB\r\n    IUniswapV2Router public router;\r\n    address[] public swapPath;\r\n    IUniswapV2Router public router2;\r\n    address[] public swapPath2;\r\n\r\n    event Deposit(address indexed user, uint256 pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 pid, uint256 amount);\r\n\r\n    constructor(\r\n        IBEP20 _rewardToken,\r\n        uint256 _startBlock,\r\n        ICakeMasterChefV2 _hostChef,\r\n        IBEP20 _hostRewardToken,\r\n        IUniswapV2Router _router,\r\n        address[] memory _swapPath,\r\n        address _treasury\r\n    ) public {\r\n        rewardToken = _rewardToken;\r\n        startBlock = _startBlock != 0 ? _startBlock : block.number;\r\n        router = _router;\r\n        swapPath = _swapPath;\r\n        treasury = _treasury;\r\n        \r\n        require(address(_hostChef) != address(0), \"_hostChef can't be 0x\");\r\n        hostChef = _hostChef;\r\n        \r\n        require(address(_rewardToken) != address(_hostRewardToken), \"_rewardToken and _hostRewardToken can't be same!\");\r\n        require(address(_hostRewardToken) != address(0), \"_hostRewardToken can't be 0x\");\r\n        _hostRewardToken.safeApprove(address(_router), type(uint256).max);\r\n        hostRewardToken = _hostRewardToken;\r\n    }\r\n    \r\n    /* ========== VIEW METHODS ========== */\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\r\n        return _to.sub(_from);\r\n    }\r\n\r\n    function getPoolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // View function to see pending Reward on frontend.\r\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accMacaronPerShare = pool.accMacaronPerShare;\r\n        \r\n        if (block.number > pool.lastRewardBlock && pool.lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 macaronReward = multiplier.mul(pool.rewardPerBlock);\r\n            accMacaronPerShare = accMacaronPerShare.add(macaronReward.mul(1e12).div(pool.lpSupply));\r\n        }\r\n        return user.amount.mul(accMacaronPerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    function getStakedAmountOnHost(uint256 _pid) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        (uint256 amount,, ) = hostChef.userInfo(pool.hostPid, address(this));\r\n        return amount;\r\n    }\r\n\r\n    /* ========== SETTER METHODS ========== */\r\n\r\n    function setRouterLoss(uint256 _routerLoss) external onlyOwner {\r\n        routerLoss = _routerLoss;\r\n    }\r\n    \r\n    function setRewardPerBlock(uint256 _pid, uint256 _rewardPerBlock) external onlyOwner {\r\n        poolInfo[_pid].rewardPerBlock = _rewardPerBlock;\r\n        updatePool(_pid);\r\n    }\r\n\r\n    function setHostRewardDistPercent(uint256 _percent) external onlyOwner {\r\n        hostRewardDistPercent = _percent;\r\n    }\r\n\r\n    function setRouter1(IUniswapV2Router _router) external onlyOwner {\r\n        router = _router;\r\n        hostRewardToken.safeApprove(address(_router), type(uint256).max);\r\n    }\r\n\r\n    function setRouter2(IUniswapV2Router _router) external onlyOwner {\r\n        router2 = _router;\r\n\r\n        require(swapPath2[0] != address(0), \"swapPath2[0] can't be 0x\");\r\n        IBEP20(swapPath2[0]).safeApprove(address(router2), type(uint256).max);\r\n    }\r\n\r\n    function setRouterPath(address[] memory _path) external onlyOwner {\r\n        swapPath = _path;\r\n    }\r\n\r\n    function setRouterPath2(address[] memory _path) external onlyOwner {\r\n        swapPath2 = _path;\r\n    }\r\n\r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        treasury = _treasury;\r\n    }\r\n\r\n    function setHostChef(ICakeMasterChefV2 _hostChef) external onlyOwner {\r\n        require(address(_hostChef) != address(0), \"_hostChef can't be 0x\");\r\n        hostChef = _hostChef;\r\n    }\r\n\r\n    function setHostRewardToken(IBEP20 _hostRewardToken) external onlyOwner {\r\n        require(address(_hostRewardToken) != address(0), \"_hostRewardToken can't be 0x\");\r\n        hostRewardToken = _hostRewardToken;\r\n    }\r\n\r\n    function setSlippageTolerance(uint256 _slippageTolerance) external onlyOwner {\r\n        require(_slippageTolerance < 500, \"Slippage tolerance can't be greather than 50 percent.\");\r\n        slippageTolerance = _slippageTolerance;\r\n    }\r\n\r\n    /* ========== INTERNAL METHODS ========== */\r\n\r\n    function _swapTokens1(address _input, address _output, uint256 _amount) internal {\r\n        if (_input == _output || _amount == 0) return;\r\n        address[] memory path = swapPath;\r\n        \r\n        // use direct path if path not setted\r\n        if (path.length == 0) {\r\n            // path: _input -> _output\r\n            path = new address[](2);\r\n            path[0] = _input;\r\n            path[1] = _output;\r\n        }\r\n        uint256[] memory amountsOuts = router.getAmountsOut(_amount, path);\r\n        uint256 lastAmountOut = amountsOuts[amountsOuts.length-1];\r\n        uint256 amountOutMin = lastAmountOut.sub(lastAmountOut.mul(slippageTolerance).div(1000));   // slippage tolerance\r\n        uint256[] memory amounts = router.swapExactTokensForTokens(_amount, amountOutMin, path, address(this), now);\r\n\r\n        if(address(router2) != address(0)) {\r\n            _swapTokens2(path[path.length-1], address(rewardToken), amounts[amounts.length-1]);\r\n        }\r\n    }\r\n\r\n    function _swapTokens2(address _input, address _output, uint256 _amount) internal {\r\n        if (_input == _output || _amount == 0) return;\r\n        address[] memory path = swapPath2;\r\n        \r\n        // use direct path if path not setted\r\n        if (path.length == 0) {\r\n            // path: _input -> _output\r\n            path = new address[](2);\r\n            path[0] = _input;\r\n            path[1] = _output;\r\n        }\r\n        uint256[] memory amountsOuts = router2.getAmountsOut(_amount, path);\r\n        uint256 lastAmountOut = amountsOuts[amountsOuts.length-1];\r\n        uint256 amountOutMin = lastAmountOut.sub(lastAmountOut.mul(slippageTolerance).div(1000));   // slippage tolerance\r\n        router2.swapExactTokensForTokens(_amount, amountOutMin, path, address(this), now);\r\n    }\r\n\r\n    function _strategy(uint256 _pid) internal {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        uint256 stakingTokenBal = pool.lpToken.balanceOf(address(this));\r\n        (uint256 stakedAmountOnHost,, ) = hostChef.userInfo(pool.hostPid, address(this));\r\n        uint256 needToAmount = 0;\r\n        if(stakedAmountOnHost <= pool.lpSupply) {\r\n            // need to deposit\r\n            needToAmount = pool.lpSupply.sub(stakedAmountOnHost);\r\n            require(stakingTokenBal >= needToAmount, \"strategyDeposit: not enough token for stake! You should never been here!\");\r\n            hostChef.deposit(pool.hostPid, needToAmount);\r\n        } else {\r\n            // need to withdraw\r\n            needToAmount = stakedAmountOnHost.sub(pool.lpSupply);\r\n            hostChef.withdraw(pool.hostPid, needToAmount);\r\n        }\r\n    }\r\n    \r\n    function _updateRewardPerBlockByStrategy(uint256 _pid) internal {\r\n        //calculate real reward per block\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint256 hostRewardPerBlock = 0;\r\n        uint256 totalStakedAmountOnHost = 0;\r\n        uint256 stakedAmountThis = pool.lpSupply;\r\n\r\n        // get rewardPerBlock on host contract\r\n        (,, uint256 _allocPoint,, bool _isRegular) = hostChef.poolInfo(pool.hostPid);\r\n        address _lpToken = hostChef.lpToken(pool.hostPid);\r\n        uint256 cakePerBlock = hostChef.cakePerBlock(_isRegular);\r\n        uint256 hostTotalAllocPoint = _isRegular ? hostChef.totalRegularAllocPoint() : hostChef.totalSpecialAllocPoint();\r\n        hostRewardPerBlock = cakePerBlock.mul(_allocPoint).div(hostTotalAllocPoint);\r\n        // rewardPerBlock as rewardToken calculation\r\n        totalStakedAmountOnHost = IBEP20(_lpToken).balanceOf(address(hostChef));\r\n        \r\n        if(hostRewardPerBlock > 0 && stakedAmountThis > 0 && totalStakedAmountOnHost > 0) {\r\n            uint256 rewardPerBlockAsHostRewardToken = hostRewardPerBlock.mul(stakedAmountThis).div(totalStakedAmountOnHost);\r\n            uint256[] memory amountsOuts = router.getAmountsOut(rewardPerBlockAsHostRewardToken, swapPath);\r\n            uint256 rewardPerBlockAsRewardToken = amountsOuts[amountsOuts.length-1];\r\n\r\n            if(address(router2) != address(0)) {\r\n                uint256[] memory amountsOuts2 = router2.getAmountsOut(amountsOuts[amountsOuts.length-1], swapPath2);\r\n                rewardPerBlockAsRewardToken = amountsOuts2[amountsOuts2.length-1];\r\n            }\r\n\r\n            if(rewardPerBlockAsRewardToken > 0) {\r\n                pool.rewardPerBlock =  rewardPerBlockAsRewardToken.mul(100-routerLoss).div(100);\r\n                pool.rewardPerBlock = pool.rewardPerBlock.add(extraRewardPerBlock[_pid]);\r\n            }\r\n            else\r\n                pool.rewardPerBlock = 0;\r\n        }\r\n        else {\r\n            pool.rewardPerBlock = 0;\r\n        }\r\n    }\r\n    \r\n    function _rewardDistribution() internal {\r\n        uint256 rewardBalance = hostRewardToken.balanceOf(address(this));\r\n        if (rewardBalance > 0 && hostRewardDistPercent > 0) {\r\n            hostRewardToken.safeTransfer(treasury, rewardBalance.mul(hostRewardDistPercent).div(100));\r\n        }\r\n    }\r\n\r\n    function _buyback() internal {\r\n        uint256 rewardBalance = hostRewardToken.balanceOf(address(this));\r\n        _swapTokens1(address(hostRewardToken), address(rewardToken), rewardBalance);\r\n    }\r\n\r\n    /* ========== EXTERNAL/PUBLIC METHODS ========== */\r\n\r\n    // Stake STAKING tokens to ChocoChef\r\n    function deposit(uint256 _pid, uint256 _amount) external {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        uint256 pending = 0;\r\n        if (user.amount > 0) {\r\n            pending = user.amount.mul(pool.accMacaronPerShare).div(1e12).sub(user.rewardDebt);\r\n        }\r\n        if(_amount > 0) {\r\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n            user.amount = user.amount.add(_amount);\r\n            pool.lpSupply = pool.lpSupply.add(_amount);\r\n        }\r\n        // Deposit or harvest on host\r\n        _strategy(_pid);\r\n        _rewardDistribution();\r\n        _buyback();\r\n        if (user.amount > 0 && pending > 0) {\r\n            rewardToken.safeTransfer(address(msg.sender), pending);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accMacaronPerShare).div(1e12);\r\n        _updateRewardPerBlockByStrategy(_pid);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw STAKING tokens from STAKING.\r\n    function withdraw(uint256 _pid, uint256 _amount) external {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        updatePool(_pid);\r\n        uint256 pending = user.amount.mul(pool.accMacaronPerShare).div(1e12).sub(user.rewardDebt);\r\n        \r\n        if(_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.lpSupply = pool.lpSupply.sub(_amount);\r\n        }\r\n        // Withdraw on host\r\n        _strategy(_pid);\r\n        \r\n        if(_amount > 0)\r\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        \r\n        // This line after transfer bec. lpToken and hostRewardToken can be same\r\n        _rewardDistribution();\r\n        _buyback();\r\n\r\n        if(pending > 0) {\r\n            rewardToken.safeTransfer(address(msg.sender), pending);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accMacaronPerShare).div(1e12);\r\n        _updateRewardPerBlockByStrategy(_pid);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) external {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\r\n        pool.lpSupply = pool.lpSupply.sub(user.amount);\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\r\n    }\r\n\r\n    // Withdraw reward. EMERGENCY ONLY.\r\n    function emergencyRewardWithdraw() external onlyOwner {\r\n        uint256 _amount = rewardToken.balanceOf(address(this));\r\n        if(_amount > 0)\r\n            rewardToken.safeTransfer(address(msg.sender), _amount);\r\n    }\r\n\r\n    function addPool(uint256 _hostPid) public onlyOwner {\r\n        (,, uint256 _allocPoint,, bool _isRegular) = hostChef.poolInfo(_hostPid);\r\n        address _lpToken = hostChef.lpToken(_hostPid);\r\n        require(_allocPoint > 0, \"Host allocPoint can't be zero!\");\r\n        require(_lpToken != address(hostRewardToken), \"_lpToken and _hostRewardToken can't be same!\");\r\n        require(isHostPidSupported[_hostPid] == false, \"This pool already added before!\");\r\n        isHostPidSupported[_hostPid] = true;\r\n\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        poolInfo.push(PoolInfo({\r\n            lpToken: IBEP20(_lpToken),\r\n            rewardPerBlock: 0,\r\n            lastRewardBlock: lastRewardBlock,\r\n            accMacaronPerShare: 0,\r\n            hostPid: _hostPid,\r\n            isRegular: _isRegular,\r\n            lpSupply: 0,\r\n            lastUpdateBlock: block.number\r\n        }));\r\n\r\n        IBEP20(_lpToken).safeApprove(address(hostChef), type(uint256).max);\r\n    }\r\n\r\n    function addMultiPool(uint256[] memory _hostPids) external onlyOwner {\r\n        for(uint256 i = 0; i < _hostPids.length; i++) {\r\n            addPool(_hostPids[i]);\r\n        }\r\n    }\r\n\r\n    function updatePool(uint256 _pid, uint256 _hostPid) external onlyOwner {\r\n        require(isHostPidSupported[_hostPid] == false, \"This pool already added before!\");\r\n\r\n        (,, uint256 _allocPoint,,) = hostChef.poolInfo(_hostPid);\r\n        address _lpToken = hostChef.lpToken(_hostPid);\r\n        require(_allocPoint > 0, \"Host allocPoint can't be zero!\");\r\n        require(_lpToken != address(hostRewardToken), \"_lpToken and _hostRewardToken can't be same!\");\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        require(_lpToken == address(pool.lpToken), \"_hostPid lpToken does not match!\");\r\n\r\n        unstakeAll(_pid);\r\n        isHostPidSupported[pool.hostPid] = false;\r\n        pool.hostPid = _hostPid;\r\n        isHostPidSupported[_hostPid] = true;\r\n        pool.lastUpdateBlock = block.number;\r\n    }\r\n\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; pid++) {\r\n            updatePool(pid);\r\n            _updateRewardPerBlockByStrategy(pid);\r\n        }\r\n    }\r\n\r\n    function rewardDistribution() external onlyOwner {\r\n        _rewardDistribution();\r\n    }\r\n    \r\n    function buyback(uint256 _pid) external onlyOwner {\r\n        _strategy(_pid);\r\n        _buyback();\r\n    }\r\n\r\n    function buybackAll() external onlyOwner {\r\n        for(uint256 i = 0; i < poolInfo.length; i++) {\r\n            _strategy(i);\r\n        }\r\n        _buyback();\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        \r\n        if (pool.lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        uint256 macaronReward = multiplier.mul(pool.rewardPerBlock);\r\n        pool.accMacaronPerShare = pool.accMacaronPerShare.add(macaronReward.mul(1e12).div(pool.lpSupply));\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    function unstakeAll(uint256 _pid) public onlyOwner {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        (uint256 _stakedAmount,, ) = hostChef.userInfo(pool.hostPid, address(this));\r\n        hostChef.withdraw(pool.hostPid, _stakedAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"contract ICakeMasterChefV2\",\"name\":\"_hostChef\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_hostRewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_swapPath\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_hostPids\",\"type\":\"uint256[]\"}],\"name\":\"addMultiPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hostPid\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"buyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyRewardWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extraRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getStakedAmountOnHost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hostChef\",\"outputs\":[{\"internalType\":\"contract ICakeMasterChefV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hostRewardDistPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hostRewardToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isHostPidSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMacaronPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hostPid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router2\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerLoss\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICakeMasterChefV2\",\"name\":\"_hostChef\",\"type\":\"address\"}],\"name\":\"setHostChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setHostRewardDistPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_hostRewardToken\",\"type\":\"address\"}],\"name\":\"setHostRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_routerLoss\",\"type\":\"uint256\"}],\"name\":\"setRouterLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setRouterPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setRouterPath2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippageTolerance\",\"type\":\"uint256\"}],\"name\":\"setSlippageTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapPath2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hostPid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BBChefMulti4PCSv2", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "5000", "ConstructorArguments": "000000000000000000000000acb2d47827c9813ae26de80965845d80935afd0b000000000000000000000000000000000000000000000000000000000105323f000000000000000000000000a5f8c5dbd5f286960b9d90548680ae5ebff076520000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce8200000000000000000000000005ff2b0db69458a0750badebc4f9e13add608c7f00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000067f1d48a8991009e0b092e9c34ca16f7d6072ec100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce82000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000acb2d47827c9813ae26de80965845d80935afd0b", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fd17853fcf427e0699ebed97ac6b129efd1d20b0e3d661f3e76c82c29c40c9b5"}