{"SourceCode": "/*                                                                                                                                                                                      \r\n * ARK Legacy Savings Account\r\n * \r\n * Written by: MrGreenCrypto\r\n * Co-Founder of CodeCraftrs.com\r\n * \r\n * SPDX-License-Identifier: None\r\n */\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IBEP20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount ) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface ISWAP {\r\n    function getCurrentPriceInUSD() external view returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 minimumBusd) external;\r\n}\r\n\r\ninterface IBOND {\r\n    function unstake(address investor, uint256 amount) external;\r\n    function stake(address investor, uint256 amount) external;\r\n    function claimRewardsFor(address investor) external;\r\n    function distributeRewards() external;\r\n    function addToRewardsPool(uint256 busdAmount) external;\r\n    function sendRewards(uint256 busdAmount) external;\r\n    function getBondBalance(address investor) external view returns(uint256);\r\n    function shares(address investor) external view returns(uint256);\r\n}\r\n\r\ninterface ILEGACY {\r\n    function ownerOf(uint256 id) external view returns (address);\r\n    function levelOfNft(uint256 id) external view returns (uint256);\r\n    function nftPriceOfLevel(uint256 level) external view returns (uint256);\r\n    function excluded(uint256 id) external view returns (uint256);\r\n    function claimedRewards(uint256 id) external view returns (uint256);\r\n    function totalRewardsPerShare() external view returns (uint256);\r\n    function rewardsPool() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address account, uint256 index) external view returns (uint256);\r\n    function mintAndLockToWallet(address to, uint256 level, bool isPaid) external;\r\n    function getPriceForLevelUp(uint256 id) external view returns(uint256);\r\n    function levelUp(uint256 id) external;\r\n}\r\n\r\ninterface ILSA {\r\n    function depositBUSDForSomeone(address investor, uint256 amount) external;\r\n    function balance(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IVAULT {\r\n    function addSparkPlayer(address investor) external;\r\n}\r\n\r\ncontract ARK_Savings_Account {\r\n    address public constant CEO = 0xdf0048DF98A749ED36553788B4b449eA7a7BAA88;\r\n    address public constant VAULT = 0x13fD16538FF8B3AeA324BC4d2863eb9EA78E1691;\r\n    ISWAP public constant SWAP = ISWAP(0xE9Aa536D373ADc29D0A40788EB29b706eA101413);\r\n    IBEP20 public constant ARK = IBEP20(0x111120a4cFacF4C78e0D6729274fD5A5AE2B1111);\r\n    IBEP20 public constant BUSD = IBEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n    ILEGACY public constant LEGACY = ILEGACY(0x6733a95654fF739e6058247Dd7556BF9Ce2dEdf6);\r\n    ILSA public constant OLD = ILSA(0xECC09FB183bCBfF9DF18Ce14ea5feeD2fcCb3F13);\r\n\r\n    mapping(address => bool) public isArk;\r\n\r\n    mapping(address => Deposit[]) public deposits;\r\n    mapping(address => uint256) public balance;\r\n\r\n    uint256 public totalDepositsARK;\r\n    uint256 public totalDepositsBUSD;\r\n    bool public isClosed = false;\r\n\r\n    struct Deposit{\r\n        uint256 valueInBusd;\r\n        uint256 timestamp;\r\n    }\r\n    \r\n    address[] public savingsAccounts;\r\n\r\n    modifier onlyCEO() {\r\n        require(msg.sender == CEO, \"Only CEO\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyArk() {\r\n        require(isArk[msg.sender], \"Only ARK can do that\");\r\n        _;\r\n    }\r\n\r\n\tconstructor() {\r\n        isArk[CEO] = true;\r\n        IBEP20(BUSD).approve(address(LEGACY), type(uint256).max);\r\n    }\r\n\r\n    function getUsdValue(uint256 amount) public view returns (uint256) {\r\n        uint256 usdEquivalent = amount * SWAP.getCurrentPriceInUSD() / 10**18;\r\n        return usdEquivalent;\r\n    }\r\n\r\n    function addAccount(address account) internal {\r\n        if(balance[account] == 0) {\r\n            savingsAccounts.push(account);\r\n            IVAULT(VAULT).addSparkPlayer(account);\r\n        }\r\n    }\r\n\r\n    function depositBUSD(uint256 amount) external {\r\n        if(amount == 0) return;\r\n        addAccount(msg.sender);\r\n        if(balance[msg.sender] + amount > checkMaxBalance(msg.sender)) amount = checkMaxBalance(msg.sender) - balance[msg.sender];\r\n        BUSD.transferFrom(msg.sender,address(this),amount);\r\n        totalDepositsBUSD += amount;\r\n        Deposit memory thisDeposit;\r\n        thisDeposit.valueInBusd = amount;\r\n        thisDeposit.timestamp = block.timestamp;\r\n        deposits[msg.sender].push(thisDeposit);\r\n        balance[msg.sender] += amount;\r\n        checkBalance(msg.sender);\r\n    }    \r\n    \r\n    function depositBUSDForSomeone(address investor, uint256 amount) public {\r\n        if(amount == 0) return;\r\n        addAccount(msg.sender);\r\n        if(balance[investor] + amount > checkMaxBalance(investor)) amount = checkMaxBalance(investor) - balance[investor];\r\n        BUSD.transferFrom(msg.sender, address(this), amount);\r\n        totalDepositsBUSD += amount;\r\n        Deposit memory thisDeposit;\r\n        thisDeposit.valueInBusd = amount;\r\n        thisDeposit.timestamp = block.timestamp;\r\n        deposits[investor].push(thisDeposit);\r\n        balance[investor] += amount;\r\n        checkBalance(investor);\r\n    }\r\n\r\n    function depositARK(uint256 amount) external {\r\n        if(amount == 0) return;\r\n        addAccount(msg.sender);\r\n        if(getUsdValue(amount) + balance[msg.sender] > checkMaxBalance(msg.sender)) amount = (checkMaxBalance(msg.sender) - balance[msg.sender]) * 10**18 / SWAP.getCurrentPriceInUSD();\r\n        ARK.transferFrom(msg.sender, VAULT, amount);\r\n        uint256 usdEquivalent = getUsdValue(amount);\r\n        BUSD.transferFrom(address(SWAP),address(this),usdEquivalent);\r\n        totalDepositsARK += amount;\r\n        Deposit memory thisDeposit;\r\n        thisDeposit.valueInBusd = usdEquivalent;\r\n        thisDeposit.timestamp = block.timestamp;\r\n        deposits[msg.sender].push(thisDeposit);\r\n        balance[msg.sender] += usdEquivalent;\r\n        checkBalance(msg.sender);\r\n    }\r\n\r\n    function checkMaxBalance(address investor) public view returns(uint256) {\r\n        uint256 maxBalance = LEGACY.nftPriceOfLevel(3);\r\n        if(LEGACY.balanceOf(investor) > 0) {\r\n            uint256 currentNftValue = LEGACY.nftPriceOfLevel(LEGACY.levelOfNft(LEGACY.tokenOfOwnerByIndex(investor,0)));\r\n            maxBalance -= currentNftValue;\r\n        }\r\n        return maxBalance;\r\n    }\r\n\r\n\r\n    function checkBalance(address investor) internal {\r\n        if(LEGACY.balanceOf(investor) == 0) {\r\n            if(balance[investor] >= 1000 ether) {\r\n                LEGACY.mintAndLockToWallet(investor, 1, true);\r\n                balance[investor] -= 1000 ether;\r\n            }\r\n        }\r\n\r\n        if(LEGACY.balanceOf(investor) > 0) {\r\n            uint256 id = LEGACY.tokenOfOwnerByIndex(investor,0);\r\n            uint256 levelUpCost = LEGACY.getPriceForLevelUp(id);\r\n            if(balance[investor] >= levelUpCost) {\r\n                LEGACY.levelUp(id);\r\n                balance[investor] -= levelUpCost;\r\n            }\r\n        }\r\n    \r\n    }\r\n\r\n    function rescueAnyToken(IBEP20 tokenToRescue) external onlyCEO {\r\n        uint256 _balance = tokenToRescue.balanceOf(address(this));\r\n        tokenToRescue.transfer(CEO, _balance);\r\n    }\r\n\r\n    function setArkWallet(address arkWallet, bool status) external onlyCEO {\r\n        isArk[arkWallet] = status;\r\n    }\r\n\r\n    function getAllInvestors() public view returns(address[] memory) {\r\n        return savingsAccounts;\r\n    }\r\n\r\n    function getBalances() public view returns(address[] memory, uint256[] memory) {\r\n        address[] memory investors = savingsAccounts;\r\n        uint256[] memory balances = new uint256[](investors.length);\r\n        for(uint i = 0; i<investors.length; i++) balances[i] = balance[investors[i]];\r\n        return (investors,balances);\r\n    }\r\n\r\n    function getBalancesCustom(uint256 from, uint256 howMany) public view returns(address[] memory, uint256[] memory) {\r\n        address[] memory investors = savingsAccounts;\r\n        uint256[] memory balances = new uint256[](investors.length);\r\n        for(uint i = from; i< from + howMany; i++) balances[i-from] = balance[investors[i]];\r\n        return (investors,balances);\r\n    }\r\n\r\n    function getDeposits(address investor) public view returns(Deposit[] memory) {\r\n        return deposits[investor];\r\n    }\r\n\r\n    function migrateFromOld(address[] memory accounts) external onlyArk {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            if(balance[accounts[i]] > 0) continue;\r\n            depositBUSDForSomeone(accounts[i], OLD.balance(accounts[i]));\r\n        }\r\n    }\r\n\r\n    function doTheApprovals(address approvalAddress) public onlyCEO {\r\n        IBEP20(BUSD).approve(approvalAddress, type(uint256).max);\r\n    }\r\n\r\n    function withdrawAfterClosing() external {\r\n        require(isClosed,\"There are still legacy NFTs to save up for\");\r\n        uint256 withdrawalAmount = balance[msg.sender] - 500 ether;\r\n        IBEP20(BUSD).transfer(msg.sender, withdrawalAmount);\r\n        balance[msg.sender] = 0;\r\n    }\r\n\r\n    function closeSavingsContract() external onlyCEO {\r\n        isClosed = true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ARK\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CEO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEGACY\",\"outputs\":[{\"internalType\":\"contract ILEGACY\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OLD\",\"outputs\":[{\"internalType\":\"contract ILSA\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP\",\"outputs\":[{\"internalType\":\"contract ISWAP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"checkMaxBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeSavingsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositARK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositBUSDForSomeone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"valueInBusd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approvalAddress\",\"type\":\"address\"}],\"name\":\"doTheApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllInvestors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"howMany\",\"type\":\"uint256\"}],\"name\":\"getBalancesCustom\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"valueInBusd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct ARK_Savings_Account.Deposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getUsdValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isArk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"migrateFromOld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"tokenToRescue\",\"type\":\"address\"}],\"name\":\"rescueAnyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"savingsAccounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"arkWallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setArkWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositsARK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositsBUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAfterClosing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ARK_Savings_Account", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ceccfbd4f18d710d6dd50c9fe39a911dd6eaec9d252fd39030b6341fba8ff7a7"}