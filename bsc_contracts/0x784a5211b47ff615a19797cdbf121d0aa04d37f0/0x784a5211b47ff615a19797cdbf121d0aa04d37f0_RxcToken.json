{"SourceCode": "// File: contracts/IPancakeFactory.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n// File: contracts/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/IBEP20.sol\r\n\r\n\r\npragma solidity ^0.8.1;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/RxcToken.sol\r\n\r\n\r\n/*\r\n * RxC - $RXC Token BEP20\r\n * Transaction Fee: 5%\r\n * Transaction Fee breakdown:\r\n * - Treasury Fee: 25% of transaction fee\r\n * - Operations Fee: 25% of transaction fee\r\n * - Marketing Fee: 25% of transaction fee\r\n * - Developers Fee: 25% of transaction fee\r\n */\r\npragma solidity ^0.8.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n \r\nabstract contract BPContract{\r\n    function protect( address sender, address receiver, uint256 amount ) external virtual;\r\n}\r\n\r\n\r\ncontract RxcToken is Context, IBEP20, Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint8 public _decimals;\r\n    string public _symbol;\r\n    string public _name;\r\n\r\n    //$RXC transaction fee\r\n    uint256 public _transactionFee;\r\n    uint256 public _developerFee;\r\n    uint256 public _treasuryFee;\r\n    uint256 public _operationsFee;\r\n    uint256 public _marketingFee;\r\n\r\n    //special addresses\r\n    address public operationsAddress;\r\n    address public treasuryAddress;\r\n    address public developersAddress;\r\n    address public marketingAddress;\r\n\r\n    address public immutable pancakeswapV2Pair;\r\n\r\n    mapping(address => bool) private _isSpecialAddress;\r\n\r\n    struct CoreWalletOrder {\r\n        address walletAddress;\r\n        uint256 amount;\r\n        string lockType;\r\n    }\r\n\r\n    struct PrivateSaleOrder {\r\n        address participant;\r\n        uint256 amount;\r\n    }\r\n\r\n    mapping(address => TokenLocks) private tokenLocks;\r\n    mapping(string => address[]) private tokenLockAddresses;\r\n    struct TokenLocks {\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 amount;\r\n        string lockType; //presale, founders, etc.\r\n    }\r\n\r\n    bool public maintenanceMode;\r\n\r\n    uint256 public allowBlacklistingUntil;\r\n    mapping(address => bool) private _blacklistedAddresses;\r\n\r\n    event MaintenanceMode(bool maintenanceMode);\r\n\r\n    event SpecialAddressUpdated(address specialAddress,bool activate);\r\n\r\n    event BlacklistAddressUpdate(\r\n        address blacklistAddress,\r\n        bool toggleBlacklistAddress\r\n    );\r\n\r\n    event OperationsAddressChanged(address oldAddress, address newAddress);\r\n    event DevelopersAddressChanged(address oldAddress, address newAddress);\r\n    event MarketingAddressChanged(address oldAddress, address newAddress);\r\n    event TreasuryAddressChanged(address oldAddress, address newAddress);\r\n\r\n    uint256 public privateSaleGeneratedAmount;\r\n    uint256 public privateSaleMaxAmount = 26700000000000000;\r\n    address public privateSaleOperator; // address of the operator\r\n    event NewPrivateSaleOperatorAddress(address operator);\r\n\r\n    uint256 public coreMaxAmount = 34200000000000000;\r\n    uint256 public coreGeneratedAmount;\r\n\r\n    uint256 public privateSaleVestingStartDate;\r\n    uint256 public privateSaleVestingEndDate;\r\n\r\n    BPContract public BP;\r\n    bool public bpEnabled;\r\n    bool public BPDisabledForever = false;\r\n\r\n    constructor(\r\n        uint256 __totalSupply,\r\n        uint256 transactionFee,\r\n        address _operationsAddress,\r\n        address _developersAddress,\r\n        address _marketingAddress,\r\n        address _treasuryAddress\r\n    ) {\r\n        _name = \"RxC\";\r\n        _symbol = \"RXC\";\r\n        _decimals = 9;\r\n        _totalSupply = __totalSupply.mul(10**9).sub(privateSaleMaxAmount).sub(\r\n            coreMaxAmount\r\n        );\r\n\r\n        operationsAddress = _operationsAddress;\r\n        developersAddress = _developersAddress;\r\n        marketingAddress = _marketingAddress;\r\n        treasuryAddress = _treasuryAddress;\r\n\r\n        _isSpecialAddress[operationsAddress] = true;\r\n        _isSpecialAddress[developersAddress] = true;\r\n        _isSpecialAddress[marketingAddress] = true;\r\n        _isSpecialAddress[treasuryAddress] = true;\r\n        _isSpecialAddress[msg.sender] = true;\r\n\r\n        pancakeswapV2Pair = IPancakeFactory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73)\r\n            .createPair(address(this), address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c));\r\n\r\n        _transactionFee = transactionFee; //5\r\n        _developerFee = 25; //25\r\n        _treasuryFee = 25; //25\r\n        _operationsFee = 25; //25\r\n        _marketingFee = 25; //25\r\n\r\n        allowBlacklistingUntil = block.timestamp + 2 days;\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    \r\n    function setBPAddrss(address _bp) external onlyOwner {\r\n        require(address(BP)== address(0), \"Can only be initialized once\");\r\n        BP = BPContract(_bp);\r\n    }\r\n    \r\n    function setBpEnabled(bool _enabled) external onlyOwner {\r\n        bpEnabled = _enabled;\r\n    }\r\n    \r\n    function setBotProtectionDisableForever() external onlyOwner{\r\n        require(BPDisabledForever == false);\r\n        BPDisabledForever = true;\r\n    }\r\n\r\n    modifier onlyOwnerOrPrivateSaleOperator() {\r\n        require(\r\n            msg.sender == owner() || msg.sender == privateSaleOperator,\r\n            \"Not operator/admin\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    //@dev: set new operator\r\n    function setPrivateSaleOperator(address _privateSaleOperatorAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _privateSaleOperatorAddress != address(0),\r\n            \"Cannot be zero address\"\r\n        );\r\n        privateSaleOperator = _privateSaleOperatorAddress;\r\n\r\n        emit NewPrivateSaleOperatorAddress(_privateSaleOperatorAddress);\r\n    }\r\n\r\n    function updateSpecialAddress(address _specialAddress, bool activate) public onlyOwner {\r\n        emit SpecialAddressUpdated(_specialAddress,activate);\r\n        _isSpecialAddress[_specialAddress] = activate;\r\n    }\r\n\r\n    function setOperationsAddress(address _operationsAddress) public onlyOwner {\r\n        emit OperationsAddressChanged(operationsAddress, _operationsAddress);\r\n        updateSpecialAddress(operationsAddress,false);\r\n        updateSpecialAddress(_operationsAddress,true);\r\n        operationsAddress = _operationsAddress;\r\n    }\r\n\r\n    function setDevelopersAddress(address _developersAddress) public onlyOwner {\r\n        emit DevelopersAddressChanged(developersAddress, _developersAddress);\r\n        updateSpecialAddress(developersAddress,false);\r\n        updateSpecialAddress(_developersAddress,true);\r\n        developersAddress = _developersAddress;\r\n        \r\n    }\r\n\r\n    function setMarketingAddress(address _marketingAddress) public onlyOwner {\r\n        emit MarketingAddressChanged(marketingAddress, _marketingAddress);\r\n        updateSpecialAddress(marketingAddress,false);\r\n        updateSpecialAddress(_marketingAddress,true);\r\n        marketingAddress = _marketingAddress;\r\n    }\r\n\r\n    function setTreasuryAddress(address _treasuryAddress) public onlyOwner {\r\n        emit TreasuryAddressChanged(treasuryAddress, _treasuryAddress);\r\n        updateSpecialAddress(treasuryAddress,false);\r\n        updateSpecialAddress(_treasuryAddress,true);\r\n        treasuryAddress = _treasuryAddress;\r\n    }\r\n\r\n    function setMaintenanceMode(bool _maintenanceMode) public onlyOwner {\r\n        maintenanceMode = _maintenanceMode;\r\n        emit MaintenanceMode(_maintenanceMode);\r\n    }\r\n\r\n    function setBlacklistAddress(\r\n        address blacklistAddress,\r\n        bool toggleBlacklistAddress\r\n    ) public onlyOwner {\r\n        if(toggleBlacklistAddress == true){\r\n            //@dev: ensure that blacklisting can only be used for 2 days after the contract has been deployed\r\n            require(allowBlacklistingUntil > block.timestamp,\"Blacklist usage expired\");\r\n        }\r\n        require(blacklistAddress != pancakeswapV2Pair,\"Pairing cannot be blacklisted\");\r\n        \r\n        _blacklistedAddresses[blacklistAddress] = toggleBlacklistAddress;\r\n        emit BlacklistAddressUpdate(blacklistAddress, toggleBlacklistAddress);\r\n    }\r\n\r\n    function isBlacklistedAddress(address blacklistAddress)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _blacklistedAddresses[blacklistAddress];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-totalSupply}.\r\n     */\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _getCurrentBalance(account);\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"insufficient allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"dec allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        if (bpEnabled && !BPDisabledForever){\r\n            BP.protect(sender, recipient, amount); \r\n        }\r\n        require(!maintenanceMode, \"Maintenance mode\");\r\n        require(sender != address(0), \"transfer to 0 addr\");\r\n        require(recipient != address(0), \"transfer to 0 addr\");\r\n        require(!_blacklistedAddresses[sender], \"blacklisted\");\r\n\r\n        if (_takeFee(sender) && _takeFee(recipient)) {\r\n            _transferRegular(sender, recipient, amount);\r\n        } else if (!_takeFee(sender) && _takeFee(recipient)) {\r\n            _transferSpecialSender(sender, recipient, amount);\r\n        } else if (_takeFee(sender) && !_takeFee(recipient)) {\r\n            _transferRegular(sender, recipient, amount);\r\n        } else if (!_takeFee(sender) && !_takeFee(recipient)) {\r\n            _transferSpecialBoth(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    //if both address is special address\r\n    function _transferSpecialBoth(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        _balances[sender] = _balances[sender].sub(amount, \"insuff balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    //if sender is special address\r\n    function _transferSpecialSender(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        _balances[sender] = _balances[sender].sub(amount, \"insuff balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    //if receiver is special address\r\n    function _transferSpecialReceiver(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        _balances[sender] = _balances[sender].sub(amount, \"insuff balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    //if both sender and receiver is not special address. only regular transfer has transaction fee\r\n    function _transferRegular(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        _balances[sender] = _balances[sender].sub(amount, \"insuff balance\");\r\n        (uint256 transactionFee, uint256 toRecipient) = calculateTransactionAmount(amount);\r\n        _balances[recipient] = _balances[recipient].add(toRecipient);\r\n        _takeTransactionFee(sender, transactionFee);\r\n        emit Transfer(sender, recipient, toRecipient);\r\n    }\r\n\r\n    function calculateTransactionAmount(uint256 amount) internal view returns (uint256 transactionFee, uint256 toRecipient) {\r\n        transactionFee = amount.mul(_transactionFee).div(100);\r\n        toRecipient = amount.sub(transactionFee);\r\n    }\r\n\r\n    //$RXC custom balanceOf\r\n    function _getCurrentBalance(address account)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (tokenLocks[account].amount != 0) {\r\n            return\r\n                _balances[account].sub(\r\n                    getTokenLockAmount(account, block.timestamp)\r\n                );\r\n        }\r\n        return _balances[account];\r\n    }\r\n\r\n    function _takeFee(address account) private view returns (bool) {\r\n        if (_isSpecialAddress[account]) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _takeTransactionFee(address sender, uint256 transactionFee)\r\n        private\r\n    {\r\n        _balances[operationsAddress] = _balances[operationsAddress].add(transactionFee.mul(_operationsFee).div(100));\r\n        _balances[developersAddress] = _balances[developersAddress].add(transactionFee.mul(_developerFee).div(100));\r\n        _balances[marketingAddress] = _balances[marketingAddress].add(transactionFee.mul(_marketingFee).div(100));\r\n        _balances[treasuryAddress] = _balances[treasuryAddress].add(transactionFee.mul(_treasuryFee).div(100));\r\n        \r\n        emit Transfer(\r\n            sender,\r\n            operationsAddress,\r\n            transactionFee.mul(_operationsFee).div(100)\r\n        );\r\n        emit Transfer(\r\n            sender,\r\n            developersAddress,\r\n            transactionFee.mul(_developerFee).div(100)\r\n        );\r\n        emit Transfer(\r\n            sender,\r\n            marketingAddress,\r\n            transactionFee.mul(_marketingFee).div(100)\r\n        );\r\n        emit Transfer(\r\n            sender,\r\n            treasuryAddress,\r\n            transactionFee.mul(_treasuryFee).div(100)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"0 address denied\");\r\n        require(spender != address(0), \"0 address denied\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function inCaseTokensGetStuck(IBEP20 token, address to) public onlyOwner {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        token.transfer(to, balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the transaction fee rate of $RXC\r\n     */\r\n    function setTransactionFee(uint256 newTransactionFee) public onlyOwner {\r\n        require(newTransactionFee <= 20, \"Max txFee is 20\");\r\n        _transactionFee = newTransactionFee;\r\n    }\r\n\r\n    // @dev This view is to display the wallet owner's locked\\available tokens and endTime within dapp\r\n    function getLockedWalletDetails(address account)\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 currentTime = block.timestamp;\r\n        uint256 _startTime = tokenLocks[account].startTime;\r\n        uint256 _endTime = tokenLocks[account].endTime;\r\n        uint256 _totalAmount = tokenLocks[account].amount;\r\n        uint256 _lockedAmount = getTokenLockAmount(account, currentTime);\r\n        uint256 _accessibleAmount = _totalAmount - _lockedAmount;\r\n        return (\r\n            _startTime,\r\n            _endTime,\r\n            _totalAmount,\r\n            _lockedAmount,\r\n            _accessibleAmount,\r\n            currentTime\r\n        );\r\n    }\r\n\r\n    // @dev This function figures the proportion of time that has passed since the start relative to the end date and returns the proportion of tokens locked\r\n    function getTokenLockAmount(address account, uint256 currentTime)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (currentTime > tokenLocks[account].endTime) return 0;\r\n        return\r\n            (\r\n                ((tokenLocks[account].amount *\r\n                    ((tokenLocks[account].endTime - currentTime))) /\r\n                    (tokenLocks[account].endTime -\r\n                        tokenLocks[account].startTime))\r\n            );\r\n    }\r\n\r\n    // @dev allow use mint function until presale is done\r\n    function _mint(address account, uint256 amount) internal {\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    // @dev This function records the transaction to keep track of the lock and then transfers the tokens to the wallet as normal\r\n    function assignTokenLock(\r\n        address account,\r\n        uint256 _amount,\r\n        uint256 _startTime,\r\n        uint256 _endTIme,\r\n        string memory _type,\r\n        bool isInitial\r\n    ) private {\r\n        tokenLocks[account].amount = _amount;\r\n        tokenLocks[account].startTime = _startTime;\r\n        tokenLocks[account].endTime = _endTIme;\r\n        tokenLocks[account].lockType = _type;\r\n        tokenLockAddresses[_type].push(account);\r\n        if (!isInitial) {\r\n            _mint(account, _amount);\r\n        }\r\n    }\r\n\r\n    // @dev A view to access the list of addresses that have locked tokens\r\n    function getTokenLockAddresses(string memory _type)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return tokenLockAddresses[_type];\r\n    }\r\n\r\n    //@dev: addPrivateSaleVestedTokensBulk send TGE and lock remaining tokens of private sale participants\r\n    function addPrivateSaleVestedTokensBulk(\r\n        PrivateSaleOrder[] memory privateSaleParticipants\r\n    ) public onlyOwnerOrPrivateSaleOperator {\r\n        require(\r\n            privateSaleGeneratedAmount < privateSaleMaxAmount,\r\n            \"Private sale amount maxed out\"\r\n        );\r\n\r\n        uint256 startTime = block.timestamp;\r\n        uint256 endTime = startTime + (6 * 2592000);\r\n\r\n        for (uint256 i = 0; i < privateSaleParticipants.length; i++) {\r\n            require(\r\n                tokenLocks[privateSaleParticipants[i].participant].amount == 0,\r\n                \"Already have locked tokens\"\r\n            );\r\n\r\n            address participant = privateSaleParticipants[i].participant;\r\n            uint256 initialReleaseAmount = privateSaleParticipants[i]\r\n                .amount\r\n                .mul(15)\r\n                .div(100);\r\n            uint256 tokensToVest = privateSaleParticipants[i].amount -\r\n                initialReleaseAmount;\r\n\r\n            _mint(participant, initialReleaseAmount);\r\n            assignTokenLock(\r\n                participant,\r\n                tokensToVest,\r\n                startTime,\r\n                endTime,\r\n                \"private\",\r\n                false\r\n            );\r\n\r\n            privateSaleGeneratedAmount += privateSaleParticipants[i].amount;\r\n        }\r\n    }\r\n\r\n    //@dev: addCoreVestedTokensBulk cliff and lock the tokens of core wallets\r\n    function addCoreVestedTokensBulk(CoreWalletOrder[] memory coreWallets)\r\n        public\r\n        onlyOwnerOrPrivateSaleOperator\r\n    {\r\n        require(coreGeneratedAmount < coreMaxAmount, \"Core amount maxed out\");\r\n\r\n        uint256 startTime = block.timestamp + 2592000;\r\n        uint256 endTime = startTime + (12 * 2592000);\r\n\r\n        for (uint256 i = 0; i < coreWallets.length; i++) {\r\n            require(\r\n                tokenLocks[coreWallets[i].walletAddress].amount == 0,\r\n                \"Already have locked tokens\"\r\n            );\r\n\r\n            if(keccak256(abi.encodePacked(coreWallets[i].lockType)) == keccak256(abi.encodePacked(\"rxcteam\"))){\r\n                startTime = block.timestamp + (60 * 2592000); //5 years lock for rxcteam\r\n                endTime = startTime + (24 * 2592000); //after 5 years, 24 month full linear vesting will start\r\n            }\r\n\r\n            address walletAddress = coreWallets[i].walletAddress;\r\n\r\n            assignTokenLock(\r\n                walletAddress,\r\n                coreWallets[i].amount,\r\n                startTime,\r\n                endTime,\r\n                coreWallets[i].lockType,\r\n                false\r\n            );\r\n\r\n            coreGeneratedAmount += coreWallets[i].amount;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_operationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_developersAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"blacklistAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"toggleBlacklistAddress\",\"type\":\"bool\"}],\"name\":\"BlacklistAddressUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"DevelopersAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"maintenanceMode\",\"type\":\"bool\"}],\"name\":\"MaintenanceMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"MarketingAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"NewPrivateSaleOperatorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"OperationsAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"specialAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"activate\",\"type\":\"bool\"}],\"name\":\"SpecialAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"TreasuryAddressChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BP\",\"outputs\":[{\"internalType\":\"contract BPContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BPDisabledForever\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_developerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_operationsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transactionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"lockType\",\"type\":\"string\"}],\"internalType\":\"struct RxcToken.CoreWalletOrder[]\",\"name\":\"coreWallets\",\"type\":\"tuple[]\"}],\"name\":\"addCoreVestedTokensBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RxcToken.PrivateSaleOrder[]\",\"name\":\"privateSaleParticipants\",\"type\":\"tuple[]\"}],\"name\":\"addPrivateSaleVestedTokensBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowBlacklistingUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bpEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreGeneratedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLockedWalletDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"getTokenLockAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"getTokenLockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blacklistAddress\",\"type\":\"address\"}],\"name\":\"isBlacklistedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenanceMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleGeneratedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleVestingEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleVestingStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bp\",\"type\":\"address\"}],\"name\":\"setBPAddrss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blacklistAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toggleBlacklistAddress\",\"type\":\"bool\"}],\"name\":\"setBlacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBotProtectionDisableForever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setBpEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_developersAddress\",\"type\":\"address\"}],\"name\":\"setDevelopersAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_maintenanceMode\",\"type\":\"bool\"}],\"name\":\"setMaintenanceMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operationsAddress\",\"type\":\"address\"}],\"name\":\"setOperationsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_privateSaleOperatorAddress\",\"type\":\"address\"}],\"name\":\"setPrivateSaleOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTransactionFee\",\"type\":\"uint256\"}],\"name\":\"setTransactionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_specialAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"activate\",\"type\":\"bool\"}],\"name\":\"updateSpecialAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RxcToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000004c4b4000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000ecae95b0f2426b9e233a46b1ff2a2affbccc07940000000000000000000000004c83467fcbd077cae348225cbf478bba792c5d690000000000000000000000007fd746a19068df570906d2512eb4ad6bb1c4cc25000000000000000000000000ab1ed61832a72251e43b6c7df36f50a9a36cf667", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0f07dfb9c6ee6241fbabf5663ebd07701341eb3ff6ee9e80b42390ac58ea7b04"}