{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OGzClub.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface Factory {\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n}\\n\\ncontract OGzClub is ERC20, Ownable {\\n    /**\\n     * @dev These variables are grouped together to save on gas costs.\\n     */\\n    uint32 private constant POOL_NUMBER = 7;\\n    uint32 public constant MAX_BUY_TAX_RATE = 800;\\n    uint32 public constant MAX_SELL_TAX_RATE = 800;\\n\\n    // The 'totalBuyTaxRate' can reach up to the value of 'MAX_BUY_TAX_RATE'.\\n    // Since 'MAX_BUY_TAX_RATE' is a constant, the maximum value 'totalBuyTaxRate'\\n    // can take is within the limits of 'uint32'.\\n    uint32 public totalBuyTaxRate;\\n\\n    // The 'totalSellTaxRate' can reach up to the value of 'MAX_SELL_TAX_RATE'.\\n    // Since 'MAX_SELL_TAX_RATE' is a constant, the maximum value 'totalSellTaxRate'\\n    // can take is within the limits of 'uint32'.\\n    uint32 public totalSellTaxRate;\\n\\n    // These state variables are defined as uint32 but they are essentially boolean, i.e., they can only take the values 0 and 1.\\n    // Defining these variables as uint32 instead of boolean allows them to be packed together with the above 6 uint32 variables,\\n    // leading to a more gas-efficient storage layout due to Solidity's storage packing rules.\\n    uint32 private toggleReferenceFees = 0;\\n    uint32 public togglePreferredNicknames;\\n\\n    uint256 private constant INITIALIZE_SUPPLY = 118_000_000_000 ether;\\n    uint256 public isTradeOpen;\\n    uint256 public totalInitializated;\\n    uint256 public referenceRate;\\n    address public taxManager;\\n    address public pairAddress;\\n    address public constant WETH = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n    Factory public constant FACTORY =\\n        Factory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\\n    struct Pools {\\n        address poolAddress;\\n        uint32 taxRate;\\n    }\\n\\n    struct Referrers {\\n        address referrer;\\n        uint256 timestamp;\\n    }\\n\\n    struct Referrals {\\n        address referral;\\n        string nickname;\\n        uint256 timestamp;\\n        Referrers[] referees;\\n    }\\n\\n    /// @dev mapping for all buying fee pools\\n    mapping(uint256 => Pools) public buyPools;\\n    mapping(uint256 => Pools) public sellPools;\\n    mapping(address => address) internal _referrals;\\n    mapping(address => string) internal _referralNickname;\\n    mapping(uint256 => uint256) internal _toggledOffBuyPools;\\n    mapping(uint256 => uint256) internal _toggledOffSellPools;\\n    mapping(string => address) internal _nickNames;\\n    /// @dev mapping for accounts that allow nicknames\\n    mapping(address => uint256) internal _preferredNicknames;\\n    /// @dev mapping for tax-frees accounts\\n    mapping(address => uint256) public _taxFrees;\\n\\n    event RegisteredReferrence(\\n        address referral,\\n        string nickname,\\n        address referrer,\\n        uint256 timestamp\\n    );\\n    event CreatedLink(address owner, string nickName, uint256 timestamp);\\n    event BuyFeesUpdated(uint256 indexed poolId, uint256 newRate);\\n    event SellFeesUpdated(uint256 indexed poolId, uint256 newRate);\\n    event ReferenceFeeUpdated(uint256 oldRate, uint256 newFee);\\n    event ChangedPoolAddress(uint256 indexed poolId, address newAddress);\\n    event ChangedTaxManager(address oldTaxManager, address newTaxManager);\\n    event TradingEnabled(uint256 timestamp);\\n    event AddedTaxFrees(address taxFrees, bool isTaxFrees);\\n    event RemovedTaxFrees(address taxFrees, bool isTaxFrees);\\n    event AddedPreferredNickname(\\n        address preferredNickname,\\n        bool isPreferredNickname\\n    );\\n    event RemovedPreferredNickname(\\n        address preferredNickname,\\n        bool isPreferredNickname\\n    );\\n    event ToggledOffPreferredNicknames(bool isOpen);\\n    event TransferWithTaxFee(\\n        string referralNickName,\\n        address referralAddress,\\n        address from,\\n        uint256 amount,\\n        uint256 referralEarnedAmount,\\n        uint256 timestamp\\n    );\\n    event ChangedPairAddress(address oldPairAddress, address newPairAddress);\\n\\n    /** @dev Modifier to make a function callable only by the Tax Manager.\\n     * Throws if called by any account other than the Tax Manager.\\n     * @notice You must be the Tax Manager to call this.\\n     */\\n    modifier onlyTaxManager() {\\n        require(msg.sender == taxManager, \\\"You are not tax manager.\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict function access to preferred accounts for nickname creation.\\n     * @notice This modifier ensures that the function can only be accessed by preferred accounts,\\n     * or if the togglePreferredNicknames feature is turned off (equals to 0).\\n     */\\n    modifier onlyPreferredAccountCreateNickname() {\\n        require(\\n            togglePreferredNicknames == 0 ||\\n                _preferredNicknames[msg.sender] == 1,\\n            \\\"You are not preferred\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        address _multisigOwner,\\n        address _taxManager,\\n        uint256 _referenceRate,\\n        Pools[] memory _poolsData\\n    ) ERC20(\\\"OGzClub\\\", \\\"OGz\\\") {\\n        require(\\n            _poolsData.length == POOL_NUMBER,\\n            \\\"Pools datas length must be equal to 7\\\"\\n        );\\n        require(\\n            _multisigOwner != address(0) && _taxManager != address(0),\\n            \\\"Owner and tax manager address cannot equal to address 0\\\"\\n        );\\n        require(\\n            _referenceRate > 0,\\n            \\\"Reference tax rate must be greater than zero\\\"\\n        );\\n        referenceRate = _referenceRate;\\n        pairAddress = FACTORY.createPair(address(this), WETH);\\n        taxManager = _taxManager;\\n        _taxFrees[_multisigOwner] = 1;\\n        _transferOwnership(_multisigOwner);\\n        togglePreferredNicknames = 1;\\n        for (uint256 i = 0; i < _poolsData.length; ) {\\n            require(\\n                _poolsData[i].poolAddress != address(0),\\n                \\\"Pool address cannot equal to 0 address\\\"\\n            );\\n            require(\\n                _poolsData[i].taxRate > 0,\\n                \\\"Pool rate must be greater than 0\\\"\\n            );\\n            buyPools[i] = _poolsData[i];\\n            sellPools[i] = _poolsData[i];\\n            totalBuyTaxRate += _poolsData[i].taxRate;\\n            totalSellTaxRate += _poolsData[i].taxRate;\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        require(\\n            totalBuyTaxRate == MAX_BUY_TAX_RATE &&\\n                totalSellTaxRate == MAX_SELL_TAX_RATE,\\n            \\\"Total tax rate must be equal to maximum tax rate\\\"\\n        );\\n        _mint(0x5Fa5aCcFf5A2F4572d5C0FeD4f9B0714cCf06c8d, INITIALIZE_SUPPLY);\\n    }\\n\\n    /**\\n     * @dev It is used to change the pair address.\\n     * @notice Only the tax manager can change the pair address.\\n     */\\n    function changePairAddress(address newPairAddress) external onlyTaxManager {\\n        require(\\n            newPairAddress != address(0),\\n            \\\"New address cannot be 0 address\\\"\\n        );\\n        address oldPairAddress = pairAddress;\\n        pairAddress = newPairAddress;\\n        emit ChangedPairAddress(oldPairAddress, pairAddress);\\n    }\\n\\n    /**\\n     * @dev Allows the current Tax Manager to relinquish control of the contract.\\n     * It sets the tax manager address to zero, hence no more tax related actions can be performed.\\n     * @notice Only the current Tax Manager can renounce tax management.\\n     */\\n    function renounceTaxManager() external onlyTaxManager {\\n        address oldTaxManager = taxManager;\\n        taxManager = address(0);\\n        emit ChangedTaxManager(oldTaxManager, taxManager);\\n    }\\n\\n    /**\\n     * @dev Transfers the tax management to a new address.\\n     * It sets the provided address as the new tax manager.\\n     * @notice Only the current Tax Manager can transfer tax management to a new address.\\n     * @param newTaxManager The address of the new Tax Manager.\\n     */\\n    function transferTaxManager(address newTaxManager) external onlyTaxManager {\\n        require(newTaxManager != address(0), \\\"New address cannot be 0 address\\\");\\n        address oldTaxManager = taxManager;\\n        taxManager = newTaxManager;\\n        emit ChangedTaxManager(oldTaxManager, taxManager);\\n    }\\n\\n    /**\\n     * @dev Adds a list of addresses to the tax-free list.\\n     * These addresses will be exempt from taxes imposed by the contract.\\n     * @notice Only the current Tax Manager can add addresses to the tax-free list.\\n     * A maximum of 50 addresses can be added at a time.\\n     * @param taxFrees An array of addresses to be added to the tax-free list.\\n     * @return A boolean value indicating whether the operation was successful.\\n     */\\n    function addTaxFrees(\\n        address[] memory taxFrees\\n    ) external onlyTaxManager returns (bool) {\\n        require(taxFrees.length <= 50, \\\"Maximum 50 address can be added\\\");\\n        for (uint256 i = 0; i < taxFrees.length; ) {\\n            if (_taxFrees[taxFrees[i]] == 0 && taxFrees[i] != address(0)) {\\n                _taxFrees[taxFrees[i]] = 1;\\n                emit AddedTaxFrees(taxFrees[i], true);\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Removes a list of addresses from the tax-free list.\\n     * These addresses will no longer be exempt from taxes imposed by the contract.\\n     * @notice Only the current Tax Manager can remove addresses from the tax-free list.\\n     * A maximum of 50 addresses can be removed at a time.\\n     * @param taxFrees An array of addresses to be removed from the tax-free list.\\n     * @return A boolean value indicating whether the operation was successful.\\n     */\\n    function removeTaxFrees(\\n        address[] memory taxFrees\\n    ) external onlyTaxManager returns (bool) {\\n        require(taxFrees.length <= 50, \\\"Maximum 50 address can be removed\\\");\\n        for (uint256 i = 0; i < taxFrees.length; ) {\\n            if (_taxFrees[taxFrees[i]] == 1) {\\n                _taxFrees[taxFrees[i]] == 0;\\n                emit RemovedTaxFrees(taxFrees[i], false);\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Changes the address of a specific pool.\\n     * @notice This function can only be called by the current Tax Manager. It changes the\\n     * address of both the buy and sell pools at the specified pool ID.\\n     * @param poolId The ID of the pool whose address is to be changed.\\n     * @param newAddress The new address to set for the specified pool.\\n     */\\n    function changePoolAddress(\\n        uint256 poolId,\\n        address newAddress\\n    ) external onlyTaxManager {\\n        require(\\n            newAddress != address(0),\\n            \\\"New address cannot equal to 0 address\\\"\\n        );\\n        require(poolId < POOL_NUMBER, \\\"Pool id is not found.\\\");\\n        buyPools[poolId].poolAddress = newAddress;\\n        sellPools[poolId].poolAddress = newAddress;\\n        emit ChangedPoolAddress(poolId, newAddress);\\n    }\\n\\n    /**\\n     * @dev Function to add a list of preferred accounts for nickname creation.\\n     * @notice This function is used to add a list of accounts as preferred for creating nicknames.\\n     * The maximum limit is 50 accounts per transaction. Only contract owner can call this function.\\n     * @param account An array of account addresses to be marked as preferred.\\n     * @return Returns true if the operation is successful.\\n     */\\n    function addPreferredNicknames(\\n        address[] memory account\\n    ) external onlyOwner returns (bool) {\\n        require(account.length <= 50, \\\"Maximum 50 account can be added\\\");\\n        for (uint256 i = 0; i < account.length; ) {\\n            if (\\n                _preferredNicknames[account[i]] == 0 && account[i] != address(0)\\n            ) {\\n                _preferredNicknames[account[i]] = 1;\\n                emit AddedPreferredNickname(account[i], true);\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to remove a list of preferred accounts for nickname creation.\\n     * @notice This function is used to remove a list of accounts from the preferred accounts for creating nicknames.\\n     * The maximum limit is 50 accounts per transaction. Only contract owner can call this function.\\n     * @param account An array of account addresses to be removed from the list of preferred accounts.\\n     * @return Returns true if the operation is successful.\\n     */\\n    function removePreferredNicknames(\\n        address[] memory account\\n    ) external onlyOwner returns (bool) {\\n        require(account.length <= 50, \\\"Maximum 50 account can be removed\\\");\\n        for (uint256 i = 0; i < account.length; ) {\\n            if (_preferredNicknames[account[i]] == 1) {\\n                _preferredNicknames[account[i]] = 0;\\n                emit RemovedPreferredNickname(account[i], false);\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to disable the preferred nickname creation feature.\\n     * @notice This function allows the contract owner to disable the preferred nickname creation feature.\\n     * @return Returns true if the operation is successful.\\n     */\\n    function toggleOffPreferredNicknames() external onlyOwner returns (bool) {\\n        togglePreferredNicknames = 0;\\n        emit ToggledOffPreferredNicknames(true);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to check whether a specific account has the permission to create a nickname.\\n     * @notice This function checks whether the passed account has the permission to create a nickname.\\n     * If the preferred nickname feature is turned off (togglePreferredNicknames == 0), this function will return true for any account.\\n     * If the preferred nickname feature is turned on (togglePreferredNicknames != 0),\\n     * only accounts in the preferred nicknames list (_preferredNicknames[account] == 1) will return true.\\n     * @param account The address of the account to check for the create nickname permission.\\n     * @return Returns true if the account has the permission to create a nickname.\\n     */\\n    function checkCreateNicknamePermission(\\n        address account\\n    ) external view returns (bool) {\\n        return\\n            togglePreferredNicknames == 0 || _preferredNicknames[account] == 1;\\n    }\\n\\n    /**\\n     * @dev Function to disable the buy tax fee for a specific pool.\\n     * @notice This function will disable the buy tax fee for a specific pool by setting the corresponding _toggledOffBuyPools value to 1.\\n     * If the pool is already toggled off, the function will revert.\\n     * After disabling, the total buy tax rate will be updated and the pool will be deleted.\\n     * @param poolId The id of the pool to disable the buy tax fee.\\n     * @return Returns true if the operation is successful.\\n     */\\n    /*\\n    PoolIds:\\n    0: Future Plan\\n    1: Team1\\n    2: Team2\\n    3: Team3\\n    4: Liquidity Pool\\n    5: Staking\\n    6: Future Plan or Referral\\n    */\\n    function toggleOffBuyTaxFee(\\n        uint256 poolId\\n    ) external onlyTaxManager returns (bool) {\\n        require(poolId <= POOL_NUMBER, \\\"Pool id not found\\\");\\n        require(\\n            _toggledOffBuyPools[poolId] == 0,\\n            \\\"The pool is already toggled off\\\"\\n        );\\n        _toggledOffBuyPools[poolId] = 1;\\n        totalBuyTaxRate = totalBuyTaxRate - buyPools[poolId].taxRate;\\n        delete buyPools[poolId];\\n        emit BuyFeesUpdated(poolId, 0);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to disable the sell tax fee for a specific pool.\\n     * @notice This function will disable the sell tax fee for a specific pool\\n     * by setting the corresponding _toggledOffSellPools value to 1.\\n     * If the pool is already toggled off, the function will revert. After disabling,\\n     * the total sell tax rate will be updated and the pool will be deleted.\\n     * @param poolId The id of the pool to disable the sell tax fee.\\n     * @return Returns true if the operation is successful.\\n     */\\n    function toggleOffSellTaxFee(\\n        uint256 poolId\\n    ) external onlyTaxManager returns (bool) {\\n        require(poolId <= POOL_NUMBER, \\\"Pool id not found\\\");\\n        require(\\n            _toggledOffSellPools[poolId] == 0,\\n            \\\"The pool is already toggled off\\\"\\n        );\\n        _toggledOffSellPools[poolId] = 1;\\n        totalSellTaxRate = totalSellTaxRate - sellPools[poolId].taxRate;\\n        delete sellPools[poolId];\\n        emit SellFeesUpdated(poolId, 0);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to disable the reference fee.\\n     * @notice This function will disable the reference fee by setting the toggleReferenceFees value to 1.\\n     * If the reference fee is already toggled off, the function will revert.\\n     * After disabling, the reference rate will be updated to 0.\\n     * @return Returns true if the operation is successful.\\n     */\\n    function toggleOffReferenceFee() external onlyTaxManager returns (bool) {\\n        require(\\n            toggleReferenceFees == 0,\\n            \\\"Reference pool is already toggled off\\\"\\n        );\\n        toggleReferenceFees = 1;\\n        uint256 oldRate = referenceRate;\\n        referenceRate = 0;\\n        emit ReferenceFeeUpdated(oldRate, 0);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to decrease the buy tax fee of a specific pool.\\n     * @notice This function allows the tax manager to reduce the buy tax fee for a given pool.\\n     * The new fee should be greater than 0 and less than the current tax fee, otherwise, the function will revert.\\n     * This function will not work if the pool is toggled off.\\n     * @param poolId The identifier of the pool that the tax fee will be decreased for.\\n     * @param newFee The new fee that will replace the old tax fee for the given pool.\\n     * @return Returns true if the operation is successful.\\n     */\\n    function decreaseBuyTaxFee(\\n        uint256 poolId,\\n        uint32 newFee\\n    ) external onlyTaxManager returns (bool) {\\n        require(poolId <= POOL_NUMBER, \\\"Pool id not found\\\");\\n        require(\\n            _toggledOffBuyPools[poolId] == 0,\\n            \\\"The pool is already toggled off\\\"\\n        );\\n        require(\\n            newFee > 0 && newFee < buyPools[poolId].taxRate,\\n            \\\"New fee rate must be between 0 and current tax fee\\\"\\n        );\\n        totalBuyTaxRate = totalBuyTaxRate - (buyPools[poolId].taxRate - newFee);\\n        buyPools[poolId].taxRate = newFee;\\n        emit BuyFeesUpdated(poolId, newFee);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to decrease the sell tax fee of a specific pool.\\n     * @notice This function allows the tax manager to reduce the sell tax fee for a given pool.\\n     *The new fee should be greater than 0 and less than the current tax fee, otherwise, the function will revert.\\n     * This function will not work if the pool is toggled off.\\n     * @param poolId The identifier of the pool that the tax fee will be decreased for.\\n     * @param newFee The new fee that will replace the old tax fee for the given pool.\\n     * @return Returns true if the operation is successful.\\n     */\\n    function decreaseSellTaxFee(\\n        uint256 poolId,\\n        uint32 newFee\\n    ) external onlyTaxManager returns (bool) {\\n        require(poolId <= POOL_NUMBER, \\\"Pool id not found\\\");\\n        require(\\n            _toggledOffSellPools[poolId] == 0,\\n            \\\"The pool is already toggled off\\\"\\n        );\\n        require(\\n            newFee > 0 && newFee < sellPools[poolId].taxRate,\\n            \\\"New fee rate must be between 0 and current tax fee\\\"\\n        );\\n        totalSellTaxRate =\\n            totalSellTaxRate -\\n            (sellPools[poolId].taxRate - newFee);\\n        sellPools[poolId].taxRate = newFee;\\n        emit SellFeesUpdated(poolId, newFee);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to decrease the reference fee.\\n     * @notice This function allows the tax manager to reduce the reference fee.\\n     * The new fee should be greater than 0 and less than the current fee, otherwise, the function will revert.\\n     * @param newFee The new fee that will replace the old reference fee.\\n     * @return Returns true if the operation is successful.\\n     */\\n    function decreaseReferenceFee(\\n        uint256 newFee\\n    ) external onlyTaxManager returns (bool) {\\n        require(\\n            newFee > 0 && newFee < referenceRate,\\n            \\\"New fee rate must be between 0 and current fee\\\"\\n        );\\n        uint256 oldRate = referenceRate;\\n        referenceRate = newFee;\\n        emit ReferenceFeeUpdated(oldRate, newFee);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Calculates the fee amount for a given transaction amount and fee rate.\\n     * @notice This is a private function used to calculate the fee amount\\n     * based on a specific transaction amount and a fee rate.\\n     * The fee rate is a percentage value multiplied by 100 to handle it as an integer.\\n     * Therefore, it needs to be divided by 10,000 during calculation to reflect the correct fee amount.\\n     * @param amount The transaction amount for which the fee should be computed.\\n     * @param fee The fee rate used for the computation.\\n     * The fee is represented as a percentage out of 10,000 (equivalent to a basis point representation).\\n     * @return Returns the calculated fee amount.\\n     */\\n    function computeFee(\\n        uint256 amount,\\n        uint256 fee\\n    ) private pure returns (uint256) {\\n        return (amount * fee) / 10000;\\n    }\\n\\n    /**\\n     * @notice Enables trading. This function can only be called by the contract owner.\\n     * @dev Checks whether trading is already enabled. If not, it enables trading and triggers the TradingEnabled event.\\n     * @return Returns a boolean value. If the operation is successful, it returns true; otherwise, false.\\n     */\\n    function enableTrading() external onlyOwner returns (bool) {\\n        require(isTradeOpen == 0, \\\"Trade is already enabled\\\");\\n        isTradeOpen = 1;\\n        emit TradingEnabled(block.timestamp);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice This private function is used to send buy fees to different pools and referral addresses.\\n     * @dev It calculates and transfers fees for each buy pool unless the pool is toggled off.\\n     * It also computes and transfers the reference fee if reference fees are toggled on and there exists a referral for the owner.\\n     * If there's no referral or reference fees are toggled off, it computes and sends the fee to the last pool if it is not toggled off.\\n     * The function subtracts the total fee from the amount and returns the difference.\\n     * @param owner The address of the owner initiating the buy action.\\n     * @param from The address of the pair.\\n     * @param amount The amount of tokens being purchased.\\n     * @return Returns the amount after subtracting the total fee.\\n     */\\n    function sendBuyFees(\\n        address owner,\\n        address from,\\n        uint256 amount\\n    ) private returns (uint256) {\\n        uint256 totalFee = 0;\\n        for (uint256 i = 0; i < POOL_NUMBER - 1; ) {\\n            uint256 poolTaxRate = buyPools[i].taxRate;\\n            if (_toggledOffBuyPools[i] == 0) {\\n                uint256 fee = computeFee(amount, poolTaxRate);\\n                totalFee += fee;\\n                address poolAddress = buyPools[i].poolAddress;\\n                _transfer(from, poolAddress, fee);\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        address referral = _referrals[owner];\\n        if (toggleReferenceFees == 0 && referral != address(0)) {\\n            uint256 referenceFee = computeFee(amount, referenceRate);\\n            totalFee += referenceFee;\\n            _transfer(from, referral, referenceFee);\\n            emit TransferWithTaxFee(\\n                _referralNickname[referral],\\n                referral,\\n                owner,\\n                amount,\\n                referenceFee,\\n                block.timestamp\\n            );\\n        } else if (_toggledOffBuyPools[POOL_NUMBER - 1] == 0) {\\n            uint256 lastPoolFee = computeFee(\\n                amount,\\n                buyPools[POOL_NUMBER - 1].taxRate\\n            );\\n            totalFee += lastPoolFee;\\n            address lastPoolAddress = buyPools[POOL_NUMBER - 1].poolAddress;\\n            _transfer(from, lastPoolAddress, lastPoolFee);\\n        }\\n        return amount - totalFee;\\n    }\\n\\n    /**\\n     * @notice This private function is used to send sell fees to different pools and referral addresses.\\n     * @dev It calculates and transfers fees for each sell pool unless the pool is toggled off.\\n     * It also computes and transfers the reference fee if reference fees are toggled on and there exists a referral for the owner.\\n     * If there's no referral or reference fees are toggled off, it computes and sends the fee to the last pool if it is not toggled off.\\n     * The function subtracts the total fee from the amount and returns the difference.\\n     * @param owner The address of the owner initiating the sell action.\\n     * @param amount The amount of tokens being sold.\\n     * @return Returns the amount after subtracting the total fee.\\n     */\\n    function sendSellFees(\\n        address owner,\\n        uint256 amount\\n    ) private returns (uint256) {\\n        uint256 totalFee = 0;\\n        for (uint256 i = 0; i < POOL_NUMBER - 1; ) {\\n            uint256 poolTaxRate = sellPools[i].taxRate;\\n            if (_toggledOffSellPools[i] == 0) {\\n                uint256 fee = computeFee(amount, poolTaxRate);\\n                totalFee += fee;\\n                address poolAddress = sellPools[i].poolAddress;\\n                _transfer(owner, poolAddress, fee);\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        address referral = _referrals[owner];\\n        if (toggleReferenceFees == 0 && referral != address(0)) {\\n            uint256 referenceFee = computeFee(amount, referenceRate);\\n            totalFee += referenceFee;\\n            _transfer(owner, referral, referenceFee);\\n            emit TransferWithTaxFee(\\n                _referralNickname[referral],\\n                referral,\\n                owner,\\n                amount,\\n                referenceFee,\\n                block.timestamp\\n            );\\n        } else if (_toggledOffSellPools[POOL_NUMBER - 1] == 0) {\\n            uint256 lastPoolFee = computeFee(\\n                amount,\\n                sellPools[POOL_NUMBER - 1].taxRate\\n            );\\n            totalFee += lastPoolFee;\\n            address lastPoolAddress = sellPools[POOL_NUMBER - 1].poolAddress;\\n            _transfer(owner, lastPoolAddress, lastPoolFee);\\n        }\\n        return amount - totalFee;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        if (to == pairAddress && _taxFrees[from] == 0) {\\n            require(isTradeOpen == 1, \\\"Trading is not open\\\");\\n            amount = sendSellFees(from, amount);\\n        }\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        if (owner == pairAddress && _taxFrees[to] == 0) {\\n            require(isTradeOpen == 1, \\\"Trading is not open\\\");\\n            amount = sendBuyFees(to, owner, amount);\\n        }\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice This function allows eligible accounts to create a nickname.\\n     * @dev Function is restricted to accounts that satisfy the 'onlyPreferredAccountCreateNickname' modifier.\\n     * A nickname should be unique, not empty, and at most 64 characters long.\\n     * Emits a 'CreatedLink' event upon successful execution.\\n     * @param nickName The chosen nickname string.\\n     * @return Returns 'true' upon successful execution.\\n     */\\n    function createNickname(\\n        string memory nickName\\n    ) external onlyPreferredAccountCreateNickname returns (bool) {\\n        require(\\n            bytes(_referralNickname[msg.sender]).length == 0,\\n            \\\"You already have a nickname\\\"\\n        );\\n        require(\\n            bytes(nickName).length != 0 && bytes(nickName).length <= 64,\\n            \\\"Nickname must be between 1 and 64 characters\\\"\\n        );\\n        require(\\n            _nickNames[nickName] == address(0),\\n            \\\"Nickname is already taken\\\"\\n        );\\n        _nickNames[nickName] = msg.sender;\\n        _referralNickname[msg.sender] = nickName;\\n        emit CreatedLink(msg.sender, nickName, block.timestamp);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice This function returns the nickname of a given account.\\n     * @param account The address of the account for which the nickname is queried.\\n     * @return Returns the nickname string associated with the given account.\\n     */\\n    function getNickname(\\n        address account\\n    ) external view returns (string memory) {\\n        return _referralNickname[account];\\n    }\\n\\n    /**\\n     * @notice This function returns the referrer information for a given referee.\\n     * @param referee The address of the referee for which the referrer information is queried.\\n     * @return Returns a tuple containing the nickname string and address of the referrer.\\n     */\\n    function getReferrer(\\n        address referee\\n    ) external view returns (string memory, address) {\\n        address referrer = _referrals[referee];\\n        return (_referralNickname[referrer], referrer);\\n    }\\n\\n    /**\\n     * @notice This function returns the address associated with a given nickname.\\n     * @param nickname The nickname for which the associated address is queried.\\n     * @return Returns the address associated with the given nickname.\\n     */\\n    function getAddressWithNickname(\\n        string memory nickname\\n    ) external view returns (address) {\\n        return _nickNames[nickname];\\n    }\\n\\n    /**\\n     * @notice This function allows a user to add a referral using a nickname.\\n     * @param nickname The nickname of the referrer.\\n     * @return Returns true if the referral was successfully added.\\n     */\\n    function addReferral(string memory nickname) external returns (bool) {\\n        address referrer = _nickNames[nickname];\\n        bytes32 referrerNicknameHash = keccak256(\\n            abi.encodePacked(_referralNickname[referrer])\\n        );\\n        require(\\n            _referrals[referrer] != msg.sender &&\\n                _referrals[msg.sender] == address(0) &&\\n                referrerNicknameHash != keccak256(abi.encodePacked(\\\"\\\")) &&\\n                referrer != address(0) &&\\n                referrer != msg.sender,\\n            \\\"Invalid referral\\\"\\n        );\\n        _referrals[msg.sender] = referrer;\\n        emit RegisteredReferrence(\\n            referrer,\\n            nickname,\\n            msg.sender,\\n            block.timestamp\\n        );\\n        return true;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multisigOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taxManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referenceRate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"taxRate\",\"type\":\"uint32\"}],\"internalType\":\"struct OGzClub.Pools[]\",\"name\":\"_poolsData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"preferredNickname\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPreferredNickname\",\"type\":\"bool\"}],\"name\":\"AddedPreferredNickname\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taxFrees\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTaxFrees\",\"type\":\"bool\"}],\"name\":\"AddedTaxFrees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"BuyFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPairAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPairAddress\",\"type\":\"address\"}],\"name\":\"ChangedPairAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ChangedPoolAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTaxManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTaxManager\",\"type\":\"address\"}],\"name\":\"ChangedTaxManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nickName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CreatedLink\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"ReferenceFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nickname\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RegisteredReferrence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"preferredNickname\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPreferredNickname\",\"type\":\"bool\"}],\"name\":\"RemovedPreferredNickname\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taxFrees\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTaxFrees\",\"type\":\"bool\"}],\"name\":\"RemovedTaxFrees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"SellFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"ToggledOffPreferredNicknames\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referralNickName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralEarnedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransferWithTaxFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"contract Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BUY_TAX_RATE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SELL_TAX_RATE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_taxFrees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"}],\"name\":\"addPreferredNicknames\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nickname\",\"type\":\"string\"}],\"name\":\"addReferral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"taxFrees\",\"type\":\"address[]\"}],\"name\":\"addTaxFrees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"taxRate\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPairAddress\",\"type\":\"address\"}],\"name\":\"changePairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changePoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkCreateNicknamePermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nickName\",\"type\":\"string\"}],\"name\":\"createNickname\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"}],\"name\":\"decreaseBuyTaxFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"decreaseReferenceFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"}],\"name\":\"decreaseSellTaxFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nickname\",\"type\":\"string\"}],\"name\":\"getAddressWithNickname\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNickname\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"getReferrer\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradeOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referenceRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"}],\"name\":\"removePreferredNicknames\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"taxFrees\",\"type\":\"address[]\"}],\"name\":\"removeTaxFrees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceTaxManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"taxRate\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"toggleOffBuyTaxFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleOffPreferredNicknames\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleOffReferenceFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"toggleOffSellTaxFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePreferredNicknames\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyTaxRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInitializated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellTaxRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTaxManager\",\"type\":\"address\"}],\"name\":\"transferTaxManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OGzClub", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000067995134bb3e24c07c1deace1ed91a4e8c893d3400000000000000000000000067995134bb3e24c07c1deace1ed91a4e8c893d340000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000070000000000000000000000007d0492b9e74706a054b57294048ecaee7f9fffab0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000a4cb3bdef8213b9fbcaba5aca31c2de991512e530000000000000000000000000000000000000000000000000000000000000064000000000000000000000000e2ee8c63f0ee14e1f914bc7c4127aeffb62891ef00000000000000000000000000000000000000000000000000000000000000640000000000000000000000005a8cc2989c952eef71ce78ba481902d0e06540ae0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000a5e5732e9c51a85bbaeca1f022d70029f14c0d9400000000000000000000000000000000000000000000000000000000000000c80000000000000000000000009f16826911e63a7be765c8e20ebaa9c7a8ec4e49000000000000000000000000000000000000000000000000000000000000006400000000000000000000000007f847ee81604a3036eb3f2382315e67b7c836350000000000000000000000000000000000000000000000000000000000000064", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}