{"SourceCode": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n\ninterface AggregatorV3Interface {\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description()\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n\ninterface IAIRBPresale {\n    function buyTokens(\n        IERC20 _token,\n        uint256 numberOfTokens,\n        address referrer\n    ) external payable;\n\n    function claimTokens() external;\n\n    function listSupportedPaymentMethods()\n        external\n        view\n        returns (address[] memory);\n\n    function tokensAvailable(uint256 phase) external view returns (uint256);\n\n    function getCurrentPhase() external view returns (uint256);\n\n    function previewCost(\n        IERC20 paymentToken,\n        uint256 numberOfTokens\n    ) external view returns (uint256);\n}\n\n/**\n *\n *          _____   .___ __________ __________\n *         /  _  \\  |   |\\______   \\\\______   \\\n *        /  /_\\  \\ |   | |       _/ |    |  _/\n *       /    |    \\|   | |    |   \\ |    |   \\\n *       \\____|__  /|___| |____|_  / |______  /\n *               \\/              \\/         \\/\n *\n * @title AIRBPresale contract on Binance Smart Chain\n * @author InnoPlatforms - BillionAir.com\n * @notice Presale contract for BillionAir $AIRB AIRB\n *\n */\ncontract AIRBPresale is Ownable, ReentrancyGuard, IAIRBPresale {\n    using SafeERC20 for IERC20;\n\n    using Address for address payable;\n\n    IERC20 public immutable AIRB; // $AIRB BEP-20 AIRB contract\n\n    address public immutable treasury; // Treasury address\n\n    // Timestamps\n    uint256 public startTime; // Timestamp when presale starts\n\n    uint256 public endTime; // Timestamp when presale ends\n\n    // Vesting schedule\n    uint256 public vestingDuration; // Duration of vesting\n\n    // Phases, caps and data\n    uint256 public currentPhase = 0; // Current phase of presale\n\n    uint256[] public caps = new uint256[](10); // Caps for each phase (in token amount per phase)\n\n    uint256[10] public tokensSoldPerPhase; // Total number of tokens sold during presale for each phase\n\n    mapping(address => uint256) public tokensBought; // tokensBought[address] = number of tokens bought by address\n\n    mapping(address => uint256) public claimedTokens; // claimedTokens[address] = number of tokens claimed by address\n\n    // Payment methods & prices\n    uint256[10] public tokenPrices; // Token price in USD for each phase\n\n    // BEP-20 address => AggregatorV3Interface\n    mapping(address => AggregatorV3Interface) public paymentTokenToPriceFeed;\n\n    // Supported payment methods\n    address[] public supportedPaymentMethods;\n\n    // Is supported payment method\n    mapping(address => bool) public isSupportedPaymentMethod;\n\n    // Events\n    event TokensBought(\n        address indexed buyer,\n        address indexed paymentToken,\n        uint256 numberOfTokens,\n        address indexed referrer\n    );\n\n    event TokensClaimed(address indexed claimer, uint256 numberOfTokens);\n\n    /*\n        _______________  ___________________________________  _______      _____  .____     \n        \\_   _____/\\   \\/  /\\__    ___/\\_   _____/\\______   \\ \\      \\    /  _  \\ |    |    \n        |    __)_  \\     /   |    |    |    __)_  |       _/ /   |   \\  /  /_\\  \\|    |    \n        |        \\ /     \\   |    |    |        \\ |    |   \\/    |    \\/    |    \\    |___ \n        /_______  //___/\\  \\  |____|   /_______  / |____|_  /\\____|__  /\\____|__  /_______ \\\n                \\/       \\_/                   \\/         \\/         \\/         \\/        \\/\n    */\n\n    /**\n     *\n     * @notice Throws if called when presale is not active\n     * @param paymentToken the method of payment\n     * @param numberOfTokens the number of tokens to buy\n     * @param referrer  the referrer address\n     */\n    function buyTokens(\n        IERC20 paymentToken,\n        uint256 numberOfTokens,\n        address referrer\n    ) external payable whenSaleIsActive nonReentrant {\n        if (msg.value > 0) {\n            require(\n                address(paymentToken) == address(0),\n                \"Cannot have both BNB and BEP-20 payment\"\n            );\n\n            // Payment is in BNB\n            uint256 cost = getCost(paymentToken, numberOfTokens);\n            require(msg.value >= cost, \"Not enough BNB sent\");\n            _buyTokens(numberOfTokens, referrer);\n\n            (bool sent, ) = payable(treasury).call{value: cost}(\"\");\n            require(sent, \"Failed to send BNB\");\n            uint256 remainder = msg.value - cost;\n            if (remainder > 0) {\n                (sent, ) = payable(msg.sender).call{value: remainder}(\"\");\n                require(sent, \"Failed to refund extra BNB\");\n            }\n        } else {\n            // Payment is in BEP-20\n            uint256 cost = getCost(paymentToken, numberOfTokens);\n            require(\n                paymentToken.allowance(msg.sender, address(this)) >= cost,\n                \"Not enough allowance\"\n            );\n            _buyTokens(numberOfTokens, referrer);\n            paymentToken.safeTransferFrom(msg.sender, treasury, cost);\n        }\n\n        // Emit event\n        emit TokensBought(\n            msg.sender,\n            address(paymentToken),\n            numberOfTokens,\n            referrer\n        );\n    }\n\n    function _buyTokens(uint256 numberOfTokens, address referrer) internal {\n        tokensBought[msg.sender] += numberOfTokens;\n        tokensSoldPerPhase[currentPhase] += numberOfTokens;\n\n        // Check if we have to give a bonus to the referrer\n        if (referrer != address(0)) {\n            require(referrer != msg.sender, \"You cannot refer yourself\");\n            uint256 bonusTokens = (numberOfTokens * 5) / 100;\n\n            // Check bonusTokens don't exceed current cap\n            if (\n                tokensSoldPerPhase[currentPhase] + bonusTokens >\n                caps[currentPhase]\n            ) {\n                bonusTokens =\n                    caps[currentPhase] -\n                    tokensSoldPerPhase[currentPhase];\n            }\n\n            tokensBought[referrer] += bonusTokens;\n            tokensSoldPerPhase[currentPhase] += bonusTokens;\n        }\n\n        // Check if we have to move to the next phase\n        if (tokensSoldPerPhase[currentPhase] >= caps[currentPhase]) {\n            ++currentPhase;\n        }\n\n        // Check if we exceeded last phase\n        if (currentPhase >= caps.length) {\n            // Presale is now over\n            endTime = block.timestamp;\n        }\n    }\n\n    /**\n     * @notice Transfer the number of tokens that can currently be claimed by the user (if any)\n     */\n    function claimTokens() external nonReentrant {\n        require(endTime != 0, \"Presale has not ended\");\n        require(\n            tokensBought[msg.sender] > claimedTokens[msg.sender],\n            \"No unclaimed tokens available\"\n        );\n\n        uint256 elapsedTime = block.timestamp - endTime;\n        uint256 releasableTokens;\n\n        if (elapsedTime >= vestingDuration) {\n            releasableTokens = tokensBought[msg.sender]; // All tokens are releasable after vestingDuration\n        } else {\n            uint256 immediateRelease = (tokensBought[msg.sender] * 20) / 100; // 20% released immediately after presale ends\n            uint256 vestedTokens = ((tokensBought[msg.sender] -\n                immediateRelease) * elapsedTime) / vestingDuration;\n            releasableTokens = immediateRelease + vestedTokens;\n        }\n\n        uint256 tokensToClaim = releasableTokens - claimedTokens[msg.sender];\n        claimedTokens[msg.sender] += tokensToClaim;\n        AIRB.safeTransfer(msg.sender, tokensToClaim);\n\n        // Emit event\n        emit TokensClaimed(msg.sender, tokensToClaim);\n    }\n\n    /**\n     * @notice List all supported payment methods\n     */\n    function listSupportedPaymentMethods()\n        external\n        view\n        returns (address[] memory)\n    {\n        return supportedPaymentMethods;\n    }\n\n    /**\n     * @notice Get the current phase of the presale\n     * @return current phase of the presale\n     */\n    function getCurrentPhase() external view returns (uint256) {\n        if (currentPhase == 10) {\n            return 10;\n        }\n        return currentPhase + 1; // Phases start at 1 but array indexes start at 0\n    }\n\n    /**\n     * @notice Get the number of tokens available of a given phase\n     * @return number of tokens available for presale in the given phase\n     */\n    function tokensAvailable(uint256 phase) external view returns (uint256) {\n        require(phase >= 1 && phase <= 10, \"Invalid phase\");\n        uint256 phaseIndex = phase - 1; // Adjust for 0-indexed array\n\n        return caps[phaseIndex] - tokensSoldPerPhase[phaseIndex];\n    }\n\n    /**\n     * @notice Preview the estimated cost of buying a given number of tokens\n     * with a given payment method\n     * @param paymentToken the method of payment\n     * @param numberOfTokens the number of tokens to buy\n     */\n    function previewCost(\n        IERC20 paymentToken,\n        uint256 numberOfTokens\n    ) external view returns (uint256) {\n        return getCost(paymentToken, numberOfTokens);\n    }\n\n    /*\n        __________________________________________.___ _______    ________  _________\n        /   _____/\\_   _____/\\__    ___/\\__    ___/|   |\\      \\  /  _____/ /   _____/\n        \\_____  \\  |    __)_   |    |     |    |   |   |/   |   \\/   \\  ___ \\_____  \\ \n        /        \\ |        \\  |    |     |    |   |   /    |    \\    \\_\\  \\/        \\\n        /_______  //_______  /  |____|     |____|   |___\\____|__  /\\______  /_______  /\n                \\/         \\/                                   \\/        \\/        \\/ \n    */\n\n    /**\n     * @param _airb $AIRB BEP-20 AIRB contract\n     * @param _startTime Timestamp when presale starts\n     * @param _caps Total number of tokens available for presale\n     * @param _vestingDuration Duration of vesting after cliff\n     * @param _treasury Address where funds are sent\n     */\n    constructor(\n        IERC20 _airb,\n        uint256 _startTime,\n        uint256[] memory _caps,\n        uint256 _vestingDuration,\n        address _treasury\n    ) {\n        require(\n            _startTime >= block.timestamp,\n            \"Presale cannot start in the past\"\n        );\n        require(_caps.length == 10, \"Caps array must contain 10 phases\");\n\n        AIRB = _airb;\n        startTime = _startTime;\n        caps = _caps;\n        vestingDuration = _vestingDuration;\n        treasury = _treasury;\n    }\n\n    /**\n     * @notice Modifier to check if presale is active\n     */\n    modifier whenSaleIsActive() {\n        require(\n            block.timestamp >= startTime && endTime == 0,\n            \"Presale is not active\"\n        );\n        require(currentPhase < 10, \"Invalid phase\");\n        _;\n    }\n\n    /**\n     * Calculate the cost of buying a number of tokens (AIRB)\n     * @param paymentToken method of payment\n     * @param numberOfTokens number of tokens to buy\n     */\n    function getCost(\n        IERC20 paymentToken,\n        uint256 numberOfTokens\n    ) internal view returns (uint256) {\n        AggregatorV3Interface dataFeed = paymentTokenToPriceFeed[\n            address(paymentToken)\n        ];\n        require(address(dataFeed) != address(0), \"Invalid data feed\");\n        require(\n            isSupportedPaymentMethod[address(dataFeed)],\n            \"Unsupported payment method\"\n        );\n\n        (, int256 answer, , , ) = dataFeed.latestRoundData();\n        require(answer > 0, \"Answer cannot be <= 0\");\n        require(dataFeed.decimals() == 8, \"Unexpected decimals\");\n        uint256 price = uint256(answer) * 10 ** 10;\n\n        uint256 tokenPrice = tokenPrices[currentPhase]; // 10 ** 15\n        require(tokenPrice > 0, \"Invalid token price\");\n        uint256 cost = (numberOfTokens * tokenPrice) / price;\n        require(cost > 0, \"Cost cannot be zero\");\n\n        return cost;\n    }\n\n    /**\n     * @notice Set prices for each phase\n     * @param _tokenPrices Array of token prices for each phase\n     */\n    function setTokenPrices(\n        uint256[10] calldata _tokenPrices\n    ) external onlyOwner {\n        tokenPrices = _tokenPrices;\n    }\n\n    /**\n     * @notice Set a price feed for a given payment method\n     * @param paymentToken IERC20 token to set price feed for\n     * @param dataFeed  AggregatorV3Interface price feed for the token\n     */\n    function setPriceFeed(\n        address paymentToken,\n        AggregatorV3Interface dataFeed\n    ) external onlyOwner {\n        if (!isSupportedPaymentMethod[address(dataFeed)]) {\n            paymentTokenToPriceFeed[paymentToken] = dataFeed;\n            supportedPaymentMethods.push(paymentToken);\n            isSupportedPaymentMethod[address(dataFeed)] = true;\n        }\n    }\n\n    /**\n     * @notice Unset a price feed for a given payment method\n     * @param paymentToken IERC20 token to set price feed for\n     * @param dataFeed  AggregatorV3Interface price feed for the token\n     */\n    function unsetPriceFeed(\n        address paymentToken,\n        AggregatorV3Interface dataFeed\n    ) external onlyOwner {\n        isSupportedPaymentMethod[address(dataFeed)] = false;\n        paymentTokenToPriceFeed[paymentToken] = AggregatorV3Interface(\n            address(0)\n        );\n        // Create new supported payment method array without the removed payment method\n        address[] memory newSupportedPaymentMethods = new address[](\n            supportedPaymentMethods.length - 1\n        );\n        uint256 j = 0;\n        for (uint256 i = 0; i < supportedPaymentMethods.length; ++i) {\n            if (supportedPaymentMethods[i] != address(dataFeed)) {\n                newSupportedPaymentMethods[j] = supportedPaymentMethods[i];\n                ++j;\n            }\n        }\n        supportedPaymentMethods = newSupportedPaymentMethods;\n    }\n\n    /**\n     * @notice End the presale\n     */\n    function endSale() external onlyOwner {\n        require(endTime == 0, \"Presale has already ended\");\n        endTime = block.timestamp;\n\n        uint unsoldTokens = 0;\n        // Loop on each phase\n        for (uint256 i = 0; i < caps.length; ++i) {\n            // Add unsold tokens to unsoldTokens\n            unsoldTokens += caps[i] - tokensSoldPerPhase[i];\n        }\n\n        // Transfer unsold AIRB to owner\n        if (unsoldTokens > 0) {\n            AIRB.safeTransfer(treasury, unsoldTokens);\n        }\n    }\n\n    /**\n     * @notice Transfer ownership of the contract to a new owner after the presale ends\n     * @param newOwner new owner of the contract\n     */\n    function transferOwnership(address newOwner) public override onlyOwner {\n        Ownable.transferOwnership(newOwner);\n    }\n\n    /**\n     * Revert any BNB sent to the contract directly\n     */\n    receive() external payable {\n        revert();\n    }\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_airb\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_caps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AIRB\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"caps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSupportedPaymentMethod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSupportedPaymentMethods\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paymentTokenToPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"previewCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"dataFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"_tokenPrices\",\"type\":\"uint256[10]\"}],\"name\":\"setTokenPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedPaymentMethods\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"tokensAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensSoldPerPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"dataFeed\",\"type\":\"address\"}],\"name\":\"unsetPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AIRBPresale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "000000000000000000000000b6b3b930af6fa095d71876d268a89def5f3e9894000000000000000000000000000000000000000000000000000000006491bef000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000009e34000000000000000000000000009635b80893d38572f6c6bc28441421b55cf803fa000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000002116545850052128000000000000000000000000000000000000000000000000211654585005212800000000000000000000000000000000000000000000000021165458500521280000000000000000000000000000000000000000000000002116545850052128000000000000000000000000000000000000000000000000211654585005212800000000000000000000000000000000000000000000000021165458500521280000000000000000000000000000000000000000000000002116545850052128000000000000000000000000000000000000000000000000211654585005212800000000000000000000000000000000000000000000000021165458500521280000000000000000000000000000000000000000000000002116545850052128000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}