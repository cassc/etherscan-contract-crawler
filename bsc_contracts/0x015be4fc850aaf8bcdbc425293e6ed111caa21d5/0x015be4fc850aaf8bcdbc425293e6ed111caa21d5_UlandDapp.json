{"SourceCode": "//\r\n//  \u2588\u2588    \u2588\u2588 \u2588\u2588       \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588       \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\r\n//  \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588   \u2588\u2588 \u2588\u2588\u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588      \u2588\u2588 \u2588\u2588    \u2588\u2588\r\n//  \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588 \u2588\u2588  \u2588\u2588 \u2588\u2588   \u2588\u2588      \u2588\u2588 \u2588\u2588    \u2588\u2588\r\n//  \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588   \u2588\u2588 \u2588\u2588  \u2588\u2588 \u2588\u2588 \u2588\u2588   \u2588\u2588      \u2588\u2588 \u2588\u2588    \u2588\u2588\r\n//   \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588  \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\r\n//\r\n// @title dApp / uland.io\r\n// @author 57pixels@uland.io\r\n// @whitepaper https://whitepaper.uland.io/\r\n//\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.9.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.9.1\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/IUlandToken.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.4;\r\n/**\r\n * @dev Uland token Interface\r\n */\r\ninterface IUlandToken is IERC20 {\r\n\tfunction setRewardsFactor(address holder, uint256 balance) external;\r\n\r\n\tfunction addStaticReward(address recipient, uint256 amount) external;\r\n\r\n\tfunction addAirdropReward(address recipient, uint256 amount) external;\r\n\r\n\tfunction allowNftTrade(address account, bool value) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.9.1\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/IUlandNFT.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.4;\r\n\r\n//import \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\ninterface IUlandAsset {\r\n\tstruct Asset {\r\n\t\tuint256 id; // token id\r\n\t\tuint256 parentId;\r\n\t\tuint256 price;\t// Price $ULAND\r\n\t\tuint256 priceBNB;\r\n\t\tuint256 population; // Population. Rewards distributed based on population\r\n\t\tuint256 totalTax; // Accumulated tax earned through distribution\r\n\t\tuint256 assetType; // Asset type\r\n\t\tuint16 taxRate; // Asset Distribution tax rate\r\n\t\tstring tag; // tag|titleid|0|Henry, eg. Promiseland|1|Henry\r\n\t\tstring logoUrl; // Custom logo\r\n\t\tstring attributes; // bgColour|future expansion\t\t\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Uland NFT Interface\r\n */\r\ninterface IUlandNFT {\r\n\r\n\tfunction mint(uint256 tokenId, uint256 parentId, uint256 population, uint256 assetType) external;\r\n\tfunction buy(uint256 tokenId) external;\r\n\tfunction airdrop(uint256 tokenId, uint256 parentId,\tuint256 population,uint256 assetType) external;\r\n\r\n\tfunction setTokenMetadata(uint256 tokenId, uint256 assetType, uint16 taxRate,string memory tag,string memory logoUrl,string memory attributes) external;\r\n\tfunction setTokenPrice(uint256 tokenId, uint256 price, uint256 priceBNB) external;\r\n\r\n\tfunction exists(uint256 tokenId) external view returns (bool);\r\n\r\n\tfunction increaseTokenTotalTax(uint256 tokenId,\tuint256 balance) external;\r\n\tfunction getTokenDetail(uint256 tokenId) external view returns (IUlandAsset.Asset memory);\r\n\tfunction getTokenOwner(uint256 tokenId) external view returns (address);\r\n\tfunction getTotalPopulationByOwner(address _owner) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/IUniswapV2Factory.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// File contracts/IUniswapV2Pair.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File contracts/IUniswapV2Router.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/UlandVerifyAsset.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary UlandVerifyAsset {\r\n\tfunction getMessageHash(\r\n\t\tuint256 _tokenId,\r\n\t\tuint256 _amount,\r\n\t\tuint256 _validTo,\r\n\t\tuint256 _parentId,\r\n\t\tuint256 _population,\r\n\t\tuint256 _ulandreward,\r\n\t\tuint16 _payType,\r\n\t\taddress _recipient\t\t\r\n\t) internal pure returns (bytes32) {\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t_tokenId,\r\n\t\t\t\t\t_amount,\r\n\t\t\t\t\t_validTo,\r\n\t\t\t\t\t_parentId,\r\n\t\t\t\t\t_population,\r\n\t\t\t\t\t_ulandreward,\r\n\t\t\t\t\t_payType,\r\n\t\t\t\t\t_recipient\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getEthSignedMessageHash(bytes32 _messageHash)\r\n\t\tinternal\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\t/*\r\n        Signature is produced by signing a keccak256 hash with the following format:\r\n        \"\\x19Ethereum Signed Message\\n\" + len(msg) + msg\r\n        */\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t\"\\x19Ethereum Signed Message:\\n32\",\r\n\t\t\t\t\t_messageHash\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction verify(\r\n\t\taddress _signer,\r\n\t\tuint256 _tokenId,\r\n\t\tuint256 _amount,\r\n\t\tuint256 _validTo,\r\n\t\tuint256 _parentId,\r\n\t\tuint256 _population,\r\n\t\tuint256 _ulandreward,\r\n\t\tuint16 _payType,\r\n\t\taddress _recipient,\r\n\t\tbytes memory signature\r\n\t) internal pure returns (bool) {\r\n\t\tbytes32 messageHash = getMessageHash(\r\n\t\t\t_tokenId,\r\n\t\t\t_amount,\r\n\t\t\t_validTo,\r\n\t\t\t_parentId,\r\n\t\t\t_population,\r\n\t\t\t_ulandreward,\r\n\t\t\t_payType,\r\n\t\t\t_recipient\r\n\t\t);\r\n\t\tbytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\t\t\r\n\t\treturn recoverSigner(ethSignedMessageHash, signature) == _signer;\r\n\t}\r\n\r\n\tfunction verify2(\r\n\t\taddress _signer,\r\n\t\tbytes32 messageHash,\r\n\t\tbytes memory signature\r\n\t) internal pure returns (bool) {\r\n\t\tbytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\t\t\r\n\t\treturn recoverSigner(ethSignedMessageHash, signature) == _signer;\r\n\t}\r\n\r\n\tfunction verifyMeta(\r\n\t\taddress _signer,\r\n\t\tuint256 _tokenId,\r\n\t\tuint256 _validTo,\r\n\t\tuint16 _taxRate,\r\n\t\tstring memory  _str1,\r\n\t\tstring memory _str2,\r\n\t\tstring memory _str3,\r\n\t\tbytes memory signature\r\n\t) internal pure returns (bool) {\r\n\t\tbytes32 messageHash = getMessageMetaHash(\r\n\t\t\t_tokenId,\r\n\t\t\t_validTo,\r\n\t\t\t_taxRate,\r\n\t\t\t_str1,\r\n\t\t\t_str2,\r\n\t\t\t_str3\r\n\t\t);\r\n\t\tbytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\t\t\r\n\t\treturn recoverSigner(ethSignedMessageHash, signature) == _signer;\r\n\t}\r\n\r\n\tfunction getMessageMetaHash(\r\n\t\tuint256 _tokenId,\r\n\t\tuint256 _validTo,\r\n\t\tuint16 _taxRate,\r\n\t\tstring memory _str1,\r\n\t\tstring memory _str2,\r\n\t\tstring memory _str3\r\n\t) internal pure returns (bytes32) {\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t_tokenId,\r\n\t\t\t\t\t_validTo,\r\n\t\t\t\t\t_taxRate,\r\n\t\t\t\t\t_str1,\r\n\t\t\t\t\t_str2,\r\n\t\t\t\t\t_str3\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction recoverSigner(\r\n\t\tbytes32 _ethSignedMessageHash,\r\n\t\tbytes memory _signature\r\n\t) internal pure returns (address) {\r\n\t\t(bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\r\n\r\n\t\treturn ecrecover(_ethSignedMessageHash, v, r, s);\r\n\t}\r\n\r\n\tfunction splitSignature(bytes memory sig)\r\n\t\tinternal\r\n\t\tpure\r\n\t\treturns (\r\n\t\t\tbytes32 r,\r\n\t\t\tbytes32 s,\r\n\t\t\tuint8 v\r\n\t\t)\r\n\t{\r\n\t\trequire(sig.length == 65, \"invalid signature length\");\r\n\r\n\t\tassembly {\r\n\t\t\t/*\r\n            First 32 bytes stores the length of the signature\r\n\r\n            add(sig, 32) = pointer of sig + 32\r\n            effectively, skips first 32 bytes of signature\r\n\r\n            mload(p) loads next 32 bytes starting at the memory address p into memory\r\n            */\r\n\r\n\t\t\t// first 32 bytes, after the length prefix\r\n\t\t\tr := mload(add(sig, 32))\r\n\t\t\t// second 32 bytes\r\n\t\t\ts := mload(add(sig, 64))\r\n\t\t\t// final byte (first byte of the next 32 bytes)\r\n\t\t\tv := byte(0, mload(add(sig, 96)))\r\n\t\t}\r\n\r\n\t\t// implicitly return (r, s, v)\r\n\t}\r\n}\r\n\r\n\r\n// File contracts/UlandDapp.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\n// @title dApp / uland.io\r\n// @author 57pixels@uland.io\r\n// @whitepaper https://whitepaper.uland.io/\r\ncontract UlandDapp is Ownable, IUlandAsset {\r\n\tbool public ULAND_IS_AWESOME = true;\r\n\r\n\tIUniswapV2Router02 public uniswapV2Router;\r\n\taddress public uniswapV2Pair;\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\tIUlandToken public _ulandToken;\r\n\tIUlandNFT public _ulandNFT;\r\n\r\n\tuint16 public WORLDTAX = 25; // 2.5%\r\n\tuint16 public MARKETINGTAX = 25; // 2.5%\r\n\tuint16 public DEFAULT_DISTRIBUTIONTAX = 50; // 5.0%\r\n\r\n\tuint16 public REFERRALFEE1 = 50; // 5%\r\n\tuint16 public REFERRALFEE2 = 100; // 10%\r\n\tuint16 public REFERRALFEE2_MIN_TOKENS = 1;\r\n\tuint16 public SAFEMATH_PRECISION = 10000;\r\n\r\n\tuint256 public totalRefferalPayout = 0; //For this contract\r\n\r\n\taddress payable public ownerWallet;\r\n\taddress public signerAddress;\r\n\taddress public liquidityWallet;\r\n\taddress public marketingWallet;\r\n\taddress public rewardsWallet = 0x24554c414E440000000000000000000000000002; // $ULAND Internal Rewards Wallet\r\n\taddress public rewardsTrustWallet; // $ULAND Offchain Rewards Wallet\r\n\taddress public mrpWallet; // $ULAND Marketplace Reward Pool Wallet\r\n\r\n\tstring private _tokenBaseURI = \"https://api.uland.io/metadata/\";\r\n\r\n\tbool public paused = false;\r\n\r\n\tmapping(address => bool) private _isExcludedFromFees; // exclude from fees\r\n\tmapping(address => bool) public ulandContracts; // ULAND eco-system access\r\n\tmapping(string => bool) public _usedNonces;\r\n\r\n\tstruct Taxes {\r\n\t\tuint256 WORLDTAX_FEE;\r\n\t\tuint256 DISTRIBUTIONTAX_FEE;\r\n\t\tuint256 MARKETING_FEE;\r\n\t}\r\n\r\n\tmodifier onlyUland() {\r\n\t\trequire(ulandContracts[msg.sender]);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Modifier to make a function callable only when the contract is not paused.\r\n\t */\r\n\tmodifier whenNotPaused() {\r\n\t\trequire(!paused);\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\taddress router,\r\n\t\taddress ulandToken,\r\n\t\taddress _signerAddress,\r\n\t\taddress _marketingWallet,\r\n\t\taddress ulandNFT,\r\n\t\taddress _mrpWallet,\r\n\t\taddress _rewardsTrustWallet\r\n\t) {\r\n\t\t_ulandToken = IUlandToken(ulandToken);\r\n\t\townerWallet = payable(msg.sender);\r\n\t\tsignerAddress = _signerAddress;\r\n\t\tmarketingWallet = _marketingWallet;\r\n\t\tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\r\n\t\tuniswapV2Router = _uniswapV2Router;\r\n\t\tuniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(\r\n\t\t\taddress(_ulandToken),\r\n\t\t\t_uniswapV2Router.WETH()\r\n\t\t);\r\n\t\tliquidityWallet = address(_ulandToken);\r\n\t\t_ulandNFT = IUlandNFT(ulandNFT);\r\n\t\tmrpWallet = _mrpWallet;\r\n\t\trewardsTrustWallet = _rewardsTrustWallet;\r\n\r\n\t\tsetUlandContractAllow(ulandNFT, true); \r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the name of the token.\r\n\t */\r\n\tfunction name() public pure returns (string memory) {\r\n\t\treturn \"ULAND DAPP\";\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the token, usually a shorter version of the\r\n\t * name.\r\n\t */\r\n\tfunction symbol() public pure returns (string memory) {\r\n\t\treturn \"UD\";\r\n\t}\r\n\r\n\tstruct MintParams {\r\n\t\tuint256 packedData;\r\n\t\tuint256 price;\r\n\t\tuint256 validTo;\r\n\t\tuint256 rewardsFactor;\r\n\t\tuint32[] tokenIds;\r\n\t\tuint32[] populations;\r\n\t\tuint32[] parentIds;\r\n\t\tstring nonce;\r\n\t}\r\n\r\n\tfunction mint(\r\n\t\tMintParams memory params,\r\n\t\tbytes32 hash,\r\n\t\tbytes memory signature\r\n\t) external payable whenNotPaused {\r\n\t\trequire(!_usedNonces[params.nonce], \"NONCE REUSED\");\r\n\t\trequire(params.price > 0, \"NOT_FOR_SALE\");\r\n\t\trequire(block.timestamp <= params.validTo, \"EXPIRED\");\r\n\r\n\t\t(\r\n\t\t\tuint16 argPayType,\r\n\t\t\tuint16 argLiquidityPct,\r\n\t\t\tuint16 argDistributionPct,\r\n\t\t\tuint16 argNRPPct\r\n\t\t) = unpackUint256(params.packedData);\r\n\r\n\t\trequire(argPayType == 1 || argPayType == 2, \"INVALID_PAYTYPE\");\r\n\t\tfor (uint i = 0; i < params.tokenIds.length; i++) {\r\n\t\t\trequire(\r\n\t\t\t\t_ulandNFT.exists(params.tokenIds[i]) == false,\r\n\t\t\t\t\"TOKEN_EXISTS\"\r\n\t\t\t);\r\n\t\t}\r\n\t\tbytes32 _hash = keccak256(\r\n\t\t\tabi.encodePacked(\r\n\t\t\t\tparams.packedData,\r\n\t\t\t\tparams.price,\r\n\t\t\t\tparams.validTo,\r\n\t\t\t\tparams.rewardsFactor,\r\n\t\t\t\tkeccak256(abi.encodePacked(params.tokenIds)),\r\n\t\t\t\tkeccak256(abi.encodePacked(params.populations)),\r\n\t\t\t\tkeccak256(abi.encodePacked(params.parentIds)),\r\n\t\t\t\tparams.nonce\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\trequire(_hash == hash, \"INVALID HASH\");\r\n\t\trequire(\r\n\t\t\tUlandVerifyAsset.verify2(signerAddress, _hash, signature) == true,\r\n\t\t\t\"INVALIDSIG\"\r\n\t\t);\r\n\t\tuint256 swapAmount = 0;\r\n\r\n\t\tif (argPayType == 1) // BNB\r\n\t\t{\r\n\t\t\tswapAmount = handleMintTransferBNB(\r\n\t\t\t\targLiquidityPct,\r\n\t\t\t\targDistributionPct,\r\n\t\t\t\targNRPPct,\r\n\t\t\t\tparams.price\r\n\t\t\t);\r\n\t\t} else if (argPayType == 2) // $ULAND\r\n\t\t{\r\n\t\t\thandleMintTransferERC20(\r\n\t\t\t\targLiquidityPct,\r\n\t\t\t\targDistributionPct,\r\n\t\t\t\targNRPPct,\r\n\t\t\t\tparams.price\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\trevert(\"PAYTYPE\");\r\n\t\t}\r\n\r\n\t\tfor (uint i = 0; i < params.tokenIds.length; i++) {\r\n\t\t\t_ulandNFT.mint(\r\n\t\t\t\tparams.tokenIds[i],\r\n\t\t\t\tparams.parentIds[i],\r\n\t\t\t\tparams.populations[i],\r\n\t\t\t\t0\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t_usedNonces[params.nonce] = true;\r\n\t\tupdateRewards(msg.sender, params.rewardsFactor);\r\n\r\n\t\temit Notify(params.nonce, msg.sender, msg.value, swapAmount);\r\n\t}\r\n\r\n\tfunction buy(\r\n\t\tuint16 argPayType,\r\n\t\tuint256 tokenId\r\n\t) external payable whenNotPaused {\r\n\t\trequire(argPayType == 1 || argPayType == 2, \"INVALID_PAYTYPE\");\r\n\t\trequire(_ulandNFT.exists(tokenId), \"NOT_MINTED\");\r\n\r\n\t\tAsset memory asset = _ulandNFT.getTokenDetail(tokenId);\r\n\t\taddress previousOwner = _ulandNFT.getTokenOwner(tokenId);\r\n\t\taddress newOwner = msg.sender;\r\n\t\trequire(previousOwner != newOwner, \"NO_REBUY\"); //Cannot rebuy this\r\n\r\n\t\tif (argPayType == 1) {\r\n\t\t\t/// BNB\r\n\t\t\trequire(asset.priceBNB > 0, \"NOT_FOR_SALE\");\r\n\t\t\trequire(msg.value >= asset.priceBNB, \"AMOUNT_TOO_LOW\");\r\n\t\t\t_ulandNFT.buy(tokenId);\r\n\t\t\thandleBuyTransferBNB(\r\n\t\t\t\ttokenId,\r\n\t\t\t\tmsg.sender,\r\n\t\t\t\tpreviousOwner,\r\n\t\t\t\taddress(0),\r\n\t\t\t\tmsg.value\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t// $ULAND\r\n\t\t\trequire(asset.price > 0, \"NOT_FOR_SALE\");\r\n\t\t\t_ulandToken.transferFrom(msg.sender, address(this), asset.price);\r\n\t\t\t_ulandNFT.buy(tokenId);\r\n\t\t\thandleBuyTransferERC20(\r\n\t\t\t\ttokenId,\r\n\t\t\t\tasset.price,\r\n\t\t\t\tnewOwner,\r\n\t\t\t\tpreviousOwner,\r\n\t\t\t\taddress(0)\r\n\t\t\t);\r\n\t\t}\r\n\t\tupdateRewards(previousOwner, 0);\r\n\t\tupdateRewards(newOwner, 0);\r\n\t}\r\n\r\n\t/*\r\n\t * @notice Unlock payments\r\n\t */\r\n\tfunction unlock(\r\n\t\tuint16 argPayType,\r\n\t\tstring calldata trxid,\r\n\t\tuint256 amount\r\n\t) external payable whenNotPaused {\r\n\t\trequire(argPayType == 1 || argPayType == 2, \"INVALID_argPayType\");\r\n\r\n\t\t// BNB\r\n\t\tif (argPayType == 1) {\r\n\t\t\tpayable(address(marketingWallet)).transfer(msg.value);\r\n\t\t\temit Unlock(msg.sender, trxid, argPayType, msg.value);\r\n\t\t}\r\n\t\t// $ULAND\r\n\t\tif (argPayType == 2) {\r\n\t\t\t_ulandToken.transferFrom(msg.sender, marketingWallet, amount);\r\n\t\t\temit Unlock(msg.sender, trxid, argPayType, amount);\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\t * @notice NFT Giveaway to support Airdrops\r\n\t */\r\n\tfunction airdrop(\r\n\t\tuint256 tokenId,\r\n\t\tuint256 validTo,\r\n\t\tuint256 parentId,\r\n\t\tuint256 population,\r\n\t\tuint256 assetType,\r\n\t\tbytes memory signature\r\n\t) external whenNotPaused {\r\n\t\trequire(population >= 0, \"INVALID_POPULATION\");\r\n\t\trequire(block.timestamp <= validTo, \"EXPIRED\");\r\n\t\tbytes32 hash = keccak256(\r\n\t\t\tabi.encodePacked(\r\n\t\t\t\ttokenId,\r\n\t\t\t\tvalidTo,\r\n\t\t\t\tparentId,\r\n\t\t\t\tpopulation,\r\n\t\t\t\tassetType,\r\n\t\t\t\taddress(msg.sender)\r\n\t\t\t)\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tUlandVerifyAsset.verify2(signerAddress, hash, signature) == true,\r\n\t\t\t\"INVALIDSIG\"\r\n\t\t); // Invalid signature\r\n\t\t_ulandNFT.airdrop(tokenId, parentId, population, assetType);\r\n\t}\r\n\r\n\t/*\r\n\t * @notice Set token metadata\r\n\t */\r\n\tfunction setTokenMetadata(\r\n\t\tuint256 tokenId,\r\n\t\tuint256 validTo, // signature\r\n\t\tuint16 taxRate,\r\n\t\tstring memory tag,\r\n\t\tstring memory logoUrl,\r\n\t\tstring memory attributes,\r\n\t\tbytes memory signature\r\n\t) external whenNotPaused {\r\n\t\trequire(_ulandNFT.exists(tokenId), \"NOT_FOUND\");\r\n\t\taddress tokenOwner = _ulandNFT.getTokenOwner(tokenId);\r\n\t\trequire(_msgSender() == tokenOwner, \"NOT_OWNER\");\r\n\t\trequire(taxRate >= 0, \"TAXRATE_TOO_LOW\");\r\n\t\trequire(taxRate <= 75, \"TAXRATE_TOO_HIGH\");\r\n\t\trequire(block.timestamp <= validTo, \"EXPIRED\");\r\n\t\trequire(\r\n\t\t\tUlandVerifyAsset.verifyMeta(\r\n\t\t\t\tsignerAddress,\r\n\t\t\t\ttokenId,\r\n\t\t\t\tvalidTo,\r\n\t\t\t\ttaxRate,\r\n\t\t\t\ttag,\r\n\t\t\t\tlogoUrl,\r\n\t\t\t\tattributes,\r\n\t\t\t\tsignature\r\n\t\t\t) == true,\r\n\t\t\t\"INVALIDSIG\" // Invalid signature\r\n\t\t);\r\n\t\t_ulandNFT.setTokenMetadata(\r\n\t\t\ttokenId,\r\n\t\t\t0,\r\n\t\t\ttaxRate,\r\n\t\t\ttag,\r\n\t\t\tlogoUrl,\r\n\t\t\tattributes\r\n\t\t);\r\n\t}\r\n\r\n\t/*\r\n\t * @notice Set token price\r\n\t *\r\n\t * @param tokenId: Token id\r\n\t * @param price: Price (0 = not for sale)\r\n\t *\r\n\t */\r\n\tfunction setTokenPrice(\r\n\t\tuint256 tokenId,\r\n\t\tuint256 price,\r\n\t\tuint256 priceBNB\r\n\t) external whenNotPaused {\r\n\t\trequire(_ulandNFT.exists(tokenId), \"NOT_FOUND\");\r\n\t\taddress tokenOwner = _ulandNFT.getTokenOwner(tokenId);\r\n\t\trequire(_msgSender() == tokenOwner, \"NOT_OWNER\");\r\n\t\t_ulandNFT.setTokenPrice(tokenId, price, priceBNB);\r\n\t}\r\n\r\n\tfunction notifyTokenTransfer(\r\n\t\taddress seller,\r\n\t\tuint256 sellerRewardsFactor,\r\n\t\taddress buyer,\r\n\t\tuint256 buyerRewardsFactor,\r\n\t\tuint256 tokenId\r\n\t) public onlyUland {\r\n\t\trequire(tokenId > 0, \"INVALID_TOKENID\");\r\n\r\n\t\t_ulandToken.setRewardsFactor(seller, sellerRewardsFactor);\r\n\t\t_ulandToken.setRewardsFactor(buyer, buyerRewardsFactor);\r\n\t}\r\n\r\n\tfunction handleMintTransferERC20(\r\n\t\tuint16 argLiquidityPct,\r\n\t\tuint16 argDistributionPct,\r\n\t\tuint16 argNRPPct,\r\n\t\tuint256 price\r\n\t) internal {\r\n\t\t// Transfer price to contract\r\n\t\t_ulandToken.transferFrom(msg.sender, address(this), price);\r\n\r\n\t\t// Liquidity\r\n\t\tif (argLiquidityPct > 0) {\r\n\t\t\tuint256 amount = _getFeeAmount(price, argLiquidityPct);\r\n\t\t\t_ulandToken.transfer(liquidityWallet, amount);\r\n\t\t}\r\n\t\t// Distribution, Referral rewards\r\n\t\tif (argDistributionPct > 0) {\r\n\t\t\tuint256 amount = _getFeeAmount(price, argDistributionPct);\r\n\t\t\t_ulandToken.transfer(rewardsTrustWallet, amount);\r\n\t\t}\r\n\t\t// NRP Pool\r\n\t\tif (argNRPPct > 0) {\r\n\t\t\tuint256 amount = _getFeeAmount(price, argNRPPct);\r\n\t\t\t_ulandToken.transfer(mrpWallet, amount);\r\n\t\t}\r\n\t\t// Remainder Marketing, seller\r\n\t}\r\n\r\n\tfunction handleMintTransferBNB(\r\n\t\tuint16 argLiquidityPct,\r\n\t\tuint16 argDistributionPct,\r\n\t\tuint16 argNRPPct,\r\n\t\tuint256 price\r\n\t) internal returns (uint256) {\r\n\t\trequire(msg.value >= price, \"AMOUNT_TOO_LOW\"); //Bid amount too low\r\n\r\n\t\t/// Transfer to Liquidity (BNB)\r\n\t\tif (argLiquidityPct > 0) {\r\n\t\t\tuint256 liquidityAmount = _getFeeAmount(msg.value, argLiquidityPct);\r\n\t\t\tpayable(address(liquidityWallet)).transfer(liquidityAmount);\r\n\t\t}\r\n\t\t//uint32 argDistAndNRPPct = combine(argDistributionPct, argNRPPct);\r\n\t\tuint16 argDistAndNRPPct = argDistributionPct + argNRPPct;\r\n\r\n\t\t/// Rewards and NRP\r\n\t\tuint256 beforeSwapREWARDSNRP = _getFeeAmount(\r\n\t\t\tmsg.value,\r\n\t\t\targDistAndNRPPct\r\n\t\t);\r\n\r\n\t\t/// @dev ETH => $ULAND\r\n\t\t/// We only swap Rewards and NRP\r\n\t\tuint256 afterSwapTokenSum = swapExactETHForTokens(\r\n\t\t\taddress(this),\r\n\t\t\tbeforeSwapREWARDSNRP\r\n\t\t);\r\n\r\n\t\tif (afterSwapTokenSum > 0) {\r\n\r\n\t\t\t// Transfer to Rewards (Distribution Tax and Referral)\r\n\t\t\tif (argDistributionPct > 0) {\r\n\t\t\t\tuint256 conv = afterSwapTokenSum.mul(argDistributionPct).div(\r\n\t\t\t\t\targDistAndNRPPct\r\n\t\t\t\t);\r\n\t\t\t\t_ulandToken.transfer(rewardsTrustWallet, conv);\r\n\t\t\t}\r\n\r\n\t\t\t// Transfer to NRP (Natural Resource Pool)\r\n\t\t\tif (argNRPPct > 0) {\r\n\t\t\t\tuint256 conv = afterSwapTokenSum.mul(argNRPPct).div(\r\n\t\t\t\t\targDistAndNRPPct\r\n\t\t\t\t);\r\n\t\t\t\t_ulandToken.transfer(mrpWallet, conv);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn afterSwapTokenSum;\r\n\t}\r\n\r\n\t/*\r\n\t * Internal / BNB\r\n\t */\r\n\tfunction handleBuyTransferBNB(\r\n\t\tuint256 tokenId,\r\n\t\taddress newOwner,\r\n\t\taddress previousOwner,\r\n\t\taddress referral,\r\n\t\tuint256 amount\r\n\t) private {\r\n\t\tAsset memory asset = _ulandNFT.getTokenDetail(tokenId);\r\n\r\n\t\tTaxes memory tax = getTaxes(msg.value, tokenId);\r\n\r\n\t\t/// @dev Seller balance less taxes\r\n\t\t/// @dev Changed msg.value to amount\r\n\t\tuint256 sellerBalance = (amount)\r\n\t\t\t.sub(tax.WORLDTAX_FEE)\r\n\t\t\t.sub(tax.DISTRIBUTIONTAX_FEE)\r\n\t\t\t.sub(tax.MARKETING_FEE);\r\n\r\n\t\tuint256 refferalFee = 0;\r\n\r\n\t\t/// @dev (mint only): Calculate refferal fee and transfer balance to liquidity wallet\r\n\t\tif (address(previousOwner) == address(0)) {\r\n\t\t\t/// @dev Deduct refferral fee from seller balance (mints only)\r\n\t\t\trefferalFee = getReferralFee(\r\n\t\t\t\tpreviousOwner,\r\n\t\t\t\tnewOwner,\r\n\t\t\t\treferral,\r\n\t\t\t\tsellerBalance\r\n\t\t\t);\r\n\t\t\ttotalRefferalPayout = totalRefferalPayout.add(refferalFee);\r\n\t\t\tsellerBalance = sellerBalance.sub(refferalFee);\r\n\r\n\t\t\tpayable(address(liquidityWallet)).transfer(sellerBalance);\r\n\t\t\tsellerBalance = 0;\r\n\t\t}\r\n\r\n\t\t/// @dev Transfer WORLDTAX_FEE to liquidity wallet\r\n\t\tif (tax.WORLDTAX_FEE > 0) {\r\n\t\t\tpayable(address(liquidityWallet)).transfer(tax.WORLDTAX_FEE);\r\n\t\t}\r\n\r\n\t\tif (tax.MARKETING_FEE > 0) {\r\n\t\t\tpayable(address(marketingWallet)).transfer(tax.MARKETING_FEE);\r\n\t\t}\r\n\r\n\t\t/// @dev Swap balance into $ULAND\r\n\t\tuint256 beforeSwapEthBalance = sellerBalance\r\n\t\t\t.add(tax.DISTRIBUTIONTAX_FEE)\r\n\t\t\t.add(refferalFee);\r\n\r\n\t\tif (beforeSwapEthBalance > 0) {\r\n\t\t\tuint256 residualTax;\r\n\r\n\t\t\t/// @dev ETH => $ULAND\r\n\t\t\tuint256 afterSwapTokenSum = swapExactETHForTokens(\r\n\t\t\t\taddress(this),\r\n\t\t\t\tbeforeSwapEthBalance\r\n\t\t\t);\r\n\r\n\t\t\tuint256 swapPrecisionFactor = afterSwapTokenSum\r\n\t\t\t\t.mul(SAFEMATH_PRECISION)\r\n\t\t\t\t.div(beforeSwapEthBalance);\r\n\r\n\t\t\t/// @dev Transfer referral fees\r\n\t\t\tif (refferalFee > 0) {\r\n\t\t\t\tuint256 conv = swapPrecisionFactor.mul(refferalFee).div(\r\n\t\t\t\t\tSAFEMATH_PRECISION\r\n\t\t\t\t);\r\n\t\t\t\t_ulandToken.transfer(rewardsWallet, conv);\r\n\t\t\t\t_ulandToken.addStaticReward(referral, conv);\r\n\t\t\t\tafterSwapTokenSum = afterSwapTokenSum.sub(conv);\r\n\r\n\t\t\t\temit Referral(referral, tokenId, conv);\r\n\t\t\t}\r\n\r\n\t\t\t/// @dev Distribute tax to parent NFT holders\r\n\t\t\tif (tax.DISTRIBUTIONTAX_FEE > 0) {\r\n\t\t\t\tuint256 conv = swapPrecisionFactor\r\n\t\t\t\t\t.mul(tax.DISTRIBUTIONTAX_FEE)\r\n\t\t\t\t\t.div(SAFEMATH_PRECISION);\r\n\t\t\t\tresidualTax = distributeTaxes(asset.parentId, conv);\r\n\r\n\t\t\t\tafterSwapTokenSum = afterSwapTokenSum.sub(conv);\r\n\t\t\t}\r\n\r\n\t\t\t/// @dev Pay seller in $ULAND\r\n\t\t\tif (sellerBalance > 0) {\r\n\t\t\t\tuint256 conv = swapPrecisionFactor.mul(sellerBalance).div(\r\n\t\t\t\t\tSAFEMATH_PRECISION\r\n\t\t\t\t);\r\n\t\t\t\t_ulandToken.transfer(previousOwner, conv);\r\n\t\t\t}\r\n\r\n\t\t\t/// @dev In case of no parents add remaining balance to liquidity incl. margin precision difference\r\n\t\t\tif (residualTax > 0) {\r\n\t\t\t\t_ulandToken.transfer(\r\n\t\t\t\t\tliquidityWallet,\r\n\t\t\t\t\t_ulandToken.balanceOf(address(this))\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction handleBuyTransferERC20(\r\n\t\tuint256 tokenId,\r\n\t\tuint256 amount,\r\n\t\taddress newOwner,\r\n\t\taddress previousOwner,\r\n\t\taddress referral\r\n\t) private {\r\n\t\tAsset memory asset = _ulandNFT.getTokenDetail(tokenId);\r\n\r\n\t\tTaxes memory tax = getTaxes(amount, tokenId);\r\n\r\n\t\t/// @dev Seller balance less taxes\r\n\t\tuint256 sellerBalance = (amount)\r\n\t\t\t.sub(tax.WORLDTAX_FEE)\r\n\t\t\t.sub(tax.DISTRIBUTIONTAX_FEE)\r\n\t\t\t.sub(tax.MARKETING_FEE);\r\n\r\n\t\t/// @dev (mint only): Refferal fee\r\n\t\tif (address(previousOwner) == address(0)) {\r\n\t\t\t/// @dev Deduct refferral fee from seller balance (mints only)\r\n\t\t\tuint256 refferalFee = getReferralFee(\r\n\t\t\t\tpreviousOwner,\r\n\t\t\t\tnewOwner,\r\n\t\t\t\treferral,\r\n\t\t\t\tsellerBalance\r\n\t\t\t);\r\n\r\n\t\t\t//sellerBalance = sellerBalance.sub(refferalFee);\r\n\t\t\tif (refferalFee > 0) {\r\n\t\t\t\ttotalRefferalPayout = totalRefferalPayout.add(refferalFee);\r\n\t\t\t\t_ulandToken.transfer(rewardsWallet, refferalFee);\r\n\t\t\t\t_ulandToken.addStaticReward(referral, refferalFee);\r\n\t\t\t\temit Referral(referral, tokenId, refferalFee);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/// @dev Transfer WORLDTAX_FEE to liquidity wallet\r\n\t\tif (tax.WORLDTAX_FEE > 0) {\r\n\t\t\t_ulandToken.transfer(liquidityWallet, tax.WORLDTAX_FEE);\r\n\t\t}\r\n\r\n\t\tif (tax.MARKETING_FEE > 0) {\r\n\t\t\t_ulandToken.transfer(marketingWallet, tax.MARKETING_FEE);\r\n\t\t}\r\n\r\n\t\tuint256 residualTax;\r\n\t\t/// @dev Distribute tax to parent NFT holders\r\n\t\tif (tax.DISTRIBUTIONTAX_FEE > 0) {\r\n\t\t\tresidualTax = distributeTaxes(\r\n\t\t\t\tasset.parentId,\r\n\t\t\t\ttax.DISTRIBUTIONTAX_FEE\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t/// @dev Pay seller in $ULAND\r\n\r\n\t\tif (previousOwner != address(0) && sellerBalance > 0) {\r\n\t\t\t_ulandToken.transfer(previousOwner, sellerBalance);\r\n\t\t}\r\n\r\n\t\t/// @dev In case of no parents add remaining balance to liquidity\r\n\t\tif (residualTax > 0) {\r\n\t\t\t_ulandToken.transfer(\r\n\t\t\t\tliquidityWallet,\r\n\t\t\t\t_ulandToken.balanceOf(address(this))\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction updateRewards(address owner, uint256 rewardsFactor) internal {\r\n\t\tif (owner == address(0)) return;\r\n\r\n\t\trewardsFactor = rewardsFactor == 0\r\n\t\t\t? _ulandNFT.getTotalPopulationByOwner(owner)\r\n\t\t\t: rewardsFactor;\r\n\r\n\t\t_ulandToken.setRewardsFactor(owner, rewardsFactor);\r\n\t}\r\n\r\n\tfunction setUlandContractAllow(\r\n\t\taddress contractAddress,\r\n\t\tbool access\r\n\t) public onlyOwner {\r\n\t\tulandContracts[contractAddress] = access;\r\n\t\temit UlandContractAllowChange(contractAddress, access);\r\n\t}\r\n\r\n\tfunction getTaxes(\r\n\t\tuint256 balance,\r\n\t\tuint256 tokenId\r\n\t) private view returns (Taxes memory) {\r\n\t\tTaxes memory taxes;\r\n\r\n\t\tif (_isExcludedFromFees[msg.sender]) {\r\n\t\t\ttaxes.WORLDTAX_FEE = 0;\r\n\t\t\ttaxes.DISTRIBUTIONTAX_FEE = 0;\r\n\t\t\ttaxes.MARKETING_FEE = 0;\r\n\t\t} else {\r\n\t\t\tAsset memory asset = _ulandNFT.getTokenDetail(tokenId);\r\n\r\n\t\t\t// @dev Allow for custom distribution tax set individually per NFT asset\r\n\t\t\tif (asset.parentId == 0) {\r\n\t\t\t\ttaxes.DISTRIBUTIONTAX_FEE = _getFeeAmount(\r\n\t\t\t\t\tbalance,\r\n\t\t\t\t\tDEFAULT_DISTRIBUTIONTAX\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\ttaxes.DISTRIBUTIONTAX_FEE = _getFeeAmount(\r\n\t\t\t\t\tbalance,\r\n\t\t\t\t\t//assets[tokenId].taxRate\r\n\t\t\t\t\tasset.taxRate\r\n\t\t\t\t); // As set by NFT\r\n\t\t\t}\r\n\r\n\t\t\ttaxes.WORLDTAX_FEE = _getFeeAmount(balance, WORLDTAX); // 2.5%\r\n\t\t\ttaxes.MARKETING_FEE = _getFeeAmount(balance, MARKETINGTAX); // 2.5%\r\n\t\t}\r\n\t\treturn taxes;\r\n\t}\r\n\r\n\tfunction distributeTaxes(\r\n\t\tuint256 tokenId,\r\n\t\tuint256 taxes\r\n\t) private returns (uint256) {\r\n\t\tif (tokenId == 0) {\r\n\t\t\treturn taxes;\r\n\t\t}\r\n\t\tif (taxes == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tAsset memory token = _ulandNFT.getTokenDetail(tokenId);\r\n\r\n\t\tuint256 balance = taxes;\r\n\t\tif (token.parentId != 0) {\r\n\t\t\tbalance = taxes.div(2); // Split taxes\r\n\t\t}\r\n\r\n\t\taddress payee = _ulandNFT.getTokenOwner(tokenId);\r\n\r\n\t\t_ulandToken.transfer(rewardsWallet, balance);\r\n\t\t_ulandToken.addStaticReward(payee, balance);\r\n\r\n\t\t_ulandNFT.increaseTokenTotalTax(tokenId, balance);\r\n\r\n\t\tif (token.parentId != 0) {\r\n\t\t\treturn distributeTaxes(token.parentId, balance);\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tfunction getReferralFee(\r\n\t\taddress seller,\r\n\t\taddress buyer,\r\n\t\taddress referer,\r\n\t\tuint256 sellerBalance\r\n\t) internal view returns (uint256) {\r\n\t\tif (\r\n\t\t\taddress(seller) == address(0) &&\r\n\t\t\treferer != address(0) &&\r\n\t\t\tbuyer != referer\r\n\t\t) {\r\n\t\t\tif (_ulandToken.balanceOf(referer) >= REFERRALFEE2_MIN_TOKENS) {\r\n\t\t\t\treturn _getFeeAmount(sellerBalance, REFERRALFEE2);\r\n\t\t\t} else {\r\n\t\t\t\treturn _getFeeAmount(sellerBalance, REFERRALFEE1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tfunction _getFeeAmount(\r\n\t\tuint256 amount,\r\n\t\tuint16 fee\r\n\t) internal pure returns (uint256 feeAmount) {\r\n\t\tfeeAmount = (amount.mul(fee)).div(1000);\r\n\t}\r\n\r\n\tfunction swapExactETHForTokens(\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal returns (uint256) {\r\n\t\tif (amount == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = uniswapV2Router.WETH();\r\n\t\tpath[1] = address(_ulandToken);\r\n\r\n\t\tuint256[] memory amounts = uniswapV2Router.swapExactETHForTokens{\r\n\t\t\tvalue: amount\r\n\t\t}(0, path, to, block.timestamp + 150);\r\n\r\n\t\temit SwapFromEth(amount, amounts[1]);\r\n\r\n\t\treturn amounts[1];\r\n\t}\r\n\r\n\t/// @dev Withdraw funds that gets stuck in contract by accident\r\n\tfunction emergencyWithdraw() external onlyOwner {\r\n\t\tpayable(owner()).transfer(address(this).balance);\r\n\t}\r\n\r\n\t/// @dev Withdraw ULAND that gets stuck in contract by accident\r\n\tfunction emergencyWithdrawULAND() external onlyOwner {\r\n\t\t_ulandToken.transfer(owner(), _ulandToken.balanceOf(address(this)));\r\n\t}\r\n\r\n\tfunction excludeFromFees(address account) public onlyOwner {\r\n\t\tif (!_isExcludedFromFees[account]) {\r\n\t\t\t_isExcludedFromFees[account] = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\t * onlyOwner\r\n\t */\r\n\r\n\tfunction setSignerAddress(address _signerAddress) public onlyOwner {\r\n\t\tsignerAddress = _signerAddress;\r\n\t}\r\n\r\n\tfunction setLiquidityWallet(address _liquidityWallet) public onlyOwner {\r\n\t\tliquidityWallet = _liquidityWallet;\r\n\t}\r\n\r\n\tfunction setRewardsWallet(address _rewardsWallet) public onlyOwner {\r\n\t\trewardsWallet = _rewardsWallet;\r\n\t}\r\n\r\n\tfunction setRewardsTrustWallet(address _rewardsTrustWallet) public onlyOwner {\r\n\t\t_rewardsTrustWallet = _rewardsTrustWallet;\r\n\t}\r\n\r\n\tfunction setMarketingWallet(address _marketingWallet) public onlyOwner {\r\n\t\tmarketingWallet = _marketingWallet;\r\n\t}\r\n\r\n\tfunction setMRPWallet(address _mrpWallet) public onlyOwner {\r\n\t\tmrpWallet = _mrpWallet;\r\n\t}\r\n\r\n\tfunction setTrustWallet(address _rewardsTrustWallet) public onlyOwner {\r\n\t\trewardsTrustWallet = _rewardsTrustWallet;\r\n\t}\r\n\r\n\tfunction setPause(bool _paused) public onlyOwner {\r\n\t\tpaused = _paused;\r\n\t}\r\n\r\n\tfunction setTaxes(\r\n\t\tuint16 _WORLDTAX,\r\n\t\tuint16 _MARKETINGTAX,\r\n\t\tuint16 _DISTRIBUTIONTAX\r\n\t) public onlyOwner {\r\n\t\trequire(_WORLDTAX <= 75);\r\n\t\trequire(_MARKETINGTAX <= 75);\r\n\t\trequire(_DISTRIBUTIONTAX <= 75);\r\n\t\tWORLDTAX = _WORLDTAX;\r\n\t\tMARKETINGTAX = _MARKETINGTAX;\r\n\t\tDEFAULT_DISTRIBUTIONTAX = _DISTRIBUTIONTAX;\r\n\r\n\t\temit SetTaxes(WORLDTAX, MARKETINGTAX, DEFAULT_DISTRIBUTIONTAX);\r\n\t}\r\n\r\n\tfunction setReferralRates(\r\n\t\tuint16 _REFERRALFEE1,\r\n\t\tuint16 _REFERRALFEE2\r\n\t) public onlyOwner {\r\n\t\trequire(_REFERRALFEE1 >= 0 && _REFERRALFEE1 <= 200, \"_REFERRALFEE1\");\r\n\t\trequire(_REFERRALFEE2 >= 0 && _REFERRALFEE2 <= 200, \"_REFERRALFEE2\");\r\n\t\tREFERRALFEE1 = _REFERRALFEE1;\r\n\t\tREFERRALFEE2 = _REFERRALFEE2;\r\n\t}\r\n\r\n\tfunction unpackUint256(\r\n\t\tuint256 data\r\n\t) public pure returns (uint16, uint16, uint16, uint16) {\r\n\t\tuint16 a = uint16(data & 0xFFFF);\r\n\t\tuint16 b = uint16((data >> 16) & 0xFFFF);\r\n\t\tuint16 c = uint16((data >> 32) & 0xFFFF);\r\n\t\tuint16 d = uint16((data >> 48) & 0xFFFF);\r\n\r\n\t\treturn (a, b, c, d);\r\n\t}\r\n\r\n\t/*\r\n\t * Events\r\n\t */\r\n\r\n\tevent Notify(string nonce, address to, uint256 amount, uint256 swapAmount);\r\n\tevent AirdropReward(address to, uint256 amount);\r\n\tevent SetTaxes(\r\n\t\tuint256 worldTax,\r\n\t\tuint256 marketingTax,\r\n\t\tuint256 distributionTax\r\n\t);\r\n\tevent SwapFromEth(uint256 eth, uint256 token);\r\n\tevent Referral(address referrer, uint256 tokenId, uint256 amount);\r\n\tevent UlandContractAllowChange(\r\n\t\taddress indexed contractAddress,\r\n\t\tbool access\r\n\t);\r\n\tevent Unlock(\r\n\t\taddress sender,\r\n\t\tstring trxid,\r\n\t\tuint16 argPayType,\r\n\t\tuint256 amount\r\n\t);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ulandToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ulandNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mrpWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsTrustWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nonce\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"}],\"name\":\"Notify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"worldTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributionTax\",\"type\":\"uint256\"}],\"name\":\"SetTaxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"SwapFromEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"name\":\"UlandContractAllowChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"trxid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"argPayType\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_DISTRIBUTIONTAX\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETINGTAX\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRALFEE1\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRALFEE2\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRALFEE2_MIN_TOKENS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAFEMATH_PRECISION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ULAND_IS_AWESOME\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WORLDTAX\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ulandNFT\",\"outputs\":[{\"internalType\":\"contract IUlandNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ulandToken\",\"outputs\":[{\"internalType\":\"contract IUlandToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"_usedNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"population\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"argPayType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawULAND\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"packedData\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint32[]\",\"name\":\"tokenIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"populations\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"parentIds\",\"type\":\"uint32[]\"},{\"internalType\":\"string\",\"name\":\"nonce\",\"type\":\"string\"}],\"internalType\":\"struct UlandDapp.MintParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mrpWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerRewardsFactor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyerRewardsFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"notifyTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsTrustWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityWallet\",\"type\":\"address\"}],\"name\":\"setLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mrpWallet\",\"type\":\"address\"}],\"name\":\"setMRPWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_REFERRALFEE1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_REFERRALFEE2\",\"type\":\"uint16\"}],\"name\":\"setReferralRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsTrustWallet\",\"type\":\"address\"}],\"name\":\"setRewardsTrustWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsWallet\",\"type\":\"address\"}],\"name\":\"setRewardsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signerAddress\",\"type\":\"address\"}],\"name\":\"setSignerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_WORLDTAX\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_MARKETINGTAX\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_DISTRIBUTIONTAX\",\"type\":\"uint16\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validTo\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"taxRate\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"logoUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attributes\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"setTokenMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceBNB\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsTrustWallet\",\"type\":\"address\"}],\"name\":\"setTrustWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"name\":\"setUlandContractAllow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefferalPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ulandContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"argPayType\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"trxid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"unpackUint256\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "UlandDapp", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000009789df6753b7f813a1c55ed20ecf83571dfde4280000000000000000000000000a6873044d724e7445cd5a49f991e56029ba61cf0000000000000000000000003b3e40522ba700a0c2e9030431e5e7fd9af287750000000000000000000000005c6cae1919649cfcdd7ba4a539723509cffc96b1000000000000000000000000c3f5f27cb16b87b2f9e8765eeccdf964757705e00000000000000000000000004efe2e3e8439b4ab7850e0283b4958c2e7ba969a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f53b596e32099106b412845adb93aa78265c8de5eefcbb3e2f6bccef2800d0bb"}