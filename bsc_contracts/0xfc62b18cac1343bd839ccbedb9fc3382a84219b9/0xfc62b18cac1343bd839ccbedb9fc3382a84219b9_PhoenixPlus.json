{"SourceCode": "{\"IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface IERC20 {\\n\\n    function totalSupply() external view returns (uint256);\\n    \\n    function symbol() external view returns(string memory);\\n    \\n    function name() external view returns(string memory);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n    \\n    /**\\n     * @dev Returns the number of decimal places\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"IUniswapV2Router02.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\n\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"},\"Ownable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\n/**\\n * @title Owner\\n * @dev Set \\u0026 change owner\\n */\\ncontract Ownable {\\n\\n    address private owner;\\n    \\n    // event for EVM logging\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\n    \\n    // modifier to check if caller is owner\\n    modifier onlyOwner() {\\n        // If the first argument of \\u0027require\\u0027 evaluates to \\u0027false\\u0027, execution terminates and all\\n        // changes to the state and to Ether balances are reverted.\\n        // This used to consume all gas in old EVM versions, but not anymore.\\n        // It is often a good idea to use \\u0027require\\u0027 to check if functions are called correctly.\\n        // As a second argument, you can also provide an explanation about what went wrong.\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\n        _;\\n    }\\n    \\n    /**\\n     * @dev Set contract deployer as owner\\n     */\\n    constructor() {\\n        owner = msg.sender; // \\u0027msg.sender\\u0027 is sender of current call, contract deployer for a constructor\\n        emit OwnerSet(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Change owner\\n     * @param newOwner address of new owner\\n     */\\n    function changeOwner(address newOwner) public onlyOwner {\\n        emit OwnerSet(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Return owner address \\n     * @return address of owner\\n     */\\n    function getOwner() external view returns (address) {\\n        return owner;\\n    }\\n}\"},\"Pheonix+.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IUniswapV2Router02.sol\\\";\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n    uint256 private _status;\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    modifier nonReentrant() {\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n        _status = _ENTERED;\\n        _;\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\ninterface XUSDRoyalty {\\n    function getFee() external view returns (uint256);\\n    function getFeeRecipient() external view returns (address);\\n}\\n\\ninterface IMDBPlus {\\n    function mintWithBacking(uint256 numTokens, address recipient) external returns (uint256);\\n}\\n\\n/**\\n\\n    Phoenix Plus:\\n        Basically MDB+\\n        1% in and out tax\\n        No maximum holdings, but can be knocked down to a minimum value\\n        Contract can sell down holders to a minimum value, almost gamified\\n            Is it individual holders that get booted, or is it everyone at once?\\n */\\ncontract PhoenixPlus is IERC20, Ownable, ReentrancyGuard {\\n    \\n    using SafeMath for uint256;\\n\\n    // token data\\n    string private constant _name = \\\"Phoenix+\\\";\\n    string private constant _symbol = \\\"PHOENIX+\\\";\\n    uint8 private constant _decimals = 18;\\n    uint256 private constant precision = 10**18;\\n    \\n    // 1 initial supply\\n    uint256 private _totalSupply = 10**18; \\n    \\n    // balances\\n    mapping (address =\\u003e uint256) private _balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    // address -\\u003e Fee Exemption\\n    mapping ( address =\\u003e bool ) public isTransferFeeExempt;\\n\\n    // Token Activation\\n    bool public tokenActivated;\\n\\n    // Dead Wallet\\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n\\n    // MDB Plus\\n    address public constant MDBPlus = 0x9f8BB16f49393eeA4331A39B69071759e54e16ea;\\n\\n    // PCS Router\\n    IUniswapV2Router02 private router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n\\n    // Royalty Data Fetcher\\n    XUSDRoyalty private constant royaltyTracker = XUSDRoyalty(0x4b4e239342E0BEf29FccbFe662Dd30029f21F7fF);\\n\\n    // Swap Path From BNB -\\u003e BUSD\\n    address[] path;\\n\\n    // Holder list\\n    address[] public holders;\\n    mapping ( address =\\u003e uint256 ) holderIndex;\\n\\n    // Sell Down Exemptions\\n    mapping ( address =\\u003e bool ) public sellDownExempt;\\n\\n    // Fees\\n    uint256 public mintFee        = 98000;   // 2% mint fee\\n    uint256 public sellFee        = 98000;   // 2% redeem fee\\n    uint256 public transferFee    = 98000;   // 2% transfer fee\\n    uint256 public cashedOutFee   = 97000;   // 3% cashed out fee\\n    uint256 private constant feeDenominator = 10**5;\\n    \\n    // Underlying Asset Is BUSD\\n    IERC20 public constant underlying = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\\n\\n    // initialize some stuff\\n    constructor() {\\n\\n        // Fee Exempt PCS Router And Creator For Initial Distribution\\n        isTransferFeeExempt[address(router)] = true;\\n        isTransferFeeExempt[msg.sender]      = true;\\n\\n        // Swap Path For BNB -\\u003e BUSD\\n        path = new address[](2);\\n        path[0] = router.WETH();\\n        path[1] = address(underlying);\\n\\n        // allocate initial 1 token\\n        _balances[msg.sender] = _totalSupply;\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n    }\\n\\n    /** Returns the total number of tokens in existence */\\n    function totalSupply() external view override returns (uint256) { \\n        return _totalSupply; \\n    }\\n\\n    /** Returns the number of tokens owned by `account` */\\n    function balanceOf(address account) public view override returns (uint256) { \\n        return _balances[account]; \\n    }\\n\\n    /** Returns the number of tokens `spender` can transfer from `holder` */\\n    function allowance(address holder, address spender) external view override returns (uint256) { \\n        return _allowances[holder][spender]; \\n    }\\n    \\n    /** Token Name */\\n    function name() public pure override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /** Token Ticker Symbol */\\n    function symbol() public pure override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /** Tokens decimals */\\n    function decimals() public pure override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /** Approves `spender` to transfer `amount` tokens from caller */\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _allowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n  \\n    /** Transfer Function */\\n    function transfer(address recipient, uint256 amount) external override nonReentrant returns (bool) {\\n        if (recipient == msg.sender) {\\n            _sell(msg.sender, amount, msg.sender, false);\\n            return true;\\n        } else {\\n            return _transferFrom(msg.sender, recipient, amount);\\n        }\\n    }\\n\\n    /** Transfer Function */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override nonReentrant returns (bool) {\\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \\u0027Insufficient Allowance\\u0027);\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n    \\n    /** Internal Transfer */\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        // make standard checks\\n        require(recipient != address(0) \\u0026\\u0026 sender != address(0), \\\"Transfer To Zero\\\");\\n        require(amount \\u003e 0, \\\"Transfer Amt Zero\\\");\\n\\n        if (_balances[recipient] == 0) {\\n            _addHolder(recipient);\\n        }\\n\\n        // track price change\\n        uint256 oldPrice = _calculatePrice();\\n        // amount to give recipient\\n        uint256 tAmount = (isTransferFeeExempt[sender] || isTransferFeeExempt[recipient]) ? amount : amount.mul(transferFee).div(feeDenominator);\\n        // tax taken from transfer\\n        uint256 tax = amount.sub(tAmount);\\n        // subtract from sender\\n        _balances[sender] = _balances[sender].sub(amount, \\\"Insufficient Balance\\\");\\n\\n        // give reduced amount to receiver\\n        _balances[recipient] = _balances[recipient].add(tAmount);\\n\\n        // burn the tax\\n        if (tax \\u003e 0) {\\n            // Take Fee\\n            _takeFee(tax);\\n            _totalSupply = _totalSupply.sub(tax);\\n            emit Transfer(sender, address(0), tax);\\n        }\\n        \\n        if (_balances[sender] == 0) {\\n            _removeHolder(sender);\\n        }\\n\\n        // require price rises\\n        _requirePriceRises(oldPrice);\\n        // Transfer Event\\n        emit Transfer(sender, recipient, tAmount);\\n        return true;\\n    }\\n\\n    /**\\n        Mint MDB+ Tokens With The Native Token ( Smart Chain BNB )\\n        This will purchase BUSD with BNB received\\n        It will then mint tokens to `recipient` based on the number of stable coins received\\n        `minOut` should be set to avoid the Transaction being front runned\\n\\n        @param recipient Account to receive minted MDB+ Tokens\\n        @param minOut minimum amount out from BNB -\\u003e BUSD - prevents front run attacks\\n        @return received number of MDB+ tokens received\\n     */\\n    function mintWithNative(address recipient, uint256 minOut) external payable returns (uint256) {\\n        _checkGarbageCollector(address(this));\\n        _checkGarbageCollector(DEAD);\\n        return _mintWithNative(recipient, minOut);\\n    }\\n\\n\\n    /** \\n        Mint MDB+ Tokens For `recipient` By Depositing BUSD Into The Contract\\n            Requirements:\\n                Approval from the BUSD prior to purchase\\n        \\n        @param numTokens number of BUSD tokens to mint MDB+ with\\n        @param recipient Account to receive minted MDB+ tokens\\n        @return tokensMinted number of MDB+ tokens minted\\n    */\\n    function mintWithBacking(uint256 numTokens, address recipient) external nonReentrant returns (uint256) {\\n        _checkGarbageCollector(address(this));\\n        _checkGarbageCollector(DEAD);\\n        return _mintWithBacking(numTokens, recipient);\\n    }\\n\\n    /** \\n        Burns Sender\\u0027s MDB+ Tokens and redeems their value in BUSD\\n        @param tokenAmount Number of MDB+ Tokens To Redeem, Must be greater than 0\\n    */\\n    function sell(uint256 tokenAmount) external nonReentrant returns (uint256) {\\n        return _sell(msg.sender, tokenAmount, msg.sender, false);\\n    }\\n    \\n    /** \\n        Burns Sender\\u0027s MDB+ Tokens and redeems their value in BUSD for `recipient`\\n        @param tokenAmount Number of MDB+ Tokens To Redeem, Must be greater than 0\\n        @param recipient Recipient Of BUSD transfer, Must not be address(0)\\n    */\\n    function sell(uint256 tokenAmount, address recipient) external nonReentrant returns (uint256) {\\n        return _sell(msg.sender, tokenAmount, recipient, false);\\n    }\\n    \\n    /** \\n        Allows A User To Erase Their Holdings From Supply \\n        DOES NOT REDEEM UNDERLYING ASSET FOR USER\\n        @param amount Number of MDB+ Tokens To Burn\\n    */\\n    function burn(uint256 amount) external nonReentrant {\\n        // get balance of caller\\n        uint256 bal = _balances[msg.sender];\\n        require(bal \\u003e= amount \\u0026\\u0026 bal \\u003e 0, \\u0027Zero Holdings\\u0027);\\n        // Track Change In Price\\n        uint256 oldPrice = _calculatePrice();\\n        // take fee\\n        _takeFee(amount);\\n        // burn tokens from sender + supply\\n        _burn(msg.sender, amount);\\n        // require price rises\\n        _requirePriceRises(oldPrice);\\n        // Emit Call\\n        emit Burn(msg.sender, amount);\\n    }\\n\\n\\n    ///////////////////////////////////\\n    //////  INTERNAL FUNCTIONS  ///////\\n    ///////////////////////////////////\\n    \\n    /** Purchases MDB+ Token and Deposits Them in Recipient\\u0027s Address */\\n    function _mintWithNative(address recipient, uint256 minOut) internal nonReentrant returns (uint256) {        \\n        require(msg.value \\u003e 0, \\u0027Zero Value\\u0027);\\n        require(recipient != address(0), \\u0027Zero Address\\u0027);\\n        require(\\n            tokenActivated || msg.sender == this.getOwner(),\\n            \\u0027Token Not Activated\\u0027\\n        );\\n        \\n        // calculate price change\\n        uint256 oldPrice = _calculatePrice();\\n        \\n        // previous backing\\n        uint256 previousBacking = underlying.balanceOf(address(this));\\n        \\n        // swap BNB for stable\\n        uint256 received = _purchaseBUSD(minOut);\\n\\n        // if this is the first purchase, use new amount\\n        uint256 relevantBacking = previousBacking == 0 ? underlying.balanceOf(address(this)) : previousBacking;\\n\\n        // mint to recipient\\n        return _mintTo(recipient, received, relevantBacking, oldPrice);\\n    }\\n    \\n    /** Stake Tokens and Deposits MDB+ in Sender\\u0027s Address, Must Have Prior Approval For BUSD */\\n    function _mintWithBacking(uint256 numBUSD, address recipient) internal returns (uint256) {\\n        require(\\n            tokenActivated || msg.sender == this.getOwner(),\\n            \\u0027Token Not Activated\\u0027\\n        );\\n        // users token balance\\n        uint256 userTokenBalance = underlying.balanceOf(msg.sender);\\n        // ensure user has enough to send\\n        require(userTokenBalance \\u003e 0 \\u0026\\u0026 numBUSD \\u003c= userTokenBalance, \\u0027Insufficient Balance\\u0027);\\n\\n        // calculate price change\\n        uint256 oldPrice = _calculatePrice();\\n\\n        // previous backing\\n        uint256 previousBacking = underlying.balanceOf(address(this));\\n\\n        // transfer in token\\n        uint256 received = _transferIn(address(underlying), numBUSD);\\n\\n        // if this is the first purchase, use new amount\\n        uint256 relevantBacking = previousBacking == 0 ? underlying.balanceOf(address(this)) : previousBacking;\\n\\n        // Handle Minting\\n        return _mintTo(recipient, received, relevantBacking, oldPrice);\\n    }\\n    \\n    /** Burns MDB+ Tokens And Deposits BUSD Tokens into Recipients\\u0027s Address */\\n    function _sell(address seller, uint256 tokenAmount, address recipient, bool cashedOut) internal returns (uint256) {\\n        require(tokenAmount \\u003e 0 \\u0026\\u0026 _balances[seller] \\u003e= tokenAmount);\\n        require(seller != address(0) \\u0026\\u0026 recipient != address(0));\\n        \\n        // calculate price change\\n        uint256 oldPrice = _calculatePrice();\\n\\n        // fee for selling\\n        uint256 _sellFee = cashedOut ? cashedOutFee : sellFee;\\n        \\n        // tokens post fee to swap for underlying asset\\n        uint256 tokensToSwap = isTransferFeeExempt[seller] ? \\n            tokenAmount.sub(10, \\u0027Minimum Exemption\\u0027) :\\n            tokenAmount.mul(_sellFee).div(feeDenominator);\\n\\n        // value of taxed tokens\\n        uint256 amountUnderlyingAsset = amountOut(tokensToSwap);\\n\\n        // Take Fee\\n        if (!isTransferFeeExempt[msg.sender]) {\\n            uint fee = tokenAmount.sub(tokensToSwap);\\n            _takeFee(fee);\\n        }\\n\\n        // burn from sender + supply \\n        _burn(seller, tokenAmount);\\n\\n        // send Tokens to Seller\\n        if (cashedOut) {\\n            underlying.approve(MDBPlus, amountUnderlyingAsset);\\n            IMDBPlus(MDBPlus).mintWithBacking(amountUnderlyingAsset, recipient);\\n        } else {\\n            require(\\n                underlying.transfer(recipient, amountUnderlyingAsset), \\n                \\u0027Underlying Transfer Failure\\u0027\\n            );\\n        }\\n\\n        // require price rises\\n        _requirePriceRises(oldPrice);\\n        // Differentiate Sell\\n        emit Redeemed(seller, tokenAmount, amountUnderlyingAsset);\\n        // return token redeemed and amount underlying\\n        return amountUnderlyingAsset;\\n    }\\n\\n    /** Handles Minting Logic To Create New MDB+ */\\n    function _mintTo(address recipient, uint256 received, uint256 totalBacking, uint256 oldPrice) private returns(uint256) {\\n        \\n        // find the number of tokens we should mint to keep up with the current price\\n        uint256 calculatedSupply = _totalSupply == 0 ? 10**18 : _totalSupply;\\n        uint256 tokensToMintNoTax = calculatedSupply.mul(received).div(totalBacking);\\n        \\n        // apply fee to minted tokens to inflate price relative to total supply\\n        uint256 tokensToMint = isTransferFeeExempt[msg.sender] ? \\n                tokensToMintNoTax.sub(10, \\u0027Minimum Exemption\\u0027) :\\n                tokensToMintNoTax.mul(mintFee).div(feeDenominator);\\n        require(tokensToMint \\u003e 0, \\u0027Zero Amount\\u0027);\\n        \\n        // mint to Buyer\\n        _mint(recipient, tokensToMint);\\n\\n        // apply fee to tax taken\\n        if (!isTransferFeeExempt[msg.sender]) {\\n            uint fee = tokensToMintNoTax.sub(tokensToMint);\\n            _takeFee(fee);\\n        }\\n\\n        // require price rises\\n        _requirePriceRises(oldPrice);\\n        // differentiate purchase\\n        emit Minted(recipient, tokensToMint);\\n        return tokensToMint;\\n    }\\n\\n    /** Takes Fee */\\n    function _takeFee(uint mFee) internal {\\n        (uint fee, address feeRecipient) = getFeeAndRecipient();\\n        if (fee \\u003e 0) {\\n            uint fFee = mFee.mul(fee).div(100);\\n            uint bFee = amountOut(fFee);\\n            if (bFee \\u003e 0 \\u0026\\u0026 feeRecipient != address(0)) {\\n                underlying.transfer(feeRecipient, bFee);\\n            }\\n        }\\n    }\\n\\n    /** Swaps BNB for BUSD, must get at least `minOut` BUSD back from swap to be successful */\\n    function _purchaseBUSD(uint256 minOut) internal returns (uint256) {\\n\\n        // previous amount of Tokens before we received any\\n        uint256 prevTokenAmount = underlying.balanceOf(address(this));\\n\\n        // swap BNB For stable of choice\\n        router.swapExactETHForTokens{value: address(this).balance}(minOut, path, address(this), block.timestamp + 300);\\n\\n        // amount after swap\\n        uint256 currentTokenAmount = underlying.balanceOf(address(this));\\n        require(currentTokenAmount \\u003e prevTokenAmount);\\n        return currentTokenAmount - prevTokenAmount;\\n    }\\n\\n    /** Requires The Price Of MDB+ To Rise For The Transaction To Conclude */\\n    function _requirePriceRises(uint256 oldPrice) internal {\\n        // Calculate Price After Transaction\\n        uint256 newPrice = _calculatePrice();\\n        // Require Current Price \\u003e= Last Price\\n        require(newPrice \\u003e= oldPrice, \\u0027Price Cannot Fall\\u0027);\\n        // Emit The Price Change\\n        emit PriceChange(oldPrice, newPrice, _totalSupply);\\n    }\\n\\n    /** Transfers `desiredAmount` of `token` in and verifies the transaction success */\\n    function _transferIn(address token, uint256 desiredAmount) internal returns (uint256) {\\n        uint256 balBefore = IERC20(token).balanceOf(address(this));\\n        bool s = IERC20(token).transferFrom(msg.sender, address(this), desiredAmount);\\n        uint256 received = IERC20(token).balanceOf(address(this)) - balBefore;\\n        require(s \\u0026\\u0026 received \\u003e 0 \\u0026\\u0026 received \\u003c= desiredAmount);\\n        return received;\\n    }\\n    \\n    /** Mints Tokens to the Receivers Address */\\n    function _mint(address receiver, uint amount) private {\\n        if (_balances[receiver] == 0) {\\n            _addHolder(receiver);\\n        }\\n\\n        _balances[receiver] = _balances[receiver].add(amount);\\n        _totalSupply = _totalSupply.add(amount);\\n        emit Transfer(address(0), receiver, amount);\\n    }\\n    \\n    /** Burns `amount` of tokens from `account` */\\n    function _burn(address account, uint amount) private {\\n        _balances[account] = _balances[account].sub(amount, \\u0027Insufficient Balance\\u0027);\\n        _totalSupply = _totalSupply.sub(amount, \\u0027Negative Supply\\u0027);\\n        emit Transfer(account, address(0), amount);\\n\\n        if (_balances[account] == 0) {\\n            _removeHolder(account);\\n        }\\n    }\\n\\n    /** Make Sure there\\u0027s no Native Tokens in contract */\\n    function _checkGarbageCollector(address burnLocation) internal {\\n        uint256 bal = _balances[burnLocation];\\n        if (bal \\u003e 10**3) {\\n            // Track Change In Price\\n            uint256 oldPrice = _calculatePrice();\\n            // take fee\\n            _takeFee(bal);\\n            // burn amount\\n            _burn(burnLocation, bal);\\n            // Emit Collection\\n            emit GarbageCollected(bal);\\n            // Emit Price Difference\\n            emit PriceChange(oldPrice, _calculatePrice(), _totalSupply);\\n        }\\n    }\\n\\n    function _addHolder(address holder) internal {\\n\\n        holderIndex[holder] = holders.length;\\n        holders.push(holder);\\n    }\\n\\n    function _removeHolder(address holder) internal {\\n\\n        uint256 rmIndex = holderIndex[holder];\\n        address lastHolder = holders[holders.length - 1];\\n\\n        if (holders[holderIndex[holder]] != holder) {\\n            return;\\n        }\\n\\n        holderIndex[lastHolder] = rmIndex;\\n        holders[rmIndex] = lastHolder;\\n        holders.pop();\\n        delete holderIndex[holder];\\n    }\\n    \\n    ///////////////////////////////////\\n    //////    READ FUNCTIONS    ///////\\n    ///////////////////////////////////\\n    \\n\\n    /** Price Of MDB+ in BUSD With 18 Points Of Precision */\\n    function calculatePrice() external view returns (uint256) {\\n        return _calculatePrice();\\n    }\\n    \\n    /** Returns the Current Price of 1 Token */\\n    function _calculatePrice() internal view returns (uint256) {\\n        uint256 totalShares = _totalSupply == 0 ? 1 : _totalSupply;\\n        uint256 backingValue = underlying.balanceOf(address(this));\\n        return (backingValue.mul(precision)).div(totalShares);\\n    }\\n\\n    /**\\n        Amount Of Underlying To Receive For `numTokens` of MDB+\\n     */\\n    function amountOut(uint256 numTokens) public view returns (uint256) {\\n        return _calculatePrice().mul(numTokens).div(precision);\\n    }\\n\\n    /** Returns the value of `holder`\\u0027s holdings */\\n    function getValueOfHoldings(address holder) public view returns(uint256) {\\n        return amountOut(_balances[holder]);\\n    }\\n\\n    /** Returns Royalty Fee And Fee Recipient For Taxes */\\n    function getFeeAndRecipient() public view returns (uint256, address) {\\n        uint fee = royaltyTracker.getFee();\\n        address recipient = royaltyTracker.getFeeRecipient();\\n        return (fee, recipient);\\n    }\\n\\n    function getHolders() public view returns (address[] memory) {\\n        return holders;\\n    }\\n    \\n    ///////////////////////////////////\\n    //////   OWNER FUNCTIONS    ///////\\n    ///////////////////////////////////\\n\\n    function setSellDownExempt(address account, bool isExempt) external onlyOwner {\\n        sellDownExempt[account] = isExempt;\\n    }\\n\\n    /** Activates Token, Enabling Trading For All */\\n    function activateToken() external onlyOwner {\\n        tokenActivated = true;\\n        emit TokenActivated(block.number);\\n    }\\n\\n    /** Updates The Address Of The Resource Collector */\\n    function upgradeRouter(address newRouter) external onlyOwner {\\n        require(newRouter != address(0));\\n        isTransferFeeExempt[newRouter] = true;\\n        router = IUniswapV2Router02(newRouter);\\n        emit SetRouter(newRouter);\\n    }\\n\\n    /** Withdraws Tokens Incorrectly Sent To MDB+ */\\n    function withdrawNonStableToken(IERC20 token) external onlyOwner {\\n        require(address(token) != address(underlying), \\u0027Cannot Withdraw Underlying Asset\\u0027);\\n        require(address(token) != address(0), \\u0027Zero Address\\u0027);\\n        token.transfer(msg.sender, token.balanceOf(address(this)));\\n    }\\n\\n    /** \\n        Sells Tokens On Behalf Of List Of Users\\n     */\\n    function sellDownAllAccounts() external nonReentrant onlyOwner {\\n        uint len = holders.length;\\n        for (uint i = 0; i \\u003c len;) {\\n            _sellDownAccount(holders[i]);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /** \\n        Sells Tokens On Behalf Of List Of Users\\n     */\\n    function sellDownAccounts(address[] calldata accounts) external nonReentrant onlyOwner {\\n        uint len = accounts.length;\\n        for (uint i = 0; i \\u003c len;) {\\n            _sellDownAccount(accounts[i]);\\n            unchecked { ++i; }\\n        }\\n    }\\n    \\n    function _sellDownAccount(address account) internal {\\n        require(account != address(0), \\u0027Zero Address\\u0027);\\n        if (_balances[account] == 0 || sellDownExempt[account]) {\\n            return;\\n        }\\n \\n        _sell(\\n            account,\\n            _balances[account], \\n            account,\\n            true\\n        );\\n    }\\n\\n    /** \\n        Sets Mint, Transfer, Sell Fee\\n        Must Be Within Bounds ( Between 0% - 2% ) \\n    */\\n    function setFees(uint256 _mintFee, uint256 _transferFee, uint256 _sellFee, uint256 _cashedOutFee) external onlyOwner {\\n        require(_mintFee \\u003e= 96000);       // capped at 4% fee\\n        require(_transferFee \\u003e= 96000);   // capped at 4% fee\\n        require(_sellFee \\u003e= 96000);       // capped at 4% fee\\n        require(_cashedOutFee \\u003e= 96000);  // capped at 4% fee\\n        \\n        mintFee = _mintFee;\\n        transferFee = _transferFee;\\n        sellFee = _sellFee;\\n        cashedOutFee = _cashedOutFee;\\n        emit SetFees(_mintFee, _transferFee, _sellFee, _cashedOutFee);\\n    }\\n    \\n    /** Excludes Contract From Transfer Fees */\\n    function setPermissions(address Contract, bool transferFeeExempt) external onlyOwner {\\n        require(Contract != address(0), \\u0027Zero Address\\u0027);\\n        isTransferFeeExempt[Contract] = transferFeeExempt;\\n        emit SetPermissions(Contract, transferFeeExempt);\\n    }\\n    \\n    /** Mint Tokens to Buyer */\\n    receive() external payable {\\n        _mintWithNative(msg.sender, 0);\\n        _checkGarbageCollector(address(this));\\n        _checkGarbageCollector(DEAD);\\n    }\\n    \\n    \\n    ///////////////////////////////////\\n    //////        EVENTS        ///////\\n    ///////////////////////////////////\\n    \\n    // Data Tracking\\n    event TokenActivated(uint blockNo);\\n    event PriceChange(uint256 previousPrice, uint256 currentPrice, uint256 totalSupply);\\n\\n    // Balance Tracking\\n    event Minted(address recipient, uint256 numTokens);\\n    event GarbageCollected(uint256 amountTokensErased);\\n    event Burn(address from, uint256 amountTokensErased);\\n    event Redeemed(address seller, uint256 amountMDB, uint256 amountBUSD);\\n\\n    // Upgradable Contract Tracking\\n    event SetRouter(address newRouter);\\n\\n    // Governance Tracking\\n    event SetPermissions(address Contract, bool feeExempt);\\n    event SetFees(uint mintFee, uint transferFee, uint sellFee, uint256 cashedOutFee);\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokensErased\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokensErased\",\"type\":\"uint256\"}],\"name\":\"GarbageCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"PriceChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMDB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBUSD\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashedOutFee\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"feeExempt\",\"type\":\"bool\"}],\"name\":\"SetPermissions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"SetRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"}],\"name\":\"TokenActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MDBPlus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"amountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashedOutFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeAndRecipient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getValueOfHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTransferFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mintWithBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"mintWithNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"sellDownAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDownAllAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellDownExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cashedOutFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"transferFeeExempt\",\"type\":\"bool\"}],\"name\":\"setPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"setSellDownExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"upgradeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawNonStableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PhoenixPlus", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b0b3d7becd5ccef53fcbc615bec6a4bad5b81c0e275446bd2e93eff8f50ddacc"}