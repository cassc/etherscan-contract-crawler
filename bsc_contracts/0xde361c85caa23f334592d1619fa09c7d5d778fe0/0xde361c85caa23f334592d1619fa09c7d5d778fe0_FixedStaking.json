{"SourceCode": "{\"Fixed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// last update: 18-03-22\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./ownable.sol\\\";\\r\\nimport \\\"./launchpad.sol\\\";\\r\\nimport \\\"./idoToken.sol\\\";\\r\\n\\r\\ncontract FixedStaking is Ownable {\\r\\n    struct UserStake {\\r\\n        address user;\\r\\n        uint256 amount;\\r\\n        uint64 stakeTime;\\r\\n        uint64 lockedfor;\\r\\n        bool unstakecomp;\\r\\n        uint256 lastClaimed;\\r\\n    }\\r\\n    UserStake[] userStake; // Can make this public to unpublic\\r\\n    address _owner;\\r\\n    uint64 public lockperiod = 30 days; // change the days eg. 90 days; 180 days; 365 days;\\r\\n    IERC20 public stakedToken; // Address to add while deploying contract\\r\\n    IERC20 public rewardToken; // Address to add while deploying contract\\r\\n    address public launchpadAddress; // Address will be updated by the owner of launchpad\\r\\n    IERC20 public idoToken; // Address to add while deploying contract\\r\\n    uint256 public totalStaked;\\r\\n    uint256 public maxStakingAmount = 1000000 * 1e18;\\r\\n    uint256 public aprPercent = 1000000000000000000; // Update by the owner\\r\\n    uint256 public minStake = 0; // Update by the owner\\r\\n    uint256 public maxStake = 100000000000 * 1e18 * 1e18; // Update by the owner\\r\\n    uint256 public idoMulti = 1000000000000000000; // Update by the owner\\r\\n    uint256 per = 1000000000000000000;\\r\\n    uint256 public contractEnd = 100000000000000 * 1e18 * 1e18; // Update by the owner\\r\\n    mapping(IERC20 =\\u003e uint256) public totalRewardTokens;\\r\\n\\r\\n    // Fees and Penalty\\r\\n    uint256 public stakeFeePercent = 0;\\r\\n    uint256 public unStakeFeePercent = 0;\\r\\n    uint256 public collectedFees;\\r\\n    uint256 public collectedPenalty;\\r\\n    uint256 public penaltyPercent = 0;\\r\\n\\r\\n    mapping(address =\\u003e uint256) public Userstaked;\\r\\n    mapping(address =\\u003e uint256) public idoBalance;\\r\\n    mapping(address =\\u003e uint256) public idoTransfer;\\r\\n    mapping(address =\\u003e uint256) public pendingRewards;\\r\\n    mapping(address =\\u003e bool) public blacklistedUsers;\\r\\n\\r\\n    constructor(\\r\\n        IERC20 _rewardToken,\\r\\n        IERC20 _stakedToken,\\r\\n        IERC20 _idoToken,\\r\\n        address _launchpadAddress\\r\\n    ) {\\r\\n        rewardToken = _rewardToken;\\r\\n        stakedToken = _stakedToken;\\r\\n        idoToken = _idoToken;\\r\\n        launchpadAddress = _launchpadAddress;\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    // Staking Fucntion for the user\\r\\n    function stake(uint256 _amount) external {\\r\\n        address _user = msg.sender;\\r\\n        require(blacklistedUsers[_user] == false,\\\"You don\\u0027t have the permission to access this contract!\\\");\\r\\n        if (contractEnd != 0) {\\r\\n            require(contractEnd \\u003e block.timestamp, \\\"Staking has been Stop\\\");\\r\\n        }\\r\\n        require(\\r\\n            minStake \\u003c= _amount + Userstaked[_user] \\u0026\\u0026 maxStake \\u003e= _amount + Userstaked[_user],\\r\\n            \\\"Could not stake this amount\\\"\\r\\n        );\\r\\n        uint256 initialAmount = _amount;\\r\\n        \\r\\n        if (stakeFeePercent \\u003e 0) {\\r\\n            uint256 fee = (_amount * stakeFeePercent) / 100000000000000000000;\\r\\n            _amount = _amount - fee;\\r\\n            collectedFees = collectedFees + fee;\\r\\n        }\\r\\n        require(_amount + totalStaked \\u003c= maxStakingAmount, \\\"Max staking limit for the contract is touched\\\");\\r\\n        stakedToken.transferFrom(_user, address(this), initialAmount);\\r\\n        uint256 idoCount = (_amount * idoMulti) / 1000000000000000000;\\r\\n        userStake.push(\\r\\n            UserStake(\\r\\n                _user,\\r\\n                _amount,\\r\\n                uint64(block.timestamp),\\r\\n                lockperiod,\\r\\n                false,\\r\\n                uint64(block.timestamp)\\r\\n            )\\r\\n        );\\r\\n        \\r\\n        Userstaked[_user] = Userstaked[_user] + _amount;\\r\\n        idoBalance[_user] = idoBalance[_user] + (idoCount);\\r\\n        IDO(address(idoToken)).mint(address(this), (idoCount));\\r\\n        transferIDOToken(idoCount);\\r\\n        totalStaked = totalStaked + _amount;\\r\\n    }\\r\\n\\r\\n    // New Unstake function\\r\\n\\r\\n    function unStake(uint256 _amount) external {\\r\\n        address _user = msg.sender;\\r\\n        require(blacklistedUsers[_user] == false,\\\"You don\\u0027t have the permission to access this contract!\\\");\\r\\n        require(checkUserValid(_user) != 0, \\\"Not a Valid User\\\");\\r\\n        require(_amount \\u003e 0, \\\"Can\\u0027t Unstake 0\\\");\\r\\n        require(\\r\\n            idoBalance[_user] + idoTransfer[_user] \\u003e=\\r\\n                (_amount * idoMulti) / 1000000000000000000,\\r\\n            \\\"Unstake failed! User dont haveSUFFICIENT IDO Token\\\"\\r\\n        );\\r\\n        pendingClaim(_user);\\r\\n        uint256 initialAmount = _amount;\\r\\n        uint256 tempAmount = _amount;\\r\\n        uint256 unstaked = 0;\\r\\n        uint256[500] memory unstakeFrom;\\r\\n        uint256 j = 0;\\r\\n        uint256[500] memory unstakeFromPenalty;\\r\\n        uint256 jp = 0;\\r\\n        for (uint256 i = 0; i \\u003c userStake.length; i++) {\\r\\n            if (tempAmount \\u003c= 0) {\\r\\n                break;\\r\\n            }\\r\\n            if (\\r\\n                userStake[i].user == _user \\u0026\\u0026 userStake[i].unstakecomp == false\\r\\n            ) {\\r\\n\\t\\t        if(contractEnd \\u003c block.timestamp){\\r\\n                    if (userStake[i].amount \\u003c= tempAmount) {\\r\\n                        tempAmount -= userStake[i].amount;\\r\\n                        unstakeFrom[j] = i;\\r\\n                        j++;\\r\\n                        unstakeFrom[j] = userStake[i].amount;\\r\\n                        j++;\\r\\n                        unstaked += userStake[i].amount;\\r\\n                    } else {\\r\\n                        unstakeFrom[j] = i;\\r\\n                        j++;\\r\\n                        unstakeFrom[j] = tempAmount;\\r\\n                        j++;\\r\\n                        unstaked += tempAmount;\\r\\n                        tempAmount = 0;\\r\\n                    }\\r\\n                }\\r\\n                else if (\\r\\n                    userStake[i].stakeTime + userStake[i].lockedfor \\u003c=\\r\\n                    block.timestamp\\r\\n                ) {\\r\\n                    // unstake without penalty\\r\\n                    if (userStake[i].amount \\u003c= tempAmount) {\\r\\n                        tempAmount -= userStake[i].amount;\\r\\n                        unstakeFrom[j] = i;\\r\\n                        j++;\\r\\n                        unstakeFrom[j] = userStake[i].amount;\\r\\n                        j++;\\r\\n                        unstaked += userStake[i].amount;\\r\\n                    } else {\\r\\n                        unstakeFrom[j] = i;\\r\\n                        j++;\\r\\n                        unstakeFrom[j] = tempAmount;\\r\\n                        j++;\\r\\n                        unstaked += tempAmount;\\r\\n                        tempAmount = 0;\\r\\n                    }\\r\\n                } else if(penaltyPercent \\u003e 0) {\\r\\n                    // unstake with penalty\\r\\n                    if (userStake[i].amount \\u003c= tempAmount) {\\r\\n                        tempAmount -= userStake[i].amount;\\r\\n                        unstakeFromPenalty[jp] = i;\\r\\n                        jp++;\\r\\n                        unstakeFromPenalty[jp] = userStake[i].amount;\\r\\n                        jp++;\\r\\n                        unstaked += userStake[i].amount;\\r\\n                    } else {\\r\\n                        unstakeFromPenalty[jp] = i;\\r\\n                        jp++;\\r\\n                        unstakeFromPenalty[jp] = tempAmount;\\r\\n                        jp++;\\r\\n                        unstaked += tempAmount;\\r\\n                        tempAmount = 0;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        uint256 tempPenalty = 0;\\r\\n        require(tempAmount == 0, \\\"Not Enough token staked\\\");\\r\\n        for (uint256 i = 0; i \\u003c j; i++) {\\r\\n            uint256 ind = unstakeFrom[i];\\r\\n            i++;\\r\\n            userStake[ind].amount -= unstakeFrom[i];\\r\\n            if (userStake[ind].amount == 0) {\\r\\n                userStake[ind].unstakecomp = true;\\r\\n            }\\r\\n        }\\r\\n        for (uint256 i = 0; i \\u003c jp; i++) {\\r\\n            uint256 ind = unstakeFromPenalty[i];\\r\\n            i++;\\r\\n            userStake[ind].amount -= unstakeFromPenalty[i];\\r\\n            uint256 penalty = (unstakeFromPenalty[i] * penaltyPercent) /\\r\\n                100000000000000000000;\\r\\n            collectedPenalty = collectedPenalty + penalty;\\r\\n            tempPenalty += penalty;\\r\\n            if (userStake[ind].amount == 0) {\\r\\n                userStake[ind].unstakecomp = true;\\r\\n            }\\r\\n        }\\r\\n        _amount -= tempPenalty;\\r\\n        if (unStakeFeePercent \\u003e 0) {\\r\\n            uint256 fee = (_amount * unStakeFeePercent) / 100000000000000000000;\\r\\n            _amount = _amount - fee;\\r\\n            collectedFees = collectedFees + fee;\\r\\n        }\\r\\n        launchpad(launchpadAddress).burnIDOToken(\\r\\n            address(this),\\r\\n            _user,\\r\\n            (initialAmount * idoMulti) / 1000000000000000000\\r\\n        );\\r\\n        stakedToken.transfer(_user, _amount);\\r\\n        Userstaked[_user] = Userstaked[_user] - initialAmount;\\r\\n        totalStaked = totalStaked - initialAmount;\\r\\n    }\\r\\n\\r\\n    // Internal function to know how much pending rewards are there\\r\\n    function pendingClaim(address _user) internal {\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        if(contractEnd \\u003c currentTime){\\r\\n            currentTime = contractEnd;\\r\\n        }\\r\\n        uint256 claimReward = 0;\\r\\n        for(uint256 i=0;i\\u003cuserStake.length;i++){\\r\\n            if(userStake[i].user == _user \\u0026\\u0026 userStake[i].unstakecomp == false){\\r\\n                uint256 time = currentTime - userStake[i].lastClaimed;\\r\\n                claimReward += getRewardValue(userStake[i].amount) * time;\\r\\n                userStake[i].lastClaimed = currentTime;\\r\\n            }\\r\\n        }\\r\\n        pendingRewards[_user] += claimReward;\\r\\n    }\\r\\n\\r\\n    function getUnstake(address _user) public view returns(uint256){\\r\\n        uint256 _userAmount = Userstaked[_user];\\r\\n        if(contractEnd \\u003c block.timestamp){\\r\\n            return _userAmount;\\r\\n        }\\r\\n        uint256 _amount = 0;\\r\\n        for(uint256 i=0;i\\u003cuserStake.length;i++){\\r\\n            if( userStake[i].user == _user \\u0026\\u0026 userStake[i].unstakecomp == false){\\r\\n                if(userStake[i].stakeTime + userStake[i].lockedfor \\u003c= block.timestamp){\\r\\n                    _amount += userStake[i].amount;\\r\\n                }else if(penaltyPercent \\u003e 0){\\r\\n                    _amount += userStake[i].amount;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    function getUnlocked(address _user) public view returns(uint256){\\r\\n        uint256 _amount = 0;\\r\\n        for (uint256 i = 0; i \\u003c userStake.length; i++){\\r\\n            if (\\r\\n                userStake[i].user == _user \\u0026\\u0026 userStake[i].unstakecomp == false \\u0026\\u0026 userStake[i].stakeTime + userStake[i].lockedfor \\u003c= block.timestamp\\r\\n            ){\\r\\n                _amount += userStake[i].amount;\\r\\n            }\\r\\n        }\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    // Internal function to check valid user or no\\r\\n    function checkUserValid(address _user) internal view returns (uint256) {\\r\\n        uint256 count = 0;\\r\\n        for (uint256 i = 0; i \\u003c userStake.length; i++) {\\r\\n            if (\\r\\n                userStake[i].user == _user \\u0026\\u0026 userStake[i].unstakecomp == false\\r\\n            ) {\\r\\n                count = count + 1;\\r\\n            }\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    function depositeRewardToken(uint256 _amount) public onlyOwner {\\r\\n        require(blacklistedUsers[msg.sender] == false,\\\"You don\\u0027t have the permission to access this contract!\\\");\\r\\n        require(_amount \\u003e 0, \\\"Can\\u0027t deposite zero tokens\\\");\\r\\n        require(\\r\\n            rewardToken.transferFrom(msg.sender, address(this), _amount),\\r\\n            \\\"Tranfer failed\\\"\\r\\n        );\\r\\n        totalRewardTokens[rewardToken] += _amount;\\r\\n    }\\r\\n\\r\\n    function withdrawRewardToken(IERC20 _transferToken, uint256 _amount) public onlyOwner{\\r\\n        require(blacklistedUsers[msg.sender] == false,\\\"You don\\u0027t have the permission to access this contract!\\\");\\r\\n        uint256 balance = _transferToken.balanceOf(address(this));\\r\\n        if(_transferToken == stakedToken){\\r\\n            balance = balance - totalStaked;\\r\\n            if(balance \\u003c 0){\\r\\n                balance = 0;\\r\\n            }\\r\\n        }\\r\\n        totalRewardTokens[_transferToken] -= _amount;\\r\\n        if(totalRewardTokens[_transferToken] \\u003c 0){\\r\\n            totalRewardTokens[_transferToken] = 0;\\r\\n        }\\r\\n        require(_transferToken.transfer(msg.sender, _amount));   \\r\\n    }\\r\\n\\r\\n    // User function to know how much token user has earn and can withdraw\\r\\n    function getClaim(address _user) public view returns (uint256) {\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        if(contractEnd \\u003c currentTime){\\r\\n            currentTime = contractEnd;\\r\\n        }\\r\\n        uint256 claimReward = 0;\\r\\n        for(uint256 i=0;i\\u003cuserStake.length;i++){\\r\\n            if(userStake[i].user == _user \\u0026\\u0026 userStake[i].unstakecomp == false){\\r\\n                uint256 time = currentTime - userStake[i].lastClaimed;\\r\\n                claimReward += getRewardValue(userStake[i].amount) * time;\\r\\n            }\\r\\n        }\\r\\n        claimReward += pendingRewards[_user];\\r\\n        return claimReward;\\r\\n    }\\r\\n\\r\\n    // For user to claim the reward and take it to his weallet\\r\\n    function claim() external {\\r\\n        address _user = msg.sender;\\r\\n        require(blacklistedUsers[_user] == false,\\\"You don\\u0027t have the permission to access this contract!\\\");\\r\\n        uint256 rewardInContract = 0;\\r\\n        pendingClaim(_user);\\r\\n        uint256 claimReward = pendingRewards[_user];\\r\\n        require(claimReward != 0, \\\"No Rewards to Claim\\\");\\r\\n        uint256 rewardTokenBalance = rewardToken.balanceOf(address(this));\\r\\n        rewardInContract = rewardTokenBalance;\\r\\n        if (rewardToken == stakedToken) {\\r\\n            rewardInContract = rewardTokenBalance - totalStaked;\\r\\n        }\\r\\n        require(\\r\\n            rewardInContract \\u003e= claimReward,\\r\\n            \\\"INSUFFICIENT reward tokens in contract\\\"\\r\\n        );\\r\\n        require(\\r\\n            rewardToken.transfer(msg.sender, claimReward),\\r\\n            \\\"Transfer Failed\\\"\\r\\n        );\\r\\n        totalRewardTokens[rewardToken] -= claimReward;\\r\\n        if(totalRewardTokens[rewardToken] \\u003c 0){\\r\\n            totalRewardTokens[rewardToken] = 0;\\r\\n        }\\r\\n        pendingRewards[msg.sender] = 0;\\r\\n    }\\r\\n\\r\\n    // Internal function to know the per second APR to calculate\\r\\n    function getRewardValue(uint256 _amount) internal view returns (uint256) {\\r\\n        uint256 reward = 0;\\r\\n        _amount = _amount;\\r\\n        uint256 _feePercent = per;\\r\\n        reward = ((_amount * _feePercent) / 31557600) / 100 / 1e18;\\r\\n        return reward;\\r\\n    }\\r\\n\\r\\n    // User function where IDO token gets transfer to Launchpad\\r\\n    function transferIDOToken(uint256 _amount) public {\\r\\n        address _user = msg.sender;\\r\\n        require(checkUserValid(_user) != 0, \\\"Not a Valid User\\\");\\r\\n        require(idoBalance[_user] \\u003e= _amount, \\\"Transfering more than you have\\\");\\r\\n        require(\\r\\n            idoToken.transfer(launchpadAddress, _amount),\\r\\n            \\\"Transfer failed\\\"\\r\\n        );\\r\\n        idoTransfer[_user] = idoTransfer[_user] + _amount;\\r\\n        idoBalance[_user] = idoBalance[_user] - _amount;\\r\\n        launchpad(launchpadAddress).updateIDOInfoLaunch(\\r\\n            address(this),\\r\\n            _user,\\r\\n            _amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Contract to contract updation\\r\\n    function updateIDOInfoStaking(address _user) external {\\r\\n        uint256 tempValueFun;\\r\\n        tempValueFun = launchpad(launchpadAddress).getIDOTransferred(_user);\\r\\n        idoTransfer[_user] = idoTransfer[_user] - tempValueFun;\\r\\n        idoBalance[_user] = idoBalance[_user] + tempValueFun;\\r\\n    }\\r\\n\\r\\n    function receivedIDOToken(address _user, uint256 _amount) external {\\r\\n        idoTransfer[_user] = idoTransfer[_user] - _amount;\\r\\n    }\\r\\n\\r\\n    // For user to know how much token has been transfered\\r\\n    function getIDOTransferred(address _user) external view returns (uint256) {\\r\\n        return idoTransfer[_user];\\r\\n    }\\r\\n\\r\\n    // ALl the Owner function Starts from here\\r\\n\\r\\n    function setAPR(uint256 _per) external onlyOwner {\\r\\n        require(_per != 0, \\\"APR can\\u0027t be set as ZERO\\\");\\r\\n        per = _per;\\r\\n        aprPercent = _per;\\r\\n    }\\r\\n\\r\\n    function setMaxStakingAmount(uint256 _amount) external onlyOwner {\\r\\n        require(_amount \\u003e totalStaked, \\\"Max staking can\\u0027t be less than total staked\\\");\\r\\n        maxStakingAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function blacklistUser(address _user) external onlyOwner{\\r\\n        require(_user != _owner, \\\"Owner Can\\u0027t be blacklisted!\\\");\\r\\n        blacklistedUsers[_user] = true;\\r\\n    }\\r\\n\\r\\n    function setIDORatio(uint256 _idoratio) external onlyOwner {\\r\\n        require(_idoratio != 0, \\\"IDORatio can\\u0027t set as ZERO\\\");\\r\\n        idoMulti = _idoratio;\\r\\n        // idoMulti = idoMulti) / 1000000000000000000;\\r\\n    }\\r\\n\\r\\n    function changeRewardToken(IERC20 _rewardToken) external onlyOwner {\\r\\n        rewardToken = _rewardToken;\\r\\n    }\\r\\n\\r\\n    function updateMax(uint256 _max) external onlyOwner {\\r\\n        maxStake = _max;\\r\\n    }\\r\\n\\r\\n    function updateMin(uint256 _min) external onlyOwner {\\r\\n        minStake = _min;\\r\\n    }\\r\\n\\r\\n    function updatePenaltyPercent(uint256 _penaltyPercent) external onlyOwner {\\r\\n        penaltyPercent = _penaltyPercent;\\r\\n    }\\r\\n\\r\\n    function setStakeFee(uint256 fee) external onlyOwner {\\r\\n        stakeFeePercent = fee;\\r\\n    }\\r\\n\\r\\n    function setUnstakeFee(uint256 fee) external onlyOwner {\\r\\n        unStakeFeePercent = fee;\\r\\n    }\\r\\n\\r\\n    function withdrawFees() external onlyOwner {\\r\\n        stakedToken.transfer(msg.sender, collectedFees);\\r\\n        collectedFees = 0;\\r\\n    }\\r\\n\\r\\n    function withdrawPenalty() external onlyOwner {\\r\\n        stakedToken.transfer(msg.sender, collectedPenalty);\\r\\n        collectedFees = 0;\\r\\n    }\\r\\n\\r\\n    function setContractEnd(uint256 _time) external onlyOwner {\\r\\n        contractEnd = _time;\\r\\n    }\\r\\n\\r\\n    function updateIDOTokenAddress(IERC20 _idoaddress) external onlyOwner {\\r\\n        idoToken = _idoaddress;\\r\\n    }\\r\\n}\\r\\n\"},\"idoToken.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\n// last update: 18-03-22\\r\\n\\r\\n\\r\\npragma solidity ^0.8.6;\\r\\nimport \\\"./ownable.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/utils/Context.sol\\\"\\r\\nabstract contract Context {\\r\\n\\r\\n    constructor () { }\\r\\n\\r\\n    function _msgSender() internal view returns (address payable) {\\r\\n\\r\\n        return payable(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n\\r\\n        this;\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ERC20 is Context, IERC20, Ownable {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    uint256 private duration=0;\\r\\n    uint256 private lastrun;\\r\\n    bool public tokenLock = false;\\r\\n\\r\\n    constructor () {\\r\\n        lastrun=block.timestamp;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public override view returns (uint256) {\\r\\n\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public override view returns (uint256) {\\r\\n\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public override view returns (uint256) {\\r\\n\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n\\r\\n        // require(isTransferable() == true);\\r\\n        // require(isblockperiod() == true);\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n      function _mint(address account, uint256 amount) internal {\\r\\n\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _burnFrom(address account, uint256 amount) internal {\\r\\n\\r\\n        _burn(account, amount);\\r\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract IDO is ERC20 {\\r\\n\\r\\n    string constant public name = \\\"IDOToken\\\";\\r\\n    string constant public symbol = \\\"IDO\\\";\\r\\n    uint8 constant public decimals = 18;\\r\\n    address[] public ownerAddress;\\r\\n\\r\\n    function onlyMinter(address _user) internal view returns(bool) {\\r\\n        bool isOwner = false;\\r\\n        for(uint256 i=0; i \\u003c ownerAddress.length; i++) {\\r\\n            if(ownerAddress[i] == _user) {\\r\\n                isOwner = true;\\r\\n            }\\r\\n        }\\r\\n        return isOwner;\\r\\n    }\\r\\n    \\r\\n    function mint(address _to, uint256 _amount) public {\\r\\n        require(onlyMinter(msg.sender) == true , \\\"Ownable: caller is not the owner\\\");\\r\\n        _mint(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function burn(address _to, uint256 _amount) public {\\r\\n        require(onlyMinter(msg.sender) == true , \\\"Ownable: caller is not the owner\\\");\\r\\n        _burn(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function updateOwnerAddress(address _ownerAddress) external onlyOwner {\\r\\n        ownerAddress.push(_ownerAddress);\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// last update: 18-03-22\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    \\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"launchpad.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// last update: 18-03-22\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\nimport \\\"./Fixed.sol\\\";\\r\\nimport \\\"./ownable.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./idoToken.sol\\\";\\r\\n\\r\\ncontract launchpad is Ownable {\\r\\n    struct UserStake {\\r\\n        address user;\\r\\n        uint256 amount;\\r\\n        uint256 stakeTime;\\r\\n        uint256 lockedfor;\\r\\n        bool unstakecomp;\\r\\n        uint256 lastClaimed;\\r\\n    }\\r\\n\\r\\n    UserStake[] userStake;\\r\\n    address[] public transferBackIDOAddress;\\r\\n    address _owner;\\r\\n    uint256 public lockperiod = 7 days;\\r\\n    IERC20 public stakedToken;\\r\\n    IERC20 public rewardToken;\\r\\n    IERC20 public idoToken;\\r\\n    uint256 public totalStaked;\\r\\n    uint256 public maxStakingAmount = 1000000000 * 1e18;\\r\\n    uint256 public aprPercent = 1000000000000000000;\\r\\n    uint256 public minStake = 0;\\r\\n    uint256 public maxStake = 100000000000 * 1e18 * 1e18;\\r\\n    uint256 public idoMulti = 1000000000000000000;\\r\\n    uint256 public tier1 = 200000 * 1e18;\\r\\n    uint256 public tier2 = 500000 * 1e18;\\r\\n    uint256 public tier3 = 1000000 * 1e18;\\r\\n    uint256 public tierPercent1 = 12500000000000000000;\\r\\n    uint256 public tierPercent2 = 17500000000000000000;\\r\\n    uint256 public tierPercent3 = 22500000000000000000;\\r\\n    uint256 per = 1000000000000000000;\\r\\n    uint256 public contractEnd = 100000000000000 * 1e18 * 1e18;\\r\\n    mapping(IERC20 =\\u003e uint256) public totalRewardTokens;\\r\\n    uint256 public totalIDOTokenTransferred = 0;\\r\\n\\r\\n    // Fees and Penalty\\r\\n    uint256 public stakeFeePercent = 0;\\r\\n    uint256 public unStakeFeePercent = 0;\\r\\n    uint256 public collectedFees;\\r\\n    uint256 public collectedPenalty;\\r\\n    uint256 public penaltyPercent = 2500000000000000000;\\r\\n\\r\\n    mapping(address =\\u003e uint256) public Userstaked;\\r\\n    mapping(address =\\u003e uint256) public idoBalance;\\r\\n    mapping(address =\\u003e uint256) public idoTransfer;\\r\\n    mapping(address =\\u003e uint256) public tierLevel;\\r\\n    mapping(address =\\u003e uint256) public tierPercent;\\r\\n    mapping(address =\\u003e uint256) public idoTransferTemp;\\r\\n    mapping(address =\\u003e uint256) public pendingRewards;\\r\\n    mapping(address =\\u003e uint256) public tokenTransferredToPool;\\r\\n    mapping(address =\\u003e bool) public blacklistedUsers;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256))\\r\\n        public idoTokenTransferredFromFixed;\\r\\n\\r\\n    constructor(\\r\\n        IERC20 _rewardToken,\\r\\n        IERC20 _stakedToken,\\r\\n        IERC20 _idoToken\\r\\n    ) {\\r\\n        rewardToken = _rewardToken;\\r\\n        stakedToken = _stakedToken;\\r\\n        idoToken = _idoToken;\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function stake(uint256 _amount) external {\\r\\n        address _user = msg.sender;\\r\\n        require(blacklistedUsers[_user] == false,\\\"You don\\u0027t have the permission to access this contract!\\\");\\r\\n        if (contractEnd != 0) {\\r\\n            require(contractEnd \\u003e block.timestamp, \\\"Staking has been Stop\\\");\\r\\n        }\\r\\n        require(\\r\\n            minStake \\u003c= _amount + Userstaked[_user] \\u0026\\u0026 maxStake \\u003e= _amount + Userstaked[_user],\\r\\n            \\\"Could not stake this amount\\\"\\r\\n        );\\r\\n        uint256 initialAmount = _amount;\\r\\n        if (stakeFeePercent \\u003e 0) {\\r\\n            uint256 fee = (_amount * stakeFeePercent) / 100000000000000000000;\\r\\n            _amount = _amount - fee;\\r\\n            collectedFees = collectedFees + fee;\\r\\n        }\\r\\n        require(_amount + totalStaked \\u003c= maxStakingAmount, \\\"Max staking limit for the contract is touched\\\");\\r\\n        stakedToken.transferFrom(_user, address(this), initialAmount);\\r\\n        userStake.push(\\r\\n            UserStake(\\r\\n                _user,\\r\\n                _amount,\\r\\n                uint256(block.timestamp),\\r\\n                lockperiod,\\r\\n                false,\\r\\n                uint256(block.timestamp)\\r\\n            )\\r\\n        );\\r\\n        \\r\\n        Userstaked[_user] = Userstaked[_user] + _amount;\\r\\n        idoBalance[_user] =\\r\\n            idoBalance[_user] +\\r\\n            ((_amount * idoMulti) / 1000000000000000000);\\r\\n        IDO(address(idoToken)).mint(\\r\\n            address(this),\\r\\n            ((_amount * idoMulti) / 1000000000000000000)\\r\\n        );\\r\\n        transferIDOToken(((_amount * idoMulti) / 1000000000000000000));\\r\\n        totalStaked = totalStaked + _amount;\\r\\n    }\\r\\n\\r\\n    // New Unstake function\\r\\n\\r\\n    function unStake(uint256 _amount) external {\\r\\n        address _user = msg.sender;\\r\\n        require(blacklistedUsers[_user] == false,\\\"You don\\u0027t have the permission to access this contract!\\\");\\r\\n        require(checkUserValid(_user) != 0, \\\"Not a Valid User\\\");\\r\\n        require(_amount \\u003e 0, \\\"Can\\u0027t Unstake 0\\\");\\r\\n        require(Userstaked[_user] \\u003e= _amount, \\\"You haven\\u0027t staked enough!\\\");\\r\\n        require(\\r\\n            idoBalance[_user] + idoTransfer[_user] \\u003e=\\r\\n                ((_amount * idoMulti) / 1000000000000000000),\\r\\n            \\\"Unstake failed! User dont have SUFFICIENT IDO Token\\\"\\r\\n        );\\r\\n        pendingClaim(_user);\\r\\n        uint256 initialAmount = _amount;\\r\\n        uint256 tempAmount = _amount;\\r\\n        uint256 unstaked = 0;\\r\\n        uint256[500] memory unstakeFrom;\\r\\n        uint256 j = 0;\\r\\n        uint256[500] memory unstakeFromPenalty;\\r\\n        uint256 jp = 0;\\r\\n        for (uint256 i = 0; i \\u003c userStake.length; i++) {\\r\\n            if (tempAmount \\u003c= 0) {\\r\\n                break;\\r\\n            }\\r\\n            if (\\r\\n                userStake[i].user == _user \\u0026\\u0026 userStake[i].unstakecomp == false\\r\\n            ) {\\r\\n                if(contractEnd \\u003c block.timestamp){\\r\\n                    if (userStake[i].amount \\u003c= tempAmount) {\\r\\n                        tempAmount -= userStake[i].amount;\\r\\n                        unstakeFrom[j] = i;\\r\\n                        j++;\\r\\n                        unstakeFrom[j] = userStake[i].amount;\\r\\n                        j++;\\r\\n                        unstaked += userStake[i].amount;\\r\\n                    } else {\\r\\n                        unstakeFrom[j] = i;\\r\\n                        j++;\\r\\n                        unstakeFrom[j] = tempAmount;\\r\\n                        j++;\\r\\n                        unstaked += tempAmount;\\r\\n                        tempAmount = 0;\\r\\n                    }\\r\\n                }\\r\\n                else if (\\r\\n                    userStake[i].stakeTime + userStake[i].lockedfor \\u003c=\\r\\n                    block.timestamp\\r\\n                ) {\\r\\n                    // unstake without penalty\\r\\n                    if (userStake[i].amount \\u003c= tempAmount) {\\r\\n                        tempAmount -= userStake[i].amount;\\r\\n                        unstakeFrom[j] = i;\\r\\n                        j++;\\r\\n                        unstakeFrom[j] = userStake[i].amount;\\r\\n                        j++;\\r\\n                        unstaked += userStake[i].amount;\\r\\n                    } else {\\r\\n                        unstakeFrom[j] = i;\\r\\n                        j++;\\r\\n                        unstakeFrom[j] = tempAmount;\\r\\n                        j++;\\r\\n                        unstaked += tempAmount;\\r\\n                        tempAmount = 0;\\r\\n                    }\\r\\n                } else {\\r\\n                    // unstake with penalty\\r\\n                    if (userStake[i].amount \\u003c= tempAmount) {\\r\\n                        tempAmount -= userStake[i].amount;\\r\\n                        unstakeFromPenalty[jp] = i;\\r\\n                        jp++;\\r\\n                        unstakeFromPenalty[jp] = userStake[i].amount;\\r\\n                        jp++;\\r\\n                        unstaked += userStake[i].amount;\\r\\n                    } else {\\r\\n                        unstakeFromPenalty[jp] = i;\\r\\n                        jp++;\\r\\n                        unstakeFromPenalty[jp] = tempAmount;\\r\\n                        jp++;\\r\\n                        unstaked += tempAmount;\\r\\n                        tempAmount = 0;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        uint256 tempPenalty = 0;\\r\\n        require(tempAmount == 0, \\\"Not Enough token staked\\\");\\r\\n        for (uint256 i = 0; i \\u003c j; i++) {\\r\\n            uint256 ind = unstakeFrom[i];\\r\\n            i++;\\r\\n            userStake[ind].amount -= unstakeFrom[i];\\r\\n            if (userStake[ind].amount == 0) {\\r\\n                userStake[ind].unstakecomp = true;\\r\\n            }\\r\\n        }\\r\\n        for (uint256 i = 0; i \\u003c jp; i++) {\\r\\n            uint256 ind = unstakeFromPenalty[i];\\r\\n            i++;\\r\\n            userStake[ind].amount -= unstakeFromPenalty[i];\\r\\n            uint256 penalty = (unstakeFromPenalty[i] * penaltyPercent) /\\r\\n                100000000000000000000;\\r\\n            collectedPenalty = collectedPenalty + penalty;\\r\\n            tempPenalty += penalty;\\r\\n            if (userStake[ind].amount == 0) {\\r\\n                userStake[ind].unstakecomp = true;\\r\\n            }\\r\\n        }\\r\\n        _amount -= tempPenalty;\\r\\n        if (unStakeFeePercent \\u003e 0) {\\r\\n            uint256 fee = (_amount * unStakeFeePercent) / 100000000000000000000;\\r\\n            _amount = _amount - fee;\\r\\n            collectedFees = collectedFees + fee;\\r\\n        }\\r\\n        uint256 initialIDOAmount = ((initialAmount * idoMulti) / 1000000000000000000);\\r\\n        idoTransfer[_user] -= initialIDOAmount;\\r\\n        totalIDOTokenTransferred -= initialIDOAmount;\\r\\n        tokenTransferredToPool[_user] -= initialIDOAmount;\\r\\n        updateTier(_user);\\r\\n        IDO(address(idoToken)).burn(\\r\\n            address(this),\\r\\n            initialIDOAmount\\r\\n        );\\r\\n        stakedToken.transfer(_user, _amount);\\r\\n        Userstaked[_user] = Userstaked[_user] - initialAmount;\\r\\n        totalStaked = totalStaked - initialAmount;\\r\\n    }\\r\\n\\r\\n    function pendingClaim(address _user) internal {\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        if(contractEnd \\u003c currentTime){\\r\\n            currentTime = contractEnd;\\r\\n        }\\r\\n        uint256 claimReward = 0;\\r\\n        for(uint256 i=0;i\\u003cuserStake.length;i++){\\r\\n            if(userStake[i].user == _user \\u0026\\u0026 userStake[i].unstakecomp == false){\\r\\n                uint256 time = currentTime - userStake[i].lastClaimed;\\r\\n                claimReward += getRewardValue(userStake[i].amount, _user) * time;\\r\\n                userStake[i].lastClaimed = currentTime;\\r\\n            }\\r\\n        }\\r\\n        pendingRewards[_user] += claimReward;\\r\\n    }\\r\\n\\r\\n    function getUnstake(address _user) public view returns(uint256) {\\r\\n        return Userstaked[_user];\\r\\n    }\\r\\n\\r\\n\\r\\n    function getUnlocked(address _user) public view returns(uint256){\\r\\n        uint256 _amount = 0;\\r\\n        for (uint256 i = 0; i \\u003c userStake.length; i++){\\r\\n            if (\\r\\n                userStake[i].user == _user \\u0026\\u0026 userStake[i].unstakecomp == false \\u0026\\u0026 userStake[i].stakeTime + userStake[i].lockedfor \\u003c= block.timestamp\\r\\n            ){\\r\\n                _amount += userStake[i].amount;\\r\\n            }\\r\\n        }\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    function checkUserValid(address _user) internal view returns (uint256) {\\r\\n        uint256 count = 0;\\r\\n        for (uint256 i = 0; i \\u003c userStake.length; i++) {\\r\\n            if (\\r\\n                userStake[i].user == _user \\u0026\\u0026 userStake[i].unstakecomp == false\\r\\n            ) {\\r\\n                count = count + 1;\\r\\n            }\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    function depositeRewardToken(uint256 _amount) public onlyOwner {\\r\\n        require(blacklistedUsers[msg.sender] == false,\\\"You don\\u0027t have the permission to access this contract!\\\");\\r\\n        require(_amount \\u003e 0, \\\"Can\\u0027t deposite zero tokens\\\");\\r\\n        require(\\r\\n            rewardToken.transferFrom(msg.sender, address(this), _amount),\\r\\n            \\\"Tranfer failed\\\"\\r\\n        );\\r\\n        totalRewardTokens[rewardToken] += _amount;\\r\\n    }\\r\\n\\r\\n    function withdrawRewardToken(IERC20 _transferToken, uint256 _amount) public onlyOwner{\\r\\n        require(blacklistedUsers[msg.sender] == false,\\\"You don\\u0027t have the permission to access this contract!\\\");\\r\\n        uint256 balance = _transferToken.balanceOf(address(this));\\r\\n        if(_transferToken == stakedToken){\\r\\n            balance = balance - totalStaked;\\r\\n            if(balance \\u003c 0){\\r\\n                balance = 0;\\r\\n            }\\r\\n        }\\r\\n        totalRewardTokens[_transferToken] -= _amount;\\r\\n        if(totalRewardTokens[_transferToken] \\u003c 0){\\r\\n            totalRewardTokens[_transferToken] = 0;\\r\\n        }\\r\\n        require(_transferToken.transfer(msg.sender, _amount));   \\r\\n    }\\r\\n    \\r\\n    function getClaim(address _user) public view returns (uint256) {\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        if(contractEnd \\u003c currentTime){\\r\\n            currentTime = contractEnd;\\r\\n        }\\r\\n        uint256 claimReward = 0;\\r\\n        for(uint256 i=0;i\\u003cuserStake.length;i++){\\r\\n            if(userStake[i].user == _user \\u0026\\u0026 userStake[i].unstakecomp == false){\\r\\n                uint256 time = currentTime - userStake[i].lastClaimed;\\r\\n                claimReward += getRewardValue(userStake[i].amount, _user) * time;\\r\\n            }\\r\\n        }\\r\\n        claimReward += pendingRewards[_user];\\r\\n        return claimReward;\\r\\n    }\\r\\n\\r\\n    function claim() external {\\r\\n        address _user = msg.sender;\\r\\n        require(blacklistedUsers[_user] == false,\\\"You don\\u0027t have the permission to access this contract!\\\");\\r\\n        uint256 rewardInContract = 0;\\r\\n        pendingClaim(_user);\\r\\n        uint256 claimReward = pendingRewards[_user];\\r\\n        require(claimReward != 0, \\\"No Rewards to Claim\\\");\\r\\n        uint256 rewardTokenBalance = rewardToken.balanceOf(address(this));\\r\\n        rewardInContract = rewardTokenBalance;\\r\\n        if (rewardToken == stakedToken) {\\r\\n            rewardInContract = rewardTokenBalance - totalStaked;\\r\\n        }\\r\\n        require(\\r\\n            rewardInContract \\u003e= claimReward,\\r\\n            \\\"INSUFFICIENT Token to Transfer\\\"\\r\\n        );\\r\\n        require(\\r\\n            rewardToken.transfer(msg.sender, claimReward),\\r\\n            \\\"Transfer Failed\\\"\\r\\n        );\\r\\n        totalRewardTokens[rewardToken] -= claimReward;\\r\\n        pendingRewards[msg.sender] = 0;\\r\\n    }\\r\\n\\r\\n    function getRewardValue(uint256 _amount, address _user) internal view returns (uint256) {\\r\\n        uint256 reward = 0;\\r\\n        _amount = _amount;\\r\\n        uint256 tempAPR = currentAPR(_user);\\r\\n        uint256 _feePercent = tempAPR;\\r\\n        reward = ((_amount * _feePercent) / 31557600) / 100 / 1e18;\\r\\n        return reward;\\r\\n    }\\r\\n\\r\\n    function transferIDOToken(uint256 _amount) public {\\r\\n        address _user = msg.sender;\\r\\n        require(checkUserValid(_user) != 0, \\\"Not a Valid User\\\");\\r\\n        require(idoBalance[_user] \\u003e= _amount, \\\"Transfering more than you have\\\");\\r\\n        // require(idoToken.transfer(address(this), _amount), \\\"Transfer failed\\\");\\r\\n        totalIDOTokenTransferred += _amount;\\r\\n        tokenTransferredToPool[_user] += _amount;\\r\\n        idoTransfer[_user] = idoTransfer[_user] + _amount;\\r\\n        idoBalance[_user] = idoBalance[_user] - (_amount);\\r\\n        updateTier(_user);\\r\\n    }\\r\\n\\r\\n    function updateIDOInfoLaunch(\\r\\n        address updateContract,\\r\\n        address _user,\\r\\n        uint256 _amount\\r\\n    ) external {\\r\\n        idoTransfer[_user] = idoTransfer[_user] + _amount;\\r\\n        idoTokenTransferredFromFixed[updateContract][_user] += _amount;\\r\\n        tokenTransferredToPool[_user] += _amount;\\r\\n        updateTier(_user);\\r\\n        totalIDOTokenTransferred += _amount;\\r\\n    }\\r\\n\\r\\n    function transferBackIDOToken(uint256 _pool, uint256 _amount) external {\\r\\n        // uint256 backIDO = transferBackIDOAddress[_pool].getIDOTransfereds(msg.sender);  // for fetching token from staking contract\\r\\n        address _user = msg.sender;\\r\\n        require(idoTransfer[_user] \\u003e= _amount, \\\"No sufficient tokens\\\");\\r\\n        if (transferBackIDOAddress[_pool] == address(this)) {\\r\\n            require(\\r\\n                idoToken.transfer(transferBackIDOAddress[_pool], _amount),\\r\\n                \\\"Transfer Failed\\\"\\r\\n            );\\r\\n            totalIDOTokenTransferred -= _amount;\\r\\n            tokenTransferredToPool[_user] -= _amount;\\r\\n            idoTransfer[_user] = idoTransfer[_user] - _amount;\\r\\n            idoBalance[_user] = idoBalance[_user] + (_amount);\\r\\n            updateTier(_user);\\r\\n        } else {\\r\\n            require(\\r\\n                idoToken.transfer(transferBackIDOAddress[_pool], _amount),\\r\\n                \\\"Transfer Failed\\\"\\r\\n            );\\r\\n            totalIDOTokenTransferred -= _amount;\\r\\n            tokenTransferredToPool[_user] -= _amount;\\r\\n            idoTransfer[_user] = idoTransfer[_user] - _amount;\\r\\n            idoTransferTemp[_user] = _amount;\\r\\n            idoTokenTransferredFromFixed[transferBackIDOAddress[_pool]][\\r\\n                _user\\r\\n            ] -= _amount;\\r\\n            FixedStaking(transferBackIDOAddress[_pool]).updateIDOInfoStaking(\\r\\n                _user\\r\\n            );\\r\\n            idoTransferTemp[_user] = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function burnIDOToken(\\r\\n        address _fixedContract,\\r\\n        address _user,\\r\\n        uint256 _amount\\r\\n    ) external {\\r\\n        require(\\r\\n            idoTokenTransferredFromFixed[_fixedContract][_user] \\u003e= _amount,\\r\\n            \\\"No sufficient tokens\\\"\\r\\n        );\\r\\n        IDO(address(idoToken)).burn(\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n        totalIDOTokenTransferred -= _amount;\\r\\n        tokenTransferredToPool[_user] -= _amount;\\r\\n        idoTransfer[_user] = idoTransfer[_user] - _amount;\\r\\n        idoTransferTemp[_user] = _amount;\\r\\n        idoTokenTransferredFromFixed[_fixedContract][_user] -= _amount;\\r\\n        FixedStaking(_fixedContract).receivedIDOToken(_user, _amount);\\r\\n        idoTransferTemp[_user] = 0;\\r\\n    }\\r\\n\\r\\n    function currentAPR(address _user) public view returns (uint256) {\\r\\n        uint256 tempAPR = per;\\r\\n        uint256 tempTier = getTier(_user);\\r\\n        if (tempTier != 0) {\\r\\n            if (tempTier == 1) {\\r\\n                tempAPR = tierPercent1;\\r\\n            } else if (tempTier == 2) {\\r\\n                tempAPR = tierPercent2;\\r\\n            } else {\\r\\n                tempAPR = tierPercent3;\\r\\n            }\\r\\n        }\\r\\n        return tempAPR;\\r\\n    }\\r\\n\\r\\n    function getIDOTransferred(address _user) public view returns (uint256) {\\r\\n        return idoTransferTemp[_user];\\r\\n    }\\r\\n\\r\\n    function getTier(address _user) public view returns (uint256) {\\r\\n        uint256 count = 0;\\r\\n        if (idoTransfer[_user] \\u003e= tier1) {\\r\\n            count = 1;\\r\\n        }\\r\\n        if (idoTransfer[_user] \\u003e= tier2) {\\r\\n            count = 2;\\r\\n        }\\r\\n        if (idoTransfer[_user] \\u003e= tier3) {\\r\\n            count = 3;\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    function updateTier(address _user) public {\\r\\n        if (idoTransfer[_user] \\u003e= tier1) {\\r\\n            if (idoTransfer[_user] \\u003e= tier1) {\\r\\n                tierLevel[_user] = tier1;\\r\\n                tierPercent[_user] = tierPercent1;\\r\\n            }\\r\\n            if (idoTransfer[_user] \\u003e= tier2) {\\r\\n                tierLevel[_user] = tier2;\\r\\n                tierPercent[_user] = tierPercent2;\\r\\n            }\\r\\n            if (idoTransfer[_user] \\u003e= tier3) {\\r\\n                tierLevel[_user] = tier3;\\r\\n                tierPercent[_user] = tierPercent3;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setAPR(uint256 _per) external onlyOwner {\\r\\n        require(_per != 0, \\\"APR can\\u0027t set as ZERO\\\");\\r\\n        per = _per;\\r\\n        aprPercent = _per;\\r\\n    }\\r\\n\\r\\n    function setMaxStakingAmount(uint256 _amount) external onlyOwner {\\r\\n        require(_amount \\u003e totalStaked, \\\"Max staking can\\u0027t be less than total staked\\\");\\r\\n        maxStakingAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function blacklistUser(address _user) external onlyOwner{\\r\\n        require(_user != _owner, \\\"Owner Can\\u0027t be blacklisted!\\\");\\r\\n        blacklistedUsers[_user] = true;\\r\\n    }\\r\\n\\r\\n    function setIDORatio(uint256 _idoratio) external onlyOwner {\\r\\n        require(_idoratio != 0, \\\"IDORatio can\\u0027t set as ZERO\\\");\\r\\n        idoMulti = _idoratio;\\r\\n        // idoMulti = idoMulti / 1000000000000000000;\\r\\n    }\\r\\n\\r\\n    function changeRewardToken(IERC20 _rewardToken) external onlyOwner {\\r\\n        rewardToken = _rewardToken;\\r\\n    }\\r\\n\\r\\n    function updateMax(uint256 _max) external onlyOwner {\\r\\n        maxStake = _max;\\r\\n    }\\r\\n\\r\\n    function updateMin(uint256 _min) external onlyOwner {\\r\\n        minStake = _min;\\r\\n    }\\r\\n\\r\\n    function updateTierValue1(uint256 _tier1) external onlyOwner {\\r\\n        tier1 = _tier1;\\r\\n    }\\r\\n\\r\\n    function updateTierValue2(uint256 _tier2) external onlyOwner {\\r\\n        tier2 = _tier2;\\r\\n    }\\r\\n\\r\\n    function updateTierValue3(uint256 _tier3) external onlyOwner {\\r\\n        tier3 = _tier3;\\r\\n    }\\r\\n\\r\\n    function updateTierPercent1(uint256 _tierPercent1) external onlyOwner {\\r\\n        tierPercent1 = _tierPercent1;\\r\\n    }\\r\\n\\r\\n    function updateTierPercent2(uint256 _tierPercent2) external onlyOwner {\\r\\n        tierPercent2 = _tierPercent2;\\r\\n    }\\r\\n\\r\\n    function updateTierPercent3(uint256 _tierPercent3) external onlyOwner {\\r\\n        tierPercent3 = _tierPercent3;\\r\\n    }\\r\\n\\r\\n    function updateTransferBackAddress(uint256 _poolId, address _pooladdress)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        transferBackIDOAddress[_poolId] = _pooladdress;\\r\\n    }\\r\\n\\r\\n    function addTransferBackAddress(address _pooladdress) external onlyOwner {\\r\\n        transferBackIDOAddress.push(_pooladdress);\\r\\n    }\\r\\n\\r\\n    function updatePenaltyPercent(uint256 _penaltyPercent) external onlyOwner {\\r\\n        penaltyPercent = _penaltyPercent;\\r\\n    }\\r\\n\\r\\n    function setStakeFee(uint256 fee) external onlyOwner {\\r\\n        stakeFeePercent = fee;\\r\\n    }\\r\\n\\r\\n    function setUnstakeFee(uint256 fee) external onlyOwner {\\r\\n        unStakeFeePercent = fee;\\r\\n    }\\r\\n\\r\\n    function withdrawFees() external onlyOwner {\\r\\n        stakedToken.transfer(msg.sender, collectedFees);\\r\\n        collectedFees = 0;\\r\\n    }\\r\\n\\r\\n    function withdrawPenalty() external onlyOwner {\\r\\n        stakedToken.transfer(msg.sender, collectedPenalty);\\r\\n        collectedFees = 0;\\r\\n    }\\r\\n\\r\\n    function setContractEnd(uint256 _time) external onlyOwner {\\r\\n        contractEnd = _time;\\r\\n    }\\r\\n\\r\\n    function updateIDOTokenAddress(IERC20 _idoaddress) external onlyOwner {\\r\\n        idoToken = _idoaddress;\\r\\n    }\\r\\n}\\r\\n\"},\"ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// last update: 18-03-22\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\ncontract Ownable {\\r\\n    address public owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(owner, address(0));\\r\\n        owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_idoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_launchpadAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Userstaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aprPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"blacklistUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklistedUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"changeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getIDOTransferred\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"idoBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idoMulti\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idoToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"idoTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockperiod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"receivedIDOToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_per\",\"type\":\"uint256\"}],\"name\":\"setAPR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setContractEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idoratio\",\"type\":\"uint256\"}],\"name\":\"setIDORatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setStakeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setUnstakeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalRewardTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferIDOToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unStakeFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"updateIDOInfoStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_idoaddress\",\"type\":\"address\"}],\"name\":\"updateIDOTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"updateMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"updateMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_penaltyPercent\",\"type\":\"uint256\"}],\"name\":\"updatePenaltyPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_transferToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FixedStaking", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000025b24b3c47918b7962b3e49c4f468367f73cc0e000000000000000000000000025b24b3c47918b7962b3e49c4f468367f73cc0e0000000000000000000000000a8bbcd5cfe6b43e9f6d28ca48ffb4693450a7770000000000000000000000000bb4719e543da40ae140ad5bc07153c2949349d1c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2358b401fdda7ca42ad5e82c31291ace4118eeb85c049787851991594f2c7263"}