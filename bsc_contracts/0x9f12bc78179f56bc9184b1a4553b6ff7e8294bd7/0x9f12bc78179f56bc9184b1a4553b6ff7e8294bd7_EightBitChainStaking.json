{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/8Bit-Staking/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/8Bit-Staking/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/8Bit-Staking/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\"\r\n    },\r\n    \"contracts/8Bit-Staking/EightBitChainStaking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./IERC721C.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./TimeVolumeRegistery.sol\\\";\\r\\n\\r\\npragma solidity 0.8.8;\\r\\n\\r\\ncontract DSMath {\\r\\n  function add(uint x, uint y) internal pure returns (uint z) {\\r\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\r\\n  }\\r\\n\\r\\n  function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\r\\n  }\\r\\n\\r\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\r\\n  }\\r\\n\\r\\n  function min(uint x, uint y) internal pure returns (uint z) {\\r\\n    return x <= y ? x : y;\\r\\n  }\\r\\n\\r\\n  function max(uint x, uint y) internal pure returns (uint z) {\\r\\n    return x >= y ? x : y;\\r\\n  }\\r\\n\\r\\n  function imin(int x, int y) internal pure returns (int z) {\\r\\n    return x <= y ? x : y;\\r\\n  }\\r\\n\\r\\n  function imax(int x, int y) internal pure returns (int z) {\\r\\n    return x >= y ? x : y;\\r\\n  }\\r\\n\\r\\n  uint constant WAD = 10 ** 18;\\r\\n  uint constant RAY = 10 ** 27;\\r\\n\\r\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\r\\n    z = add(mul(x, y), WAD / 2) / WAD;\\r\\n  }\\r\\n\\r\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\r\\n    z = add(mul(x, y), RAY / 2) / RAY;\\r\\n  }\\r\\n\\r\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\r\\n    z = add(mul(x, WAD), y / 2) / y;\\r\\n  }\\r\\n\\r\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\r\\n    z = add(mul(x, RAY), y / 2) / y;\\r\\n  }\\r\\n\\r\\n  function rpow(uint x, uint n) internal pure returns (uint z) {\\r\\n    z = n % 2 != 0 ? x : RAY;\\r\\n\\r\\n    for (n /= 2; n != 0; n /= 2) {\\r\\n      x = rmul(x, x);\\r\\n\\r\\n      if (n % 2 != 0) {\\r\\n        z = rmul(z, x);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\ninterface ICreditFacility {\\r\\n  function getBorrowerStatus(\\r\\n    address _borrower,\\r\\n    uint256 _index\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  function getBorrowTime(address _borrower) external view returns (uint256);\\r\\n\\r\\n  function getTotalBorrowedBUSD(\\r\\n    address _borrower,\\r\\n    uint256 _borrowTime\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  function getTotalRepaidBUSD(\\r\\n    address _borrower,\\r\\n    uint256 _borrowTime\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  function getTotalCollateraled8Bit(\\r\\n    address _borrower,\\r\\n    uint256 _borrowTime\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  function getBorrowStartTime(\\r\\n    address _borrower,\\r\\n    uint256 _borrowTime\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  function getRepaidTime(\\r\\n    address _borrower,\\r\\n    uint256 _borrowTime\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  function resetBorrower(address _staker) external;\\r\\n}\\r\\n\\r\\ncontract EightBitChainStaking is DSMath, Ownable {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  struct StakingPool {\\r\\n    bool Locked;\\r\\n    uint256 LockTime;\\r\\n    uint256 APY;\\r\\n    uint256 fee;\\r\\n    uint256 minToStake;\\r\\n uint256 minUnstakeTime; \\r\\n\\r\\n  }\\r\\n\\r\\n  //Each staker has a StakeProfile for each pool, this profiles are stored in \\\"stakers\\\" mapping\\r\\n  struct StakeProfile {\\r\\n    uint256 totalStaked;\\r\\n    uint256 unlockTime;\\r\\n    uint256 lastClaimTime;\\r\\n    uint256 stakingStart;\\r\\n    uint256 totalClaimed;\\r\\n  }\\r\\n\\r\\n\\r\\n    struct StakerInfo {\\r\\n        address stakerAddress;\\r\\n        uint256 stakingAmount;\\r\\n        uint256 poolId;\\r\\n    }\\r\\n\\r\\n    // Create a dynamic array to store all stakers\\r\\n    StakerInfo[] public allStakers;\\r\\n\\r\\n    // Add a function to retrieve all stakers from all pools\\r\\n    function getAllStakers() external view returns (StakerInfo[] memory) {\\r\\n        return allStakers;\\r\\n    }\\r\\n\\r\\n  struct APYCheckPoint {\\r\\n    uint256[3] APYs;\\r\\n    uint256 startTime;\\r\\n  }\\r\\n\\r\\n  //Staking token, pools and stakers\\r\\n  uint256 public totalStaked;\\r\\n  IERC20 public stakingToken;\\r\\n  ICreditFacility public creditFacility;\\r\\n  mapping(uint256 => StakingPool) Pools;\\r\\n  mapping(address => mapping(uint256 => StakeProfile)) stakers;\\r\\n  mapping(uint256 => uint256) poolStaked;\\r\\n  APYCheckPoint[] apyCheckpoints;\\r\\n\\r\\n  //NFT Contracts, To Check If Someone holds NFT or not\\r\\n  address[] public NFTs;\\r\\n  uint256 public stakingStart = 0;\\r\\n  address public RewardsFeeReceiver =\\r\\n    0x4F68BD0917900586202590f10168E078c3D257c5;\\r\\n  uint256 public tokenDecimals;\\r\\n   uint256 public penaltyPercentage = 1;\\r\\n  uint256 public transferPercentage = 100;\\r\\n     uint256 public totalReflectionSent = 0;\\r\\n\\r\\n\\r\\n  address public stakingVault;\\r\\n  TimeVolumeRegistery public timeVolumeRegistery;\\r\\n\\r\\n  //events\\r\\n  event StakingStarted(uint256 indexed startTime);\\r\\n  event Staked(\\r\\n    address indexed staker,\\r\\n    uint256 indexed amount,\\r\\n    uint256 indexed poolid\\r\\n  );\\r\\n  event Unstaked(\\r\\n    address indexed staker,\\r\\n    uint256 indexed amount,\\r\\n    uint256 indexed poolId\\r\\n  );\\r\\n  event Penaltied(address indexed staker, uint256 indexed penaltyAmount);\\r\\n  event EmergencyWithdrawed(address indexed staker, uint256 indexed poolId);\\r\\n  event Claimed(address indexed staker, uint256 indexed amount);\\r\\n\\r\\n  constructor(address _stakingToken) {\\r\\n    /**\\r\\n     * Pools:\\r\\n     * Id-0 : Standard pool 30 days period\\r\\n     * Id-1 : NFT pool 30 days period\\r\\n     * Id-2 : Credit Pool\\r\\n     */\\r\\n    stakingToken = IERC20(_stakingToken);\\r\\n    uint256 decimals = 18;\\r\\n    tokenDecimals = decimals;\\r\\n\\r\\n    //Standard Pools => not locked, 30days, 12% APY, 20% fee for early unstake, 5, 000 8Bit minimum for staking\\r\\n      Pools[0] = StakingPool(false, 0 days, 12, 200, 5000 * 10 ** decimals, 15 days);\\r\\n\\r\\n    // NFT Pools => not locked, 30 days, 36% APY, 20% fee for early unstake, 25,000 8Bit minimum for staking, 15 days minUnstakeTime\\r\\n    Pools[1] = StakingPool(false, 0 days, 36, 200, 25000 * 10 ** decimals, 15 days);\\r\\n\\r\\n    // Credit Pool => locked, 90 days period, 36% APY, 0 Fee as it's locked, 150,000 8Bit minimum for staking, 15 days minUnstakeTime\\r\\n    Pools[2] = StakingPool(true, 90 days, 36, 0, 150000 * 10 ** decimals, 15 days);\\r\\n\\r\\n\\r\\n    timeVolumeRegistery = new TimeVolumeRegistery();\\r\\n  }\\r\\n\\r\\n  function setCreditFacility(address facility) public onlyOwner {\\r\\n    creditFacility = ICreditFacility(facility);\\r\\n  }\\r\\n\\r\\n  function setStakingToken(address _stakingToken) public onlyOwner {\\r\\n    stakingToken = ERC20(_stakingToken);\\r\\n  }\\r\\n\\r\\n  function setStakingVault(address _valut) external onlyOwner {\\r\\n    stakingVault = _valut;\\r\\n  }\\r\\n\\r\\n  function setPenaltyReceiver(address _penaltyReceiver) external onlyOwner {\\r\\n    RewardsFeeReceiver = _penaltyReceiver;\\r\\n  }\\r\\n\\r\\n  function StartStaking() external onlyOwner {\\r\\n    require(stakingStart == 0, \\\"Staking already started!\\\");\\r\\n    stakingStart = block.timestamp;\\r\\n\\r\\n    uint256[3] memory APYs = [uint256(12), uint256(36), uint256(36)];\\r\\n    apyCheckpoints.push(APYCheckPoint(APYs, block.timestamp));\\r\\n\\r\\n    emit StakingStarted(block.timestamp);\\r\\n  }\\r\\n\\r\\n  function changeAPY(uint256 _poolId, uint256 _newAPY) external onlyOwner {\\r\\n    Pools[_poolId].APY = _newAPY;\\r\\n    APYCheckPoint memory lastPoint = apyCheckpoints[apyCheckpoints.length - 1];\\r\\n    lastPoint.APYs[_poolId] = _newAPY;\\r\\n    lastPoint.startTime = block.timestamp;\\r\\n    apyCheckpoints.push(lastPoint);\\r\\n  }\\r\\n\\r\\n  function changeMinTokensToEnter(\\r\\n    uint256 _poolId,\\r\\n    uint256 _newMin\\r\\n  ) external onlyOwner {\\r\\n    Pools[_poolId].minToStake = _newMin;\\r\\n  }\\r\\n\\r\\n  function AddNFT(address _newNFT) external onlyOwner {\\r\\n    NFTs.push(_newNFT);\\r\\n  }\\r\\n\\r\\n  function removeNFT(address _NFT) external onlyOwner {\\r\\n    address[] memory nfts = NFTs;\\r\\n    for (uint256 i = 0; i < nfts.length; i++) {\\r\\n      if (nfts[i] == _NFT) {\\r\\n        NFTs[i] = nfts[nfts.length - 1];\\r\\n        NFTs.pop();\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function StakeTokens(uint256 poolId, uint256 toStake) external {\\r\\n    //Saving our target pool in memory to save gas!\\r\\n    StakingPool memory targetPool = Pools[poolId];\\r\\n    //Getting balance of holder to make sure he is not staking all of his tokens! (more than 90%)\\r\\n    uint256 balance = stakingToken.balanceOf(msg.sender);\\r\\n\\r\\n    //Validating Here\\r\\n    require(poolId < 3, \\\"Invalid Pool!\\\");\\r\\n    require(stakingStart > 0, \\\"Staking not started yet!\\\");\\r\\n    require(\\r\\n      toStake >= targetPool.minToStake,\\r\\n      \\\"You cant stake less than minimum!\\\"\\r\\n    );\\r\\n    require(\\r\\n      (toStake * 10000) / balance <= 9999,\\r\\n      \\\"You cant stake more than 99% of your holdings!\\\"\\r\\n    );\\r\\n\\r\\n    //For NFT pools we want to make sure that staker is nft holder or not, so we will check his balance across all of\\r\\n    //NFT contracts\\r\\n    if (poolId == 1) {\\r\\n      require(\\r\\n        checkIfHoldsNFT(msg.sender) == true,\\r\\n        \\\"You cant stake in nft pool, since you dont have any nfts!\\\"\\r\\n      );\\r\\n    }\\r\\n\\r\\n    //Updating staker profile\\r\\n    //first we save staker profile in memory to save a huge amount of gas!\\r\\n    StakeProfile memory profile = stakers[msg.sender][poolId];\\r\\n\\r\\n    //Updating total staked and also lock time\\r\\n    profile.totalStaked += toStake;\\r\\n    profile.unlockTime = block.timestamp + targetPool.LockTime;\\r\\n    if (profile.stakingStart == 0) {\\r\\n      profile.stakingStart = block.timestamp;\\r\\n      profile.lastClaimTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    //Saving profile back to storage!\\r\\n    stakers[msg.sender][poolId] = profile;\\r\\n    poolStaked[poolId] += toStake;\\r\\n\\r\\n    //finally we transfer the tokens to the pool\\r\\n    totalStaked += toStake;\\r\\n    stakingToken.safeTransferFrom(msg.sender, address(this), toStake);\\r\\n\\r\\n    timeVolumeRegistery.submitNewVolume(getPoolStakedTokens(2));\\r\\n\\r\\n   StakerInfo memory stakerInfo;\\r\\n        stakerInfo.stakerAddress = msg.sender;\\r\\n        stakerInfo.stakingAmount = toStake;\\r\\n        stakerInfo.poolId = poolId;\\r\\n        allStakers.push(stakerInfo);\\r\\n\\r\\n    emit Staked(msg.sender, toStake, poolId);\\r\\n  }\\r\\n\\r\\n\\r\\n  function changeMinUnstakeTime(uint256 _poolId, uint256 _newMinUnstakeTime) external onlyOwner {\\r\\n    require(_poolId < 3, \\\"Invalid Pool!\\\");\\r\\n    Pools[_poolId].minUnstakeTime = _newMinUnstakeTime;\\r\\n}\\r\\n\\r\\n  function Unstake(uint256 _poolId, uint256 _toUnstake) public {\\r\\n    StakingPool memory targetPool = Pools[_poolId];\\r\\n    StakeProfile memory profile = stakers[msg.sender][_poolId];\\r\\n\\r\\n    require(profile.totalStaked > 0, \\\"You did not stake any 8Bit!\\\");\\r\\n    require(_poolId < 3, \\\"Invalid Pool!\\\");\\r\\n    require(_toUnstake <= profile.totalStaked, \\\"Insufficient staking balance!\\\");\\r\\n\\r\\n   require(\\r\\n            block.timestamp >= profile.stakingStart + Pools[_poolId].minUnstakeTime,\\r\\n            \\\"You can not unstake before minUnstakeTime\\\"\\r\\n        );\\r\\n\\r\\n \\r\\n\\r\\n      // for (uint256 i = 0; i < allStakers.length; i++) {\\r\\n      //       if (\\r\\n      //           allStakers[i].stakerAddress == msg.sender &&\\r\\n      //           allStakers[i].poolId == _poolId\\r\\n      //       ) {\\r\\n      //           allStakers[i] = allStakers[allStakers.length - 1];\\r\\n      //           allStakers.pop();\\r\\n      //           break;\\r\\n      //       }\\r\\n      //   }\\r\\n\\r\\n \\r\\n\\r\\n    profile.totalStaked -= _toUnstake;\\r\\n    profile.lastClaimTime = block.timestamp;\\r\\n    if (profile.totalStaked == 0) {\\r\\n      profile.unlockTime = 0;\\r\\n      profile.stakingStart = 0;\\r\\n      profile.lastClaimTime = 0;\\r\\n      if (_poolId == 2) {\\r\\n        creditFacility.resetBorrower(msg.sender);\\r\\n      }\\r\\n    }\\r\\n    totalStaked -= _toUnstake;\\r\\n\\r\\n    stakers[msg.sender][_poolId] = profile;\\r\\n    poolStaked[_poolId] -= _toUnstake;\\r\\n\\r\\n    stakingToken.safeTransfer(msg.sender, _toUnstake);\\r\\n\\r\\n for (uint256 i = 0; i < allStakers.length; i++) {\\r\\n        if (\\r\\n            allStakers[i].stakerAddress == msg.sender &&\\r\\n            allStakers[i].poolId == _poolId\\r\\n        ) {\\r\\n            allStakers[i].stakingAmount -= _toUnstake;\\r\\n            if (allStakers[i].stakingAmount == 0) {\\r\\n                // Remove the staker from the list if staking amount becomes zero\\r\\n                allStakers[i] = allStakers[allStakers.length - 1];\\r\\n                allStakers.pop();\\r\\n            }\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    timeVolumeRegistery.submitNewVolume(getPoolStakedTokens(2));\\r\\n    emit Unstaked(msg.sender, _toUnstake, _poolId);\\r\\n  }\\r\\n\\r\\n\\r\\n  function emergencyUnstake(uint256 _poolId) public {\\r\\n    // Saving our target pool & staker profile in memory to save gas!\\r\\n    StakeProfile memory profile = stakers[msg.sender][_poolId];\\r\\n\\r\\n    require(profile.totalStaked > 0, \\\"You did not stake any 8Bit!\\\");\\r\\n    require(_poolId < 3, \\\"Invalid Pool!\\\");\\r\\n\\r\\n    // Calculate penalty amount\\r\\n    uint256 penaltyAmount = (profile.totalStaked * penaltyPercentage) / 100;\\r\\n      uint256 stakedamt = profile.totalStaked;\\r\\n    // Deduct penalty from unstaked amount\\r\\n    uint256 amountToUnstakeAfterPenalty = stakedamt - penaltyAmount;\\r\\n\\r\\n    // Transfer the remaining unstaked amount after penalty\\r\\n    profile.totalStaked -= stakedamt;\\r\\n    totalStaked -= stakedamt;\\r\\n    profile.unlockTime = 0;\\r\\n    profile.stakingStart = 0;\\r\\n    profile.lastClaimTime = 0;\\r\\n    stakers[msg.sender][_poolId] = profile;\\r\\n    stakingToken.safeTransfer(msg.sender, amountToUnstakeAfterPenalty);\\r\\n\\r\\n    address contractOwner = owner(); \\r\\n    stakingToken.safeTransfer(contractOwner, penaltyAmount);\\r\\n\\r\\n\\r\\n    poolStaked[_poolId] -=stakedamt;\\r\\n\\r\\n for (uint256 i = 0; i < allStakers.length; i++) {\\r\\n        if (\\r\\n            allStakers[i].stakerAddress == msg.sender &&\\r\\n            allStakers[i].poolId == _poolId\\r\\n        ) {\\r\\n            allStakers[i].stakingAmount -= profile.totalStaked;\\r\\n            if (allStakers[i].stakingAmount == 0) {\\r\\n                // Remove the staker from the list if staking amount becomes zero\\r\\n                allStakers[i] = allStakers[allStakers.length - 1];\\r\\n                allStakers.pop();\\r\\n            }\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    // Emit the EmergencyWithdrawed event\\r\\n    emit EmergencyWithdrawed(msg.sender, _poolId);\\r\\n  }\\r\\n\\r\\n  // Function to change the penalty percentage\\r\\n  function changeTransferPercentage(uint256 _newTransferPercentage) external onlyOwner {\\r\\n    require(_newTransferPercentage <= 100, \\\"Invalid penalty percentage\\\");\\r\\n    transferPercentage = _newTransferPercentage;\\r\\n  }\\r\\n\\r\\n    function changePenaltyPercentage(uint256 _newPenaltyPercentage) external onlyOwner {\\r\\n    require(_newPenaltyPercentage <= 100, \\\"Invalid penalty percentage\\\");\\r\\n    penaltyPercentage = _newPenaltyPercentage;\\r\\n  }\\r\\n\\r\\n\\r\\n  function claimRewards(uint256 _poolId) public {\\r\\n    StakeProfile memory profile = stakers[msg.sender][_poolId];\\r\\n    require(profile.totalStaked > 0, \\\"You did not stake any 8Bit!\\\");\\r\\n\\r\\n    if (_poolId == 2) {\\r\\n      uint256 borrowIndex = creditFacility.getBorrowTime(msg.sender);\\r\\n      uint256 borrowStatus = creditFacility.getBorrowerStatus(\\r\\n        msg.sender,\\r\\n        borrowIndex\\r\\n      );\\r\\n      require(\\r\\n        borrowStatus != 1 && borrowStatus != 2,\\r\\n        \\\"You cant claim rewards!\\\"\\r\\n      );\\r\\n    }\\r\\n\\r\\n    uint256 rewards = getRewards(msg.sender, _poolId);\\r\\n    profile.lastClaimTime = block.timestamp;\\r\\n    profile.totalClaimed += rewards;\\r\\n    stakers[msg.sender][_poolId] = profile;\\r\\n\\r\\n    stakingToken.safeTransferFrom(stakingVault, msg.sender, rewards);\\r\\n\\r\\n    timeVolumeRegistery.submitNewVolume(getPoolStakedTokens(2));\\r\\n    emit Claimed(msg.sender, rewards);\\r\\n  }\\r\\n\\r\\n  //Emergency withdraw only for standard and nft pools\\r\\n  function emergencyWithdraw(uint256 _poolId) public {\\r\\n    //Saving our target pool & staker profile in memory to save gas!\\r\\n    StakeProfile memory profile = stakers[msg.sender][_poolId];\\r\\n\\r\\n    require(profile.totalStaked > 0, \\\"You did not stake any 8Bit!\\\");\\r\\n\\r\\n    if (_poolId == 2) {\\r\\n      require(\\r\\n        profile.unlockTime <= block.timestamp,\\r\\n        \\\"You can not unstake now!\\\"\\r\\n      );\\r\\n      uint256 borrowIndex = creditFacility.getBorrowTime(msg.sender);\\r\\n      uint256 borrowStatus = creditFacility.getBorrowerStatus(\\r\\n        msg.sender,\\r\\n        borrowIndex\\r\\n      );\\r\\n      require(\\r\\n        borrowStatus != 1 && borrowStatus != 2,\\r\\n        \\\"You are in delay for repaying BUSD, so you can not unstake!\\\"\\r\\n      );\\r\\n    }\\r\\n\\r\\n    uint256 amountStaked = profile.totalStaked;\\r\\n    profile.totalStaked -= amountStaked;\\r\\n    totalStaked -= amountStaked;\\r\\n    profile.unlockTime = 0;\\r\\n    profile.stakingStart = 0;\\r\\n    profile.lastClaimTime = 0;\\r\\n    stakers[msg.sender][_poolId] = profile;\\r\\n    stakingToken.safeTransfer(msg.sender, amountStaked);\\r\\n    poolStaked[_poolId] -= amountStaked;\\r\\n    timeVolumeRegistery.submitNewVolume(getPoolStakedTokens(2));\\r\\n    emit EmergencyWithdrawed(msg.sender, _poolId);\\r\\n  }\\r\\n\\r\\n  function penaltyCreditPoolStaker(\\r\\n    address _creditPoolStaker,\\r\\n    address _to\\r\\n  ) external onlyOwner {\\r\\n    //Getting Stake Profile\\r\\n    StakeProfile memory profile = stakers[_creditPoolStaker][2];\\r\\n    uint256 rewards = getRewards(_creditPoolStaker, 2);\\r\\n    uint256 staked = profile.totalStaked;\\r\\n    uint256 borrowIndex = creditFacility.getBorrowTime(_creditPoolStaker);\\r\\n    uint256 borrowStatus = creditFacility.getBorrowerStatus(\\r\\n      _creditPoolStaker,\\r\\n      borrowIndex\\r\\n    );\\r\\n    require(borrowStatus == 2, \\\"You can not penalty this staker yet!\\\");\\r\\n    creditFacility.resetBorrower(_creditPoolStaker);\\r\\n    profile.totalStaked = 0;\\r\\n    profile.unlockTime = 0;\\r\\n    profile.stakingStart = 0;\\r\\n    profile.lastClaimTime = 0;\\r\\n    totalStaked -= staked;\\r\\n    stakingToken.safeTransfer(_to, staked);\\r\\n    stakingToken.safeTransferFrom(stakingVault, _to, rewards);\\r\\n    stakers[_creditPoolStaker][2] = profile;\\r\\n    poolStaked[2] -= staked;\\r\\n    timeVolumeRegistery.submitNewVolume(getPoolStakedTokens(2));\\r\\n    emit Penaltied(_creditPoolStaker, staked);\\r\\n  }\\r\\n\\r\\n  function massPenaltyCreditPoolStakers(\\r\\n    address[] memory _creditPoolStakers,\\r\\n    address _to\\r\\n  ) external onlyOwner {\\r\\n    //Getting Stake Profile\\r\\n    uint256 borrowIndex;\\r\\n    uint256 borrowStatus;\\r\\n    uint256 rewards;\\r\\n    uint256 staked;\\r\\n    address staker;\\r\\n    uint256 totalStakePenaltied = 0;\\r\\n    uint256 totalRewardsPenaltied = 0;\\r\\n    StakeProfile memory profile;\\r\\n    for (uint256 i = 0; i < _creditPoolStakers.length; i++) {\\r\\n      staker = _creditPoolStakers[i];\\r\\n      profile = stakers[staker][2];\\r\\n      borrowIndex = creditFacility.getBorrowTime(staker);\\r\\n      borrowStatus = creditFacility.getBorrowerStatus(staker, borrowIndex);\\r\\n      if (borrowStatus == 2) {\\r\\n        rewards = getRewards(staker, 2);\\r\\n        creditFacility.resetBorrower(staker);\\r\\n        staked = profile.totalStaked;\\r\\n        profile.totalStaked = 0;\\r\\n        profile.unlockTime = 0;\\r\\n        profile.stakingStart = 0;\\r\\n        profile.lastClaimTime = 0;\\r\\n        totalStaked -= staked;\\r\\n        totalStakePenaltied += staked;\\r\\n        totalRewardsPenaltied += rewards;\\r\\n        poolStaked[2] -= staked;\\r\\n        emit Penaltied(staker, staked);\\r\\n        stakers[staker][2] = profile;\\r\\n      } else {\\r\\n        continue;\\r\\n      }\\r\\n    }\\r\\n    stakingToken.safeTransfer(_to, totalStakePenaltied);\\r\\n    stakingToken.safeTransferFrom(stakingVault, _to, totalRewardsPenaltied);\\r\\n    timeVolumeRegistery.submitNewVolume(getPoolStakedTokens(2));\\r\\n  }\\r\\n\\r\\n  function getRewards(\\r\\n    address _staker,\\r\\n    uint256 _poolId\\r\\n  ) public view returns (uint256) {\\r\\n    require(_poolId < 3, \\\"Invalid Pool!\\\");\\r\\n\\r\\n    StakeProfile memory profile = stakers[_staker][_poolId];\\r\\n    uint256 startTime = profile.lastClaimTime;\\r\\n    uint256 endTime = block.timestamp;\\r\\n    uint256 totalRewards;\\r\\n\\r\\n    if (profile.totalStaked == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    if (startTime == endTime) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    if (_poolId == 2) {\\r\\n      uint256 borrowIndex = creditFacility.getBorrowTime(_staker);\\r\\n      uint256 borrowStatus = creditFacility.getBorrowerStatus(\\r\\n        _staker,\\r\\n        borrowIndex\\r\\n      );\\r\\n      if (borrowStatus == 1 || borrowStatus == 2) {\\r\\n        startTime = profile.lastClaimTime;\\r\\n        endTime = profile.stakingStart + 30 days;\\r\\n      } else if (borrowStatus == 3) {\\r\\n        if (profile.lastClaimTime < profile.stakingStart + 30 days) {\\r\\n          uint256 repaidTime = creditFacility.getRepaidTime(\\r\\n            _staker,\\r\\n            borrowIndex\\r\\n          );\\r\\n          totalRewards += _calculateRewardsTimeRange(\\r\\n            _staker,\\r\\n            _poolId,\\r\\n            profile.lastClaimTime,\\r\\n            profile.stakingStart + 30 days\\r\\n          );\\r\\n          startTime = repaidTime;\\r\\n          endTime = block.timestamp;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    totalRewards += _calculateRewardsTimeRange(\\r\\n      _staker,\\r\\n      _poolId,\\r\\n      startTime,\\r\\n      endTime\\r\\n    );\\r\\n    return totalRewards;\\r\\n  }\\r\\n\\r\\n  function _calculateRewardsTimeRange(\\r\\n    address _staker,\\r\\n    uint256 _poolId,\\r\\n    uint256 _startTime,\\r\\n    uint256 _endTime\\r\\n  ) internal view returns (uint256) {\\r\\n    StakeProfile memory profile = stakers[_staker][_poolId];\\r\\n    if (_poolId == 1) {\\r\\n      if (profile.totalStaked > 0) {\\r\\n        if (checkIfHoldsNFT(_staker) == false) {\\r\\n          _poolId = 0;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    APYCheckPoint[] memory array = apyCheckpoints;\\r\\n    uint256 startCheckPoint = findAPYAtTimestamp(_startTime);\\r\\n    uint256 endCheckPoint = findAPYAtTimestamp(_endTime);\\r\\n    uint256 endTime;\\r\\n    uint256 totalRewards;\\r\\n    if (startCheckPoint == endCheckPoint) {\\r\\n      return\\r\\n        calculateInteresetInSeconds(\\r\\n          profile.totalStaked,\\r\\n          array[startCheckPoint].APYs[_poolId],\\r\\n          _endTime - _startTime\\r\\n        ) - profile.totalStaked;\\r\\n    }\\r\\n    for (uint256 i = startCheckPoint; i <= endCheckPoint; i++) {\\r\\n      if (i == endCheckPoint) {\\r\\n        //if we are at last checkpoint\\r\\n        endTime = _endTime;\\r\\n      } else {\\r\\n        //if we are not at last checkpoint\\r\\n        endTime = array[i + 1].startTime;\\r\\n      }\\r\\n      totalRewards +=\\r\\n        calculateInteresetInSeconds(\\r\\n          profile.totalStaked,\\r\\n          array[i].APYs[_poolId],\\r\\n          endTime - _startTime\\r\\n        ) -\\r\\n        profile.totalStaked;\\r\\n      if (i < endCheckPoint) {\\r\\n        _startTime = array[i + 1].startTime;\\r\\n      }\\r\\n    }\\r\\n    return totalRewards;\\r\\n  }\\r\\n\\r\\n  function calculateInteresetInSeconds(\\r\\n    uint256 principal,\\r\\n    uint256 apy,\\r\\n    uint256 _seconds\\r\\n  ) internal pure returns (uint256) {\\r\\n    //Calculating the ratio per second\\r\\n    //ratio per seconds\\r\\n    uint256 _ratio = ratio(apy);\\r\\n    //Interest after _seconds\\r\\n    return accrueInterest(principal, _ratio, _seconds);\\r\\n  }\\r\\n\\r\\n  function ratio(uint256 n) internal pure returns (uint256) {\\r\\n    uint256 numerator = n * 10 ** 25;\\r\\n    uint256 denominator = 365 * 86400;\\r\\n    uint256 result = uint256(10 ** 27) + uint256(numerator / denominator);\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  function accrueInterest(\\r\\n    uint _principal,\\r\\n    uint _rate,\\r\\n    uint _age\\r\\n  ) internal pure returns (uint) {\\r\\n    return rmul(_principal, rpow(_rate, _age));\\r\\n  }\\r\\n\\r\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return (a & b) + (a ^ b) / 2;\\r\\n  }\\r\\n\\r\\n  function findAPYAtTimestamp(uint256 element) internal view returns (uint256) {\\r\\n    APYCheckPoint[] memory array = apyCheckpoints;\\r\\n    if (array.length == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    uint256 low = 0;\\r\\n    uint256 high = array.length;\\r\\n    while (low < high) {\\r\\n      uint256 mid = average(low, high);\\r\\n      // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\r\\n      // because Math.average rounds down (it does integer division with truncation).\\r\\n      if (array[mid].startTime > element) {\\r\\n        high = mid;\\r\\n      } else {\\r\\n        low = mid + 1;\\r\\n      }\\r\\n    }\\r\\n    if (low > 0) {\\r\\n      return low - 1;\\r\\n    }\\r\\n    return low;\\r\\n  }\\r\\n\\r\\n  function checkIfHoldsNFT(address _staker) public view returns (bool) {\\r\\n    //Saving Array To Memory To Save A Huge Amount Of Gas!\\r\\n    address[] memory nfts = NFTs;\\r\\n    if (nfts.length == 0) {\\r\\n      return false;\\r\\n    }\\r\\n\\r\\n    for (uint256 i = 0; i < nfts.length; i++) {\\r\\n      if (IERC721(nfts[i]).balanceOf(_staker) > 0) {\\r\\n        return true;\\r\\n      }\\r\\n    }\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  function getVolumeAtTimeStamp(uint256 ts) external view returns (uint256) {\\r\\n    return timeVolumeRegistery.getVolume(ts);\\r\\n  }\\r\\n\\r\\n  function getLastWeekVolume() external view returns (uint256[] memory) {\\r\\n    return timeVolumeRegistery.getlastWeekVolume();\\r\\n  }\\r\\n\\r\\n  //Getters\\r\\n  function getPoolStakedTokens(uint256 _poolId) public view returns (uint256) {\\r\\n    return poolStaked[_poolId];\\r\\n  }\\r\\n\\r\\n  function getTotalStaked(\\r\\n    address _staker,\\r\\n    uint256 _poolId\\r\\n  ) public view returns (uint256) {\\r\\n    return stakers[_staker][_poolId].totalStaked;\\r\\n  }\\r\\n\\r\\n  function getStakerEndTime(\\r\\n    address _staker,\\r\\n    uint256 _poolId\\r\\n  ) public view returns (uint256) {\\r\\n    return stakers[_staker][_poolId].unlockTime;\\r\\n  }\\r\\n\\r\\n  function getStakerStartTime(\\r\\n    address _staker,\\r\\n    uint256 _poolId\\r\\n  ) public view returns (uint256) {\\r\\n    return stakers[_staker][_poolId].stakingStart;\\r\\n  }\\r\\n\\r\\n  function getRemainingStakeTime(\\r\\n    address _staker,\\r\\n    uint256 _poolId\\r\\n  ) public view returns (uint256) {\\r\\n    if (block.timestamp >= getStakerEndTime(_staker, _poolId)) {\\r\\n      return 0;\\r\\n    }\\r\\n    return getStakerEndTime(_staker, _poolId) - block.timestamp;\\r\\n  }\\r\\n\\r\\n  function getStakerLastClaimTime(\\r\\n    address _staker,\\r\\n    uint256 _poolId\\r\\n  ) public view returns (uint256) {\\r\\n    return stakers[_staker][_poolId].lastClaimTime;\\r\\n  }\\r\\n\\r\\n  function getAPYCheckPoint(\\r\\n    uint256 index\\r\\n  ) public view returns (APYCheckPoint memory) {\\r\\n    return apyCheckpoints[index];\\r\\n  }\\r\\n\\r\\n  function getTotalClaimed(\\r\\n    address _staker,\\r\\n    uint256 _poolId\\r\\n  ) public view returns (uint256) {\\r\\n    return stakers[_staker][_poolId].totalClaimed;\\r\\n  }\\r\\n\\r\\n  function getPoolAPY(uint256 _poolId) public view returns (uint256) {\\r\\n    return Pools[_poolId].APY;\\r\\n  }\\r\\n\\r\\n  function getPoolMinToEnter(uint256 _poolId) public view returns (uint256) {\\r\\n    return Pools[_poolId].minToStake;\\r\\n  }\\r\\n  \\r\\n\\r\\n   event ReflectionSent(address indexed staker, uint256 reflectionAmount);\\r\\n\\r\\n  // Mapping to track claimed reflection for each staker\\r\\n  mapping(address => uint256) public claimedReflection;\\r\\n\\r\\n  // Function to send reflection to stakers\\r\\n   function sendReflection() external onlyOwner {\\r\\n    // Get the total token balance of the contract\\r\\n    uint256 totalTokenBalance = stakingToken.balanceOf(address(this));\\r\\n\\r\\n    // Calculate the reflection amount\\r\\n    uint256 reflectionAmount = totalTokenBalance - (totalStaked* transferPercentage /100);\\r\\n\\r\\n\\r\\n        totalReflectionSent += reflectionAmount;\\r\\n\\r\\n    // Iterate through all stakers and send reflections based on their staked amount ratio\\r\\n    for (uint256 i = 0; i < allStakers.length; i++) {\\r\\n      address stakerAddress = allStakers[i].stakerAddress;\\r\\n      uint256 stakerStakedAmount = allStakers[i].stakingAmount;\\r\\n\\r\\n      if (stakerStakedAmount > 0) {\\r\\n        // Calculate the reflection for the staker based on their staked amount ratio\\r\\n        uint256 stakerReflection = (stakerStakedAmount * reflectionAmount) / totalStaked;\\r\\n\\r\\n        // Transfer the reflection amount to the staker\\r\\n        stakingToken.safeTransfer(stakerAddress, stakerReflection);\\r\\n\\r\\n\\r\\n        claimedReflection[stakerAddress] += stakerReflection;\\r\\n\\r\\n        // Emit an event for the reflection sent\\r\\n        emit ReflectionSent(stakerAddress, stakerReflection);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n // Function to calculate remaining reflection for a staker\\r\\nfunction calculateRemainingReflection(address staker) external view returns (uint256) {\\r\\n  // Get the total token balance of the contract\\r\\n  uint256 totalTokenBalance = stakingToken.balanceOf(address(this));\\r\\n\\r\\n  // Calculate the reflection amount\\r\\n  uint256 reflectionAmount = totalTokenBalance - (totalStaked * transferPercentage /100);\\r\\n\\r\\n  // Get the staker's staked amount\\r\\n  uint256 stakerStakedAmount;\\r\\n\\r\\n  for (uint256 i = 0; i < allStakers.length; i++) {\\r\\n    if (allStakers[i].stakerAddress == staker) {\\r\\n      stakerStakedAmount = allStakers[i].stakingAmount;\\r\\n      break;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  if (stakerStakedAmount == 0) {\\r\\n    // If staker has no stake, remaining reflection is zero\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  // Calculate the remaining reflection for the staker based on their staked amount ratio\\r\\n  uint256 remainingReflection = (stakerStakedAmount * reflectionAmount) / totalStaked;\\r\\n\\r\\n  return remainingReflection;\\r\\n}\\r\\n\\r\\n\\r\\n  // Function to get the claimed reflection for a staker\\r\\n  function getClaimedReflection(address staker) external view returns (uint256) {\\r\\n    return claimedReflection[staker];\\r\\n  }\\r\\n  \\r\\n \\r\\n\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/8Bit-Staking/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\r\\n            // decrementing then incrementing.\\r\\n            _balances[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        unchecked {\\r\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\r\\n            _balances[account] += amount;\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\r\\n            _totalSupply -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\"\r\n    },\r\n    \"contracts/8Bit-Staking/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\"\r\n    },\r\n    \"contracts/8Bit-Staking/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\"\r\n    },\r\n    \"contracts/8Bit-Staking/IERC20C.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\"\r\n    },\r\n    \"contracts/8Bit-Staking/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20C.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"\r\n    },\r\n    \"contracts/8Bit-Staking/IERC721C.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\r\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\r\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n}\"\r\n    },\r\n    \"contracts/8Bit-Staking/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/8Bit-Staking/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20C.sol\\\";\\r\\nimport \\\"./draft-IERC20Permit.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safePermit(\\r\\n        IERC20Permit token,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        uint256 nonceBefore = token.nonces(owner);\\r\\n        token.permit(owner, spender, value, deadline, v, r, s);\\r\\n        uint256 nonceAfter = token.nonces(owner);\\r\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/8Bit-Staking/TimeVolumeRegistery.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\npragma solidity 0.8.8;\\r\\n\\r\\ncontract dateTime {\\r\\n\\r\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\r\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\r\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\r\\n    int256 constant OFFSET19700101 = 2440588;\\r\\n\\r\\n    uint256 constant DOW_MON = 1;\\r\\n    uint256 constant DOW_TUE = 2;\\r\\n    uint256 constant DOW_WED = 3;\\r\\n    uint256 constant DOW_THU = 4;\\r\\n    uint256 constant DOW_FRI = 5;\\r\\n    uint256 constant DOW_SAT = 6;\\r\\n    uint256 constant DOW_SUN = 7;\\r\\n\\r\\n    function _daysToDate(uint256 _days) internal pure returns (uint256 year, uint256 month, uint256 day) {\\r\\n        unchecked {\\r\\n            int256 __days = int256(_days);\\r\\n\\r\\n            int256 L = __days + 68569 + OFFSET19700101;\\r\\n            int256 N = (4 * L) / 146097;\\r\\n            L = L - (146097 * N + 3) / 4;\\r\\n            int256 _year = (4000 * (L + 1)) / 1461001;\\r\\n            L = L - (1461 * _year) / 4 + 31;\\r\\n            int256 _month = (80 * L) / 2447;\\r\\n            int256 _day = L - (2447 * _month) / 80;\\r\\n            L = _month / 11;\\r\\n            _month = _month + 2 - 12 * L;\\r\\n            _year = 100 * (N - 49) + _year + L;\\r\\n\\r\\n            year = uint256(_year);\\r\\n            month = uint256(_month);\\r\\n            day = uint256(_day);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\r\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    function getMonth(uint256 timestamp) public pure returns (uint256 month) {\\r\\n        (, month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    function getDay(uint256 timestamp) public pure returns (uint256 day) {\\r\\n        (,, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    function getHour(uint256 timestamp) public pure returns (uint256 hour) {\\r\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\r\\n        hour = secs / SECONDS_PER_HOUR;\\r\\n    }\\r\\n\\r\\n    function getMinute(uint256 timestamp) public pure returns (uint256 minute) {\\r\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\r\\n        minute = secs / SECONDS_PER_MINUTE;\\r\\n    }\\r\\n\\r\\n    function getSecond(uint256 timestamp) public pure returns (uint256 second) {\\r\\n        second = timestamp % SECONDS_PER_MINUTE;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract TimeVolumeRegistery is Ownable, dateTime{\\r\\n\\r\\n    mapping(uint256=>mapping(uint256=>mapping(uint256=>uint256))) timeVolume;\\r\\n    mapping(uint256=>mapping(uint256=>mapping(uint256=>bool))) isZero;\\r\\n\\r\\n    uint256 public lastSubmissionYear;\\r\\n    uint256 public lastSubmissionMonth;\\r\\n    uint256 public lastSubmissionDay;\\r\\n    uint256 public lastSubmitedVolume;\\r\\n    uint256 public firstNonZeroSubmission;\\r\\n    \\r\\n\\r\\n    function submitNewVolume(uint256 volume) external onlyOwner{\\r\\n        uint256 submitedyear = getYear(block.timestamp);\\r\\n        uint256 submitedMonth = getMonth(block.timestamp);\\r\\n        uint256 submitedDay = getDay(block.timestamp); \\r\\n        if(submitedyear > lastSubmissionYear){\\r\\n            lastSubmissionYear = submitedyear;\\r\\n            lastSubmissionMonth = submitedMonth;\\r\\n            lastSubmissionDay = submitedDay;\\r\\n        }\\r\\n        if(submitedMonth > lastSubmissionMonth){\\r\\n            lastSubmissionMonth = submitedMonth;\\r\\n            lastSubmissionDay = submitedDay;\\r\\n        }\\r\\n        if(submitedDay > lastSubmissionDay){\\r\\n            lastSubmissionDay = submitedDay;\\r\\n        }\\r\\n\\r\\n        submitedyear = lastSubmissionYear;\\r\\n        submitedMonth = lastSubmissionMonth;\\r\\n        submitedDay = lastSubmissionDay;\\r\\n\\r\\n        timeVolume[submitedyear][submitedMonth][submitedDay] = volume;\\r\\n\\r\\n        if(volume == 0){\\r\\n            isZero[submitedyear][submitedMonth][submitedDay] = true;\\r\\n        }else{\\r\\n            isZero[submitedyear][submitedMonth][submitedDay] = false;\\r\\n            if(firstNonZeroSubmission == 0){\\r\\n                firstNonZeroSubmission = block.timestamp;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        lastSubmitedVolume = volume;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getVolume(uint256 ts) external view returns(uint256) {\\r\\n        uint256 year = getYear(ts);\\r\\n        uint256 month = getMonth(ts);\\r\\n        uint256 day = getDay(ts);        \\r\\n        return timeVolume[year][month][day];\\r\\n    }\\r\\n\\r\\n    function getlastWeekVolume() external view returns(uint256[] memory) {\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        uint256 year;\\r\\n        uint256 month;\\r\\n        uint256 day;\\r\\n        uint256 dayVolume;\\r\\n        bool isZeroVolume;\\r\\n        uint256 lastVolume = lastSubmitedVolume;\\r\\n        uint256[] memory volumes = new uint256[](7);\\r\\n        for(uint i = 0; i < 7; i++){\\r\\n            year = getYear(currentTime);\\r\\n            month = getMonth(currentTime);\\r\\n            day = getDay(currentTime);\\r\\n            dayVolume = timeVolume[year][month][day];\\r\\n            isZeroVolume = isZero[year][month][day]; \\r\\n            if(dayVolume != lastVolume){\\r\\n                if(dayVolume == 0){\\r\\n                    if(isZeroVolume){\\r\\n                        lastVolume = dayVolume;\\r\\n                    }else if(firstNonZeroSubmission > currentTime) {\\r\\n                        volumes[i] = dayVolume;\\r\\n                    }else{\\r\\n                        volumes[i] = lastVolume;\\r\\n                    }\\r\\n                }else{\\r\\n                    volumes[i] = dayVolume;\\r\\n                    lastVolume = dayVolume;\\r\\n                } \\r\\n            }else{\\r\\n                volumes[i] = lastVolume; \\r\\n            }\\r\\n            currentTime -= 1 days; //going back by 1 day\\r\\n        }\\r\\n        return volumes;\\r\\n    } \\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"penaltyAmount\",\"type\":\"uint256\"}],\"name\":\"Penaltied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reflectionAmount\",\"type\":\"uint256\"}],\"name\":\"ReflectionSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"StakingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newNFT\",\"type\":\"address\"}],\"name\":\"AddNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NFTs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardsFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toStake\",\"type\":\"uint256\"}],\"name\":\"StakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StartStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toUnstake\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allStakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"calculateRemainingReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newAPY\",\"type\":\"uint256\"}],\"name\":\"changeAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMin\",\"type\":\"uint256\"}],\"name\":\"changeMinTokensToEnter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMinUnstakeTime\",\"type\":\"uint256\"}],\"name\":\"changeMinUnstakeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPenaltyPercentage\",\"type\":\"uint256\"}],\"name\":\"changePenaltyPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTransferPercentage\",\"type\":\"uint256\"}],\"name\":\"changeTransferPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"checkIfHoldsNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditFacility\",\"outputs\":[{\"internalType\":\"contract ICreditFacility\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAPYCheckPoint\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[3]\",\"name\":\"APYs\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"internalType\":\"struct EightBitChainStaking.APYCheckPoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllStakers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"internalType\":\"struct EightBitChainStaking.StakerInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getClaimedReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastWeekVolume\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolMinToEnter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getRemainingStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getStakerEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getStakerLastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getStakerStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"getVolumeAtTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_creditPoolStakers\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"massPenaltyCreditPoolStakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditPoolStaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"penaltyCreditPoolStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NFT\",\"type\":\"address\"}],\"name\":\"removeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendReflection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"facility\",\"type\":\"address\"}],\"name\":\"setCreditFacility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_penaltyReceiver\",\"type\":\"address\"}],\"name\":\"setPenaltyReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valut\",\"type\":\"address\"}],\"name\":\"setStakingVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeVolumeRegistery\",\"outputs\":[{\"internalType\":\"contract TimeVolumeRegistery\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReflectionSent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EightBitChainStaking", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000bc6378faae98fb2207bb6c35c0f8ce5846fd4c6c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}