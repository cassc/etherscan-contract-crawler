{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ninterface NBLInterface {\r\n  function transferFrom(address from, address to, uint256 amount) external;\r\n  function transfer(address to, uint256 amount) external;\r\n  function balanceOf(uint256 amount) external returns (uint256);\r\n}\r\n\r\ncontract NBLStaking {\r\n  struct info {\r\n    uint256 balance;\r\n    uint256 deposited;\r\n  }\r\n  mapping(address => info) public data;\r\n  uint256 public killed = 0;\r\n  uint256 public maxFee;\r\n  uint256 public APY;\r\n  uint256 public treasury;\r\n  address public owner;\r\n  NBLInterface public NBLToken;\r\n\r\n  event FeeChanged(uint256 amount);\r\n  event NBLAddressChanged(address nbl);\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  event Rewarded(address indexed user, uint256 amount);\r\n  event Staked(address indexed user, uint256 amount);\r\n  event Unstaked(address indexed user, uint256 amount);\r\n\r\n  constructor(address nbl, uint256 fee, uint256 apy) {\r\n    maxFee = fee;\r\n    APY = apy;\r\n    NBLToken = NBLInterface(nbl);\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(owner == msg.sender, \"ERROR: ONLY OWNER\");\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _owner) external onlyOwner {\r\n    owner = _owner;\r\n    emit OwnershipTransferred(msg.sender, owner);\r\n  }\r\n\r\n  function kill() external onlyOwner {\r\n    require(killed == 0, \"ERROR: ALREADY KILLED\");\r\n    killed = block.timestamp;\r\n  }\r\n\r\n  function changeFee(uint256 fee) external onlyOwner {\r\n    maxFee = fee;\r\n    emit FeeChanged(maxFee);\r\n  }\r\n\r\n  function setNBLAddress(address nbl) external onlyOwner {\r\n    NBLToken = NBLInterface(nbl);\r\n    emit NBLAddressChanged(nbl);\r\n  }\r\n\r\n  function getReward(address user) public view returns (uint256) {\r\n    uint256 day;\r\n    if (killed == 0) {\r\n      day = (block.timestamp - data[user].deposited) / 1 days;\r\n    } else {\r\n      day = (killed - data[user].deposited) / 1 days;\r\n    }\r\n    return (((data[user].balance * day) / 365) * APY) / 100;\r\n  }\r\n\r\n  function calcWithdrawAmount(address user) public view returns (uint256) {\r\n    uint256 day = (block.timestamp - data[user].deposited) / 1 days;\r\n    uint256 amount = data[user].balance + getReward(user);\r\n    if (day >= 30 || killed != 0) {\r\n      return amount;\r\n    } else {\r\n      return amount - (amount * maxFee - (amount * maxFee * day) / 30) / 100;\r\n    }\r\n  }\r\n\r\n  function stake(uint256 amount) external {\r\n    require(killed == 0, \"ERROR: PLEASE USE THE NEWER CONTRACT\");\r\n    NBLToken.transferFrom(msg.sender, address(this), amount);\r\n    uint256 reward = getReward(msg.sender);\r\n    emit Rewarded(msg.sender, reward);\r\n    emit Staked(msg.sender, amount);\r\n    data[msg.sender].balance += amount + reward;\r\n    data[msg.sender].deposited = block.timestamp;\r\n  }\r\n\r\n  function unstake() external {\r\n    require(data[msg.sender].balance > 0, \"ERROR: BALANCE\");\r\n    uint256 amount = calcWithdrawAmount(msg.sender);\r\n    if (amount < data[msg.sender].balance) {\r\n      treasury += data[msg.sender].balance - amount;\r\n    } else {\r\n      treasury -= amount - data[msg.sender].balance;\r\n    }\r\n    NBLToken.transfer(msg.sender, amount);\r\n    emit Rewarded(msg.sender, getReward(msg.sender));\r\n    emit Unstaked(msg.sender, amount);\r\n    data[msg.sender].balance = 0;\r\n    data[msg.sender].deposited = 0;\r\n  }\r\n\r\n  function emergencyWithdraw() external {\r\n    require(data[msg.sender].balance > 0, \"ERROR: BALANCE\");\r\n    uint256 amount = calcWithdrawAmount(msg.sender);\r\n    require(amount > data[msg.sender].balance && (amount - data[msg.sender].balance) > treasury, \"ERROR: YOU CAN USE THE NORMAL UNSTAKE\");\r\n    amount = data[msg.sender].balance + treasury;\r\n    NBLToken.transfer(msg.sender, amount);\r\n    emit Rewarded(msg.sender, treasury);\r\n    emit Unstaked(msg.sender, amount);\r\n    treasury = 0;\r\n    data[msg.sender].balance = 0;\r\n    data[msg.sender].deposited = 0;\r\n  }\r\n\r\n  function depositTreasury(uint256 amount) external onlyOwner {\r\n    NBLToken.transferFrom(msg.sender, address(this), amount);\r\n    treasury += amount;\r\n  }\r\n\r\n  function withdrawTreasury(uint256 amount) external onlyOwner {\r\n    require(treasury >= amount, \"ERROR: NOT ENOUGH FUNDS IN TREASURY\");\r\n    NBLToken.transfer(msg.sender, amount);\r\n    treasury -= amount;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nbl\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nbl\",\"type\":\"address\"}],\"name\":\"NBLAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NBLToken\",\"outputs\":[{\"internalType\":\"contract NBLInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calcWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nbl\",\"type\":\"address\"}],\"name\":\"setNBLAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NBLStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000faa0fc7b803919b091dbe5ff709b2dabb61b93d90000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://38856b4189636aa053955d1988cfa7cea680da047e54be1e5fa38b1fea6410f9"}