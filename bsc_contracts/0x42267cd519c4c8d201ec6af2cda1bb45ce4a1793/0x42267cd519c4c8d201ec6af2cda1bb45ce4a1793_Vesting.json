{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Vesting is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    address public stableCoin;\\n    address public vestToken;\\n    uint256 tokensAllocatedForSale;\\n\\n    event TokensAllocated(\\n        address indexed _to,\\n        uint256 indexed _tierId,\\n        uint256 _value\\n    );\\n\\n    event RemovedAllocatedTokens(\\n        address indexed _to,\\n        uint256 indexed _tierId,\\n        uint256 _value\\n    );\\n\\n    event TokensBought(\\n        address indexed _from,\\n        uint256 indexed _tierId,\\n        uint256 _value\\n    );\\n\\n    event TokensVested(\\n        address indexed _from,\\n        uint256 indexed _tierId,\\n        uint256 _value\\n    );\\n\\n    event TierCreated(\\n        uint256 _tierId,\\n        uint256 _maxTokensPerWallet,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _maxTokensForTier,\\n        uint256 _price,\\n        bool _isPrivate\\n    );\\n\\n    event TierUpdated(\\n        uint256 _tierId,\\n        uint256 _maxTokensPerWallet,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _maxTokensForTier,\\n        uint256 _price,\\n        bool _isPrivate\\n    );\\n\\n    event AddressWhitelistedStatus(\\n        address indexed _address,\\n        uint256 _tier,\\n        bool _isWhitelisted\\n    );\\n\\n    event AddDistributionMonthAndPercent(\\n        uint256 _tierId,\\n        uint256 _month,\\n        uint256 _percent\\n    );\\n\\n    event VestingTimeForTier(uint256 _tierId, uint256 _startTime);\\n\\n    uint256 public constant secondsInMonth = 30 days;\\n\\n    /*\\n     * Params\\n     * address - stablecoin token address\\n     * address - vesting token address\\n     *\\n     * Deploys Vesting contract\\n     */\\n\\n    constructor(address _stableCoin, address _vestToken) {\\n        stableCoin = _stableCoin;\\n        vestToken = _vestToken;\\n    }\\n\\n    struct PreSaleTierInfo {\\n        uint256 maxTokensPerWallet;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 maxTokensForTier;\\n        uint256 price;\\n        bool isPrivate;\\n        bool isAdminAllocation;\\n    }\\n\\n    struct TierVestingInfo {\\n        uint256 totalTokensBoughtForTier;\\n        uint256 vestingStartTime;\\n        uint256 totalAllocationDone;\\n    }\\n\\n    // tierId => month => percentage\\n    mapping(uint256 => mapping(uint256 => uint256)) public allocationPerMonth;\\n\\n    // tierId => TierVestingInfo\\n    mapping(uint256 => TierVestingInfo) public tierVestingInfo;\\n\\n    // user address => tierId => tokensBought\\n    mapping(address => mapping(uint256 => uint256)) public tokensBought;\\n\\n    // user address => tierId => tokensBought\\n    mapping(address => mapping(uint256 => bool)) public isAddressWhitelisted;\\n\\n    // user address => tierId => month => vestedMonth\\n    mapping(address => mapping(uint256 => uint256))\\n        public userVestedTokensMonth;\\n\\n    /*\\n     * list of pre sale tiers\\n     */\\n\\n    PreSaleTierInfo[] public tierInfo;\\n\\n    /*\\n     * Params\\n     * uint256 - How many tokens in total a wallet can buy?\\n     * uint256 - When does the sale for this tier start?\\n     * uint256 - When does the sale for this tier end?\\n     * uint256 - What is the total amount of tokens sold in this Tier?\\n     * uint256 - What is the price per one token?\\n     * bool - Do wallets need to be whitelisted?\\n     *\\n     * Adds new presale tier to the list (array)\\n     */\\n\\n    function createPreSaleTier(\\n        uint256 _maxTokensPerWallet,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _maxTokensForTier,\\n        uint256 _price,\\n        bool _isPrivate,\\n        bool _isAdminAllocation\\n    ) external onlyOwner {\\n        tokensAllocatedForSale += _maxTokensForTier;\\n        require(\\n            IERC20(vestToken).totalSupply() >= tokensAllocatedForSale,\\n            \\\"Over total supply limit.\\\"\\n        );\\n\\n        tierInfo.push(\\n            PreSaleTierInfo({\\n                maxTokensPerWallet: _maxTokensPerWallet,\\n                startTime: _startTime,\\n                endTime: _endTime,\\n                price: _price,\\n                maxTokensForTier: _maxTokensForTier,\\n                isPrivate: _isPrivate,\\n                isAdminAllocation: _isAdminAllocation\\n            })\\n        );\\n        emit TierCreated(\\n            tierInfo.length.sub(1),\\n            _maxTokensPerWallet,\\n            _startTime,\\n            _endTime,\\n            _maxTokensForTier,\\n            _price,\\n            _isPrivate\\n        );\\n    }\\n\\n    /*\\n     * Params\\n     * uint256 - What is ID of a Tier you want to update? (starting from 0)\\n     * uint256 - What\\n     * uint256 - How many tokens in total a wallet can buy?\\n     * uint256 - When does the sale for this tier start?\\n     * uint256 - When does the sale for this tier end?\\n     * uint256 - What is the total amount of tokens sold in this Tier?\\n     * uint256 - What is the price per one token?\\n     * bool - Do wallets need to be whitelisted?\\n     *\\n     * Updates Tier info\\n     * You can only update Tier, that has not started yet.\\n     */\\n\\n    function updatePreSaleTier(\\n        uint256 _tierId,\\n        uint256 _maxTokensPerWallet,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _maxTokensForTier,\\n        uint256 _price,\\n        bool _isPrivate\\n    ) external onlyOwner {\\n        tokensAllocatedForSale -= tierInfo[_tierId].maxTokensForTier;\\n        tokensAllocatedForSale += _maxTokensForTier;\\n        require(\\n            IERC20(vestToken).totalSupply() >= tokensAllocatedForSale,\\n            \\\"Over total supply limit.\\\"\\n        );\\n        require(\\n            tierInfo[_tierId].startTime > block.timestamp,\\n            \\\"Pre sale already in progress\\\"\\n        );\\n        tierInfo[_tierId].maxTokensPerWallet = _maxTokensPerWallet;\\n        tierInfo[_tierId].startTime = _startTime;\\n        tierInfo[_tierId].endTime = _endTime;\\n        tierInfo[_tierId].maxTokensForTier = _maxTokensForTier;\\n        tierInfo[_tierId].price = _price;\\n        tierInfo[_tierId].isPrivate = _isPrivate;\\n        emit TierUpdated(\\n            _tierId,\\n            _maxTokensPerWallet,\\n            _startTime,\\n            _endTime,\\n            _maxTokensForTier,\\n            _price,\\n            _isPrivate\\n        );\\n    }\\n\\n    /*\\n     * Returns number of tiers in the list\\n     */\\n\\n    function tierLength() external view returns (uint256) {\\n        return tierInfo.length;\\n    }\\n\\n    /*\\n     * Params\\n     * address - Who do you want to add to whitelist?\\n     * uint256 - What is ID of a Tier?\\n     *\\n     * Adds address to the whitelist of specific tier\\n     */\\n\\n    function whitelistAddress(address _address, uint256 _tierId)\\n        external\\n        onlyOwner\\n    {\\n        require(_tierId <= tierInfo.length, \\\"Invalid tier id\\\");\\n        require(tierInfo[_tierId].isPrivate, \\\"Tier needs to be private\\\");\\n        isAddressWhitelisted[_address][_tierId] = true;\\n        emit AddressWhitelistedStatus(_address, _tierId, true);\\n    }\\n\\n    /*\\n     * Params\\n     * address - Who do you want to remove from whitelist?\\n     * uint256 - What is ID of a Tier?\\n     *\\n     * Removes address from the whitelist of specific tier\\n     * Only users that have not bought any tokens can be removed\\n     */\\n\\n    function removeWhitelistAddress(address _address, uint256 _tierId)\\n        external\\n        onlyOwner\\n    {\\n        require(_tierId <= tierInfo.length, \\\"Invalid tier id\\\");\\n        require(\\n            tokensBought[msg.sender][_tierId] == 0,\\n            \\\"User already bought tokens\\\"\\n        );\\n        isAddressWhitelisted[_address][_tierId] = false;\\n        emit AddressWhitelistedStatus(_address, _tierId, false);\\n    }\\n\\n    /*\\n     * uint256 - What is ID of the Tier you want to set allocations?\\n     * uint256 - What month do you want to add allocation? (should be in the range 1 to 36)\\n     * uint256 - What is the allocation amount for this month? (can not be more than 10000)\\n     *\\n     * Function sets allocation for specific tier for specific month\\n     * You can not set allocation for the tier that has already started\\n     * When you finish setting allocation for this Tier, its' total allocation amount should be 10000\\n     */\\n\\n    function setDistributionPercent(\\n        uint256 _tierId,\\n        uint256 _month,\\n        uint256 _percent\\n    ) external onlyOwner {\\n        require(_month > 0, \\\"Invalid month number\\\");\\n        require(_month < 37, \\\"Invalid month number\\\");\\n        require(_tierId <= tierInfo.length, \\\"Invalid tier id\\\");\\n        require(\\n            tierVestingInfo[_tierId].vestingStartTime < block.timestamp,\\n            \\\"Vesting started\\\"\\n        );\\n        uint256 previousAllocations = allocationPerMonth[_tierId][_month];\\n\\n        tierVestingInfo[_tierId].totalAllocationDone = tierVestingInfo[_tierId]\\n            .totalAllocationDone\\n            .add(_percent)\\n            .sub(previousAllocations);\\n        allocationPerMonth[_tierId][_month] = _percent;\\n        require(\\n            tierVestingInfo[_tierId].totalAllocationDone <= 10000,\\n            \\\"Allocation cant be more than 10000\\\"\\n        );\\n        emit AddDistributionMonthAndPercent(_tierId, _month, _percent);\\n    }\\n\\n    /*\\n     * Params\\n     * uint256 - What is ID of a Tier, you want to set vesting start time for?\\n     * uint256 - When do you want to start vesting of this tier? (can not be smaller than Tier starting time)\\n     *\\n     * Sets vesting start time for a specific Tier\\n     * Total allocations of this Tier should already be equal 10000\\n     */\\n\\n    function setVestingTimeForTier(uint256 _tierId, uint256 _startTime)\\n        external\\n        onlyOwner\\n    {\\n        require(_tierId < tierInfo.length, \\\"Invalid tier id\\\");\\n        require(\\n            tierVestingInfo[_tierId].totalAllocationDone == 10000,\\n            \\\"Total allocation less than 10000\\\"\\n        );\\n        tierVestingInfo[_tierId].vestingStartTime = _startTime;\\n        emit VestingTimeForTier(_tierId, _startTime);\\n    }\\n\\n    /*\\n     * Params\\n     * uint256 - What is ID of a tier, from which you want to buy tokens?\\n     * uint256 - How many tokens do you want to buy?\\n     *\\n     * Function allows to pre-purchase vesting tokens in exchange for stable coins\\n     *\\n     * Function will fail if:\\n     *** Pre sale has not started or already is over\\n     *** Maximum tokens amount for tier of user walled was reached or will be exceeded after transaction\\n     *** User walled was not whitelisted\\n     */\\n\\n    function buyVestingTokens(uint256 _tierId, uint256 _numTokens) external {\\n        require(tx.origin == msg.sender, \\\"Wallets only!\\\");\\n        require(tierInfo[_tierId].isAdminAllocation == false, \\\"Wrong Tier\\\");\\n        require(\\n            tierInfo[_tierId].startTime < block.timestamp,\\n            \\\"Pre sale not yet started\\\"\\n        );\\n        require(tierInfo[_tierId].endTime > block.timestamp, \\\"Pre sale over\\\");\\n        require(\\n            tierVestingInfo[_tierId].totalTokensBoughtForTier.add(_numTokens) <=\\n                tierInfo[_tierId].maxTokensForTier,\\n            \\\"Cant buy more tokens for this tier\\\"\\n        );\\n        require(\\n            tokensBought[msg.sender][_tierId] + _numTokens <=\\n                tierInfo[_tierId].maxTokensPerWallet,\\n            \\\"You cant buy more tokens\\\"\\n        );\\n\\n        if (tierInfo[_tierId].isPrivate) {\\n            require(\\n                isAddressWhitelisted[msg.sender][_tierId],\\n                \\\"Not allowed to buy tokens\\\"\\n            );\\n        }\\n\\n        if (tierInfo[_tierId].price > 0) {\\n            uint256 totalTokenAmount = tierInfo[_tierId]\\n                .price\\n                .mul(_numTokens)\\n                .div(10e17);\\n            IERC20(stableCoin).transferFrom(\\n                msg.sender,\\n                address(this),\\n                totalTokenAmount\\n            );\\n        }\\n\\n        tokensBought[msg.sender][_tierId] = tokensBought[msg.sender][_tierId]\\n            .add(_numTokens);\\n        tierVestingInfo[_tierId].totalTokensBoughtForTier = tierVestingInfo[\\n            _tierId\\n        ].totalTokensBoughtForTier.add(_numTokens);\\n\\n        emit TokensBought(msg.sender, _tierId, _numTokens);\\n    }\\n\\n    /*\\n     * Params\\n     * address - Address to whom the tokens are allocated.\\n     * uint256 - What is ID of a tier, from which you want to buy tokens?\\n     * uint256 - How many tokens added to allocation?\\n     *\\n     * Admin allocated tokens for vesting to partners, seed buyers etc.\\n     *\\n     * Function will fail if:\\n     *** If the tier is not an admin allocation tier.\\n     *** If Tier has passed it's end date.\\n     */\\n\\n    function allocateVestingTokens(\\n        address _allocatedTo,\\n        uint256 _tierId,\\n        uint256 _numTokens\\n    ) external onlyOwner {\\n        require(tierInfo[_tierId].isAdminAllocation == true, \\\"Wrong Tier\\\");\\n        require(\\n            tierInfo[_tierId].endTime > block.timestamp,\\n            \\\"Allocation is over!\\\"\\n        );\\n        require(\\n            tierVestingInfo[_tierId].totalTokensBoughtForTier.add(_numTokens) <=\\n                tierInfo[_tierId].maxTokensForTier,\\n            \\\"Cant allocate more tokens for this tier\\\"\\n        );\\n\\n        tokensBought[_allocatedTo][_tierId] = tokensBought[_allocatedTo][\\n            _tierId\\n        ].add(_numTokens);\\n        tierVestingInfo[_tierId].totalTokensBoughtForTier = tierVestingInfo[\\n            _tierId\\n        ].totalTokensBoughtForTier.add(_numTokens);\\n\\n        emit TokensAllocated(_allocatedTo, _tierId, _numTokens);\\n    }\\n\\n    /*\\n     * Params\\n     * address - Address from whom the allocated tokes will be removed.\\n     * uint256 - What is ID of a tier, from which you want to buy tokens?\\n     * uint256 - How many tokens removed from allocation?\\n     *\\n     * Admin allocated tokens for vesting to partners, seed buyers etc.\\n     *\\n     * Function will fail if:\\n     *** If the tier is not an admin allocation tier.\\n     *** If Tier has passed it's end date.\\n     */\\n\\n    function removeAllocatedVestingTokens(\\n        address _allocatedTo,\\n        uint256 _tierId,\\n        uint256 _numTokens\\n    ) external onlyOwner {\\n        require(tierInfo[_tierId].isAdminAllocation == true, \\\"Wrong Tier\\\");\\n        require(\\n            tierInfo[_tierId].endTime > block.timestamp,\\n            \\\"Allocation is over!\\\"\\n        );\\n\\n        tokensBought[_allocatedTo][_tierId] = tokensBought[_allocatedTo][\\n            _tierId\\n        ].sub(_numTokens);\\n        tierVestingInfo[_tierId].totalTokensBoughtForTier = tierVestingInfo[\\n            _tierId\\n        ].totalTokensBoughtForTier.sub(_numTokens);\\n\\n        emit RemovedAllocatedTokens(_allocatedTo, _tierId, _numTokens);\\n    }\\n\\n    /*\\n     * Params\\n     * uint256 - What is ID of a Tier you want to vest tokens?\\n     *\\n     * Function vests tokens for specific tier and transfers them to user's address\\n     * Can be used multiple times - if there are still tokens left to vest, user will receive them\\n     *\\n     * Function will fail if:\\n     *** Vesting for tier has not started\\n     *** Allocation for tier is not 10000\\n     *** User has not bought any tokens\\n     *** User has already vested tokens\\n     */\\n\\n    function vestTokens(uint256 _tierId) external {\\n        require(\\n            block.timestamp >= tierInfo[_tierId].endTime,\\n            \\\"Start Vesting after Pre-Sale ends!\\\"\\n        );\\n        require(\\n            tierVestingInfo[_tierId].vestingStartTime != 0 ||\\n                tierVestingInfo[_tierId].vestingStartTime < block.timestamp,\\n            \\\"Vesting for tier not yet started\\\"\\n        );\\n        require(\\n            tokensBought[msg.sender][_tierId] > 0,\\n            \\\"Your token balance is zero\\\"\\n        );\\n        require(\\n            tierVestingInfo[_tierId].totalAllocationDone == 10000,\\n            \\\"Total allocation is not 10000\\\"\\n        );\\n        require(\\n            block.timestamp > tierVestingInfo[_tierId].vestingStartTime,\\n            \\\"Vesting hasn't started yet!\\\"\\n        );\\n        uint256 monthsPassed = (block.timestamp -\\n            tierVestingInfo[_tierId].vestingStartTime) / secondsInMonth;\\n\\n        require(\\n            monthsPassed > userVestedTokensMonth[msg.sender][_tierId],\\n            \\\"You already vested tokens\\\"\\n        );\\n\\n        uint256 i = 0;\\n        uint256 totalAllocation = 0;\\n        uint256 loopUpperLimit = 0;\\n\\n        if (monthsPassed < 37) {\\n            loopUpperLimit = monthsPassed;\\n        } else {\\n            loopUpperLimit = 36;\\n        }\\n\\n        for (\\n            i = userVestedTokensMonth[msg.sender][_tierId] + 1;\\n            i <= loopUpperLimit;\\n            i++\\n        ) {\\n            totalAllocation = totalAllocation + allocationPerMonth[_tierId][i];\\n        }\\n\\n        uint256 amount = tokensBought[msg.sender][_tierId]\\n            .mul(totalAllocation)\\n            .div(10000);\\n\\n        userVestedTokensMonth[msg.sender][_tierId] = monthsPassed;\\n        IERC20(vestToken).transfer(msg.sender, amount);\\n\\n        emit TokensVested(msg.sender, _tierId, amount);\\n    }\\n\\n    /*\\n     * Params\\n     * uint256 - How many stable coins to withdraw. Amount in Decimals\\n     *\\n     * Function transfers the amount tokens from to contract to his wallet.\\n     *\\n     *** Only for admin.\\n     */\\n\\n    function adminWithdrawStableCoin(uint256 _amount) external onlyOwner {\\n        IERC20(stableCoin).transfer(msg.sender, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_month\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"AddDistributionMonthAndPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"AddressWhitelistedStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"RemovedAllocatedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTokensPerWallet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTokensForTier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isPrivate\",\"type\":\"bool\"}],\"name\":\"TierCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTokensPerWallet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTokensForTier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isPrivate\",\"type\":\"bool\"}],\"name\":\"TierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TokensAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TokensVested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"VestingTimeForTier\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminWithdrawStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allocatedTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numTokens\",\"type\":\"uint256\"}],\"name\":\"allocateVestingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allocationPerMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numTokens\",\"type\":\"uint256\"}],\"name\":\"buyVestingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTokensPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokensForTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isPrivate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isAdminAllocation\",\"type\":\"bool\"}],\"name\":\"createPreSaleTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isAddressWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allocatedTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numTokens\",\"type\":\"uint256\"}],\"name\":\"removeAllocatedVestingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"}],\"name\":\"removeWhitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsInMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_month\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setDistributionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setVestingTimeForTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokensPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokensForTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAdminAllocation\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierVestingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokensBoughtForTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocationDone\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokensPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokensForTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isPrivate\",\"type\":\"bool\"}],\"name\":\"updatePreSaleTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userVestedTokensMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"}],\"name\":\"vestTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Vesting", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000009ee6f040b6048d64e7f41a0aa1dac9c7e1ce3ea6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}