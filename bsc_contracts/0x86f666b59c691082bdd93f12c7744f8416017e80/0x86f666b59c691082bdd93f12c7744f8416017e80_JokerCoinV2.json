{"SourceCode": "pragma solidity ^0.8.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n// SPDX-License-Identifier:MIT\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// Dex Factory contract interface\r\ninterface IPancakeFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\n// Dex Router02 contract interface\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = payable(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract JokerCoinV2 is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public _isExcludedFromFee;\r\n    mapping(address => bool) public _isExcludedFromMaxTx;\r\n    mapping(address => bool) public _isSniper;\r\n\r\n    string private _name = \"JokerCoin\";\r\n    string private _symbol = \"JOKER\";\r\n    uint8 private _decimals = 9;\r\n    uint256 private _totalSupply = 1 * 1e9 * 1e9;\r\n\r\n    IDexRouter public dexRouter;\r\n    address public dexPair;\r\n    address payable public jokerSpinWallet;\r\n    address payable public nftStakingWallet;\r\n    address payable public marketWallet;\r\n    address payable public devWallet;\r\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 public maxTxAmount = _totalSupply.mul(2).div(100); // should be 0.2% percent per transaction\r\n    uint256 public minTokenToSwap = 100000 * 1e9; // 100K amount will trigger swap and distribute\r\n    uint256 public percentDivider = 1000;\r\n    uint256 public _launchTime; // can be set only once\r\n    uint256 public antiSnipingTime = 60 seconds;\r\n\r\n    bool public distributeAndLiquifyStatus; // should be true to turn on to liquidate the pool\r\n    bool public feesStatus = true; // enable by default\r\n    bool public _tradingOpen; //once switched on, can never be switched off.\r\n\r\n    uint256 public spinFeeOnBuying = 20; // 2% will be added to the joker spin address\r\n    uint256 public nftFeeOnBuying = 20; // 2% will be added to the NFT staking address\r\n    uint256 public marketFeeOnBuying = 20; // 2% will be added to the market address\r\n    uint256 public liquidityFeeOnBuying = 20; // 2% will be added to the liquidity\r\n\r\n    uint256 public spinFeeOnSelling = 20; // 2% will be added to the buyback address\r\n    uint256 public marketFeeOnSelling = 20; // 2% will be added to the market address\r\n    uint256 public devFeeOnSelling = 20; // 2% will be added to the development address\r\n    uint256 public liquidityFeeOnSelling = 20; // 2% will be added to the liquidity\r\n\r\n    uint256 liquidityFeeCounter = 0; \r\n    uint256 marketFeeCounter = 0;\r\n    uint256 devFeeCounter = 0;\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 bnbReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    constructor(\r\n        address payable _jokerSpinWallet,\r\n        address payable _nftStakingWallet,\r\n        address payable _marketWallet,\r\n        address payable _devWallet\r\n    ) {\r\n        _balances[owner()] = _totalSupply;\r\n\r\n        jokerSpinWallet = _jokerSpinWallet;\r\n        nftStakingWallet = _nftStakingWallet;\r\n        marketWallet = _marketWallet;\r\n        devWallet = _devWallet;\r\n\r\n        IDexRouter _pancakeRouter = IDexRouter(\r\n            // miannet >> \r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n            // // testnet >>\r\n            // 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\r\n        );\r\n        // Create a pancake pair for this new Joker\r\n        dexPair = IPancakeFactory(_pancakeRouter.factory()).createPair(\r\n            address(this),\r\n            _pancakeRouter.WETH()\r\n        );\r\n\r\n        // set the rest of the contract variables\r\n        dexRouter = _pancakeRouter;\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        // exclude from max tx\r\n        _isExcludedFromMaxTx[owner()] = true;\r\n        _isExcludedFromMaxTx[address(this)] = true;\r\n        _isExcludedFromMaxTx[deadAddress] = true;\r\n\r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    //to receive BNB from dexRouter when swapping\r\n    receive() external payable {}\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"JOKER: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"JOKER: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function includeOrExcludeFromFee(address account, bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _isExcludedFromFee[account] = value;\r\n    }\r\n\r\n    function includeOrExcludeFromMaxTx(address _address, bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _isExcludedFromMaxTx[_address] = value;\r\n    }\r\n\r\n    function setMaxTxAmount(uint256 _amount) external onlyOwner {\r\n        maxTxAmount = _amount;\r\n    }\r\n\r\n    function setMinTokenToSwap(uint256 _amount) external onlyOwner {\r\n        minTokenToSwap = _amount;\r\n    }\r\n\r\n    function setBuyFeePercent(\r\n        uint256 _spinFee,\r\n        uint256 _nftFee,\r\n        uint256 _marketFee,\r\n        uint256 _lpFee\r\n    ) external onlyOwner {\r\n        spinFeeOnBuying = _spinFee;\r\n        nftFeeOnBuying = _nftFee;\r\n        marketFeeOnBuying = _marketFee;\r\n        liquidityFeeOnBuying = _lpFee;\r\n    }\r\n\r\n    function setSellFeePercent(\r\n        uint256 _spinFee,\r\n        uint256 _marketFee,\r\n        uint256 _devFee,\r\n        uint256 _lpFee\r\n    ) external onlyOwner {\r\n        spinFeeOnSelling = _spinFee;\r\n        marketFeeOnSelling = _marketFee;\r\n        devFeeOnSelling = _devFee;\r\n        liquidityFeeOnSelling = _lpFee;\r\n    }\r\n\r\n    function setDistributionStatus(bool _value) public onlyOwner {\r\n        distributeAndLiquifyStatus = _value;\r\n    }\r\n\r\n    function enableOrDisableFees(bool _value) external onlyOwner {\r\n        feesStatus = _value;\r\n    }\r\n\r\n    function updateAddresses(\r\n        address payable _jokerSpinWallet,\r\n        address payable _nftStakingWallet,\r\n        address payable _marketWallet,\r\n        address payable _devWallet\r\n    ) external onlyOwner {\r\n        jokerSpinWallet = _jokerSpinWallet;\r\n        nftStakingWallet = _nftStakingWallet;\r\n        marketWallet = _marketWallet;\r\n        devWallet = _devWallet;\r\n    }\r\n\r\n    function setPancakeRouter(IDexRouter _router, address _pair)\r\n        external\r\n        onlyOwner\r\n    {\r\n        dexRouter = _router;\r\n        dexPair = _pair;\r\n    }\r\n\r\n    function startTrading() external onlyOwner {\r\n        require(!_tradingOpen, \"JOKER: Already enabled\");\r\n        _tradingOpen = true;\r\n        _launchTime = block.timestamp;\r\n        distributeAndLiquifyStatus = true;\r\n    }\r\n\r\n    function setTimeForSniping(uint256 _time) external onlyOwner {\r\n        antiSnipingTime = _time;\r\n    }\r\n\r\n    function addSniperInList(address _account) external onlyOwner {\r\n        require(\r\n            _account != address(dexRouter),\r\n            \"JOKER: We can not blacklist dexRouter\"\r\n        );\r\n        require(!_isSniper[_account], \"JOKER: sniper already exist\");\r\n        _isSniper[_account] = true;\r\n    }\r\n\r\n    function removeSniperFromList(address _account) external onlyOwner {\r\n        require(_isSniper[_account], \"JOKER: Not a sniper\");\r\n        _isSniper[_account] = false;\r\n    }\r\n\r\n    function removeStuckBnb(address payable _account, uint256 _amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _account.transfer(_amount);\r\n    }\r\n\r\n    function removeStuckToken(\r\n        IBEP20 _token,\r\n        address _account,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        _token.transfer(_account, _amount);\r\n    }\r\n\r\n    function totalBuyFeePerTx(uint256 amount) public view returns (uint256) {\r\n        uint256 fee = amount\r\n            .mul(\r\n                nftFeeOnBuying.add(spinFeeOnBuying).add(marketFeeOnBuying).add(\r\n                    liquidityFeeOnBuying\r\n                )\r\n            )\r\n            .div(percentDivider);\r\n        return fee;\r\n    }\r\n\r\n    function totalSellFeePerTx(uint256 amount) public view returns (uint256) {\r\n        uint256 fee = amount\r\n            .mul(\r\n                spinFeeOnSelling\r\n                    .add(devFeeOnSelling)\r\n                    .add(marketFeeOnSelling)\r\n                    .add(liquidityFeeOnSelling)\r\n            )\r\n            .div(percentDivider);\r\n        return fee;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"JOKER: approve from the zero address\");\r\n        require(spender != address(0), \"JOKER: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"JOKER: transfer from the zero address\");\r\n        require(to != address(0), \"JOKER: transfer to the zero address\");\r\n        require(amount > 0, \"JOKER: Amount must be greater than zero\");\r\n        require(!_isSniper[to], \"JOKER: Sniper detected\");\r\n        require(!_isSniper[from], \"JOKER: Sniper detected\");\r\n\r\n        if (\r\n            _isExcludedFromMaxTx[from] == false &&\r\n            _isExcludedFromMaxTx[to] == false // by default false\r\n        ) {\r\n            require(amount <= maxTxAmount, \"JOKER: amount exceeded max limit\");\r\n\r\n            if (!_tradingOpen) {\r\n                require(\r\n                    from != dexPair && to != dexPair,\r\n                    \"JOKER: Trading is not enabled yet\"\r\n                );\r\n            }\r\n\r\n            if (\r\n                block.timestamp < _launchTime + antiSnipingTime &&\r\n                from != address(dexRouter)\r\n            ) {\r\n                if (from == dexPair) {\r\n                    _isSniper[to] = true;\r\n                } else if (to == dexPair) {\r\n                    _isSniper[from] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        // swap and liquify\r\n        distributeAndLiquify(from, to);\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (\r\n            _isExcludedFromFee[from] ||\r\n            _isExcludedFromFee[to] ||\r\n            !feesStatus\r\n        ) {\r\n            takeFee = false;\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (sender == dexPair && takeFee) {\r\n            uint256 allFee = totalBuyFeePerTx(amount);\r\n            uint256 tTransferAmount = amount.sub(allFee);\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(tTransferAmount);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n            _takeJokerSpinFeeOnBuying(sender, amount);\r\n            _takeNftStakingFeeOnBuying(sender, amount);\r\n            _takeReaminingFeeOnBuying(sender, amount);\r\n        } else if (recipient == dexPair && takeFee) {\r\n            uint256 allFee = totalSellFeePerTx(amount);\r\n            uint256 tTransferAmount = amount.sub(allFee);\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(tTransferAmount);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n            _takeJokerSpinFeeOnSelling(sender, amount);\r\n            _takeRemainingFeeOnSelling(sender, amount);\r\n        } else {\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _takeJokerSpinFeeOnBuying(address sender, uint256 amount) internal {\r\n        uint256 fee = amount.mul(spinFeeOnBuying).div(percentDivider);\r\n        _balances[jokerSpinWallet] = _balances[jokerSpinWallet].add(fee);\r\n\r\n        emit Transfer(sender, jokerSpinWallet, fee);\r\n    }\r\n\r\n    function _takeNftStakingFeeOnBuying(address sender, uint256 amount) internal {\r\n        uint256 fee = amount.mul(nftFeeOnBuying).div(percentDivider);\r\n        _balances[nftStakingWallet] = _balances[nftStakingWallet].add(fee);\r\n\r\n        emit Transfer(sender, nftStakingWallet, fee);\r\n    }\r\n\r\n    function _takeReaminingFeeOnBuying(address sender, uint256 amount) internal {\r\n        uint256 _lpFee = amount.mul(liquidityFeeOnBuying).div(percentDivider);\r\n        liquidityFeeCounter = liquidityFeeCounter.add(_lpFee);\r\n        uint256 _marketFee = amount.mul(marketFeeOnBuying).div(percentDivider);\r\n        marketFeeCounter = marketFeeCounter.add(_marketFee);\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(_lpFee).add(_marketFee);\r\n\r\n        emit Transfer(sender, address(this), _lpFee.add(_marketFee));\r\n    }\r\n\r\n    function _takeJokerSpinFeeOnSelling(address sender, uint256 amount) internal {\r\n        uint256 fee = amount.mul(spinFeeOnSelling).div(percentDivider);\r\n        _balances[jokerSpinWallet] = _balances[jokerSpinWallet].add(fee);\r\n\r\n        emit Transfer(sender, jokerSpinWallet, fee);\r\n    }\r\n\r\n    function _takeRemainingFeeOnSelling(address sender, uint256 amount) internal {\r\n        uint256 _lpFee = amount.mul(liquidityFeeOnSelling).div(percentDivider);\r\n        liquidityFeeCounter = liquidityFeeCounter.add(_lpFee);\r\n        uint256 _marketFee = amount.mul(marketFeeOnSelling).div(percentDivider);\r\n        marketFeeCounter = marketFeeCounter.add(_marketFee);\r\n        uint256 _devFee = amount.mul(devFeeOnSelling).div(percentDivider);\r\n        devFeeCounter = devFeeCounter.add(_devFee);\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(_lpFee).add(_marketFee).add(_devFee);\r\n\r\n        emit Transfer(sender, address(this), _lpFee.add(_marketFee).add(_devFee));\r\n    }\r\n\r\n    function distributeAndLiquify(address from, address to) private {\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is Dex pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool shouldSell = contractTokenBalance >= minTokenToSwap;\r\n\r\n        if (\r\n            shouldSell &&\r\n            from != dexPair &&\r\n            distributeAndLiquifyStatus &&\r\n            !(from == address(this) && to == address(dexPair)) // swap 1 time\r\n        ) {\r\n            // approve contract\r\n            _approve(address(this), address(dexRouter), contractTokenBalance);\r\n\r\n            uint256 halfLiquidity = liquidityFeeCounter.div(2);\r\n            uint256 otherHalfLiquidity = liquidityFeeCounter.sub(halfLiquidity);\r\n\r\n            uint256 tokenAmountToBeSwapped = contractTokenBalance.sub(\r\n                otherHalfLiquidity\r\n            );\r\n\r\n            // now is to lock into liquidty pool\r\n            Utils.swapTokensForEth(address(dexRouter), tokenAmountToBeSwapped);\r\n\r\n            uint256 deltaBalance = address(this).balance;\r\n            uint256 bnbToBeAddedToLiquidity = deltaBalance.mul(halfLiquidity).div(tokenAmountToBeSwapped);\r\n            uint256 bnbFormarket = deltaBalance.mul(marketFeeCounter).div(tokenAmountToBeSwapped);\r\n            uint256 bnbForDev = deltaBalance.sub(bnbToBeAddedToLiquidity).sub(bnbFormarket);\r\n\r\n            // sending bnb to market wallet\r\n            if(bnbFormarket > 0)\r\n                marketWallet.transfer(bnbFormarket);\r\n\r\n            // sending bnb to development wallet\r\n            if(bnbForDev > 0)\r\n                devWallet.transfer(bnbForDev);\r\n\r\n            // add liquidity to Dex\r\n            if(bnbToBeAddedToLiquidity > 0){\r\n                Utils.addLiquidity(\r\n                    address(dexRouter),\r\n                    owner(),\r\n                    otherHalfLiquidity,\r\n                    bnbToBeAddedToLiquidity\r\n                );\r\n\r\n                emit SwapAndLiquify(\r\n                    halfLiquidity,\r\n                    bnbToBeAddedToLiquidity,\r\n                    otherHalfLiquidity\r\n                );\r\n            }\r\n\r\n            // Reset all fee counters\r\n            liquidityFeeCounter = 0;\r\n            marketFeeCounter = 0;\r\n            devFeeCounter = 0;\r\n        }\r\n    }\r\n}\r\n\r\n// Library for doing a swap on Dex\r\nlibrary Utils {\r\n    using SafeMath for uint256;\r\n\r\n    function swapTokensForEth(address routerAddress, uint256 tokenAmount)\r\n        internal\r\n    {\r\n        IDexRouter dexRouter = IDexRouter(routerAddress);\r\n\r\n        // generate the Dex pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        // make the swap\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n\r\n    function addLiquidity(\r\n        address routerAddress,\r\n        address owner,\r\n        uint256 tokenAmount,\r\n        uint256 ethAmount\r\n    ) internal {\r\n        IDexRouter dexRouter = IDexRouter(routerAddress);\r\n\r\n        // add the liquidity\r\n        dexRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner,\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_jokerSpinWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_nftStakingWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_marketWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromMaxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isSniper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addSniperInList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiSnipingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeAndLiquifyStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"enableOrDisableFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jokerSpinWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftStakingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeSniperFromList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeStuckBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spinFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setDistributionStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokenToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setPancakeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spinFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFee\",\"type\":\"uint256\"}],\"name\":\"setSellFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setTimeForSniping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spinFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spinFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"totalBuyFeePerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"totalSellFeePerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_jokerSpinWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_nftStakingWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_marketWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"name\":\"updateAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "JokerCoinV2", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000037e6e346aeb4fcd11d15694351fa61431645bf830000000000000000000000004dadd261cb25d5f8ba475657c5876916fe62a39e000000000000000000000000be14374f9dee406324c34c0d03d16bfbf6968bd10000000000000000000000004dadd261cb25d5f8ba475657c5876916fe62a39e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f07b6144cf451b5f35d7492e512895c72fb357f40604df6c3eb0905cae4f6f47"}