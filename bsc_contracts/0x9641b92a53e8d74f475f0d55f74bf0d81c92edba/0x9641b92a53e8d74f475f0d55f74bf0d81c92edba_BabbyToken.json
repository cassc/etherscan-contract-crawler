{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\ncontract BabbyToken is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public treasuryAddress;\r\n    Middleman public _middleman;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _blockList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public _usdt;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public _tokenDistributor;\r\n\r\n    uint256 public _buyDestoryFee = 5; //\u9500\u6bc1\r\n    uint256 public _buyTreasuryFee = 5; //\u56fd\u5e93\r\n    uint256 public _buyMiddlemanFee = 10; //\u8d2d\u4e70guiwang\r\n    uint256 public _buyLPDividendFee = 10;//LP\u5206\u7ea2\r\n\r\n    uint256 public _sellDestoryFee = 5;//\u9500\u6bc1\r\n    uint256 public _sellTreasuryFee = 5;//\u56fd\u5e93\r\n    uint256 public _sellMiddlemanFee = 10;//\u8d2d\u4e70guiwang\r\n    uint256 public _sellLPDividendFee = 10;//LP\u5206\u7ea2\r\n\r\n    uint256 public startTradeBlock;\r\n    uint256 public swapAt;\r\n    uint256 public _maxWalletToken ;\r\n\r\n    address public _mainPair;\r\n    address public _lastSeller = address(0);\r\n\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (){\r\n        _name = \"XuanWu\";\r\n        _symbol = \"XuanWu\";\r\n        _decimals = 18;\r\n\r\n        _usdt = 0x55d398326f99059fF775485246999027B3197955; \r\n\r\n        ISwapRouter swapRouter = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        IERC20(_usdt).approve(address(swapRouter), MAX);\r\n\r\n \r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), _usdt);\r\n        _mainPair = swapPair;\r\n        _swapPairList[swapPair] = true;\r\n\r\n        _tTotal = 8888 * 10 ** _decimals;\r\n        _maxWalletToken = 5 * 10**_decimals;\r\n        swapAt = 1 * 10 ** _decimals;\r\n\r\n        _middleman = new Middleman();\r\n        treasuryAddress = 0x435781B7E98b685a4563A516160638eCDF1F13B3;//address(new Treasury());\r\n        \r\n        _balances[msg.sender] = _tTotal;\r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n\r\n        _feeWhiteList[address(_middleman)] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        _tokenDistributor = new TokenDistributor(_usdt);\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(to != address(0), \"Cannot transfer to the zero address\");\r\n        require(balanceOf(from) >= amount, \"balanceNotEnough\");\r\n        require(!_blockList[from] && !_blockList[to], \"bot address\");\r\n\r\n        if (_swapPairList[to]){\r\n            tryAddHolder(from);\r\n        }\r\n\r\n        if (_feeWhiteList[from] || _feeWhiteList[to] || inSwap){\r\n            _basicTransfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        require(0 < startTradeBlock, \"!Trading\");\r\n        if (!_swapPairList[to]){ //todo:\u9700\u8981\u9a8c\u8bc1\r\n            require((balanceOf(to) + amount) <= _maxWalletToken,\"Total Holding is currently limited, you can not buy that much.\");\r\n        }\r\n\r\n        // if (block.number < startTradeBlock + 3) {\r\n        //     _basicTransfer(from, treasuryAddress, amount * 99 / 100);\r\n        //     _basicTransfer(from, to, amount * 1 / 100);\r\n        //     return;\r\n        // }\r\n\r\n        //sell trigger swap\r\n        if (_swapPairList[to]){\r\n            swapTokenForFund();\r\n        }\r\n\r\n        _feeTransfer(from,to,amount);\r\n\r\n        if (from != address(this)) {\r\n            processReward(500000);\r\n        }\r\n    }\r\n\r\n    // function _funTransfer(\r\n    //     address sender,\r\n    //     address recipient,\r\n    //     uint256 tAmount\r\n    // ) private {\r\n    //     _balances[sender] = _balances[sender] - tAmount;\r\n    //     uint256 feeAmount = tAmount * 99 / 100;\r\n    //     _basicTransfer(sender, recipient, feeAmount);\r\n    //     _basicTransfer(sender, recipient, tAmount - feeAmount);\r\n    // }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _feeTransfer(address from, address to, uint256 amount) private {\r\n        uint fee = 0;\r\n        uint destoryFee = 0;\r\n        //if buy\r\n        if (_swapPairList[from]){\r\n            destoryFee = _buyDestoryFee;\r\n            fee = _buyTreasuryFee + _buyLPDividendFee + _buyMiddlemanFee;\r\n\r\n        }else{  //sell or transfer\r\n            destoryFee = _sellDestoryFee;\r\n            fee = _sellTreasuryFee + _sellLPDividendFee + _sellMiddlemanFee;\r\n        }\r\n\r\n        if (destoryFee > 0){\r\n            _basicTransfer(from, address(0xdead), amount * destoryFee / 1000);\r\n        }\r\n\r\n        if (fee > 0){\r\n            _basicTransfer(from, address(this), amount * fee / 1000);\r\n        }\r\n        \r\n        _basicTransfer(from, to, amount * (1000 - fee - destoryFee) / 1000);\r\n    }\r\n\r\n    function swapTokenForFund() private lockTheSwap {\r\n        uint256 totalFee = _buyTreasuryFee + _buyLPDividendFee + _buyMiddlemanFee + _sellTreasuryFee + _sellLPDividendFee  + _sellMiddlemanFee;\r\n        uint256 swapAmount = balanceOf(address(this));\r\n        if (swapAmount > swapAt) {\r\n            swapAmount = swapAt;\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            swapAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 fistBalance = USDT.balanceOf(address(_tokenDistributor));\r\n        uint256 treasuryAmount = fistBalance * (_buyTreasuryFee + _sellTreasuryFee) / totalFee;\r\n        uint256 middlemanAmount = fistBalance * (_buyMiddlemanFee + _sellMiddlemanFee) / totalFee;\r\n\r\n        USDT.transferFrom(address(_tokenDistributor), treasuryAddress, treasuryAmount);\r\n        USDT.transferFrom(address(_tokenDistributor), address(_middleman), middlemanAmount);\r\n        USDT.transferFrom(address(_tokenDistributor), address(this), fistBalance - treasuryAmount - middlemanAmount);\r\n\r\n        _middleman.Swap();\r\n    }\r\n\r\n    function setTreasuryAddress(address addr) external onlyOwner {\r\n        treasuryAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n\r\n    function setBuyLPDividendFee(uint256 dividendFee) external onlyOwner {\r\n        _buyLPDividendFee = dividendFee;\r\n    }\r\n\r\n    function setSellLPDividendFee(uint256 dividendFee) external onlyOwner {\r\n        _sellLPDividendFee = dividendFee;\r\n    }\r\n\r\n    function setBuyTreasuryFee(uint256 newFee) external onlyOwner {\r\n        _buyTreasuryFee = newFee;\r\n    }\r\n\r\n    function setSellTreasuryFee(uint256 newFee) external onlyOwner {\r\n        _sellTreasuryFee = newFee;\r\n    }\r\n\r\n    function setSellMiddlemanFee(uint256 newFee) external onlyOwner {\r\n        _sellMiddlemanFee = newFee;\r\n    }\r\n    function setBuyMiddlemanFee(uint256 lpFee) external onlyOwner {\r\n        _buyMiddlemanFee = lpFee;\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        if(0 == startTradeBlock){\r\n            startTradeBlock = block.number;\r\n        }\r\n    }\r\n\r\n    function setFeeWhiteList(address[] calldata addList, bool enable) external onlyOwner {\r\n        for(uint256 i = 0; i < addList.length; i++) {\r\n            _feeWhiteList[addList[i]] = enable;\r\n        }\r\n    }\r\n    \r\n    function setBlockList(address[] calldata addList, bool enable) public onlyOwner {\r\n        for(uint256 i = 0; i < addList.length; i++) {\r\n            _blockList[addList[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount, address to) external onlyOwner {\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n\r\n    function tryAddHolder(address _currentSeller) internal {\r\n        if ( _lastSeller!=address(0) && IERC20(_mainPair).balanceOf(_lastSeller) > 0 ){\r\n            addHolder(_lastSeller);\r\n        }\r\n        _lastSeller = _currentSeller;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    address[] private holders;\r\n    mapping(address => uint256) holderIndex;\r\n    mapping(address => bool) excludeHolder;\r\n\r\n    function addHolder(address adr) private {\r\n        uint256 size;\r\n        assembly {size := extcodesize(adr)}\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 private currentIndex;\r\n    uint256 private progressRewardBlock;\r\n    function processReward(uint256 gas) internal {\r\n        if (progressRewardBlock + 30 > block.number) {\r\n            return;\r\n        }\r\n\r\n        if (IERC20(_usdt).balanceOf(address(this)) < 5 * 10 ** IERC20(_usdt).decimals()) {\r\n            return;\r\n        }\r\n\r\n        _processReward(gas);\r\n\r\n        progressRewardBlock = block.number;\r\n    }\r\n\r\n    function processRewardWithoutCondition(uint256 gas) public {\r\n        _processReward(gas);\r\n    }\r\n\r\n    function _processReward(uint256 gas) internal {\r\n        IERC20 USDT = IERC20(_usdt);\r\n\r\n        uint256 balance = USDT.balanceOf(address(this));\r\n        if (balance == 0) {\r\n            return;\r\n        }\r\n\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n        uint holdTokenTotal = holdToken.totalSupply();\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = holdToken.balanceOf(shareHolder);\r\n            if (tokenBalance > 0 && !excludeHolder[shareHolder]) {\r\n                amount = balance * tokenBalance / holdTokenTotal;\r\n                if (amount > 0) {\r\n                    USDT.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyOwner {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n    function setMaxWallet(uint256 amount) external onlyOwner() {\r\n        _maxWalletToken = amount*10**_decimals;\r\n    }\r\n    function setMiddleman(address payable addr) external onlyOwner(){\r\n        _middleman = Middleman(addr);\r\n    }\r\n}\r\n\r\n//\u4e2d\u95f4\u5546 \u7528\u4e8e\u8d2d\u4e70guiwang\r\ncontract Middleman {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public swapAt =  10 * 10 ** 18; //10 usdt\r\n    address public _usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n    address public _wbnb = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address public outToken=0x692a2D8783310C3E9Ab6c7dE34F2a55136dC01ea; //guiwang\r\n    address public tokenReciever = 0x435781B7E98b685a4563A516160638eCDF1F13B3; //guiwang \u63a5\u6536\u4eba\r\n\r\n    ISwapRouter public swapRouter=ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    receive()external payable{}\r\n\r\n    fallback() external payable {}\r\n\r\n    constructor(){\r\n        IERC20(_usdt).approve(address(swapRouter),2**256 - 1);\r\n    }\r\n\r\n    function Swap() public{\r\n        uint256 swapAmount =IERC20(_usdt).balanceOf(address(this));\r\n        if (swapAmount <= swapAt) {\r\n            return;\r\n        }\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = _usdt;\r\n        path[1] = _wbnb;\r\n        path[2] = outToken;\r\n\r\n        swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(swapAmount,0,path,tokenReciever,block.timestamp);\r\n        //try swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(swapAmount,0,path,tokenReciever,block.timestamp) {} catch {}\r\n    }    \r\n}\r\n\r\n//\u56fd\u5e93  \u7528\u4e8e\u5956\u52b1lp\u6392\u884c\u699c\u548c\u79c1\u52df\r\ncontract Treasury is Ownable {\r\n    address[] public top100;\r\n    address[] public privateSaleList;\r\n\r\n    constructor(){\r\n        privateSaleList =  new address[](0);\r\n    }\r\n\r\n    address public _usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n    function setTop100(address[] calldata addList) external onlyOwner {\r\n        top100 = addList;\r\n    }\r\n\r\n    function addPrivateSaleList(address[] calldata addList) external onlyOwner {\r\n        for(uint256 i = 0; i < addList.length; i++) {\r\n            privateSaleList.push(addList[i]);\r\n        }\r\n    }\r\n\r\n    function triggerTop100Reward() external onlyOwner {\r\n        uint256 _bal=IERC20(_usdt).balanceOf(address(this));\r\n        uint256 _preAmount = _bal/5/top100.length;\r\n        for(uint256 i = 0; i < top100.length; i++) {\r\n            try IERC20(_usdt).transfer(top100[i], _preAmount) {} catch {}\r\n        }\r\n    }\r\n\r\n    uint256 index=0;\r\n    function triggerPrivateSaleReward(uint256 size) external onlyOwner {\r\n        require(size <= privateSaleList.length, \"size too large\");\r\n        uint256 _bal=IERC20(_usdt).balanceOf(address(this));\r\n        uint256 _preAmount = _bal/5/privateSaleList.length;\r\n        for(uint256 i = 0; i < size; i++) {\r\n            index++;\r\n            if (index>=privateSaleList.length){\r\n                index=0;\r\n            }\r\n            try IERC20(_usdt).transfer(privateSaleList[i], _preAmount) {} catch {}\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//\u4ee3\u5e01\u91ca\u653e\u5408\u7ea6\r\ncontract Distribution is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    address public token;\r\n    address public pairAddr=0x0Ac1Eb3042cA2042407c6BF7a9A3f3B9428E967f;\r\n    address[] public privateSaleList;\r\n\r\n    uint256 public _lastDistributePrice;\r\n    uint256 public _amount;\r\n    uint256 public _leftTimes=7 ;\r\n    uint256 public _lastDistributeTime;\r\n\r\n    constructor(address _token){\r\n        token = _token;\r\n    }\r\n\r\n    function autoSyncPrice()external onlyOwner {\r\n        uint256 _price = getPrice();\r\n        require(_price != 0,\"price is 0\");\r\n\r\n        _lastDistributePrice = _price;\r\n    }\r\n\r\n\r\n    function setLastDistributePrice(uint256 price) external onlyOwner {\r\n        _lastDistributePrice = price;\r\n    }\r\n\r\n    function setPrivateSaleList(address[] calldata addList) external onlyOwner {\r\n        privateSaleList = addList;\r\n    }\r\n\r\n    function setAmount(uint256 amount) external onlyOwner {\r\n        _amount = amount;\r\n    }\r\n\r\n    function setPair(address _pair) external onlyOwner {\r\n        pairAddr = _pair;\r\n    }\r\n\r\n    function distribute() external onlyOwner {\r\n        require(privateSaleList.length <= IERC20(token).balanceOf(address(this))/_amount, \"not enough token\");\r\n        if ((getPrice()/10 >= _lastDistributePrice || oneMonthPassed() ) && _leftTimes > 0){\r\n            _lastDistributeTime = block.timestamp;\r\n            _lastDistributePrice = getPrice();\r\n            _leftTimes--;\r\n            for(uint256 i = 0; i < privateSaleList.length; i++) {\r\n                try IERC20(token).transfer(privateSaleList[i], _amount) {} catch {}\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function oneMonthPassed() public view returns(bool){\r\n        return _lastDistributeTime+30 days < block.timestamp;\r\n    }\r\n\r\n    function getPrice() public view returns (uint256) {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddr);\r\n\r\n        address token0 = pair.token0();\r\n        address token1 = pair.token1();\r\n        (uint256 Res0, uint256 Res1, ) = pair.getReserves();\r\n\r\n        if (token0 == token) {\r\n            return (Res1.mul(10**20)).div(Res0);\r\n        } else if (token1 == token) {\r\n            return (Res0.mul(10**20)).div(Res1);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function claimToken(address _token, uint256 amount, address to) external onlyOwner {\r\n        IERC20(_token).transfer(to, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blockList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDestoryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMiddlemanFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastSeller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_middleman\",\"outputs\":[{\"internalType\":\"contract Middleman\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDestoryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMiddlemanFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processRewardWithoutCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addList\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlockList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dividendFee\",\"type\":\"uint256\"}],\"name\":\"setBuyLPDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"setBuyMiddlemanFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setBuyTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addList\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMiddleman\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dividendFee\",\"type\":\"uint256\"}],\"name\":\"setSellLPDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setSellMiddlemanFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setSellTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BabbyToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://60e4c1adcdf47530d66d6693cb170df2a159c8e8b6a79e23f858ab54eede9628"}