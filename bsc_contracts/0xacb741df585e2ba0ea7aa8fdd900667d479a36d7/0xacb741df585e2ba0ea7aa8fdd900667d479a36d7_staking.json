{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/deximStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ninterface TokenPriceInterface {\\n    function getTokenPrice() external view returns (uint256);\\n}\\n\\ncontract staking is Ownable {\\n    using SafeMath for uint256;\\n\\n    IERC20 public usdtToken; // The USDT token contract\\n\\n    uint256 public totalInvested;\\n    uint256 public totalRewards;\\n\\n    uint256 public MINIMUM_STAKING_AMOUNT = 30 ether;\\n    uint256 public UNSTAKE_PERIOD = 500 days;\\n\\n    bool public isPaused = false;\\n\\n    struct User {\\n        address referrer;\\n        address[] referrals;\\n    }\\n\\n    struct group {\\n        bool step1;\\n        bool step2;\\n        bool step3;\\n        bool step4;\\n        bool step5;\\n        bool step6;\\n        bool step7;\\n        bool step8;\\n    }\\n\\n    mapping(address => group) public incomeGroup;\\n\\n    mapping(address => User) public users;\\n    mapping(address => uint256) public totalRoiRewards;\\n    mapping(address => uint256) public stakedAmount;\\n    mapping(address => uint256) public rewardsEarned;\\n    mapping(address => uint256) public rewardsWithdrawn;\\n    mapping(address => uint256) public totalUnstaked;\\n    mapping(address => address) public referrerOf;\\n    mapping(address => uint256) public totalReferrals;\\n    mapping(address => uint256) public stakingTimestamp;\\n    mapping(address => uint256) public checkTime;\\n    mapping(uint256 => uint256) public levelPercentages;\\n    mapping(address => address[]) myDirectReferrals;\\n    mapping(address => uint256) public totalRewardsWithdraw;\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Unstaked(address indexed user, uint256 amount);\\n    event RewardClaimed(address indexed user, uint256 amount);\\n    event StakingDeleted(address indexed user, uint256 amount);\\n    event LevelRewardDistributed(\\n        address indexed user,\\n        uint256 level,\\n        uint256 amount\\n    );\\n\\n    TokenPriceInterface public tokenPriceContract;\\n\\n    constructor() {\\n        usdtToken = IERC20(0xbf035D8f65b804963a8131B4779863e2541Bd91E);\\n        tokenPriceContract = TokenPriceInterface(\\n            0x285DA06f3eeBA9eE2708Cac46ecD5Aab0A932D45\\n        );\\n        setLevelPercentage(1, 15);\\n        setLevelPercentage(2, 10);\\n        setLevelPercentage(3, 5);\\n        setLevelPercentage(4, 3);\\n        setLevelPercentage(5, 2);\\n\\n        for (uint256 i = 6; i <= 15; i++) {\\n            setLevelPercentage(i, 1);\\n        }\\n    }\\n\\n    modifier userHasStaked() {\\n        require(stakedAmount[msg.sender] > 0, \\\"No staked amount\\\");\\n        _;\\n    }\\n\\n    function setLevelPercentage(uint256 level, uint256 percentage)\\n        public\\n        onlyOwner\\n    {\\n        require(level >= 1 && level <= 15, \\\"Level must be between 1 and 15\\\");\\n        levelPercentages[level] = percentage;\\n    }\\n\\n    function getLevelPercentage(uint256 level) internal view returns (uint256) {\\n        require(level >= 1 && level <= 15, \\\"Level must be between 1 and 15\\\");\\n        return levelPercentages[level];\\n    }\\n\\n    function updateMinimumStakingAmount(uint256 _newMinimumStakingAmount)\\n        external\\n        onlyOwner\\n    {\\n        MINIMUM_STAKING_AMOUNT = _newMinimumStakingAmount;\\n    }\\n\\n    function updateUnstakePeriod(uint256 _newUnstakePeriod) external onlyOwner {\\n        UNSTAKE_PERIOD = _newUnstakePeriod;\\n    }\\n\\n    function getMyReferrals(address user)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return users[user].referrals;\\n    }\\n\\n    function getReferrerOf(address user) public view returns (address) {\\n        return users[user].referrer;\\n    }\\n\\n    function getrewardsEarned(address user) public view returns (uint256) {\\n        return rewardsEarned[user];\\n    }\\n\\n    function stake(uint256 amount, address referrer) external {\\n        require(!isPaused, \\\"Contract is paused\\\");\\n        require(\\n            tokenToUsdPrice(amount) >= MINIMUM_STAKING_AMOUNT,\\n            \\\"Minimum staking amount is $30\\\"\\n        );\\n        require(\\n            usdtToken.allowance(msg.sender, address(this)) >= amount,\\n            \\\"Allowance not set\\\"\\n        );\\n        require(\\n            usdtToken.transferFrom(msg.sender, address(this), amount),\\n            \\\"Transfer failed\\\"\\n        );\\n        totalRoiRewards[_msgSender()] += checkDailyReward(msg.sender);\\n        User storage user = users[msg.sender];\\n        stakedAmount[msg.sender] = stakedAmount[msg.sender].add(amount);\\n        totalInvested = totalInvested.add(amount);\\n\\n        if (\\n            referrer != address(0) &&\\n            referrer != msg.sender &&\\n            user.referrer == address(0)\\n        ) {\\n            require(\\n                !isReferral(msg.sender, referrer),\\n                \\\"Referrer cannot stake in their referral\\\"\\n            );\\n            myDirectReferrals[referrer].push(msg.sender);\\n            user.referrer = referrer;\\n            users[referrer].referrals.push(msg.sender);\\n            referrerOf[msg.sender] = referrer;\\n            totalReferrals[referrer] = totalReferrals[referrer].add(1);\\n        }\\n\\n        stakingTimestamp[msg.sender] = block.timestamp;\\n        checkTime[msg.sender] = block.timestamp;\\n        emit Staked(msg.sender, amount);\\n\\n        distributeLevelRewards(msg.sender, amount);\\n    }\\n\\n    function isReferral(address referrer, address potentialReferral)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        address[] storage referrals = users[referrer].referrals;\\n        for (uint256 i = 0; i < referrals.length; i++) {\\n            if (referrals[i] == potentialReferral) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function withdrawRewardsEarned(address user) external userHasStaked {\\n        require(msg.sender == user, \\\"wrong calller address\\\");\\n        uint256 earnedRewards = rewardsEarned[user] + totalRoiRewards[user];\\n        require(earnedRewards > 0, \\\"No earned rewards to withdraw\\\");\\n        bool success = usdtToken.transfer(user, earnedRewards);\\n        require(success, \\\"Failed to withdraw Dxim\\\");\\n        rewardsWithdrawn[user] += earnedRewards;\\n        totalRewardsWithdraw[msg.sender] += earnedRewards;\\n        if (totalRewardsWithdraw[msg.sender] >= 4 * stakedAmount[msg.sender]) {\\n            stakedAmount[msg.sender] = 0;\\n        }\\n        rewardsEarned[user] = 0;\\n        checkTime[msg.sender] = 0;\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        uint256 amount = usdtToken.balanceOf(address(this));\\n        require(amount > 0, \\\"This contract balance is ZERO Dxim\\\");\\n        bool success = usdtToken.transfer(owner(), amount);\\n        require(success, \\\"Failed to withdraw\\\");\\n    }\\n\\n    function unstake(address user) external userHasStaked {\\n        require(user == msg.sender, \\\"wrong caller address\\\");\\n        uint256 staked = stakedAmount[user];\\n        require(\\n            block.timestamp >= stakingTimestamp[user].add(UNSTAKE_PERIOD),\\n            \\\"Unstake period not met\\\"\\n        );\\n\\n        uint256 rewards = calculateRewards(user);\\n        rewardsEarned[user] = rewards;\\n\\n        if (rewards >= 4 * staked) {\\n            stakedAmount[user] = 0;\\n            emit StakingDeleted(user, staked);\\n        } else {\\n            usdtToken.transfer(user, staked);\\n            emit Unstaked(user, staked);\\n        }\\n        totalUnstaked[user] += staked;\\n        totalInvested = totalInvested.sub(staked);\\n        stakedAmount[user] = 0;\\n        stakingTimestamp[user] = 0;\\n        checkTime[msg.sender] = 0;\\n\\n        usdtToken.transfer(user, rewards);\\n    }\\n\\n    function totalUnstakedAmount(address user) public {\\n        uint256 Amount = stakedAmount[user];\\n        totalUnstaked[user] += Amount;\\n        stakedAmount[user] = 0;\\n    }\\n\\n    function calculateRewards(address user) internal returns (uint256) {\\n        uint256 stakedAmountUser = stakedAmount[user];\\n        require(stakedAmountUser > 0, \\\"No staked amount\\\");\\n\\n        uint256 stakingTimeInDays = (block.timestamp - checkTime[user]) /\\n            1 days;\\n        uint256 dailyROI = (stakedAmountUser * 4) / 1000;\\n        uint256 roiRewards = dailyROI * stakingTimeInDays;\\n\\n        if (roiRewards + rewardsEarned[user] > (4 * stakedAmountUser)) {\\n            roiRewards = (4 * stakedAmountUser) - rewardsEarned[user];\\n        }\\n\\n        rewardsEarned[user] = rewardsEarned[user].add(roiRewards);\\n        totalRoiRewards[user] = totalRoiRewards[user].add(roiRewards);\\n\\n        distributeLevelRewards(user, roiRewards);\\n\\n        return roiRewards;\\n    }\\n\\n    function checkDailyReward(address user) public view returns (uint256) {\\n        uint256 stakingTimeInDays = (block.timestamp - checkTime[user]);\\n\\n        uint256 dailyReward = (stakedAmount[user] * 4 * stakingTimeInDays) /\\n            1000 /\\n            1 days;\\n        return dailyReward;\\n    }\\n\\n    function distributeLevelRewards(address user, uint256 amount) public {\\n        address referrer = referrerOf[user];\\n\\n        for (uint256 level = 1; level <= 15; level++) {\\n            if (referrer == address(0)) {\\n                break;\\n            }\\n            uint256 levelReward = (amount * getLevelPercentage(level)) / 100;\\n            rewardsEarned[referrer] += levelReward;\\n            referrer = referrerOf[referrer];\\n        }\\n    }\\n\\n    function claimRewardsIncom() external {\\n        address user = msg.sender;\\n        uint256 amount = totalBusinessUsd(user);\\n        bool claimStatus;\\n        require(\\n            amount >= 1000 ether,\\n            \\\"Minimum total business requirement not met\\\"\\n        );\\n        if (amount >= 1500000 ether && !incomeGroup[user].step1) {\\n            incomeGroup[user].step1 = true;\\n            usdtToken.transfer(user, usdToTokens(20000 ether));\\n            totalRewardsWithdraw[msg.sender] += usdToTokens(20000 ether);\\n            claimStatus = true;\\n        }\\n        if (\\n            amount >= 700000 ether &&\\n            amount < 1500000 ether &&\\n            !incomeGroup[user].step2\\n        ) {\\n            incomeGroup[user].step2 = true;\\n            usdtToken.transfer(user, 10000 ether);\\n            totalRewardsWithdraw[msg.sender] += usdToTokens(10000 ether);\\n            claimStatus = true;\\n        }\\n        if (\\n            amount >= 300000 ether &&\\n            amount < 700000 ether &&\\n            !incomeGroup[user].step3\\n        ) {\\n            incomeGroup[user].step3 = true;\\n            usdtToken.transfer(user, 5000 ether);\\n            totalRewardsWithdraw[msg.sender] += usdToTokens(5000 ether);\\n            claimStatus = true;\\n        }\\n        if (\\n            amount >= 150000 ether &&\\n            amount < 300000 ether &&\\n            !incomeGroup[user].step4\\n        ) {\\n            incomeGroup[user].step4 = true;\\n            usdtToken.transfer(user, 2000 ether);\\n            totalRewardsWithdraw[msg.sender] += usdToTokens(2000 ether);\\n            claimStatus = true;\\n        }\\n        if (\\n            amount >= 50000 ether &&\\n            amount < 150000 ether &&\\n            !incomeGroup[user].step5\\n        ) {\\n            incomeGroup[user].step5 = true;\\n            usdtToken.transfer(user, 1000 ether);\\n            totalRewardsWithdraw[msg.sender] += usdToTokens(1000 ether);\\n            claimStatus = true;\\n        }\\n        if (\\n            amount >= 25000 ether &&\\n            amount < 50000 ether &&\\n            !incomeGroup[user].step6\\n        ) {\\n            incomeGroup[user].step6 = true;\\n            usdtToken.transfer(user, 500 ether);\\n            totalRewardsWithdraw[msg.sender] += usdToTokens(500 ether);\\n            claimStatus = true;\\n        }\\n        if (\\n            amount >= 5000 ether &&\\n            amount < 25000 ether &&\\n            !incomeGroup[user].step7\\n        ) {\\n            incomeGroup[user].step7 = true;\\n            usdtToken.transfer(user, 200 ether);\\n            totalRewardsWithdraw[msg.sender] += usdToTokens(200 ether);\\n            claimStatus = true;\\n        }\\n        if (\\n            amount >= 1000 ether &&\\n            amount < 5000 ether &&\\n            !incomeGroup[user].step8\\n        ) {\\n            incomeGroup[user].step8 = true;\\n            usdtToken.transfer(user, 50 ether);\\n            totalRewardsWithdraw[msg.sender] += usdToTokens(50 ether);\\n            claimStatus = true;\\n        }\\n        if (totalRewardsWithdraw[msg.sender] >= 4 * stakedAmount[msg.sender]) {\\n            stakedAmount[msg.sender] = 0;\\n        }\\n        require(claimStatus, \\\"Minimum total business requirement not met\\\");\\n    }\\n\\n    function pauseContract() external onlyOwner {\\n        isPaused = true;\\n    }\\n\\n    /**\\n     * @dev Returns the current price of the token in USD.\\n     * The price is retrieved from the `tokenPriceContract` instance of `TokenPriceInterface`.\\n     * @return The current price of the token in USD.\\n     */\\n    function getTokenPrice() public view returns (uint256) {\\n        // 2 decimals\\n        return tokenPriceContract.getTokenPrice();\\n    }\\n\\n    /**\\n     * @dev Calculates the equivalent USD price for a given token amount.\\n     * The price is calculated by dividing the token amount by the current token price.\\n     * @param amount The amount of tokens to be converted to USD.\\n     * @return The equivalent USD price for the given token amount.\\n     */\\n    function tokenToUsdPrice(uint256 amount) public view returns (uint256) {\\n        uint256 tokens = (amount * 100) / getTokenPrice();\\n        return tokens;\\n    }\\n\\n    /**\\n     * @dev Calculates the equivalent token amount for a given USD price.\\n     * The amount of tokens is calculated by multiplying the USD amount by the current token price.\\n     * @param amount The amount of USD to be converted to tokens.\\n     * @return The equivalent token amount for the given USD price.\\n     */\\n    function usdToTokens(uint256 amount) public view returns (uint256) {\\n        uint256 tokens = (amount * getTokenPrice()) / 100;\\n        return tokens;\\n    }\\n\\n    /**\\n     * @dev Calculates the total business volume in USD for a given user.\\n     * The total business volume is the sum of the staked amounts of the user's entire team, including direct and indirect referrals.\\n     * @param _user The address of the user.\\n     * @return The total business volume in USD.\\n     */\\n    function totalBusinessUsd(address _user) public view returns (uint256) {\\n        uint256 amount;\\n        uint256 team = myDirectReferrals[_user].length;\\n        for (uint256 i; i < team; i++) {\\n            address referralAddress = myDirectReferrals[_user][i];\\n            amount += getTeamAmount(referralAddress);\\n        }\\n        return tokenToUsdPrice(amount);\\n    }\\n\\n    /**\\n     * @dev Returns the total staked amount of the user's team\\n     * @param _user The address of the user\\n     * @return The total staked amount of the user's team\\n     */\\n\\n    function getTeamAmount(address _user) private view returns (uint256) {\\n        uint256 amount;\\n        for (uint256 i; i < 15; i++) {\\n            if (_user != address(0)) {\\n                amount += stakedAmount[_user];\\n                _user = getReferrerOf(_user);\\n            } else break;\\n        }\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev Returns the current token balance of the contract\\n     * @return The token balance of the contract\\n     */\\n    function getContractTokenBalance() public view returns (uint256) {\\n        return usdtToken.balanceOf(address(this));\\n    }\\n\\n    function unpauseContract() external onlyOwner {\\n        isPaused = false;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LevelRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakingDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_STAKING_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkDailyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewardsIncom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeLevelRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMyReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReferrerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getrewardsEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"incomeGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"step1\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"step2\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"step3\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"step4\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"step5\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"step6\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"step7\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"step8\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setLevelPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceContract\",\"outputs\":[{\"internalType\":\"contract TokenPriceInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenToUsdPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"totalBusinessUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalRewardsWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalRoiRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalUnstaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalUnstakedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinimumStakingAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinimumStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newUnstakePeriod\",\"type\":\"uint256\"}],\"name\":\"updateUnstakePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawRewardsEarned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "staking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}