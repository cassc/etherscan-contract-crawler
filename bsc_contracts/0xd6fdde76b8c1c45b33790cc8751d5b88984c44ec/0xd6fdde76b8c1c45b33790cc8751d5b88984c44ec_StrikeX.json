{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/dev/Desktop/StrikeG/contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/home/dev/Desktop/StrikeG/contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n    address private _previousOwner;\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n    \\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/home/dev/Desktop/StrikeG/contracts/StrikeX.sol\": {\r\n      \"content\": \"/*\\r\\n* Tokenomics\\r\\n*\\r\\n*  Name  - StrikeX\\r\\n*  Symbol - STRX \\r\\n*  MAX Supply -  1 billion\\r\\n*  Selling tax 3%  - only applicable for 6 months (0% thereafter)\\r\\n*  3% selling tax distribution\\r\\n    - 1.5% to liquidity pool \\r\\n    - 1% to team wallet (sent as BNB)\\r\\n    - 0.5% to \u2018buyback\u2019 wallet (sent as BNB)\\r\\n    - Anti-dump Max Sell no more than 0.5% of supply (5M) over 24 hours \u2013 only applicable for 6 months (0% thereafter)\\r\\n*/\\r\\n\\r\\n//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./library/SafeMath.sol\\\";\\r\\nimport \\\"./library/IBEP20.sol\\\";\\r\\n\\r\\nimport \\\"./interface/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./interface/IUniswapV2Router02.sol\\\";\\r\\n\\r\\ncontract StrikeX is Context, IBEP20, Ownable {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  mapping (address => uint256) private _balances;\\r\\n  mapping (address => mapping (address => uint256)) private _allowances;\\r\\n  mapping(address => bool) private _isExcludedFromFee; // wallets excluded from fee\\r\\n  mapping (address => uint256) private _tokenSold;\\r\\n\\r\\n  mapping (address => uint256) private _startTime;\\r\\n  mapping (address => uint256) private _blockTime;\\r\\n\\r\\n  uint256 public _maxSoldAmount;\\r\\n  uint256 private _totalSupply;\\r\\n  uint8 private _decimals;\\r\\n  string private _symbol;\\r\\n  string private _name;  \\r\\n  uint256 public _taxFee;\\r\\n  uint256 public _minBalance;\\r\\n\\r\\n  address public uniswapV2Pair;\\r\\n  address payable public _teamWallet;\\r\\n  address payable public _buybackWallet;\\r\\n\\r\\n  bool public inSwap = false;\\r\\n  bool public swapEnabled = true;\\r\\n\\r\\n  IUniswapV2Router02 public uniswapV2Router; // pancakeswap v2 router\\r\\n\\r\\n  modifier lockTheSwap {\\r\\n    inSwap = true;\\r\\n    _;\\r\\n    inSwap = false;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Initialize params for tokenomics\\r\\n   */\\r\\n\\r\\n  constructor() {\\r\\n    _name = unicode\\\"StrikeX\\\";\\r\\n    _symbol = \\\"STRX\\\";\\r\\n    _decimals = 18;\\r\\n    _totalSupply = 10**9 * 10**18;\\r\\n    _balances[msg.sender] = _totalSupply;    \\r\\n    _taxFee = 300;\\r\\n    _minBalance = 10 * 10**18;\\r\\n    _maxSoldAmount = 5 * 10**6 * 10**18;\\r\\n\\r\\n    _teamWallet = payable(0xB68D389bf73Ee9fdACb0df1fbf69CD20151F1F41); \\r\\n    _buybackWallet = payable(0x7E48d044C6D58F71bde05A9B7Af560a5EB99f27C);\\r\\n\\r\\n    // BSC MainNet router\\r\\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n    uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\r\\n    uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n    // BSC MainNet router\\r\\n    //0x10ED43C718714eb63d5aA57B78B54704E256024E\\r\\n\\r\\n    // BSC TestNet router\\r\\n    // 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\\r\\n\\r\\n    _isExcludedFromFee[owner()] = true;\\r\\n    _isExcludedFromFee[address(this)] = true;\\r\\n    _isExcludedFromFee[_teamWallet] = true;\\r\\n    _isExcludedFromFee[_buybackWallet] = true;\\r\\n\\r\\n    emit Transfer(address(0), msg.sender, _totalSupply);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the bep token owner.\\r\\n   */\\r\\n\\r\\n  function getOwner() external override view returns (address) {\\r\\n    return owner();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token decimals.\\r\\n   */\\r\\n\\r\\n  function decimals() external override view returns (uint8) {\\r\\n    return _decimals;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token symbol.\\r\\n   */\\r\\n\\r\\n  function symbol() external override view returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Returns the token name.\\r\\n  */\\r\\n\\r\\n  function name() external override view returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-totalSupply}.\\r\\n   */\\r\\n\\r\\n  function totalSupply() external override view returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-balanceOf}.\\r\\n   */\\r\\n\\r\\n  //function balanceOf(address account) external override view returns (uint256) {\\r\\n  function balanceOf(address account) public view override returns (uint256) {\\r\\n    return _balances[account];\\r\\n  }\\r\\n\\r\\n  function excludeFromFee(address account) public onlyOwner {\\r\\n    _isExcludedFromFee[account] = true;\\r\\n  }\\r\\n  \\r\\n  function includeInFee(address account) public onlyOwner {\\r\\n    _isExcludedFromFee[account] = false;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-transfer}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `recipient` cannot be the zero address.\\r\\n   * - the caller must have a balance of at least `amount`.\\r\\n   */\\r\\n\\r\\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n    _transfer(_msgSender(), recipient, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-allowance}.\\r\\n   */\\r\\n\\r\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\r\\n    return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-approve}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n   \\r\\n  function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n    _approve(_msgSender(), spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-transferFrom}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n   * required by the EIP. See the note at the beginning of {BEP20};\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - `sender` and `recipient` cannot be the zero address.\\r\\n   * - `sender` must have a balance of at least `amount`.\\r\\n   * - the caller must have allowance for `sender`'s tokens of at least\\r\\n   * `amount`.\\r\\n   */\\r\\n\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n    _transfer(sender, recipient, amount);\\r\\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"BEP20: transfer amount exceeds allowance\\\"));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n   *\\r\\n   * This is an alternative to {approve} that can be used as a mitigation for\\r\\n   * problems described in {BEP20-approve}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n\\r\\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n   *\\r\\n   * This is an alternative to {approve} that can be used as a mitigation for\\r\\n   * problems described in {BEP20-approve}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   * - `spender` must have allowance for the caller of at least\\r\\n   * `subtractedValue`.\\r\\n   */\\r\\n\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"BEP20: decreased allowance below zero\\\"));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n   *\\r\\n   * This is internal function is equivalent to {transfer}\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `sender` cannot be the zero address.\\r\\n   * - `recipient` cannot be the zero address.\\r\\n   * - `sender` must have a balance of at least `amount`.\\r\\n   */\\r\\n\\r\\n  function _transfer(address from, address to, uint256 amount) internal {\\r\\n\\r\\n    require(from != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n    require(to != address(0), \\\"BEP20: transfer to the zero address\\\");\\r\\n    require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n\\r\\n    bool takeFee = true;\\r\\n\\r\\n    if (!inSwap && swapEnabled && to == uniswapV2Pair){      \\r\\n      // limit max sold\\r\\n      if(_tokenSold[from] == 0){\\r\\n        _startTime[from] = block.timestamp;\\r\\n      }\\r\\n\\r\\n      _tokenSold[from] = _tokenSold[from] + amount;\\r\\n\\r\\n      if( block.timestamp < _startTime[from] + (1 days)){\\r\\n          require(_tokenSold[from] <= _maxSoldAmount, \\\"Sold amount exceeds the maxTxAmount.\\\");\\r\\n      }else{\\r\\n          _startTime[from] = block.timestamp;\\r\\n          _tokenSold[from] = 0;\\r\\n      }\\r\\n\\r\\n      // transfer tokens\\r\\n      uint256 strikeBalance = balanceOf(address(this));\\r\\n      if(strikeBalance > _minBalance){                    \\r\\n        transferTokens(strikeBalance);\\r\\n      }\\r\\n      \\r\\n      if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\r\\n        takeFee = false;\\r\\n      }\\r\\n    } else {\\r\\n      takeFee = false;\\r\\n    }\\r\\n\\r\\n    _tokenTransfer(from, to, amount, takeFee);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.   \\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `owner` cannot be the zero address.\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n\\r\\n  function _approve(address owner, address spender, uint256 amount) internal {\\r\\n    require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\r\\n    require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\r\\n\\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev transfer tokens to liqudity, team wallet and buyback wallet.\\r\\n   */\\r\\n\\r\\n  function transferTokens(uint256 tokenBalance) private lockTheSwap {\\r\\n    uint256 liquidityTokens = tokenBalance.div(4); // 0.75%\\r\\n    uint256 otherBNBTokens = tokenBalance - liquidityTokens; // 2.25%\\r\\n\\r\\n    uint256 initialBalance = address(this).balance;\\r\\n    swapTokensForEth(otherBNBTokens);\\r\\n\\r\\n    uint256 newBalance = address(this).balance.sub(initialBalance);\\r\\n    uint256 liquidityCapacity = newBalance.div(3);\\r\\n    addLiqudity(liquidityTokens, liquidityCapacity);\\r\\n\\r\\n    uint256 teamCapacity = newBalance - liquidityCapacity;    \\r\\n    uint256 teamBNB = teamCapacity.mul(2).div(3);\\r\\n    _teamWallet.transfer(teamBNB);\\r\\n\\r\\n    uint256 buybackBNB = teamCapacity - teamBNB;\\r\\n    _buybackWallet.transfer(buybackBNB);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Swap tokens from strike to bnb\\r\\n   */\\r\\n\\r\\n  function swapTokensForEth(uint256 tokenAmount) private{\\r\\n    address[] memory path = new address[](2);\\r\\n    path[0] = address(this);\\r\\n    path[1] = uniswapV2Router.WETH();\\r\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Add strike token and bnb as same ratio on pancakeswap router\\r\\n   */\\r\\n\\r\\n  function addLiqudity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n    // approve token transfer to cover all possible scenarios\\r\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n    // add amount to contract\\r\\n    uniswapV2Router.addLiquidityETH{value: ethAmount}(\\r\\n        address(this),\\r\\n        tokenAmount,\\r\\n        0, // slippage is unavoidable\\r\\n        0, // slippage is unavoidable\\r\\n        owner(),\\r\\n        block.timestamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev the Owner can swap regarding the strike token's amount of contract balance\\r\\n    * this is for manual function\\r\\n   */\\r\\n\\r\\n  function contractBalanceSwap() external onlyOwner{\\r\\n      uint256 contractBalance = balanceOf(address(this));\\r\\n      swapTokensForEth(contractBalance);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev the Owner can send regarding the strike token's amount of contract balance\\r\\n    * this is for manual function\\r\\n    * we need to remain 0.1BNB in contract balance for swap and transfer fees.\\r\\n   */\\r\\n\\r\\n  function contractBalanceSend(uint256 amount, address payable _destAddr) external onlyOwner{\\r\\n    uint256 contractETHBalance = address(this).balance - 1 * 10**17;\\r\\n    if(contractETHBalance > amount){\\r\\n      _destAddr.transfer(amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev remove all fees\\r\\n   */\\r\\n\\r\\n  function removeAllFee() private {\\r\\n    if (_taxFee == 0) return;\\r\\n    _taxFee = 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev set all fees\\r\\n   */\\r\\n\\r\\n  function restoreAllFee() private {\\r\\n    _taxFee = 300;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev transfer tokens with amount \\r\\n   */\\r\\n\\r\\n  function _tokenTransfer(address sender, address recipient, uint256 amount, bool isTakeFee) private {\\r\\n    if (!isTakeFee) removeAllFee();\\r\\n    _transferStandard(sender, recipient, amount);\\r\\n    if (!isTakeFee) restoreAllFee();\\r\\n  }\\r\\n\\r\\n  function _transferStandard(address sender, address recipient, uint256 amount) private {    \\r\\n    uint256 fee = amount.mul(_taxFee).div(10000); // for 3% fee\\r\\n    //_beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n    uint256 senderBalance = _balances[sender];\\r\\n    require(senderBalance >= amount, \\\"BEP20: transfer amount exceeds balance\\\");\\r\\n    _balances[sender] = senderBalance - amount;\\r\\n    uint256 amountnew = amount - fee;\\r\\n    _balances[recipient] += (amountnew);\\r\\n\\r\\n    if (fee>0) {\\r\\n      _balances[address(this)] += (fee);\\r\\n      emit Transfer(sender, address(this), fee);\\r\\n    }\\r\\n\\r\\n    emit Transfer(sender, recipient, amountnew);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev set Max sold amount\\r\\n   */\\r\\n\\r\\n  function _setMaxSoldAmount(uint256 maxvalue) external onlyOwner {\\r\\n      _maxSoldAmount = maxvalue;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev set min balance for transferring\\r\\n   */\\r\\n\\r\\n  function _setMinBalance(uint256 minValue) external onlyOwner {\\r\\n    _minBalance = minValue;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev determine whether we apply tax fee or not\\r\\n   */\\r\\n\\r\\n  function _setApplyContractFee(bool isFee) external onlyOwner {\\r\\n    if(isFee) {\\r\\n        _taxFee = 300;\\r\\n    } else {\\r\\n        _taxFee = 0;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _setTeamWalletAddress(address teamWalletAddr) external onlyOwner {\\r\\n    _teamWallet = payable(teamWalletAddr);\\r\\n  }\\r\\n\\r\\n  function _setBuybackWalletAddress(address buybackWalletAddr) external onlyOwner {\\r\\n    _buybackWallet = payable(buybackWalletAddr);\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n}\"\r\n    },\r\n    \"/home/dev/Desktop/StrikeG/contracts/interface/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\"\r\n    },\r\n    \"/home/dev/Desktop/StrikeG/contracts/interface/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n// import \\\"./IUniswapV2Router01.sol\\\";\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\r\\n}\"\r\n    },\r\n    \"/home/dev/Desktop/StrikeG/contracts/library/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"/home/dev/Desktop/StrikeG/contracts/library/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buybackWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSoldAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isFee\",\"type\":\"bool\"}],\"name\":\"_setApplyContractFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buybackWalletAddr\",\"type\":\"address\"}],\"name\":\"_setBuybackWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxvalue\",\"type\":\"uint256\"}],\"name\":\"_setMaxSoldAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"}],\"name\":\"_setMinBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamWalletAddr\",\"type\":\"address\"}],\"name\":\"_setTeamWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_teamWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_destAddr\",\"type\":\"address\"}],\"name\":\"contractBalanceSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalanceSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StrikeX", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}