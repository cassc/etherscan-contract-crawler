{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/PTC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC1400.sol\\\";\\r\\n// import \\\"./IERC1400TokensRecipient.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\r\\n\\r\\ncontract PTC is ERC1400 {\\r\\n    constructor(\\r\\n        address _to\\r\\n    ) ERC1400(\\\"Petrip Coin\\\", \\\"PTC\\\", 1) {\\r\\n        require(_to != address(0));\\r\\n        _issueByPartition(\\r\\n            _defaultPartition,\\r\\n            msg.sender,\\r\\n            _to,\\r\\n            500_000_000 * 1e18,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n        _isIssuable = false;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/IERC1643.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title IERC1643 Document Management (part of the ERC1400 Security Token Standards)\\r\\n/// @dev See https://github.com/SecurityTokenStandard/EIP-Spec\\r\\n\\r\\ninterface IERC1643 {\\r\\n\\r\\n    // Document Management\\r\\n    function getDocument(bytes32 _name) external view returns (string memory, bytes32, uint256);\\r\\n    function setDocument(bytes32 _name, string memory _uri, bytes32 _documentHash) external;\\r\\n    function removeDocument(bytes32 _name) external;\\r\\n    function getAllDocuments() external view returns (bytes32[] memory);\\r\\n\\r\\n    // Document Events\\r\\n    event DocumentRemoved(bytes32 indexed name, string uri, bytes32 documentHash);\\r\\n    event DocumentUpdated(bytes32 indexed name, string uri, bytes32 documentHash);\\r\\n\\r\\n}\"\r\n    },\r\n    \"/contracts/IERC1400.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n/// @title IERC1400 Security Token Standard\\r\\n/// @dev See https://github.com/SecurityTokenStandard/EIP-Spec\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IERC1400 is IERC20 {\\r\\n\\r\\n  // Document Management\\r\\n  function getDocument(bytes32 _name) external view returns (string memory, bytes32, uint256);\\r\\n  function setDocument(bytes32 _name, string memory _uri, bytes32 _documentHash) external;\\r\\n\\r\\n  // Token Information\\r\\n  function balanceOfByPartition(bytes32 _partition, address _tokenHolder) external view returns (uint256);\\r\\n  function partitionsOf(address _tokenHolder) external view returns (bytes32[] memory);\\r\\n\\r\\n  // Transfers\\r\\n  function transferWithData(address _to, uint256 _value, bytes calldata _data) external;\\r\\n  function transferFromWithData(address _from, address _to, uint256 _value, bytes calldata _data) external;\\r\\n\\r\\n  // Partition Token Transfers\\r\\n  function transferByPartition(bytes32 _partition, address _to, uint256 _value, bytes calldata _data) external returns (bytes32);\\r\\n  function operatorTransferByPartition(bytes32 _partition, address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external returns (bytes32);\\r\\n\\r\\n  // Controller Operation\\r\\n  function isControllable() external view returns (bool);\\r\\n  function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\\r\\n  function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\\r\\n\\r\\n  // Operator Management\\r\\n  function authorizeOperator(address _operator) external;\\r\\n  function revokeOperator(address _operator) external;\\r\\n  function authorizeOperatorByPartition(bytes32 _partition, address _operator) external;\\r\\n  function revokeOperatorByPartition(bytes32 _partition, address _operator) external;\\r\\n\\r\\n  // Operator Information\\r\\n  function isOperator(address _operator, address _tokenHolder) external view returns (bool);\\r\\n  function isOperatorForPartition(bytes32 _partition, address _operator, address _tokenHolder) external view returns (bool);\\r\\n\\r\\n  // Token Issuance\\r\\n  function isIssuable() external view returns (bool);\\r\\n  function issue(address _tokenHolder, uint256 _value, bytes calldata _data) external;\\r\\n  function issueByPartition(bytes32 _partition, address _tokenHolder, uint256 _value, bytes calldata _data) external;\\r\\n\\r\\n  // Token Redemption\\r\\n  function redeem(uint256 _value, bytes calldata _data) external;\\r\\n  function redeemFrom(address _tokenHolder, uint256 _value, bytes calldata _data) external;\\r\\n  function redeemByPartition(bytes32 _partition, uint256 _value, bytes calldata _data) external;\\r\\n  function operatorRedeemByPartition(bytes32 _partition, address _tokenHolder, uint256 _value, bytes calldata _operatorData) external;\\r\\n\\r\\n  // Transfer Validity\\r\\n  function canTransfer(address to, uint256 value, bytes calldata data) external view returns (bytes1, bytes32);\\r\\n  function canTransferFrom(address from, address to, uint256 value, bytes calldata data) external view returns (bytes1, bytes32);\\r\\n  function canTransferByPartition(address from, address to, bytes32 partition, uint256 value, bytes calldata data) external view returns (bytes1, bytes32, bytes32);\\r\\n\\r\\n  // Controller Events\\r\\n  event ControllerTransfer(\\r\\n      address _controller,\\r\\n      address indexed _from,\\r\\n      address indexed _to,\\r\\n      uint256 _value,\\r\\n      bytes _data,\\r\\n      bytes _operatorData\\r\\n  );\\r\\n\\r\\n  event ControllerRedemption(\\r\\n      address _controller,\\r\\n      address indexed _tokenHolder,\\r\\n      uint256 _value,\\r\\n      bytes _data,\\r\\n      bytes _operatorData\\r\\n  );\\r\\n\\r\\n  // Document Events\\r\\n  event Document(bytes32 indexed _name, string _uri, bytes32 _documentHash);\\r\\n\\r\\n  // Transfer Events\\r\\n  event TransferByPartition(\\r\\n      bytes32 indexed _fromPartition,\\r\\n      address _operator,\\r\\n      address indexed _from,\\r\\n      address indexed _to,\\r\\n      uint256 _value,\\r\\n      bytes _data,\\r\\n      bytes _operatorData\\r\\n  );\\r\\n\\r\\n  event ChangedPartition(\\r\\n      bytes32 indexed _fromPartition,\\r\\n      bytes32 indexed _toPartition,\\r\\n      uint256 _value\\r\\n  );\\r\\n\\r\\n  // Operator Events\\r\\n  event AuthorizedOperator(address indexed _operator, address indexed _tokenHolder);\\r\\n  event RevokedOperator(address indexed _operator, address indexed _tokenHolder);\\r\\n  event AuthorizedOperatorByPartition(bytes32 indexed _partition, address indexed _operator, address indexed _tokenHolder);\\r\\n  event RevokedOperatorByPartition(bytes32 indexed _partition, address indexed _operator, address indexed _tokenHolder);\\r\\n\\r\\n  // Issuance / Redemption Events\\r\\n  event Issued(address indexed _operator, address indexed _to, uint256 _value, bytes _data);\\r\\n  event Redeemed(address indexed _operator, address indexed _from, uint256 _value, bytes _data);\\r\\n  event IssuedByPartition(bytes32 indexed _partition, address indexed _operator, address indexed _to, uint256 _value, bytes _data, bytes _operatorData);\\r\\n  event RedeemedByPartition(bytes32 indexed _partition, address indexed _operator, address indexed _from, uint256 _value, bytes _operatorData);\\r\\n}\"\r\n    },\r\n    \"/contracts/ERC1400.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC1400.sol\\\";\\r\\nimport \\\"./IERC1643.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @title ERC1400\\r\\n * @dev ERC1400 logic\\r\\n */\\r\\ncontract ERC1400 is IERC20, IERC1400, IERC1643, Ownable {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  /************************************* Token description ****************************************/\\r\\n  string internal _name;\\r\\n  string internal _symbol;\\r\\n  uint256 internal _granularity;\\r\\n  uint256 internal _totalSupply;\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /**************************************** Token behaviours **************************************/\\r\\n  // Indicate whether the token can still be controlled by operators or not anymore.\\r\\n  bool internal _isControllable;\\r\\n\\r\\n  // Indicate whether the token can still be issued by the issuer or not anymore.\\r\\n  bool internal _isIssuable;\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /********************************** ERC20 Token mappings ****************************************/\\r\\n  // Mapping from tokenHolder to balance.\\r\\n  mapping(address => uint256) internal _balances;\\r\\n\\r\\n  // Mapping from (tokenHolder, spender) to allowed value.\\r\\n  mapping (address => mapping (address => uint256)) internal _allowed;\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /**************************************** Documents *********************************************/\\r\\n  struct DocumentData {\\r\\n          bytes32 docHash; // Hash of the document\\r\\n          uint256 lastModified; // Timestamp at which document details was last modified\\r\\n          string uri; // URI of the document that exist off-chain\\r\\n  }\\r\\n\\r\\n  // mapping to store the documents details in the document\\r\\n  mapping(bytes32 => DocumentData) internal _documents;\\r\\n  // mapping to store the document name indexes\\r\\n  mapping(bytes32 => uint256) internal _docIndexes;\\r\\n  // Array use to store all the document name present in the contracts\\r\\n  bytes32[] _docNames;\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /*********************************** Partitions  mappings ***************************************/\\r\\n  // List of partitions.\\r\\n  bytes32[] internal _totalPartitions;\\r\\n\\r\\n  // Mapping from partition to their index.\\r\\n  mapping (bytes32 => uint256) internal _indexOfTotalPartitions;\\r\\n\\r\\n  // Mapping from partition to global balance of corresponding partition.\\r\\n  mapping (bytes32 => uint256) internal _totalSupplyByPartition;\\r\\n\\r\\n  // Mapping from tokenHolder to their partitions.\\r\\n  mapping (address => bytes32[]) internal _partitionsOf;\\r\\n\\r\\n  // Mapping from (tokenHolder, partition) to their index.\\r\\n  mapping (address => mapping (bytes32 => uint256)) internal _indexOfPartitionsOf;\\r\\n\\r\\n  // Mapping from (tokenHolder, partition) to balance of corresponding partition.\\r\\n  mapping (address => mapping (bytes32 => uint256)) internal _balanceOfByPartition;\\r\\n\\r\\n  // List of token default partitions (for ERC20 compatibility).\\r\\n  bytes32 internal _defaultPartition;\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /********************************* Global operators mappings ************************************/\\r\\n  // Mapping from (operator, tokenHolder) to authorized status. [TOKEN-HOLDER-SPECIFIC]\\r\\n  mapping(address => mapping(address => bool)) internal _authorizedOperator;\\r\\n  /************************************************************************************************/\\r\\n\\r\\n  /******************************** Partition operators mappings **********************************/\\r\\n  // Mapping from (partition, tokenHolder, spender) to allowed value. [TOKEN-HOLDER-SPECIFIC]\\r\\n  mapping(bytes32 => mapping (address => mapping (address => uint256))) internal _allowedByPartition;\\r\\n\\r\\n  // Mapping from (tokenHolder, partition, operator) to 'approved for partition' status. [TOKEN-HOLDER-SPECIFIC]\\r\\n  mapping (address => mapping (bytes32 => mapping (address => bool))) internal _authorizedOperatorByPartition;\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /***************************************** Modifiers ********************************************/\\r\\n  /**\\r\\n   * @dev Modifier to verify if token is issuable.\\r\\n   */\\r\\n  modifier isIssuableToken() {\\r\\n    require(_isIssuable, \\\"55\\\"); // 0x55\\tfunds locked (lockup period)\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /**************************** Events (additional - not mandatory) *******************************/\\r\\n  event ApprovalByPartition(bytes32 indexed partition, address indexed owner, address indexed spender, uint256 value);\\r\\n  /************************************************************************************************/\\r\\n\\r\\n  /**\\r\\n   * @dev Initialize ERC1400 + register the contract implementation in ERC1820Registry.\\r\\n   * @param tokenName Name of the token.\\r\\n   * @param tokenSymbol Symbol of the token.\\r\\n   * @param tokenGranularity Granularity of the token.\\r\\n   * not specified, like the case ERC20 tranfers.\\r\\n   */\\r\\n  constructor(\\r\\n    string memory tokenName,\\r\\n    string memory tokenSymbol,\\r\\n    uint256 tokenGranularity\\r\\n  ) {\\r\\n    _name = tokenName;\\r\\n    _symbol = tokenSymbol;\\r\\n    _totalSupply = 0;\\r\\n    require(tokenGranularity >= 1); // Constructor Blocked - Token granularity can not be lower than 1\\r\\n    _granularity = tokenGranularity;\\r\\n    _defaultPartition = bytes32(0);\\r\\n    _isControllable = false;\\r\\n    _isIssuable = true;\\r\\n  }\\r\\n\\r\\n\\r\\n  /************************************************************************************************/\\r\\n  /****************************** EXTERNAL FUNCTIONS (ERC20 INTERFACE) ****************************/\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /**\\r\\n   * @dev Get the total number of issued tokens.\\r\\n   * @return Total supply of tokens currently in circulation.\\r\\n   */\\r\\n  function totalSupply() external override view returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n  \\r\\n  /**\\r\\n   * @dev Get the balance of the account with address 'tokenHolder'.\\r\\n   * @param tokenHolder Address for which the balance is returned.\\r\\n   * @return Amount of token held by 'tokenHolder' in the token contract.\\r\\n   */\\r\\n  function balanceOf(address tokenHolder) external override view returns (uint256) {\\r\\n    return _balances[tokenHolder];\\r\\n  }\\r\\n  /**\\r\\n   * @dev Transfer token for a specified address.\\r\\n   * @param to The address to transfer to.\\r\\n   * @param value The value to be transferred.\\r\\n   * @return A boolean that indicates if the operation was successful.\\r\\n   */\\r\\n  function transfer(address to, uint256 value) external override returns (bool) {\\r\\n    _transferByDefaultPartitions(msg.sender, msg.sender, to, value, \\\"\\\");\\r\\n    return true;\\r\\n  }\\r\\n  /**\\r\\n   * @dev Check the value of tokens that an owner allowed to a spender.\\r\\n   * @param owner address The address which owns the funds.\\r\\n   * @param spender address The address which will spend the funds.\\r\\n   * @return A uint256 specifying the value of tokens still available for the spender.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external override view returns (uint256) {\\r\\n    return _allowed[owner][spender];\\r\\n  }\\r\\n  /**\\r\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of 'msg.sender'.\\r\\n   * @param spender The address which will spend the funds.\\r\\n   * @param value The amount of tokens to be spent.\\r\\n   * @return A boolean that indicates if the operation was successful.\\r\\n   */\\r\\n  function approve(address spender, uint256 value) external override returns (bool) {\\r\\n    require(spender != address(0), \\\"56\\\"); // 0x56\\tinvalid sender\\r\\n    _allowed[msg.sender][spender] = value;\\r\\n    emit Approval(msg.sender, spender, value);\\r\\n    return true;\\r\\n  }\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another.\\r\\n   * @param from The address which you want to transfer tokens from.\\r\\n   * @param to The address which you want to transfer to.\\r\\n   * @param value The amount of tokens to be transferred.\\r\\n   * @return A boolean that indicates if the operation was successful.\\r\\n   */\\r\\n  function transferFrom(address from, address to, uint256 value) external override returns (bool) {\\r\\n    require( _isOperator(msg.sender, from)\\r\\n      || (value <= _allowed[from][msg.sender]), \\\"53\\\"); // 0x53\\tinsufficient allowance\\r\\n\\r\\n    if(_allowed[from][msg.sender] >= value) {\\r\\n      _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\r\\n    } else {\\r\\n      _allowed[from][msg.sender] = 0;\\r\\n    }\\r\\n\\r\\n    _transferByDefaultPartitions(msg.sender, from, to, value, \\\"\\\");\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n\\r\\n  /************************************************************************************************/\\r\\n  /****************************** EXTERNAL FUNCTIONS (ERC1400 INTERFACE) **************************/\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /************************************* Document Management **************************************/\\r\\n  /**\\r\\n   * @dev Access a document associated with the token.\\r\\n   * @param documentName Short name (represented as a bytes32) associated to the document.\\r\\n   * @return Requested document + document hash + document timestamp.\\r\\n   */\\r\\n  function getDocument(bytes32 documentName) external override(IERC1400, IERC1643) view returns (string memory, bytes32, uint256) {\\r\\n        return (\\r\\n            _documents[documentName].uri,\\r\\n            _documents[documentName].docHash,\\r\\n            _documents[documentName].lastModified\\r\\n        );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Associate a document with the token.\\r\\n   * @param documentName Short name (represented as a bytes32) associated to the document.\\r\\n   * @param _uri Document content.\\r\\n   * @param _documentHash Hash of the document [optional parameter].\\r\\n   */\\r\\n  function setDocument(bytes32 documentName, string calldata _uri, bytes32 _documentHash) \\r\\n  external\\r\\n  virtual\\r\\n  override(IERC1400, IERC1643)\\r\\n  onlyOwner {\\r\\n    require(documentName != bytes32(0), \\\"Zero value is not allowed\\\");\\r\\n    require(bytes(_uri).length > 0, \\\"Should not be a empty uri\\\");\\r\\n    if (_documents[documentName].lastModified == uint256(0)) {\\r\\n        _docNames.push(documentName);\\r\\n        _docIndexes[documentName] = _docNames.length;\\r\\n    }\\r\\n    else\\r\\n      revert(\\\"Update document disabled\\\");\\r\\n    _documents[documentName] = DocumentData(_documentHash, block.timestamp, _uri);\\r\\n    emit DocumentUpdated(documentName, _uri, _documentHash);\\r\\n  }\\r\\n\\r\\n  function removeDocument(bytes32 documentName) external override onlyOwner{\\r\\n        require(_documents[documentName].lastModified != uint256(0), \\\"Document should be existed\\\");\\r\\n        uint256 index = _docIndexes[documentName] - 1;\\r\\n        if (index != _docNames.length - 1) {\\r\\n            _docNames[index] = _docNames[_docNames.length - 1];\\r\\n            _docIndexes[_docNames[index]] = index + 1; \\r\\n        }\\r\\n        _docNames.pop();\\r\\n        delete _documents[documentName];\\r\\n        delete _docIndexes[documentName];\\r\\n        emit DocumentRemoved(documentName, _documents[documentName].uri, _documents[documentName].docHash);\\r\\n  }\\r\\n\\r\\n  function getAllDocuments() external override view returns (bytes32[] memory) {\\r\\n    return _docNames;\\r\\n  }\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /************************************** Token Information ***************************************/\\r\\n  /**\\r\\n   * @dev Get balance of a tokenholder for a specific partition.\\r\\n   * @param partition Name of the partition.\\r\\n   * @param tokenHolder Address for which the balance is returned.\\r\\n   * @return Amount of token of partition 'partition' held by 'tokenHolder' in the token contract.\\r\\n   */\\r\\n  function balanceOfByPartition(bytes32 partition, address tokenHolder) external override view returns (uint256) {\\r\\n    return _balanceOfByPartition[tokenHolder][partition];\\r\\n  }\\r\\n  /**\\r\\n   * @dev Get partitions index of a tokenholder.\\r\\n   * @param tokenHolder Address for which the partitions index are returned.\\r\\n   * @return Array of partitions index of 'tokenHolder'.\\r\\n   */\\r\\n  function partitionsOf(address tokenHolder) external override view returns (bytes32[] memory) {\\r\\n    return _partitionsOf[tokenHolder];\\r\\n  }\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /****************************************** Transfers *******************************************/\\r\\n  /**\\r\\n   * @dev Transfer the amount of tokens from the address 'msg.sender' to the address 'to'.\\r\\n   * @param to Token recipient.\\r\\n   * @param value Number of tokens to transfer.\\r\\n   * @param data Information attached to the transfer, by the token holder.\\r\\n   */\\r\\n  function transferWithData(address to, uint256 value, bytes calldata data) external override {\\r\\n    _transferByDefaultPartitions(msg.sender, msg.sender, to, value, data);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Transfer the amount of tokens on behalf of the address 'from' to the address 'to'.\\r\\n   * @param from Token holder (or 'address(0)' to set from to 'msg.sender').\\r\\n   * @param to Token recipient.\\r\\n   * @param value Number of tokens to transfer.\\r\\n   * @param data Information attached to the transfer, and intended for the token holder ('from').\\r\\n   */\\r\\n  function transferFromWithData(address from, address to, uint256 value, bytes calldata data) external override virtual {\\r\\n    require( _isOperator(msg.sender, from)\\r\\n      || (value <= _allowed[from][msg.sender]), \\\"53\\\"); // 0x53\\tinsufficient allowance\\r\\n\\r\\n    if(_allowed[from][msg.sender] >= value) {\\r\\n      _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\r\\n    } else {\\r\\n      _allowed[from][msg.sender] = 0;\\r\\n    }\\r\\n\\r\\n    _transferByDefaultPartitions(msg.sender, from, to, value, data);\\r\\n  }\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /********************************** Partition Token Transfers ***********************************/\\r\\n  /**\\r\\n   * @dev Transfer tokens from a specific partition.\\r\\n   * @param partition Name of the partition.\\r\\n   * @param to Token recipient.\\r\\n   * @param value Number of tokens to transfer.\\r\\n   * @param data Information attached to the transfer, by the token holder.\\r\\n   * @return Destination partition.\\r\\n   */\\r\\n  function transferByPartition(\\r\\n    bytes32 partition,\\r\\n    address to,\\r\\n    uint256 value,\\r\\n    bytes calldata data\\r\\n  )\\r\\n    external\\r\\n    override\\r\\n    returns (bytes32)\\r\\n  {\\r\\n    return _transferByPartition(partition, msg.sender, msg.sender, to, value, data, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from a specific partition through an operator.\\r\\n   * @param partition Name of the partition.\\r\\n   * @param from Token holder.\\r\\n   * @param to Token recipient.\\r\\n   * @param value Number of tokens to transfer.\\r\\n   * @param data Information attached to the transfer. [CAN CONTAIN THE DESTINATION PARTITION]\\r\\n   * @param operatorData Information attached to the transfer, by the operator.\\r\\n   * @return Destination partition.\\r\\n   */\\r\\n  function operatorTransferByPartition(\\r\\n    bytes32 partition,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value,\\r\\n    bytes calldata data,\\r\\n    bytes calldata operatorData\\r\\n  )\\r\\n    external\\r\\n    override\\r\\n    returns (bytes32)\\r\\n  {\\r\\n    //We want to check if the msg.sender is an authorized operator for `from`\\r\\n    //(msg.sender == from OR msg.sender is authorized by from OR msg.sender is a controller if this token is controlable)\\r\\n    //OR\\r\\n    //We want to check if msg.sender is an `allowed` operator/spender for `from`\\r\\n    require(_isOperatorForPartition(partition, msg.sender, from)\\r\\n      || (value <= _allowedByPartition[partition][from][msg.sender]), \\\"53\\\"); // 0x53\\tinsufficient allowance\\r\\n\\r\\n    if(_allowedByPartition[partition][from][msg.sender] >= value) {\\r\\n      _allowedByPartition[partition][from][msg.sender] = _allowedByPartition[partition][from][msg.sender].sub(value);\\r\\n    } else {\\r\\n      _allowedByPartition[partition][from][msg.sender] = 0;\\r\\n    }\\r\\n\\r\\n    return _transferByPartition(partition, msg.sender, from, to, value, data, operatorData);\\r\\n  }\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /************************************* Controller Operation *************************************/\\r\\n  /**\\r\\n   * @dev Know if the token can be controlled by operators.\\r\\n   * If a token returns 'false' for 'isControllable()'' then it MUST always return 'false' in the future.\\r\\n   * @return bool 'true' if the token can still be controlled by operators, 'false' if it can't anymore.\\r\\n   */\\r\\n  function isControllable() external override view returns (bool) {\\r\\n    return _isControllable;\\r\\n  }\\r\\n  \\r\\n  function controllerTransfer(address /*_from*/, address /*_to*/, uint256 /*_value*/, bytes calldata /*_data*/, bytes calldata /*_operatorData*/) external pure override\\r\\n  {\\r\\n    revert(\\\"50\\\");\\r\\n  }\\r\\n\\r\\n  function controllerRedeem(address /*_tokenHolder*/, uint256 /*_value*/, bytes calldata /*_data*/, bytes calldata /*_operatorData*/) external pure override\\r\\n  {\\r\\n    revert(\\\"50\\\");\\r\\n  }\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /************************************* Operator Management **************************************/\\r\\n  /**\\r\\n   * @dev Set a third party operator address as an operator of 'msg.sender' to transfer\\r\\n   * and redeem tokens on its behalf.\\r\\n   * @param operator Address to set as an operator for 'msg.sender'.\\r\\n   */\\r\\n  function authorizeOperator(address operator) external override {\\r\\n    require(operator != msg.sender);\\r\\n    _authorizedOperator[operator][msg.sender] = true;\\r\\n    emit AuthorizedOperator(operator, msg.sender);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Remove the right of the operator address to be an operator for 'msg.sender'\\r\\n   * and to transfer and redeem tokens on its behalf.\\r\\n   * @param operator Address to rescind as an operator for 'msg.sender'.\\r\\n   */\\r\\n  function revokeOperator(address operator) external override {\\r\\n    require(operator != msg.sender);\\r\\n    _authorizedOperator[operator][msg.sender] = false;\\r\\n    emit RevokedOperator(operator, msg.sender);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Set 'operator' as an operator for 'msg.sender' for a given partition.\\r\\n   * @param partition Name of the partition.\\r\\n   * @param operator Address to set as an operator for 'msg.sender'.\\r\\n   */\\r\\n  function authorizeOperatorByPartition(bytes32 partition, address operator) external override {\\r\\n    _authorizedOperatorByPartition[msg.sender][partition][operator] = true;\\r\\n    emit AuthorizedOperatorByPartition(partition, operator, msg.sender);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Remove the right of the operator address to be an operator on a given\\r\\n   * partition for 'msg.sender' and to transfer and redeem tokens on its behalf.\\r\\n   * @param partition Name of the partition.\\r\\n   * @param operator Address to rescind as an operator on given partition for 'msg.sender'.\\r\\n   */\\r\\n  function revokeOperatorByPartition(bytes32 partition, address operator) external override {\\r\\n    _authorizedOperatorByPartition[msg.sender][partition][operator] = false;\\r\\n    emit RevokedOperatorByPartition(partition, operator, msg.sender);\\r\\n  }\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /************************************* Operator Information *************************************/\\r\\n  /**\\r\\n   * @dev Indicate whether the operator address is an operator of the tokenHolder address.\\r\\n   * @param operator Address which may be an operator of tokenHolder.\\r\\n   * @param tokenHolder Address of a token holder which may have the operator address as an operator.\\r\\n   * @return 'true' if operator is an operator of 'tokenHolder' and 'false' otherwise.\\r\\n   */\\r\\n  function isOperator(address operator, address tokenHolder) external override view returns (bool) {\\r\\n    return _isOperator(operator, tokenHolder);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Indicate whether the operator address is an operator of the tokenHolder\\r\\n   * address for the given partition.\\r\\n   * @param partition Name of the partition.\\r\\n   * @param operator Address which may be an operator of tokenHolder for the given partition.\\r\\n   * @param tokenHolder Address of a token holder which may have the operator address as an operator for the given partition.\\r\\n   * @return 'true' if 'operator' is an operator of 'tokenHolder' for partition 'partition' and 'false' otherwise.\\r\\n   */\\r\\n  function isOperatorForPartition(bytes32 partition, address operator, address tokenHolder) external override view returns (bool) {\\r\\n    return _isOperatorForPartition(partition, operator, tokenHolder);\\r\\n  }\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /**************************************** Token Issuance ****************************************/\\r\\n  /**\\r\\n   * @dev Know if new tokens can be issued in the future.\\r\\n   * @return bool 'true' if tokens can still be issued by the issuer, 'false' if they can't anymore.\\r\\n   */\\r\\n  function isIssuable() external override view returns (bool) {\\r\\n    return _isIssuable;\\r\\n  }\\r\\n\\r\\n  function issue(address to, uint256 issueValue, bytes calldata )\\r\\n    external\\r\\n    onlyOwner\\r\\n    isIssuableToken\\r\\n    override\\r\\n  {\\r\\n    _issueByPartition(_defaultPartition, msg.sender, to, issueValue, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  function issueByPartition(bytes32 , address , uint256 , bytes calldata )\\r\\n    external\\r\\n    pure\\r\\n    override\\r\\n  {\\r\\n    revert(\\\"55\\\");\\r\\n  }\\r\\n  /************************************************************************************************/\\r\\n  \\r\\n\\r\\n  function redeem(uint256 , bytes calldata )\\r\\n    external\\r\\n    pure\\r\\n    override\\r\\n  {\\r\\n    revert(\\\"55\\\");\\r\\n  }\\r\\n\\r\\n  function redeemFrom(address , uint256 , bytes calldata )\\r\\n    external\\r\\n    pure\\r\\n    override\\r\\n  {\\r\\n    revert(\\\"55\\\");\\r\\n  }\\r\\n\\r\\n  function redeemByPartition(bytes32 , uint256 , bytes calldata )\\r\\n    external\\r\\n    pure\\r\\n    override\\r\\n  {\\r\\n    revert(\\\"55\\\");\\r\\n  }\\r\\n\\r\\n  function operatorRedeemByPartition(bytes32 , address , uint256 , bytes calldata )\\r\\n    external\\r\\n    pure\\r\\n    override\\r\\n  {\\r\\n    revert(\\\"55\\\");\\r\\n  }\\r\\n  /************************************************************************************************/\\r\\n\\r\\n  /*************************************** Transfer Validity ***************************************/\\r\\n  function canTransfer(address to, uint256 value, bytes calldata data) external override view returns (bytes1, bytes32)\\r\\n  {\\r\\n    return (_canTransferByPartition(msg.sender, to, _defaultPartition, value,  data), bytes32(0));\\r\\n  }\\r\\n\\r\\n  function canTransferFrom(address from, address to, uint256 value, bytes calldata data) external override view returns (bytes1, bytes32)\\r\\n  {\\r\\n    return (_canTransferByPartition(from, to, _defaultPartition, value, data), bytes32(0));\\r\\n  }\\r\\n\\r\\n  function canTransferByPartition(address from, address to, bytes32 partition, uint256 value, bytes calldata data) external override view returns (bytes1, bytes32, bytes32)\\r\\n  {\\r\\n    return (_canTransferByPartition(from, to, partition, value, data), bytes32(0), bytes32(0));\\r\\n  }\\r\\n\\r\\n  function _canTransferByPartition(address from, address, bytes32 partition, uint256 value, bytes calldata) private view returns (bytes1)\\r\\n  {\\r\\n    if(_balanceOfByPartition[from][partition] < value) return bytes1(0x52);\\r\\n    return bytes1(0x51);\\r\\n  }\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /************************************************************************************************/\\r\\n  /************************ EXTERNAL FUNCTIONS (ADDITIONAL - NOT MANDATORY) ***********************/\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /************************************ Token description *****************************************/\\r\\n  /**\\r\\n   * @dev Get the name of the token, e.g., \\\"MyToken\\\".\\r\\n   * @return Name of the token.\\r\\n   */\\r\\n  function name() external view returns(string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Get the symbol of the token, e.g., \\\"MYT\\\".\\r\\n   * @return Symbol of the token.\\r\\n   */\\r\\n  function symbol() external view returns(string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Get the number of decimals of the token.\\r\\n   * @return The number of decimals of the token. For retrocompatibility, decimals are forced to 18 in ERC1400.\\r\\n   */\\r\\n  function decimals() external pure returns(uint8) {\\r\\n    return uint8(18);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Get the smallest part of the token that\u2019s not divisible.\\r\\n   * @return The smallest non-divisible part of the token.\\r\\n   */\\r\\n  function granularity() external view returns(uint256) {\\r\\n    return _granularity;\\r\\n  }\\r\\n  /**\\r\\n   * @dev Get list of existing partitions.\\r\\n   * @return Array of all exisiting partitions.\\r\\n   */\\r\\n  function totalPartitions() external view returns (bytes32[] memory) {\\r\\n    return _totalPartitions;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Get the total number of issued tokens for a given partition.\\r\\n   * @param partition Name of the partition.\\r\\n   * @return Total supply of tokens currently in circulation, for a given partition.\\r\\n   */\\r\\n  function totalSupplyByPartition(bytes32 partition) external view returns (uint256) {\\r\\n    return _totalSupplyByPartition[partition];\\r\\n  }\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /********************************* Token default partitions *************************************/\\r\\n  /**\\r\\n   * @dev Get default partitions to transfer from.\\r\\n   * Function used for ERC20 retrocompatibility.\\r\\n   * For example, a security token may return the bytes32(\\\"unrestricted\\\").\\r\\n   * @return Array of default partitions.\\r\\n   */\\r\\n  function getDefaultPartition() external view returns (bytes32) {\\r\\n    return _defaultPartition;\\r\\n  }\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /******************************** Partition Token Allowances ************************************/\\r\\n  /**\\r\\n   * @dev Check the value of tokens that an owner allowed to a spender.\\r\\n   * @param partition Name of the partition.\\r\\n   * @param owner address The address which owns the funds.\\r\\n   * @param spender address The address which will spend the funds.\\r\\n   * @return A uint256 specifying the value of tokens still available for the spender.\\r\\n   */\\r\\n  function allowanceByPartition(bytes32 partition, address owner, address spender) external view returns (uint256) {\\r\\n    return _allowedByPartition[partition][owner][spender];\\r\\n  }\\r\\n  \\r\\n  /**\\r\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of 'msg.sender'.\\r\\n   * @param partition Name of the partition.\\r\\n   * @param spender The address which will spend the funds.\\r\\n   * @param value The amount of tokens to be spent.\\r\\n   * @return A boolean that indicates if the operation was successful.\\r\\n   */\\r\\n  function approveByPartition(bytes32 partition, address spender, uint256 value) external returns (bool) {\\r\\n    require(spender != address(0), \\\"56\\\"); // 0x56\\tinvalid sender\\r\\n    _allowedByPartition[partition][msg.sender][spender] = value;\\r\\n    emit ApprovalByPartition(partition, msg.sender, spender, value);\\r\\n    return true;\\r\\n  }\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /************************************************************************************************/\\r\\n  /************************************* INTERNAL FUNCTIONS ***************************************/\\r\\n  /************************************************************************************************/\\r\\n\\r\\n\\r\\n  /**************************************** Token Transfers ***************************************/\\r\\n  /**\\r\\n   * @dev Perform the transfer of tokens.\\r\\n   * @param from Token holder.\\r\\n   * @param to Token recipient.\\r\\n   * @param value Number of tokens to transfer.\\r\\n   */\\r\\n  function _transferWithData(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  )\\r\\n    internal\\r\\n  {\\r\\n    require(_isMultiple(value), \\\"50\\\"); // 0x50\\ttransfer failure\\r\\n    require(to != address(0), \\\"57\\\"); // 0x57\\tinvalid receiver\\r\\n    require(_balances[from] >= value, \\\"52\\\"); // 0x52\\tinsufficient balance\\r\\n  \\r\\n    _balances[from] = _balances[from].sub(value);\\r\\n    _balances[to] = _balances[to].add(value);\\r\\n\\r\\n    emit Transfer(from, to, value); // ERC20 retrocompatibility \\r\\n  }\\r\\n  /**\\r\\n   * @dev Transfer tokens from a specific partition.\\r\\n   * @param fromPartition Partition of the tokens to transfer.\\r\\n   * @param operator The address performing the transfer.\\r\\n   * @param from Token holder.\\r\\n   * @param to Token recipient.\\r\\n   * @param value Number of tokens to transfer.\\r\\n   * @param data Information attached to the transfer. [CAN CONTAIN THE DESTINATION PARTITION]\\r\\n   * @param operatorData Information attached to the transfer, by the operator (if any).\\r\\n   * @return Destination partition.\\r\\n   */\\r\\n  function _transferByPartition(\\r\\n    bytes32 fromPartition,\\r\\n    address operator,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value,\\r\\n    bytes memory data,\\r\\n    bytes memory operatorData\\r\\n  )\\r\\n    internal\\r\\n    virtual\\r\\n    returns (bytes32)\\r\\n  {\\r\\n    require(_balanceOfByPartition[from][fromPartition] >= value, \\\"52\\\"); // 0x52\\tinsufficient balance\\r\\n\\r\\n    bytes32 toPartition = fromPartition;\\r\\n\\r\\n    if(operatorData.length != 0 && data.length >= 64) {\\r\\n      toPartition = _getDestinationPartition(fromPartition, data);\\r\\n    }\\r\\n\\r\\n\\r\\n    _removeTokenFromPartition(from, fromPartition, value);\\r\\n    _transferWithData(from, to, value);\\r\\n    _addTokenToPartition(to, toPartition, value);\\r\\n\\r\\n    emit TransferByPartition(fromPartition, operator, from, to, value, data, operatorData);\\r\\n\\r\\n    if(toPartition != fromPartition) {\\r\\n      emit ChangedPartition(fromPartition, toPartition, value);\\r\\n    }\\r\\n\\r\\n    return toPartition;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from default partitions.\\r\\n   * Function used for ERC20 retrocompatibility.\\r\\n   * @param operator The address performing the transfer.\\r\\n   * @param from Token holder.\\r\\n   * @param to Token recipient.\\r\\n   * @param value Number of tokens to transfer.\\r\\n   * @param data Information attached to the transfer, and intended for the token holder ('from') [CAN CONTAIN THE DESTINATION PARTITION].\\r\\n   */\\r\\n  function _transferByDefaultPartitions(\\r\\n    address operator,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value,\\r\\n    bytes memory data\\r\\n  )\\r\\n    internal\\r\\n  {\\r\\n    uint256 _balance = _balanceOfByPartition[from][_defaultPartition];\\r\\n    require(_balance >= value, \\\"52\\\"); // 0x52\\tinsufficient balance\\r\\n    _transferByPartition(_defaultPartition, operator, from, to, value, data, \\\"\\\");\\r\\n  }\\r\\n  \\r\\n  /**\\r\\n   * @dev Retrieve the destination partition from the 'data' field.\\r\\n   * By convention, a partition change is requested ONLY when 'data' starts\\r\\n   * with the flag: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\r\\n   * When the flag is detected, the destination tranche is extracted from the\\r\\n   * 32 bytes following the flag.\\r\\n   * @param fromPartition Partition of the tokens to transfer.\\r\\n   * @param data Information attached to the transfer. [CAN CONTAIN THE DESTINATION PARTITION]\\r\\n   * @return toPartition Destination partition.\\r\\n   */\\r\\n  function _getDestinationPartition(bytes32 fromPartition, bytes memory data) internal pure returns(bytes32 toPartition) {\\r\\n    bytes32 changePartitionFlag = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\r\\n    bytes32 flag;\\r\\n    assembly {\\r\\n      flag := mload(add(data, 32))\\r\\n    }\\r\\n    if(flag == changePartitionFlag) {\\r\\n      assembly {\\r\\n        toPartition := mload(add(data, 64))\\r\\n      }\\r\\n    } else {\\r\\n      toPartition = fromPartition;\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n   * @dev Remove a token from a specific partition.\\r\\n   * @param from Token holder.\\r\\n   * @param partition Name of the partition.\\r\\n   * @param value Number of tokens to transfer.\\r\\n   */\\r\\n  function _removeTokenFromPartition(address from, bytes32 partition, uint256 value) internal {\\r\\n    _balanceOfByPartition[from][partition] = _balanceOfByPartition[from][partition].sub(value);\\r\\n    _totalSupplyByPartition[partition] = _totalSupplyByPartition[partition].sub(value);\\r\\n\\r\\n    // If the total supply is zero, finds and deletes the partition.\\r\\n    if(_totalSupplyByPartition[partition] == 0) {\\r\\n      uint256 index1 = _indexOfTotalPartitions[partition];\\r\\n      require(index1 > 0, \\\"50\\\"); // 0x50\\ttransfer failure\\r\\n\\r\\n      // move the last item into the index being vacated\\r\\n      bytes32 lastValue = _totalPartitions[_totalPartitions.length - 1];\\r\\n      _totalPartitions[index1 - 1] = lastValue; // adjust for 1-based indexing\\r\\n      _indexOfTotalPartitions[lastValue] = index1;\\r\\n\\r\\n      //_totalPartitions.length -= 1;\\r\\n      _totalPartitions.pop();\\r\\n      _indexOfTotalPartitions[partition] = 0;\\r\\n    }\\r\\n\\r\\n    // If the balance of the TokenHolder's partition is zero, finds and deletes the partition.\\r\\n    if(_balanceOfByPartition[from][partition] == 0) {\\r\\n      uint256 index2 = _indexOfPartitionsOf[from][partition];\\r\\n      require(index2 > 0, \\\"50\\\"); // 0x50\\ttransfer failure\\r\\n\\r\\n      // move the last item into the index being vacated\\r\\n      bytes32 lastValue = _partitionsOf[from][_partitionsOf[from].length - 1];\\r\\n      _partitionsOf[from][index2 - 1] = lastValue;  // adjust for 1-based indexing\\r\\n      _indexOfPartitionsOf[from][lastValue] = index2;\\r\\n\\r\\n      //_partitionsOf[from].length -= 1;\\r\\n      _partitionsOf[from].pop();\\r\\n      _indexOfPartitionsOf[from][partition] = 0;\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n   * @dev Add a token to a specific partition.\\r\\n   * @param to Token recipient.\\r\\n   * @param partition Name of the partition.\\r\\n   * @param value Number of tokens to transfer.\\r\\n   */\\r\\n  function _addTokenToPartition(address to, bytes32 partition, uint256 value) internal {\\r\\n    if(value != 0) {\\r\\n      if (_indexOfPartitionsOf[to][partition] == 0) {\\r\\n        _partitionsOf[to].push(partition);\\r\\n        _indexOfPartitionsOf[to][partition] = _partitionsOf[to].length;\\r\\n      }\\r\\n      _balanceOfByPartition[to][partition] = _balanceOfByPartition[to][partition].add(value);\\r\\n\\r\\n      if (_indexOfTotalPartitions[partition] == 0) {\\r\\n        _totalPartitions.push(partition);\\r\\n        _indexOfTotalPartitions[partition] = _totalPartitions.length;\\r\\n      }\\r\\n      _totalSupplyByPartition[partition] = _totalSupplyByPartition[partition].add(value);\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n   * @dev Check if 'value' is multiple of the granularity.\\r\\n   * @param value The quantity that want's to be checked.\\r\\n   * @return 'true' if 'value' is a multiple of the granularity.\\r\\n   */\\r\\n  function _isMultiple(uint256 value) internal view returns(bool) {\\r\\n    return(value.div(_granularity).mul(_granularity) == value);\\r\\n  }\\r\\n  /************************************************************************************************/\\r\\n\\r\\n /************************************* Operator Information *************************************/\\r\\n  /**\\r\\n   * @dev Indicate whether the operator address is an operator of the tokenHolder address.\\r\\n   * @param operator Address which may be an operator of 'tokenHolder'.\\r\\n   * @param tokenHolder Address of a token holder which may have the 'operator' address as an operator.\\r\\n   * @return 'true' if 'operator' is an operator of 'tokenHolder' and 'false' otherwise.\\r\\n   */\\r\\n  function _isOperator(address operator, address tokenHolder) internal view returns (bool) {\\r\\n    return (operator == tokenHolder\\r\\n      || _authorizedOperator[operator][tokenHolder]\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Indicate whether the operator address is an operator of the tokenHolder\\r\\n   * address for the given partition.\\r\\n   * @param partition Name of the partition.\\r\\n   * @param operator Address which may be an operator of tokenHolder for the given partition.\\r\\n   * @param tokenHolder Address of a token holder which may have the operator address as an operator for the given partition.\\r\\n   * @return 'true' if 'operator' is an operator of 'tokenHolder' for partition 'partition' and 'false' otherwise.\\r\\n   */\\r\\n   function _isOperatorForPartition(bytes32 partition, address operator, address tokenHolder) internal view returns (bool) {\\r\\n     return (_isOperator(operator, tokenHolder)\\r\\n       || _authorizedOperatorByPartition[tokenHolder][partition][operator]\\r\\n     );\\r\\n   }\\r\\n\\r\\n  /************************************************************************************************/\\r\\n\\r\\n  /**************************************** Token Issuance ****************************************/\\r\\n  /**\\r\\n   * @dev Perform the issuance of tokens.\\r\\n   * @param operator Address which triggered the issuance.\\r\\n   * @param to Token recipient.\\r\\n   * @param value Number of tokens issued.\\r\\n   * @param data Information attached to the issuance, and intended for the recipient (to).\\r\\n   */\\r\\n  function _issue(address operator, address to, uint256 value, bytes memory data)\\r\\n    internal\\r\\n  {\\r\\n    require(_isMultiple(value), \\\"50\\\"); // 0x50\\ttransfer failure\\r\\n    require(to != address(0), \\\"57\\\"); // 0x57\\tinvalid receiver\\r\\n\\r\\n    _totalSupply = _totalSupply.add(value);\\r\\n    _balances[to] = _balances[to].add(value);\\r\\n\\r\\n    emit Issued(operator, to, value, data);\\r\\n    emit Transfer(address(0), to, value); // ERC20 retrocompatibility\\r\\n  }\\r\\n  \\r\\n  /**\\r\\n   * @dev Issue tokens from a specific partition.\\r\\n   * @param toPartition Name of the partition.\\r\\n   * @param operator The address performing the issuance.\\r\\n   * @param to Token recipient.\\r\\n   * @param value Number of tokens to issue.\\r\\n   * @param data Information attached to the issuance.\\r\\n   */\\r\\n  function _issueByPartition(\\r\\n    bytes32 toPartition,\\r\\n    address operator,\\r\\n    address to,\\r\\n    uint256 value,\\r\\n    bytes memory data\\r\\n  )\\r\\n    internal virtual\\r\\n  {\\r\\n    _issue(operator, to, value, data);\\r\\n    _addTokenToPartition(to, toPartition, value);\\r\\n\\r\\n    emit IssuedByPartition(toPartition, operator, to, value, data, \\\"\\\");\\r\\n  }\\r\\n  /************************************************************************************************/\\r\\n\\r\\n  /************************************************************************************************/\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"partition\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ApprovalByPartition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_partition\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperatorByPartition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_fromPartition\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_toPartition\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ChangedPartition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"ControllerRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"ControllerTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_documentHash\",\"type\":\"bytes32\"}],\"name\":\"Document\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"documentHash\",\"type\":\"bytes32\"}],\"name\":\"DocumentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"documentHash\",\"type\":\"bytes32\"}],\"name\":\"DocumentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Issued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_partition\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"IssuedByPartition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_partition\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"RedeemedByPartition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_partition\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"RevokedOperatorByPartition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_fromPartition\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"TransferByPartition\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"partition\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowanceByPartition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"partition\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveByPartition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"partition\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authorizeOperatorByPartition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"partition\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOfByPartition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"canTransfer\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"partition\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"canTransferByPartition\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"canTransferFrom\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"controllerRedeem\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"controllerTransfer\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDocuments\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultPartition\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"documentName\",\"type\":\"bytes32\"}],\"name\":\"getDocument\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isControllable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isIssuable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"partition\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"isOperatorForPartition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"issueValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"issueByPartition\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"operatorRedeemByPartition\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"partition\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorTransferByPartition\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"partitionsOf\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"redeemByPartition\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"redeemFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"documentName\",\"type\":\"bytes32\"}],\"name\":\"removeDocument\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"partition\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeOperatorByPartition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"documentName\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_documentHash\",\"type\":\"bytes32\"}],\"name\":\"setDocument\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPartitions\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"partition\",\"type\":\"bytes32\"}],\"name\":\"totalSupplyByPartition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"partition\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferByPartition\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromWithData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferWithData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PTC", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009368cdbdb6060d0fdcc675d6f0b267b05c101e7c", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}