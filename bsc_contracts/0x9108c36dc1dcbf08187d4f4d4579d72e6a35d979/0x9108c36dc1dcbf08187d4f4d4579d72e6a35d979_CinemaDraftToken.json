{"SourceCode": "/**\r\n * CinemaDraft Token\r\n *\r\n * author: Solulab Inc. - Umang Ajmera\r\n * \r\n * This is a rewrite of Safemoon contract in the hope to:\r\n *\r\n * - make it easier to change the tokenomics\r\n * - make it easier to maintain the code and develop it further\r\n * - remove redundant code\r\n * - fix some of the issues reported in the Safemoon audit\r\n *      https://www.certik.org/projects/safemoon\r\n *\r\n * SPDX-License-Identifier: UNLICENSED\r\n */\r\n \r\npragma solidity 0.8.0;\r\n\r\ninterface IBEP20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {return msg.sender;}\r\n    function _msgData() internal view virtual returns (bytes calldata) {this; return msg.data;}\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {return a + b;}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {return a - b;}\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {return a * b;}\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {return a % b;}\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked { require(b <= a, errorMessage); return a - b; }\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) { uint256 size; assembly { size := extcodesize(account) } return size > 0;}\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");(bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {return functionCall(target, data, \"Address: low-level call failed\");}\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {return functionCallWithValue(target, data, 0, errorMessage);}\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) { return returndata; } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {revert(errorMessage);}\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    function getUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"Only the previous owner can unlock onwership\");\r\n        require(block.timestamp > _lockTime , \"The contract is still locked\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\nabstract contract Manageable is Context {\r\n\r\n    address private _manager;\r\n\r\n    event ManagementTransferred(address indexed previousManager, address indexed newManager);\r\n\r\n    constructor(){\r\n        address msgSender = _msgSender();\r\n        _manager = msgSender;\r\n        emit ManagementTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function manager() public view returns(address){ return _manager; }\r\n\r\n    modifier onlyManager(){\r\n        require(_manager == _msgSender(), \"Manageable: caller is not the manager\");\r\n        _;\r\n    }\r\n\r\n    function transferManagement(address newManager) external virtual onlyManager {\r\n        emit ManagementTransferred(_manager, newManager);\r\n        _manager = newManager;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * ****************************************\r\n *\r\n * Tokenomics:\r\n * \r\n * Token Name   - CinemaDraft Token\r\n * Token Symbol - CD3D\r\n * Token Supply - 100M (Million)\r\n *\r\n * Token Distribution:\r\n *\r\n *  ICO                    20M (20%)\r\n *  Dead                   40M (40%)\r\n *  Team                   2M  (2%) \r\n *  Marketing              10M (10%)\r\n *  Liquidity              20M (20%)\r\n *  Community Jackpot Fund 8M  (8%)\r\n *\r\n * ****************************************\r\n * \r\n * Transaction Fee - 10%\r\n *\r\n * Transaction Fee Breakdown:\r\n *\r\n *  Dividends              6.0%\r\n *      CinemaDraft            15%\r\n *      Holders                75%\r\n *      Community Rewards      7%\r\n *      Staking Rewards        3%\r\n * Burn                    2.4%\r\n * Buyback & Burn          1.6%\r\n *\r\n * ****************************************\r\n *\r\n * Anti-Dumping Fee     - 15% on token sale\r\n * Anti-Whale Mechanism - 0.15% of total token supply\r\n * \r\n * ****************************************\r\n */\r\n\r\n/**\r\n * \r\n * If you wish to disable a particular tax/fee just set it to zero (or comment it out/remove it).\r\n * \r\n * You can add (in theory) as many custom taxes/fees with dedicated wallet addresses if you want. \r\n * Nevertheless, I do not recommend using more than a few as the contract has not been tested \r\n * for more than the original number of taxes/fees, which is 4 (redistribution, burn, \r\n * company and community). Furthermore, exchanges may impose a limit on the total\r\n * transaction fee (so that, for example, you cannot claim 100%). Usually this is done by limiting the \r\n * max value of slippage, for example, PancakeSwap max slippage is 49.9% and the fees total of more than\r\n * 35% will most likely fail there.\r\n * \r\n * NOTE: You shouldn't really remove the Rfi fee. If you do not wish to use RFI for your token, \r\n * you shouldn't be using this contract at all (you're just wasting gas if you do).\r\n *\r\n */\r\nabstract contract Tokenomics {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    // --------------------- Token Settings ------------------- //\r\n\r\n    string internal constant NAME = \"CinemaDraft Token\";\r\n    string internal constant SYMBOL = \"CD3D\";\r\n    \r\n    uint16 internal constant FEES_DIVISOR = 10**4;\r\n    uint8 internal constant DECIMALS = 9;\r\n    uint256 internal constant ZEROES = 10**DECIMALS;\r\n    \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 internal constant TOTAL_SUPPLY = 100 * 10**6 * ZEROES; // 100 Million i.e. 100 * 10**6\r\n    uint256 internal _reflectedSupply = (MAX - (MAX % TOTAL_SUPPLY));\r\n\r\n    /**\r\n     * @dev Set the maximum transaction amount allowed in a transfer.\r\n     * \r\n     * The default value is 0.15% of the total supply. \r\n     * \r\n     * NOTE: set the value to `TOTAL_SUPPLY` to have an unlimited max, i.e.\r\n     * `maxTransactionAmount = TOTAL_SUPPLY;`\r\n     */\r\n    uint256 internal constant maxTransactionAmount = TOTAL_SUPPLY * 15 / FEES_DIVISOR;\r\n\r\n    // --------------------- Fees Settings ------------------- //\r\n    \r\n    /**\r\n     * @dev The anti-dumping fees will be charged after ICO.\r\n     * This fee is differenct from the transaction fees of 1o%. This fee is charged only \r\n     * when the token is being sold on any external third-party application. The benefit\r\n     * of this fee is shared among all the token holders and this fee also indirectly incentivize \r\n     * holders to not sell. Also, after deducting this fee, the remaining amount will be used for\r\n     * calculating the 10% fee and the remaining will finally be transferred to the recipient.\r\n     *\r\n     * For Example: If a user sells 100 tokens on Pancake Swap. The following will happen:\r\n     * Anti-dumping     - Deduct 15% of 100 tokens  - remaining quantity 85.0\r\n     * Transaction fees - Deduct 10 %  of 85 tokens - remaining quantity 76.5\r\n     * This remaining quantity of 76.5 will be sold on the Pancake Swap.\r\n     * \r\n     * The default value is 15% of the transaction amount.\r\n     * \r\n     * NOTE: The maximum transaction amount will however be checked first to maintain anti-whale\r\n     * mechanism.\r\n     * \r\n    */\r\n    uint256 internal constant antiDumpingFees = 1500;\r\n\r\n    /**\r\n     * @dev To add/edit/remove fees scroll down to the `addFees` function below\r\n     */\r\n    address internal burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address internal cinemaDraftWalletAddress = 0x74A892AA1fc6c8C44018cDd16a597fb7151195d8;\r\n    address internal communityJackpotAddress = 0x841eE81FF407Ba5504e103D15D8028116391810d;\r\n    address internal stakingRewardsWalletAddress = 0xaFA6058126D8f48d49A9A4b127ef7e27C5e1DC43;\r\n\r\n    enum FeeType { Rfi, Burn, CinemaDraft, CommunityJackpot, StakingRewards }\r\n    \r\n    struct Fee {\r\n        FeeType name;\r\n        uint256 value;\r\n        address recipient;\r\n        uint256 total;\r\n    }\r\n    Fee[] public fees;\r\n    \r\n    uint256 private sumOfFees;\r\n\r\n    constructor() {\r\n        _addFees();\r\n    }\r\n\r\n    function _addFee(FeeType name, uint256 value, address recipient) private {\r\n        fees.push( Fee(name, value, recipient, 0 ) );\r\n        sumOfFees += value;\r\n    }\r\n\r\n    function _addFees() private {\r\n\r\n        /**\r\n         * The RFI recipient is ignored but we need to give a valid address value\r\n         *\r\n         * CAUTION: If you don't want to use RFI this implementation isn't really for you!\r\n         *      There are much more efficient and cleaner token contracts without RFI \r\n         *      so you should use one of those\r\n         *\r\n         * The value of fees is given in part per 10,000 (based on the value of FEES_DIVISOR),\r\n         * e.g. for 4% use 400, for 0.42% use 42, etc. \r\n         */ \r\n        _addFee(FeeType.Rfi, 450, address(this)); \r\n\r\n        _addFee(FeeType.Burn, 400, burnAddress);\r\n        _addFee(FeeType.CinemaDraft, 90, cinemaDraftWalletAddress);\r\n        _addFee(FeeType.CommunityJackpot, 42, communityJackpotAddress);\r\n        _addFee(FeeType.StakingRewards, 18, stakingRewardsWalletAddress);\r\n\r\n    }\r\n\r\n    function _getFeesCount() internal view returns (uint256) {\r\n        return fees.length;\r\n    }\r\n\r\n    function _getFeeStruct(uint256 index) private view returns(Fee storage){\r\n        require( index >= 0 && index < fees.length, \"FeesSettings._getFeeStruct: Fee index out of bounds\");\r\n        return fees[index];\r\n    }\r\n    \r\n    function _getFee(uint256 index) internal view returns (FeeType, uint256, address, uint256){\r\n        Fee memory fee = _getFeeStruct(index);\r\n        return ( fee.name, fee.value, fee.recipient, fee.total );\r\n    }\r\n    \r\n    function getFeeTotal() internal view returns (uint256) {\r\n        return sumOfFees;\r\n    }\r\n    \r\n    function _addFeeCollectedAmount(uint256 index, uint256 amount) internal {\r\n        Fee storage fee = _getFeeStruct(index);\r\n        fee.total = fee.total.add(amount);\r\n    }\r\n\r\n    function getCollectedFeeTotal(uint256 index) internal view returns (uint256){\r\n        Fee memory fee = _getFeeStruct(index);\r\n        return fee.total;\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * The fee tokenomics start after the token auction. To achive this, a \"isInPresale\" flag is used.\r\n * As soon as the auction ends, the contract manager can set this value to false. This will start \r\n * fee deduction as per as per the tokenomics mentioned above.\r\n*/\r\nabstract contract Presaleable is Manageable {\r\n    \r\n    bool public isInPresale = false;\r\n    \r\n    function setPresaleableEnabled(bool value) external onlyManager {\r\n        isInPresale = value;\r\n    }\r\n}\r\n\r\n/**\r\n * This is the modified version of Safemoon contract.\r\n * For a modular approach, multiple inheritance is used.\r\n *\r\n * @dev This contract implements only the reflection logic as used in deflationary tokens. You can \r\n * refer to Reflect Finance at 'https://github.com/reflectfinance'. All the other functionalties\r\n * as per the business logic of our application have been implemented in the \"CinemaDraftToken\"\r\n * contract. \r\n */\r\nabstract contract ReflectionToken is IBEP20, Ownable, Presaleable, Tokenomics {\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) internal _reflectedBalances;\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n    \r\n    mapping (address => bool) internal _isExcludedFromFee;\r\n    mapping (address => bool) internal _isExcludedFromRewards;\r\n    address[] private _excluded;\r\n    \r\n    mapping (address => bool) internal _isIncludedInAntiDumping;\r\n\r\n    mapping (address => bool) internal _isUnlimitedSenderOrRecipient;\r\n    \r\n    constructor() {\r\n        \r\n        _reflectedBalances[owner()] = _reflectedSupply;\r\n        \r\n        // exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        \r\n        // exclude the owner and this contract from rewards\r\n        _exclude(owner());\r\n        _exclude(address(this));\r\n        \r\n        // set owner and staking rewards wallet as unlimited sender/recipient\r\n        _isUnlimitedSenderOrRecipient[owner()] = true;\r\n\r\n        emit Transfer(address(0), owner(), TOTAL_SUPPLY);\r\n        \r\n    }\r\n    \r\n    /** Functions required by IBEP20 **/\r\n        \r\n        function name() external pure override returns (string memory) {\r\n            return NAME;\r\n        }\r\n        \r\n        function symbol() external pure override returns (string memory) {\r\n            return SYMBOL;\r\n        }\r\n        \r\n        function decimals() external pure override returns (uint8) {\r\n            return DECIMALS;\r\n        }\r\n        \r\n        function totalSupply() external pure override returns (uint256) {\r\n            return TOTAL_SUPPLY;\r\n        }\r\n        \r\n        function getOwner() external view override returns (address) {\r\n            return owner();\r\n        }\r\n        \r\n        function balanceOf(address account) public view override returns (uint256){\r\n            if (_isExcludedFromRewards[account]) return _balances[account];\r\n            return tokenFromReflection(_reflectedBalances[account]);\r\n        }\r\n        \r\n        function transfer(address recipient, uint256 amount) external override returns (bool){\r\n            _transfer(_msgSender(), recipient, amount);\r\n            return true;\r\n        }\r\n        \r\n        function allowance(address owner, address spender) external view override returns (uint256){\r\n            return _allowances[owner][spender];\r\n        }\r\n    \r\n        function approve(address spender, uint256 amount) external override returns (bool) {\r\n            _approve(_msgSender(), spender, amount);\r\n            return true;\r\n        }\r\n        \r\n        function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool){\r\n            _transfer(sender, recipient, amount);\r\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n            return true;\r\n        }\r\n    /** Functions required by IBEP20 - END **/\r\n\r\n    /**\r\n     * @dev this is really a \"soft\" burn (total supply is not reduced). RFI holders\r\n     * get two benefits from burning tokens:\r\n     *\r\n     * 1) Tokens in the burn address increase the % of tokens held by holders not\r\n     *    excluded from rewards\r\n     * 2) Tokens in the burn address cannot be sold (which in turn causes deflation)\r\n     *\r\n     *\r\n     * In RFI holders already get % of each transaction so the value of their tokens \r\n     * increases (in a way). Therefore there is really no need to do a \"hard\" burn \r\n     * (reduce the total supply). What matters (in RFI) is to make sure that a large\r\n     * amount of tokens cannot be sold = increasing the intrinsic value of tokens.\r\n     * For this purpose, transfering tokens to a (vanity) burn address is the\r\n     * most appropriate way to \"burn\". \r\n     *\r\n     * There is an extra check placed into the `transfer` function to make sure the\r\n     * burn address cannot withdraw the tokens is has (although the chance of someone\r\n     * having/finding the private key is virtually zero).\r\n     */\r\n    function burn(uint256 amount) external {\r\n\r\n        address sender = _msgSender();\r\n        require(sender != address(0), \"ReflectionToken: burn from the zero address\");\r\n        require(sender != address(burnAddress), \"ReflectionToken: burn from the burn address\");\r\n\r\n        uint256 balance = balanceOf(sender);\r\n        require(balance >= amount, \"ReflectionToken: burn amount exceeds balance\");\r\n\r\n        uint256 reflectedAmount = amount.mul(_getCurrentRate());\r\n\r\n        // remove the amount from the sender's balance first\r\n        _reflectedBalances[sender] = _reflectedBalances[sender].sub(reflectedAmount);\r\n        if (_isExcludedFromRewards[sender])\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n\r\n        _burnTokens( sender, amount, reflectedAmount );\r\n    }\r\n    \r\n    /**\r\n     * @dev \"Soft\" burns the specified amount of tokens by sending them \r\n     * to the burn address\r\n     */\r\n    function _burnTokens(address sender, uint256 tBurn, uint256 rBurn) internal {\r\n\r\n        /**\r\n         * @dev Do not reduce _totalSupply and/or _reflectedSupply. (soft) burning by sending\r\n         * tokens to the burn address (which should be excluded from rewards) is sufficient\r\n         * in RFI\r\n         */ \r\n        _reflectedBalances[burnAddress] = _reflectedBalances[burnAddress].add(rBurn);\r\n        if (_isExcludedFromRewards[burnAddress])\r\n            _balances[burnAddress] = _balances[burnAddress].add(tBurn);\r\n\r\n        /**\r\n         * @dev Emit the event so that the burn address balance is updated (on bscscan)\r\n         */\r\n        emit Transfer(sender, burnAddress, tBurn);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates and returns the reflected amount for the given amount with or without \r\n     * the transfer fees (deductTransferFee true/false)\r\n     */\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns(uint256) {\r\n        require(tAmount <= TOTAL_SUPPLY, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,) = _getValues(tAmount,0);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,) = _getValues(tAmount, getFeeTotal());\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates and returns the amount of tokens corresponding to the given reflected amount.\r\n     */\r\n    function tokenFromReflection(uint256 rAmount) internal view returns(uint256) {\r\n        require(rAmount <= _reflectedSupply, \"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getCurrentRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n    \r\n    function excludeFromReward(address account) external onlyOwner {\r\n        require(!_isExcludedFromRewards[account], \"Account is already excluded from rewards\");\r\n        _exclude(account);\r\n    }\r\n    \r\n    function _exclude(address account) internal {\r\n        if(_reflectedBalances[account] > 0) {\r\n            _balances[account] = tokenFromReflection(_reflectedBalances[account]);\r\n        }\r\n        _isExcludedFromRewards[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n    \r\n    function isExcludedFromReward(address account) external view returns (bool) {\r\n        return _isExcludedFromRewards[account];\r\n    }    \r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcludedFromRewards[account], \"Account is already included in rewards\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _balances[account] = 0;\r\n                _isExcludedFromRewards[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function setExcludedFromFee(address account, bool value) external onlyOwner {\r\n        _isExcludedFromFee[account] = value;\r\n    }\r\n    \r\n    function isExcludedFromFee(address account) public view returns(bool) { \r\n        return _isExcludedFromFee[account];\r\n    }\r\n    \r\n    function includeInAntiDumping(address _address, bool value) external onlyOwner {\r\n        _isIncludedInAntiDumping[_address] = value;\r\n        _exclude(_address);\r\n    }\r\n    \r\n    function isIncludedInAntiDumping(address _address) public view returns (bool) {\r\n        return _isIncludedInAntiDumping[_address];\r\n    }\r\n    \r\n    function setIsUnlimitedSenderOrRecipient(address account, bool value) external onlyOwner {\r\n        require(isInPresale, \"ReflectionToken: Address can be initialized only during the pre-sale.\");\r\n        _isUnlimitedSenderOrRecipient[account] = value;\r\n        _isExcludedFromFee[account];\r\n    }\r\n    \r\n    function isUnlimitedSenderOrRecipient(address account) internal view returns (bool) {\r\n        return _isUnlimitedSenderOrRecipient[account];\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ReflectionToken: approve from the zero address\");\r\n        require(spender != address(0), \"ReflectionToken: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ReflectionToken: transfer from the zero address\");\r\n        require(recipient != address(0), \"ReflectionToken: transfer to the zero address\");\r\n        require(sender != address(burnAddress), \"ReflectionToken: transfer from the burn address\");\r\n        require(amount > 0, \"ReflectionToken: Transfer amount must be greater than zero\");\r\n        \r\n        // indicates whether or not fee should be deducted from the transfer\r\n        bool takeFee = true;\r\n        \r\n        // holds the fees value as per recipient address, used for anti-dumping mechanism\r\n        uint256 sumOfFees = getFeeTotal();\r\n\r\n        if ( isInPresale ) { takeFee = false; }\r\n        else {\r\n            /**\r\n            * Check the amount is within the max allowed limit as long as a\r\n            * unlimited sender/recepient is not involved in the transaction\r\n            */\r\n            if ( amount > maxTransactionAmount && !isUnlimitedSenderOrRecipient(sender) && !isUnlimitedSenderOrRecipient(recipient) ) {\r\n                revert(\"ReflectionToken: Transfer amount exceeds the maxTxAmount as per anti-whale protocol\");\r\n            }\r\n        }\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) { takeFee = false; }\r\n\r\n        // if the transaction is being performed on third-party application, take anti-dumping fee\r\n        if(_isIncludedInAntiDumping[recipient]) {\r\n            sumOfFees = getFeeTotal().add(antiDumpingFees);\r\n        }\r\n        _transferTokens(sender, recipient, amount, takeFee, sumOfFees);\r\n        \r\n    }\r\n\r\n    function _transferTokens(address sender, address recipient, uint256 amount, bool takeFee, uint256 sumOfFees) private {\r\n    \r\n        // We don't need to know anything about the individual fees here \r\n        // (like Safemoon does with `_getValues`). What is required \r\n        // for transfer is the sum of all fees to calculate the % of the total \r\n        // transaction amount which should be transferred to the recipient. \r\n        //\r\n        // The `_takeFees` call will/should take care of the individual fees\r\n         \r\n        // uint256 sumOfFees = getFeeTotal();\r\n        if ( !takeFee ) { sumOfFees = 0; }\r\n        \r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tAmount, uint256 tTransferAmount, uint256 currentRate ) = _getValues(amount, sumOfFees);\r\n        \r\n        /** \r\n         * Sender's and Recipient's reflected balances must be always updated regardless of\r\n         * whether they are excluded from rewards or not.\r\n         */ \r\n        _reflectedBalances[sender] = _reflectedBalances[sender].sub(rAmount);\r\n        _reflectedBalances[recipient] = _reflectedBalances[recipient].add(rTransferAmount);\r\n\r\n        /**\r\n         * Update the true/nominal balances for excluded accounts\r\n         */        \r\n        if (_isExcludedFromRewards[sender]) { _balances[sender] = _balances[sender].sub(tAmount); }\r\n        if (_isExcludedFromRewards[recipient] ) { _balances[recipient] = _balances[recipient].add(tTransferAmount); }\r\n        \r\n        _takeFees( amount, currentRate, sumOfFees );\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    function _takeFees(uint256 amount, uint256 currentRate, uint256 sumOfFees ) private {\r\n        if ( sumOfFees > 0 && !isInPresale ) {\r\n            if ( sumOfFees == (getFeeTotal().add(antiDumpingFees)) ) {\r\n                _takeTransactionFees(amount.mul(sumOfFees).div(FEES_DIVISOR).mul(10), currentRate);\r\n            } else {\r\n                _takeTransactionFees(amount, currentRate);   \r\n            }\r\n        }\r\n    }\r\n    \r\n    function _getValues(uint256 tAmount, uint256 feesSum) internal view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        \r\n        uint256 tTotalFees = tAmount.mul(feesSum).div(FEES_DIVISOR);\r\n        uint256 tTransferAmount = tAmount.sub(tTotalFees);\r\n        uint256 currentRate = _getCurrentRate();\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTotalFees = tTotalFees.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rTotalFees);\r\n        \r\n        return (rAmount, rTransferAmount, tAmount, tTransferAmount, currentRate);\r\n    }\r\n    \r\n    function _getCurrentRate() internal view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n    \r\n    function _getCurrentSupply() internal view returns(uint256, uint256) {\r\n        uint256 rSupply = _reflectedSupply;\r\n        uint256 tSupply = TOTAL_SUPPLY;  \r\n\r\n        /**\r\n         * The code below removes balances of addresses excluded from rewards from\r\n         * rSupply and tSupply, which effectively increases the % of transaction fees\r\n         * delivered to non-excluded holders\r\n         */    \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_reflectedBalances[_excluded[i]] > rSupply || _balances[_excluded[i]] > tSupply) return (_reflectedSupply, TOTAL_SUPPLY);\r\n            rSupply = rSupply.sub(_reflectedBalances[_excluded[i]]);\r\n            tSupply = tSupply.sub(_balances[_excluded[i]]);\r\n        }\r\n        if (tSupply == 0 || rSupply < _reflectedSupply.div(TOTAL_SUPPLY)) return (_reflectedSupply, TOTAL_SUPPLY);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    /**\r\n     * @dev Redistributes the specified amount among the current holders via the reflect.finance\r\n     * algorithm, i.e. by updating the _reflectedSupply (_rSupply) which ultimately adjusts the\r\n     * current rate used by `tokenFromReflection` and, in turn, the value returns from `balanceOf`. \r\n     * This is the bit of clever math which allows rfi to redistribute the fee without \r\n     * having to iterate through all holders. \r\n     * \r\n     * Visit our discord at https://discord.gg/dAmr6eUTpM\r\n     */\r\n    function _redistribute(uint256 amount, uint256 currentRate, uint256 fee, uint256 index) internal {\r\n        uint256 tFee = amount.mul(fee).div(FEES_DIVISOR);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n\r\n        _reflectedSupply = _reflectedSupply.sub(rFee);\r\n        _addFeeCollectedAmount(index, tFee);\r\n    }\r\n    \r\n    /**\r\n     * @dev Hook that is called before the `Transfer` event is emitted if fees are enabled for the transfer\r\n     */\r\n    function _takeTransactionFees(uint256 amount, uint256 currentRate) internal virtual;\r\n\r\n}\r\n\r\ncontract CinemaDraftToken is ReflectionToken {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    function _takeTransactionFees(uint256 amount, uint256 currentRate) internal override {\r\n        \r\n        if( isInPresale ) { return; }\r\n\r\n        uint256 feesCount = _getFeesCount();\r\n        for (uint256 index = 0; index < feesCount; index++ ) {\r\n            (FeeType name, uint256 value, address recipient,) = _getFee(index);\r\n            // no need to check value < 0 as the value is uint (i.e. from 0 to 2^256-1)\r\n            if ( value == 0 ) continue;\r\n\r\n            if ( name == FeeType.Rfi ) {\r\n                _redistribute( amount, currentRate, value, index );\r\n            }\r\n            else if ( name == FeeType.Burn ) {\r\n                _burn( amount, currentRate, value, index );\r\n            }\r\n            else if ( name == FeeType.CinemaDraft) {\r\n                _takeFee( amount, currentRate, value, recipient, index );\r\n            }\r\n            else if (name == FeeType.StakingRewards) {\r\n                _takeFee( amount, currentRate, value, recipient, index );\r\n            }\r\n            else { // Fees to CommunityJackpot\r\n                _takeFee( amount, currentRate, value, recipient, index );\r\n            }\r\n        }\r\n    }\r\n\r\n    function _burn(uint256 amount, uint256 currentRate, uint256 fee, uint256 index) private {\r\n        uint256 tBurn = amount.mul(fee).div(FEES_DIVISOR);\r\n        uint256 rBurn = tBurn.mul(currentRate);\r\n\r\n        _burnTokens(address(this), tBurn, rBurn);\r\n        _addFeeCollectedAmount(index, tBurn);\r\n    }\r\n\r\n    function _takeFee(uint256 amount, uint256 currentRate, uint256 fee, address recipient, uint256 index) private {\r\n\r\n        uint256 tAmount = amount.mul(fee).div(FEES_DIVISOR);\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n\r\n        _reflectedBalances[recipient] = _reflectedBalances[recipient].add(rAmount);\r\n        if(_isExcludedFromRewards[recipient])\r\n            _balances[recipient] = _balances[recipient].add(tAmount);\r\n\r\n        _addFeeCollectedAmount(index, tAmount);\r\n    }\r\n    \r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagementTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"enum Tokenomics.FeeType\",\"name\":\"name\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeInAntiDumping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isIncludedInAntiDumping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsUnlimitedSenderOrRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPresaleableEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"transferManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CinemaDraftToken", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5ed60e199d6142efd2e704526dce19b83bdafa82564027b7b1d8f6cf0ed197a8"}