{"SourceCode": "//SPDX-License-Identifier: Unlicense\r\npragma solidity 0.8.19;\r\n\r\nabstract contract owned {\r\n    address payable public owner;\r\n    address public treasory;\r\n    address public oracle;\r\n    bool public paused;\r\n\r\n  modifier onlyOwner() {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only contract owner can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier notPaused() {\r\n        require(!paused, \"Contract is paused\");\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner{\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        paused = false;\r\n    }\r\n\r\n    constructor() {\r\n        owner = payable(msg.sender);\r\n        treasory = 0x75e6ef3113266F7116B219f05Caede20889ddDf3;\r\n        oracle = 0x72d0b60e31dFfbe31c42B926C9d3d4674098294e;\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) public notPaused onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function transferTreasoryOwnership(address payable newTreasory)\r\n        public\r\n        notPaused\r\n        onlyOwner\r\n    {\r\n        treasory = newTreasory;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n}\r\n\r\nabstract contract ERC20Holder is owned {\r\n    mapping(address => bool) public acceptedTokens;\r\n\r\n    function modToken(address token, bool accepted) public notPaused onlyOwner {\r\n        acceptedTokens[token] = accepted;\r\n    }\r\n\r\n    receive() external payable {\r\n        // Accept all incoming tokens\r\n    }\r\n\r\n    // a function to receive BEP20 tokens\r\n    function receiveToken(address token, uint256 amount) public notPaused {\r\n        require(acceptedTokens[token], \"Token not accepted\");\r\n        require(\r\n            IBEP20(token).transferFrom(msg.sender, address(this), amount),\r\n            \"Transfer failed\"\r\n        );\r\n    }\r\n}\r\n\r\ncontract oracleClient is ERC20Holder {\r\n    function setOracle(address a) public notPaused onlyOwner {\r\n        oracle = a;\r\n    }\r\n}\r\n\r\ninterface IOracle {\r\n    function ask(\r\n        uint8 typeSN,\r\n        string calldata idPost,\r\n        string calldata idUser,\r\n        bytes32 idRequest\r\n    ) external;\r\n\r\n    function askBounty(\r\n        uint8 typeSN,\r\n        string calldata idPost,\r\n        string calldata idUser,\r\n        bytes32 idProm\r\n    ) external;\r\n}\r\n\r\ncontract campaign is oracleClient {\r\n\r\n    struct cpRatio {\r\n        uint256 likeRatio;\r\n        uint256 shareRatio;\r\n        uint256 viewRatio;\r\n        uint256 reachLimit;\r\n    }\r\n\r\n    struct bountyUnit {\r\n        uint256 minRange;\r\n        uint256 maxRange;\r\n        uint256 typeSN;\r\n        uint256 amount;\r\n    }\r\n\r\n    struct AdPool {\r\n        address advertiser;\r\n        string dataUrl;\r\n        uint64 startDate;\r\n        uint64 endDate;\r\n        uint64 nbProms;\r\n        uint64 nbValidProms;\r\n        mapping(uint64 => bytes32) proms;\r\n        Fund funds;\r\n        mapping(uint8 => cpRatio) ratios;\r\n        bountyUnit[] bounties;\r\n        uint64 participationLimit; // Optional property to limit number of participation by influencer default value is 0\r\n    }\r\n\r\n    struct Fund {\r\n        address token;\r\n        uint256 amount;\r\n    }\r\n\r\n    struct PostStatistics {\r\n        bytes32 idProm; // Hash of the associated prom (from SocialMediaPostData)\r\n        uint64 likes; // Number of likes\r\n        uint64 shares; // Number of shares\r\n        uint64 views; // Number of views\r\n    }\r\n\r\n    struct SocialMediaPostData {\r\n        address influencer; // Address of the influencer who posted\r\n        bytes32 idCampaign; // Hash of the campaign associated with the post\r\n        bool isAccepted;    // Flag indicating if the post is accepted\r\n        bool isPayed;\r\n        Fund funds;\r\n        uint8 typeSN; // Type of social network (e.g., Twitter, Instagram, LinkedIn,Tiktok,Facebook)\r\n        uint256 appliedDate;  // Timestamp of when the post was applied\r\n        uint64 abosNumber;  // Number of followers/subscribers\r\n        string idPost;  // Timestamp of the last result harvest\r\n        string idUser;\r\n        uint64 nbResults;\r\n        mapping(uint64 => bytes32) results;\r\n        bytes32 prevResult;\r\n        uint256 lastHarvest;  // Timestamp of the last result harvest\r\n        uint256 validate;\r\n    }\r\n\r\n    mapping(bytes32 => AdPool) public campaigns;\r\n    mapping(bytes32 => SocialMediaPostData) public proms;\r\n    mapping(bytes32 => PostStatistics) public results;\r\n    mapping(bytes32 => bool) public isAlreadyUsed;\r\n    mapping(bytes32 => mapping(address => uint64)) public influencerProms;\r\n\r\n\r\n    event CampaignCreated(\r\n        bytes32 indexed id,\r\n        uint64 startDate,\r\n        uint64 endDate,\r\n        string dataUrl,\r\n        uint64  limit\r\n    );\r\n    event CampaignFundsSpent(bytes32 indexed id);\r\n    event CampaignApplied(bytes32 indexed id, bytes32 indexed prom);\r\n    event PromAccepted(bytes32 indexed id);\r\n    event PromPayed(bytes32 indexed id, uint256 amount);\r\n    event CampaignFunded(bytes32 indexed id, uint256 amount);\r\n    \r\n    modifier onlyInfluencer(bytes32 idProm) {\r\n    require(proms[idProm].influencer == msg.sender, \"Only influencer can call this function\");\r\n    _;\r\n}\r\n\r\n    function priceRatioCampaign(\r\n        bytes32 idCampaign,\r\n        uint8 typeSN,\r\n        uint256 likeRatio,\r\n        uint256 shareRatio,\r\n        uint256 viewRatio,\r\n        uint256 limit\r\n    ) internal notPaused {\r\n        require(\r\n            campaigns[idCampaign].advertiser == msg.sender,\r\n            \"campaign owner mismatch\"\r\n        );\r\n        campaigns[idCampaign].ratios[typeSN] = cpRatio(\r\n            likeRatio,\r\n            shareRatio,\r\n            viewRatio,\r\n            limit\r\n        );\r\n    }\r\n\r\n\r\n\r\n    function fundCampaign(\r\n        bytes32 idCampaign,\r\n        address token,\r\n        uint256 amount\r\n    ) public notPaused {\r\n        require(\r\n            campaigns[idCampaign].endDate > block.timestamp,\r\n            \"campaign ended\"\r\n        );\r\n        require(\r\n            campaigns[idCampaign].funds.token == address(0) ||\r\n                campaigns[idCampaign].funds.token == token,\r\n            \"token mismatch\"\r\n        );\r\n\r\n        IBEP20 erc20 = IBEP20(token);\r\n        uint256 prev_amount = campaigns[idCampaign].funds.amount;\r\n        uint256 added_amount;\r\n        uint256 trisory_amount;\r\n\r\n        if (token == 0x448BEE2d93Be708b54eE6353A7CC35C4933F1156) {\r\n            added_amount = (amount * 95) / 100;\r\n            trisory_amount = amount - added_amount;\r\n        } else {\r\n            added_amount = (amount * 85) / 100;\r\n            trisory_amount = amount - added_amount;\r\n        }\r\n\r\n        erc20.transferFrom(msg.sender, treasory, trisory_amount);\r\n        erc20.transferFrom(msg.sender, address(this), added_amount);\r\n\r\n        campaigns[idCampaign].funds = Fund(token, added_amount + prev_amount);\r\n        emit CampaignFunded(idCampaign, added_amount);\r\n    }\r\n\r\n    function createPriceFundAll(\r\n        string memory dataUrl,\r\n        uint64 startDate,\r\n        uint64 endDate,\r\n        uint256[] memory ratios,\r\n        address token,\r\n        uint256 amount,\r\n        uint64 limit\r\n    ) public notPaused returns (bytes32 idCampaign) {\r\n        require(endDate > block.timestamp, \"end date too early\");\r\n        require(endDate > startDate, \"end date early than start\");\r\n\r\n        bytes32 campaignId = keccak256(\r\n            abi.encodePacked(\r\n                msg.sender,\r\n                dataUrl,\r\n                startDate,\r\n                endDate,\r\n                block.timestamp\r\n            )\r\n        );\r\n        AdPool storage campaignData = campaigns[campaignId];\r\n        campaignData.advertiser = msg.sender;\r\n        campaignData.dataUrl = dataUrl;\r\n        campaignData.startDate = startDate;\r\n        campaignData.endDate = endDate;\r\n        campaignData.participationLimit = limit;\r\n        campaignData.nbProms = 0;\r\n        campaignData.nbValidProms = 0;\r\n        campaignData.funds = Fund(address(0), 0);\r\n        emit CampaignCreated(campaignId, startDate, endDate, dataUrl,limit);\r\n\r\n        for (uint8 i = 0; i < ratios.length; i = i + 4) {\r\n            priceRatioCampaign(\r\n                campaignId,\r\n                (i / 4) + 1,\r\n                ratios[i],\r\n                ratios[i + 1],\r\n                ratios[i + 2],\r\n                ratios[i + 3]\r\n            );\r\n        }\r\n\r\n        fundCampaign(campaignId, token, amount);\r\n        return campaignId;\r\n    }\r\n\r\n    function createPriceFundBounty(\r\n        string memory dataUrl,\r\n        uint64 startDate,\r\n        uint64 endDate,\r\n        uint256[] memory bounties,\r\n        address token,\r\n        uint256 amount,\r\n         uint64 limit\r\n    ) public notPaused returns (bytes32 idCampaign) {\r\n        require(endDate > block.timestamp, \"end date too early\");\r\n        require(endDate > startDate, \"end date early than start\");\r\n\r\n        bytes32 campaignId = keccak256(\r\n            abi.encodePacked(\r\n                msg.sender,\r\n                dataUrl,\r\n                startDate,\r\n                endDate,\r\n                block.timestamp\r\n            )\r\n        );\r\n        AdPool storage campaignData = campaigns[campaignId];\r\n        campaignData.advertiser = msg.sender;\r\n        campaignData.dataUrl = dataUrl;\r\n        campaignData.startDate = startDate;\r\n        campaignData.endDate = endDate;\r\n        campaignData.participationLimit = limit;\r\n        campaignData.nbProms = 0;\r\n        campaignData.nbValidProms = 0;\r\n        campaignData.funds = Fund(address(0), 0);\r\n        for (uint256 i = 0; i < bounties.length; i = i + 4) {\r\n            campaignData.bounties.push(\r\n                bountyUnit(\r\n                    bounties[i],\r\n                    bounties[i + 1],\r\n                    bounties[i + 2],\r\n                    bounties[i + 3]\r\n                )\r\n            );\r\n        }\r\n\r\n        emit CampaignCreated(campaignId, startDate, endDate, dataUrl, limit);\r\n\r\n        fundCampaign(campaignId, token, amount);\r\n        return campaignId;\r\n    }\r\n\r\n    function VerifyMessage(\r\n        bytes32 _hashedMessage,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) public notPaused view  returns (address) {\r\n        //bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        //bytes32 prefixedHashMessage = keccak256(abi.encodePacked(prefix, _hashedMessage));\r\n\r\n        address signer = ecrecover(_hashedMessage, _v, _r, _s);\r\n        return signer;\r\n    }\r\n  \r\n    function incrementPromotionCount(bytes32 idCampaign, address ownerLink) internal {\r\n      influencerProms[idCampaign][ownerLink]++;\r\n    }\r\n\r\n    function validateProm(\r\n        bytes32 idCampaign,\r\n        uint8 typeSN,\r\n        string memory idPost,\r\n        string memory idUser,\r\n        uint64 abosNumber,\r\n        address ownerLink,\r\n        bytes32 _hashedMessage,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) public notPaused {\r\n        AdPool storage campaignData = campaigns[idCampaign];\r\n        require(campaignData.endDate > block.timestamp, \"campaign ended\");\r\n        address signer = VerifyMessage(_hashedMessage, _v, _r, _s);\r\n        require(signer == ownerLink, \"campaign applayer is mismatch\");\r\n        bytes32 prom = keccak256(\r\n            abi.encodePacked(\r\n                idCampaign,\r\n                typeSN,\r\n                idPost,\r\n                idUser,\r\n                ownerLink,\r\n                block.timestamp\r\n            )\r\n        );\r\n\r\n        // Ensure the promotion link has not been used before\r\n        require(!isAlreadyUsed[prom], \"link already sent\");\r\n\r\n        // Get the current number of promotions used by the influencer for this campaign\r\n       uint64 influencerPromCount = influencerProms[idCampaign][ownerLink];\r\n       require(influencerPromCount < campaignData.participationLimit, \"Participation limit exceeded\");\r\n\r\n        SocialMediaPostData storage post = proms[prom];\r\n        post.influencer = ownerLink;\r\n        post.idCampaign = idCampaign;\r\n        post.isAccepted = true;\r\n        post.funds = Fund(address(0), 0);\r\n        post.typeSN = typeSN;\r\n        post.idPost = idPost;\r\n        post.idUser = idUser;\r\n        post.abosNumber = abosNumber;\r\n        post.nbResults = 0;\r\n        post.prevResult = 0;\r\n        post.validate = block.timestamp;\r\n        campaignData.nbValidProms++;\r\n        \r\n        // Increment the influencer's promotion count for this campaign\r\n        incrementPromotionCount(idCampaign, ownerLink);\r\n\r\n        emit PromAccepted(prom);\r\n    }\r\n\r\n    function updateCampaignStats(bytes32 idCampaign) public notPaused {\r\n        AdPool storage campaignData = campaigns[idCampaign];\r\n\r\n        for (uint64 i = 0; i < campaignData.nbProms; i++) {\r\n            bytes32 idProm = campaignData.proms[i];\r\n            // Retrieve the post element associated with the given idProm from the proms mapping\r\n            SocialMediaPostData storage post = proms[idProm];\r\n\r\n            if (post.isAccepted) {\r\n                bytes32 idRequest = keccak256(\r\n                    abi.encodePacked(\r\n                        post.typeSN,\r\n                        post.idPost,\r\n                        post.idUser,\r\n                        block.timestamp\r\n                    )\r\n                );\r\n                results[idRequest] = PostStatistics(idProm, 0, 0, 0);\r\n                post.results[post.nbResults++] = idRequest;\r\n                ask(\r\n                    post.typeSN,\r\n                    post.idPost,\r\n                    post.idUser,\r\n                    idRequest\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function updatePromStats(bytes32 idProm)\r\n        public\r\n        notPaused\r\n        returns (bytes32 requestId)\r\n    {\r\n        SocialMediaPostData storage post = proms[idProm]; // Store the post element for efficient access\r\n\r\n        require(post.isAccepted, \"link not validated\");\r\n        bytes32 idRequest = keccak256(\r\n            abi.encodePacked(\r\n                post.typeSN,\r\n                post.idPost,\r\n                post.idUser,\r\n                block.timestamp\r\n            )\r\n        );\r\n        results[idRequest] = PostStatistics(idProm, 0, 0, 0);\r\n        post.results[post.nbResults++] = idRequest;\r\n        ask(\r\n            post.typeSN,\r\n            post.idPost,\r\n            post.idUser,\r\n            idRequest\r\n        );\r\n        return idRequest;\r\n    }\r\n\r\n    function updateBounty(bytes32 idProm) public notPaused {\r\n        SocialMediaPostData storage post = proms[idProm]; // Store the post element for efficient access\r\n        require(post.isAccepted, \"link not validated\");\r\n        askBounty(\r\n            post.typeSN,\r\n            post.idPost,\r\n            post.idUser,\r\n            idProm\r\n        );\r\n    }\r\n\r\n    function ask(\r\n        uint8 typeSN,\r\n        string memory idPost,\r\n        string memory idUser,\r\n        bytes32 idRequest\r\n    ) public notPaused {\r\n        IOracle o = IOracle(oracle);\r\n        o.ask(typeSN, idPost, idUser, idRequest);\r\n    }\r\n\r\n    function askBounty(\r\n        uint8 typeSN,\r\n        string memory idPost,\r\n        string memory idUser,\r\n        bytes32 idProm\r\n    ) public notPaused {\r\n        IOracle o = IOracle(oracle);\r\n        o.askBounty(typeSN, idPost, idUser, idProm);\r\n    }\r\n\r\n/**\r\n * @dev Updates the bounty payment status for a specific campaign promotion (idProm).\r\n * The function calculates the gain for the influencer based on the number of subscribers (nbAbos) and campaign bounties.\r\n * If the gain is sufficient, the payment is processed, otherwise, the funds are added to the promotion's balance.\r\n * @param idProm The unique identifier of the campaign promotion.\r\n * @param nbAbos The number of subscribers for the promotion.\r\n * @return ok True if the operation is successful.\r\n */\r\n    function updateBounty(bytes32 idProm, uint256 nbAbos)\r\n        external notPaused\r\n        returns (bool ok)\r\n    {\r\n        require(msg.sender == oracle, \"oracle mismatch\");\r\n        \r\n        // Store the prom element for efficient access\r\n        SocialMediaPostData storage post = proms[idProm];\r\n        require(!post.isPayed, \"link already paid\");\r\n        post.isPayed = true;\r\n         // Store the campaign element for efficient access\r\n        AdPool storage campaignData = campaigns[post.idCampaign];\r\n        \r\n        post.funds.token = campaignData.funds.token;\r\n\r\n        uint256 gain = 0;\r\n        for (\r\n            uint256 i = 0;\r\n            i < campaignData.bounties.length;\r\n            i++\r\n        ) {\r\n            if (\r\n                nbAbos >= campaignData.bounties[i].minRange &&\r\n                nbAbos < campaignData.bounties[i].maxRange &&\r\n                post.typeSN == campaignData.bounties[i].typeSN\r\n            ) {\r\n                gain = campaignData.bounties[i].amount;\r\n            }\r\n        }\r\n\r\n        if (campaignData.funds.amount <= gain) {\r\n            //campaignData.endDate = uint64(block.timestamp);\r\n            post.funds.amount += campaignData.funds.amount;\r\n            campaignData.funds.amount = 0;\r\n            emit CampaignFundsSpent(post.idCampaign);\r\n            return true;\r\n        }\r\n        campaignData.funds.amount -= gain;\r\n        post.funds.amount += gain;\r\n        return true;\r\n    }\r\n\r\n    function update(\r\n        bytes32 idRequest,\r\n        uint64 likes,\r\n        uint64 shares,\r\n        uint64 views\r\n    ) external notPaused returns (bool ok) {\r\n        require(msg.sender == oracle, \"oracle mismatch\");\r\n\r\n        SocialMediaPostData storage post = proms[results[idRequest].idProm];\r\n\r\n        results[idRequest].likes = likes;\r\n        results[idRequest].shares = shares;\r\n        results[idRequest].views = views;\r\n\r\n        uint256 gain = 0;\r\n\r\n        if (likes > results[post.prevResult].likes)\r\n            gain +=\r\n                (likes - results[post.prevResult].likes) *\r\n                campaigns[post.idCampaign].ratios[post.typeSN].likeRatio;\r\n        if (shares > results[post.prevResult].shares)\r\n            gain +=\r\n                (shares - results[post.prevResult].shares) *\r\n                campaigns[post.idCampaign].ratios[post.typeSN].shareRatio;\r\n        if (views > results[post.prevResult].views)\r\n            gain +=\r\n                (views - results[post.prevResult].views) *\r\n                campaigns[post.idCampaign].ratios[post.typeSN].viewRatio;\r\n        post.prevResult = idRequest;\r\n\r\n        //\r\n        // warn campaign low credits\r\n        //\r\n\r\n        if (post.funds.token == address(0)) {\r\n            post.funds.token = campaigns[post.idCampaign].funds.token;\r\n        }\r\n        if (campaigns[post.idCampaign].funds.amount <= gain) {\r\n            //campaigns[post.idCampaign].endDate = uint64(block.timestamp);\r\n            post.funds.amount += campaigns[post.idCampaign].funds.amount;\r\n            campaigns[post.idCampaign].funds.amount = 0;\r\n            emit CampaignFundsSpent(post.idCampaign);\r\n            return true;\r\n        }\r\n        campaigns[post.idCampaign].funds.amount -= gain;\r\n        post.funds.amount += gain;\r\n        return true;\r\n    }\r\n\r\n    function getGains(bytes32 idProm) public notPaused onlyInfluencer(idProm) {\r\n        SocialMediaPostData storage post = proms[idProm];\r\n        require(post.influencer == msg.sender, \"link owner mismatch\");\r\n\r\n        AdPool storage campaignData = campaigns[post.idCampaign];\r\n         // Check if the campaign is a bounty campaign\r\n       if (campaignData.bounties.length > 0) {\r\n         require(campaignData.endDate < block.timestamp, \"Bounty campaign has not ended yet\");\r\n       }\r\n\r\n        uint256 diff = block.timestamp - post.appliedDate;\r\n        require(diff > 86400, \"less than 24h\");\r\n\r\n        require(\r\n            block.timestamp - post.lastHarvest > 86400,\r\n            \"less than 24h to harvest again\"\r\n        );\r\n\r\n        IBEP20 erc20 = IBEP20(post.funds.token);\r\n        uint256 amount = post.funds.amount;\r\n        post.funds.amount = 0;\r\n        post.lastHarvest = block.timestamp;\r\n        erc20.transfer(post.influencer, amount);\r\n\r\n        emit PromPayed(idProm, amount);\r\n    }\r\nfunction getRemainingFunds(bytes32 idCampaign) public notPaused {\r\n        require(\r\n            campaigns[idCampaign].advertiser == msg.sender,\r\n            \"campaign owner mismatch\"\r\n        );\r\n        require(\r\n            campaigns[idCampaign].endDate < block.timestamp,\r\n            \"campaign not ended\"\r\n        );\r\n        require(\r\n            block.timestamp - campaigns[idCampaign].endDate > 1296000,\r\n            \"Withdraw not allowed under 15 days\"\r\n        );\r\n\r\n        IBEP20 erc20 = IBEP20(campaigns[idCampaign].funds.token);\r\n        uint256 amount = campaigns[idCampaign].funds.amount;\r\n        campaigns[idCampaign].funds.amount = 0;\r\n        erc20.transfer(campaigns[idCampaign].advertiser, amount);\r\n    }\r\n\r\n    function getProms(bytes32 idCampaign)\r\n        public notPaused\r\n        view\r\n        returns (bytes32[] memory cproms)\r\n    {\r\n        uint256 nbProms = campaigns[idCampaign].nbProms;\r\n        cproms = new bytes32[](nbProms);\r\n\r\n        for (uint64 i = 0; i < nbProms; i++) {\r\n            cproms[i] = campaigns[idCampaign].proms[i];\r\n        }\r\n        return cproms;\r\n    }\r\n\r\n/**\r\n * @dev Retrieves various ratios and limits associated with a campaign.\r\n * @param idCampaign The unique identifier of the campaign.\r\n * @return types An array of promotion types.\r\n * @return likeRatios An array of like ratios for each promotion type.\r\n * @return shareRatios An array of share ratios for each promotion type.\r\n * @return viewRatios An array of view ratios for each promotion type.\r\n * @return limits An array of reach limits for each promotion type.\r\n */\r\n    function getRatios(bytes32 idCampaign)\r\n        public notPaused\r\n        view\r\n        returns (\r\n            uint8[] memory types,\r\n            uint256[] memory likeRatios,\r\n            uint256[] memory shareRatios,\r\n            uint256[] memory viewRatios,\r\n            uint256[] memory limits\r\n        )\r\n    {\r\n\r\n        // Store the campaign element for efficient access\r\n        AdPool storage campaignData = campaigns[idCampaign];\r\n\r\n        uint8 l = 10;\r\n        types = new uint8[](l);\r\n        likeRatios = new uint256[](l);\r\n        shareRatios = new uint256[](l);\r\n        viewRatios = new uint256[](l);\r\n        limits = new uint256[](l);\r\n        for (uint8 i = 0; i < l; i++) {\r\n            types[i] = i + 1;\r\n            likeRatios[i] = campaignData.ratios[i + 1].likeRatio;\r\n            shareRatios[i] = campaignData.ratios[i + 1].shareRatio;\r\n            viewRatios[i] = campaignData.ratios[i + 1].viewRatio;\r\n            limits[i] = campaignData.ratios[i + 1].reachLimit;\r\n        }\r\n        return (types, likeRatios, shareRatios, viewRatios, limits);\r\n    }\r\n\r\n/**\r\n * @dev Retrieves bounty details for a campaign.\r\n * @param idCampaign The unique identifier of the campaign.\r\n * @return bounty An array containing minRange, maxRange, typeSN, and amount for each bounty.\r\n */\r\n    function getBounties(bytes32 idCampaign)\r\n        public notPaused\r\n        view\r\n        returns (uint256[] memory bounty)\r\n    {\r\n\r\n    AdPool storage campaignData = campaigns[idCampaign];\r\n    uint256 bountyCount = campaignData.bounties.length;\r\n    bounty = new uint256[](bountyCount * 4);\r\n    \r\n        for (uint8 i = 0; i < bountyCount; i++) {\r\n            bounty[i * 4] = campaignData.bounties[i].minRange;\r\n            bounty[i * 4 + 1] = campaignData.bounties[i].maxRange;\r\n            bounty[i * 4 + 2] = campaignData.bounties[i].typeSN;\r\n            bounty[i * 4 + 3] = campaignData.bounties[i].amount;\r\n        }\r\n        return bounty;\r\n    }\r\n\r\n    function getResults(bytes32 idProm)\r\n        public notPaused\r\n        view\r\n        returns (bytes32[] memory creq)\r\n    {\r\n        SocialMediaPostData storage post = proms[idProm];\r\n        uint256 nbResults = post.nbResults;\r\n        creq = new bytes32[](nbResults);\r\n        for (uint64 i = 0; i < nbResults; i++) {\r\n            creq[i] = post.results[i];\r\n        }\r\n        return creq;\r\n    }\r\n\r\n    function getIsUsed(\r\n        bytes32 idCampaign,\r\n        uint8 typeSN,\r\n        string memory idPost,\r\n        string memory idUser\r\n    ) public notPaused view returns (bool) {\r\n        bytes32 prom = keccak256(\r\n            abi.encodePacked(idCampaign, typeSN, idPost, idUser)\r\n        );\r\n        return isAlreadyUsed[prom];\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"prom\",\"type\":\"bytes32\"}],\"name\":\"CampaignApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endDate\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dataUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"limit\",\"type\":\"uint64\"}],\"name\":\"CampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CampaignFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"CampaignFundsSpent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"PromAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PromPayed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedMessage\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"VerifyMessage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"typeSN\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"idPost\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"idUser\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"idRequest\",\"type\":\"bytes32\"}],\"name\":\"ask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"typeSN\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"idPost\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"idUser\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"idProm\",\"type\":\"bytes32\"}],\"name\":\"askBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"campaigns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"advertiser\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"dataUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nbProms\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nbValidProms\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct campaign.Fund\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"participationLimit\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dataUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endDate\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"ratios\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"limit\",\"type\":\"uint64\"}],\"name\":\"createPriceFundAll\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dataUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endDate\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"bounties\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"limit\",\"type\":\"uint64\"}],\"name\":\"createPriceFundBounty\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"}],\"name\":\"getBounties\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"bounty\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idProm\",\"type\":\"bytes32\"}],\"name\":\"getGains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"typeSN\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"idPost\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"idUser\",\"type\":\"string\"}],\"name\":\"getIsUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"}],\"name\":\"getProms\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"cproms\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"}],\"name\":\"getRatios\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"types\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"likeRatios\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shareRatios\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"viewRatios\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"limits\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"}],\"name\":\"getRemainingFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idProm\",\"type\":\"bytes32\"}],\"name\":\"getResults\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"creq\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"influencerProms\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isAlreadyUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"name\":\"modToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proms\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"influencer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isAccepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPayed\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct campaign.Fund\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"typeSN\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"appliedDate\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"abosNumber\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"idPost\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"idUser\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"nbResults\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"prevResult\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receiveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"results\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"idProm\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"likes\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"shares\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"views\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newTreasory\",\"type\":\"address\"}],\"name\":\"transferTreasoryOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idRequest\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"likes\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"shares\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"views\",\"type\":\"uint64\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idProm\",\"type\":\"bytes32\"}],\"name\":\"updateBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idProm\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nbAbos\",\"type\":\"uint256\"}],\"name\":\"updateBounty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"}],\"name\":\"updateCampaignStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idProm\",\"type\":\"bytes32\"}],\"name\":\"updatePromStats\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"typeSN\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"idPost\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"idUser\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"abosNumber\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"ownerLink\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_hashedMessage\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"validateProm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "campaign", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e245c0001be32e11a8afc445f11faf2bcaf0f3139927bdf52af5206e16f2d881"}