{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >= 0.8.10;\r\npragma abicoder v2;\r\n\r\ninterface IBEP20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract MyHiding {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    IBEP20 public token;\r\n    string public currentDomains;\r\n    mapping(address => mapping(address => uint256)) public balance;\r\n    address payable wallet1 = payable(0x66aF85f8171c22AC86106Bd7c5919A66494698DE);\r\n    address payable wallet2 = payable(0x405e26abC889D4244aA0ba5918c10192488c2DDa);\r\n    address payable wallet3 = payable(0xA9374a60C9d9D5cE4a21E3eAE11Cd74FfA27Ef00);\r\n    address payable wallet4 = payable(0x38400BB18F2bb272b42a59470B3092d84a010887);\r\n    mapping(address => uint256) totalDeposit;\r\n    mapping(address => uint256) totalWithdraw;\r\n    mapping(address => Transaction[]) public userTransactions;\r\n\r\n    struct Transaction {\r\n        string txType;\r\n        uint256 amount;\r\n        address token;\r\n        uint256 time;\r\n    }\r\n\r\n    address public owner = msg.sender;\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the contract owner can call this function to change the token address.\");\r\n        _;\r\n    }\r\n\r\n    function setOwner(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function setCurrentDomain(string calldata _domains) external onlyOwner {\r\n        currentDomains = _domains;\r\n    }\r\n\r\n\r\n    // Partners\r\n    modifier onlyOwnerOfWallet1() {\r\n        require(msg.sender == wallet1, \"Only the owner of wallet1 can perform this action\");\r\n        _;\r\n    }\r\n\r\n    function changeWallet1Address(address payable newAddress) public onlyOwnerOfWallet1 {\r\n        wallet1 = newAddress;\r\n    }\r\n\r\n    modifier onlyOwnerOfWallet2() {\r\n        require(msg.sender == wallet2, \"Only the owner of wallet2 can perform this action\");\r\n        _;\r\n    }\r\n\r\n    function changeWallet2Address(address payable newAddress) public onlyOwnerOfWallet2 {\r\n        wallet2 = newAddress;\r\n    }\r\n\r\n    modifier onlyOwnerOfWallet3() {\r\n        require(msg.sender == wallet3, \"Only the owner of wallet3 can perform this action\");\r\n        _;\r\n    }\r\n\r\n    function changeWallet3Address(address payable newAddress) public onlyOwnerOfWallet3 {\r\n        wallet3 = newAddress;\r\n    }\r\n\r\n    modifier onlyOwnerOfWallet4() {\r\n        require(msg.sender == wallet4, \"Only the owner of wallet4 can perform this action\");\r\n        _;\r\n    }\r\n\r\n    function changeWallet4Address(address payable newAddress) public onlyOwnerOfWallet4 {\r\n        wallet4 = newAddress;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // Main functions --------------------------------------------------------------------\r\n    function deposit(address _token, address[] calldata recipients, uint256[] calldata percentages, uint256 _amount) external payable {\r\n        if (_token != address(0)) {\r\n            token = IBEP20(_token);\r\n            require(token.allowance(msg.sender, address(this)) >= _amount, \"Token allowance not enough\");\r\n            require(token.balanceOf(msg.sender) >= _amount, \"Insufficient token balance\");\r\n            require(_amount > 0, \"Amount must be grather than zero.\");\r\n            token.transferFrom(msg.sender, address(this), _amount);\r\n\r\n            uint256 remainingAmount = SafeMath.div(SafeMath.mul(_amount, 995), 1000);\r\n            uint256 usedAmount;\r\n\r\n            uint256 numAddresses = recipients.length;\r\n            address[] memory addresses = new address[](numAddresses);\r\n            for (uint256 i = 0; i < numAddresses; i++) {\r\n                addresses[i] = recipients[i];\r\n            }\r\n\r\n            uint256 numPercentages = percentages.length;\r\n            uint256[] memory percentageValues = new uint256[](numPercentages);\r\n            for (uint256 i = 0; i < numPercentages; i++) {\r\n                percentageValues[i] = percentages[i];\r\n            }\r\n        \r\n            // Distribute the totalAmount among the children of sender\r\n            for (uint i = 0; i < numAddresses; i++) {\r\n                address currentRecipient = addresses[i];\r\n                uint256 currentPercentage = percentageValues[i];\r\n\r\n                require(currentRecipient != address(0), \"Invalid recipient address\");\r\n                require(currentPercentage > 0 && currentPercentage <= 100, \"Invalid percentage\");\r\n\r\n                uint256 thisAmount = SafeMath.div(SafeMath.mul(remainingAmount, currentPercentage), 100);\r\n\r\n                if (thisAmount != 0) {\r\n                    balance[currentRecipient][address(token)] = balance[currentRecipient][address(token)].add(thisAmount);\r\n                    usedAmount = usedAmount.add(thisAmount);\r\n                }\r\n            }\r\n\r\n            //PayBack extra amount to sender\r\n            if (remainingAmount - usedAmount > 0) {\r\n                balance[msg.sender][address(token)] = balance[msg.sender][address(token)].add(remainingAmount - usedAmount);\r\n            }\r\n\r\n            // Send fee to the specified wallets\r\n            uint256 walletsPart = SafeMath.div(SafeMath.mul(_amount, 125), 100000);\r\n            balance[wallet1][address(token)] = balance[wallet1][address(token)].add(walletsPart);\r\n            balance[wallet2][address(token)] = balance[wallet2][address(token)].add(walletsPart);\r\n            balance[wallet3][address(token)] = balance[wallet3][address(token)].add(walletsPart);\r\n            balance[wallet4][address(token)] = balance[wallet4][address(token)].add(walletsPart);\r\n\r\n            totalDeposit[address(token)] = totalDeposit[address(token)].add(_amount);\r\n\r\n            Transaction memory Deposit = Transaction({\r\n                txType: \"Deposit\",\r\n                amount: _amount,\r\n                token: address(token),\r\n                time: block.timestamp\r\n            });\r\n            userTransactions[msg.sender].push(Deposit);\r\n        }\r\n        else {\r\n            require(msg.value > 0, \"BNB amount must be greater than zero.\");\r\n\r\n            uint256 remainingAmount = SafeMath.div(SafeMath.mul(_amount, 995), 1000);\r\n            uint256 usedAmount;\r\n        \r\n            // Distribute the totalAmount among the children of sender\r\n            for (uint i = 0; i < recipients.length; i++) {\r\n                address currentRecipient = recipients[i];\r\n                uint256 currentPercentage = percentages[i];\r\n\r\n                require(currentRecipient != address(0), \"Invalid recipient address\");\r\n                require(currentPercentage > 0 && currentPercentage <= 100, \"Invalid percentage\");\r\n\r\n                uint256 thisAmount = SafeMath.div(SafeMath.mul(remainingAmount, currentPercentage), 100);\r\n\r\n                if (thisAmount != 0) {\r\n                    balance[currentRecipient][address(0)] = balance[currentRecipient][address(0)].add(thisAmount);\r\n                    usedAmount = usedAmount.add(thisAmount);\r\n                }\r\n            }\r\n\r\n            //PayBack extra amount to sender\r\n            if (remainingAmount - usedAmount > 0) {\r\n                balance[msg.sender][address(0)] = balance[msg.sender][address(0)].add(remainingAmount - usedAmount);\r\n            }\r\n\r\n            // Send fee to the specified wallets\r\n            uint256 walletsPart = SafeMath.div(SafeMath.mul(_amount, 125), 100000);\r\n            balance[wallet1][address(0)] = balance[wallet1][address(0)].add(walletsPart);\r\n            balance[wallet2][address(0)] = balance[wallet2][address(0)].add(walletsPart);\r\n            balance[wallet3][address(0)] = balance[wallet3][address(0)].add(walletsPart);\r\n            balance[wallet4][address(0)] = balance[wallet4][address(0)].add(walletsPart);\r\n\r\n            totalDeposit[address(0)] = totalDeposit[address(0)].add(_amount);\r\n\r\n            Transaction memory Deposit = Transaction({\r\n                txType: \"Deposit\",\r\n                amount: _amount,\r\n                token: address(0),\r\n                time: block.timestamp\r\n            });\r\n            userTransactions[msg.sender].push(Deposit);\r\n        }\r\n    }\r\n\r\n    function withdraw(address _token, uint256 amount) public {\r\n        if (_token == address(0)) {\r\n            require(amount > 0, \"Amount should be greater than zero.\");\r\n            require(balance[msg.sender][address(0)] >= amount, \"Insufficient BNB balance.\");\r\n            balance[msg.sender][address(0)] -= amount;\r\n            totalWithdraw[address(0)] += amount;\r\n            payable(msg.sender).transfer(amount);\r\n\r\n            Transaction memory Withdraw = Transaction({\r\n                txType: \"Withdraw\",\r\n                amount: amount,\r\n                token: address(0),\r\n                time: block.timestamp\r\n            });\r\n            userTransactions[msg.sender].push(Withdraw);\r\n        }\r\n        else{\r\n            require(amount > 0, \"Amount should be greater than zero.\");\r\n            require(balance[msg.sender][_token] >= amount, \"Insufficient balance.\");\r\n            balance[msg.sender][_token] -= amount;\r\n            totalWithdraw[_token] += amount;\r\n            require(IBEP20(_token).transfer(msg.sender, amount), \"Token transfer failed\");\r\n\r\n            Transaction memory Withdraw = Transaction({\r\n                txType: \"Withdraw\",\r\n                amount: amount,\r\n                token: address(_token),\r\n                time: block.timestamp\r\n            });\r\n            userTransactions[msg.sender].push(Withdraw);\r\n        }\r\n    }\r\n\r\n\r\n    // Get full details ---------------------------------------------------------------------\r\n\r\n    function getCurrentDomains() public view returns (string memory) {\r\n        return currentDomains;\r\n    }\r\n\r\n    function getTotalDeposit(address _token) public view returns (uint256) {\r\n        return totalDeposit[_token];\r\n    }\r\n\r\n    function getTotalWithdraw(address _token) public view returns (uint256) {\r\n        return totalWithdraw[_token];\r\n    }\r\n\r\n    // Get a node details ---------------------------------------------------------------------\r\n\r\n    function getBalance(address _token) public view returns (uint256) {\r\n        return balance[msg.sender][_token];\r\n    }\r\n\r\n    function getTransactions(address _wallet) public onlyOwner view returns (Transaction[] memory) {\r\n        return userTransactions[_wallet];\r\n    }\r\n\r\n    function getMyTransactions() public view returns (Transaction[] memory) {\r\n        return userTransactions[msg.sender];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeWallet1Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeWallet2Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeWallet3Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeWallet4Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDomains\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentDomains\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyTransactions\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"txType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct MyHiding.Transaction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTotalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTotalWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getTransactions\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"txType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct MyHiding.Transaction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_domains\",\"type\":\"string\"}],\"name\":\"setCurrentDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTransactions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"txType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MyHiding", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8f61e0235dcd0531961f711c7b25467c0103a66d3a8a7468eb6f7ea19bd3a40b"}