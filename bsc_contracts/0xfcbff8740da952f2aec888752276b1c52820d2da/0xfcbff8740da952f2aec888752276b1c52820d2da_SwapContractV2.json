{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router02 {\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract SwapContractV2 {\r\n    address payable public feeCollector;\r\n    uint256 public feePercentage;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public tokenOut;\r\n\r\n    constructor(\r\n        address _uniswapV2Router,\r\n        address payable _feeCollector,\r\n        uint256 _feePercentage,\r\n        address _tokenOut\r\n    ) {\r\n        uniswapV2Router = IUniswapV2Router02(_uniswapV2Router);\r\n        feeCollector = _feeCollector;\r\n        feePercentage = _feePercentage;\r\n        tokenOut = _tokenOut;\r\n    }\r\n\r\n    function swapEthForToken() public payable {\r\n        require(msg.value > 0, \"No ETH sent.\");\r\n\r\n        // Calculate fee and send to feeCollector\r\n        uint256 fee = (msg.value * feePercentage) / 100;\r\n        feeCollector.transfer(fee);\r\n\r\n        // Remaining amount for swap\r\n        uint256 swapAmount = msg.value - fee;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = tokenOut;\r\n\r\n        uniswapV2Router.swapExactETHForTokens{value: swapAmount}(\r\n            0, // Accept any amount of tokens out\r\n            path,\r\n            msg.sender, // Tokens are sent to the user\r\n            block.timestamp + 15 minutes\r\n        );\r\n    }\r\n\r\n    function setFeeCollector(address payable _feeCollector) external {\r\n        require(msg.sender == feeCollector, \"Only feeCollector can change this.\");\r\n        feeCollector = _feeCollector;\r\n    }\r\n\r\n    function setFeePercentage(uint256 _feePercentage) external {\r\n        require(msg.sender == feeCollector, \"Only feeCollector can change this.\");\r\n        require(_feePercentage < 100, \"Fee percentage too high.\");\r\n        feePercentage = _feePercentage;\r\n    }\r\n\r\n    function setTokenOut(address _tokenOut) external {\r\n        require(msg.sender == feeCollector, \"Only feeCollector can change this.\");\r\n        tokenOut = _tokenOut;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"setFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"setTokenOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEthForToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOut\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SwapContractV2", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000164b5264b4fb58aa5a4eb71e9bc6e0901405e645000000000000000000000000000000000000000000000000000000000000000300000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0d58ee1756da94a2e885a9da176c68771c9ec173665749a61e0552cb62dac13f"}