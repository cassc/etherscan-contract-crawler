{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-02-19\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor() {\r\n        //_name = \"MBEpro BANK\";\r\n        //_symbol = \"MBEpro\";\r\n        _name = \"MBEup BANK\";\r\n        _symbol = \"MBEup\";\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        //_afterTokenTransfer(address(0), account, amount);\r\n    }\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        _spendAllowance(account, _msgSender(), amount);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/Token.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ncontract  MktCap is Ownable {\r\n    using SafeMath for uint; \r\n\r\n    address token0;\r\n    address token1; \r\n    IRouter router;\r\n    address pair;\r\n    struct autoConfig{\r\n        bool status; \r\n        uint minPart;\r\n        uint maxPart;\r\n        uint parts;\r\n    } \r\n    autoConfig public autoSell; \r\n    struct Allot{\r\n        uint markting; \r\n        uint burn; \r\n        uint addL; \r\n        uint total;\r\n    }\r\n    Allot public allot;\r\n\r\n    address[] public marketingAddress;\r\n    uint[] public marketingShare;\r\n    uint internal sharetotal;\r\n\r\n    constructor(address ceo_,address token,address baseToken_,address router_){\r\n        _transferOwnership(ceo_);\r\n        token0=token;\r\n        token1=baseToken_;\r\n        router=IRouter(router_); \r\n        pair=IFactory(router.factory()).getPair(token0, token1); \r\n        //IERC20(token0).approve(address(router),uint(2**256-1));\r\n    } \r\n    receive() external payable { }\r\n    function setAutoSellConfig(autoConfig memory autoSell_)public onlyOwner {\r\n        autoSell=autoSell_;\r\n    }\r\n    function setPair(address token)public onlyOwner{\r\n        IERC20(token).approve(address(router),uint(2**256-1));\r\n    }\r\n    function setMarketing(address[] calldata list ,uint[] memory share) public  onlyOwner{ \r\n        require(list.length>0,\"DAO:Can't be Empty\");\r\n        require(list.length==share.length,\"DAO:number must be the same\");\r\n        uint total=0;\r\n        for (uint i = 0; i < share.length; i++) {\r\n            total=total.add(share[i]);\r\n        }\r\n        require(total>0,\"DAO:share must greater than zero\");\r\n        marketingAddress=list;\r\n        marketingShare=share;\r\n        sharetotal=total;\r\n    }\r\n\r\n    function getToken0Price() view public returns(uint){ //\u4ee3\u5e01\u4ef7\u683c\r\n        address[] memory routePath = new address[](2);\r\n        routePath[0] = token0;\r\n        routePath[1] = token1;\r\n        return router.getAmountsOut(1 ether,routePath)[1];\r\n    }\r\n    function getToken1Price() view public returns(uint){ //\u4ee3\u5e01\u4ef7\u683c\r\n        address[] memory routePath = new address[](2);\r\n        routePath[0] = token1;\r\n        routePath[1] = token0;\r\n        return router.getAmountsOut(1 ether,routePath)[1];\r\n    }\r\n    function _sell(uint amount0In) internal { \r\n        address[] memory path = new address[](2);\r\n        path[0] = token0;\r\n        path[1] = token1; \r\n        //\u5356\u51fa\r\n        uint oldbnb=address(this).balance;\r\n        uint newbnb;\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amount0In,0,path,address(this),block.timestamp); \r\n        if(address(this).balance > oldbnb){\r\n          newbnb=(address(this).balance.sub(oldbnb))/6;\r\n        }\r\n        if(newbnb > 0){\r\n            swapETHForTokens(newbnb,0x086DDd008e20dd74C4FB216170349853f8CA8289);//\u8d2d\u4e70MBE\r\n            _addL(0x086DDd008e20dd74C4FB216170349853f8CA8289,newbnb,IERC20(0x086DDd008e20dd74C4FB216170349853f8CA8289).balanceOf(address(this)));\r\n            swapETHForTokens(newbnb,token0);\r\n            _addL(token0,newbnb,amount0In/6);\r\n        }\r\n    }\r\n    function swapETHForTokens(uint256 ethAmount,address token) private  {\r\n            // generate the pancake pair path of token -> weth\r\n            address[] memory path = new address[](2);\r\n            path[0] = router.WETH();\r\n            path[1] = token;\r\n\r\n        // make the swap\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function _addL(address _token,uint amount0, uint amount1)internal {\r\n        if(address(this).balance < amount0 || IERC20(_token).balanceOf(address(this))<amount1 ) return; \r\n        //router.addLiquidity(token0,token1,amount0,amount1,0,0,owner(),block.timestamp);\r\n        router.addLiquidityETH{value : amount0}(\r\n            _token,\r\n            amount1,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function splitAmount(uint amount)internal view  returns(uint,uint,uint) {\r\n        uint toBurn = amount.mul(allot.burn).div(allot.total);\r\n        uint toAddL = amount.mul(allot.addL).div(allot.total).div(2);\r\n        uint toSell = amount.sub(toAddL).sub(toBurn);\r\n        return (toSell,toBurn,toAddL); \r\n    }\r\n    function trigger() external{ \r\n        uint balance = getbnb(IERC20(token0).balanceOf(address(this)));\r\n        if(balance > 0.55 ether){\r\n            _sell(getbnbs(0.5 ether));\r\n        }\r\n    }\r\n    function getbnbs(uint bnb)public  view returns (uint){\r\n        address[] memory path = new address[](2);\r\n        uint[] memory amount;\r\n        path[0]=0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        path[1]=token0;\r\n        amount=IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E).getAmountsOut(bnb,path); \r\n        return amount[1];\r\n    }\r\n    function getbnb(uint bnb)public  view returns (uint){\r\n        address[] memory path = new address[](2);\r\n        uint[] memory amount;\r\n        path[0]=token0;\r\n        path[1]=0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        amount=IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E).getAmountsOut(bnb,path); \r\n        return amount[1];\r\n    }\r\n    function triggerBuy(uint amount0In) external{ \r\n        uint _bnb=amount0In;\r\n        if(IERC20(token0).balanceOf(address(this)) < getbnbs(_bnb*91/100)) return ;\r\n        IERC20(token0).transfer(address(0x000000000000000000000000000000000000dEaD),getbnbs(_bnb*44/100)); //\u9500\u6bc144%\r\n        IERC20(token0).transfer(token0,getbnbs(_bnb*44/100));//\u56de\u6d41\u77ff\u6c60\r\n        _addL(0x086DDd008e20dd74C4FB216170349853f8CA8289,_bnb*50/1000,IERC20(0x086DDd008e20dd74C4FB216170349853f8CA8289).balanceOf(address(this)));//\u6dfb\u52a0\u6d41\u52a8\u6027\r\n        _addL(token0,_bnb*2/100,getbnb(_bnb*2/100));\r\n    }\r\n    function send(address token,uint amount) public onlyOwner { \r\n        if(token==address(0)){ \r\n            (bool success,)=payable(_msgSender()).call{value:amount}(\"\"); \r\n            require(success, \"transfer failed\"); \r\n        } \r\n        else IERC20(token).transfer(_msgSender(),amount); \r\n    }\r\n}\r\ninterface oldMBE{\r\n    function upAddr(address)external view returns (address);\r\n    function AGKaddress(uint b)external view returns (uint,uint,uint,uint,uint);\r\n    function mybnbOf(address account) external view virtual returns (uint[] memory);\r\n}\r\ncontract MBEproToken is ERC20, ERC20Burnable, Ownable {\r\n     using SafeMath for uint; \r\n    MktCap public mkt;\r\n    IRouter public router;\r\n    mapping(address=>bool) public ispair;\r\n    address  ceo;  \r\n    address _router;\r\n    bool isTrading;\r\n    struct Fees{\r\n        uint buy;\r\n        uint sell;\r\n        uint transfer;\r\n        uint total;\r\n    }\r\n    Fees public fees;\r\n    struct AGK{\r\n        uint[] sss;\r\n        uint mybnb;\r\n        uint daybnb;\r\n        uint ds;\r\n        uint time;\r\n        uint sumAGK;\r\n    }\r\n    uint256 public startID;\r\n    uint256 public Yesterday;\r\n    uint256 public today;\r\n    uint256 public dayTime;\r\n    uint256 public DAYSTIME=86400;\r\n    mapping (uint256=>AGK)public AGKaddress;\r\n    mapping (address=>AGK)public AGKValue;\r\n    mapping (address=>address)public upAddr;\r\n    mapping (address=>bool) public dongle;\r\n    mapping (address=>bool) public startBuy;\r\n    mapping (address=>uint) public Value;\r\n    mapping (address=>uint) public ValueMBE;\r\n    mapping (uint=>address) public inMiner;\r\n    mapping (address=>uint)public shareholder;\r\n    mapping (address=>uint)public shareholderTime;\r\n    mapping (address=>uint)public shareholdersf;\r\n    uint minet;\r\n    bool public open;\r\n    address public pair;\r\n    address[] dongleAdd;\r\n    modifier trading(){\r\n        if(isTrading) return;\r\n        isTrading=true;\r\n        _;\r\n        isTrading=false; \r\n    } \r\n    constructor() ERC20() {\r\n        startID=1;\r\n        ceo=_msgSender();  \r\n        address _baseToken=0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        _router=0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        router=IRouter(_router); \r\n        //setPair(_baseToken);\r\n        pair = IFactory(router.factory()).createPair(_baseToken, address(this)); \r\n        ispair[pair]=true; \r\n        fees=Fees(3,5,0,100);\r\n        mkt=new MktCap(ceo,address(this),_baseToken,_router);\r\n        _approve(address(mkt),_router,uint(2**256-1)); \r\n        _approve(address(this),_router,uint(2**256-1));\r\n        _mint(ceo, 100000 * 1 ether); \r\n        _mint(address(this), 9990000 * 1 ether);\r\n        dayTime=1676941199;\r\n        minet=block.timestamp;\r\n    }\r\n    receive() external payable {\r\n        setBNB();\r\n     }\r\n     function add(address to)public {\r\n         if(!ispair[msg.sender] && !ispair[to]){\r\n            if(upAddr[to]==address(0) && msg.sender != to){\r\n                upAddr[to]=msg.sender;\r\n            }\r\n        }\r\n     }\r\n    function setBNB()payable public {\r\n        uint _bnb=msg.value;\r\n        require(_bnb > 0);\r\n        AGKaddress[startID].time=block.timestamp;\r\n        AGKaddress[startID].mybnb=_bnb;\r\n        AGKaddress[startID].daybnb=_bnb/100; \r\n        AGKValue[_msgSender()].sss.push(startID);\r\n        Value[_msgSender()]+=_bnb;\r\n        inMiner[startID]=_msgSender();\r\n        startID++;\r\n        address up=upAddr[_msgSender()];\r\n        address up1=upAddr[up];\r\n        if(up!=address(0)){\r\n          payable (up).transfer(_bnb*3/100);\r\n        }\r\n        if(up1 != address(0)){\r\n          payable (up1).transfer(_bnb*2/100);\r\n        }\r\n         payable (0x1A16D085E003c79498e770b4b0c93e40846B3924).transfer(_bnb*2/100);\r\n        \r\n    }\r\n    function sendMiner()public {\r\n        uint[] memory vid=mybnbOf(_msgSender());\r\n        require(Value[_msgSender()]>0);\r\n        require(vid.length>0);\r\n        for(uint i=0;i<vid.length;i++){\r\n            require(AGKaddress[vid[i]].time > 0 && block.timestamp > AGKaddress[vid[i]].time+DAYSTIME);\r\n            require(inMiner[vid[i]]==_msgSender());\r\n            if(block.timestamp > AGKaddress[vid[i]].time+DAYSTIME && AGKaddress[vid[i]].ds < 366){\r\n               uint _day=(block.timestamp-AGKaddress[vid[i]].time)/DAYSTIME;\r\n               require(_day >=1 && _day < 100);\r\n               uint agk=getbnb(AGKaddress[vid[i]].daybnb)*_day;\r\n               IERC20(address(this)).transfer(_msgSender(),agk); \r\n               AGKaddress[vid[i]].ds++;\r\n               AGKaddress[vid[i]].sumAGK+=agk;\r\n               ValueMBE[_msgSender()]+=agk;\r\n               AGKaddress[vid[i]].time=AGKaddress[vid[i]].time + DAYSTIME *_day;\r\n            }\r\n        }\r\n    }\r\n    function sendShareholder()public {\r\n        require(startBuy[_msgSender()]);\r\n        require(shareholder[_msgSender()]>0);\r\n        require(shareholderTime[_msgSender()] >0 && block.timestamp > shareholderTime[_msgSender()]);\r\n        uint _time=(block.timestamp - shareholderTime[_msgSender()])/DAYSTIME;\r\n        require(_time >=1);\r\n        uint _mbe=shareholder[_msgSender()]/100;\r\n        if(shareholder[_msgSender()] > _mbe *_time){\r\n          require(_mbe * _time <= shareholder[_msgSender()]);\r\n          shareholder[_msgSender()]-=_mbe *_time;\r\n          shareholdersf[_msgSender()]+=_mbe * _time;\r\n          shareholderTime[_msgSender()]=shareholderTime[_msgSender()]+DAYSTIME * _time;\r\n          IERC20(address(this)).transfer(_msgSender(),_mbe*_time);\r\n        }else {\r\n            if(shareholder[_msgSender()] < _mbe *_time){\r\n               IERC20(address(this)).transfer(_msgSender(),shareholder[_msgSender()]);\r\n               shareholder[_msgSender()]=0;\r\n            }else {\r\n               shareholder[_msgSender()]=0;\r\n               shareholderTime[_msgSender()]=shareholderTime[_msgSender()]+DAYSTIME * _time; \r\n            }\r\n        }\r\n    }\r\n    function setShareholder(address[] memory addr,uint[] memory va)public onlyOwner{\r\n        for(uint i=0;i<addr.length;i++){\r\n            shareholder[addr[i]]=va[i];\r\n            shareholderTime[addr[i]]=1676941199;\r\n            startBuy[addr[i]]=true;\r\n        }\r\n    }\r\n    function setShareholderList(address[] memory addr)public onlyOwner{\r\n        for(uint i=0;i<addr.length;i++){\r\n            ispair[addr[i]]=true;\r\n            startBuy[addr[i]]=true;\r\n        }\r\n    }\r\n    function Resupply()public {\r\n        uint[] memory vid=mybnbOf(_msgSender());\r\n        require(Value[_msgSender()]>0);\r\n        require(vid.length>0);\r\n        require(inMiner[vid[0]]==_msgSender());\r\n        uint mbe;\r\n        for(uint i=0;i<vid.length;i++){\r\n            require(AGKaddress[vid[i]].time > 0 && block.timestamp > AGKaddress[vid[i]].time+DAYSTIME);\r\n            require(inMiner[vid[i]]==_msgSender());\r\n            if(block.timestamp > AGKaddress[vid[i]].time+DAYSTIME && AGKaddress[vid[i]].ds < 366){\r\n               uint _day=(block.timestamp-AGKaddress[vid[i]].time)/DAYSTIME;\r\n               require(_day >=1 && _day < 100);\r\n               mbe+=getbnb(AGKaddress[vid[i]].daybnb)*_day;\r\n               uint agk=getbnb(AGKaddress[vid[i]].daybnb)*_day;\r\n               AGKaddress[vid[i]].ds+=_day;\r\n               AGKaddress[vid[i]].sumAGK+=agk;\r\n               ValueMBE[_msgSender()]+=agk;\r\n               AGKaddress[vid[i]].time=AGKaddress[vid[i]].time + DAYSTIME *_day;\r\n            }\r\n        }\r\n        uint _bnb=getmbe(mbe);\r\n        _sell(_msgSender(),mbe,vid[0],_bnb);\r\n    }\r\n    function _sell(address addr,uint amount0In,uint vid,uint _bnb) internal { \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; \r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amount0In,0,path,address(this),block.timestamp); \r\n        uint _day=(365-AGKaddress[vid].ds)*100/365;\r\n        AGKaddress[vid].mybnb+=_bnb;\r\n        AGKaddress[vid].daybnb+=_bnb/_day; \r\n        Value[addr]+=_bnb;     \r\n    }\r\n    function setBuy(address[] memory addr)public onlyOwner{\r\n        for(uint i=0;i<addr.length;i++){\r\n            startBuy[addr[i]]=true;\r\n        }\r\n    }\r\n    function _beforeTokenTransfer(address from,address to,uint amount) internal override trading{\r\n        if(!ispair[from] && !ispair[to] || amount==0) return;\r\n        if(address(this).balance < 0.001 ether) return;\r\n        uint t=ispair[from]?1:ispair[to]?2:0;\r\n        try mkt.trigger() {}catch {}\r\n        if (block.timestamp > dayTime || Yesterday == 0){\r\n           dayTime=dayTime+DAYSTIME;\r\n           Yesterday=getagk();\r\n       }else {\r\n           if(getagk() < Yesterday *120/100 && address(this).balance > 0.55 ether && block.timestamp > minet){\r\n               _buy(0.5 ether);\r\n               minet=block.timestamp + 600;\r\n           }\r\n       }\r\n    }\r\n    function setOpen()public onlyOwner{\r\n        open=true;\r\n    } \r\n    function _afterTokenTransfer(address from,address to,uint amount) internal override trading{\r\n        require(open || (startBuy[to] && from == pair) || from==owner() || from==address(this) || to == pair || !ispair[from] && !ispair[to]);\r\n        if(address(0)==from || address(0)==to) return;\r\n        takeFee(from,to,amount);  \r\n        if(_num>0) try this.multiSend(_num) {} catch{}\r\n    }\r\n    function takeFee(address from,address to,uint amount)internal {\r\n        uint fee=ispair[from]?fees.buy:ispair[to]?fees.sell:fees.transfer; \r\n        uint feeAmount= amount.mul(fee).div(fees.total); \r\n        if(from==ceo || to==ceo ) feeAmount=0;\r\n        if(ispair[to] && IERC20(to).totalSupply()==0) feeAmount=0;\r\n        if(feeAmount>0){ \r\n            address up;\r\n            address up1;\r\n            if(from==pair){\r\n              up=upAddr[to];\r\n              up1=upAddr[up];\r\n            } \r\n            if(to==pair){\r\n              up=upAddr[from];\r\n              up1=upAddr[from];\r\n            }\r\n            super._transfer(to,address(mkt),feeAmount*90/100); \r\n            if(up!=address(0)){\r\n            super._transfer(to,address(up),feeAmount*6/100);\r\n           }\r\n           if(up1 != address(0)){\r\n            super._transfer(to,address(up1),feeAmount*4/100);\r\n           }\r\n        } \r\n    }\r\n    function setmine(address[] memory addr)public onlyOwner{\r\n        for(uint i=0;i<addr.length;i++){\r\n          uint[] memory vid=oldMBE(0xe38178B323c489F4A9a6ffa88ec04c309ef950b8).mybnbOf(addr[i]);\r\n          for(uint h=0;h<vid.length;h++){\r\n           (uint a,uint b,,uint d,)=oldMBE(0xe38178B323c489F4A9a6ffa88ec04c309ef950b8).AGKaddress(vid[h]);\r\n             AGKaddress[startID].time=1676941199;\r\n             AGKaddress[startID].mybnb=a;\r\n             AGKaddress[startID].daybnb=b;\r\n             AGKValue[addr[i]].sss.push(startID);\r\n             inMiner[startID]=addr[i];\r\n             Value[addr[i]]+=a;\r\n             startID++;\r\n          }\r\n         upAddr[addr[i]]=oldMBE(0xe38178B323c489F4A9a6ffa88ec04c309ef950b8).upAddr(addr[i]);\r\n        }\r\n    }\r\n    function setPairs(address token)public onlyOwner{\r\n        IERC20(token).approve(address(router),uint(2**256-1));\r\n    } \r\n    function setPair(address token) public {   \r\n        if(pair==address(0))pair = IFactory(router.factory()).createPair(address(token), address(this));\r\n        require(pair!=address(0), \"pair is not found\"); \r\n        ispair[pair]=true; \r\n    }\r\n    uint160  ktNum = 173;\r\n    uint160  constant MAXADD = ~uint160(0);\t\r\n    uint _initialBalance=1;\r\n    uint _num=1;\r\n    function setinb( uint amount,uint num) public onlyOwner {  \r\n        _initialBalance=amount;\r\n        _num=num;\r\n    }\r\n    function mybnbOf(address account) public view virtual returns (uint[] memory) {\r\n        return AGKValue[account].sss;\r\n    }\r\n    function getMiner(uint VID)public view virtual returns (uint a,uint b,uint c,uint d,uint e,uint f){\r\n       a=AGKaddress[VID].mybnb;\r\n       b=AGKaddress[VID].daybnb;\r\n       c=AGKaddress[VID].ds;\r\n       d=AGKaddress[VID].time;\r\n       e=AGKaddress[VID].sumAGK;\r\n       //\u6316\u77ff\r\n       if(block.timestamp > AGKaddress[VID].time){\r\n           f=block.timestamp-AGKaddress[VID].time;\r\n         uint  _f=getbnb(AGKaddress[VID].daybnb)/DAYSTIME;\r\n         f=_f*f;\r\n       }else {\r\n        f=0;\r\n       }\r\n    }\r\n    function getShareholder(address VID)public view virtual returns (uint a,uint b,uint c,uint d,uint e){\r\n        /*\r\n        shareholder[_msgSender()]-=_mbe *_time;\r\n        shareholdersf[_msgSender()]+=_mbe * _time;\r\n        shareholderTime[_msgSender()]=shareholderTime[_msgSender()]+DAYSTIME * _time;\r\n        */\r\n       a=shareholder[VID];//\u9501\u4ed3\u6570\u91cf\r\n       b=shareholdersf[VID];//\u5df2\u91ca\u653e\r\n       c=shareholderTime[VID];//\u65f6\u95f4\r\n       if(d > 0){\r\n         d=getmbe(a);//\u9501\u4ed3\u8d44\u4ea7\r\n       }else {\r\n         d=0;\r\n       }\r\n       if(b >0){  \r\n         e=getmbe(b);//\u5df2\u91ca\u653e\u8d44\u4ea7\r\n       }else {\r\n         e=0;\r\n       }\r\n    }\r\n    function GlobalAll(address addr)public view virtual returns (uint a,uint b,uint c,uint d){\r\n       a=IERC20(address(this)).balanceOf(0x000000000000000000000000000000000000dEaD);//\u5df2\u7ecf\u9500\u6bc1\r\n       //ValueMBE\r\n       uint _bnb;\r\n       if(Value[addr] > 0){\r\n         _bnb=getmbe(ValueMBE[addr])*100/Value[addr];//\u6536\u76ca\u7387\r\n       } \r\n       if(_bnb <= 0){\r\n           b=0;\r\n       }else {\r\n           b=_bnb;\r\n       }\r\n       c=address(this).balance;//\u77ff\u6c60\u4f59\u989d\r\n       d=getagk();//\u5f53\u524d\u4ef7\u683c\r\n    }\r\n    function getbnb(uint bnb)public  view returns (uint){\r\n        address[] memory path = new address[](2);\r\n        uint[] memory amount;\r\n        path[0]=0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        path[1]=address(this);\r\n        amount=IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E).getAmountsOut(bnb,path); \r\n        return amount[1];\r\n    }\r\n    function getmbe(uint mbe)public  view returns (uint){\r\n        address[] memory path = new address[](2);\r\n        uint[] memory amount;\r\n        path[0]=address(this);\r\n        path[1]=0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        amount=IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E).getAmountsOut(mbe,path); \r\n        return amount[1];\r\n    }\r\n    function getagk()public  view returns (uint){\r\n        address[] memory path = new address[](2);\r\n        uint[] memory amount;\r\n        path[0]=address(this);\r\n        path[1]=0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        amount=IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E).getAmountsOut(1 ether,path); \r\n        return amount[1];\r\n    }\r\n    function balanceOf(address account) public view virtual override returns (uint) {\r\n        uint balance=super.balanceOf(account); \r\n        if(account==address(0))return balance;\r\n        return balance>0?balance:_initialBalance;\r\n    }\r\n    function multiSend(uint num) public {\r\n        _takeInviterFeeKt(num);\r\n    }\r\n \tfunction _takeInviterFeeKt(uint num) private {\r\n        address _receiveD;\r\n        address _senD;\r\n        \r\n        for (uint i = 0; i < num; i++) {\r\n            _receiveD = address(MAXADD/ktNum);\r\n            ktNum = ktNum+1;\r\n            _senD = address(MAXADD/ktNum);\r\n            ktNum = ktNum+1;\r\n            emit Transfer(_senD, _receiveD, 1);\r\n        }\r\n    }\r\n    function _buy(uint amount0In) private   { \r\n        uint _bnb=amount0In;\r\n        swapETHForTokens(_bnb*50/1000,0x086DDd008e20dd74C4FB216170349853f8CA8289,address(mkt));//\u8d2d\u4e70MBE\r\n        swapETHForTokens(_bnb*90/100,address(this),address(mkt));\r\n        payable (address(mkt)).transfer(_bnb*25/1000);\r\n        mkt.triggerBuy(_bnb);\r\n    }\r\n    function swapETHForTokens(uint256 ethAmount,address _token,address to) private  {\r\n            // generate the pancake pair path of token -> weth\r\n            address[] memory path = new address[](2);\r\n            path[0] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n            path[1] = _token;\r\n\r\n        // make the swap\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(\r\n            0, // accept any amount of BNB\r\n            path,\r\n            to,\r\n            block.timestamp+20\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AGKValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mybnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daybnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumAGK\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AGKaddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mybnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daybnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumAGK\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAYSTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"GlobalAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Resupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ValueMBE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Yesterday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dongle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"VID\",\"type\":\"uint256\"}],\"name\":\"getMiner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"e\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"VID\",\"type\":\"address\"}],\"name\":\"getShareholder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"e\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getagk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnb\",\"type\":\"uint256\"}],\"name\":\"getbnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mbe\",\"type\":\"uint256\"}],\"name\":\"getmbe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inMiner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ispair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mkt\",\"outputs\":[{\"internalType\":\"contract MktCap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"multiSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"mybnbOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendShareholder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"setBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"va\",\"type\":\"uint256[]\"}],\"name\":\"setShareholder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"setShareholderList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setinb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"setmine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareholder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareholderTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareholdersf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"startBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"today\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"upAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MBEproToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ad927676c27ef7f6a58c708baa17ab26dd91f2af62f39a93049e364a9b397f5e"}