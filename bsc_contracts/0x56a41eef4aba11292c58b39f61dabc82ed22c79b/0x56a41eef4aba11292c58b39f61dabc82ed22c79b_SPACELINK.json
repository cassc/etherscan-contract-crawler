{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-01-21\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface IBEP20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address payable private _owner;\r\n    address payable private _previousOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor (address payable ownerAddress) {\r\n        _owner = ownerAddress;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = payable(address(0));\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniSwapRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nlibrary Utils {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    function swapTokensForEth(\r\n        address routerAddress,\r\n        uint256 tokenAmount\r\n    ) internal {\r\n        IUniSwapRouter02 uniSwapRouter = IUniSwapRouter02(routerAddress);\r\n\r\n        // generate the pancake pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniSwapRouter.WETH();\r\n\r\n        // make the swap\r\n        uniSwapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapETHForTokens(\r\n        address routerAddress,\r\n        address recipient,\r\n        uint256 ethAmount\r\n    ) internal {\r\n        IUniSwapRouter02 uniSwapRouter = IUniSwapRouter02(routerAddress);\r\n\r\n        // generate the pancake pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniSwapRouter.WETH();\r\n        path[1] = address(this);\r\n\r\n        // make the swap\r\n        uniSwapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(recipient),\r\n            block.timestamp + 360\r\n        );\r\n    }\r\n\r\n    function addLiquidity(\r\n        address routerAddress,\r\n        address owner,\r\n        uint256 tokenAmount,\r\n        uint256 ethAmount\r\n    ) internal {\r\n        IUniSwapRouter02 uniSwapRouter = IUniSwapRouter02(routerAddress);\r\n\r\n        // add the liquidity\r\n        uniSwapRouter.addLiquidityETH{value : ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner,\r\n            block.timestamp + 360\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract SPACELINK is Context, IBEP20, Ownable{\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcluded;\r\n    mapping(address => bool) private _isExcludedFromMaxTx;\r\n\r\n    address[] private _excluded;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 1000000000000000 * 1e9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name = \"SPACELINK\";\r\n    string private _symbol = \"SPLINK\";\r\n    uint8 private _decimals = 9;\r\n\r\n    IUniSwapRouter02 public uniSwapRouter;\r\n    address public immutable uniSwapPair;\r\n    address payable public buyBackWallet;\r\n    address payable public marketWallet;\r\n    address payable public devWallet;\r\n    \r\n    uint256 _taxFee;\r\n    uint256 public _taxFeeForBuying = 0; // 0% will be distributed among holder as BUT divideneds\r\n    uint256 public _taxFeeForSelling = 0; // 0% will be distributed among holder as BUT divideneds\r\n\r\n    uint256 _liquidityFee;\r\n    uint256 public _liquidityFeeForBuying = 10; // 1% will be added to the liquidity pool on each buy\r\n    uint256 public _liquidityFeeForSelling = 10; // 1% will be added to the liquidity pool on each sell\r\n    \r\n    uint256 _buyBackFee; \r\n    uint256 public _buyBackFeeForBuying = 40;  \r\n    uint256 public _buyBackFeeForSelling = 40;  \r\n    \r\n    uint256 _marketFee;\r\n    uint256 public _marketFeeForBuying = 50; \r\n    uint256 public _marketFeeForSelling = 50;  \r\n    \r\n    uint256 _devFee;\r\n    uint256 public _devFeeForBuying = 40;  \r\n    uint256 public _devFeeForSelling = 30;\r\n\r\n    bool public swapAndLiquifyEnabled = false; // should be true to turn on to liquidate the pool\r\n    bool public reflectionFeesdiabled = false;\r\n    bool inSwapAndLiquify = false;\r\n\r\n    uint256 public maxTxAmount = _tTotal.mul(2).div(100); // 2% of total suppy\r\n    uint256 public minTokenNumberToSell = 10000000000000 * 1e9;\r\n    uint256 public maxHoldingAmount = _tTotal.mul(4).div(100); // 4% of total supply by default\r\n    uint256 public sellCoolDownTriggeredAt = block.timestamp;\r\n    uint256 public sellCoolDownDuration = 1 seconds;\r\n    uint256 public buyCoolDownTriggeredAt = block.timestamp;\r\n    uint256 public buyCoolDownDuration = 45 seconds;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    event ClaimBNBSuccessfully(\r\n        address recipient,\r\n        uint256 ethReceived,\r\n        uint256 nextAvailableClaimDate\r\n    );\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor (\r\n        address payable _ownerAddress,\r\n        address payable _buyBackAddress,\r\n        address payable _marketWallet,\r\n        address payable _devWallet\r\n    ) Ownable(_ownerAddress) {\r\n        _rOwned[owner()] = _rTotal;\r\n        buyBackWallet = _buyBackAddress;\r\n        marketWallet = _marketWallet;\r\n        devWallet = _devWallet;\r\n\r\n        // IUniSwapRouter02 _uniSwapRouter = IUniSwapRouter02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1);\r\n        IUniSwapRouter02 _uniSwapRouter = IUniSwapRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        // Create a pancake pair for this new token\r\n        uniSwapPair = IPancakeFactory(_uniSwapRouter.factory())\r\n        .createPair(address(this), _uniSwapRouter.WETH());\r\n\r\n        // set the rest of the contract variables\r\n        uniSwapRouter = _uniSwapRouter;\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        // exclude from max tx\r\n        _isExcludedFromMaxTx[owner()] = true;\r\n        _isExcludedFromMaxTx[address(this)] = true;\r\n\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    \r\n    //to receive BNB from uniSwapRouter when swapping\r\n    receive() external payable {}\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BUT: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BUT: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    // to manually distribute tokens to holders\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n        uint256 rAmount = tAmount.mul(_getRate());\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    // getter functions\r\n\r\n    function getContractBalance() public view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            uint256 rAmount = tAmount.mul(_getRate());\r\n            return rAmount;\r\n        } else {\r\n            uint256 rAmount = tAmount.mul(_getRate());\r\n            uint256 rTransferAmount = rAmount.sub(totalFeePerTx(tAmount).mul(_getRate()));\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    // setter functions for Owner\r\n\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _rOwned[account] = _tOwned[account].mul(_getRate());\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n    \r\n    function setAmountLimits(uint256 _maxTxAmount, uint256 _maxHoldAmount) public onlyOwner {\r\n        maxTxAmount = _maxTxAmount;\r\n        maxHoldingAmount = _maxHoldAmount;\r\n    }\r\n\r\n    function setReflectionFees(uint256 _btaxFee, uint256 _staxFee) external onlyOwner {\r\n        _taxFeeForBuying = _btaxFee;\r\n        _taxFeeForSelling =_staxFee;\r\n    }\r\n    \r\n    function setAllBuyFees(uint256 _bliquidityFee, uint256 _bbuyBackFee, uint256 _bmarketFee,  uint256 _bdevFee) external onlyOwner {\r\n        _liquidityFeeForBuying = _bliquidityFee;\r\n        _buyBackFeeForBuying = _bbuyBackFee;\r\n        _marketFeeForBuying = _bmarketFee;\r\n        _devFeeForBuying = _bdevFee;\r\n    }\r\n\r\n    function setSllSellFees(uint256 _sliquidityFee, uint256 _sbuyBackFee, uint256 _smarketFee,  uint256 _sdevFee) external onlyOwner {\r\n        _liquidityFeeForSelling = _sliquidityFee;\r\n        _buyBackFeeForSelling = _sbuyBackFee;\r\n        _marketFeeForSelling = _smarketFee;\r\n        _devFeeForSelling = _sdevFee;\r\n    }\r\n    \r\n    function setMinTokenNumberToSell(uint256 _amount) public onlyOwner {\r\n        minTokenNumberToSell = _amount;\r\n    }\r\n\r\n    function setExcludeFromMaxTx(address _address, bool _state) public onlyOwner {\r\n        _isExcludedFromMaxTx[_address] = _state;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _state) public onlyOwner {\r\n        swapAndLiquifyEnabled = _state;\r\n        emit SwapAndLiquifyEnabledUpdated(_state);\r\n    }\r\n    \r\n    function setBuyBackAddress(address payable _buyBackAddress) external onlyOwner {\r\n        buyBackWallet = _buyBackAddress;\r\n    }\r\n    \r\n    function setMarketAddress(address payable _marketAddress) external onlyOwner {\r\n        marketWallet = _marketAddress;\r\n    }\r\n    \r\n    function setDevAddress(address payable _devAddress) external onlyOwner {\r\n        devWallet = _devAddress;\r\n    }\r\n    \r\n    function enableCoolDown() external onlyOwner {\r\n        buyCoolDownDuration = 45 seconds;\r\n    }\r\n    \r\n    function diableCoolDown() external onlyOwner {\r\n        buyCoolDownDuration = 0 seconds;\r\n    }\r\n    \r\n    function removeMaxTxLimit() external onlyOwner {\r\n        maxTxAmount = _tTotal;\r\n    }\r\n    \r\n    function setMaxTxLimit(uint256 _percentageOfSuppy) external onlyOwner {\r\n        maxTxAmount = _tTotal.mul(_percentageOfSuppy).div(100);\r\n    }\r\n    \r\n    function setPancakeRouter(IUniSwapRouter02 _uniSwapRouter) external onlyOwner {\r\n        uniSwapRouter = _uniSwapRouter;\r\n    }\r\n\r\n    // internal functions for contract\r\n    \r\n    function totalFeePerTx(uint256 tAmount) internal view returns(uint256) {\r\n        uint256 percentage = tAmount.mul(_taxFee.add(_liquidityFee).add(_buyBackFee).add(_marketFee).add(_devFee)).div(1e3);\r\n        return percentage;\r\n    }\r\n\r\n    function _reflectFee(uint256 tAmount) private {\r\n        uint256 tFee = tAmount.mul(_taxFee).div(1e3);\r\n        uint256 rFee = tFee.mul(_getRate());\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _takeAllFee(uint256 tAmount, uint256 currentRate) internal {\r\n        uint256 tFee = tAmount.mul(_liquidityFee.add(_buyBackFee).add(_marketFee).add(_devFee)).div(1e3);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rFee);\r\n        if (_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tFee);\r\n        emit Transfer(_msgSender(), address(this), tFee);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n\r\n        _taxFee = 0;\r\n        _liquidityFee = 0;\r\n        _buyBackFee = 0;\r\n        _marketFee = 0;\r\n        _devFee = 0;\r\n    }\r\n\r\n    function takeBuyFee() private {\r\n\r\n        _taxFee = _taxFeeForBuying;\r\n        _liquidityFee = _liquidityFeeForBuying;\r\n        _buyBackFee = _buyBackFeeForBuying;\r\n        _marketFee = _marketFeeForBuying;\r\n        _devFee = _devFeeForBuying;\r\n    }\r\n\r\n    function takeSellFee() private {\r\n\r\n        _taxFee = _taxFeeForSelling;\r\n        _liquidityFee = _liquidityFeeForSelling;\r\n        _buyBackFee = _buyBackFeeForSelling;\r\n        _marketFee = _marketFeeForSelling;\r\n        _devFee = _devFeeForSelling;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"TOKEN: approve from the zero address\");\r\n        require(spender != address(0), \"TOKEN: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"TOKEN: transfer from the zero address\");\r\n        require(to != address(0), \"TOKEN: transfer to the zero address\");\r\n        require(amount > 0, \"TOKEN: Transfer amount must be greater than zero\");\r\n\r\n        if(!_isExcludedFromMaxTx[from] && \r\n            !_isExcludedFromMaxTx[to]   // by default false\r\n        ){\r\n            require(amount <= maxTxAmount,\"TOKEN: Amount exceed max limit\");\r\n\r\n            if(to != uniSwapPair){\r\n                require(balanceOf(to).add(amount) <= maxHoldingAmount,\"TOKEN: max holding limit exceeds\");\r\n            }\r\n\r\n            if(from == uniSwapPair){\r\n                require(buyCoolDownTriggeredAt.add(buyCoolDownDuration) < block.timestamp,\r\n                \"TOKEN: wait for buying cool down\"\r\n                );\r\n                buyCoolDownTriggeredAt = block.timestamp;\r\n            }\r\n\r\n            if(to == uniSwapPair){\r\n                require(sellCoolDownTriggeredAt.add(sellCoolDownDuration) < block.timestamp,\r\n                \"TOKEN: wait for selling cool down\"\r\n                );\r\n                sellCoolDownTriggeredAt = block.timestamp;\r\n            }\r\n        }\r\n\r\n        // swap and liquify\r\n        swapAndLiquify(from, to);\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || reflectionFeesdiabled) {\r\n            takeFee = false;\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if (!takeFee)\r\n            removeAllFee();\r\n        else if(sender == uniSwapPair)\r\n            takeBuyFee();\r\n        else\r\n            takeSellFee();\r\n\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount.sub(totalFeePerTx(tAmount));\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(totalFeePerTx(tAmount).mul(currentRate));\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeAllFee(tAmount, currentRate);\r\n        _reflectFee(tAmount);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount.sub(totalFeePerTx(tAmount));\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(totalFeePerTx(tAmount).mul(currentRate));\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeAllFee(tAmount, currentRate);\r\n        _reflectFee(tAmount);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount.sub(totalFeePerTx(tAmount));\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(totalFeePerTx(tAmount).mul(currentRate));\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeAllFee(tAmount, currentRate);\r\n        _reflectFee(tAmount);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount.sub(totalFeePerTx(tAmount));\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(totalFeePerTx(tAmount).mul(currentRate));\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeAllFee(tAmount, currentRate);\r\n        _reflectFee(tAmount);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function manualSwap() external onlyOwner {\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n         _approve(address(this), address(uniSwapRouter), contractTokenBalance);\r\n        Utils.swapTokensForEth(address(uniSwapRouter), contractTokenBalance);\r\n    }\r\n\r\n    function manualSend() external onlyOwner {\r\n        uint256 deltaBalance = getContractBalance();\r\n        uint256 totalPercent = _liquidityFee.add(_buyBackFee).add(_marketFee);\r\n        uint256 bbPercent = _buyBackFee.mul(1e4).div(totalPercent);\r\n        uint256 dvPercent = _devFee.mul(1e4).div(totalPercent);\r\n\r\n        // buybcak fee transfer\r\n        buyBackWallet.transfer(deltaBalance.mul(bbPercent).div(totalPercent));\r\n        // devfee transfer\r\n        devWallet.transfer(deltaBalance.mul(dvPercent).div(totalPercent));\r\n        // market fee transfer\r\n        marketWallet.transfer(getContractBalance());\r\n    }\r\n\r\n    function swapAndLiquify(address from, address to) private {\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is pancake pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        if (contractTokenBalance >= maxTxAmount) {\r\n            contractTokenBalance = maxTxAmount;\r\n        }\r\n\r\n        bool shouldSell = contractTokenBalance >= minTokenNumberToSell;\r\n\r\n        if (\r\n            !inSwapAndLiquify &&\r\n            shouldSell &&\r\n            from != uniSwapPair &&\r\n            swapAndLiquifyEnabled &&\r\n            !(from == address(this) && to == address(uniSwapPair)) // swap 1 time\r\n        ) {\r\n            // only sell for minTokenNumberToSell, decouple from maxTxAmount\r\n            // split the contract balance into 4 pieces\r\n            \r\n            contractTokenBalance = minTokenNumberToSell;\r\n            // approve contract\r\n            _approve(address(this), address(uniSwapRouter), contractTokenBalance);\r\n\r\n            takeSellFee();\r\n            uint256 totalPercent = _liquidityFee.add(_buyBackFee).add(_marketFee);\r\n            uint256 lpPercent = _liquidityFee.mul(1e4).div(totalPercent).div(2);\r\n            uint256 bbPercent = _buyBackFee.mul(1e4).div(totalPercent);\r\n            uint256 mwPercent = _marketFee.mul(1e4).div(totalPercent);\r\n            uint256 dvPercent = _devFee.mul(1e4).div(totalPercent);\r\n            \r\n            uint256 otherPiece = contractTokenBalance.mul(lpPercent).div(1e4);\r\n            uint256 tokenAmountToBeSwapped = contractTokenBalance.sub(otherPiece);\r\n            \r\n            // now is to lock into staking pool\r\n            Utils.swapTokensForEth(address(uniSwapRouter), tokenAmountToBeSwapped);\r\n\r\n            // how much BNB did we just swap into?\r\n\r\n            // capture the contract's current BNB balance.\r\n            // this is so that we can capture exactly the amount of BNB that the\r\n            // swap creates, and not make the liquidity event include any BNB that\r\n            // has been manually sent to the contract\r\n            uint256 deltaBalance = getContractBalance();\r\n            \r\n            totalPercent = lpPercent.add(bbPercent).add(mwPercent).add(dvPercent);\r\n\r\n            uint256 bnbToBeAddedToLiquidity = deltaBalance.mul(lpPercent).div(totalPercent);\r\n\r\n            // add liquidity to pancake\r\n            Utils.addLiquidity(address(uniSwapRouter), owner(), otherPiece, bnbToBeAddedToLiquidity);\r\n            // buybcak fee transfer\r\n            buyBackWallet.transfer(deltaBalance.mul(bbPercent).div(totalPercent));\r\n            // devfee transfer\r\n            devWallet.transfer(deltaBalance.mul(dvPercent).div(totalPercent));\r\n            // market fee transfer\r\n            marketWallet.transfer(getContractBalance());\r\n            \r\n            emit SwapAndLiquify(tokenAmountToBeSwapped, deltaBalance, otherPiece);\r\n        }\r\n    }\r\n     \r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, TOKEN the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_buyBackAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_marketWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextAvailableClaimDate\",\"type\":\"uint256\"}],\"name\":\"ClaimBNBSuccessfully\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyBackFeeForBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBackFeeForSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devFeeForBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devFeeForSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFeeForBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFeeForSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketFeeForBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketFeeForSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFeeForBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFeeForSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCoolDownDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCoolDownTriggeredAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diableCoolDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableCoolDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenNumberToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFeesdiabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeMaxTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellCoolDownDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellCoolDownTriggeredAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bliquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bbuyBackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bmarketFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bdevFee\",\"type\":\"uint256\"}],\"name\":\"setAllBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxHoldAmount\",\"type\":\"uint256\"}],\"name\":\"setAmountLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_buyBackAddress\",\"type\":\"address\"}],\"name\":\"setBuyBackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setExcludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_marketAddress\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentageOfSuppy\",\"type\":\"uint256\"}],\"name\":\"setMaxTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokenNumberToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniSwapRouter02\",\"name\":\"_uniSwapRouter\",\"type\":\"address\"}],\"name\":\"setPancakeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_btaxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_staxFee\",\"type\":\"uint256\"}],\"name\":\"setReflectionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sliquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sbuyBackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_smarketFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sdevFee\",\"type\":\"uint256\"}],\"name\":\"setSllSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniSwapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniSwapRouter\",\"outputs\":[{\"internalType\":\"contract IUniSwapRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SPACELINK", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000403da7a23ccbf3d6a7f9d61d3f07478796c6dc59000000000000000000000000fe902b6e3d28abdd712901a7ad69bf1182958e09000000000000000000000000372538f42f3ab5ec21f82f7992aa3c7e2d4032b4000000000000000000000000b5ccd0db08027073c7dad3e0e7776a17ec9e9f15", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e7a506b38cdc0a7a12e0d028e4a9b4dc140035dd46db081862560de6a5f253dd"}