{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin4.2.0/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin4.2.0/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin4.2.0/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/wrapped-tokens/RateLimit.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n *\\n * Copyright (c) 2022 Coinbase, Inc.\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity 0.8.6;\\n\\nimport { Ownable } from \\\"@openzeppelin4.2.0/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title RateLimit\\n * @dev Rate limiting contract for function calls\\n */\\ncontract RateLimit is Ownable {\\n    /**\\n     * @dev Mapping denoting caller addresses\\n     * @return Boolean denoting whether the given address is a caller\\n     */\\n    mapping(address => bool) public callers;\\n\\n    /**\\n     * @dev Mapping denoting caller address rate limit intervals\\n     * @return A time in seconds representing the duration of the given callers interval\\n     */\\n    mapping(address => uint256) public intervals;\\n\\n    /**\\n     * @dev Mapping denoting when a given caller's allowance was last updated\\n     * @return The time in seconds since a given caller's allowance was last updated\\n     */\\n    mapping(address => uint256) public allowancesLastSet;\\n\\n    /**\\n     * @dev Mapping denoting a given caller's maximum allowance\\n     * @return The maximum allowance of a given caller\\n     */\\n    mapping(address => uint256) public maxAllowances;\\n\\n    /**\\n     * @dev Mapping denoting a given caller's stored allowance\\n     * @return The stored allowance of a given caller\\n     */\\n    mapping(address => uint256) public allowances;\\n\\n    /**\\n     * @notice Emitted on caller configuration\\n     * @param caller The address configured to make rate limited calls\\n     * @param amount The maximum allowance for the given caller\\n     * @param interval The amount of time in seconds before a caller's allowance is replenished\\n     */\\n    event CallerConfigured(\\n        address indexed caller,\\n        uint256 amount,\\n        uint256 interval\\n    );\\n\\n    /**\\n     * @notice Emitted on caller removal\\n     * @param caller The address of the caller being removed\\n     */\\n    event CallerRemoved(address indexed caller);\\n\\n    /**\\n     * @notice Emitted on caller allowance replenishment\\n     * @param caller The address of the caller whose allowance is being replenished\\n     * @param allowance The current allowance for the given caller post replenishment\\n     * @param amountReplenished The allowance amount that was replenished for the given caller\\n     */\\n    event AllowanceReplenished(\\n        address indexed caller,\\n        uint256 allowance,\\n        uint256 amountReplenished\\n    );\\n\\n    /**\\n     * @dev Throws if called by any account other than a caller\\n     * @dev Rate limited functionality in inheriting contracts must have the only caller modifier\\n     */\\n    modifier onlyCallers() {\\n        require(callers[msg.sender], \\\"RateLimit: caller is not whitelisted\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Function to add/update a new caller. Also updates allowancesLastSet for that caller.\\n     * @param caller The address of the caller\\n     * @param amount The call amount allowed for the caller for a given interval\\n     * @param interval The interval for a given caller\\n     */\\n    function configureCaller(\\n        address caller,\\n        uint256 amount,\\n        uint256 interval\\n    ) external onlyOwner {\\n        require(caller != address(0), \\\"RateLimit: caller is the zero address\\\");\\n        require(amount > 0, \\\"RateLimit: amount is zero\\\");\\n        require(interval > 0, \\\"RateLimit: interval is zero\\\");\\n        callers[caller] = true;\\n        maxAllowances[caller] = allowances[caller] = amount;\\n        allowancesLastSet[caller] = block.timestamp;\\n        intervals[caller] = interval;\\n        emit CallerConfigured(caller, amount, interval);\\n    }\\n\\n    /**\\n     * @dev Function to remove a caller.\\n     * @param caller The address of the caller\\n     */\\n    function removeCaller(address caller) external onlyOwner {\\n        delete callers[caller];\\n        delete intervals[caller];\\n        delete allowancesLastSet[caller];\\n        delete maxAllowances[caller];\\n        delete allowances[caller];\\n        emit CallerRemoved(caller);\\n    }\\n\\n    /**\\n     * @dev Helper function to calculate the estimated allowance given caller address\\n     * @param caller The address whose call allowance is being estimated\\n     * @return The allowance of the given caller if their allowance were to be replenished\\n     */\\n    function estimatedAllowance(address caller)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return allowances[caller] + _getReplenishAmount(caller);\\n    }\\n\\n    /**\\n     * @dev Get the current caller allowance for an account\\n     * @param caller The address of the caller\\n     * @return The allowance of the given caller post replenishment\\n     */\\n    function currentAllowance(address caller) public returns (uint256) {\\n        _replenishAllowance(caller);\\n        return allowances[caller];\\n    }\\n\\n    /**\\n     * @dev Helper function to replenish a caller's allowance over the interval in proportion to time elapsed, up to their maximum allowance\\n     * @param caller The address whose allowance is being updated\\n     */\\n    function _replenishAllowance(address caller) internal {\\n        if (allowances[caller] == maxAllowances[caller]) {\\n            return;\\n        }\\n        uint256 amountToReplenish = _getReplenishAmount(caller);\\n        if (amountToReplenish == 0) {\\n            return;\\n        }\\n\\n        allowances[caller] = allowances[caller] + amountToReplenish;\\n        allowancesLastSet[caller] = block.timestamp;\\n        emit AllowanceReplenished(\\n            caller,\\n            allowances[caller],\\n            amountToReplenish\\n        );\\n    }\\n\\n    /**\\n     * @dev Helper function to calculate the replenishment amount\\n     * @param caller The address whose allowance is being estimated\\n     * @return The allowance amount to be replenished for the given caller\\n     */\\n    function _getReplenishAmount(address caller)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 secondsSinceAllowanceSet = block.timestamp -\\n            allowancesLastSet[caller];\\n\\n        uint256 amountToReplenish = (secondsSinceAllowanceSet *\\n            maxAllowances[caller]) / intervals[caller];\\n        uint256 allowanceAfterReplenish = allowances[caller] +\\n            amountToReplenish;\\n\\n        if (allowanceAfterReplenish > maxAllowances[caller]) {\\n            amountToReplenish = maxAllowances[caller] - allowances[caller];\\n        }\\n        return amountToReplenish;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/wrapped-tokens/staking/ExchangeRateUpdater.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n *\\n * Copyright (c) 2022 Coinbase, Inc.\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity 0.8.6;\\n\\nimport { RateLimit } from \\\"./../RateLimit.sol\\\";\\nimport { ExchangeRateUtil } from \\\"./ExchangeRateUtil.sol\\\";\\n\\n/**\\n * @title ExchangeRateUpdater\\n * @notice Updating contract for ERC20 tokens with an exchange rate\\n */\\ncontract ExchangeRateUpdater is RateLimit {\\n    /**\\n     * @dev Returns the address of the token contract\\n     * @return The address of the token contract with an exchange rate\\n     */\\n    address public tokenContract;\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized\\n     */\\n    bool internal initialized;\\n\\n    /**\\n     * @notice Emitted when exchange rate is updated\\n     * @param caller The address initiating the exchange rate update\\n     * @param amount The new exchange rate\\n     */\\n    event ExchangeRateUpdated(address indexed caller, uint256 amount);\\n\\n    /**\\n     * @dev Function to initialize the contract\\n     * @dev Can an only be called once by the deployer of the contract\\n     * @dev The caller is responsible for ensuring that both the new owner and the token contract are configured correctly\\n     * @param newOwner The address of the new owner of the exchange rate updater contract, can either be an EOA or a contract\\n     * @param newTokenContract The address of the token contract whose exchange rate is updated\\n     */\\n    function initialize(address newOwner, address newTokenContract)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            !initialized,\\n            \\\"ExchangeRateUpdater: contract is already initialized\\\"\\n        );\\n        require(\\n            newOwner != address(0),\\n            \\\"ExchangeRateUpdater: owner is the zero address\\\"\\n        );\\n        require(\\n            newTokenContract != address(0),\\n            \\\"ExchangeRateUpdater: tokenContract is the zero address\\\"\\n        );\\n        transferOwnership(newOwner);\\n        tokenContract = newTokenContract;\\n        initialized = true;\\n    }\\n\\n    /**\\n     * @dev Rate limited function to update token's exchange rate\\n     * @param _newExchangeRate The new exchange rate. Must be less than or equal\\n     * to the allowance of the caller.\\n     */\\n    function updateExchangeRate(uint256 _newExchangeRate)\\n        public\\n        virtual\\n        onlyCallers\\n    {\\n        require(\\n            _newExchangeRate > 0,\\n            \\\"ExchangeRateUpdater: new exchange rate must be greater than 0\\\"\\n        );\\n\\n        _replenishAllowance(msg.sender);\\n\\n        uint256 currentExchangeRate = ExchangeRateUtil.safeGetExchangeRate(\\n            tokenContract\\n        );\\n\\n        require(\\n            _newExchangeRate != currentExchangeRate,\\n            \\\"ExchangeRateUpdater: exchange rate isn't new\\\"\\n        );\\n\\n        uint256 exchangeRateChange;\\n        if (_newExchangeRate > currentExchangeRate) {\\n            exchangeRateChange = _newExchangeRate - currentExchangeRate;\\n        } else {\\n            exchangeRateChange = currentExchangeRate - _newExchangeRate;\\n        }\\n\\n        require(\\n            exchangeRateChange <= allowances[msg.sender],\\n            \\\"ExchangeRateUpdater: exchange rate update exceeds allowance\\\"\\n        );\\n\\n        allowances[msg.sender] = allowances[msg.sender] - exchangeRateChange;\\n\\n        ExchangeRateUtil.safeUpdateExchangeRate(\\n            _newExchangeRate,\\n            tokenContract\\n        );\\n        emit ExchangeRateUpdated(msg.sender, _newExchangeRate);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/wrapped-tokens/staking/ExchangeRateUtil.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n *\\n * Copyright (c) 2022 Coinbase, Inc.\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity 0.8.6;\\n\\nimport { Address } from \\\"@openzeppelin4.2.0/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title ExchangeRateUtil\\n * @dev Used for safe exchange rate updating\\n */\\nlibrary ExchangeRateUtil {\\n    using Address for address;\\n\\n    bytes4 private constant _EXCHANGE_RATE_GETTER_SELECTOR = bytes4(\\n        keccak256(\\\"exchangeRate()\\\")\\n    );\\n    bytes4 private constant _EXCHANGE_RATE_UPDATER_SELECTOR = bytes4(\\n        keccak256(\\\"updateExchangeRate(uint256)\\\")\\n    );\\n\\n    /**\\n     * @dev Updates the given token contract's exchange rate\\n     * @param newExchangeRate New exchange rate\\n     * @param tokenContract Token contract address\\n     */\\n    function safeUpdateExchangeRate(\\n        uint256 newExchangeRate,\\n        address tokenContract\\n    ) internal {\\n        bytes memory data = abi.encodeWithSelector(\\n            _EXCHANGE_RATE_UPDATER_SELECTOR,\\n            newExchangeRate\\n        );\\n        tokenContract.functionCall(\\n            data,\\n            \\\"ExchangeRateUtil: update exchange rate failed\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the given token contract's exchange rate\\n     * @param tokenContract Token contract address\\n     * @return The exchange rate read from the given token contract\\n     */\\n    function safeGetExchangeRate(address tokenContract)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        bytes memory data = abi.encodePacked(_EXCHANGE_RATE_GETTER_SELECTOR);\\n        bytes memory returnData = tokenContract.functionStaticCall(\\n            data,\\n            \\\"ExchangeRateUtil: get exchange rate failed\\\"\\n        );\\n        return abi.decode(returnData, (uint256));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReplenished\",\"type\":\"uint256\"}],\"name\":\"AllowanceReplenished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"CallerConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExchangeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowancesLastSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"callers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"configureCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"currentAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"estimatedAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTokenContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"intervals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxAllowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"removeCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newExchangeRate\",\"type\":\"uint256\"}],\"name\":\"updateExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExchangeRateUpdater", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}