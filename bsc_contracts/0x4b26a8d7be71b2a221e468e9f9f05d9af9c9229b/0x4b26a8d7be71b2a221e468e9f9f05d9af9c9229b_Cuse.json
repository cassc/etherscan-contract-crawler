{"SourceCode": "{\"Address.sol\":{\"content\":\"pragma solidity 0.5.8;\\r\\n\\r\\nlibrary Address {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n}\\r\\n\"},\"Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\ncontract Context {\\r\\n  \\r\\n    constructor () internal { }\\r\\n\\r\\n    function _msgSender() internal view returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"Cuse.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport { Ownable } from \\\"./Ownable.sol\\\" ;\\r\\nimport \\\"./SafeMath.sol\\\" ;\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\n\\r\\ncontract Cuse is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for ERC20;\\r\\n\\r\\n    // ERC20\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint256 private _decimals;\\r\\n    uint256 private _totalSupply;\\r\\n    mapping (address =\\u003e uint256) private balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private allowances;\\r\\n\\r\\n    // TransferBurn\\r\\n    mapping(address =\\u003e bool) private pancakePairAddress;\\r\\n    address public shareAddress;\\r\\n    uint256 public tradeFeeTotal;\\r\\n\\r\\n    // Hold\\r\\n    bool private holdSwitchState;\\r\\n    uint256 private holdStartTime;\\r\\n    ERC20 private cuseTokenContract;\\r\\n    uint256 private nowJoinHoldCount;\\r\\n    mapping(address =\\u003e uint256) private isJoinHoldIndex;\\r\\n    mapping(uint256 =\\u003e address) private joinHoldOrders;\\r\\n\\r\\n    // Events\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\r\\n    event PancakePairAddress(address indexed _account, address _pancakePairAddress, bool _value);\\r\\n    event TradeFee(address indexed _account, address _shareAddress, address _recipient, uint256 _tradeFee);\\r\\n    event ShareAddress(address indexed _account, address _shareAddress);\\r\\n    event HoldBasic(address indexed _account, bool _holdSwitchState, address _cuseTokenContract);\\r\\n    event ToHoldProfit(address indexed _account, uint256 _shareAddressCuseBalance, uint256 _nowJoinHoldCount);\\r\\n\\r\\n\\r\\n    // ================= Initial value ===============\\r\\n\\r\\n    constructor (address _initial_account) public {\\r\\n        _name = \\\"Cosmic journey\\\";\\r\\n        _symbol = \\\"CUSE\\\";\\r\\n        _decimals = 18;\\r\\n        _totalSupply = 1000000000000000000000000000;// 10_00000000.mul(10 ** uint256(18));\\r\\n        balances[_initial_account] = _totalSupply;\\r\\n        emit Transfer(address(this), _initial_account, _totalSupply);\\r\\n        _updateHold(_initial_account);\\r\\n    }\\r\\n\\r\\n    // ================= Hold Operation ===============\\r\\n\\r\\n    function toHoldProfit() public returns (bool) {\\r\\n        // Data validation\\r\\n        require(holdSwitchState,\\\"-\\u003e holdSwitchState: hold has not started yet.\\\");\\r\\n\\r\\n        // Calculation\\r\\n        uint256 shareAddressCuseBalance = cuseTokenContract.balanceOf(shareAddress);\\r\\n        if(shareAddressCuseBalance\\u003e0){\\r\\n              uint256 profitAmount;\\r\\n              for(uint256 i=1;i\\u003c=nowJoinHoldCount;i++){\\r\\n                  if(balances[joinHoldOrders[i]]\\u003e0){\\r\\n                      profitAmount = shareAddressCuseBalance.mul(balances[joinHoldOrders[i]]).div(_totalSupply);// user profit\\r\\n                      if(!pancakePairAddressOf(joinHoldOrders[i])){\\r\\n                          cuseTokenContract.safeTransferFrom(shareAddress,joinHoldOrders[i],profitAmount);// Transfer cuse to hold address\\r\\n                      }\\r\\n                  }\\r\\n              }\\r\\n        }\\r\\n\\r\\n        emit ToHoldProfit(msg.sender,shareAddressCuseBalance,nowJoinHoldCount);// set log\\r\\n        return true;// return result\\r\\n    }\\r\\n\\r\\n    function _updateHold(address _account) internal {\\r\\n        if(isJoinHoldIndex[_account]\\u003c=0){\\r\\n            nowJoinHoldCount += 1;\\r\\n            joinHoldOrders[nowJoinHoldCount] = _account;\\r\\n            isJoinHoldIndex[_account] += 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isJoinHoldIndexOf(address _account) public view returns (uint256 Index) {\\r\\n        return isJoinHoldIndex[_account];\\r\\n    }\\r\\n\\r\\n    function joinHoldOrdersOf(uint256 _index) public view returns (address Account) {\\r\\n        return joinHoldOrders[_index];\\r\\n    }\\r\\n\\r\\n    function getHoldBasic() public view returns (bool HoldSwitchState,uint256 HoldStartTime,ERC20 CuseTokenContract,uint256 NowJoinHoldCount) {\\r\\n        return (holdSwitchState,holdStartTime,cuseTokenContract,nowJoinHoldCount);\\r\\n    }\\r\\n\\r\\n    function setHoldBasic(bool _holdSwitchState,address _cuseTokenContract) public onlyOwner returns (bool) {\\r\\n        holdSwitchState = _holdSwitchState;\\r\\n        cuseTokenContract = ERC20(_cuseTokenContract);\\r\\n        if(holdStartTime==0){\\r\\n            holdStartTime = block.timestamp;// set farmStartTime\\r\\n        }\\r\\n        emit HoldBasic(msg.sender, _holdSwitchState, _cuseTokenContract);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // ================= Pair transfer ===============\\r\\n\\r\\n    function _transfer(address _sender, address _recipient, uint256 _amount) internal {\\r\\n        require(_amount \\u003c= balances[_sender],\\\"Transfer: insufficient balance of from address\\\");\\r\\n\\r\\n        if(pancakePairAddressOf(_recipient)){\\r\\n            require(_amount.add(_amount.mul(6).div(100)) \\u003c= balances[_sender],\\\"ERC20: transfer amount exceeds balance\\\");\\r\\n\\r\\n            balances[_sender] -= _amount.add(_amount.mul(6).div(100));// sell ==\\u003e  user 106%\\r\\n\\r\\n            balances[_recipient] += _amount.add(_amount.mul(3).div(100));// pancakePair 103%\\r\\n            emit Transfer(_sender, _recipient, _amount.add(_amount.mul(3).div(100)));\\r\\n\\r\\n            balances[shareAddress] += _amount.mul(3).div(100);// shareAddress 3%\\r\\n            emit Transfer(_sender, shareAddress, _amount.mul(3).div(100));\\r\\n\\r\\n            tradeFeeTotal += _amount.mul(6).div(100);\\r\\n            emit TradeFee(_sender, shareAddress, _recipient, _amount.mul(6).div(100));// add trade fee log\\r\\n        }else{\\r\\n            balances[_sender] -= _amount;\\r\\n            balances[_recipient] += _amount;\\r\\n            emit Transfer(_sender, _recipient, _amount);\\r\\n        }\\r\\n        _updateHold(_recipient);\\r\\n    }\\r\\n\\r\\n    // ================= Pair Operation ===============\\r\\n\\r\\n    function addPancakePairAddress(address _pancakePairAddress,bool _value) public onlyOwner returns (bool) {\\r\\n        pancakePairAddress[_pancakePairAddress] = _value;\\r\\n        emit PancakePairAddress(msg.sender, _pancakePairAddress, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function pancakePairAddressOf(address _pancakePairAddress) public view returns (bool) {\\r\\n        return pancakePairAddress[_pancakePairAddress];\\r\\n    }\\r\\n\\r\\n    function setShareAddress(address _shareAddress) public onlyOwner returns (bool) {\\r\\n        shareAddress = _shareAddress;\\r\\n        emit ShareAddress(msg.sender, _shareAddress);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // ================= ERC20 Basic Write ===============\\r\\n\\r\\n    function approve(address _spender, uint256 _amount) public returns (bool) {\\r\\n        _approve(_msgSender(), _spender, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address _owner, address _spender, uint256 _amount) internal {\\r\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(_spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        allowances[_owner][_spender] = _amount;\\r\\n        emit Approval(_owner, _spender, _amount);\\r\\n    }\\r\\n\\r\\n    function transfer(address _recipient, uint256 _amount) public returns (bool) {\\r\\n        _transfer(_msgSender(), _recipient, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public returns (bool) {\\r\\n        _transfer(_sender, _recipient, _amount);\\r\\n        _approve(_sender, _msgSender(), allowances[_sender][_msgSender()].sub(_amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // ================= ERC20 Basic Query ===============\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint256) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address _owner) public view returns (uint256) {\\r\\n        return balances[_owner];\\r\\n    }\\r\\n\\r\\n    function allowance(address _owner, address _spender) public view returns (uint256) {\\r\\n        return allowances[_owner][_spender];\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport { Context } from \\\"./Context.sol\\\" ;\\r\\n\\r\\ncontract Ownable is Context {\\r\\n\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isOwner() private view returns (bool) {\\r\\n        return _msgSender() == _owner;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() private onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"SafeERC20.sol\":{\"content\":\"pragma solidity 0.5.8;\\r\\n\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function callOptionalReturn(ERC20 token, bytes memory data) private {\\r\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface ERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity 0.5.8;\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isJoinHoldIndexOf\",\"outputs\":[{\"name\":\"Index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_shareAddress\",\"type\":\"address\"}],\"name\":\"setShareAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toHoldProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHoldBasic\",\"outputs\":[{\"name\":\"HoldSwitchState\",\"type\":\"bool\"},{\"name\":\"HoldStartTime\",\"type\":\"uint256\"},{\"name\":\"CuseTokenContract\",\"type\":\"address\"},{\"name\":\"NowJoinHoldCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holdSwitchState\",\"type\":\"bool\"},{\"name\":\"_cuseTokenContract\",\"type\":\"address\"}],\"name\":\"setHoldBasic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"joinHoldOrdersOf\",\"outputs\":[{\"name\":\"Account\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pancakePairAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"addPancakePairAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradeFeeTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pancakePairAddress\",\"type\":\"address\"}],\"name\":\"pancakePairAddressOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initial_account\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_pancakePairAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"PancakePairAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_shareAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tradeFee\",\"type\":\"uint256\"}],\"name\":\"TradeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_shareAddress\",\"type\":\"address\"}],\"name\":\"ShareAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_holdSwitchState\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_cuseTokenContract\",\"type\":\"address\"}],\"name\":\"HoldBasic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_shareAddressCuseBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_nowJoinHoldCount\",\"type\":\"uint256\"}],\"name\":\"ToHoldProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "Cuse", "CompilerVersion": "v0.5.8+commit.23d335f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f92294d80fa5b755de0f95492065fbda6e45a4d9", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://467cac024313c73fb721410dc0256d23e1b1b320e7843edfa8c2ae24f9ca3e86"}