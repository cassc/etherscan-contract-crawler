{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/GameMiner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"./Library/LibI.sol\\\";\\n\\ncontract GameMiner {\\n    IMainLogic private IMain = IMainLogic(0x0dDADC03bd1370098A942706b1a7f0f3A825000D);\\n    IEpicToken private Epic = IEpicToken(0xb95C558c921D462C382FA7fCDa9A26409070262c);\\n\\n    mapping(address => mapping(uint256 => uint256)) internal minedTime;\\n    mapping(address => uint256[]) internal minedIDs;\\n\\n    function getStakeId() external view returns (uint256[] memory) {\\n        return minedIDs[msg.sender];\\n    }\\n\\n    function stakePet(uint256[] memory ids) external {\\n        uint256[] memory amounts = new uint256[](ids.length);\\n        address sender = msg.sender;\\n        uint256 timestamp = block.timestamp;\\n        for (uint i; i < ids.length; i++) {\\n            amounts[i] = 1;\\n            require(IMain.ownerOf(sender, ids[i]), \\\"Not your NFT\\\");\\n            minedTime[sender][ids[i]] = timestamp;\\n            minedIDs[sender].push(ids[i]);\\n        }\\n        IMain.transferTo(sender, address(IMain), ids, amounts);\\n    }\\n\\n    function stakeYield() public view returns (uint256) {\\n        uint256 yield;\\n        uint256[] memory pn = minedIDs[msg.sender];\\n        for (uint i; i < pn.length; i++) {\\n            if (minedTime[msg.sender][pn[i]] != 0) {\\n                yield += (block.timestamp - minedTime[msg.sender][pn[i]]) * 771604938271600;\\n            }\\n        }\\n        return yield;\\n    }\\n\\n    function getStakeYield() public {\\n        uint256 yield;\\n        uint256[] memory pn = minedIDs[msg.sender];\\n        for (uint i; i < pn.length; i++) {\\n            if (minedTime[msg.sender][pn[i]] != 0) {\\n                yield += (block.timestamp - minedTime[msg.sender][pn[i]]) * 771604938271600;\\n                minedTime[msg.sender][pn[i]] = block.timestamp;\\n            }\\n        }\\n        Epic.mint(msg.sender, yield);\\n    }\\n\\n    function unStakePet(uint256[] memory ids) external {\\n        getStakeYield();\\n        uint256[] memory amounts = new uint256[](ids.length);\\n        for (uint i; i < ids.length; i++) {\\n            amounts[i] = 1;\\n            for (uint b; b < minedIDs[msg.sender].length; b++) {\\n                if (ids[i] == minedIDs[msg.sender][b]) {\\n                    minedIDs[msg.sender][b] = minedIDs[msg.sender][minedIDs[msg.sender].length - 1];\\n                    minedIDs[msg.sender].pop();\\n                    break;\\n                }\\n            }\\n            delete minedTime[msg.sender][ids[i]];\\n        }\\n        IMain.transferTo(address(IMain), msg.sender, ids, amounts);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Library/LibI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\ninterface IAC {\\n    function isOpenWL() external view returns (bool);\\n    function isWL(address addr) external view returns (bool);\\n    function isBL(address addr) external view returns (bool);\\n}\\n\\ninterface IMainLogic {\\n    function ownerOf(address addr, uint256 id) external view returns (bool);\\n    function getPetInfo(uint256 id) external view returns (uint8 agi, uint8 lv, uint8 hp, uint8 ak);\\n    function getInviterAddr(address addr) external view returns (address);\\n    function transferTo(address from, address to, uint256[] memory ids, uint256[] memory amounts) external;\\n}\\n\\ninterface IEpicToken {\\n    function mint(address to, uint amount) external;\\n    function burn(address to, uint amount) external;\\n}\\n\\ninterface IPassNFT {\\n    function usePassNFT(address account, uint256 amount) external;\\n}\\n\\ninterface ILpRouter {\\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] memory path) external view returns (uint[] memory amounts);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n}\\n\\ninterface ILP {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n}\"\r\n    },\r\n    \"contracts/Library/Rolev2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenContract\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n *  This contract module provides permission checks\\n *  when Contract 2 calls Contract 1 to prevent permission attacks.\\n */\\nabstract contract RoleV2 is Ownable {\\n    mapping(address => bool) private _role;\\n\\n    /**\\n     *  Throws if called by any account other than the allowed contract.\\n     */\\n    modifier onlyControl() {\\n        require(_role[msg.sender], \\\"You are not game logic contract\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Modify allowed contract addresses.\\n     * Can only be called by the current owner.\\n     */\\n    function modiControl(address addr, bool option) external onlyOwner {\\n        _role[addr] = option;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"getStakeId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"stakePet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"unStakePet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GameMiner", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://94ca92faf5b18a227017f7b494871c150501f245b8d66d07873d623c5bdacea0"}