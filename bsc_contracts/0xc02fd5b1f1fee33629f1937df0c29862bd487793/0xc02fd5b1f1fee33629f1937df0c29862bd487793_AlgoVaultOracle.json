{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"AlgoVaultOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"IAlgoVault.sol\\\";\\nimport \\\"AggregatorV3Interface.sol\\\";\\n\\n\\ncontract AlgoVaultOracle is Ownable {\\n\\n    //btc price oracle\\n    AggregatorV3Interface public btcPriceFeed = AggregatorV3Interface(0x264990fbd0A4796A3E3d8E37C4d5F87a3aCa5Ebf);\\n\\n    address public vault;\\n    address public share;\\n\\n    mapping(address => uint256) private _shareTokenPrice;\\n    mapping (address => bool) public isOperator;\\n\\n    event VaultUpdated(address indexed _vault);\\n    event ShareUpdated(address indexed _share);\\n    event SharePriceUpdated(address indexed token, uint256 newPrice, uint256 btcPrice, uint256 time);\\n    event OperatorUpdated(address indexed _operator, bool indexed _isActive);\\n\\n    modifier onlyOperator() {\\n        require(isOperator[msg.sender] == true, \\\"caller is not the operator\\\");\\n        _;\\n    }\\n\\n    constructor(address _vault, address _share) {\\n        require(_vault != address(0), \\\"vault address can not be zero address\\\");\\n        require(_share != address(0), \\\"share token address can not be zero address\\\");\\n        vault = _vault;\\n        share = _share;\\n    }\\n\\n    function setVault(address _vault) external onlyOperator {\\n        require(_vault != address(0), \\\"vault address can not be zero address\\\");\\n        vault = _vault;\\n        emit VaultUpdated(_vault);\\n    }\\n\\n    function setShareToken(address _share) external onlyOperator {\\n        require(_share != address(0), \\\"share token address can not be zero address\\\");\\n        share = _share;\\n        emit ShareUpdated(_share);\\n    }\\n\\n    function setOperator(address _operator, bool _isActive) external onlyOwner {\\n        require(_operator != address(0), \\\"operator address can not be zero address\\\");\\n        isOperator[_operator] = _isActive;\\n        emit OperatorUpdated(_operator, _isActive);\\n    }\\n\\n    function shareTokenPrice(address token) public view returns (uint256) {\\n        return _shareTokenPrice[token];\\n    }\\n\\n    // The token must be a token within the token list of the vault.\\n    function checkBaseTokenList(address token) public view returns (bool) {\\n        return IAlgoVault(vault).checkBaseTokenList(token);\\n    }\\n\\n    /**\\n     * Returns the latest btc price,decimals: 8\\n     */\\n    function getLatestBTCPrice() public view returns (int) {\\n        (\\n            /*uint80 roundID*/,\\n            int price,\\n            /*uint startedAt*/,\\n            /*uint timeStamp*/,\\n            /*uint80 answeredInRound*/\\n        ) = btcPriceFeed.latestRoundData();\\n        return price;\\n    }\\n\\n    function setChainlinkBTCOracle(address _address) external onlyOperator {\\n        require(_address != address(0), \\\"zero address\\\");\\n        btcPriceFeed = AggregatorV3Interface(_address);\\n    }\\n\\n    function updateSharePrice(address[] memory _baseTokenList, uint256[] memory _price) external onlyOperator {\\n        require(_baseTokenList.length == _price.length, \\\"array length mismatch\\\");\\n        uint256 btcPrice = uint256(getLatestBTCPrice());\\n        for(uint i = 0; i <_baseTokenList.length; i++) {\\n            address token = _baseTokenList[i];\\n            require(checkBaseTokenList(token) == true, \\\"token is not in the baseTokenList\\\");\\n            uint256 price = _price[i];\\n            require(price != 0, \\\"share price can not be zero\\\");\\n            _shareTokenPrice[token] = price;\\n            emit SharePriceUpdated(token, price, btcPrice, block.timestamp);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"IAlgoVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IAlgoVault {\\n\\n    struct TokenInfo {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    function DIVISION_PRECISION() external view returns (uint256);\\n\\n    function PRICE_PRECISION() external view returns (uint256);\\n\\n    function stakeInfo(address user, address token) external view returns (uint256);\\n\\n    function withdrawInfo(address user, address token) external view returns (uint256);\\n\\n    function checkBaseTokenList(address token) external view returns (bool);\\n\\n    function checkPortfolioTokenList(address token) external view returns (bool);\\n\\n    function getCurrentMinute() external view returns (uint256);\\n\\n    function lockupStartTime() external view returns (uint256);\\n\\n    function lockupEndTime() external view returns (uint256);\\n\\n    function feeIn() external view returns (uint256);\\n\\n    function feeOut() external view returns (uint256);\\n\\n    function dailyFee() external view returns (uint256);\\n\\n    function instantWithdrawFee() external view returns (uint256);\\n\\n    function instantWithdrawFeeRatio() external view returns (uint256);\\n\\n    function totalStakeRequest(address token) external view returns (uint256);\\n\\n    function totalWithdrawRequest(address token) external view returns (uint256);\\n\\n    function minimumRequest(address token) external view returns (uint256);\\n\\n    function portfolioTokenList(uint256 index) external view returns (address);\\n\\n    function baseTokenList(uint256 index) external view returns (address);\\n\\n    function getPortfolio() external view returns (TokenInfo[] memory);\\n\\n    function lastWithdrawTime() external view returns (uint256);\\n\\n    function getTokenBalance(address token) external view returns (uint256);\\n\\n    function getAllPortfolioTokenList() external view returns (address[] memory);\\n\\n    function getAllBaseTokenList() external view returns (address[] memory);\\n\\n}\"\r\n    },\r\n    \"AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"AlgoVaultOracle.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_share\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"OperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"btcPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SharePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_share\",\"type\":\"address\"}],\"name\":\"ShareUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"VaultUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"btcPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkBaseTokenList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestBTCPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setChainlinkBTCOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_share\",\"type\":\"address\"}],\"name\":\"setShareToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"shareTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_baseTokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_price\",\"type\":\"uint256[]\"}],\"name\":\"updateSharePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AlgoVaultOracle", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ead285c71cadfb4e831dbbee1774758905c8e2be00000000000000000000000047cd575e7b6df0bcab7d1eabe0f11e2748603fa0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}