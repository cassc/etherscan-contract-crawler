{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\ncontract Decentraplace is ReentrancyGuard{\r\n\r\naddress private owner;\r\n    uint256 public fee =100000000000000;\r\n    uint256 public accumulatedFees;\r\n    uint256 public painterCount = 0;\r\n    uint256 public currentCanvasSize = 2;\r\n    uint256 public pixelAmount = 1;\r\n    uint256 public totalCount = 0;\r\nmapping(uint256 => mapping(uint256 => uint256)) public pixelColors;\r\nmapping(uint256 => mapping(uint256 => address)) public lastPixelChanged;\r\n     mapping(address => uint256) public totalPixels;\r\n    event PixelPainted(address indexed painter, uint256 x, uint256 y, uint256 color);\r\nevent AmountPixel(address indexed sender, uint256 PixelAmount);\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function paintPixel(uint256 x, uint256 y, uint256 color) external payable nonReentrant{\r\n            require(msg.value == fee, \"Incorrect payment amount\");\r\n         require(x <= currentCanvasSize,\"the out of bounds is not paintable\");\r\n        require(y <= currentCanvasSize,\"the out of bounds is not paintable\");\r\n        require(x >= 1,\"the out of bounds is not paintable\");\r\n        require(y >= 1,\"the out of bounds is not paintable\");\r\n        // Increment the painter count\r\n        painterCount++;\r\n        totalCount++;\r\n        totalPixels[msg.sender]++;\r\n        lastPixelChanged[x][y] = msg.sender;\r\n        pixelColors[x][y] = color;\r\n        // Paint the pixel\r\n        emit PixelPainted(msg.sender, x, y, color);\r\n        emit AmountPixel(msg.sender, pixelAmount);\r\n        // Accumulate fees\r\n        accumulatedFees += msg.value;\r\n        \r\n        // Check if the painter count is a power of 2\r\n        if (painterCount == currentCanvasSize * currentCanvasSize) {\r\n            // If it is, distribute 90% of accumulated fees to the painter\r\n            uint256 reward = (address(this).balance * 9) / 10;\r\n               (bool successReward, ) = payable(msg.sender).call{value: reward}(\"\");\r\n        require(successReward, \"Transfer of Growth-Reward failed\");\r\n             (bool successTeam, ) = payable(owner).call{value: address(this).balance}(\"\");\r\n        require(successTeam, \"Tranfer of Team Reward failed\");\r\n             currentCanvasSize ++;\r\n             accumulatedFees = 0;\r\n        }\r\n        \r\n    }\r\n\r\nreceive() external payable {\r\n revert(\"This contract does not accept Ether directly. Use paintPixel function.\");\r\n}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PixelAmount\",\"type\":\"uint256\"}],\"name\":\"AmountPixel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"painter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"color\",\"type\":\"uint256\"}],\"name\":\"PixelPainted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accumulatedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCanvasSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastPixelChanged\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color\",\"type\":\"uint256\"}],\"name\":\"paintPixel\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"painterCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pixelAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pixelColors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPixels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Decentraplace", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2cc7d7ec5da3f59f6b4a84b67842c0d8c8e47e8754a3307d27fd542d7766b288"}