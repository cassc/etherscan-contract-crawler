{"SourceCode": "// Sources flattened with hardhat v2.6.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/GSN/Context.sol@v3.3.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.3.0\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.3.0\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v3.3.0\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.3.0\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/ReentrancyGuard.sol@v3.3.0\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/SafeCast.sol@v3.3.0\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return int128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return int64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return int32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return int16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return int8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SignedSafeMath.sol@v3.3.0\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @title SignedSafeMath\r\n * @dev Signed math operations with safety checks that revert on error.\r\n */\r\nlibrary SignedSafeMath {\r\n    int256 constant private _INT256_MIN = -2**255;\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two signed integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"SignedSafeMath: division by zero\");\r\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/lib/AddressArrayUtils.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @title AddressArrayUtils\r\n * @author Cook Finance\r\n *\r\n * Utility functions to handle Address Arrays\r\n */\r\nlibrary AddressArrayUtils {\r\n\r\n    /**\r\n     * Finds the index of the first occurrence of the given element.\r\n     * @param A The input array to search\r\n     * @param a The value to find\r\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\r\n     */\r\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\r\n        uint256 length = A.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (A[i] == a) {\r\n                return (i, true);\r\n            }\r\n        }\r\n        return (uint256(-1), false);\r\n    }\r\n\r\n    /**\r\n    * Returns true if the value is present in the list. Uses indexOf internally.\r\n    * @param A The input array to search\r\n    * @param a The value to find\r\n    * @return Returns isIn for the first occurrence starting from index 0\r\n    */\r\n    function contains(address[] memory A, address a) internal pure returns (bool) {\r\n        (, bool isIn) = indexOf(A, a);\r\n        return isIn;\r\n    }\r\n\r\n    /**\r\n    * Returns true if there are 2 elements that are the same in an array\r\n    * @param A The input array to search\r\n    * @return Returns boolean for the first occurrence of a duplicate\r\n    */\r\n    function hasDuplicate(address[] memory A) internal pure returns(bool) {\r\n        require(A.length > 0, \"A is empty\");\r\n\r\n        for (uint256 i = 0; i < A.length - 1; i++) {\r\n            address current = A[i];\r\n            for (uint256 j = i + 1; j < A.length; j++) {\r\n                if (current == A[j]) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param A The input array to search\r\n     * @param a The address to remove     \r\n     * @return Returns the array with the object removed.\r\n     */\r\n    function remove(address[] memory A, address a)\r\n        internal\r\n        pure\r\n        returns (address[] memory)\r\n    {\r\n        (uint256 index, bool isIn) = indexOf(A, a);\r\n        if (!isIn) {\r\n            revert(\"Address not in array.\");\r\n        } else {\r\n            (address[] memory _A,) = pop(A, index);\r\n            return _A;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param A The input array to search\r\n     * @param a The address to remove\r\n     */\r\n    function removeStorage(address[] storage A, address a)\r\n        internal\r\n    {\r\n        (uint256 index, bool isIn) = indexOf(A, a);\r\n        if (!isIn) {\r\n            revert(\"Address not in array.\");\r\n        } else {\r\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\r\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\r\n            A.pop();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Removes specified index from array\r\n    * @param A The input array to search\r\n    * @param index The index to remove\r\n    * @return Returns the new array and the removed entry\r\n    */\r\n    function pop(address[] memory A, uint256 index)\r\n        internal\r\n        pure\r\n        returns (address[] memory, address)\r\n    {\r\n        uint256 length = A.length;\r\n        require(index < A.length, \"Index must be < A length\");\r\n        address[] memory newAddresses = new address[](length - 1);\r\n        for (uint256 i = 0; i < index; i++) {\r\n            newAddresses[i] = A[i];\r\n        }\r\n        for (uint256 j = index + 1; j < length; j++) {\r\n            newAddresses[j - 1] = A[j];\r\n        }\r\n        return (newAddresses, A[index]);\r\n    }\r\n\r\n    /**\r\n     * Returns the combination of the two arrays\r\n     * @param A The first array\r\n     * @param B The second array\r\n     * @return Returns A extended by B\r\n     */\r\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\r\n        uint256 aLength = A.length;\r\n        uint256 bLength = B.length;\r\n        address[] memory newAddresses = new address[](aLength + bLength);\r\n        for (uint256 i = 0; i < aLength; i++) {\r\n            newAddresses[i] = A[i];\r\n        }\r\n        for (uint256 j = 0; j < bLength; j++) {\r\n            newAddresses[aLength + j] = B[j];\r\n        }\r\n        return newAddresses;\r\n    }\r\n\r\n    /**\r\n     * Validate that address and uint array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of uint\r\n     */\r\n    function validatePairsWithArray(address[] memory A, uint[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address and bool array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of bool\r\n     */\r\n    function validatePairsWithArray(address[] memory A, bool[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address and string array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of strings\r\n     */\r\n    function validatePairsWithArray(address[] memory A, string[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address array lengths match, and calling address array are not empty\r\n     * and contain no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of addresses\r\n     */\r\n    function validatePairsWithArray(address[] memory A, address[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address and bytes array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of bytes\r\n     */\r\n    function validatePairsWithArray(address[] memory A, bytes[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate address array is not empty and contains no duplicate elements.\r\n     *\r\n     * @param A          Array of addresses\r\n     */\r\n    function _validateLengthAndUniqueness(address[] memory A) internal pure {\r\n        require(A.length > 0, \"Array length must be > 0\");\r\n        require(!hasDuplicate(A), \"Cannot duplicate addresses\");\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IController.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\npragma solidity 0.6.10;\r\n\r\ninterface IController {\r\n    function addCK(address _ckToken) external;\r\n    function feeRecipient() external view returns(address);\r\n    function getModuleFee(address _module, uint256 _feeType) external view returns(uint256);\r\n    function isModule(address _module) external view returns(bool);\r\n    function isCK(address _ckToken) external view returns(bool);\r\n    function isSystemContract(address _contractAddress) external view returns (bool);\r\n    function resourceId(uint256 _id) external view returns(address);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ICKToken.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\npragma solidity 0.6.10;\r\npragma experimental \"ABIEncoderV2\";\r\n\r\n/**\r\n * @title ICKToken\r\n * @author Cook Finance\r\n *\r\n * Interface for operating with CKTokens.\r\n */\r\ninterface ICKToken is IERC20 {\r\n\r\n    /* ============ Enums ============ */\r\n\r\n    enum ModuleState {\r\n        NONE,\r\n        PENDING,\r\n        INITIALIZED\r\n    }\r\n\r\n    /* ============ Structs ============ */\r\n    /**\r\n     * The base definition of a CKToken Position\r\n     *\r\n     * @param component           Address of token in the Position\r\n     * @param module              If not in default state, the address of associated module\r\n     * @param unit                Each unit is the # of components per 10^18 of a CKToken\r\n     * @param positionState       Position ENUM. Default is 0; External is 1\r\n     * @param data                Arbitrary data\r\n     */\r\n    struct Position {\r\n        address component;\r\n        address module;\r\n        int256 unit;\r\n        uint8 positionState;\r\n        bytes data;\r\n    }\r\n\r\n    /**\r\n     * A struct that stores a component's cash position details and external positions\r\n     * This data structure allows O(1) access to a component's cash position units and \r\n     * virtual units.\r\n     *\r\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\r\n     *                                  updating all units at once via the position multiplier. Virtual units are achieved\r\n     *                                  by dividing a \"real\" value by the \"positionMultiplier\"\r\n     * @param componentIndex            \r\n     * @param externalPositionModules   List of external modules attached to each external position. Each module\r\n     *                                  maps to an external position\r\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\r\n     */\r\n    struct ComponentPosition {\r\n      int256 virtualUnit;\r\n      address[] externalPositionModules;\r\n      mapping(address => ExternalPosition) externalPositions;\r\n    }\r\n\r\n    /**\r\n     * A struct that stores a component's external position details including virtual unit and any\r\n     * auxiliary data.\r\n     *\r\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\r\n     * @param data              Arbitrary data\r\n     */\r\n    struct ExternalPosition {\r\n      int256 virtualUnit;\r\n      bytes data;\r\n    }\r\n\r\n\r\n    /* ============ Functions ============ */\r\n    \r\n    function addComponent(address _component) external;\r\n    function removeComponent(address _component) external;\r\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\r\n    function addExternalPositionModule(address _component, address _positionModule) external;\r\n    function removeExternalPositionModule(address _component, address _positionModule) external;\r\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\r\n    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\r\n\r\n    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\r\n\r\n    function editPositionMultiplier(int256 _newMultiplier) external;\r\n\r\n    function mint(address _account, uint256 _quantity) external;\r\n    function burn(address _account, uint256 _quantity) external;\r\n\r\n    function lock() external;\r\n    function unlock() external;\r\n\r\n    function addModule(address _module) external;\r\n    function removeModule(address _module) external;\r\n    function initializeModule() external;\r\n\r\n    function setManager(address _manager) external;\r\n\r\n    function manager() external view returns (address);\r\n    function moduleStates(address _module) external view returns (ModuleState);\r\n    function getModules() external view returns (address[] memory);\r\n    \r\n    function getDefaultPositionRealUnit(address _component) external view returns(int256);\r\n    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\r\n    function getComponents() external view returns(address[] memory);\r\n    function getExternalPositionModules(address _component) external view returns(address[] memory);\r\n    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\r\n    function isExternalPositionModule(address _component, address _module) external view returns(bool);\r\n    function isComponent(address _component) external view returns(bool);\r\n    \r\n    function positionMultiplier() external view returns (int256);\r\n    function getPositions() external view returns (Position[] memory);\r\n    function getTotalComponentRealUnits(address _component) external view returns(int256);\r\n\r\n    function isInitializedModule(address _module) external view returns(bool);\r\n    function isPendingModule(address _module) external view returns(bool);\r\n    function isLocked() external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IManagerIssuanceHook.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\npragma solidity 0.6.10;\r\n\r\ninterface IManagerIssuanceHook {\r\n    function invokePreIssueHook(ICKToken _ckToken, uint256 _issueQuantity, address _sender, address _to) external;\r\n    function invokePreRedeemHook(ICKToken _ckToken, uint256 _redeemQuantity, address _sender, address _to) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IModuleIssuanceHook.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * CHANGELOG:\r\n *      - Added a module level issue hook that can be used to set state ahead of component level\r\n *        issue hooks\r\n */\r\ninterface IModuleIssuanceHook {\r\n\r\n    function moduleIssueHook(ICKToken _ckToken, uint256 _ckTokenQuantity) external;\r\n    function moduleRedeemHook(ICKToken _ckToken, uint256 _ckTokenQuantity) external;\r\n    \r\n    function componentIssueHook(\r\n        ICKToken _ckToken,\r\n        uint256 _ckTokenQuantity,\r\n        IERC20 _component,\r\n        bool _isEquity\r\n    ) external;\r\n\r\n    function componentRedeemHook(\r\n        ICKToken _ckToken,\r\n        uint256 _ckTokenQuantity,\r\n        IERC20 _component,\r\n        bool _isEquity\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/protocol/lib/Invoke.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n/**\r\n * @title Invoke\r\n * @author Cook Finance\r\n *\r\n * A collection of common utility functions for interacting with the CKToken's invoke function\r\n */\r\nlibrary Invoke {\r\n    using SafeMath for uint256;\r\n\r\n    /* ============ Internal ============ */\r\n\r\n    /**\r\n     * Instructs the CKToken to set approvals of the ERC20 token to a spender.\r\n     *\r\n     * @param _ckToken        CKToken instance to invoke\r\n     * @param _token           ERC20 token to approve\r\n     * @param _spender         The account allowed to spend the CKToken's balance\r\n     * @param _quantity        The quantity of allowance to allow\r\n     */\r\n    function invokeApprove(\r\n        ICKToken _ckToken,\r\n        address _token,\r\n        address _spender,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n    {\r\n        bytes memory callData = abi.encodeWithSignature(\"approve(address,uint256)\", _spender, _quantity);\r\n        _ckToken.invoke(_token, 0, callData);\r\n    }\r\n\r\n    /**\r\n     * Instructs the CKToken to transfer the ERC20 token to a recipient.\r\n     *\r\n     * @param _ckToken        CKToken instance to invoke\r\n     * @param _token           ERC20 token to transfer\r\n     * @param _to              The recipient account\r\n     * @param _quantity        The quantity to transfer\r\n     */\r\n    function invokeTransfer(\r\n        ICKToken _ckToken,\r\n        address _token,\r\n        address _to,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n    {\r\n        if (_quantity > 0) {\r\n            bytes memory callData = abi.encodeWithSignature(\"transfer(address,uint256)\", _to, _quantity);\r\n            _ckToken.invoke(_token, 0, callData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instructs the CKToken to transfer the ERC20 token to a recipient.\r\n     * The new CKToken balance must equal the existing balance less the quantity transferred\r\n     *\r\n     * @param _ckToken        CKToken instance to invoke\r\n     * @param _token           ERC20 token to transfer\r\n     * @param _to              The recipient account\r\n     * @param _quantity        The quantity to transfer\r\n     */\r\n    function strictInvokeTransfer(\r\n        ICKToken _ckToken,\r\n        address _token,\r\n        address _to,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n    {\r\n        if (_quantity > 0) {\r\n            // Retrieve current balance of token for the CKToken\r\n            uint256 existingBalance = IERC20(_token).balanceOf(address(_ckToken));\r\n\r\n            Invoke.invokeTransfer(_ckToken, _token, _to, _quantity);\r\n\r\n            // Get new balance of transferred token for CKToken\r\n            uint256 newBalance = IERC20(_token).balanceOf(address(_ckToken));\r\n\r\n            // Verify only the transfer quantity is subtracted\r\n            require(\r\n                newBalance == existingBalance.sub(_quantity),\r\n                \"Invalid post transfer balance\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instructs the CKToken to unwrap the passed quantity of WETH\r\n     *\r\n     * @param _ckToken        CKToken instance to invoke\r\n     * @param _weth            WETH address\r\n     * @param _quantity        The quantity to unwrap\r\n     */\r\n    function invokeUnwrapWETH(ICKToken _ckToken, address _weth, uint256 _quantity) internal {\r\n        bytes memory callData = abi.encodeWithSignature(\"withdraw(uint256)\", _quantity);\r\n        _ckToken.invoke(_weth, 0, callData);\r\n    }\r\n\r\n    /**\r\n     * Instructs the CKToken to wrap the passed quantity of ETH\r\n     *\r\n     * @param _ckToken        CKToken instance to invoke\r\n     * @param _weth            WETH address\r\n     * @param _quantity        The quantity to unwrap\r\n     */\r\n    function invokeWrapWETH(ICKToken _ckToken, address _weth, uint256 _quantity) internal {\r\n        bytes memory callData = abi.encodeWithSignature(\"deposit()\");\r\n        _ckToken.invoke(_weth, _quantity, callData);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/external/IWETH.sol\r\n\r\n/*\r\n    Copyright 2018 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @title IWETH\r\n * @author Cook Finance\r\n *\r\n * Interface for Wrapped Ether. This interface allows for interaction for wrapped ether's deposit and withdrawal\r\n * functionality.\r\n */\r\ninterface IWETH is IERC20{\r\n    function deposit()\r\n        external\r\n        payable;\r\n\r\n    function withdraw(\r\n        uint256 wad\r\n    )\r\n        external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IWrapAdapter.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\npragma solidity 0.6.10;\r\n\r\n\r\n/**\r\n * @title IWrapAdapter\r\n * @author Cook Finance\r\n *\r\n */\r\ninterface IWrapAdapter {\r\n\r\n    function ETH_TOKEN_ADDRESS() external view returns (address);\r\n\r\n    function getWrapCallData(\r\n        address _underlyingToken,\r\n        address _wrappedToken,\r\n        uint256 _underlyingUnits\r\n    ) external view returns (address _subject, uint256 _value, bytes memory _calldata);\r\n\r\n    function getUnwrapCallData(\r\n        address _underlyingToken,\r\n        address _wrappedToken,\r\n        uint256 _wrappedTokenUnits\r\n    ) external view returns (address _subject, uint256 _value, bytes memory _calldata);\r\n\r\n    function getSpenderAddress(address _underlyingToken, address _wrappedToken) external view returns(address);\r\n\r\n    function getWrapSpenderAddress(address _underlyingToken, address _wrappedToken) external view returns(address);\r\n\r\n    function getUnwrapSpenderAddress(address _underlyingToken, address _wrappedToken) external view returns(address);\r\n\r\n    function getDepositUnderlyingTokenAmount(address _underlyingToken, address _wrappedToken, uint256 _wrappedTokenAmount) external view returns(uint256);\r\n\r\n    function getWithdrawUnderlyingTokenAmount(address _underlyingToken, address _wrappedToken, uint256 _wrappedTokenAmount) external view returns(uint256);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v3.3.0\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol@v3.3.0\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/lib/ExplicitERC20.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n\r\n/**\r\n * @title ExplicitERC20\r\n * @author Cook Finance\r\n *\r\n * Utility functions for ERC20 transfers that require the explicit amount to be transferred.\r\n */\r\nlibrary ExplicitERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * When given allowance, transfers a token from the \"_from\" to the \"_to\" of quantity \"_quantity\".\r\n     * Ensures that the recipient has received the correct quantity (ie no fees taken on transfer)\r\n     *\r\n     * @param _token           ERC20 token to approve\r\n     * @param _from            The account to transfer tokens from\r\n     * @param _to              The account to transfer tokens to\r\n     * @param _quantity        The quantity to transfer\r\n     */\r\n    function transferFrom(\r\n        IERC20 _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n    {\r\n        // Call specified ERC20 contract to transfer tokens (via proxy).\r\n        if (_quantity > 0) {\r\n            uint256 existingBalance = _token.balanceOf(_to);\r\n\r\n            SafeERC20.safeTransferFrom(\r\n                _token,\r\n                _from,\r\n                _to,\r\n                _quantity\r\n            );\r\n\r\n            uint256 newBalance = _token.balanceOf(_to);\r\n\r\n            // Verify transfer quantity is reflected in balance\r\n            require(\r\n                newBalance == existingBalance.add(_quantity),\r\n                \"Invalid post transfer balance\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IModule.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\npragma solidity 0.6.10;\r\n\r\n\r\n/**\r\n * @title IModule\r\n * @author Cook Finance\r\n *\r\n * Interface for interacting with Modules.\r\n */\r\ninterface IModule {\r\n    /**\r\n     * Called by a CKToken to notify that this module was removed from the CK token. Any logic can be included\r\n     * in case checks need to be made or state needs to be cleared.\r\n     */\r\n    function removeModule() external;\r\n}\r\n\r\n\r\n// File contracts/lib/PreciseUnitMath.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n/**\r\n * @title PreciseUnitMath\r\n * @author Cook Finance\r\n *\r\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\r\n * dYdX's BaseMath library.\r\n *\r\n * CHANGELOG:\r\n * - 9/21/20: Added safePower function\r\n */\r\nlibrary PreciseUnitMath {\r\n    using SafeMath for uint256;\r\n    using SignedSafeMath for int256;\r\n\r\n    // The number One in precise units.\r\n    uint256 constant internal PRECISE_UNIT = 10 ** 18;\r\n    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\r\n\r\n    // Max unsigned integer value\r\n    uint256 constant internal MAX_UINT_256 = type(uint256).max;\r\n    // Max and min signed integer value\r\n    int256 constant internal MAX_INT_256 = type(int256).max;\r\n    int256 constant internal MIN_INT_256 = type(int256).min;\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function preciseUnit() internal pure returns (uint256) {\r\n        return PRECISE_UNIT;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function preciseUnitInt() internal pure returns (int256) {\r\n        return PRECISE_UNIT_INT;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function maxUint256() internal pure returns (uint256) {\r\n        return MAX_UINT_256;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function maxInt256() internal pure returns (int256) {\r\n        return MAX_INT_256;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function minInt256() internal pure returns (int256) {\r\n        return MIN_INT_256;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\r\n     * of a number with 18 decimals precision.\r\n     */\r\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a.mul(b).div(PRECISE_UNIT);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\r\n     * significand of a number with 18 decimals precision.\r\n     */\r\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\r\n        return a.mul(b).div(PRECISE_UNIT_INT);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\r\n     * of a number with 18 decimals precision.\r\n     */\r\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded down).\r\n     */\r\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a.mul(PRECISE_UNIT).div(b);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded towards 0).\r\n     */\r\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\r\n        return a.mul(PRECISE_UNIT_INT).div(b);\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded up or away from 0).\r\n     */\r\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"Cant divide by 0\");\r\n\r\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\r\n     */\r\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"Cant divide by 0\");\r\n        require(a != MIN_INT_256 || b != -1, \"Invalid input\");\r\n\r\n        int256 result = a.div(b);\r\n        if (a ^ b < 0 && a % b != 0) {\r\n            result -= 1;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\r\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\r\n     */\r\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\r\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b where rounding is towards the lesser number.\r\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\r\n     */\r\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\r\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\r\n    }\r\n\r\n    /**\r\n    * @dev Performs the power on a specified value, reverts on overflow.\r\n    */\r\n    function safePower(\r\n        uint256 a,\r\n        uint256 pow\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(a > 0, \"Value must be positive\");\r\n\r\n        uint256 result = 1;\r\n        for (uint256 i = 0; i < pow; i++){\r\n            uint256 previousResult = result;\r\n\r\n            // Using safemath multiplication prevents overflows\r\n            result = previousResult.mul(a);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if a =~ b within range, false otherwise.\r\n     */\r\n    function approximatelyEquals(uint256 a, uint256 b, uint256 range) internal pure returns (bool) {\r\n        return a <= b.add(range) && a >= b.sub(range);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/protocol/lib/Position.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n/**\r\n * @title Position\r\n * @author Cook Finance\r\n *\r\n * Collection of helper functions for handling and updating CKToken Positions\r\n *\r\n * CHANGELOG:\r\n *  - Updated editExternalPosition to work when no external position is associated with module\r\n */\r\nlibrary Position {\r\n    using SafeCast for uint256;\r\n    using SafeMath for uint256;\r\n    using SafeCast for int256;\r\n    using SignedSafeMath for int256;\r\n    using PreciseUnitMath for uint256;\r\n\r\n    /* ============ Helper ============ */\r\n\r\n    /**\r\n     * Returns whether the CKToken has a default position for a given component (if the real unit is > 0)\r\n     */\r\n    function hasDefaultPosition(ICKToken _ckToken, address _component) internal view returns(bool) {\r\n        return _ckToken.getDefaultPositionRealUnit(_component) > 0;\r\n    }\r\n\r\n    /**\r\n     * Returns whether the CKToken has an external position for a given component (if # of position modules is > 0)\r\n     */\r\n    function hasExternalPosition(ICKToken _ckToken, address _component) internal view returns(bool) {\r\n        return _ckToken.getExternalPositionModules(_component).length > 0;\r\n    }\r\n    \r\n    /**\r\n     * Returns whether the CKToken component default position real unit is greater than or equal to units passed in.\r\n     */\r\n    function hasSufficientDefaultUnits(ICKToken _ckToken, address _component, uint256 _unit) internal view returns(bool) {\r\n        return _ckToken.getDefaultPositionRealUnit(_component) >= _unit.toInt256();\r\n    }\r\n\r\n    /**\r\n     * Returns whether the CKToken component external position is greater than or equal to the real units passed in.\r\n     */\r\n    function hasSufficientExternalUnits(\r\n        ICKToken _ckToken,\r\n        address _component,\r\n        address _positionModule,\r\n        uint256 _unit\r\n    )\r\n        internal\r\n        view\r\n        returns(bool)\r\n    {\r\n       return _ckToken.getExternalPositionRealUnit(_component, _positionModule) >= _unit.toInt256();    \r\n    }\r\n\r\n    /**\r\n     * If the position does not exist, create a new Position and add to the CKToken. If it already exists,\r\n     * then set the position units. If the new units is 0, remove the position. Handles adding/removing of \r\n     * components where needed (in light of potential external positions).\r\n     *\r\n     * @param _ckToken           Address of CKToken being modified\r\n     * @param _component          Address of the component\r\n     * @param _newUnit            Quantity of Position units - must be >= 0\r\n     */\r\n    function editDefaultPosition(ICKToken _ckToken, address _component, uint256 _newUnit) internal {\r\n        bool isPositionFound = hasDefaultPosition(_ckToken, _component);\r\n        if (!isPositionFound && _newUnit > 0) {\r\n            // If there is no Default Position and no External Modules, then component does not exist\r\n            if (!hasExternalPosition(_ckToken, _component)) {\r\n                _ckToken.addComponent(_component);\r\n            }\r\n        } else if (isPositionFound && _newUnit == 0) {\r\n            // If there is a Default Position and no external positions, remove the component\r\n            if (!hasExternalPosition(_ckToken, _component)) {\r\n                _ckToken.removeComponent(_component);\r\n            }\r\n        }\r\n\r\n        _ckToken.editDefaultPositionUnit(_component, _newUnit.toInt256());\r\n    }\r\n\r\n    /**\r\n     * Update an external position and remove and external positions or components if necessary. The logic flows as follows:\r\n     * 1) If component is not already added then add component and external position. \r\n     * 2) If component is added but no existing external position using the passed module exists then add the external position.\r\n     * 3) If the existing position is being added to then just update the unit and data\r\n     * 4) If the position is being closed and no other external positions or default positions are associated with the component\r\n     *    then untrack the component and remove external position.\r\n     * 5) If the position is being closed and other existing positions still exist for the component then just remove the\r\n     *    external position.\r\n     *\r\n     * @param _ckToken         CKToken being updated\r\n     * @param _component        Component position being updated\r\n     * @param _module           Module external position is associated with\r\n     * @param _newUnit          Position units of new external position\r\n     * @param _data             Arbitrary data associated with the position\r\n     */\r\n    function editExternalPosition(\r\n        ICKToken _ckToken,\r\n        address _component,\r\n        address _module,\r\n        int256 _newUnit,\r\n        bytes memory _data\r\n    )\r\n        internal\r\n    {\r\n        if (_newUnit != 0) {\r\n            if (!_ckToken.isComponent(_component)) {\r\n                _ckToken.addComponent(_component);\r\n                _ckToken.addExternalPositionModule(_component, _module);\r\n            } else if (!_ckToken.isExternalPositionModule(_component, _module)) {\r\n                _ckToken.addExternalPositionModule(_component, _module);\r\n            }\r\n            _ckToken.editExternalPositionUnit(_component, _module, _newUnit);\r\n            _ckToken.editExternalPositionData(_component, _module, _data);\r\n        } else {\r\n            require(_data.length == 0, \"Passed data must be null\");\r\n            // If no default or external position remaining then remove component from components array\r\n            if (_ckToken.getExternalPositionRealUnit(_component, _module) != 0) {\r\n                address[] memory positionModules = _ckToken.getExternalPositionModules(_component);\r\n                if (_ckToken.getDefaultPositionRealUnit(_component) == 0 && positionModules.length == 1) {\r\n                    require(positionModules[0] == _module, \"External positions must be 0 to remove component\");\r\n                    _ckToken.removeComponent(_component);\r\n                }\r\n                _ckToken.removeExternalPositionModule(_component, _module);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get total notional amount of Default position\r\n     *\r\n     * @param _ckTokenSupply     Supply of CKToken in precise units (10^18)\r\n     * @param _positionUnit       Quantity of Position units\r\n     *\r\n     * @return                    Total notional amount of units\r\n     */\r\n    function getDefaultTotalNotional(uint256 _ckTokenSupply, uint256 _positionUnit) internal pure returns (uint256) {\r\n        return _ckTokenSupply.preciseMul(_positionUnit);\r\n    }\r\n\r\n    /**\r\n     * Get position unit from total notional amount\r\n     *\r\n     * @param _ckTokenSupply     Supply of CKToken in precise units (10^18)\r\n     * @param _totalNotional      Total notional amount of component prior to\r\n     * @return                    Default position unit\r\n     */\r\n    function getDefaultPositionUnit(uint256 _ckTokenSupply, uint256 _totalNotional) internal pure returns (uint256) {\r\n        return _totalNotional.preciseDiv(_ckTokenSupply);\r\n    }\r\n\r\n    /**\r\n     * Get the total tracked balance - total supply * position unit\r\n     *\r\n     * @param _ckToken           Address of the CKToken\r\n     * @param _component          Address of the component\r\n     * @return                    Notional tracked balance\r\n     */\r\n    function getDefaultTrackedBalance(ICKToken _ckToken, address _component) internal view returns(uint256) {\r\n        int256 positionUnit = _ckToken.getDefaultPositionRealUnit(_component); \r\n        return _ckToken.totalSupply().preciseMul(positionUnit.toUint256());\r\n    }\r\n\r\n    /**\r\n     * Calculates the new default position unit and performs the edit with the new unit\r\n     *\r\n     * @param _ckToken                 Address of the CKToken\r\n     * @param _component                Address of the component\r\n     * @param _ckTotalSupply           Current CKToken supply\r\n     * @param _componentPreviousBalance Pre-action component balance\r\n     * @return                          Current component balance\r\n     * @return                          Previous position unit\r\n     * @return                          New position unit\r\n     */\r\n    function calculateAndEditDefaultPosition(\r\n        ICKToken _ckToken,\r\n        address _component,\r\n        uint256 _ckTotalSupply,\r\n        uint256 _componentPreviousBalance\r\n    )\r\n        internal\r\n        returns(uint256, uint256, uint256)\r\n    {\r\n        uint256 currentBalance = IERC20(_component).balanceOf(address(_ckToken));\r\n        uint256 positionUnit = _ckToken.getDefaultPositionRealUnit(_component).toUint256();\r\n\r\n        uint256 newTokenUnit;\r\n        if (currentBalance > 0) {\r\n            newTokenUnit = calculateDefaultEditPositionUnit(\r\n                _ckTotalSupply,\r\n                _componentPreviousBalance,\r\n                currentBalance,\r\n                positionUnit\r\n            );\r\n        } else {\r\n            newTokenUnit = 0;\r\n        }\r\n\r\n        editDefaultPosition(_ckToken, _component, newTokenUnit);\r\n\r\n        return (currentBalance, positionUnit, newTokenUnit);\r\n    }\r\n\r\n    /**\r\n     * Calculate the new position unit given total notional values pre and post executing an action that changes CKToken state\r\n     * The intention is to make updates to the units without accidentally picking up airdropped assets as well.\r\n     *\r\n     * @param _ckTokenSupply     Supply of CKToken in precise units (10^18)\r\n     * @param _preTotalNotional   Total notional amount of component prior to executing action\r\n     * @param _postTotalNotional  Total notional amount of component after the executing action\r\n     * @param _prePositionUnit    Position unit of CKToken prior to executing action\r\n     * @return                    New position unit\r\n     */\r\n    function calculateDefaultEditPositionUnit(\r\n        uint256 _ckTokenSupply,\r\n        uint256 _preTotalNotional,\r\n        uint256 _postTotalNotional,\r\n        uint256 _prePositionUnit\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // If pre action total notional amount is greater then subtract post action total notional and calculate new position units\r\n        uint256 airdroppedAmount = _preTotalNotional.sub(_prePositionUnit.preciseMul(_ckTokenSupply));\r\n        return _postTotalNotional.sub(airdroppedAmount).preciseDiv(_ckTokenSupply);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IIntegrationRegistry.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\npragma solidity 0.6.10;\r\n\r\ninterface IIntegrationRegistry {\r\n    function addIntegration(address _module, string memory _id, address _wrapper) external;\r\n    function getIntegrationAdapter(address _module, string memory _id) external view returns(address);\r\n    function getIntegrationAdapterWithHash(address _module, bytes32 _id) external view returns(address);\r\n    function isValidIntegration(address _module, string memory _id) external view returns(bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IPriceOracle.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @title IPriceOracle\r\n * @author Cook Finance\r\n *\r\n * Interface for interacting with PriceOracle\r\n */\r\ninterface IPriceOracle {\r\n\r\n    /* ============ Functions ============ */\r\n\r\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\r\n    function masterQuoteAsset() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ICKValuer.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\npragma solidity 0.6.10;\r\n\r\ninterface ICKValuer {\r\n    function calculateCKTokenValuation(ICKToken _ckToken, address _quoteAsset) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/protocol/lib/ResourceIdentifier.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ResourceIdentifier\r\n * @author Cook Finance\r\n *\r\n * A collection of utility functions to fetch information related to Resource contracts in the system\r\n */\r\nlibrary ResourceIdentifier {\r\n\r\n    // IntegrationRegistry will always be resource ID 0 in the system\r\n    uint256 constant internal INTEGRATION_REGISTRY_RESOURCE_ID = 0;\r\n    // PriceOracle will always be resource ID 1 in the system\r\n    uint256 constant internal PRICE_ORACLE_RESOURCE_ID = 1;\r\n    // CKValuer resource will always be resource ID 2 in the system\r\n    uint256 constant internal CK_VALUER_RESOURCE_ID = 2;\r\n\r\n    /* ============ Internal ============ */\r\n\r\n    /**\r\n     * Gets the instance of integration registry stored on Controller. Note: IntegrationRegistry is stored as index 0 on\r\n     * the Controller\r\n     */\r\n    function getIntegrationRegistry(IController _controller) internal view returns (IIntegrationRegistry) {\r\n        return IIntegrationRegistry(_controller.resourceId(INTEGRATION_REGISTRY_RESOURCE_ID));\r\n    }\r\n\r\n    /**\r\n     * Gets instance of price oracle on Controller. Note: PriceOracle is stored as index 1 on the Controller\r\n     */\r\n    function getPriceOracle(IController _controller) internal view returns (IPriceOracle) {\r\n        return IPriceOracle(_controller.resourceId(PRICE_ORACLE_RESOURCE_ID));\r\n    }\r\n\r\n    /**\r\n     * Gets the instance of CK valuer on Controller. Note: CKValuer is stored as index 2 on the Controller\r\n     */\r\n    function getCKValuer(IController _controller) internal view returns (ICKValuer) {\r\n        return ICKValuer(_controller.resourceId(CK_VALUER_RESOURCE_ID));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/protocol/lib/ModuleBase.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ModuleBase\r\n * @author Cook Finance\r\n *\r\n * Abstract class that houses common Module-related state and functions.\r\n */\r\nabstract contract ModuleBase is IModule {\r\n    using AddressArrayUtils for address[];\r\n    using Invoke for ICKToken;\r\n    using Position for ICKToken;\r\n    using PreciseUnitMath for uint256;\r\n    using ResourceIdentifier for IController;\r\n    using SafeCast for int256;\r\n    using SafeCast for uint256;\r\n    using SafeMath for uint256;\r\n    using SignedSafeMath for int256;\r\n\r\n    /* ============ State Variables ============ */\r\n\r\n    // Address of the controller\r\n    IController public controller;\r\n\r\n    /* ============ Modifiers ============ */\r\n\r\n    modifier onlyManagerAndValidCK(ICKToken _ckToken) { \r\n        _validateOnlyManagerAndValidCK(_ckToken);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCKManager(ICKToken _ckToken, address _caller) {\r\n        _validateOnlyCKManager(_ckToken, _caller);\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidAndInitializedCK(ICKToken _ckToken) {\r\n        _validateOnlyValidAndInitializedCK(_ckToken);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Throws if the sender is not a CKToken's module or module not enabled\r\n     */\r\n    modifier onlyModule(ICKToken _ckToken) {\r\n        _validateOnlyModule(_ckToken);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Utilized during module initializations to check that the module is in pending state\r\n     * and that the CKToken is valid\r\n     */\r\n    modifier onlyValidAndPendingCK(ICKToken _ckToken) {\r\n        _validateOnlyValidAndPendingCK(_ckToken);\r\n        _;\r\n    }\r\n\r\n    /* ============ Constructor ============ */\r\n\r\n    /**\r\n     * Set state variables and map asset pairs to their oracles\r\n     *\r\n     * @param _controller             Address of controller contract\r\n     */\r\n    constructor(IController _controller) public {\r\n        controller = _controller;\r\n    }\r\n\r\n    /* ============ Internal Functions ============ */\r\n\r\n    /**\r\n     * Transfers tokens from an address (that has set allowance on the module).\r\n     *\r\n     * @param  _token          The address of the ERC20 token\r\n     * @param  _from           The address to transfer from\r\n     * @param  _to             The address to transfer to\r\n     * @param  _quantity       The number of tokens to transfer\r\n     */\r\n    function transferFrom(IERC20 _token, address _from, address _to, uint256 _quantity) internal {\r\n        ExplicitERC20.transferFrom(_token, _from, _to, _quantity);\r\n    }\r\n\r\n    /**\r\n     * Gets the integration for the module with the passed in name. Validates that the address is not empty\r\n     */\r\n    function getAndValidateAdapter(string memory _integrationName) internal view returns(address) { \r\n        bytes32 integrationHash = getNameHash(_integrationName);\r\n        return getAndValidateAdapterWithHash(integrationHash);\r\n    }\r\n\r\n    /**\r\n     * Gets the integration for the module with the passed in hash. Validates that the address is not empty\r\n     */\r\n    function getAndValidateAdapterWithHash(bytes32 _integrationHash) internal view returns(address) { \r\n        address adapter = controller.getIntegrationRegistry().getIntegrationAdapterWithHash(\r\n            address(this),\r\n            _integrationHash\r\n        );\r\n\r\n        require(adapter != address(0), \"Must be valid adapter\"); \r\n        return adapter;\r\n    }\r\n\r\n    /**\r\n     * Gets the total fee for this module of the passed in index (fee % * quantity)\r\n     */\r\n    function getModuleFee(uint256 _feeIndex, uint256 _quantity) internal view returns(uint256) {\r\n        uint256 feePercentage = controller.getModuleFee(address(this), _feeIndex);\r\n        return _quantity.preciseMul(feePercentage);\r\n    }\r\n\r\n    /**\r\n     * Pays the _feeQuantity from the _ckToken denominated in _token to the protocol fee recipient\r\n     */\r\n    function payProtocolFeeFromCKToken(ICKToken _ckToken, address _token, uint256 _feeQuantity) internal {\r\n        if (_feeQuantity > 0) {\r\n            _ckToken.strictInvokeTransfer(_token, controller.feeRecipient(), _feeQuantity); \r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the module is in process of initialization on the CKToken\r\n     */\r\n    function isCKPendingInitialization(ICKToken _ckToken) internal view returns(bool) {\r\n        return _ckToken.isPendingModule(address(this));\r\n    }\r\n\r\n    /**\r\n     * Returns true if the address is the CKToken's manager\r\n     */\r\n    function isCKManager(ICKToken _ckToken, address _toCheck) internal view returns(bool) {\r\n        return _ckToken.manager() == _toCheck;\r\n    }\r\n\r\n    /**\r\n     * Returns true if CKToken must be enabled on the controller \r\n     * and module is registered on the CKToken\r\n     */\r\n    function isCKValidAndInitialized(ICKToken _ckToken) internal view returns(bool) {\r\n        return controller.isCK(address(_ckToken)) &&\r\n            _ckToken.isInitializedModule(address(this));\r\n    }\r\n\r\n    /**\r\n     * Hashes the string and returns a bytes32 value\r\n     */\r\n    function getNameHash(string memory _name) internal pure returns(bytes32) {\r\n        return keccak256(bytes(_name));\r\n    }\r\n\r\n    /* ============== Modifier Helpers ===============\r\n     * Internal functions used to reduce bytecode size\r\n     */\r\n\r\n    /**\r\n     * Caller must CKToken manager and CKToken must be valid and initialized\r\n     */\r\n    function _validateOnlyManagerAndValidCK(ICKToken _ckToken) internal view {\r\n       require(isCKManager(_ckToken, msg.sender), \"Must be the CKToken manager\");\r\n       require(isCKValidAndInitialized(_ckToken), \"Must be a valid and initialized CKToken\");\r\n    }\r\n\r\n    /**\r\n     * Caller must CKToken manager\r\n     */\r\n    function _validateOnlyCKManager(ICKToken _ckToken, address _caller) internal view {\r\n        require(isCKManager(_ckToken, _caller), \"Must be the CKToken manager\");\r\n    }\r\n\r\n    /**\r\n     * CKToken must be valid and initialized\r\n     */\r\n    function _validateOnlyValidAndInitializedCK(ICKToken _ckToken) internal view {\r\n        require(isCKValidAndInitialized(_ckToken), \"Must be a valid and initialized CKToken\");\r\n    }\r\n\r\n    /**\r\n     * Caller must be initialized module and module must be enabled on the controller\r\n     */\r\n    function _validateOnlyModule(ICKToken _ckToken) internal view {\r\n        require(\r\n            _ckToken.moduleStates(msg.sender) == ICKToken.ModuleState.INITIALIZED,\r\n            \"Only the module can call\"\r\n        );\r\n\r\n        require(\r\n            controller.isModule(msg.sender),\r\n            \"Module must be enabled on controller\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * CKToken must be in a pending state and module must be in pending state\r\n     */\r\n    function _validateOnlyValidAndPendingCK(ICKToken _ckToken) internal view {\r\n        require(controller.isCK(address(_ckToken)), \"Must be controller-enabled CKToken\");\r\n        require(isCKPendingInitialization(_ckToken), \"Must be pending initialization\");\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IExchangeAdapter.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\npragma solidity 0.6.10;\r\n\r\ninterface IExchangeAdapter {\r\n    function getSpender() external view returns(address);\r\n    function getTradeCalldata(\r\n        address _fromToken,\r\n        address _toToken,\r\n        address _toAddress,\r\n        uint256 _fromQuantity,\r\n        uint256 _minToQuantity,\r\n        bytes memory _data\r\n    )\r\n        external\r\n        view\r\n        returns (address, uint256, bytes memory);\r\n    function getMinAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\r\n    function getMaxAmountsIn(uint256 amountOut, address[] memory path) external view returns (uint256[] memory amounts);\r\n    function generateDataParam(address[] memory path, bool _isSendTokenFixed) external pure returns (bytes memory);\r\n}\r\n\r\n\r\n// File contracts/interfaces/external/IYieldYakStrategyV2.sol\r\npragma solidity 0.6.10;\r\n\r\n\r\n/**\r\n * @title Yield Yak Strategy2 Interface\r\n */\r\ninterface IYieldYakStrategyV2 {\r\n\r\n    // function depositToken() external view returns (IERC20);\r\n    // function rewardToken() external view returns (address);\r\n    // function devAddr() external view returns (address);\r\n\r\n    // function MIN_TOKENS_TO_REINVEST() external view returns (uint);\r\n    // function MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST() external view returns (uint);\r\n    // function DEPOSITS_ENABLED() external view returns (bool);\r\n\r\n    // function REINVEST_REWARD_BIPS() external view returns (uint);\r\n    // function ADMIN_FEE_BIPS() external view returns (uint);\r\n    // function DEV_FEE_BIPS() external view returns (uint);\r\n\r\n    // function BIPS_DIVISOR() external view returns (uint);\r\n    // function MAX_UINT() external view returns (uint);\r\n\r\n    function deposit(uint amount) external;\r\n    function withdraw(uint amount) external; \r\n    function getSharesForDepositTokens(uint amount) external view returns (uint);\r\n    function getDepositTokensForShares(uint amount) external view returns (uint);\r\n}\r\n\r\n\r\n// File contracts/protocol/modules/IssuanceModuleV2.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n/**\r\n * @title IssuanceModule\r\n * @author Cook Finance\r\n *\r\n * The IssuanceModule is a module that enables users to issue and redeem CKTokens that contain default and \r\n * non-debt external Positions. Managers are able to set an external contract hook that is called before an\r\n * issuance is called.\r\n */\r\ncontract IssuanceModuleV2 is Ownable, ModuleBase, ReentrancyGuard {\r\n    using AddressArrayUtils for address[];\r\n    using Invoke for ICKToken;\r\n    using Position for ICKToken;\r\n    using Position for uint256;\r\n    using PreciseUnitMath for uint256;\r\n    using ResourceIdentifier for IController;\r\n    using SafeMath for uint256;\r\n    using SafeCast for int256;\r\n    using SignedSafeMath for int256;\r\n\r\n    /* ============ Struct ============ */\r\n    struct WrapExecutionParams {\r\n        string wrapAdapterName;     // Wrap adapter name\r\n        address underlyingToken;    // Underlying token address of the wrapped token, ex. WETH is the underlying token of the aETH. This will be passed to wrap adapter to get wrap/unwrap call data\r\n    }\r\n\r\n    struct TradeInfo {\r\n        ICKToken ckToken;                               // Instance of CKToken\r\n        IExchangeAdapter exchangeAdapter;               // Instance of exchange adapter contract\r\n        address sendToken;                              // Address of token being sold\r\n        address receiveToken;                           // Address of token being bought\r\n        uint256 totalSendQuantity;                      // Total quantity of sold token\r\n        uint256 totalReceiveQuantity;                   // Total quantity of token to receive back\r\n        uint256 preTradeSendTokenBalance;               // Total initial balance of token being sold\r\n        uint256 preTradeReceiveTokenBalance;            // Total initial balance of token being bought\r\n        bytes data;                                     // Arbitrary data\r\n    }\r\n\r\n    /* ============ Events ============ */\r\n\r\n    event CKTokenIssued(address indexed _ckToken, address _issuer, address _to, address _hookContract, uint256 _ckMintQuantity, uint256 _issuedTokenReturned);\r\n    event CKTokenRedeemed(address indexed _ckToken, address _redeemer, address _to, uint256 _quantity);\r\n    event AssetExchangeExecutionParamUpdated(address indexed _component, string _newExchangeName);\r\n    event AssetWrapExecutionParamUpdated(address indexed _component, string _newWrapAdapterName, address _newUnderlyingToken);\r\n    event ComponentExchanged(\r\n        ICKToken indexed _ckToken,\r\n        address indexed _sendToken,\r\n        address indexed _receiveToken,\r\n        IExchangeAdapter _exchangeAdapter,\r\n        uint256 _totalSendAmount,\r\n        uint256 _totalReceiveAmount\r\n    );\r\n    event ComponentWrapped(\r\n        ICKToken indexed _ckToken,\r\n        address indexed _underlyingToken,\r\n        address indexed _wrappedToken,\r\n        uint256 _underlyingQuantity,\r\n        uint256 _wrappedQuantity,\r\n        string _integrationName\r\n    );\r\n    event ComponentUnwrapped(\r\n        ICKToken indexed _ckToken,\r\n        address indexed _underlyingToken,\r\n        address indexed _wrappedToken,\r\n        uint256 _underlyingQuantity,\r\n        uint256 _wrappedQuantity,\r\n        string _integrationName\r\n    );\r\n\r\n    /* ============ State Variables ============ */\r\n\r\n    // Mapping of CKToken to Issuance hook configurations\r\n    mapping(ICKToken => IManagerIssuanceHook) public managerIssuanceHook;\r\n    // Mapping of asset to exchange execution parameters\r\n    mapping(IERC20 => string) public exchangeInfo;\r\n    // Mapping of asset to wrap execution parameters\r\n    mapping(IERC20 => WrapExecutionParams) public wrapInfo;\r\n    // Wrapped ETH address\r\n    IWETH public immutable weth;\r\n\r\n    /* ============ Constructor ============ */\r\n\r\n    /**\r\n     * Set state controller state variable\r\n     */\r\n    constructor(IController _controller, IWETH _weth) public ModuleBase(_controller) {\r\n        weth = _weth;\r\n    }\r\n\r\n    /* ============ External Functions ============ */\r\n\r\n    /**\r\n     * Issue ckToken with a specified amount of Eth. \r\n     *\r\n     * @param _ckToken              Instance of the CKToken contract\r\n     * @param _minCkTokenRec        The minimum amount of CKToken to receive\r\n     * @param _midTokens            The mid tokens in swap route\r\n     * @param _weightings           Eth distribution for each component\r\n     * @param _to                   Address to mint CKToken to\r\n     * @param _returnDust           If to return left components\r\n     */\r\n    function issueWithEther2 (\r\n        ICKToken _ckToken,\r\n        uint256 _minCkTokenRec,\r\n        address[] memory _midTokens,\r\n        uint256[] memory _weightings,\r\n        address _to,\r\n        bool _returnDust\r\n    )         \r\n        external\r\n        payable\r\n        nonReentrant\r\n        onlyValidAndInitializedCK(_ckToken) \r\n    {\r\n        require(msg.value > 0, \"Issue ether quantity must be > 0\");\r\n        weth.deposit{ value: msg.value }();\r\n        // Transfer the specified weth to ckToken\r\n        transferFrom(\r\n            weth,\r\n            address(this),\r\n            address(_ckToken),\r\n            msg.value\r\n        );\r\n        uint256 issueTokenRemain = _issueWithSingleToken2(_ckToken, address(weth), msg.value, _minCkTokenRec, _midTokens, _weightings, _to, _returnDust);\r\n        // transfer the remaining weth to issuer\r\n        _ckToken.strictInvokeTransfer(\r\n            address(weth),\r\n            msg.sender,\r\n            issueTokenRemain\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Issue ckToken with a specified amount of a single asset with specification\r\n     *\r\n     * @param _ckToken              Instance of the CKToken contract\r\n     * @param _issueToken           token used to issue with\r\n     * @param _issueTokenQuantity   amount of issue tokens\r\n     * @param _minCkTokenRec        The minimum amount of CKToken to receive\r\n     * @param _midTokens            The mid tokens in swap route\r\n     * @param _weightings           Eth distribution for each component\r\n     * @param _to                   Address to mint CKToken to\r\n     * @param _returnDust           If to return left components\r\n     */\r\n    function issueWithSingleToken2 (\r\n        ICKToken _ckToken,\r\n        address _issueToken,\r\n        uint256 _issueTokenQuantity,\r\n        uint256 _minCkTokenRec,\r\n        address[] memory _midTokens,\r\n        uint256[] memory _weightings,  // percentage in 18 decimals and order should follow ckComponents get from a ck token\r\n        address _to,\r\n        bool _returnDust\r\n    )   \r\n        external\r\n        nonReentrant\r\n        onlyValidAndInitializedCK(_ckToken) \r\n    {\r\n        require(_issueTokenQuantity > 0, \"Issue token quantity must be > 0\");\r\n        // Transfer the specified issue token to ckToken\r\n        transferFrom(\r\n            IERC20(_issueToken),\r\n            msg.sender,\r\n            address(_ckToken),\r\n            _issueTokenQuantity\r\n        );        \r\n        \r\n        uint256 issueTokenRemain = _issueWithSingleToken2(_ckToken, _issueToken, _issueTokenQuantity, _minCkTokenRec, _midTokens, _weightings, _to, _returnDust);\r\n        // transfer the remaining weth to issuer\r\n        _ckToken.strictInvokeTransfer(\r\n            address(_issueToken),\r\n            msg.sender,\r\n            issueTokenRemain\r\n        );\r\n        \r\n    }\r\n\r\n    /**\r\n     * Burns a user's CKToken of specified quantity, unwinds external positions, and exchange components\r\n     * to the specified token and return to the specified address. Does not work for debt/negative external positions.\r\n     *\r\n     * @param _ckToken             Instance of the CKToken contract\r\n     * @param _ckTokenQuantity     Quantity of the CKToken to redeem\r\n     * @param _redeemToken         Address of redeem token\r\n     * @param _midTokens           The mid tokens in swap route\r\n     * @param _to                  Address to redeem CKToken to\r\n     * @param _minRedeemTokenToRec Minimum redeem to to receive\r\n     */\r\n    function redeemToSingleToken(\r\n        ICKToken _ckToken,\r\n        uint256 _ckTokenQuantity,\r\n        address _redeemToken,\r\n        address[] memory _midTokens,\r\n        address _to,\r\n        uint256 _minRedeemTokenToRec\r\n    )\r\n        external\r\n        nonReentrant\r\n        onlyValidAndInitializedCK(_ckToken)\r\n    {\r\n        require(_ckTokenQuantity > 0, \"Redeem quantity must be > 0\");\r\n        _ckToken.burn(msg.sender, _ckTokenQuantity);\r\n\r\n        (\r\n            address[] memory components,\r\n            uint256[] memory componentQuantities\r\n        ) = getRequiredComponentIssuanceUnits(_ckToken, _ckTokenQuantity, false);\r\n        uint256 totalRedeemTokenAcquired = 0;\r\n        require(_midTokens.length == components.length, \"_midTokens length mismatch\");\r\n        for (uint256 i = 0; i < components.length; i++) {\r\n            _executeExternalPositionHooks(_ckToken, _ckTokenQuantity, IERC20(components[i]), false);\r\n            uint256 redeemTokenAcquired = _exchangeDefaultPositionsToRedeemToken(_ckToken, _redeemToken, _midTokens[i], components[i], componentQuantities[i]);\r\n            totalRedeemTokenAcquired = totalRedeemTokenAcquired.add(redeemTokenAcquired);\r\n        }\r\n\r\n        require(totalRedeemTokenAcquired >= _minRedeemTokenToRec, \"_minRedeemTokenToRec not met\");\r\n\r\n        _ckToken.strictInvokeTransfer(\r\n            _redeemToken,\r\n            _to,\r\n            totalRedeemTokenAcquired\r\n        );\r\n\r\n        emit CKTokenRedeemed(address(_ckToken), msg.sender, _to, _ckTokenQuantity);\r\n    }\r\n\r\n    /**\r\n     * Initializes this module to the CKToken with issuance-related hooks. Only callable by the CKToken's manager.\r\n     * Hook addresses are optional. Address(0) means that no hook will be called\r\n     *\r\n     * @param _ckToken             Instance of the CKToken to issue\r\n     * @param _preIssueHook         Instance of the Manager Contract with the Pre-Issuance Hook function\r\n     */\r\n    function initialize(\r\n        ICKToken _ckToken,\r\n        IManagerIssuanceHook _preIssueHook\r\n    )\r\n        external\r\n        onlyCKManager(_ckToken, msg.sender)\r\n        onlyValidAndPendingCK(_ckToken)\r\n    {\r\n        managerIssuanceHook[_ckToken] = _preIssueHook;\r\n\r\n        _ckToken.initializeModule();\r\n    }\r\n\r\n    /**\r\n     * Removes this module from the CKToken, via call by the CKToken. Left with empty logic\r\n     * here because there are no check needed to verify removal.\r\n     */\r\n    function removeModule() external override {}\r\n\r\n    /**\r\n     * OWNER ONLY: Set exchange for passed components of the CKToken. Can be called at anytime.\r\n     *\r\n     * @param _components           Array of components\r\n     * @param _exchangeNames        Array of exchange names mapping to correct component\r\n     */\r\n    function setExchanges(\r\n        address[] memory _components,\r\n        string[] memory _exchangeNames\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        _components.validatePairsWithArray(_exchangeNames);\r\n\r\n        for (uint256 i = 0; i < _components.length; i++) {\r\n            require(\r\n                controller.getIntegrationRegistry().isValidIntegration(address(this), _exchangeNames[i]),\r\n                \"Unrecognized exchange name\"\r\n            );\r\n\r\n            exchangeInfo[IERC20(_components[i])] = _exchangeNames[i];\r\n            emit AssetExchangeExecutionParamUpdated(_components[i], _exchangeNames[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * OWNER ONLY: Set wrap adapters for passed components of the CKToken. Can be called at anytime.\r\n     *\r\n     * @param _components           Array of components\r\n     * @param _wrapAdapterNames     Array of wrap adapter names mapping to correct component\r\n     * @param _underlyingTokens     Array of underlying tokens mapping to correct component\r\n     */\r\n    function setWrapAdapters(\r\n        address[] memory _components,\r\n        string[] memory _wrapAdapterNames,\r\n        address[] memory _underlyingTokens\r\n    )\r\n    external\r\n    onlyOwner\r\n    {\r\n        _components.validatePairsWithArray(_wrapAdapterNames);\r\n        _components.validatePairsWithArray(_underlyingTokens);\r\n\r\n        for (uint256 i = 0; i < _components.length; i++) {\r\n            require(\r\n                controller.getIntegrationRegistry().isValidIntegration(address(this), _wrapAdapterNames[i]),\r\n                \"Unrecognized wrap adapter name\"\r\n            );\r\n\r\n            wrapInfo[IERC20(_components[i])].wrapAdapterName = _wrapAdapterNames[i];\r\n            wrapInfo[IERC20(_components[i])].underlyingToken = _underlyingTokens[i];\r\n            emit AssetWrapExecutionParamUpdated(_components[i], _wrapAdapterNames[i], _underlyingTokens[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the addresses and units required to issue/redeem a particular quantity of CKToken.\r\n     *\r\n     * @param _ckToken             Instance of the CKToken to issue\r\n     * @param _quantity             Quantity of CKToken to issue\r\n     * @param _isIssue              Boolean whether the quantity is issuance or redemption\r\n     * @return address[]            List of component addresses\r\n     * @return uint256[]            List of component units required for a given CKToken quantity\r\n     */\r\n    function getRequiredComponentIssuanceUnits(\r\n        ICKToken _ckToken,\r\n        uint256 _quantity,\r\n        bool _isIssue\r\n    )\r\n        public\r\n        view\r\n        returns (address[] memory, uint256[] memory)\r\n    {\r\n        (\r\n            address[] memory components,\r\n            uint256[] memory issuanceUnits\r\n        ) = _getTotalIssuanceUnits(_ckToken);\r\n\r\n        uint256[] memory notionalUnits = new uint256[](components.length);\r\n        for (uint256 i = 0; i < issuanceUnits.length; i++) {\r\n            // Use preciseMulCeil to round up to ensure overcollateration when small issue quantities are provided\r\n            // and preciseMul to round down to ensure overcollateration when small redeem quantities are provided\r\n            notionalUnits[i] = _isIssue ? \r\n                issuanceUnits[i].preciseMulCeil(_quantity) : \r\n                issuanceUnits[i].preciseMul(_quantity);\r\n            require(notionalUnits[i] > 0, \"component amount should not be zero\");\r\n        }\r\n\r\n        return (components, notionalUnits);\r\n    }\r\n\r\n    /* ============ Internal Functions ============ */\r\n\r\n    /**\r\n     * This is a internal implementation for issue ckToken with a specified amount of a single asset with specification. \r\n     *\r\n     * @param _ckToken              Instance of the CKToken contract\r\n     * @param _issueToken           token used to issue with\r\n     * @param _issueTokenQuantity   amount of issue tokens\r\n     * @param _minCkTokenRec        The minimum amount of CKToken to receive\r\n     * @param _midTokens            The mid tokens in swap route\r\n     * @param _weightings           Eth distribution for each component\r\n     * @param _to                   Address to mint CKToken to\r\n     * @param _returnDust           If to return left components\r\n     */\r\n    function _issueWithSingleToken2(   \r\n        ICKToken _ckToken,\r\n        address _issueToken,\r\n        uint256 _issueTokenQuantity,\r\n        uint256 _minCkTokenRec,\r\n        address[] memory _midTokens,\r\n        uint256[] memory _weightings,\r\n        address _to,\r\n        bool _returnDust\r\n    ) \r\n        internal \r\n        returns(uint256)\r\n    {\r\n        address hookContract = _callPreIssueHooks(_ckToken, _minCkTokenRec, msg.sender, _to);\r\n        address[] memory components = _ckToken.getComponents();\r\n        require(components.length == _weightings.length, \"weightings mismatch\");\r\n        require(components.length == _midTokens.length, \"midTokens mismatch\");\r\n        (uint256 maxCkTokenToIssue, uint256 returnedIssueToken) = _issueWithSpec(_ckToken, _issueToken, _issueTokenQuantity, _midTokens, _weightings, _returnDust);\r\n        require(maxCkTokenToIssue >= _minCkTokenRec, \"_minCkTokenRec not met\");\r\n\r\n        _ckToken.mint(_to, maxCkTokenToIssue);\r\n\r\n        emit CKTokenIssued(address(_ckToken), msg.sender, _to, hookContract, maxCkTokenToIssue, returnedIssueToken);        \r\n        \r\n        return returnedIssueToken;\r\n    }\r\n\r\n    function _issueWithSpec(ICKToken _ckToken, address _issueToken, uint256 _issueTokenQuantity, address[] memory _midTokens, uint256[] memory _weightings, bool _returnDust) \r\n        internal \r\n        returns(uint256, uint256)\r\n    {\r\n        uint256 maxCkTokenToIssue = PreciseUnitMath.MAX_UINT_256;\r\n        address[] memory components = _ckToken.getComponents();\r\n        uint256[] memory componentTokenReceiveds = new uint256[](components.length);\r\n\r\n        for (uint256 i = 0; i < components.length; i++) {\r\n            uint256 _issueTokenAmountToUse = _issueTokenQuantity.preciseMul(_weightings[i]).sub(1); // avoid underflow\r\n            uint256 componentRealUnitRequired = (_ckToken.getDefaultPositionRealUnit(components[i])).toUint256();\r\n            uint256 componentReceived = _tradeAndWrapComponents(_ckToken, _issueToken, _issueTokenAmountToUse, _midTokens[i] ,components[i]);\r\n            componentTokenReceiveds[i] = componentReceived;\r\n            // guarantee issue ck token amount.\r\n            uint256 maxIssue = componentReceived.preciseDiv(componentRealUnitRequired);\r\n            if (maxIssue <= maxCkTokenToIssue) {\r\n                maxCkTokenToIssue = maxIssue;\r\n            }\r\n        }   \r\n\r\n        uint256 issueTokenToReturn = _dustToReturn(_ckToken, _issueToken, _midTokens, componentTokenReceiveds, maxCkTokenToIssue, _returnDust);\r\n \r\n        return (maxCkTokenToIssue, issueTokenToReturn);\r\n    }\r\n\r\n    function _tradeAndWrapComponents(ICKToken _ckToken, address _issueToken, uint256 _issueTokenAmountToUse, address _midToken, address _component) internal returns(uint256) {\r\n        uint256 componentTokenReceived;\r\n        if (_issueToken == _component) {\r\n            componentTokenReceived = _issueTokenAmountToUse;     \r\n        } else if (wrapInfo[IERC20(_component)].underlyingToken == address(0)) {\r\n            // For underlying tokens, exchange directly\r\n            (, componentTokenReceived) = _trade(_ckToken, _issueToken, _midToken, _component, _issueTokenAmountToUse, true);\r\n        } else {\r\n            // For wrapped tokens, exchange to underlying tokens first and then wrap it\r\n            WrapExecutionParams memory wrapExecutionParams = wrapInfo[IERC20(_component)];\r\n            IWrapAdapter wrapAdapter = IWrapAdapter(getAndValidateAdapter(wrapExecutionParams.wrapAdapterName));\r\n            uint256 underlyingReceived = 0;\r\n            if (wrapExecutionParams.underlyingToken == wrapAdapter.ETH_TOKEN_ADDRESS()) {\r\n                if (_issueToken != address(weth)) {\r\n                    (, underlyingReceived) = _trade(_ckToken, _issueToken, _midToken, address(weth), _issueTokenAmountToUse, true);\r\n                } else {\r\n                    underlyingReceived = _issueTokenAmountToUse;\r\n                }\r\n                componentTokenReceived = _wrap(_ckToken, wrapExecutionParams.underlyingToken, _component, underlyingReceived, wrapExecutionParams.wrapAdapterName, true);\r\n            } else {\r\n                (, underlyingReceived) = _trade(_ckToken, _issueToken, _midToken, wrapExecutionParams.underlyingToken , _issueTokenAmountToUse, true);\r\n                componentTokenReceived = _wrap(_ckToken, wrapExecutionParams.underlyingToken, _component, underlyingReceived, wrapExecutionParams.wrapAdapterName, false);\r\n            }\r\n        }\r\n\r\n        return componentTokenReceived;\r\n    }\r\n    \r\n    /**\r\n     * Swap remaining component back to issue token.\r\n     */\r\n    function _dustToReturn(ICKToken _ckToken, address _issueToken, address[] memory _midTokens, uint256[] memory componentTokenReceiveds, uint256 maxCkTokenToIssue, bool _returnDust) internal returns(uint256) {\r\n        if (!_returnDust) {\r\n            return 0;\r\n        }\r\n        uint256 issueTokenToReturn = 0;\r\n        address[] memory components = _ckToken.getComponents();\r\n\r\n        for(uint256 i = 0; i < components.length; i++) {\r\n            uint256 requiredComponentUnit = ((_ckToken.getDefaultPositionRealUnit(components[i])).toUint256()).preciseMul(maxCkTokenToIssue);\r\n            uint256 toReturn = componentTokenReceiveds[i].sub(requiredComponentUnit);\r\n            uint256 diffPercentage = toReturn.preciseDiv(requiredComponentUnit); // percentage in 18 decimals\r\n            if (diffPercentage > (PreciseUnitMath.preciseUnit().div(10000))) { // 0.01%\r\n                issueTokenToReturn = issueTokenToReturn.add(_exchangeDefaultPositionsToRedeemToken(_ckToken, _issueToken, _midTokens[i], components[i], toReturn));\r\n            }\r\n        }     \r\n\r\n        return issueTokenToReturn;\r\n    }    \r\n\r\n    /**\r\n     * Retrieves the component addresses and list of total units for components. This will revert if the external unit\r\n     * is ever equal or less than 0 .\r\n     */\r\n    function _getTotalIssuanceUnits(ICKToken _ckToken) internal view returns (address[] memory, uint256[] memory) {\r\n        address[] memory components = _ckToken.getComponents();\r\n        uint256[] memory totalUnits = new uint256[](components.length);\r\n\r\n        for (uint256 i = 0; i < components.length; i++) {\r\n            address component = components[i];\r\n            int256 cumulativeUnits = _ckToken.getDefaultPositionRealUnit(component);\r\n\r\n            address[] memory externalModules = _ckToken.getExternalPositionModules(component);\r\n            if (externalModules.length > 0) {\r\n                for (uint256 j = 0; j < externalModules.length; j++) {\r\n                    int256 externalPositionUnit = _ckToken.getExternalPositionRealUnit(component, externalModules[j]);\r\n\r\n                    require(externalPositionUnit > 0, \"Only positive external unit positions are supported\");\r\n\r\n                    cumulativeUnits = cumulativeUnits.add(externalPositionUnit);\r\n                }\r\n            }\r\n\r\n            totalUnits[i] = cumulativeUnits.toUint256();\r\n        }\r\n\r\n        return (components, totalUnits);        \r\n    }\r\n\r\n    /**\r\n     * If a pre-issue hook has been configured, call the external-protocol contract. Pre-issue hook logic\r\n     * can contain arbitrary logic including validations, external function calls, etc.\r\n     * Note: All modules with external positions must implement ExternalPositionIssueHooks\r\n     */\r\n    function _callPreIssueHooks(\r\n        ICKToken _ckToken,\r\n        uint256 _quantity,\r\n        address _caller,\r\n        address _to\r\n    )\r\n        internal\r\n        returns(address)\r\n    {\r\n        IManagerIssuanceHook preIssueHook = managerIssuanceHook[_ckToken];\r\n        if (address(preIssueHook) != address(0)) {\r\n            preIssueHook.invokePreIssueHook(_ckToken, _quantity, _caller, _to);\r\n            return address(preIssueHook);\r\n        }\r\n\r\n        return address(0);\r\n    }\r\n\r\n    /**\r\n     * For each component's external module positions, calculate the total notional quantity, and \r\n     * call the module's issue hook or redeem hook.\r\n     * Note: It is possible that these hooks can cause the states of other modules to change.\r\n     * It can be problematic if the a hook called an external function that called back into a module, resulting in state inconsistencies.\r\n     */\r\n    function _executeExternalPositionHooks(\r\n        ICKToken _ckToken,\r\n        uint256 _ckTokenQuantity,\r\n        IERC20 _component,\r\n        bool isIssue\r\n    )\r\n        internal\r\n    {\r\n        address[] memory externalPositionModules = _ckToken.getExternalPositionModules(address(_component));\r\n        for (uint256 i = 0; i < externalPositionModules.length; i++) {\r\n            if (isIssue) {\r\n                IModuleIssuanceHook(externalPositionModules[i]).componentIssueHook(_ckToken, _ckTokenQuantity, _component, true);\r\n            } else {\r\n                IModuleIssuanceHook(externalPositionModules[i]).componentRedeemHook(_ckToken, _ckTokenQuantity, _component, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _exchangeDefaultPositionsToRedeemToken(ICKToken _ckToken, address _redeemToken, address _midToken, address _component, uint256 _componentQuantity) internal returns(uint256) {\r\n        uint256 redeemTokenAcquired;\r\n        if (_redeemToken == _component) {\r\n            // continue if redeem token is component token\r\n            redeemTokenAcquired = _componentQuantity;\r\n        } else if (wrapInfo[IERC20(_component)].underlyingToken == address(0)) {\r\n            // For underlying tokens, exchange directly\r\n            \r\n            (, redeemTokenAcquired) = _trade(_ckToken, _component, _midToken, _redeemToken, _componentQuantity, true);\r\n        } else {\r\n            // For wrapped tokens, unwrap it and exchange underlying tokens to redeem tokens\r\n            WrapExecutionParams memory wrapExecutionParams = wrapInfo[IERC20(_component)];\r\n            IWrapAdapter wrapAdapter = IWrapAdapter(getAndValidateAdapter(wrapExecutionParams.wrapAdapterName));\r\n\r\n            (uint256 underlyingReceived, uint256 unwrappedAmount) = \r\n            _unwrap(_ckToken, wrapExecutionParams.underlyingToken, _component, _componentQuantity, wrapExecutionParams.wrapAdapterName, wrapExecutionParams.underlyingToken == wrapAdapter.ETH_TOKEN_ADDRESS());\r\n\r\n            if (wrapExecutionParams.underlyingToken == wrapAdapter.ETH_TOKEN_ADDRESS()) {\r\n                (, redeemTokenAcquired) = _trade(_ckToken, address(weth), _midToken, _redeemToken, underlyingReceived, true);                \r\n            } else {\r\n                (, redeemTokenAcquired) = _trade(_ckToken, wrapExecutionParams.underlyingToken, _midToken, _redeemToken, underlyingReceived, true);                \r\n            }    \r\n        }\r\n        return redeemTokenAcquired;\r\n    }\r\n\r\n    /**\r\n     * Take snapshot of CKToken's balance of underlying and wrapped tokens.\r\n     */\r\n    function _snapshotTargetTokenBalance(\r\n        ICKToken _ckToken,\r\n        address _targetToken\r\n    ) internal view returns(uint256) {\r\n        uint256 targetTokenBalance = IERC20(_targetToken).balanceOf(address(_ckToken));\r\n        return (targetTokenBalance);\r\n    }\r\n\r\n    /**\r\n     * Validate post trade data.\r\n     *\r\n     * @param _tradeInfo                Struct containing trade information used in internal functions\r\n     */\r\n    function _validatePostTrade(TradeInfo memory _tradeInfo) internal view returns (uint256) {\r\n        uint256 exchangedQuantity = IERC20(_tradeInfo.receiveToken)\r\n        .balanceOf(address(_tradeInfo.ckToken))\r\n        .sub(_tradeInfo.preTradeReceiveTokenBalance);\r\n\r\n        require(\r\n            exchangedQuantity >= _tradeInfo.totalReceiveQuantity, \"Slippage too big\"\r\n        );\r\n        return exchangedQuantity;\r\n    }\r\n\r\n    /**\r\n     * Validate pre trade data. Check exchange is valid, token quantity is valid.\r\n     *\r\n     * @param _tradeInfo            Struct containing trade information used in internal functions\r\n     */\r\n    function _validatePreTradeData(TradeInfo memory _tradeInfo) internal view {\r\n        require(_tradeInfo.totalSendQuantity > 0, \"Token to sell must be nonzero\");\r\n        uint256 sendTokenBalance = IERC20(_tradeInfo.sendToken).balanceOf(address(_tradeInfo.ckToken));\r\n        require(\r\n            sendTokenBalance >= _tradeInfo.totalSendQuantity,\r\n            \"total send quantity cant be greater than existing\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Create and return TradeInfo struct\r\n     *\r\n     * @param _ckToken              Instance of the CKToken to trade\r\n     * @param _exchangeAdapter      The exchange adapter in the integrations registry\r\n     * @param _sendToken            Address of the token to be sent to the exchange\r\n     * @param _midToken             Address of the token in route\r\n     * @param _receiveToken         Address of the token that will be received from the exchange\r\n     * @param _exactQuantity        Exact token quantity during trade\r\n     * @param _isSendTokenFixed     Indicate if the send token is fixed\r\n     *\r\n     * return TradeInfo             Struct containing data for trade\r\n     */\r\n    function _createTradeInfo(\r\n        ICKToken _ckToken,\r\n        IExchangeAdapter _exchangeAdapter,\r\n        address _sendToken,\r\n        address _midToken,\r\n        address _receiveToken,\r\n        uint256 _exactQuantity,\r\n        bool _isSendTokenFixed\r\n    )\r\n        internal\r\n        view\r\n        returns (TradeInfo memory)\r\n    {\r\n        uint256 thresholdAmount;\r\n        address[] memory path;\r\n        if (_midToken == address(0) || _midToken == _sendToken || _midToken == _receiveToken) {\r\n            path = new address[](2);\r\n            path[0] = _sendToken;\r\n            path[1] = _receiveToken;\r\n        } else {\r\n            path = new address[](3);\r\n            path[0] = _sendToken;\r\n            path[1] = _midToken;\r\n            path[2] = _receiveToken;\r\n        }\r\n\r\n\r\n        TradeInfo memory tradeInfo;\r\n        tradeInfo.ckToken = _ckToken;\r\n        tradeInfo.exchangeAdapter = _exchangeAdapter;\r\n        tradeInfo.sendToken = _sendToken;\r\n        tradeInfo.receiveToken = _receiveToken;\r\n        tradeInfo.totalSendQuantity =  _exactQuantity;\r\n        tradeInfo.totalReceiveQuantity = 0;\r\n        tradeInfo.preTradeSendTokenBalance = _snapshotTargetTokenBalance(_ckToken, _sendToken);\r\n        tradeInfo.preTradeReceiveTokenBalance = _snapshotTargetTokenBalance(_ckToken, _receiveToken);\r\n        tradeInfo.data = _isSendTokenFixed ? _exchangeAdapter.generateDataParam(path, true) : _exchangeAdapter.generateDataParam(path, false);\r\n        return tradeInfo;\r\n    }\r\n\r\n    /**\r\n     * Invoke approve for send token, get method data and invoke trade in the context of the CKToken.\r\n     *\r\n     * @param _ckToken              Instance of the CKToken to trade\r\n     * @param _exchangeAdapter      Exchange adapter in the integrations registry\r\n     * @param _sendToken            Address of the token to be sent to the exchange\r\n     * @param _receiveToken         Address of the token that will be received from the exchange\r\n     * @param _sendQuantity         Units of token in CKToken sent to the exchange\r\n     * @param _receiveQuantity      Units of token in CKToken received from the exchange\r\n     * @param _data                 Arbitrary bytes to be used to construct trade call data\r\n     */\r\n    function _executeTrade(\r\n        ICKToken _ckToken,\r\n        IExchangeAdapter _exchangeAdapter,\r\n        address _sendToken,\r\n        address _receiveToken,\r\n        uint256 _sendQuantity,\r\n        uint256 _receiveQuantity,\r\n        bytes memory _data\r\n    )\r\n        internal\r\n    {\r\n        // Get spender address from exchange adapter and invoke approve for exact amount on CKToken\r\n        _ckToken.invokeApprove(\r\n            _sendToken,\r\n            _exchangeAdapter.getSpender(),\r\n            _sendQuantity\r\n        );\r\n\r\n        (\r\n            address targetExchange,\r\n            uint256 callValue,\r\n            bytes memory methodData\r\n        ) = _exchangeAdapter.getTradeCalldata(\r\n            _sendToken,\r\n            _receiveToken,\r\n            address(_ckToken),\r\n            _sendQuantity,\r\n            _receiveQuantity,\r\n            _data\r\n        );\r\n\r\n        _ckToken.invoke(targetExchange, callValue, methodData);\r\n    }\r\n\r\n    /**\r\n     * Executes a trade on a supported DEX.\r\n     *\r\n     * @param _ckToken              Instance of the CKToken to trade\r\n     * @param _sendToken            Address of the token to be sent to the exchange\r\n     * @param _midToken             _midToken\r\n     * @param _receiveToken         Address of the token that will be received from the exchange     \r\n     * @param _exactQuantity        Exact Quantity of token in CKToken to be sent or received from the exchange\r\n     * @param _isSendTokenFixed     Indicate if the send token is fixed\r\n     */\r\n    function _trade(\r\n        ICKToken _ckToken,\r\n        address _sendToken,\r\n        address _midToken,\r\n        address _receiveToken,\r\n        uint256 _exactQuantity,\r\n        bool _isSendTokenFixed\r\n    )\r\n        internal\r\n        returns (uint256, uint256)\r\n    {\r\n        if (address(_sendToken) == address(_receiveToken)) {\r\n            return (_exactQuantity, _exactQuantity);\r\n        }\r\n        TradeInfo memory tradeInfo = _createTradeInfo(\r\n            _ckToken,\r\n            IExchangeAdapter(getAndValidateAdapter(exchangeInfo[IERC20(_receiveToken)])),\r\n            _sendToken,\r\n            _midToken,\r\n            _receiveToken,\r\n            _exactQuantity,\r\n            _isSendTokenFixed\r\n        );\r\n        _validatePreTradeData(tradeInfo);\r\n        _executeTrade(tradeInfo.ckToken, tradeInfo.exchangeAdapter, tradeInfo.sendToken, tradeInfo.receiveToken, tradeInfo.totalSendQuantity, tradeInfo.totalReceiveQuantity, tradeInfo.data);\r\n        _validatePostTrade(tradeInfo);\r\n        uint256 totalSendQuantity = tradeInfo.preTradeSendTokenBalance.sub(_snapshotTargetTokenBalance(_ckToken, _sendToken));\r\n        uint256 totalReceiveQuantity = _snapshotTargetTokenBalance(_ckToken, _receiveToken).sub(tradeInfo.preTradeReceiveTokenBalance);\r\n        emit ComponentExchanged(\r\n            _ckToken,\r\n            _sendToken,\r\n            _receiveToken,\r\n            tradeInfo.exchangeAdapter,\r\n            totalSendQuantity,\r\n            totalReceiveQuantity\r\n        );\r\n        return (totalSendQuantity, totalReceiveQuantity);\r\n    }\r\n\r\n    /**\r\n     * Instructs the CKToken to wrap an underlying asset into a wrappedToken via a specified adapter.\r\n     *\r\n     * @param _ckToken              Instance of the CKToken\r\n     * @param _underlyingToken      Address of the component to be wrapped\r\n     * @param _wrappedToken         Address of the desired wrapped token\r\n     * @param _underlyingQuantity   Quantity of underlying tokens to wrap\r\n     * @param _integrationName      Name of wrap module integration (mapping on integration registry)\r\n     */\r\n    function _wrap(\r\n        ICKToken _ckToken,\r\n        address _underlyingToken,\r\n        address _wrappedToken,\r\n        uint256 _underlyingQuantity,\r\n        string memory _integrationName,\r\n        bool _usesEther\r\n    )\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        (\r\n        uint256 notionalUnderlyingWrapped,\r\n        uint256 notionalWrapped\r\n        ) = _validateAndWrap(\r\n            _integrationName,\r\n            _ckToken,\r\n            _underlyingToken,\r\n            _wrappedToken,\r\n            _underlyingQuantity,\r\n            _usesEther // does not use Ether\r\n        );\r\n\r\n        emit ComponentWrapped(\r\n            _ckToken,\r\n            _underlyingToken,\r\n            _wrappedToken,\r\n            notionalUnderlyingWrapped,\r\n            notionalWrapped,\r\n            _integrationName\r\n        );\r\n        return notionalWrapped;\r\n    }\r\n\r\n    /**\r\n     * MANAGER-ONLY: Instructs the CKToken to unwrap a wrapped asset into its underlying via a specified adapter.\r\n     *\r\n     * @param _ckToken              Instance of the CKToken\r\n     * @param _underlyingToken      Address of the underlying asset\r\n     * @param _wrappedToken         Address of the component to be unwrapped\r\n     * @param _wrappedQuantity      Quantity of wrapped tokens in Position units\r\n     * @param _integrationName      ID of wrap module integration (mapping on integration registry)\r\n     */\r\n    function _unwrap(\r\n        ICKToken _ckToken,\r\n        address _underlyingToken,\r\n        address _wrappedToken,\r\n        uint256 _wrappedQuantity,\r\n        string memory _integrationName,\r\n        bool _usesEther\r\n    )\r\n        internal returns (uint256, uint256)\r\n    {\r\n        (\r\n        uint256 notionalUnderlyingUnwrapped,\r\n        uint256 notionalUnwrapped\r\n        ) = _validateAndUnwrap(\r\n            _integrationName,\r\n            _ckToken,\r\n            _underlyingToken,\r\n            _wrappedToken,\r\n            _wrappedQuantity,\r\n            _usesEther // uses Ether\r\n        );\r\n\r\n        emit ComponentUnwrapped(\r\n            _ckToken,\r\n            _underlyingToken,\r\n            _wrappedToken,\r\n            notionalUnderlyingUnwrapped,\r\n            notionalUnwrapped,\r\n            _integrationName\r\n        );\r\n\r\n        return (notionalUnderlyingUnwrapped, notionalUnwrapped);\r\n    }\r\n\r\n    /**\r\n     * The WrapModule approves the underlying to the 3rd party\r\n     * integration contract, then invokes the CKToken to call wrap by passing its calldata along. When raw ETH\r\n     * is being used (_usesEther = true) WETH position must first be unwrapped and underlyingAddress sent to\r\n     * adapter must be external protocol's ETH representative address.\r\n     *\r\n     * Returns notional amount of underlying tokens and wrapped tokens that were wrapped.\r\n     */\r\n    function _validateAndWrap(\r\n        string memory _integrationName,\r\n        ICKToken _ckToken,\r\n        address _underlyingToken,\r\n        address _wrappedToken,\r\n        uint256 _underlyingQuantity,\r\n        bool _usesEther\r\n    )\r\n        internal\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 preActionUnderlyingNotional;\r\n        // Snapshot pre wrap balances\r\n        uint256 preActionWrapNotional = _snapshotTargetTokenBalance(_ckToken, _wrappedToken);\r\n\r\n        IWrapAdapter wrapAdapter = IWrapAdapter(getAndValidateAdapter(_integrationName));\r\n\r\n        address snapshotToken = _usesEther ? address(weth) : _underlyingToken;\r\n        _validateInputs(_ckToken, snapshotToken, _underlyingQuantity);\r\n        preActionUnderlyingNotional = _snapshotTargetTokenBalance(_ckToken, snapshotToken);\r\n\r\n        // Execute any pre-wrap actions depending on if using raw ETH or not\r\n        if (_usesEther) {\r\n            _ckToken.invokeUnwrapWETH(address(weth), _underlyingQuantity);\r\n        } else {\r\n            address spender = wrapAdapter.getWrapSpenderAddress(_underlyingToken, _wrappedToken);\r\n            _ckToken.invokeApprove(_underlyingToken, spender, _underlyingQuantity.add(1));\r\n        }\r\n\r\n        // Get function call data and invoke on CKToken\r\n        _createWrapDataAndInvoke(\r\n            _ckToken,\r\n            wrapAdapter,\r\n            _usesEther ? wrapAdapter.ETH_TOKEN_ADDRESS() : _underlyingToken,\r\n            _wrappedToken,\r\n            _underlyingQuantity\r\n        );\r\n\r\n        // Snapshot post wrap balances\r\n        uint256 postActionUnderlyingNotional = _snapshotTargetTokenBalance(_ckToken, snapshotToken);\r\n        uint256 postActionWrapNotional = _snapshotTargetTokenBalance(_ckToken, _wrappedToken);\r\n        return (\r\n            preActionUnderlyingNotional.sub(postActionUnderlyingNotional),\r\n            postActionWrapNotional.sub(preActionWrapNotional)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * The WrapModule calculates the total notional wrap token to unwrap, then invokes the CKToken to call\r\n     * unwrap by passing its calldata along. When raw ETH is being used (_usesEther = true) underlyingAddress\r\n     * sent to adapter must be set to external protocol's ETH representative address and ETH returned from\r\n     * external protocol is wrapped.\r\n     *\r\n     * Returns notional amount of underlying tokens and wrapped tokens unwrapped.\r\n     */\r\n    function _validateAndUnwrap(\r\n        string memory _integrationName,\r\n        ICKToken _ckToken,\r\n        address _underlyingToken,\r\n        address _wrappedToken,\r\n        uint256 _wrappedTokenQuantity,\r\n        bool _usesEther\r\n    )\r\n        internal\r\n        returns (uint256, uint256)\r\n    {\r\n        _validateInputs(_ckToken, _wrappedToken, _wrappedTokenQuantity);\r\n\r\n        // Snapshot pre wrap balance\r\n        address snapshotToken = _usesEther ? address(weth) : _underlyingToken;\r\n        uint256 preActionUnderlyingNotional = _snapshotTargetTokenBalance(_ckToken, snapshotToken);\r\n        uint256 preActionWrapNotional = _snapshotTargetTokenBalance(_ckToken, _wrappedToken);\r\n\r\n        IWrapAdapter wrapAdapter = IWrapAdapter(getAndValidateAdapter(_integrationName));\r\n        address unWrapSpender = wrapAdapter.getUnwrapSpenderAddress(_underlyingToken, _wrappedToken);\r\n        _ckToken.invokeApprove(_wrappedToken, unWrapSpender, _wrappedTokenQuantity);\r\n        \r\n        // Get function call data and invoke on CKToken\r\n        _createUnwrapDataAndInvoke(\r\n            _ckToken,\r\n            wrapAdapter,\r\n            _usesEther ? wrapAdapter.ETH_TOKEN_ADDRESS() : _underlyingToken,\r\n            _wrappedToken,\r\n            _wrappedTokenQuantity\r\n        );\r\n\r\n        // immediately wrap to WTH after getting back ETH\r\n        if (_usesEther) {\r\n            _ckToken.invokeWrapWETH(address(weth), address(_ckToken).balance);\r\n        }\r\n        \r\n        // Snapshot post wrap balances\r\n        uint256 postActionUnderlyingNotional = _snapshotTargetTokenBalance(_ckToken, snapshotToken);\r\n        uint256 postActionWrapNotional = _snapshotTargetTokenBalance(_ckToken, _wrappedToken);\r\n        return (\r\n            postActionUnderlyingNotional.sub(preActionUnderlyingNotional),\r\n            preActionWrapNotional.sub(postActionWrapNotional)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Validates the wrap operation is valid. In particular, the following checks are made:\r\n     * - The position is Default\r\n     * - The position has sufficient units given the transact quantity\r\n     * - The transact quantity > 0\r\n     *\r\n     * It is expected that the adapter will check if wrappedToken/underlyingToken are a valid pair for the given\r\n     * integration.\r\n     */\r\n    function _validateInputs(\r\n        ICKToken _ckToken,\r\n        address _component,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n        view\r\n    {\r\n        require(_quantity > 0, \"component quantity must be > 0\");\r\n        require(_snapshotTargetTokenBalance(_ckToken, _component) >= _quantity, \"quantity cant be greater than existing\");\r\n    }\r\n\r\n    /**\r\n     * Create the calldata for wrap and then invoke the call on the CKToken.\r\n     */\r\n    function _createWrapDataAndInvoke(\r\n        ICKToken _ckToken,\r\n        IWrapAdapter _wrapAdapter,\r\n        address _underlyingToken,\r\n        address _wrappedToken,\r\n        uint256 _notionalUnderlying\r\n    ) internal {\r\n        (\r\n            address callTarget,\r\n            uint256 callValue,\r\n            bytes memory callByteData\r\n        ) = _wrapAdapter.getWrapCallData(\r\n            _underlyingToken,\r\n            _wrappedToken,\r\n            _notionalUnderlying\r\n        );\r\n\r\n        _ckToken.invoke(callTarget, callValue, callByteData);\r\n    }\r\n\r\n    /**\r\n     * Create the calldata for unwrap and then invoke the call on the CKToken.\r\n     */\r\n    function _createUnwrapDataAndInvoke(\r\n        ICKToken _ckToken,\r\n        IWrapAdapter _wrapAdapter,\r\n        address _underlyingToken,\r\n        address _wrappedToken,\r\n        uint256 _notionalUnderlying\r\n    ) internal {\r\n        (\r\n            address callTarget,\r\n            uint256 callValue,\r\n            bytes memory callByteData\r\n        ) = _wrapAdapter.getUnwrapCallData(\r\n            _underlyingToken,\r\n            _wrappedToken,\r\n            _notionalUnderlying\r\n        );\r\n\r\n        _ckToken.invoke(callTarget, callValue, callByteData);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_component\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newExchangeName\",\"type\":\"string\"}],\"name\":\"AssetExchangeExecutionParamUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_component\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newWrapAdapterName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newUnderlyingToken\",\"type\":\"address\"}],\"name\":\"AssetWrapExecutionParamUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_hookContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ckMintQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_issuedTokenReturned\",\"type\":\"uint256\"}],\"name\":\"CKTokenIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"CKTokenRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sendToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiveToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IExchangeAdapter\",\"name\":\"_exchangeAdapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalSendAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalReceiveAmount\",\"type\":\"uint256\"}],\"name\":\"ComponentExchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_underlyingQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_wrappedQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_integrationName\",\"type\":\"string\"}],\"name\":\"ComponentUnwrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_underlyingQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_wrappedQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_integrationName\",\"type\":\"string\"}],\"name\":\"ComponentWrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangeInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isIssue\",\"type\":\"bool\"}],\"name\":\"getRequiredComponentIssuanceUnits\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"internalType\":\"contract IManagerIssuanceHook\",\"name\":\"_preIssueHook\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCkTokenRec\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_midTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weightings\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_returnDust\",\"type\":\"bool\"}],\"name\":\"issueWithEther2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_issueToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_issueTokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCkTokenRec\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_midTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weightings\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_returnDust\",\"type\":\"bool\"}],\"name\":\"issueWithSingleToken2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managerIssuanceHook\",\"outputs\":[{\"internalType\":\"contract IManagerIssuanceHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ckTokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_redeemToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_midTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minRedeemTokenToRec\",\"type\":\"uint256\"}],\"name\":\"redeemToSingleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_components\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_exchangeNames\",\"type\":\"string[]\"}],\"name\":\"setExchanges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_components\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_wrapAdapterNames\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_underlyingTokens\",\"type\":\"address[]\"}],\"name\":\"setWrapAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wrapInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"wrapAdapterName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IssuanceModuleV2", "CompilerVersion": "v0.6.10+commit.00c0fcaf", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000822aeb433a4ea7a97b76287cb513c3985034a2bd000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8b05ec7d7ae8f48e47d4914209a190ab58f7d31cd1ff9e77bd2b37e6c99d5388"}