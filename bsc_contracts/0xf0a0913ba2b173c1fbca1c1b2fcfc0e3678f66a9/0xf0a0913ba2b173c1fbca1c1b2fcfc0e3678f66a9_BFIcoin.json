{"SourceCode": "pragma solidity ^0.5.9;\r\n\r\n\r\ncontract ERC20 {\r\n    function balanceOf(address _owner) view public  returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public  returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) view public  returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract Token is  ERC20 {\r\n    using SafeMath for uint256;\r\n    address payable public owner;\r\n\r\n    \r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    mapping (address=>uint256) balances;\r\n    mapping (address=>mapping (address=>uint256)) allowed;\r\n    mapping (address  => bool) public frozen ;\r\n    \r\n    event Freeze(address target, bool frozen);\r\n    event Unfreeze(address target, bool frozen);\r\n    event Burn(address a, uint256 _value);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender==owner);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotFrozen(address target) {\r\n      require(!frozen[target],\"tokens are freeze already\");\r\n      _;\r\n    }\r\n\r\n    modifier whenFrozen(address target){\r\n      require(frozen[target],\"tokens are not freeze\");\r\n     _;\r\n    }\r\n    \r\n    function balanceOf(address _owner) view public   returns (uint256 balance) \r\n    {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _amount) public   returns (bool success) {\r\n        require(!frozen[msg.sender],'account is freez');\r\n        require (balances[msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\r\n        balances[msg.sender]=balances[msg.sender].sub(_amount);\r\n        balances[_to]=balances[_to].add(_amount);\r\n        emit Transfer(msg.sender,_to,_amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address _from,address _to,uint256 _amount) public   returns (bool success) {\r\n        require(!frozen[_from],\"From address is fronzen\");\r\n        require (balances[_from]>=_amount&&allowed[_from][msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\r\n        balances[_from]=balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender]=allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to]=balances[_to].add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n  \r\n    function approve(address _spender, uint256 _amount) public   returns (bool success) {\r\n        allowed[msg.sender][_spender]=_amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) view public   returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n  \r\n\r\n  function FreezeAcc(address target, bool freeze) onlyOwner public whenNotFrozen(target) returns (bool) {\r\n    freeze = true;\r\n    frozen[target]=freeze;\r\n    emit Freeze(target, true);\r\n    return true;\r\n  }\r\n\r\n  function UnfreezeAcc(address target, bool freeze) onlyOwner public whenFrozen(target) returns (bool) {\r\n    freeze = false;\r\n    frozen[target]=freeze;\r\n    emit Unfreeze(target, false);\r\n    return true;\r\n  }\r\n  function burn(uint256 _value) public returns (bool success) {\r\n      require(!frozen[msg.sender],\"Account address is fronzen\");\r\n        require(balances[msg.sender] >= _value);   // Check if the sender has enough\r\n        balances[msg.sender] =balances[msg.sender].sub(_value);            // Subtract from the sender\r\n        totalSupply =totalSupply.sub(_value);                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n    \r\n    \r\n}\r\n\r\ncontract BFIcoin is Token{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    constructor(address payable _owner) public{\r\n        symbol = \"BFIC\";\r\n        name = \"BFIcoin\";\r\n        decimals = 8;\r\n        totalSupply = 5100100e8;   \r\n        owner = _owner;\r\n        balances[owner] = totalSupply;\r\n        frozen[msg.sender]=false;\r\n    }\r\n    \r\n    function _mint(address _account, uint256 _amount) external onlyOwner  {\r\n        require(_account != address(0), \"ERC20: mint to the zero address\");\r\n        balances[_account] = balances[_account].add(_amount);\r\n    }\r\n    \r\n    \r\n    function changeOwner(address payable _newOwner) public onlyOwner returns(bool) {\r\n        balances[_newOwner] = balances[owner]; \r\n        balances[owner] = 0;\r\n        owner = _newOwner;\r\n        return true;\r\n    }\r\n    \r\n     \r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"FreezeAcc\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"UnfreezeAcc\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BFIcoin", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006ac76a4873ac1d2cb39c5c129cccb4b36e177dfa", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c1aa4787de87cad4655b0d406ba43545772068cb820e76a740d13423e69233d5"}