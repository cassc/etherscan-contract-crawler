{"SourceCode": "{\"Base.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\n    library SafeMath {//konwnsec//IERC20 \u63a5\u53e3\\r\\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n            if (a == 0) {\\r\\n                return 0; \\r\\n            }\\r\\n            uint256 c = a * b;\\r\\n            assert(c / a == b);\\r\\n            return c; \\r\\n        }\\r\\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n// assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\r\\n            uint256 c = a / b;\\r\\n// assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n            return c; \\r\\n        }\\r\\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n            assert(b \\u003c= a);\\r\\n            return a - b; \\r\\n        }\\r\\n\\r\\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n            uint256 c = a + b;\\r\\n            assert(c \\u003e= a);\\r\\n            return c; \\r\\n        }\\r\\n    }\\r\\n\\r\\n    interface Erc20Token {//konwnsec//ERC20 \u63a5\u53e3\\r\\n        function totalSupply() external view returns (uint256);\\r\\n        function balanceOf(address _who) external view returns (uint256);\\r\\n        function transfer(address _to, uint256 _value) external;\\r\\n        function allowance(address _owner, address _spender) external view returns (uint256);\\r\\n        function transferFrom(address _from, address _to, uint256 _value) external;\\r\\n        function approve(address _spender, uint256 _value) external; \\r\\n        function burnFrom(address _from, uint256 _value) external; \\r\\n        event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n        event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n        \\r\\n\\r\\n    }\\r\\n    \\r\\n    \\r\\n    interface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n    \\r\\n// \u57fa\u7c7b\u5408\u7ea6\\r\\n    contract Base {\\r\\n        using SafeMath for uint;\\r\\n        Erc20Token constant internal _eptIns = Erc20Token(0xCDAbD94A40e25E80Cd4CE1D73C8f93e368BD1069); \\r\\n        mapping(address =\\u003e uint256) public AirdropMap; \\r\\n\\r\\n        address  _owner;\\r\\n\\r\\n\\r\\n          function eptConvert(uint256 value) internal pure returns(uint256) {\\r\\n            return value.mul(1000000000000);\\r\\n        }\\r\\n     \\r\\n        modifier onlyOwner() {\\r\\n            require(msg.sender == _owner, \\\"Permission denied\\\"); _;\\r\\n        }\\r\\n        modifier isZeroAddr(address addr) {\\r\\n            require(addr != address(0), \\\"Cannot be a zero address\\\"); _; \\r\\n        }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0));\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n    receive() external payable {}  \\r\\n}\"},\"Dividends.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n// SPDX-License-Identifier: Unlicensed\\r\\nimport \\\"./Base.sol\\\";\\r\\n\\r\\n\\r\\ncontract Dividends is Base {\\r\\n    constructor(address owner)\\r\\n    isZeroAddr(owner) public {\\r\\n        _owner = owner; \\r\\n    }\\r\\n     function WithdrawalAirdrop() public     {\\r\\n        uint256 Airdrop = AirdropMap[msg.sender];\\r\\n        require(Airdrop \\u003e0, \\\"Not enough EPT\\\");\\r\\n        if(Airdrop \\u003e 0){\\r\\n            _eptIns.transfer(msg.sender, Airdrop);\\r\\n            AirdropMap[msg.sender] = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function Airdrop(address[] calldata referrerAddrs,uint256[] calldata Playerfarms) public onlyOwner    {\\r\\n        for (uint256 i=0; i\\u003creferrerAddrs.length; i++) {\\r\\n            address add = referrerAddrs[i];\\r\\n            uint256 amount = eptConvert(Playerfarms[i]);\\r\\n            AirdropMap[add] = AirdropMap[add].add(amount);\\r\\n        }           \\r\\n    }       \\r\\n\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"referrerAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Playerfarms\",\"type\":\"uint256[]\"}],\"name\":\"Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AirdropMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawalAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Dividends", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000053a3d7a4e25aa2eca8b843c6f04a097a5e58830c", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://39f6a446ff252ba05f426583292667ad385a38bbb638893b3b3caf3f700db715"}