{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"srcV2/ReferralManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { PoolsManager } from \\\"./PoolsManager/PoolsManager.sol\\\";\\nimport { NodeRegistry } from \\\"./Node/NodeRegistry.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable@4.9.1/access/OwnableUpgradeable.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable@4.9.1/proxy/utils/Initializable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable@4.9.1/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ncontract PumpV2 is Initializable, OwnableUpgradeable, UUPSUpgradeable, PoolsManager, NodeRegistry {\\n\\n  function initialize(\\n    uint256 feeAmount,\\n    address feeToken,\\n    address firstNode\\n  ) initializer public {\\n\\n    __Ownable_init();\\n    __UUPSUpgradeable_init();\\n    __PoolsManager_init();\\n    __NodeRegistery_init(feeAmount, feeToken, firstNode);\\n\\n  }\\n\\n  function payDailyRewardByIds(\\n      uint256[] memory ids,\\n      uint256[] memory rewards,\\n      uint256[] memory points\\n  ) public override onlyOwner {\\n    super.payDailyRewardByIds(ids, rewards, points);\\n  }\\n\\n  function payMonthlyRewardByIds(\\n      uint256[] memory ids,\\n      uint256[] memory rewards\\n    ) public override onlyOwner {\\n      super.payMonthlyRewardByIds(ids, rewards);\\n  }\\n\\n  function payWeeklyRewardByIds(\\n      uint256[] memory ids,\\n      uint256[] memory rewards\\n    ) public override onlyOwner {\\n      super.payWeeklyRewardByIds(ids, rewards);\\n  }\\n\\n  function updatePoolFeeReciever(address newAddress) public override onlyOwner {\\n    super.updatePoolFeeReciever(newAddress);\\n  }\\n\\n  function updatePoolFeeAmount(uint256 newAmount) public override onlyOwner {\\n    super.updatePoolFeeAmount(newAmount);\\n  }\\n\\n  function updateWeeklyPoolBalance(uint256 amount) public override onlyOwner {\\n    super.updateWeeklyPoolBalance(amount);\\n  }\\n\\n  function updateMonthlyPoolBalance(uint256 amount) public override onlyOwner {\\n    super.updateMonthlyPoolBalance(amount);\\n\\n  }\\n\\n  function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyOwner\\n    override {\\n\\n  }\\n\\n\\n}\"\r\n    },\r\n    \"srcV2/PoolsManager/PoolsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { DailyPool } from \\\"./EaringPools/DailyPool.sol\\\";\\nimport { WeeklyPool } from \\\"./EaringPools/WeeklyPool.sol\\\";\\nimport { MonthlyPool } from \\\"./EaringPools/MonthlyPool.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable@4.9.1/proxy/utils/Initializable.sol\\\";\\n\\n\\ncontract PoolsManager is Initializable, DailyPool, WeeklyPool, MonthlyPool {\\n\\n    function __PoolsManager_init() internal onlyInitializing {\\n       \\n        DAILY_PERCENTAGE = 85;\\n        WEEKLY_PERCENTAGE = 10;\\n        MONTHLY_PERCENTAGE = 5;\\n\\n        DAILY_INTERVAL = 12 hours; \\n        WEEKLY_INTERVAL = 1 weeks;\\n        MONTHLY_INTERVAL = 90 days;\\n\\n        lastDailyTimeStamp = block.timestamp;\\n        lastWeeklyTimeStamp = block.timestamp;\\n        lastMonthlyTimeStamp = block.timestamp;\\n    \\n    }\\n\\n    function _updatePoolsBalance(uint256 amount) internal {\\n        \\n        _updateMonthlyPoolBalance(amount);\\n        _updateWeeklyPoolBalance(amount);\\n        _updateDailyPoolBalance(amount);\\n    }\\n}\"\r\n    },\r\n    \"srcV2/Node/NodeRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { NodeBase } from \\\"./NodeBase.sol\\\";\\nimport { PoolsManager } from \\\"../PoolsManager/PoolsManager.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable@4.9.1/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable@4.9.1/proxy/utils/Initializable.sol\\\";\\n\\n\\n/**\\n * @title NodeRegistry\\n * @dev A contract for registering and managing nodes in a binary tree structure.\\n * This contract extends the functionality provided by NodeBase to enable node registration\\n */\\ncontract NodeRegistry is Initializable, NodeBase, PoolsManager {\\n\\n    event NodeRegistered(uint256 nodeId, address nodeAddress, address upline);\\n\\n    /**\\n     * @dev Constructor to initialize the registration cost and token.\\n     * @param amount The amount required for node registration.\\n     * @param token The address of the token used for registration fees.\\n     */\\n    function __NodeRegistery_init(uint256 amount, address token, address firstNode) internal onlyInitializing {\\n        registerCostAmount = amount;\\n        registerCostToken = token;\\n        incrementNodeCounter();\\n        _createNode(firstNode, address(0));\\n    }\\n   \\n\\n    /**\\n     * @dev Registers a new node in the binary tree structure.\\n     * @param uplineAddress The address of the upline node (parent) for the new node.\\n     */\\n    function registerNode(address uplineAddress) external {\\n\\n        require(_validateUpline(uplineAddress), \\\"Invalid Upline\\\");\\n\\n        address account = msg.sender;\\n        require(addressToNodeId[account] == 0, \\\"Caller registred already\\\");\\n        \\n        _payRegisterCost(account);\\n        uint256 childId = _createNode(account, uplineAddress);\\n\\n        _addNewChild(childId, uplineAddress);\\n        _updatePoolsBalance(registerCostAmount);\\n\\n        emit NodeRegistered(childId, account, uplineAddress);\\n    }\\n\\n    \\n    /**\\n     * @dev Private function to pay the registration cost using the specified token.\\n     * @param from The address msg sender for register.\\n     */\\n    function _payRegisterCost(address from) private {\\n\\n        IERC20Upgradeable costToken = IERC20Upgradeable(registerCostToken);\\n        bool isSuccess = costToken.transferFrom(\\n            from, address(this), registerCostAmount\\n        );\\n        require(isSuccess, \\\"Failed to pay\\\");\\n    }\\n\\n\\n    /**\\n     * @dev Validates the upline address for node registration.\\n     * @param uplineAddress The address of the upline node (parent) to be validated.\\n     * @return isValid Indicates whether the upline address is valid for registration.\\n     */\\n    function _validateUpline(address uplineAddress) private view returns (bool isValid) {\\n\\n        if(uplineAddress == address(0)) {\\n            return (isValid = false);\\n        }\\n\\n        uint256 id = addressToNodeId[uplineAddress];\\n        uint256 directChildrenNum = _getNumberOfDirectChild(id);\\n        address caller = msg.sender;\\n\\n        if ((id != 0) && (directChildrenNum < 2) && (caller != uplineAddress)) {\\n            isValid = true;\\n        }\\n    }\\n\\n\\n    function _addNewChild(uint256 childId, address upline) private {\\n        uint256 uplineId = addressToNodeId[upline];\\n        \\n        if(_getNumberOfDirectChild(uplineId) == 0) {\\n            nodes[uplineId].rightChildId = childId;\\n        } \\n        else if(_getNumberOfDirectChild(uplineId) == 1) {\\n            nodes[uplineId].leftChildId = childId;\\n        }\\n    }\\n\\n\\n    /**\\n     * @dev Calculates the number of direct children of a given node.\\n     * @param nodeId The unique identifier of the node.\\n     * @return numberOf The number of direct children of the node.\\n     */\\n    function _getNumberOfDirectChild(uint256 nodeId) private view returns (uint256 numberOf) {\\n        Node memory node = nodes[nodeId];\\n\\n        if (node.leftChildId > 1) {\\n            numberOf += 1;\\n        }\\n        if (node.rightChildId > 1) {\\n            numberOf += 1;\\n        }\\n    }\\n\\n\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"srcV2/PoolsManager/EaringPools/DailyPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { NodeBase } from \\\"../../Node/NodeBase.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable@4.9.1/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n\\n\\n/**\\n * @title DailyPool 85%\\n * @dev A contract for managing daily rewards distribution to nodes in a binary tree structure.\\n */\\ncontract DailyPool is NodeBase {\\n\\n    uint256 internal DAILY_PERCENTAGE;\\n\\n    // Interval for the time of reward distribution.\\n    uint256 internal DAILY_INTERVAL; \\n\\n    uint256 public lastDailyTimeStamp;\\n    uint256 public dailyPoolBalance;\\n\\n    mapping(uint256 => uint256) internal _dailyPoolLastDepth;\\n\\n    event DailyPoolDistributed(uint256 poolBalance, uint256 rewardAmount);\\n    event DailyUserRewardPaid(uint256 nodeId, uint256 amount);\\n\\n    /**\\n     * @dev Updates the daily pool balance with the provided amount.\\n     * @param amount The amount to increment the daily pool balance by.\\n     */\\n    function _updateDailyPoolBalance(uint256 amount) internal {\\n        uint256 incAmount = (amount * DAILY_PERCENTAGE) / 100;\\n        dailyPoolBalance = dailyPoolBalance + incAmount;\\n    }\\n\\n    /**\\n     * @dev Checks if daily reward distribution is needed based on the last distribution timestamp and the daily interval.\\n     * @return isNeed Indicates whether daily distribution is needed.\\n     */\\n    function _isDailyDistributionNeeded() public view returns (bool) {\\n        uint256 endTime = lastDailyTimeStamp + DAILY_INTERVAL;\\n        return endTime <= block.timestamp && dailyPoolBalance > 0;\\n    }\\n\\n    /**\\n     * @dev Gets the daily point for a node by calculating the difference between the current point and the last recorded depth in the daily pool.\\n     * @param nodeId The unique identifier of the node.\\n     * @return dailyPoint The daily point for the node.\\n     */\\n    function _getUserDailyPoint(uint256 nodeId) public view returns (uint256) {\\n        uint256 point = _calculateMinPoint(nodeId);\\n        uint256 dailyPoint = point - _dailyPoolLastDepth[nodeId];\\n        if (dailyPoint > 50) { return 50; }\\n        return dailyPoint;\\n    }\\n\\n    /**\\n     * @dev Calculates the daily reward distribution amount based on daily points accumulated by nodes.\\n     * determine how much each point is worth in terms of reward distribution for that day\\n     * @return amount The daily reward distribution amount.\\n     */\\n    function _calculateDailyRewardByPoints() public view returns (uint256 amount) {\\n        uint256 dailyPoints;\\n        uint256 lastNodeId = getNodeCounter();\\n\\n        for (uint id = 1; id < lastNodeId; ) {\\n            dailyPoints = dailyPoints + _getUserDailyPoint(id);\\n            unchecked {\\n                ++id;\\n            }\\n        }\\n\\n        if(dailyPoints == 0) {\\n            return 0;\\n        }\\n\\n        if(dailyPoints > 50) {\\n            return 50;\\n        }\\n\\n        amount = (dailyPoolBalance / dailyPoints);\\n    }\\n\\n\\n    function _payDailyReward(uint256 nodeId, uint256 amount) private {\\n\\n        address node = nodes[nodeId].nodeAddress;\\n        IERC20Upgradeable token = IERC20Upgradeable(registerCostToken);\\n\\n        bool isSuccess = token.transfer(node, amount);   \\n        require(isSuccess, \\\"Failed to transfer\\\");\\n\\n        emit DailyUserRewardPaid(nodeId, amount);\\n\\n    }\\n\\n\\n    function payDailyRewardByIds(\\n        uint256[] memory ids,\\n        uint256[] memory rewards,\\n        uint256[] memory points\\n    ) public virtual {\\n        require(_isDailyDistributionNeeded(), \\\"Invalid time\\\");\\n\\n\\n        uint256 lastNodeId = ids.length;\\n        uint256 rewardLength = rewards.length;\\n        uint256 pointsLength = points.length;\\n\\n        require(\\n            lastNodeId == rewardLength && lastNodeId == pointsLength,\\n            \\\"Invalid array length\\\"\\n        );\\n        \\n        uint256 poolFee = poolFeeAmount;\\n        uint256 collectedFee;\\n\\n        for(uint i; i < lastNodeId; ) {\\n            \\n            uint256 id = ids[i];\\n            uint256 reward = rewards[i];\\n            uint256 point = points[i];\\n\\n            if(reward < poolFee) {\\n                continue;\\n            }\\n\\n            collectedFee = collectedFee + poolFee;\\n\\n            _dailyPoolLastDepth[id] += point;\\n            _payDailyReward(id, reward - poolFee);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        dailyPoolBalance = 0;\\n        lastDailyTimeStamp = block.timestamp;\\n\\n        IERC20Upgradeable token = IERC20Upgradeable(registerCostToken);\\n        bool isSuccess = token.transfer(poolFeeReciever, collectedFee);   \\n        require(isSuccess, \\\"Failed to transfer\\\");\\n    }\\n\\n\\n}\\n\"\r\n    },\r\n    \"srcV2/PoolsManager/EaringPools/WeeklyPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { NodeBase } from \\\"../../Node/NodeBase.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable@4.9.1/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title WeeklyPool 10%\\n * @dev A contract for managing weekly rewards distribution to nodes in a binary tree structure.\\n */\\ncontract WeeklyPool is NodeBase {\\n    uint256 internal WEEKLY_PERCENTAGE;\\n\\n    // Interval for the time of reward distribution.\\n    uint256 internal WEEKLY_INTERVAL; \\n\\n    uint256 public lastWeeklyTimeStamp;\\n    uint256 public weeklyPoolBalance;\\n\\n    //mapping(uint256 => uint256) internal weeklyPoolLastDepth;\\n\\n    event WeeklyPoolDistributed(uint256 poolBalance, uint256 rewardAmount);\\n    event WeeklyUserRewardPaid(uint256 nodeId, uint256 amount);\\n\\n    /**\\n     * @dev Updates the weekly pool balance with the provided amount.\\n     * @param amount The amount to increment the weekly pool balance by.\\n     */\\n    function _updateWeeklyPoolBalance(uint256 amount) internal {\\n        uint256 incAmount = (amount * WEEKLY_PERCENTAGE) / 100;\\n        weeklyPoolBalance = weeklyPoolBalance + incAmount;\\n    }\\n\\n    /**\\n     * @dev Checks if weekly reward distribution is needed based on the last distribution timestamp and the weekly interval.\\n     * @return isNeed Indicates whether weekly distribution is needed.\\n     */\\n    function _isWeeklyDistributionNeeded() public view returns (bool) {\\n        uint256 endTime = lastWeeklyTimeStamp + WEEKLY_INTERVAL;\\n        return endTime <= block.timestamp && weeklyPoolBalance > 0;\\n    }\\n\\n    /**\\n    * @dev Calculates the weekly reward points for a user based on their team size and points.\\n    * @param nodeId The unique identifier of the user's node.\\n    * @return The calculated weekly reward points for the user.\\n    * @notice This function calculates the user's weekly reward points for the weekly reward pool.\\n    * It checks if the user's team size (children count) minus their accumulated points is less than 30% of the team size.\\n    * If the condition is met, the user is eligible to enter the weekly reward pool and receives points based on their accumulated points.\\n    */\\n    function _getUserWeeklyPoint(uint256 nodeId) public view returns (uint256) {\\n        uint256 point = _calculateMinPoint(nodeId);\\n        uint256 childrenCount = getNumberOfAllChildren(nodeId);\\n\\n        if(childrenCount == 0){ return 0; }\\n\\n        uint256 amount = (childrenCount * 70) / 2;\\n        if ((point * 100) < amount) { return 0; }\\n        if (point > 50) { return 50; }\\n\\n        return point;\\n    }\\n\\n\\n    /**\\n     * @dev Calculates the weekly reward distribution amount based on weekly points accumulated by nodes.\\n     * determine how much each point is worth in terms of reward distribution for that week\\n     * @return amount The weekly reward distribution amount.\\n     */\\n    function _calculateWeeklyRewardByPoints() public view returns (uint256 amount) {\\n        uint256 weeklyPoints;\\n        uint256 lastNodeId = getNodeCounter();\\n\\n        for (uint id = 1; id < lastNodeId; ) {\\n            weeklyPoints = weeklyPoints + _getUserWeeklyPoint(id);\\n            unchecked {\\n                ++id;\\n            }\\n        }\\n\\n        if (weeklyPoints == 0) {\\n            return 0;\\n        } else {\\n            amount = (weeklyPoolBalance / weeklyPoints);\\n        }\\n\\n    }\\n\\n\\n    function updateWeeklyPoolBalance(uint256 weeklyBalance) public virtual {\\n        weeklyPoolBalance = weeklyBalance;\\n    }\\n\\n\\n    /**\\n    * @dev Pays the weekly reward amount to a specified node.\\n    * @param nodeId The unique identifier of the node to receive the reward.\\n    * @param amount The amount of reward to be paid to the node.\\n    * @notice This function transfers the specified reward amount to the node's address using the designated token.\\n    */\\n    function _payWeeklyReward(uint256 nodeId, uint256 amount) private {\\n        address node = nodes[nodeId].nodeAddress;\\n        IERC20Upgradeable token = IERC20Upgradeable(registerCostToken);\\n    \\n        bool isSuccess = token.transfer(node, amount);   \\n        require(isSuccess, \\\"Failed to transfer\\\");\\n        emit WeeklyUserRewardPaid(nodeId, amount);\\n    }\\n\\n\\n    function payWeeklyRewardByIds(\\n        uint256[] memory ids,\\n        uint256[] memory rewards\\n    ) public virtual {\\n\\n        require(_isWeeklyDistributionNeeded(), \\\"Invalid time\\\");\\n\\n        uint256 lastNodeId = ids.length;\\n        uint256 rewardLength = rewards.length;\\n\\n        require(\\n            lastNodeId == rewardLength,\\n            \\\"Invalid array length\\\"\\n        );\\n\\n        uint256 poolFee = poolFeeAmount;\\n        uint256 collectedFee;\\n\\n        for (uint i; i < lastNodeId; ) {\\n\\n            uint256 id = ids[i];\\n            uint256 reward = rewards[i];\\n\\n            if(reward < poolFee) {\\n                continue;\\n            }\\n\\n            collectedFee = collectedFee + poolFee;\\n\\n            _payWeeklyReward(id, reward - poolFee);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        weeklyPoolBalance = 0;\\n        lastWeeklyTimeStamp = block.timestamp;\\n\\n        IERC20Upgradeable token = IERC20Upgradeable(registerCostToken);\\n        bool isSuccess = token.transfer(poolFeeReciever, collectedFee);   \\n        require(isSuccess, \\\"Failed to transfer\\\");\\n\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"srcV2/PoolsManager/EaringPools/MonthlyPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { NodeBase } from \\\"../../Node/NodeBase.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable@4.9.1/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title Monthly Pool 5%\\n * @dev A contract for managing monthly rewards distribution to nodes in a binary tree structure.\\n */\\ncontract MonthlyPool is NodeBase {\\n    uint256 internal MONTHLY_PERCENTAGE;\\n\\n    // Interval for the time of reward distribution.\\n    uint256 internal MONTHLY_INTERVAL;\\n\\n    uint256 public lastMonthlyTimeStamp;\\n    uint256 public monthlyPoolBalance;\\n\\n\\n    event MonthlyPoolDistributed(uint256 poolBalance, uint256 rewardAmount);\\n    event MonthlyUserRewardPaid(uint256 nodeId, uint256 amount);\\n\\n    /**\\n     * @dev Updates the monthly pool balance with the provided amount.\\n     * @param amount The amount to increment the monthly pool balance by.\\n     */\\n    function _updateMonthlyPoolBalance(uint256 amount) internal {\\n        uint256 incAmount = (amount * MONTHLY_PERCENTAGE) / 100;\\n        monthlyPoolBalance = monthlyPoolBalance + incAmount;\\n    }\\n\\n    /**\\n     * @dev Checks if monthly reward distribution is needed based on the last distribution timestamp and the monthly interval.\\n     * @return isNeed Indicates whether monthly distribution is needed.\\n     */\\n    function _isMonthlyDistributionNeeded() public view returns (bool) {\\n        uint256 endTime = lastMonthlyTimeStamp + MONTHLY_INTERVAL;\\n        return endTime <= block.timestamp && monthlyPoolBalance > 0;\\n    }\\n\\n\\n    /**\\n     * @dev Calculates the monthly reward points for a user based on their team size and points.\\n     * @param nodeId The unique identifier of the user's node.\\n     * @return The calculated monthly reward points for the user.\\n     * @notice This function calculates the user's monthly reward points for the monthly reward pool.\\n     * If the condition is met, the user is eligible to enter the monthly reward pool and receives points based on their accumulated points.\\n     */\\n    function _getUserMonthlyPoint(uint256 nodeId) public view returns (uint256) {\\n        uint256 registerMaxTime = nodes[nodeId].registerTime + 45 days;\\n        uint256 point = _calculateMinPointWithRegisterTime(nodeId, registerMaxTime);\\n        if(point < 50) {return 0;}\\n\\n        uint256 monthlyPoint = point / 50;\\n        return monthlyPoint;\\n    }\\n   \\n\\n    /**\\n     * @dev Calculates the monthly reward distribution amount based on monthly points accumulated by nodes.\\n     * Determine how much each point is worth in terms of reward distribution for that month.\\n     * @return amount The monthly reward distribution amount.\\n     */\\n    function _calculateMonthlyRewardByPoints() public view returns (uint256 amount) {\\n        uint256 monthlyPoints;\\n        uint256 lastNodeId = getNodeCounter();\\n\\n        for (uint id = 1; id < lastNodeId; ) {\\n            monthlyPoints += _getUserMonthlyPoint(id);\\n            unchecked {\\n                ++id;\\n            }\\n        }\\n\\n        if (monthlyPoints == 0) {\\n            return 0;\\n        } else {\\n            amount = (monthlyPoolBalance / monthlyPoints);\\n        }\\n    }\\n\\n\\n    function updateMonthlyPoolBalance(uint256 monthlyBalance) public virtual {\\n        monthlyPoolBalance = monthlyBalance;\\n    }\\n\\n    /**\\n     * @dev Pays the monthly reward amount to a specified node.\\n     * @param nodeId The unique identifier of the node to receive the reward.\\n     * @param amount The amount of reward to be paid to the node.\\n     * @notice This function transfers the specified reward amount to the node's address using the designated token.\\n     */\\n    function _payMonthlyReward(uint256 nodeId, uint256 amount) private {\\n        address node = nodes[nodeId].nodeAddress;\\n        IERC20Upgradeable token = IERC20Upgradeable(registerCostToken);\\n       \\n        bool isSuccess = token.transfer(node, amount);\\n        require(isSuccess, \\\"Failed to transfer\\\");\\n        emit MonthlyUserRewardPaid(nodeId, amount);\\n    }\\n\\n\\n    function payMonthlyRewardByIds(\\n        uint256[] memory ids,\\n        uint256[] memory rewards\\n    ) public virtual {\\n        require(_isMonthlyDistributionNeeded(), \\\"Invalid time\\\");\\n\\n        uint256 lastNodeId = ids.length;\\n        uint256 rewardLength = rewards.length;\\n\\n        require(\\n            lastNodeId == rewardLength,\\n            \\\"Invalid array length\\\"\\n        );\\n\\n        uint256 poolFee = poolFeeAmount;\\n        uint256 collectedFee;\\n\\n\\n        for (uint i; i < lastNodeId; ) {\\n\\n            uint256 id = ids[i];\\n            uint256 reward = rewards[i];\\n            \\n            if(reward < poolFee) {\\n                continue;\\n            }\\n            collectedFee = collectedFee + poolFee;\\n\\n            _payMonthlyReward(id, reward - poolFee);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        monthlyPoolBalance = 0;\\n        lastMonthlyTimeStamp = block.timestamp;\\n\\n        IERC20Upgradeable token = IERC20Upgradeable(registerCostToken);\\n        bool isSuccess = token.transfer(poolFeeReciever, collectedFee);   \\n        require(isSuccess, \\\"Failed to transfer\\\");\\n    }\\n   \\n}\\n\"\r\n    },\r\n    \"srcV2/Node/NodeBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { CountersUpgradeable } from \\\"@openzeppelin/contracts-upgradeable@4.9.1/utils/CountersUpgradeable.sol\\\";\\n\\n/**\\n * @title NodeBase\\n * @dev A base contract for managing nodes in a binary tree structure.\\n * This contract defines the structure for manage nodes in the system.\\n */\\ncontract NodeBase {\\n\\n    // Struct representing a node.\\n    struct Node {\\n        address nodeAddress;    // The address of the node.\\n        address uplineAddress;  // The address of the node's parent or upline.\\n        uint256 leftChildId;    // The ID of the left child node in the binary tree.\\n        uint256 rightChildId;   // The ID of the right child node in the binary tree.\\n        uint256 registerTime;   // The register timeof the node \\n    }\\n\\n    // Counter for generating unique node IDs.\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    CountersUpgradeable.Counter private _nodeCounter;\\n\\n    // Mapping from node ID to Node struct.\\n    mapping(uint256 => Node) public nodes;\\n\\n    // Mapping from node address to the Node Id.\\n    mapping(address => uint256) public addressToNodeId;\\n\\n\\n    uint256 public registerCostAmount;   // The amount required to register as a node.\\n    address public registerCostToken;    // The token address used for registration fees.\\n\\n    address public poolFeeReciever;\\n    uint256 public poolFeeAmount;\\n\\n\\n    /**\\n     * @dev Creates a new node with the given account address and upline address.\\n     */\\n    function _createNode(address account, address upline) internal returns(uint256 newNodeId) {\\n        \\n        newNodeId = _nodeCounter.current();\\n        \\n        Node memory newNode = Node(\\n            account, upline, 0, 0, block.timestamp\\n        );\\n\\n        nodes[newNodeId] = newNode;\\n        addressToNodeId[account] = newNodeId;\\n        incrementNodeCounter();\\n        \\n    }\\n\\n\\n    /**\\n    * @dev Calculates the minimum point between the left and right subtrees of a given node ID.\\n    * @param nodeId The unique identifier of the node.\\n    * @return The minimum calculated point between the left and right subtrees.\\n    */\\n    function _calculateMinPoint(uint256 nodeId) internal view returns (uint256) {\\n\\n        Node memory node = nodes[nodeId];\\n        uint256 leftChildId = node.leftChildId;\\n        uint256 rightChildId = node.rightChildId;\\n\\n        // Calculate points for the left and right subtrees.\\n        uint256 leftPoint = 0;\\n        uint256 rightPoint = 0;\\n\\n        if (leftChildId != 0) {\\n            leftPoint = 1 + _countChildren(leftChildId);\\n        }\\n        if (rightChildId != 0) {\\n            rightPoint = 1 + _countChildren(rightChildId);\\n        }\\n\\n        // Return the minimum point between the left and right subtrees.\\n        return _min(leftPoint, rightPoint);\\n    }\\n\\n\\n    function _calculateMinPointWithRegisterTime(uint256 nodeId, uint256 registerMaxTime\\n        ) internal view returns(uint256) {\\n\\n        Node memory node = nodes[nodeId];\\n        \\n        uint256 leftChildId = node.leftChildId;\\n        uint256 rightChildId = node.rightChildId;\\n\\n        uint256 leftChildRegsiterTime = node.registerTime;\\n        uint256 rightChildRegsiterTime = node.registerTime;\\n\\n\\n        // Calculate points for the left and right subtrees.\\n        uint256 leftPoint = 0;\\n        uint256 rightPoint = 0;\\n\\n        if (leftChildId != 0 && leftChildRegsiterTime <= registerMaxTime) {\\n            leftPoint = 1 + _countChildrenWithRegisterTime(leftChildId, registerMaxTime);\\n        }\\n        if (rightChildId != 0 && rightChildRegsiterTime <= registerMaxTime) {\\n            rightPoint = 1 + _countChildrenWithRegisterTime(rightChildId, registerMaxTime);\\n        }\\n\\n        // Return the minimum point between the left and right subtrees.\\n        return _min(leftPoint, rightPoint);\\n\\n    }\\n\\n\\n    function _min(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n\\n    /**\\n    * @dev Returns the number of all children (both left and right) that a node has using recursion.\\n    * @param nodeId The unique identifier of the node.\\n    * @return numberOfChildren total number of children that the node has.\\n    */\\n    function getNumberOfAllChildren(uint256 nodeId) public view returns (uint256 numberOfChildren) {\\n        return _countChildren(nodeId);\\n    }\\n\\n\\n    /**\\n    * @dev Recursively counts the number of all children (both left and right) that a node has.\\n    * @param nodeId The unique identifier of the node.\\n    * @return numberOfChildren total number of children that the node has.\\n    */\\n    function _countChildren(uint256 nodeId) internal view returns (uint256 numberOfChildren) {\\n\\n        Node memory node = nodes[nodeId];\\n        uint256 leftChildId = node.leftChildId;\\n        uint256 rightChildId = node.rightChildId;\\n\\n        if (leftChildId != 0) {\\n            numberOfChildren += 1 + _countChildren(leftChildId);\\n        }\\n        if (rightChildId != 0) {\\n            numberOfChildren += 1 + _countChildren(rightChildId);\\n        }\\n\\n    }\\n\\n\\n    /**\\n    * @dev Recursively counts the number of all children (both left and right) that a node has.\\n    * @param nodeId The unique identifier of the node.\\n    * @return numberOfChildren total number of children that the node has.\\n    */\\n    function _countChildrenWithRegisterTime(uint256 nodeId, uint256 maxRegisterTime) internal view returns (uint256 numberOfChildren) {\\n\\n        Node memory node = nodes[nodeId];\\n\\n        uint256 leftChildId = node.leftChildId;\\n        uint256 rightChildId = node.rightChildId;\\n\\n        uint256 leftChildRegsiterTime = node.registerTime;\\n        uint256 rightChildRegsiterTime = node.registerTime;\\n\\n        if (leftChildId != 0 && leftChildRegsiterTime <= maxRegisterTime) {\\n            numberOfChildren += 1 + _countChildren(leftChildId);\\n        }\\n        if (rightChildId != 0 && rightChildRegsiterTime <= maxRegisterTime) {\\n            numberOfChildren += 1 + _countChildren(rightChildId);\\n        }\\n\\n    }\\n\\n\\n   \\n    /* Gets the current node counter value.*/\\n    function getNodeCounter() public view returns(uint256) {\\n        return _nodeCounter.current();\\n    }\\n\\n    \\n    /* Increments the node counter to generate unique node IDs. */\\n    function incrementNodeCounter() internal {\\n        return _nodeCounter.increment();\\n    }\\n\\n\\n    function updatePoolFeeReciever(address newAddress) public virtual {\\n        poolFeeReciever = newAddress;\\n    }\\n\\n    function updatePoolFeeAmount(uint256 newAmount) public virtual {\\n        poolFeeAmount = newAmount;\\n    }\\n\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts@4.9.1/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@chainlink@0.6.1/=lib/chainlink-brownie-contracts/\",\r\n      \"@openzeppelin/contracts-upgradeable@4.9.1/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"DailyPoolDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DailyUserRewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"MonthlyPoolDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MonthlyUserRewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"}],\"name\":\"NodeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"WeeklyPoolDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WeeklyUserRewardPaid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_calculateDailyRewardByPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_calculateMonthlyRewardByPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_calculateWeeklyRewardByPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"name\":\"_getUserDailyPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"name\":\"_getUserMonthlyPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"name\":\"_getUserWeeklyPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isDailyDistributionNeeded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isMonthlyDistributionNeeded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isWeeklyDistributionNeeded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToNodeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodeCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"name\":\"getNumberOfAllChildren\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfChildren\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"firstNode\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDailyTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMonthlyTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWeeklyTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"monthlyPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uplineAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"leftChildId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rightChildId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registerTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"points\",\"type\":\"uint256[]\"}],\"name\":\"payDailyRewardByIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"payMonthlyRewardByIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"payWeeklyRewardByIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFeeReciever\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerCostAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerCostToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uplineAddress\",\"type\":\"address\"}],\"name\":\"registerNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMonthlyPoolBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updatePoolFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updatePoolFeeReciever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateWeeklyPoolBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weeklyPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PumpV2", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}