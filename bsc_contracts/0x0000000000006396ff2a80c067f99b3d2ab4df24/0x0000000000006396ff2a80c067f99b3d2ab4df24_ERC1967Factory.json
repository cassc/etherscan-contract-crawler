{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ERC1967Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Factory for deploying and managing ERC1967 proxy contracts.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/ERC1967Factory.sol)\\n/// @author jtriley-eth (https://github.com/jtriley-eth/minimum-viable-proxy)\\ncontract ERC1967Factory {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The caller is not authorized to call the function.\\n    error Unauthorized();\\n\\n    /// @dev The proxy deployment failed.\\n    error DeploymentFailed();\\n\\n    /// @dev The upgrade failed.\\n    error UpgradeFailed();\\n\\n    /// @dev The salt does not start with the caller.\\n    error SaltDoesNotStartWithCaller();\\n\\n    /// @dev `bytes4(keccak256(bytes(\\\"Unauthorized()\\\")))`.\\n    uint256 internal constant _UNAUTHORIZED_ERROR_SELECTOR = 0x82b42900;\\n\\n    /// @dev `bytes4(keccak256(bytes(\\\"DeploymentFailed()\\\")))`.\\n    uint256 internal constant _DEPLOYMENT_FAILED_ERROR_SELECTOR = 0x30116425;\\n\\n    /// @dev `bytes4(keccak256(bytes(\\\"UpgradeFailed()\\\")))`.\\n    uint256 internal constant _UPGRADE_FAILED_ERROR_SELECTOR = 0x55299b49;\\n\\n    /// @dev `bytes4(keccak256(bytes(\\\"SaltDoesNotStartWithCaller()\\\")))`.\\n    uint256 internal constant _SALT_DOES_NOT_START_WITH_CALLER_ERROR_SELECTOR = 0x2f634836;\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The admin of a proxy contract has been changed.\\n    event AdminChanged(address indexed proxy, address indexed admin);\\n\\n    /// @dev The implementation for a proxy has been upgraded.\\n    event Upgraded(address indexed proxy, address indexed implementation);\\n\\n    /// @dev A proxy has been deployed.\\n    event Deployed(address indexed proxy, address indexed implementation, address indexed admin);\\n\\n    /// @dev `keccak256(bytes(\\\"AdminChanged(address,address)\\\"))`.\\n    uint256 internal constant _ADMIN_CHANGED_EVENT_SIGNATURE =\\n        0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f;\\n\\n    /// @dev `keccak256(bytes(\\\"Upgraded(address,address)\\\"))`.\\n    uint256 internal constant _UPGRADED_EVENT_SIGNATURE =\\n        0x5d611f318680d00598bb735d61bacf0c514c6b50e1e5ad30040a4df2b12791c7;\\n\\n    /// @dev `keccak256(bytes(\\\"Deployed(address,address,address)\\\"))`.\\n    uint256 internal constant _DEPLOYED_EVENT_SIGNATURE =\\n        0xc95935a66d15e0da5e412aca0ad27ae891d20b2fb91cf3994b6a3bf2b8178082;\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    // The admin slot for a `proxy` is given by:\\n    // ```\\n    //     mstore(0x0c, address())\\n    //     mstore(0x00, proxy)\\n    //     let adminSlot := keccak256(0x0c, 0x20)\\n    // ```\\n\\n    /// @dev The ERC-1967 storage slot for the implementation in the proxy.\\n    /// `uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1`.\\n    uint256 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                      ADMIN FUNCTIONS                       */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Returns the admin of the proxy.\\n    function adminOf(address proxy) public view returns (address admin) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x0c, address())\\n            mstore(0x00, proxy)\\n            admin := sload(keccak256(0x0c, 0x20))\\n        }\\n    }\\n\\n    /// @dev Sets the admin of the proxy.\\n    /// The caller of this function must be the admin of the proxy on this factory.\\n    function changeAdmin(address proxy, address admin) public {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Check if the caller is the admin of the proxy.\\n            mstore(0x0c, address())\\n            mstore(0x00, proxy)\\n            let adminSlot := keccak256(0x0c, 0x20)\\n            if iszero(eq(sload(adminSlot), caller())) {\\n                mstore(0x00, _UNAUTHORIZED_ERROR_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n            // Store the admin for the proxy.\\n            sstore(adminSlot, admin)\\n            // Emit the {AdminChanged} event.\\n            log3(0, 0, _ADMIN_CHANGED_EVENT_SIGNATURE, proxy, admin)\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                     UPGRADE FUNCTIONS                      */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Upgrades the proxy to point to `implementation`.\\n    /// The caller of this function must be the admin of the proxy on this factory.\\n    function upgrade(address proxy, address implementation) public payable {\\n        upgradeAndCall(proxy, implementation, _emptyData());\\n    }\\n\\n    /// @dev Upgrades the proxy to point to `implementation`.\\n    /// Then, calls the proxy with abi encoded `data`.\\n    /// The caller of this function must be the admin of the proxy on this factory.\\n    function upgradeAndCall(address proxy, address implementation, bytes calldata data)\\n        public\\n        payable\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Check if the caller is the admin of the proxy.\\n            mstore(0x0c, address())\\n            mstore(0x00, proxy)\\n            if iszero(eq(sload(keccak256(0x0c, 0x20)), caller())) {\\n                mstore(0x00, _UNAUTHORIZED_ERROR_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n            // Set up the calldata to upgrade the proxy.\\n            let m := mload(0x40)\\n            mstore(m, implementation)\\n            mstore(add(m, 0x20), _IMPLEMENTATION_SLOT)\\n            calldatacopy(add(m, 0x40), data.offset, data.length)\\n            // Try upgrading the proxy and revert upon failure.\\n            if iszero(call(gas(), proxy, callvalue(), m, add(0x40, data.length), 0x00, 0x00)) {\\n                // Revert with the `UpgradeFailed` selector if there is no error returndata.\\n                if iszero(returndatasize()) {\\n                    mstore(0x00, _UPGRADE_FAILED_ERROR_SELECTOR)\\n                    revert(0x1c, 0x04)\\n                }\\n                // Otherwise, bubble up the returned error.\\n                returndatacopy(0x00, 0x00, returndatasize())\\n                revert(0x00, returndatasize())\\n            }\\n            // Emit the {Upgraded} event.\\n            log3(0, 0, _UPGRADED_EVENT_SIGNATURE, proxy, implementation)\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                      DEPLOY FUNCTIONS                      */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Deploys a proxy for `implementation`, with `admin`,\\n    /// and returns its address.\\n    /// The value passed into this function will be forwarded to the proxy.\\n    function deploy(address implementation, address admin) public payable returns (address proxy) {\\n        proxy = deployAndCall(implementation, admin, _emptyData());\\n    }\\n\\n    /// @dev Deploys a proxy for `implementation`, with `admin`,\\n    /// and returns its address.\\n    /// The value passed into this function will be forwarded to the proxy.\\n    /// Then, calls the proxy with abi encoded `data`.\\n    function deployAndCall(address implementation, address admin, bytes calldata data)\\n        public\\n        payable\\n        returns (address proxy)\\n    {\\n        proxy = _deploy(implementation, admin, bytes32(0), false, data);\\n    }\\n\\n    /// @dev Deploys a proxy for `implementation`, with `admin`, `salt`,\\n    /// and returns its deterministic address.\\n    /// The value passed into this function will be forwarded to the proxy.\\n    function deployDeterministic(address implementation, address admin, bytes32 salt)\\n        public\\n        payable\\n        returns (address proxy)\\n    {\\n        proxy = deployDeterministicAndCall(implementation, admin, salt, _emptyData());\\n    }\\n\\n    /// @dev Deploys a proxy for `implementation`, with `admin`, `salt`,\\n    /// and returns its deterministic address.\\n    /// The value passed into this function will be forwarded to the proxy.\\n    /// Then, calls the proxy with abi encoded `data`.\\n    function deployDeterministicAndCall(\\n        address implementation,\\n        address admin,\\n        bytes32 salt,\\n        bytes calldata data\\n    ) public payable returns (address proxy) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If the salt does not start with the zero address or the caller.\\n            if iszero(or(iszero(shr(96, salt)), eq(caller(), shr(96, salt)))) {\\n                mstore(0x00, _SALT_DOES_NOT_START_WITH_CALLER_ERROR_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n        proxy = _deploy(implementation, admin, salt, true, data);\\n    }\\n\\n    /// @dev Deploys the proxy, with optionality to deploy deterministically with a `salt`.\\n    function _deploy(\\n        address implementation,\\n        address admin,\\n        bytes32 salt,\\n        bool useSalt,\\n        bytes calldata data\\n    ) internal returns (address proxy) {\\n        bytes memory m = _initCode();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Create the proxy.\\n            switch useSalt\\n            case 0 { proxy := create(0, add(m, 0x13), 0x89) }\\n            default { proxy := create2(0, add(m, 0x13), 0x89, salt) }\\n            // Revert if the creation fails.\\n            if iszero(proxy) {\\n                mstore(0x00, _DEPLOYMENT_FAILED_ERROR_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Set up the calldata to set the implementation of the proxy.\\n            mstore(m, implementation)\\n            mstore(add(m, 0x20), _IMPLEMENTATION_SLOT)\\n            calldatacopy(add(m, 0x40), data.offset, data.length)\\n            // Try setting the implementation on the proxy and revert upon failure.\\n            if iszero(call(gas(), proxy, callvalue(), m, add(0x40, data.length), 0x00, 0x00)) {\\n                // Revert with the `DeploymentFailed` selector if there is no error returndata.\\n                if iszero(returndatasize()) {\\n                    mstore(0x00, _DEPLOYMENT_FAILED_ERROR_SELECTOR)\\n                    revert(0x1c, 0x04)\\n                }\\n                // Otherwise, bubble up the returned error.\\n                returndatacopy(0x00, 0x00, returndatasize())\\n                revert(0x00, returndatasize())\\n            }\\n\\n            // Store the admin for the proxy.\\n            mstore(0x0c, address())\\n            mstore(0x00, proxy)\\n            sstore(keccak256(0x0c, 0x20), admin)\\n\\n            // Emit the {Deployed} event.\\n            log4(0, 0, _DEPLOYED_EVENT_SIGNATURE, proxy, implementation, admin)\\n        }\\n    }\\n\\n    /// @dev Returns the address of the proxy deployed with `salt`.\\n    function predictDeterministicAddress(bytes32 salt) public view returns (address predicted) {\\n        bytes32 hash = initCodeHash();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and store the bytecode hash.\\n            mstore8(0x00, 0xff) // Write the prefix.\\n            mstore(0x35, hash)\\n            mstore(0x01, shl(96, address()))\\n            mstore(0x15, salt)\\n            predicted := keccak256(0x00, 0x55)\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x35, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the initialization code hash of the proxy.\\n    /// Used for mining vanity addresses with create2crunch.\\n    function initCodeHash() public view returns (bytes32 result) {\\n        bytes memory m = _initCode();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := keccak256(add(m, 0x13), 0x89)\\n        }\\n    }\\n\\n    /// @dev Returns the initialization code of a proxy created via this factory.\\n    function _initCode() internal view returns (bytes memory m) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            /**\\n             * -------------------------------------------------------------------------------------+\\n             * CREATION (9 bytes)                                                                   |\\n             * -------------------------------------------------------------------------------------|\\n             * Opcode     | Mnemonic        | Stack               | Memory                          |\\n             * -------------------------------------------------------------------------------------|\\n             * 60 runSize | PUSH1 runSize   | r                   |                                 |\\n             * 3d         | RETURNDATASIZE  | 0 r                 |                                 |\\n             * 81         | DUP2            | r 0 r               |                                 |\\n             * 60 offset  | PUSH1 offset    | o r 0 r             |                                 |\\n             * 3d         | RETURNDATASIZE  | 0 o r 0 r           |                                 |\\n             * 39         | CODECOPY        | 0 r                 | [0..runSize): runtime code      |\\n             * f3         | RETURN          |                     | [0..runSize): runtime code      |\\n             * -------------------------------------------------------------------------------------|\\n             * RUNTIME (127 bytes)                                                                  |\\n             * -------------------------------------------------------------------------------------|\\n             * Opcode      | Mnemonic       | Stack               | Memory                          |\\n             * -------------------------------------------------------------------------------------|\\n             *                                                                                      |\\n             * ::: keep some values in stack :::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d          | RETURNDATASIZE | 0                   |                                 |\\n             * 3d          | RETURNDATASIZE | 0 0                 |                                 |\\n             *                                                                                      |\\n             * ::: check if caller is factory ::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 33          | CALLER         | c 0 0               |                                 |\\n             * 73 factory  | PUSH20 factory | f c 0 0             |                                 |\\n             * 14          | EQ             | isf 0 0             |                                 |\\n             * 60 0x57     | PUSH1 0x57     | dest isf 0 0        |                                 |\\n             * 57          | JUMPI          | 0 0                 |                                 |\\n             *                                                                                      |\\n             * ::: copy calldata to memory :::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 36          | CALLDATASIZE   | cds 0 0             |                                 |\\n             * 3d          | RETURNDATASIZE | 0 cds 0 0           |                                 |\\n             * 3d          | RETURNDATASIZE | 0 0 cds 0 0         |                                 |\\n             * 37          | CALLDATACOPY   | 0 0                 | [0..calldatasize): calldata     |\\n             *                                                                                      |\\n             * ::: delegatecall to implementation ::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 36          | CALLDATASIZE   | cds 0 0             | [0..calldatasize): calldata     |\\n             * 3d          | RETURNDATASIZE | 0 cds 0 0           | [0..calldatasize): calldata     |\\n             * 7f slot     | PUSH32 slot    | s 0 cds 0 0         | [0..calldatasize): calldata     |\\n             * 54          | SLOAD          | i cds 0 0           | [0..calldatasize): calldata     |\\n             * 5a          | GAS            | g i cds 0 0         | [0..calldatasize): calldata     |\\n             * f4          | DELEGATECALL   | succ                | [0..calldatasize): calldata     |\\n             *                                                                                      |\\n             * ::: copy returndata to memory :::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d          | RETURNDATASIZE | rds succ            | [0..calldatasize): calldata     |\\n             * 60 0x00     | PUSH1 0x00     | 0 rds succ          | [0..calldatasize): calldata     |\\n             * 80          | DUP1           | 0 0 rds succ        | [0..calldatasize): calldata     |\\n             * 3e          | RETURNDATACOPY | succ                | [0..returndatasize): returndata |\\n             *                                                                                      |\\n             * ::: branch on delegatecall status :::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 60 0x52     | PUSH1 0x52     | dest succ           | [0..returndatasize): returndata |\\n             * 57          | JUMPI          |                     | [0..returndatasize): returndata |\\n             *                                                                                      |\\n             * ::: delegatecall failed, revert :::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d          | RETURNDATASIZE | rds                 | [0..returndatasize): returndata |\\n             * 60 0x00     | PUSH1 0x00     | 0 rds               | [0..returndatasize): returndata |\\n             * fd          | REVERT         |                     | [0..returndatasize): returndata |\\n             *                                                                                      |\\n             * ::: delegatecall succeeded, return ::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 5b          | JUMPDEST       |                     | [0..returndatasize): returndata |\\n             * 3d          | RETURNDATASIZE | rds                 | [0..returndatasize): returndata |\\n             * 60 0x00     | PUSH1 0x00     | 0 rds               | [0..returndatasize): returndata |\\n             * f3          | RETURN         |                     | [0..returndatasize): returndata |\\n             *                                                                                      |\\n             * ::: set new implementation (caller is factory) ::::::::::::::::::::::::::::::::::::: |\\n             * 5b          | JUMPDEST       | 0 0                 |                                 |\\n             * 3d          | RETURNDATASIZE | 0 0 0               |                                 |\\n             * 35          | CALLDATALOAD   | impl 0 0            |                                 |\\n             * 06 0x20     | PUSH1 0x20     | w impl 0 0          |                                 |\\n             * 35          | CALLDATALOAD   | slot impl 0 0       |                                 |\\n             * 55          | SSTORE         | 0 0                 |                                 |\\n             *                                                                                      |\\n             * ::: no extra calldata, return :::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 60 0x40     | PUSH1 0x40     | 2w 0 0              |                                 |\\n             * 80          | DUP1           | 2w 2w 0 0           |                                 |\\n             * 36          | CALLDATASIZE   | cds 2w 2w 0 0       |                                 |\\n             * 11          | GT             | gt 2w 0 0           |                                 |\\n             * 15          | ISZERO         | lte 2w 0 0          |                                 |\\n             * 60 0x52     | PUSH1 0x52     | dest lte 2w 0 0     |                                 |\\n             * 57          | JUMPI          | 2w 0 0              |                                 |\\n             *                                                                                      |\\n             * ::: copy extra calldata to memory :::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 36          | CALLDATASIZE   | cds 2w 0 0          |                                 |\\n             * 03          | SUB            | t 0 0               |                                 |\\n             * 80          | DUP1           | t t 0 0             |                                 |\\n             * 60 0x40     | PUSH1 0x40     | 2w t t 0 0          |                                 |\\n             * 3d          | RETURNDATASIZE | 0 2w t t 0 0        |                                 |\\n             * 37          | CALLDATACOPY   | t 0 0               | [0..t): extra calldata          |\\n             *                                                                                      |\\n             * ::: delegatecall to implementation ::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d          | RETURNDATASIZE | 0 t 0 0             | [0..t): extra calldata          |\\n             * 3d          | RETURNDATASIZE | 0 0 t 0 0           | [0..t): extra calldata          |\\n             * 35          | CALLDATALOAD   | i t 0 0             | [0..t): extra calldata          |\\n             * 5a          | GAS            | g i t 0 0           | [0..t): extra calldata          |\\n             * f4          | DELEGATECALL   | succ                | [0..t): extra calldata          |\\n             *                                                                                      |\\n             * ::: copy returndata to memory :::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d          | RETURNDATASIZE | rds succ            | [0..t): extra calldata          |\\n             * 60 0x00     | PUSH1 0x00     | 0 rds succ          | [0..t): extra calldata          |\\n             * 80          | DUP1           | 0 0 rds succ        | [0..t): extra calldata          |\\n             * 3e          | RETURNDATACOPY | succ                | [0..returndatasize): returndata |\\n             *                                                                                      |\\n             * ::: branch on delegatecall status :::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 60 0x52     | PUSH1 0x52     | dest succ           | [0..returndatasize): returndata |\\n             * 57          | JUMPI          |                     | [0..returndatasize): returndata |\\n             *                                                                                      |\\n             * ::: delegatecall failed, revert :::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d          | RETURNDATASIZE | rds                 | [0..returndatasize): returndata |\\n             * 60 0x00     | PUSH1 0x00     | 0 rds               | [0..returndatasize): returndata |\\n             * fd          | REVERT         |                     | [0..returndatasize): returndata |\\n             * -------------------------------------------------------------------------------------+\\n             */\\n\\n            m := mload(0x40)\\n            // forgefmt: disable-start\\n            switch shr(112, address())\\n            case 0 {\\n                // If the factory's address has six or more leading zero bytes.\\n                mstore(add(m, 0x75), 0x604c573d6000fd) // 7\\n                mstore(add(m, 0x6e), 0x3d3560203555604080361115604c5736038060403d373d3d355af43d6000803e) // 32\\n                mstore(add(m, 0x4e), 0x3735a920a3ca505d382bbc545af43d6000803e604c573d6000fd5b3d6000f35b) // 32\\n                mstore(add(m, 0x2e), 0x14605157363d3d37363d7f360894a13ba1a3210667c828492db98dca3e2076cc) // 32\\n                mstore(add(m, 0x0e), address()) // 14\\n                mstore(m, 0x60793d8160093d39f33d3d336d) // 9 + 4\\n            }\\n            default {\\n                mstore(add(m, 0x7b), 0x6052573d6000fd) // 7\\n                mstore(add(m, 0x74), 0x3d356020355560408036111560525736038060403d373d3d355af43d6000803e) // 32\\n                mstore(add(m, 0x54), 0x3735a920a3ca505d382bbc545af43d6000803e6052573d6000fd5b3d6000f35b) // 32\\n                mstore(add(m, 0x34), 0x14605757363d3d37363d7f360894a13ba1a3210667c828492db98dca3e2076cc) // 32\\n                mstore(add(m, 0x14), address()) // 20\\n                mstore(m, 0x607f3d8160093d39f33d3d3373) // 9 + 4\\n            }\\n            // forgefmt: disable-end\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                          HELPERS                           */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Helper function to return an empty bytes calldata.\\n    function _emptyData() internal pure returns (bytes calldata data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            data.length := 0\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"DeploymentFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaltDoesNotStartWithCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UpgradeFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"adminOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deployAndCall\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"deployDeterministic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deployDeterministicAndCall\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"predictDeterministicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"predicted\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "ERC1967Factory", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0ac7c3ccbc2d311c48bf5465b021542e0e306fe3c462c060ba6a3d2f81ff6c5f"}