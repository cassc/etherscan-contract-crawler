{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/oracle/OracleOffChain.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport './IOracleOffChain.sol';\\r\\nimport '../utils/NameVersion.sol';\\r\\nimport '../library/SafeMath.sol';\\r\\n\\r\\ncontract OracleOffChain is IOracleOffChain, NameVersion {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using SafeMath for int256;\\r\\n\\r\\n    string  public symbol;\\r\\n    bytes32 public immutable symbolId;\\r\\n    address public immutable signer;\\r\\n    uint256 public immutable delayAllowance;\\r\\n\\r\\n    int256  public immutable jumpTimeWindow; // not necessarily equals to delayAllowance\\r\\n\\r\\n    // stores timestamp/value/jump/lastSignagureTimestamp in 1 slot, instead of 4, to save gas\\r\\n    // timestamp takes 32 bits, which can hold timestamp range from 1 to 4294967295 (year 2106)\\r\\n    // value takes 96 bits with accuracy of 1e-18, which can hold value range from 1e-18 to 79,228,162,514.26\\r\\n    struct Data {\\r\\n        uint32 timestamp;\\r\\n        uint96 value;\\r\\n        int96  jump;\\r\\n        uint32 lastSignatureTimestamp;\\r\\n    }\\r\\n    Data public data;\\r\\n\\r\\n    constructor (string memory symbol_, address signer_, uint256 delayAllowance_, int256 jumpTimeWindow_, uint256 value_)\\r\\n    NameVersion('OracleOffChain', '3.0.4')\\r\\n    {\\r\\n        symbol = symbol_;\\r\\n        symbolId = keccak256(abi.encodePacked(symbol_));\\r\\n        signer = signer_;\\r\\n        delayAllowance = delayAllowance_;\\r\\n        jumpTimeWindow = jumpTimeWindow_;\\r\\n        data.value = uint96(value_);\\r\\n    }\\r\\n\\r\\n    function timestamp() external view returns (uint256) {\\r\\n        return data.timestamp;\\r\\n    }\\r\\n\\r\\n    function value() external view returns (uint256) {\\r\\n        return data.value;\\r\\n    }\\r\\n\\r\\n    function getValue() external view returns (uint256) {\\r\\n        Data memory d = data;\\r\\n        if (d.timestamp != block.timestamp) {\\r\\n            revert(string(abi.encodePacked(\\r\\n                bytes('OracleOffChain.getValue: '), bytes(symbol), bytes(' expired')\\r\\n            )));\\r\\n        }\\r\\n        return d.value;\\r\\n    }\\r\\n\\r\\n    function updateValue(\\r\\n        uint256 timestamp_,\\r\\n        uint256 value_,\\r\\n        uint8 v_,\\r\\n        bytes32 r_,\\r\\n        bytes32 s_\\r\\n    ) external returns (bool)\\r\\n    {\\r\\n        require(value_ != 0 && value_ <= type(uint96).max);\\r\\n        Data memory d = data;\\r\\n        // this is the first update in this block and value_ is newer and valid (not too old)\\r\\n        if (block.timestamp > d.timestamp && timestamp_ > d.lastSignatureTimestamp && block.timestamp < timestamp_ + delayAllowance) {\\r\\n            bytes32 message = keccak256(abi.encodePacked(symbolId, timestamp_, value_));\\r\\n            bytes32 hash = keccak256(abi.encodePacked('\\\\x19Ethereum Signed Message:\\\\n32', message));\\r\\n            address signatory = ecrecover(hash, v_, r_, s_);\\r\\n            require(signatory == signer, 'OracleOffChain.updateValue: invalid signature');\\r\\n\\r\\n            int256 interval = (block.timestamp - d.timestamp).utoi();\\r\\n            int256 jump;\\r\\n            if (interval < jumpTimeWindow) {\\r\\n                jump = d.jump * (jumpTimeWindow - interval) / jumpTimeWindow // previous jump impact\\r\\n                     + (value_.utoi() - uint256(d.value).utoi());            // current jump impact\\r\\n            } else {\\r\\n                jump = (value_.utoi() - uint256(d.value).utoi()) * jumpTimeWindow / interval; // only current jump impact\\r\\n            }\\r\\n\\r\\n            require(jump >= type(int96).min && jump <= type(int96).max); // check jump overflows\\r\\n            data = Data({\\r\\n                timestamp:              uint32(block.timestamp),\\r\\n                value:                  uint96(value_),\\r\\n                jump:                   int96(jump),\\r\\n                lastSignatureTimestamp: uint32(timestamp_)\\r\\n            });\\r\\n\\r\\n            emit NewValue(timestamp_, value_);\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function getValueWithJump() external view returns (uint256 val, int256 jump) {\\r\\n        Data memory d = data;\\r\\n        if (d.timestamp != block.timestamp) {\\r\\n            revert(string(abi.encodePacked(\\r\\n                bytes('OracleOffChain.getValueWithHistory: '), bytes(symbol), bytes(' expired')\\r\\n            )));\\r\\n        }\\r\\n        return (d.value, d.jump);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/NameVersion.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport './INameVersion.sol';\\r\\n\\r\\n/**\\r\\n * @dev Convenience contract for name and version information\\r\\n */\\r\\nabstract contract NameVersion is INameVersion {\\r\\n\\r\\n    bytes32 public immutable nameId;\\r\\n    bytes32 public immutable versionId;\\r\\n\\r\\n    constructor (string memory name, string memory version) {\\r\\n        nameId = keccak256(abi.encodePacked(name));\\r\\n        versionId = keccak256(abi.encodePacked(version));\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oracle/IOracleOffChain.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport './IOracle.sol';\\r\\n\\r\\ninterface IOracleOffChain is IOracle {\\r\\n\\r\\n    event NewValue(uint256 indexed timestamp, uint256 indexed value);\\r\\n\\r\\n    function signer() external view returns (address);\\r\\n\\r\\n    function delayAllowance() external view returns (uint256);\\r\\n\\r\\n    function updateValue(\\r\\n        uint256 timestamp,\\r\\n        uint256 value,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (bool);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/library/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    uint256 constant UMAX = 2 ** 255 - 1;\\r\\n    int256  constant IMIN = -2 ** 255;\\r\\n\\r\\n    function utoi(uint256 a) internal pure returns (int256) {\\r\\n        require(a <= UMAX, 'SafeMath.utoi: overflow');\\r\\n        return int256(a);\\r\\n    }\\r\\n\\r\\n    function itou(int256 a) internal pure returns (uint256) {\\r\\n        require(a >= 0, 'SafeMath.itou: underflow');\\r\\n        return uint256(a);\\r\\n    }\\r\\n\\r\\n    function abs(int256 a) internal pure returns (int256) {\\r\\n        require(a != IMIN, 'SafeMath.abs: overflow');\\r\\n        return a >= 0 ? a : -a;\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a <= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return a <= b ? a : b;\\r\\n    }\\r\\n\\r\\n    // rescale a uint256 from base 10**decimals1 to 10**decimals2\\r\\n    function rescale(uint256 a, uint256 decimals1, uint256 decimals2) internal pure returns (uint256) {\\r\\n        return decimals1 == decimals2 ? a : a * 10**decimals2 / 10**decimals1;\\r\\n    }\\r\\n\\r\\n    // rescale towards zero\\r\\n    // b: rescaled value in decimals2\\r\\n    // c: the remainder\\r\\n    function rescaleDown(uint256 a, uint256 decimals1, uint256 decimals2) internal pure returns (uint256 b, uint256 c) {\\r\\n        b = rescale(a, decimals1, decimals2);\\r\\n        c = a - rescale(b, decimals2, decimals1);\\r\\n    }\\r\\n\\r\\n    // rescale towards infinity\\r\\n    // b: rescaled value in decimals2\\r\\n    // c: the excessive\\r\\n    function rescaleUp(uint256 a, uint256 decimals1, uint256 decimals2) internal pure returns (uint256 b, uint256 c) {\\r\\n        b = rescale(a, decimals1, decimals2);\\r\\n        uint256 d = rescale(b, decimals2, decimals1);\\r\\n        if (d != a) {\\r\\n            b += 1;\\r\\n            c = rescale(b, decimals2, decimals1) - a;\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/INameVersion.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface INameVersion {\\r\\n\\r\\n    function nameId() external view returns (bytes32);\\r\\n\\r\\n    function versionId() external view returns (bytes32);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oracle/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport '../utils/INameVersion.sol';\\r\\n\\r\\ninterface IOracle is INameVersion {\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function symbolId() external view returns (bytes32);\\r\\n\\r\\n    function timestamp() external view returns (uint256);\\r\\n\\r\\n    function value() external view returns (uint256);\\r\\n\\r\\n    function getValue() external view returns (uint256);\\r\\n\\r\\n    function getValueWithJump() external returns (uint256 val, int256 jump);\\r\\n\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delayAllowance_\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"jumpTimeWindow_\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewValue\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"},{\"internalType\":\"int96\",\"name\":\"jump\",\"type\":\"int96\"},{\"internalType\":\"uint32\",\"name\":\"lastSignatureTimestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValueWithJump\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"jump\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jumpTimeWindow\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"updateValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OracleOffChain", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000ed0bc0ea9f54ca00e30b2fa23979de514f7bc9000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000009ca70831909c000000000000000000000000000000000000000000000000000000000000000000a564f4c2d42544355534400000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}