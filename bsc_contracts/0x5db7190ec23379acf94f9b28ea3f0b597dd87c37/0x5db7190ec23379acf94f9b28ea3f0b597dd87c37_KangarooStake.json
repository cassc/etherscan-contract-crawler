{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/root/kangaroo/contracts/KangarooStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/*\\nhttp://kangoo.group/\\n*/\\npragma solidity 0.7.6;\\n\\nimport \\\"./lib/IBEP20.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/TransferHelper.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/IPancakeRouter02.sol\\\";\\nimport './lib/IPancakeFactory.sol';\\n\\npragma experimental ABIEncoderV2;\\n\\ncontract KangarooStake is Ownable{\\n    using SafeMath for uint256;\\n    using TransferHelper for IBEP20;\\n\\n    \\n    IBEP20 immutable public lpKangarooToken;\\n    IBEP20 immutable public rooToken;\\n    IBEP20 immutable public usdtToken;\\n    address immutable public poolInitiator;\\n    address immutable public pancakeRouter;// 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\n    address public PancakePairAddress;\\n    address[] public tokenPath;\\n    bool public openSale=false;\\n\\n    struct UserInfo {\\n        uint256 depositTimestamp;\\n        uint256 sharesAmount;\\n        uint256 initialDepositAmount;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 freezingPeriod;\\n        uint256 currentRewardPerShare;\\n        uint256 sharesTotal;\\n        mapping(address => UserInfo) usersInfo;\\n    }\\n\\n\\n    PoolInfo[3] private pool;\\n    mapping(address => bool) public isUserExists;\\n    \\n    modifier notForPoolInitiator() {\\n        require(msg.sender!=poolInitiator,\\\"not for pool initiator\\\");\\n        _;\\n    }\\n\\n    modifier poolExist(uint256 _id) {\\n        require(_id >= 0 && _id<3, \\\"bad pool id\\\");\\n        _;\\n    }\\n\\n    event Stake(uint256 poolId, address user, uint256 amount);\\n    event PoolCharged(uint256 amount);\\n    event UnStake(uint256 poolId, address user, uint256 amount);\\n    event Dividends(uint256 poolId, address user, uint256 amount);\\n\\n    constructor(address _pancakeRouter,\\n        address _rooToken,\\n        address _usdtToken,\\n        address _poolInitiator,\\n        uint256[] memory _freezingPeriod\\n    ) {\\n        tokenPath=[_usdtToken,_rooToken];\\n        rooToken=IBEP20(_rooToken);\\n        usdtToken=IBEP20(_usdtToken);\\n        poolInitiator=_poolInitiator;\\n        pancakeRouter=_pancakeRouter;\\n        PancakePairAddress=IPancakeFactory(IPancakeRouter02(_pancakeRouter).factory()).getPair(_usdtToken,_rooToken);\\n        require(PancakePairAddress != address(0), \\\"create Pancake pair first\\\");\\n        lpKangarooToken=IBEP20(PancakePairAddress);\\n         \\n        for(uint256 i=0;i<3;i++){\\n            pool[i].freezingPeriod=_freezingPeriod[i];\\n            pool[i].usersInfo[_poolInitiator].depositTimestamp = block.timestamp;\\n            pool[i].usersInfo[_poolInitiator].sharesAmount = 1e12;\\n            pool[i].usersInfo[_poolInitiator].initialDepositAmount = 0;\\n        }\\n        pool[2].sharesTotal = 1e12;\\n        pool[1].sharesTotal = 2e12;\\n        pool[0].sharesTotal = 3e12;\\n\\n    }\\n\\n    function firstStaking(address _user,uint256 _amount) external {\\n        require(msg.sender==poolInitiator,\\\"can only be called by the pool initiator\\\");\\n        require(\\n            isUserExists[_user],\\n            \\\"user is not exists. Register first.\\\"\\n        );\\n        require(\\n            usdtToken.allowance(_user, address(this)) >=_amount,\\n            \\\"Increase the allowance first,call the usdt-approve method \\\"\\n        );\\n\\n        usdtToken.safeTransferFrom(\\n            _user,\\n            address(this),\\n            _amount\\n        );\\n\\n        uint256 token0amount=usdtToken.balanceOf(address(this)).div(2);\\n\\n        usdtToken.safeIncreaseAllowance(pancakeRouter, token0amount);\\n\\n        uint256[] memory amounts=IPancakeRouter02(pancakeRouter)\\n            .swapExactTokensForTokens(\\n            token0amount,\\n            0,\\n            tokenPath,\\n            address(this),\\n            block.timestamp + 60\\n        );\\n\\n        uint256 token0Amt = usdtToken.balanceOf(address(this));\\n        uint256 token1Amt = amounts[amounts.length - 1];//rooToken.balanceOf(address(this));\\n\\n        usdtToken.safeIncreaseAllowance(\\n            pancakeRouter,\\n            token0Amt\\n        );\\n        rooToken.safeIncreaseAllowance(\\n            pancakeRouter,\\n            token1Amt\\n        );\\n\\n\\n        (,, uint256 liquidity)=IPancakeRouter02(pancakeRouter).addLiquidity(\\n            tokenPath[0],\\n            tokenPath[1],\\n            token0Amt,\\n            token1Amt,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp + 60\\n        );\\n\\n        UserInfo storage user = pool[2].usersInfo[_user];\\n        \\n\\n        user.depositTimestamp = block.timestamp;\\n        user.sharesAmount = user.sharesAmount.add(liquidity);\\n        user.initialDepositAmount = user.sharesAmount.mul(pool[2].currentRewardPerShare).div(1e12);\\n\\n        for(uint256 i=0;i<3;i++){\\n            pool[i].sharesTotal = pool[i].sharesTotal.add(liquidity);\\n        }\\n\\n        emit Stake(2, _user, liquidity);\\n\\n    }\\n\\n\\n    function createUser(address userAddress) external onlyOwner returns (bool){\\n        isUserExists[userAddress]=true;\\n        return(true);\\n    }\\n\\n    function startOpenSale() external onlyOwner returns(bool) {\\n        openSale=true;\\n        return(openSale);\\n    }\\n\\n    function chargePool(uint256 amount) external returns (bool){\\n        \\n        require(amount>100,\\\"charged amount is too small\\\");\\n\\n        rooToken.safeTransferFrom(\\n            address(msg.sender),\\n            address(this),\\n            amount\\n        );\\n        \\n        uint256 chargedAmount50=amount.div(2);\\n        uint256 chargedAmount20=amount.div(5);\\n        uint256 chargedAmount30=amount.sub(chargedAmount50.add(chargedAmount20));\\n            \\n        pool[2].currentRewardPerShare=pool[2].currentRewardPerShare\\n        .add(chargedAmount20.mul(1e12).div(pool[2].sharesTotal))\\n        .add(chargedAmount30.mul(1e12).div(pool[1].sharesTotal))\\n        .add(chargedAmount50.mul(1e12).div(pool[0].sharesTotal));\\n\\n        pool[1].currentRewardPerShare=pool[1].currentRewardPerShare\\n        .add(chargedAmount30.mul(1e12).div(pool[1].sharesTotal))\\n        .add(chargedAmount50.mul(1e12).div(pool[0].sharesTotal));\\n\\n        pool[0].currentRewardPerShare=pool[0].currentRewardPerShare\\n        .add(chargedAmount50.mul(1e12).div(pool[0].sharesTotal));\\n\\n        emit PoolCharged(amount);\\n        return(true);\\n    }\\n\\n    function dividendsTransfer(uint256 _id, address _to, uint256 _amount) internal {\\n        \\n        require(openSale,\\\"not available before the OpenSale started\\\");\\n\\n        uint256 max=rooToken.balanceOf(address(this));\\n        if (_amount > max) {\\n            _amount=max;\\n        }\\n\\n        pool[_id].usersInfo[_to].initialDepositAmount = pool[_id].usersInfo[_to].sharesAmount\\n        .mul(pool[_id].currentRewardPerShare)\\n        .div(1e12);\\n\\n        rooToken.safeTransfer(_to, _amount);\\n        emit Dividends(_id, _to, _amount);\\n    }\\n\\n    \\n\\n    function stake(uint256 _id, uint256 _amount) external notForPoolInitiator poolExist(_id){\\n        require(\\n            isUserExists[msg.sender],\\n            \\\"user is not exists. Register first.\\\"\\n        );\\n        require(_amount > 0, \\\"amount must be greater than 0\\\");\\n        \\n        \\n        require(\\n            lpKangarooToken.allowance(address(msg.sender), address(this)) >=\\n                _amount,\\n            \\\"Increase the allowance first,call the approve method\\\"\\n        );\\n\\n        UserInfo storage user = pool[_id].usersInfo[msg.sender];\\n\\n        if (user.sharesAmount > 0) {\\n            uint256 dividends = calculateDividends(_id,msg.sender);\\n            if (dividends > 0) {\\n                dividendsTransfer(_id, msg.sender, dividends);\\n            }\\n        }\\n        \\n        lpKangarooToken.safeTransferFrom(\\n            address(msg.sender),\\n            address(this),\\n            _amount\\n        );\\n\\n        user.depositTimestamp = block.timestamp;\\n        user.sharesAmount = user.sharesAmount.add(_amount);\\n        user.initialDepositAmount = user.sharesAmount.mul(pool[_id].currentRewardPerShare).div(1e12);\\n        for(uint256 i=0;i<=_id;i++){\\n            pool[i].sharesTotal = pool[i].sharesTotal.add(_amount);\\n        }\\n        emit Stake(_id, msg.sender, _amount);\\n      \\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _id) external notForPoolInitiator poolExist(_id){\\n        \\n        UserInfo storage user = pool[_id].usersInfo[msg.sender];\\n        uint256 unstaked_shares = user.sharesAmount;\\n        require(\\n            unstaked_shares > 0,\\n            \\\"you do not have staked tokens, stake first\\\"\\n        );\\n        require(isTokensFrozen(_id, msg.sender) == false, \\\"tokens are frozen\\\");\\n        user.sharesAmount = 0;\\n        user.initialDepositAmount = 0;\\n\\n        for(uint256 i=0;i<=_id;i++){\\n            pool[i].sharesTotal = pool[i].sharesTotal.sub(unstaked_shares);\\n        }\\n        lpKangarooToken.safeTransfer(msg.sender, unstaked_shares);\\n        emit UnStake(_id, msg.sender, unstaked_shares);\\n    }\\n\\n    function unstake(uint256 _id, uint256 _amount) external notForPoolInitiator poolExist(_id){\\n        \\n        UserInfo storage user = pool[_id].usersInfo[msg.sender];\\n\\n        require(\\n            _amount > 0 && _amount<=user.sharesAmount,\\\"bad _amount\\\"\\n        );\\n        require(isTokensFrozen(_id, msg.sender) == false, \\\"tokens are frozen\\\");\\n\\n        uint256 dividends = calculateDividends(_id, msg.sender);\\n        if (dividends > 0) {\\n            dividendsTransfer(_id, msg.sender, dividends);\\n        }\\n        user.sharesAmount=user.sharesAmount.sub(_amount);\\n        user.initialDepositAmount = user.sharesAmount.mul(pool[_id].currentRewardPerShare).div(1e12);\\n        for(uint256 i=0;i<=_id;i++){\\n            pool[i].sharesTotal = pool[i].sharesTotal.sub(_amount);\\n        }\\n        \\n        lpKangarooToken.safeTransfer(msg.sender, _amount);\\n\\n        emit UnStake(_id, msg.sender, _amount);\\n    }\\n\\n    function getDividends(uint256 _id) external poolExist(_id){\\n        require(\\n            pool[_id].usersInfo[msg.sender].sharesAmount > 0,\\n            \\\"you do not have staked tokens, stake first\\\"\\n        );\\n        uint256 dividends = calculateDividends(_id, msg.sender);\\n        if (dividends > 0) {\\n            dividendsTransfer(_id, msg.sender, dividends);\\n        }\\n    }\\n\\n    function calculateDividends(uint256 _id, address userAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return pool[_id].usersInfo[userAddress].sharesAmount\\n        .mul(pool[_id].currentRewardPerShare)\\n        .div(1e12)\\n        .sub(pool[_id].usersInfo[userAddress].initialDepositAmount);\\n    }\\n\\n    function isTokensFrozen(uint256 _id, address userAddress) public view returns (bool) {\\n        return (pool[_id].freezingPeriod >(block.timestamp.sub(pool[_id].usersInfo[userAddress].depositTimestamp)));\\n    }\\n\\n    function getPoolSharesTotal(uint256 _id)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return pool[_id].sharesTotal;\\n    }\\n\\n    function getUser(uint256 _id,address userAddress)\\n        external\\n        view\\n        returns (UserInfo memory)\\n    {\\n        return pool[_id].usersInfo[userAddress];\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/root/kangaroo/contracts/lib/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.4 <0.8.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"/root/kangaroo/contracts/lib/IPancakeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"\r\n    },\r\n    \"/root/kangaroo/contracts/lib/IPancakeRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"\r\n    },\r\n    \"/root/kangaroo/contracts/lib/Ownable.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.4 <0.8.0;\\n// \\\"SPDX-License-Identifier: Apache License 2.0\\\"\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor () {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @return the address of the owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner());\\n        _;\\n    }\\n\\n    /**\\n     * @return true if `msg.sender` is the owner of the contract.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to relinquish control of the contract.\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n     * It will not be possible to call the functions with the `onlyOwner`\\n     * modifier anymore.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"/root/kangaroo/contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.4 <0.8.0;\\n\\n/**\\n * Copyright (c) 2016-2019 zOS Global Limited\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/root/kangaroo/contracts/lib/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.4 <0.8.0;\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary TransferHelper {\\n    using SafeMath for uint256;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            address(token).call(\\n                abi.encodeWithSelector(token.transfer.selector, to, value)\\n            );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            address(token).call(\\n                abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n            );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).add(value);\\n\\n        (bool success, bytes memory data) =\\n            address(token).call(\\n                abi.encodeWithSelector(token.approve.selector,spender,newAllowance)\\n            );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"INCREASE_ALLOWANCE_FAILED\\\"\\n        );     \\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancakeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rooToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolInitiator\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_freezingPeriod\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Dividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PancakePairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"calculateDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"chargePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"createUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"firstStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPoolSharesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDepositAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct KangarooStake.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isTokensFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpKangarooToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInitiator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rooToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startOpenSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "KangarooStake", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000058957ddfbaaa4b643a7dc3adef6df6e4606fcb9e00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000678f151c3d892eca10b9e7a83217c60d7fefb34d00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000001da9c000000000000000000000000000000000000000000000000000000000000ed4e000000000000000000000000000000000000000000000000000000000000278d00", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}