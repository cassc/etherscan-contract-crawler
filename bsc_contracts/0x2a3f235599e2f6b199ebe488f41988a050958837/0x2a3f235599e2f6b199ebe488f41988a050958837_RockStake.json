{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: RockStake.sol\r\n\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n\r\ncontract RockStake is Ownable {\r\n    struct Stake {\r\n        address owner;\r\n        uint256 amount;\r\n        uint256 time;\r\n        uint256 endsAt;\r\n        uint256 dailyReward;\r\n        uint256 daysToReward;\r\n        uint256 lastRewardClaimAt;\r\n    }\r\n\r\n    struct Reward {\r\n        uint256 oneMonth;\r\n        uint256 threeMonth;\r\n        uint256 sixMonth;\r\n        uint256 oneYear;\r\n    }\r\n    Reward public tokenRewards;\r\n\r\n    // Time durations in seconds\r\n    uint256 oneMonth;\r\n    uint256 threeMonths;\r\n    uint256 sixMonths;\r\n    uint256 oneYear;\r\n\r\n    // State level dynamics\r\n    IERC20 public token;\r\n    address public rewardsWallet;\r\n    address public stakesWallet;\r\n    bool public initialized;\r\n    uint256 public minimumStakingAmount;\r\n    uint256 public totalStaked;\r\n    uint256 public currentlyStaked;\r\n\r\n    // Stakes by the user\r\n    mapping(bytes32 => Stake) public stakes;\r\n    mapping(address => uint256) public totalUserStakes;\r\n    mapping(address => bytes32[]) public userStakes;\r\n\r\n    event Staked(\r\n        address indexed staker,\r\n        bytes32 stakeId,\r\n        uint256 amount,\r\n        uint256 endsAt\r\n    );\r\n\r\n    event Unstaked(address indexed staker, bytes32 stakeId, uint256 amount);\r\n\r\n    constructor(IERC20 _token) {\r\n        initialized = false;\r\n        token = _token;\r\n    }\r\n\r\n    function setRewardsWallet(address newWallet) public onlyOwner {\r\n        rewardsWallet = newWallet;\r\n    }\r\n\r\n    function setStakesWallet(address newWallet) public onlyOwner {\r\n        stakesWallet = newWallet;\r\n    }\r\n\r\n    /**\r\n     * Set up the staking smart contract\r\n     *\r\n     * @param _amount Initial amount how many tokens are staked at once\r\n     * @param _oneMonth initial One Month staking Reward\r\n     * @param _threeMonth initial three Months staking Reward\r\n     * @param _sixMonth initial six Months staking Reward\r\n     * @param _oneYear initial One Year staking Reward\r\n     */\r\n    function initializeStakingContract(\r\n        uint256 _amount,\r\n        uint256 _oneMonth,\r\n        uint256 _threeMonth,\r\n        uint256 _sixMonth,\r\n        uint256 _oneYear,\r\n        uint256 _oneMonthTime\r\n    ) external onlyOwner {\r\n        require(initialized == false, \"Contract is already initialized\");\r\n        setMinimumStakingAmount(_amount);\r\n        setRewardParameters(_oneMonth, _threeMonth, _sixMonth, _oneYear);\r\n        initialized = true;\r\n\r\n        oneMonth = _oneMonthTime;\r\n        threeMonths = _oneMonthTime * 3;\r\n        sixMonths = _oneMonthTime * 6;\r\n        oneYear = _oneMonthTime * 12;\r\n    }\r\n\r\n    function changeTimeLimits(uint256 _oneMonth) public onlyOwner {\r\n        oneMonth = _oneMonth;\r\n        threeMonths = _oneMonth * 3;\r\n        sixMonths = _oneMonth * 6;\r\n        oneYear = _oneMonth * 12;\r\n    }\r\n\r\n    function setRewardParameters(\r\n        uint256 _oneMonth,\r\n        uint256 _threeMonth,\r\n        uint256 _sixMonth,\r\n        uint256 _oneYear\r\n    ) public onlyOwner {\r\n        require(\r\n            _oneMonth > 0 && _threeMonth > 0 && _sixMonth > 0 && _oneYear > 0,\r\n            \"One of the Rewards is zero\"\r\n        );\r\n        tokenRewards.oneMonth = _oneMonth;\r\n        tokenRewards.threeMonth = _threeMonth;\r\n        tokenRewards.sixMonth = _sixMonth;\r\n        tokenRewards.oneYear = _oneYear;\r\n    }\r\n\r\n    /**\r\n     * owner can adjust required stake amount and duration.\r\n     */\r\n    function setMinimumStakingAmount(uint256 _amount) public onlyOwner {\r\n        require(_amount > 0, \"Amount cannot be zero\");\r\n        minimumStakingAmount = _amount;\r\n    }\r\n\r\n    /**\r\n     * Stake tokens sent on the contract.\r\n     *\r\n     * @param stakeId bytes32 Id generated from amount and address of staker\r\n     * @param staker On whose behalf we are staking\r\n     * @param amount Amount of tokens to stake\r\n     */\r\n    function _stakeInternal(\r\n        bytes32 stakeId,\r\n        address staker,\r\n        uint256 amount,\r\n        uint256 _stakingTime\r\n    ) internal {\r\n        uint256 endsAt = block.timestamp + _stakingTime;\r\n\r\n        uint256 dailyReward = 0;\r\n        if (_stakingTime == oneMonth) {\r\n            dailyReward = amount * tokenRewards.oneMonth / 100 / (30 * 1);\r\n        } else if (_stakingTime == threeMonths) {\r\n            dailyReward = amount * tokenRewards.threeMonth / 100 / (30 * 3);\r\n        } else if (_stakingTime == sixMonths) {\r\n            dailyReward = amount * tokenRewards.sixMonth / 100 / (30 * 6);\r\n        } else if (_stakingTime == oneYear) {\r\n            dailyReward = amount * tokenRewards.oneYear / 100 / (30 * 12);\r\n        }\r\n\r\n        stakes[stakeId] = Stake(\r\n            staker,\r\n            amount,\r\n            _stakingTime,\r\n            endsAt,\r\n            dailyReward,\r\n            _stakingTime / oneMonth * 30,\r\n            block.timestamp\r\n        );\r\n        userStakes[staker].push(stakeId);\r\n        totalUserStakes[staker]++;\r\n        totalStaked += amount;\r\n        currentlyStaked += amount;\r\n\r\n        emit Staked(staker, stakeId, amount, endsAt);\r\n    }\r\n\r\n    /**\r\n     * Return data for a single stake.\r\n     */\r\n    function getStakeInformation(bytes32 stakeId)\r\n        public\r\n        view\r\n        returns (\r\n            address staker,\r\n            uint256 amount,\r\n            uint256 stakingPeriod,\r\n            uint256 endsAt,\r\n            uint256 dailyReward,\r\n            uint256 remainingDailyRewards,\r\n            uint256 lastRewardClaimTime\r\n        )\r\n    {\r\n        Stake memory s = stakes[stakeId];\r\n        return (s.owner, s.amount, s.time, s.endsAt, s.dailyReward, s.daysToReward, s.lastRewardClaimAt);\r\n    }\r\n\r\n    /**\r\n     * Check if a stakeId has been allocated\r\n     */\r\n    function isStake(bytes32 stakeId) public view returns (bool) {\r\n        return stakes[stakeId].owner != address(0x0);\r\n    }\r\n\r\n    /**\r\n     * Return true if the user has still tokens in the staking contract for a previous stake.\r\n     */\r\n    function isStillStaked(bytes32 stakeId) public view returns (bool) {\r\n        return stakes[stakeId].endsAt != 0;\r\n    }\r\n\r\n    /**\r\n     * Send tokens back to the staker.\r\n     *@param stakeId bytes32 Id of Stake recieved on staking\r\n     */\r\n    function unstake(bytes32 stakeId) public {\r\n        Stake memory s = stakes[stakeId];\r\n\r\n        require(s.endsAt != 0, \"Already unstaked\");\r\n        require(_msgSender() == s.owner, \"Only owner can unstake\");\r\n        require(s.endsAt <= block.timestamp, \"Cannot unstake before time\");\r\n\r\n        if (s.daysToReward > 0) {\r\n            claimRewards(stakeId);\r\n        }\r\n\r\n        // Mark the stake released\r\n        stakes[stakeId].endsAt = 0;\r\n        stakes[stakeId].amount = 0;\r\n        stakes[stakeId].time = 0;\r\n        stakes[stakeId].daysToReward = 0;\r\n        currentlyStaked -= s.amount;\r\n        totalUserStakes[msg.sender]--;\r\n\r\n        emit Unstaked(s.owner, stakeId, s.amount);\r\n\r\n        // Use ERC-20 to transfer tokens to the wallet of the owner\r\n        token.transferFrom(stakesWallet, s.owner, s.amount);\r\n    }\r\n\r\n    /**\r\n     * Allow staker to cash out their daily rewards\r\n     *@param stakeId bytes32 Id of Stake recieved on staking\r\n     */\r\n    function claimRewards(bytes32 stakeId) public {\r\n        Stake memory s = stakes[stakeId];\r\n\r\n        require(s.endsAt != 0, \"Already unstaked\");\r\n        require(_msgSender() == s.owner, \"Only owner can claim\");\r\n        require(s.daysToReward > 0, \"You have already claimed all the daily rewards in this stake\");\r\n\r\n        uint256 daysUnclaimed = (block.timestamp - s.lastRewardClaimAt) /\r\n            (oneMonth / 30);\r\n        \r\n        if (s.daysToReward < daysUnclaimed) {\r\n            daysUnclaimed = s.daysToReward;\r\n        }\r\n\r\n        require(daysUnclaimed > 0, \"Wait at least 1 day to claim rewards\");\r\n\r\n        // Use ERC-20 to transfer reward tokens to the wallet of the owner\r\n        token.transferFrom(rewardsWallet, s.owner, daysUnclaimed * s.dailyReward);\r\n        stakes[stakeId].lastRewardClaimAt = s.lastRewardClaimAt + daysUnclaimed * (oneMonth / 30);\r\n        stakes[stakeId].daysToReward -= daysUnclaimed;\r\n    }\r\n\r\n    function _keyGen(address sender, uint256 amount)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        bytes32 uid = keccak256(abi.encodePacked(sender, amount));\r\n        return uid;\r\n    }\r\n\r\n    function stake(uint256 amount, uint256 _time) public {\r\n        require(\r\n            _time == oneMonth ||\r\n                _time == threeMonths ||\r\n                _time == sixMonths ||\r\n                _time == oneYear,\r\n            \"Staking Time should be in time limits defined\"\r\n        );\r\n        require(\r\n            amount >= minimumStakingAmount,\r\n            \"Staking must be greater then or equal to Minimum Staking Amount\"\r\n        );\r\n        require(\r\n            token.allowance(msg.sender, address(this)) >= amount,\r\n            \"Staking amount not approved\"\r\n        );\r\n\r\n        token.transferFrom(msg.sender, stakesWallet, amount);\r\n        bytes32 stakeId = _keyGen(msg.sender, block.timestamp);\r\n        _stakeInternal(stakeId, msg.sender, amount, _time);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stakeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stakeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oneMonth\",\"type\":\"uint256\"}],\"name\":\"changeTimeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stakeId\",\"type\":\"bytes32\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentlyStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stakeId\",\"type\":\"bytes32\"}],\"name\":\"getStakeInformation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingDailyRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardClaimTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oneMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_threeMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sixMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oneYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oneMonthTime\",\"type\":\"uint256\"}],\"name\":\"initializeStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stakeId\",\"type\":\"bytes32\"}],\"name\":\"isStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stakeId\",\"type\":\"bytes32\"}],\"name\":\"isStillStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinimumStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oneMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_threeMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sixMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oneYear\",\"type\":\"uint256\"}],\"name\":\"setRewardParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setRewardsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setStakesWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daysToReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardClaimAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oneMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threeMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sixMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oneYear\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalUserStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stakeId\",\"type\":\"bytes32\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RockStake", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c3387e4285e9f80a7cfdf02b4ac6cdf2476a528a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://35d6902fc687ade6b496c77008ee1fe64b337d31db043c96f4a3752a21b1de41"}