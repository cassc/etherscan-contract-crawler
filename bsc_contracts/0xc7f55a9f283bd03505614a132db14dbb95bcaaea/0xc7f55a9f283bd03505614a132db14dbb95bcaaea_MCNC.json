{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n function _msgSender() internal view virtual returns (address) {\\r\\n return msg.sender;\\r\\n }\\r\\n\\r\\n function _msgData() internal view virtual returns (bytes calldata) {\\r\\n return msg.data;\\r\\n }\\r\\n}\\r\\n\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n mapping(address =\\u003e uint256) internal _balances; // modified from private to internal\\r\\n\\r\\n mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n uint256 private _totalSupply;\\r\\n\\r\\n string private _name;\\r\\n string private _symbol;\\r\\n\\r\\n /**\\r\\n * @dev Sets the values for {name} and {symbol}.\\r\\n *\\r\\n * The default value of {decimals} is 18. To select a different value for\\r\\n * {decimals} you should overload it.\\r\\n *\\r\\n * All two of these values are immutable: they can only be set once during\\r\\n * construction.\\r\\n */\\r\\n constructor(string memory name_, string memory symbol_) {\\r\\n _name = name_;\\r\\n _symbol = symbol_;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Returns the name of the token.\\r\\n */\\r\\n function name() public view virtual override returns (string memory) {\\r\\n return _name;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n * name.\\r\\n */\\r\\n function symbol() public view virtual override returns (string memory) {\\r\\n return _symbol;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Returns the number of decimals used to get its user representation.\\r\\n * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n *\\r\\n * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n * overridden;\\r\\n *\\r\\n * NOTE: This information is only used for _display_ purposes: it in\\r\\n * no way affects any of the arithmetic of the contract, including\\r\\n * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n */\\r\\n function decimals() public view virtual override returns (uint8) {\\r\\n return 18;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev See {IERC20-totalSupply}.\\r\\n */\\r\\n function totalSupply() public view virtual override returns (uint256) {\\r\\n return _totalSupply;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev See {IERC20-balanceOf}.\\r\\n */\\r\\n function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n return _balances[account];\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev See {IERC20-transfer}.\\r\\n *\\r\\n * Requirements:\\r\\n *\\r\\n * - `recipient` cannot be the zero address.\\r\\n * - the caller must have a balance of at least `amount`.\\r\\n */\\r\\n function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n _transfer(_msgSender(), recipient, amount);\\r\\n return true;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev See {IERC20-allowance}.\\r\\n */\\r\\n function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n return _allowances[owner][spender];\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev See {IERC20-approve}.\\r\\n *\\r\\n * Requirements:\\r\\n *\\r\\n * - `spender` cannot be the zero address.\\r\\n */\\r\\n function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n _approve(_msgSender(), spender, amount);\\r\\n return true;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev See {IERC20-transferFrom}.\\r\\n *\\r\\n * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n *\\r\\n * Requirements:\\r\\n *\\r\\n * - `sender` and `recipient` cannot be the zero address.\\r\\n * - `sender` must have a balance of at least `amount`.\\r\\n * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n * `amount`.\\r\\n */\\r\\n function transferFrom(\\r\\n address sender,\\r\\n address recipient,\\r\\n uint256 amount\\r\\n ) public virtual override returns (bool) {\\r\\n _transfer(sender, recipient, amount);\\r\\n\\r\\n uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n unchecked {\\r\\n _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n }\\r\\n\\r\\n return true;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n *\\r\\n * This is an alternative to {approve} that can be used as a mitigation for\\r\\n * problems described in {IERC20-approve}.\\r\\n *\\r\\n * Emits an {Approval} event indicating the updated allowance.\\r\\n *\\r\\n * Requirements:\\r\\n *\\r\\n * - `spender` cannot be the zero address.\\r\\n */\\r\\n function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n return true;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n *\\r\\n * This is an alternative to {approve} that can be used as a mitigation for\\r\\n * problems described in {IERC20-approve}.\\r\\n *\\r\\n * Emits an {Approval} event indicating the updated allowance.\\r\\n *\\r\\n * Requirements:\\r\\n *\\r\\n * - `spender` cannot be the zero address.\\r\\n * - `spender` must have allowance for the caller of at least\\r\\n * `subtractedValue`.\\r\\n */\\r\\n function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n require(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n unchecked {\\r\\n _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n }\\r\\n\\r\\n return true;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n *\\r\\n * This internal function is equivalent to {transfer}, and can be used to\\r\\n * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n *\\r\\n * Emits a {Transfer} event.\\r\\n *\\r\\n * Requirements:\\r\\n *\\r\\n * - `sender` cannot be the zero address.\\r\\n * - `recipient` cannot be the zero address.\\r\\n * - `sender` must have a balance of at least `amount`.\\r\\n */\\r\\n function _transfer(\\r\\n address sender,\\r\\n address recipient,\\r\\n uint256 amount\\r\\n ) internal virtual {\\r\\n require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n uint256 senderBalance = _balances[sender];\\r\\n require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n unchecked {\\r\\n _balances[sender] = senderBalance - amount;\\r\\n }\\r\\n _balances[recipient] += amount;\\r\\n\\r\\n emit Transfer(sender, recipient, amount);\\r\\n\\r\\n _afterTokenTransfer(sender, recipient, amount);\\r\\n }\\r\\n\\r\\n /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n * the total supply.\\r\\n *\\r\\n * Emits a {Transfer} event with `from` set to the zero address.\\r\\n *\\r\\n * Requirements:\\r\\n *\\r\\n * - `account` cannot be the zero address.\\r\\n */\\r\\n function _mint(address account, uint256 amount) internal virtual {\\r\\n require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n _totalSupply += amount;\\r\\n _balances[account] += amount;\\r\\n emit Transfer(address(0), account, amount);\\r\\n\\r\\n _afterTokenTransfer(address(0), account, amount);\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n * total supply.\\r\\n *\\r\\n * Emits a {Transfer} event with `to` set to the zero address.\\r\\n *\\r\\n * Requirements:\\r\\n *\\r\\n * - `account` cannot be the zero address.\\r\\n * - `account` must have at least `amount` tokens.\\r\\n */\\r\\n function _burn(address account, uint256 amount) internal virtual {\\r\\n require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n uint256 accountBalance = _balances[account];\\r\\n require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n unchecked {\\r\\n _balances[account] = accountBalance - amount;\\r\\n }\\r\\n _totalSupply -= amount;\\r\\n\\r\\n emit Transfer(account, address(0), amount);\\r\\n\\r\\n _afterTokenTransfer(account, address(0), amount);\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n *\\r\\n * This internal function is equivalent to `approve`, and can be used to\\r\\n * e.g. set automatic allowances for certain subsystems, etc.\\r\\n *\\r\\n * Emits an {Approval} event.\\r\\n *\\r\\n * Requirements:\\r\\n *\\r\\n * - `owner` cannot be the zero address.\\r\\n * - `spender` cannot be the zero address.\\r\\n */\\r\\n function _approve(\\r\\n address owner,\\r\\n address spender,\\r\\n uint256 amount\\r\\n ) internal virtual {\\r\\n require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n _allowances[owner][spender] = amount;\\r\\n emit Approval(owner, spender, amount);\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Hook that is called before any transfer of tokens. This includes\\r\\n * minting and burning.\\r\\n *\\r\\n * Calling conditions:\\r\\n *\\r\\n * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n * will be transferred to `to`.\\r\\n * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n * - `from` and `to` are never both zero.\\r\\n *\\r\\n * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n */\\r\\n function _beforeTokenTransfer(\\r\\n address from,\\r\\n address to,\\r\\n uint256 amount\\r\\n ) internal virtual {}\\r\\n\\r\\n /**\\r\\n * @dev Hook that is called after any transfer of tokens. This includes\\r\\n * minting and burning.\\r\\n *\\r\\n * Calling conditions:\\r\\n *\\r\\n * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n * has been transferred to `to`.\\r\\n * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n * - when `to` is zero, `amount` of ``from``\\u0027s tokens have been burned.\\r\\n * - `from` and `to` are never both zero.\\r\\n *\\r\\n * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n */\\r\\n function _afterTokenTransfer(\\r\\n address from,\\r\\n address to,\\r\\n uint256 amount\\r\\n ) internal virtual {}\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n /**\\r\\n * @dev Returns the amount of tokens in existence.\\r\\n */\\r\\n function totalSupply() external view returns (uint256);\\r\\n\\r\\n /**\\r\\n * @dev Returns the amount of tokens owned by `account`.\\r\\n */\\r\\n function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n /**\\r\\n * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n *\\r\\n * Returns a boolean value indicating whether the operation succeeded.\\r\\n *\\r\\n * Emits a {Transfer} event.\\r\\n */\\r\\n function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n /**\\r\\n * @dev Returns the remaining number of tokens that `spender` will be\\r\\n * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n * zero by default.\\r\\n *\\r\\n * This value changes when {approve} or {transferFrom} are called.\\r\\n */\\r\\n function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n /**\\r\\n * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n *\\r\\n * Returns a boolean value indicating whether the operation succeeded.\\r\\n *\\r\\n * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n * that someone may use both the old and the new allowance by unfortunate\\r\\n * transaction ordering. One possible solution to mitigate this race\\r\\n * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n * desired value afterwards:\\r\\n * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n *\\r\\n * Emits an {Approval} event.\\r\\n */\\r\\n function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n /**\\r\\n * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n * allowance.\\r\\n *\\r\\n * Returns a boolean value indicating whether the operation succeeded.\\r\\n *\\r\\n * Emits a {Transfer} event.\\r\\n */\\r\\n function transferFrom(\\r\\n address sender,\\r\\n address recipient,\\r\\n uint256 amount\\r\\n ) external returns (bool);\\r\\n\\r\\n /**\\r\\n * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n * another (`to`).\\r\\n *\\r\\n * Note that `value` may be zero.\\r\\n */\\r\\n event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n /**\\r\\n * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n * a call to {approve}. `value` is the new allowance.\\r\\n */\\r\\n event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n /**\\r\\n * @dev Returns the name of the token.\\r\\n */\\r\\n function name() external view returns (string memory);\\r\\n\\r\\n /**\\r\\n * @dev Returns the symbol of the token.\\r\\n */\\r\\n function symbol() external view returns (string memory);\\r\\n\\r\\n /**\\r\\n * @dev Returns the decimals places of the token.\\r\\n */\\r\\n function decimals() external view returns (uint8);\\r\\n}\\r\\n\"},\"Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n /**\\r\\n * @dev Returns the largest of two numbers.\\r\\n */\\r\\n function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n return a \\u003e= b ? a : b;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Returns the smallest of two numbers.\\r\\n */\\r\\n function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n return a \\u003c b ? a : b;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Returns the average of two numbers. The result is rounded towards\\r\\n * zero.\\r\\n */\\r\\n function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n // (a + b) / 2 can overflow.\\r\\n return (a \\u0026 b) + (a ^ b) / 2;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Returns the ceiling of the division of two numbers.\\r\\n *\\r\\n * This differs from standard division with `/` in that it rounds up instead\\r\\n * of rounding down.\\r\\n */\\r\\n function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n return a / b + (a % b == 0 ? 0 : 1);\\r\\n }\\r\\n}\\r\\n\"},\"MCNC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Math.sol\\\";\\r\\n\\r\\ncontract MCNC is ERC20, Ownable {\\r\\n\\r\\n using Math for uint256;\\r\\n\\r\\n address public walletPartner = 0x425aa78Bbaa3570aF8E42A5bc6A7c09dE8396D5b;\\r\\n address public walletCommission = 0xa2172c0Aadc360972367F4f137d160533BFE90F1;\\r\\n address public walletROI = 0x202418E444879B35817054bC9CDD46cC965AD58B;\\r\\n\\r\\n address public operatorAddress;\\r\\n\\r\\n uint256 public MAX_BURN_AMOUNT = 0 * (10 ** decimals());\\r\\n uint256 public BURN_AMOUNT = 0 * (10 ** decimals());\\r\\n uint256 public lastBurnDay = block.timestamp;\\r\\n uint256 public burnedAmount = 0;\\r\\n\\r\\n uint256 private _maxStakingAmount = 20_000_000 * (10 ** decimals());\\r\\n uint256 private _maxStakingAmountPerAccount = 10_000_000 * (10 ** decimals());\\r\\n uint256 private _totalStakingAmount = 0;\\r\\n uint256 private _stakingPeriod = block.timestamp + 29 days;\\r\\n uint256 private _stakingFirstPeriod = block.timestamp + 29 days;\\r\\n uint256 private _stakingSecondPeriod = block.timestamp + 29 days;\\r\\n\\r\\n uint256 private _stakingFirstPeriodReward = 7;\\r\\n uint256 private _stakingSecondPeriodReward = 7;\\r\\n \\r\\n uint256 public deployedTime = block.timestamp;\\r\\n\\r\\n uint256 public lastUnlockTime;\\r\\n uint256 public unlockAmountPerMonth = 100_000 * (10 ** decimals());\\r\\n \\r\\n // Mapping owner address to staked token count\\r\\n mapping (address =\\u003e uint) _stakedBalances;\\r\\n \\r\\n // Mapping from owner to last reward time\\r\\n mapping (address =\\u003e uint) _rewardedLastTime;\\r\\n\\r\\n event StakingSucceed(address indexed account, uint256 totalStakedAmount);\\r\\n event WithdrawSucceed(address indexed account, uint256 remainedStakedAmount);\\r\\n\\r\\n /**\\r\\n * @dev modifier which requires that account must be operator\\r\\n */\\r\\n modifier onlyOperator() {\\r\\n require(_msgSender() == operatorAddress, \\\"operator: wut?\\\");\\r\\n _;\\r\\n }\\r\\n\\r\\n\\r\\n /**\\r\\n * @dev Constructor: mint pre-defined amount of tokens to special wallets.\\r\\n */\\r\\n constructor() ERC20(\\\"Multi Network Connect\\\", \\\"MCNC\\\") {\\r\\n operatorAddress = _msgSender();\\r\\n //uint totalSupply = 100_000_000 * (10 ** decimals());\\r\\n\\r\\n // 10M of total supply to walletPartner\\r\\n _mint(walletPartner, 10_000_000 * (10 ** decimals()));\\r\\n\\r\\n // 10M% of total supply to walletCommission\\r\\n _mint(walletCommission, 10_000_000 * (10 ** decimals()));\\r\\n\\r\\n // 10M of total supply to walletROI\\r\\n _mint(walletROI, 10_000_000 * (10 ** decimals()));\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev set operator address\\r\\n * callable by owner\\r\\n */\\r\\n function setOperator(address _operator) external onlyOwner {\\r\\n require(_operator != address(0), \\\"Cannot be zero address\\\");\\r\\n operatorAddress = _operator;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Stake `amount` tokens from `msg.sender` to `walletOrigin`, calculate reward upto now.\\r\\n *\\r\\n * Emits a {StakingSucceed} event with `account` and total staked balance of `account`\\r\\n *\\r\\n * Requirements:\\r\\n *\\r\\n * - `account` must have at least `amount` tokens\\r\\n * - staking moment have to be in staking period\\r\\n * - staked balance of each account can not exceed `_maxStakingAmountPerAccount`\\r\\n * - total staking amount can not exceed `_totalStakingAmount`\\r\\n */\\r\\n function stake(uint amount) external {\\r\\n \\r\\n address account = _msgSender();\\r\\n\\r\\n require(balanceOf(account) \\u003e= amount, \\\"insufficient balance for staking.\\\");\\r\\n require(block.timestamp \\u003c= _stakingPeriod, \\\"The time is over staking period.\\\");\\r\\n\\r\\n _updateReward(account);\\r\\n\\r\\n _stakedBalances[account] += amount;\\r\\n require(_stakedBalances[account] \\u003c= _maxStakingAmountPerAccount, \\\"This account overflows staking amount\\\");\\r\\n \\r\\n _totalStakingAmount += amount;\\r\\n require(_totalStakingAmount \\u003c= _maxStakingAmount, \\\"Total staking amount overflows its limit.\\\");\\r\\n \\r\\n _transfer(account, walletROI, amount);\\r\\n \\r\\n emit StakingSucceed(account, _stakedBalances[account]);\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Returns the amount of tokens owned by `account`. Something different from ERC20 is\\r\\n * adding reward which is not yet appended to account wallet.\\r\\n */\\r\\n function balanceOf(address account) public view override returns (uint) {\\r\\n return ERC20.balanceOf(account) + getAvailableReward(account);\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Get account\\u0027s reward which is yielded after last rewarded time.\\r\\n *\\r\\n * @notice if getting moment is after stakingPeriod, the reward must be 0.\\r\\n * \\r\\n * First `if` statement is in case of `lastTime` is before firstPeriod.\\r\\n * `lastTime` block.timestamp(if1) block.timestamp(if2)\\r\\n * ||----------|---------------|------------||------------------------|-----------||\\r\\n * firstPeriod secondPeriod\\r\\n *\\r\\n * Second `if` statement is in case of block.timestamp is in secondPeriod.\\r\\n */\\r\\n function getAvailableReward(address account) public view returns (uint) {\\r\\n\\r\\n if (_rewardedLastTime[account] \\u003e _stakingPeriod) return 0;\\r\\n \\r\\n uint reward = 0;\\r\\n if (_rewardedLastTime[account] \\u003c= _stakingFirstPeriod) {\\r\\n uint rewardDays = _stakingFirstPeriod.min(block.timestamp) - _rewardedLastTime[account];\\r\\n rewardDays /= 1 days;\\r\\n reward = rewardDays * _stakedBalances[account] * _stakingFirstPeriodReward / 1000000;\\r\\n }\\r\\n\\r\\n if (block.timestamp \\u003e _rewardedLastTime[account]) {\\r\\n uint rewardDays = _stakingPeriod.min(block.timestamp) - _rewardedLastTime[account];\\r\\n rewardDays /= 1 days;\\r\\n reward += 29 * _stakedBalances[account] * _stakingSecondPeriodReward / 1000000;\\r\\n }\\r\\n \\r\\n return reward;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Withdraw `amount` tokens from stakingPool(`walletPartner`) to `msg.sender` address, calculate reward upto now.\\r\\n *\\r\\n * Emits a {WithdrawSucceed} event with `account` and total staked balance of `account`\\r\\n *\\r\\n * Requirements:\\r\\n *\\r\\n * - staked balance of `msg.sender` must be at least `amount`.\\r\\n */\\r\\n function withdraw(uint amount) external {\\r\\n address account = _msgSender();\\r\\n require (_stakedBalances[account] \\u003e= amount, \\\"Can\\u0027t withdraw more than staked balance\\\");\\r\\n\\r\\n _updateReward(account);\\r\\n\\r\\n _stakedBalances[account] -= amount;\\r\\n _totalStakingAmount -= amount;\\r\\n _transfer(walletROI, account, amount);\\r\\n\\r\\n emit WithdrawSucceed(account, _stakedBalances[account]);\\r\\n } \\r\\n\\r\\n /**\\r\\n * @dev Get account\\u0027s available reward which is yielded from last rewarded moment.\\r\\n * And append available reward to account\\u0027s balance.\\r\\n */\\r\\n function _updateReward(address account) public {\\r\\n uint availableReward = getAvailableReward(account);\\r\\n _rewardedLastTime[account] = block.timestamp;\\r\\n _transfer(walletPartner, account, availableReward);\\r\\n }\\r\\n} \"},\"Migrations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\ncontract Migrations {\\r\\n address public owner = msg.sender;\\r\\n uint public last_completed_migration;\\r\\n\\r\\n modifier restricted() {\\r\\n require(\\r\\n msg.sender == owner,\\r\\n \\\"This function is restricted to the contract\\u0027s owner\\\"\\r\\n );\\r\\n _;\\r\\n }\\r\\n\\r\\n function setCompleted(uint completed) public restricted {\\r\\n last_completed_migration = completed;\\r\\n }\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n address private _owner;\\r\\n\\r\\n event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n /**\\r\\n * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n */\\r\\n constructor() {\\r\\n _setOwner(_msgSender());\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Returns the address of the current owner.\\r\\n */\\r\\n function owner() public view virtual returns (address) {\\r\\n return _owner;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Throws if called by any account other than the owner.\\r\\n */\\r\\n modifier onlyOwner() {\\r\\n require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n _;\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Leaves the contract without owner. It will not be possible to call\\r\\n * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n *\\r\\n * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n * thereby removing any functionality that is only available to the owner.\\r\\n */\\r\\n function renounceOwnership() public virtual onlyOwner {\\r\\n _setOwner(address(0));\\r\\n }\\r\\n\\r\\n /**\\r\\n * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n * Can only be called by the current owner.\\r\\n */\\r\\n function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n _setOwner(newOwner);\\r\\n }\\r\\n\\r\\n function _setOwner(address newOwner) private {\\r\\n address oldOwner = _owner;\\r\\n _owner = newOwner;\\r\\n emit OwnershipTransferred(oldOwner, newOwner);\\r\\n }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakedAmount\",\"type\":\"uint256\"}],\"name\":\"StakingSucceed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainedStakedAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawSucceed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BURN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAvailableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBurnDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockAmountPerMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletCommission\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletPartner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletROI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MCNC", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bde1b8dd686075f2828a9f417174e72ebfef5fa3a5f5cf2cad9549a34dcf28f0"}