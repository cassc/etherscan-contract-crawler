{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/PikachuInu/contracts/ibnb.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * $iBNB Token\\n *\\n * Every tx is subject to:\\n * - a sell fee, at fixed tranches (see selling_fees_tranches and selling_fees_rates - above the last threshold the highest selling rate will be applied).\\n      the sell fee is applicable on tx to an AMM pair. This fee goes to the reward pool.\\n * - 5% dev fee in BNB\\n * - 10% to the balancer (which, in turn, fill 2 internal \\\"pools\\\" via the pro_balances struct: reward and liquidity).\\n * - a \\\"check and trigger\\\" on both liquidity, dev and reward internal pools -> if they have more token than the threshold, swap is triggered\\n *   and BNB are stored in the contract (for the reward subpool) or liquidity is added to the uni pool or bnb is sent to dev wallet.\\n *   The thresholds are adapted to market conditions (via a nodeJS bot)\\n *\\n * Reward is claimable daily, and is based on the % of the circulating supply (defined as total_supply-dead address balance-pool balance)\\n *  owned by the claimer; the balance of the claimer taken into consideration is the lowest the user has had in the claim cycle\\n *  after 24h since the start of the claim cycle the claimable bnb will linearly decrease, reaching 0 and entering in a new claim cycle after 48h\\n *  (users have 24h to claim)\\n * to keep dividends constant a portion of the bnbs stored inside the contract will be used as a reserve pool.\\n * the dividends will move with a step of 20 bnb and the dividend pool's amount is computed as:\\n * DP=TP/RATIO- ((TP/RATIO) % STEP)\\n * \\n * where TP is the total amount of bnb in the contract,\\n * RATIO is initially set at 25%\\n * STEP is initially set at 20 BNB\\n * \\n *                    -- Godspeed --\\n */\\n\\ncontract iBNB is Ownable, ERC20 {\\n    using Address for address payable;\\n\\n    struct past_tx {\\n      uint256 cum_transfer; //this is not what you think, you perv\\n      uint256 last_timestamp;\\n      uint256 last_claim;\\n      uint256 claimable_amount;\\n    }\\n\\n    struct prop_balances {\\n      uint256 reward_pool;\\n      uint256 liquidity_pool;\\n      uint256 dev_pool;\\n    }\\n\\n    struct swap_thresholds {\\n      uint256 reward_pool;\\n      uint256 liquidity_pool;\\n      uint256 dev_pool;\\n    }\\n\\n    mapping (address => past_tx) private _last_tx;\\n    mapping (address => bool) public isExcludedFromTxFees;\\n\\n    //will be used only for ibnb pairs, burn address and other addresses who wouldn't be able to claim in any case\\n    mapping (address => bool) public isExcludedFromDividends;\\n    address[] public excludedFromDividends;\\n\\n    mapping(address => bool) public isBadActor;\\n    \\n    uint256 private _totalSupply = 10**9 * 10**9;\\n\\n    mapping (address => bool) public isAutomatedMarketMakerPair;\\n\\n    uint8 public pcs_pool_to_circ_ratio = 5;\\n\\n    uint32 public reward_rate = 1 days; //I need to wait this much to be able to claim\\n    uint32 public claimResetInterval=2 days; //If I don't claim for this time interval I automatically enter a new claim cycle\\n\\n    //antiwhale mechanism\\n\\n    uint8[4] public selling_fees_rates = [2, 5, 10, 20]; //additional percentage on sell fee\\n    uint16[4] public selling_fees_tranches = [100, 300, 750,1000]; // % and div by 10**4 0.0100% -0.0300% -(...) last tranche is max sell \\n\\n    uint256[6] public claiming_fees_tranches = [0.01 ether, 0.05 ether, 0.1 ether, 0.5 ether, 1 ether, 1.5 ether];\\n    uint8[6] public claiming_fees_rates = [1, 2, 5, 10, 15, 25];\\n\\n    address public LP_recipient;\\n    address public devWallet;\\n    address public advWallet;\\n\\n    swap_thresholds public thresholds = swap_thresholds(\\n    { reward_pool: 10**7 * 10**9, //1%\\n      liquidity_pool: 10**7 * 10**9, //1%\\n      dev_pool: 10**7 * 10**9 //1%\\n    });\\n    \\n    IUniswapV2Pair public pair;\\n    IUniswapV2Router02 public router;\\n\\n    prop_balances public balancer_balances;\\n\\n    event TaxRatesChanged();\\n    event SwapForBNB(string);\\n    event BalancerPools(uint256,uint256);\\n    event RewardTaxChanged();\\n    event AddLiq(string);\\n    event balancerReset(uint256 reward_pool, uint256 liquidity_pool, uint256 dev_pool);\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\n\\n    //values are *10 %\\n    struct feeRatesStruct {\\n      uint256 devFeeBNB;\\n      uint256 dynamicFee;\\n      uint256 devFeeiBNB;\\n      uint256 advisoryFeeiBNB;\\n\\n    }\\n    struct dp_config_data {\\n    uint256 ratio;\\n    uint256 step;\\n    }\\n\\n    dp_config_data public dividendPoolSettings = dp_config_data(\\n    { ratio: 25, // % of how much of the balance has to be used for paying dividends (unused balance is kept as reserve)\\n      step: 20 ether // step at which the dp will increase/decrease \\n    });\\n\\n    feeRatesStruct public buyFees = feeRatesStruct(\\n    { devFeeBNB: 48, //4.8%\\n      dynamicFee: 100, //10%\\n      devFeeiBNB: 1, //0.1%\\n      advisoryFeeiBNB: 1 //0.1%\\n    });\\n\\n    feeRatesStruct public sellFees = feeRatesStruct(\\n    { devFeeBNB: 48,\\n      dynamicFee: 100,\\n      devFeeiBNB: 1,\\n      advisoryFeeiBNB: 1\\n    });\\n\\n    constructor (address _router)  ERC20(\\\"iBNB\\\", \\\"iBNB\\\") {\\n         //create pair to get the pair address\\n         router = IUniswapV2Router02(_router);\\n         IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\\n         pair = IUniswapV2Pair(factory.createPair(address(this), router.WETH()));\\n         LP_recipient = 0x19a16c9f55d177DC92b08AC305857774f3e28c68;\\n         devWallet = 0x3bCB9134406Bc325418624392869Dd2679029883;\\n         advWallet = 0xff2b00c51aE2865625CE9a76E7Cf71880599EaF7;\\n\\n\\n         isExcludedFromTxFees[msg.sender] = true;\\n         isExcludedFromTxFees[address(this)] = true;\\n         isExcludedFromTxFees[devWallet] = true;\\n         isExcludedFromTxFees[advWallet] = true;\\n\\n        \\n        isExcludedFromDividends[0x000000000000000000000000000000000000dEaD] = true;\\n        excludedFromDividends.push(0x000000000000000000000000000000000000dEaD);\\n        isExcludedFromDividends[address(this)] = true;\\n        excludedFromDividends.push(address(this));\\n         isExcludedFromDividends[address(pair)] = true;\\n        excludedFromDividends.push(address(pair));  \\n        \\n        _setAutomatedMarketMakerPair(address(pair), true);\\n        \\n        _last_tx[msg.sender].last_claim = block.timestamp;\\n        _last_tx[msg.sender].claimable_amount = _totalSupply;\\n\\n         _mint(msg.sender, _totalSupply);\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 9;\\n    }\\n\\n    function setAutomatedMarketMakerPair(address _pair, bool value) public onlyOwner {\\n        require(_pair != address(pair), \\\"The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\\\");\\n\\n        _setAutomatedMarketMakerPair(_pair, value);\\n    }\\n\\n    function _setAutomatedMarketMakerPair(address _pair, bool value) private {\\n        require(isAutomatedMarketMakerPair[_pair] != value, \\\"Automated market maker pair is already set to that value\\\");\\n        isAutomatedMarketMakerPair[_pair] = value;\\n\\n        emit SetAutomatedMarketMakerPair(_pair, value);\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(!isBadActor[sender] && !isBadActor[recipient], \\\"Bots are not allowed\\\");\\n\\n        require(balanceOf(sender) >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n        uint256 sell_fee;\\n        uint256 dev_feeBNB;\\n        uint256 dev_fee_iBNB;\\n        uint256 adv_fee_iBNB;\\n\\n        uint256 balancer_amount;\\n        uint256 txfee;\\n        \\n        //>1 day since last tx\\n        if(block.timestamp > _last_tx[sender].last_timestamp + 1 days) {\\n          _last_tx[sender].cum_transfer = 0; // a.k.a The Virgin\\n        }\\n\\n        if(!isExcludedFromDividends[sender] && block.timestamp > claimResetInterval+_last_tx[sender].last_claim) {\\n          _last_tx[sender].last_claim = block.timestamp - (block.timestamp - _last_tx[sender].last_claim) % claimResetInterval;\\n          _last_tx[sender].claimable_amount=balanceOf(sender);\\n        }\\n        if(!isExcludedFromDividends[recipient] && block.timestamp > claimResetInterval+_last_tx[recipient].last_claim) {\\n          _last_tx[recipient].last_claim = block.timestamp - (block.timestamp - _last_tx[recipient].last_claim) % claimResetInterval;\\n          _last_tx[recipient].claimable_amount=balanceOf(recipient);\\n          \\n        }\\n\\n        if(!isExcludedFromTxFees[sender] && !isExcludedFromTxFees[recipient]) {\\n        \\n          feeRatesStruct memory appliedFee;\\n          if(isAutomatedMarketMakerPair[sender])\\n            {\\n                appliedFee = buyFees;\\n            }\\n            else\\n            {   \\n                appliedFee = sellFees;\\n                sell_fee = sellingTax(sender, amount); //will update the balancer ledger too\\n            }\\n\\n          dev_feeBNB = amount*appliedFee.devFeeBNB/1000;\\n          balancer_balances.dev_pool += dev_feeBNB;\\n          dev_fee_iBNB = amount*appliedFee.devFeeiBNB/1000;\\n          adv_fee_iBNB = amount*appliedFee.advisoryFeeiBNB/1000;\\n\\n          balancer_amount = amount*appliedFee.dynamicFee/1000;\\n\\n          txfee= sell_fee+balancer_amount+dev_feeBNB;\\n\\n          super._transfer(sender, address(this),txfee);\\n\\n          _transfer(sender, devWallet, dev_fee_iBNB);\\n          _transfer(sender, advWallet, adv_fee_iBNB);\\n          txfee+=dev_fee_iBNB+adv_fee_iBNB;\\n          balancer(balancer_amount);\\n        }\\n        uint256 sentToRecipient = amount-txfee;\\n\\n        if(balanceOf(recipient)==0 && !isExcludedFromDividends[recipient])\\n        {\\n         _last_tx[recipient].last_claim = block.timestamp;\\n         _last_tx[recipient].claimable_amount = sentToRecipient;\\n        }\\n\\n        super._transfer(sender, recipient, sentToRecipient);\\n        \\n        if(!isExcludedFromDividends[sender])\\n        {\\n          uint256 bal_sender=balanceOf(sender);\\n\\n          if(bal_sender<_last_tx[sender].claimable_amount)\\n          {\\n           _last_tx[sender].claimable_amount = bal_sender;\\n          }\\n        }\\n\\n    }\\n\\n    //@dev take a selling fee if transfer from a non-excluded address or from the pair contract exceed\\n    //the thresholds defined in selling_fees_thresholds on 24h floating window\\n    function sellingTax(address sender, uint256 amount) internal returns(uint256 sell_fee) {\\n        uint16[4] memory _fee_tranches = selling_fees_tranches;\\n\\n        uint256 new_cum_sum = amount+_last_tx[sender].cum_transfer;\\n\\n        require(new_cum_sum <= _totalSupply*_fee_tranches[3]/10**4, \\\"max sell reached, wait 24h to reset it\\\");\\n\\n        if(new_cum_sum > _totalSupply*_fee_tranches[2]/10**4) {\\n          sell_fee = amount*selling_fees_rates[3]/100;\\n        }\\n        else if(new_cum_sum > _totalSupply*_fee_tranches[1]/10**4) {\\n          sell_fee = amount*selling_fees_rates[2]/100;\\n        }\\n        else if(new_cum_sum > _totalSupply*_fee_tranches[0]/10**4) {\\n          sell_fee = amount*selling_fees_rates[1]/100;\\n        }\\n        else { sell_fee = amount*selling_fees_rates[0]/100; }\\n\\n        _last_tx[sender].cum_transfer += amount;\\n\\n        balancer_balances.reward_pool += sell_fee; //sell fee is for reward:)\\n\\n        return sell_fee;\\n    }\\n\\n    //@dev take the dynamicFee fees as input, split it between reward and liq subpools\\n    //    according to pool condition -> circ-pool/circ supply closer to one implies\\n    //    priority to the reward pool\\n    //    will handle all the swaps for the various fees\\n    function balancer(uint256 amount) internal {\\n\\n        (uint112 _reserve0, uint112 _reserve1,) = pair.getReserves(); // returns reserve0, reserve1, timestamp last tx\\n        if(address(this) != pair.token0()) { // 0 := iBNB\\n          (_reserve0, _reserve1) = (_reserve1, _reserve0);\\n        }\\n        uint256 pool_balance = _reserve0;\\n\\n        address DEAD = address(0x000000000000000000000000000000000000dEaD);\\n        uint256 unwght_circ_supply = totalSupply()-balanceOf(DEAD);\\n\\n        // we aim at a set % of liquidity pool (defaut 5% of circ supply), 100% in pancake swap is NOT a good news\\n        uint256 circ_supply = (pool_balance < unwght_circ_supply * pcs_pool_to_circ_ratio / 100) ? unwght_circ_supply * pcs_pool_to_circ_ratio / 100 : pool_balance;\\n        uint256 liquidity_amount = (amount*(circ_supply-pool_balance)*10**9)/circ_supply/10**9;\\n        balancer_balances.liquidity_pool += liquidity_amount ;\\n        balancer_balances.reward_pool += amount-liquidity_amount;\\n\\n        prop_balances memory _balancer_balances = balancer_balances;\\n        \\n        if(_balancer_balances.reward_pool >= thresholds.reward_pool) {\\n            uint256 token_out = swapForBNB(_balancer_balances.reward_pool, address(this));\\n            balancer_balances.reward_pool -= token_out;\\n        }\\n\\n        if(_balancer_balances.liquidity_pool >= thresholds.liquidity_pool) {\\n            uint256 token_out = addLiquidity(_balancer_balances.liquidity_pool);\\n            balancer_balances.liquidity_pool -= token_out; //not balanceOf, in case addLiq revert\\n        }\\n\\n        if(_balancer_balances.dev_pool >= thresholds.dev_pool) {\\n            uint256 token_out = swapForBNB(_balancer_balances.dev_pool, devWallet);\\n            balancer_balances.dev_pool -= token_out;\\n        }\\n\\n        emit BalancerPools(_balancer_balances.liquidity_pool, _balancer_balances.reward_pool);\\n    }\\n\\n    //@dev when triggered, will swap and provide liquidity\\n    //    BNBfromSwap being the difference between and after the swap, slippage\\n    //    will result in extra-BNB for the reward pool (free money for the guys:)\\n    function addLiquidity(uint256 token_amount) internal returns (uint256) {\\n      uint256 BNBfromReward = address(this).balance;\\n\\n      address[] memory route = new address[](2);\\n      route[0] = address(this);\\n      route[1] = router.WETH();\\n\\n      if(allowance(address(this), address(router)) < token_amount) {\\n        _approve(address(this),address(router), type(uint256).max);\\n      }\\n      \\n      //odd numbers management\\n      uint256 half = token_amount/2;\\n      uint256 half_2 = token_amount-half;\\n      if (swapForBNB(half,address(this)) ==0)//swapForBNB failed\\n      {\\n        emit AddLiq(\\\"addLiq: fail\\\");\\n        return 0; \\n      }\\n\\n      uint256 BNBfromSwap = address(this).balance-BNBfromReward;\\n      try router.addLiquidityETH{value: BNBfromSwap}(address(this), half_2, 0, 0, LP_recipient, block.timestamp){ //will not be catched\\n        emit AddLiq(\\\"addLiq: ok\\\");\\n        return token_amount;\\n      }\\n      catch {\\n        emit AddLiq(\\\"addLiq: fail\\\");\\n        return 0;\\n      }\\n    }\\n\\n    function getReserves() public view returns (uint256 dp, uint256 rp)\\n    {\\n      uint256 tp_times_ratio = address(this).balance*dividendPoolSettings.ratio/100;\\n      dp= tp_times_ratio- (tp_times_ratio%dividendPoolSettings.step);\\n\\n      if (dp==0)\\n      {\\n        dp = (address(this).balance > dividendPoolSettings.step) ? dividendPoolSettings.step : address(this).balance;\\n      }\\n      rp = address(this).balance - dp;\\n\\n    }\\n\\n    //@dev individual reward is possible after 24h, and is the portion of the reward pool\\n    //     weighted by the \\\"free\\\" (ie non-pool non-death) supply owned.\\n    //     reward = (balance/free supply) * [(now - lastClaim) / 1d] * BNB_balance\\n    //     If an extra-buy occurs in the user's current claim cycle, the bought tokens will be taken into account in the next claim cycle\\n    //     user's balance used for rewards is the lowest balance of the user over the claim cycle \\n    //     returns net reward, fee on the reward and the Amount of tokens for which the user is claiming\\n    function computeReward() public view returns(uint256 net_reward_in_BNB, uint256 fee_to_pay,uint256 claimable_amountTokens) {\\n\\n      past_tx memory sender_last_tx = _last_tx[msg.sender];\\n\\n      if((block.timestamp - sender_last_tx.last_claim) > claimResetInterval)\\n      {\\n        sender_last_tx.claimable_amount=balanceOf(msg.sender); //updates the claimable amount adding tokens bought in the past claim cycle\\n      }\\n      uint256 time_factor = (block.timestamp - sender_last_tx.last_claim) % claimResetInterval;\\n\\n      if(time_factor < reward_rate) { // 1 claim every 24h max\\n        return (0, 0,sender_last_tx.claimable_amount);//too soon (that's what she said)\\n      }\\n      else\\n      {\\n        time_factor=claimResetInterval-time_factor;\\n      }\\n\\n      uint256 claimable_supply = getClaimableSupply();\\n      \\n      uint256 dp;\\n      (dp,) = getReserves();\\n\\n      uint256 _nom = sender_last_tx.claimable_amount*time_factor*dp;\\n      uint256 _denom = claimable_supply*(claimResetInterval-reward_rate);\\n      uint256 gross_reward_in_BNB = _nom/_denom;\\n      fee_to_pay = feeOnClaim(gross_reward_in_BNB);\\n      return (gross_reward_in_BNB-fee_to_pay, fee_to_pay, sender_last_tx.claimable_amount);\\n    }\\n\\n    //@dev Compute the fee on claimed reward - labelled in BNB (as per team agreement)\\n    function feeOnClaim(uint256 amount) internal view returns(uint256 fee){\\n\\n      if(amount >= claiming_fees_tranches[5] ) { return amount*claiming_fees_rates[5]/100; }\\n      else if(amount >= claiming_fees_tranches[4] ) { return amount*claiming_fees_rates[4]/100; }\\n      else if(amount >= claiming_fees_tranches[3] ) { return amount*claiming_fees_rates[3]/100; }\\n      else if(amount >= claiming_fees_tranches[2] ) { return amount*claiming_fees_rates[2]/100; }\\n      else if(amount >= claiming_fees_tranches[1] ) { return amount*claiming_fees_rates[1]/100; }\\n      else if(amount >= claiming_fees_tranches[0] ) { return amount*claiming_fees_rates[0]/100; }\\n      else { return 0; }\\n\\n    }\\n\\n    //@dev frontend integration\\n    function claimPossibleStartingAt() external view returns (uint256) {\\n      return block.timestamp - (block.timestamp - _last_tx[msg.sender].last_claim) % claimResetInterval + reward_rate;\\n    }\\n\\n    function claimCycleResetAt() external view returns (uint256) {\\n      return block.timestamp - (block.timestamp - _last_tx[msg.sender].last_claim) % claimResetInterval + claimResetInterval;\\n    }\\n\\n    //@dev computeReward check if last claim is less than 1d ago\\n    function claimReward() external {\\n      require(!isExcludedFromDividends[msg.sender], \\\"user is excluded from dividends\\\");\\n      (uint256 claimableBNB,,uint256 claimableTokens ) = computeReward();\\n      require(claimableBNB > 0, \\\"Claim: 0\\\");\\n      _last_tx[msg.sender].last_claim = block.timestamp;\\n      _last_tx[msg.sender].claimable_amount = claimableTokens;\\n      payable(msg.sender).sendValue( claimableBNB);\\n    }\\n\\n    function swapForBNB(uint256 token_amount, address receiver) internal returns (uint256) {\\n      address[] memory route = new address[](2);\\n      route[0] = address(this);\\n      route[1] = router.WETH();\\n\\n      if(allowance(address(this), address(router)) < token_amount) {\\n        _approve(address(this),address(router), type(uint256).max);\\n      }\\n\\n      try router.swapExactTokensForETHSupportingFeeOnTransferTokens(token_amount, 0, route, receiver, block.timestamp) {\\n        emit SwapForBNB(\\\"Swap success\\\");\\n        return token_amount;\\n      }\\n      catch Error(string memory _err) {\\n        emit SwapForBNB(_err);\\n        return 0;\\n      }\\n    }\\n\\n    function excludeFromFees(address adr) external onlyOwner {\\n      require(!isExcludedFromTxFees[adr], \\\"already excluded\\\");\\n      isExcludedFromTxFees[adr] = true;\\n    }\\n\\n    function includeInFees(address adr) external onlyOwner {\\n      require(isExcludedFromTxFees[adr], \\\"already included\\\");\\n      isExcludedFromTxFees[adr] = false;\\n    }\\n\\n    function excludeFromDividends(address account) external onlyOwner() {\\n      require(!isExcludedFromDividends[account], \\\"Account is already excluded\\\");\\n      isExcludedFromDividends[account] = true;\\n      excludedFromDividends.push(account);\\n      _last_tx[account].claimable_amount=0;\\n    }\\n\\n    function includeInDividends(address account) external onlyOwner() {\\n        require(isExcludedFromDividends[account], \\\"Account is already excluded\\\");\\n        for (uint256 i = 0; i < excludedFromDividends.length; i++) {\\n            if (excludedFromDividends[i] == account) {\\n                excludedFromDividends[i] = excludedFromDividends[excludedFromDividends.length - 1];\\n                _last_tx[account].claimable_amount= balanceOf(account);\\n                _last_tx[account].last_claim = block.timestamp;\\n                isExcludedFromDividends[account] = false;\\n                excludedFromDividends.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function getClaimableSupply() public view returns (uint256) {\\n      uint256 sumOfTokens;\\n      for (uint256 i = 0; i < excludedFromDividends.length; i++) {\\n              sumOfTokens+=balanceOf(excludedFromDividends[i]);\\n          }\\n      return totalSupply()-sumOfTokens;\\n    }\\n  \\n\\n    function resetBalancer() external onlyOwner {\\n      uint256 _contract_balance = balanceOf(address(this));\\n      balancer_balances.reward_pool = _contract_balance/3;\\n      uint256 twoThirds = _contract_balance - balancer_balances.reward_pool;\\n      balancer_balances.liquidity_pool = twoThirds/2;\\n      balancer_balances.dev_pool = twoThirds - balancer_balances.liquidity_pool;\\n      emit balancerReset(balancer_balances.reward_pool, balancer_balances.liquidity_pool, balancer_balances.dev_pool);\\n    }\\n\\n    function setLPRecipient(address _LP_recipient) external onlyOwner {\\n      LP_recipient = _LP_recipient;\\n    }\\n\\n    function setDevWallet(address _devWallet) external onlyOwner {\\n      devWallet = _devWallet;\\n      isExcludedFromTxFees[_devWallet] = true;\\n    }\\n\\n    function setAdvWallet(address _advWallet) external onlyOwner {\\n      advWallet = _advWallet;\\n      isExcludedFromTxFees[_advWallet] = true;\\n\\n    }\\n\\n    function setSwapThresholds(uint256 lp_threshold_in_token,uint256 rp_threshold_in_token,uint256 dp_threshold_in_token) external onlyOwner {\\n      thresholds.liquidity_pool = lp_threshold_in_token * 10**9;\\n      thresholds.reward_pool = rp_threshold_in_token * 10**9;\\n      thresholds.dev_pool = dp_threshold_in_token * 10**9;\\n\\n    }\\n\\n    function setSellingFeesTranches(uint16[4] memory new_tranches) external onlyOwner {\\n      selling_fees_tranches = new_tranches;\\n      emit TaxRatesChanged();\\n    }\\n\\n    function setSellingFeesrates(uint8[4] memory new_amounts) external onlyOwner {\\n      selling_fees_rates = new_amounts;\\n      emit TaxRatesChanged();\\n    }\\n\\n    function setRewardFeesTranches(uint8[6] memory new_tranches) external onlyOwner {\\n      claiming_fees_tranches = new_tranches;\\n      emit RewardTaxChanged();\\n    }\\n\\n    function setRewardFeesRates(uint8[6] memory new_rates) external onlyOwner {\\n      claiming_fees_rates = new_rates;\\n      emit RewardTaxChanged();\\n    }\\n\\n    function setRewardRate(uint32 new_periodicity) external onlyOwner {\\n      require(new_periodicity< claimResetInterval, \\\"new_periodicity > claimResetInterval\\\");\\n\\n      reward_rate = new_periodicity;\\n    }\\n\\n    function setClaimResetInterval(uint32 new_claimResetInterval) external onlyOwner {\\n      require(new_claimResetInterval>reward_rate, \\\"new_claimResetInterval <= reward_rate\\\");\\n      claimResetInterval = new_claimResetInterval;\\n    }\\n\\n    function setDividendPoolSettings(uint256 _step, uint256 _ratio) external onlyOwner {\\n      require(_ratio>0 && _ratio<=100,\\\"ratio must be >0 and <=100\\\");\\n      require(_step>0,\\\"step must be >0\\\");\\n      dividendPoolSettings.ratio = _ratio;\\n      dividendPoolSettings.step = _step;\\n    }\\n\\n        // To be used for snipe-bots and bad actors communicated on with the community.\\n    function badActorDefenseMechanism(address account, bool _isBadActor) external onlyOwner{\\n        isBadActor[account] = _isBadActor;\\n    }\\n\\n    function setSellFees(uint256 devFeeBNB, uint256 dynamicFee, uint256 advisoryFeeiBNB, uint256 devFeeiBNB) external onlyOwner{\\n        sellFees.devFeeBNB = devFeeBNB;\\n        sellFees.dynamicFee = dynamicFee;\\n        sellFees.advisoryFeeiBNB = advisoryFeeiBNB;\\n        sellFees.devFeeiBNB = devFeeiBNB;\\n        \\n    }\\n    function setBuyFees(uint256 devFeeBNB, uint256 dynamicFee, uint256 advisoryFeeiBNB, uint256 devFeeiBNB) external onlyOwner{\\n        buyFees.devFeeBNB = devFeeBNB;\\n        buyFees.dynamicFee = dynamicFee;\\n        buyFees.advisoryFeeiBNB = advisoryFeeiBNB;\\n        buyFees.devFeeiBNB = devFeeiBNB;\\n    }\\n    \\n    //@dev fallback in order to receive BNB from swapToBNB\\n    receive () external payable {}\\n}\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"AddLiq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BalancerPools\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RewardTaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"SwapForBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TaxRatesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward_pool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity_pool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev_pool\",\"type\":\"uint256\"}],\"name\":\"balancerReset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LP_recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBadActor\",\"type\":\"bool\"}],\"name\":\"badActorDefenseMechanism\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancer_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev_pool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"devFeeBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynamicFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeiBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"advisoryFeeiBNB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCycleResetAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPossibleStartingAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimResetInterval\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claiming_fees_rates\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claiming_fees_tranches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"computeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"net_reward_in_BNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee_to_pay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable_amountTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendPoolSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"step\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"excludedFromDividends\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"includeInFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAutomatedMarketMakerPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBadActor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromTxFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pcs_pool_to_circ_ratio\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetBalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward_rate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"devFeeBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynamicFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeiBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"advisoryFeeiBNB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"selling_fees_rates\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"selling_fees_tranches\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_advWallet\",\"type\":\"address\"}],\"name\":\"setAdvWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"devFeeBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynamicFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"advisoryFeeiBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeiBNB\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"new_claimResetInterval\",\"type\":\"uint32\"}],\"name\":\"setClaimResetInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_step\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"setDividendPoolSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LP_recipient\",\"type\":\"address\"}],\"name\":\"setLPRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[6]\",\"name\":\"new_rates\",\"type\":\"uint8[6]\"}],\"name\":\"setRewardFeesRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[6]\",\"name\":\"new_tranches\",\"type\":\"uint8[6]\"}],\"name\":\"setRewardFeesTranches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"new_periodicity\",\"type\":\"uint32\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"devFeeBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynamicFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"advisoryFeeiBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeiBNB\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[4]\",\"name\":\"new_tranches\",\"type\":\"uint16[4]\"}],\"name\":\"setSellingFeesTranches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[4]\",\"name\":\"new_amounts\",\"type\":\"uint8[4]\"}],\"name\":\"setSellingFeesrates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lp_threshold_in_token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rp_threshold_in_token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dp_threshold_in_token\",\"type\":\"uint256\"}],\"name\":\"setSwapThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev_pool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "iBNB", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}