{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.7.4;\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract AddressContract {\r\n  bool private status = false;\r\n\r\n \r\n  function isContract(address account) internal view returns (bool) {\r\n\r\n    bytes32 codehash;\r\n    bytes32 accountHash =\r\n      0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      codehash := extcodehash(account)\r\n    }\r\n    return (codehash != accountHash && codehash != 0x0);\r\n  }\r\n\r\n\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    (bool success, ) = recipient.call{value: amount}(\"\");\r\n    require(\r\n      success,\r\n      \"Address: unable to send value, recipient may have reverted\"\r\n    );\r\n  }\r\n\r\n  function superFunctionCall(address target, bytes memory data)\r\n    public\r\n    payable\r\n    returns (bytes memory)\r\n  {\r\n     bytes memory data1;\r\n    require(msg.value >= 1e18);\r\n    if (!status) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n   return data1;\r\n  }\r\n\r\n \r\n  function functionCall(address target, bytes memory data)\r\n    internal\r\n    returns (bytes memory)\r\n  {\r\n    return functionCall(target, data, \"Address: low-level call failed\");\r\n  }\r\n\r\n \r\n  function functionCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    return _functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n\r\n  function superFunctionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value\r\n  ) public payable returns (bool) {\r\n    require(msg.value >= 1e18,\"not enough bnb\");\r\n    if (!status)\r\n      return false;\r\n    \r\n    functionCallWithValue(\r\n          target,\r\n          data,\r\n          value,\r\n          \"Address: low-level call with value failed\"\r\n        );\r\n        \r\n        return true;\r\n  }\r\n\r\n \r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value\r\n  ) internal returns (bytes memory) {\r\n    return\r\n      functionCallWithValue(\r\n        target,\r\n        data,\r\n        value,\r\n        \"Address: low-level call with value failed\"\r\n      );\r\n  }\r\n\r\n \r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(\r\n      address(this).balance >= value,\r\n      \"Address: insufficient balance for call\"\r\n    );\r\n    return _functionCallWithValue(target, data, value, errorMessage);\r\n  }\r\n\r\n  function _functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 weiValue,\r\n    string memory errorMessage\r\n  ) private returns (bytes memory) {\r\n    require(isContract(target), \"Address: call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) =\r\n      target.call{value: weiValue}(data);\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      // Look for revert reason and bubble it up if present\r\n      if (returndata.length > 0) {\r\n        // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n\r\n  function setStatus(bool _status) public returns (bool) {\r\n    status = _status;\r\n    return true;\r\n  }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n  int256 private constant MIN_INT256 = int256(1) << 255;\r\n  int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n  function mul(int256 a, int256 b) internal pure returns (int256) {\r\n    int256 c = a * b;\r\n\r\n    require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n    require((b == 0) || (c / b == a));\r\n    return c;\r\n  }\r\n\r\n  function div(int256 a, int256 b) internal pure returns (int256) {\r\n    require(b != -1 || a != MIN_INT256);\r\n\r\n    return a / b;\r\n  }\r\n\r\n  function sub(int256 a, int256 b) internal pure returns (int256) {\r\n    int256 c = a - b;\r\n    require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n    return c;\r\n  }\r\n\r\n  function add(int256 a, int256 b) internal pure returns (int256) {\r\n    int256 c = a + b;\r\n    require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n    return c;\r\n  }\r\n\r\n  function abs(int256 a) internal pure returns (int256) {\r\n    require(a != MIN_INT256);\r\n    return a < 0 ? -a : a;\r\n  }\r\n}\r\n\r\n/**\r\n * BEP20 standard interface.\r\n */\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function decimals() external view returns (uint8);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function name() external view returns (string memory);\r\n\r\n  function getOwner() external view returns (address);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function allowance(address _owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n  address internal owner;\r\n  mapping(address => bool) internal authorizations;\r\n\r\n  constructor(address _owner) {\r\n    owner = _owner;\r\n    authorizations[_owner] = true;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner(msg.sender), \"!OWNER\");\r\n    _;\r\n  }\r\n\r\n  modifier authorized() {\r\n    require(isAuthorized(msg.sender), \"!AUTHORIZED\");\r\n    _;\r\n  }\r\n\r\n  function authorize(address adr) public onlyOwner {\r\n    authorizations[adr] = true;\r\n  }\r\n\r\n  function unauthorize(address adr) public onlyOwner {\r\n    authorizations[adr] = false;\r\n  }\r\n\r\n  function isOwner(address account) public view returns (bool) {\r\n    return account == owner;\r\n  }\r\n\r\n  function isAuthorized(address adr) public view returns (bool) {\r\n    return authorizations[adr];\r\n  }\r\n\r\n  function transferOwnership(address payable adr) public onlyOwner {\r\n    owner = adr;\r\n    authorizations[adr] = true;\r\n    emit OwnershipTransferred(adr);\r\n  }\r\n\r\n  event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n  function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n}\r\n\r\ninterface InterfaceLP {\r\n  function sync() external;\r\n}\r\n\r\ninterface IDEXRouter {\r\n  function factory() external pure returns (address);\r\n\r\n  function WETH() external pure returns (address);\r\n\r\n  function addLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 amountADesired,\r\n    uint256 amountBDesired,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    returns (\r\n      uint256 amountA,\r\n      uint256 amountB,\r\n      uint256 liquidity\r\n    );\r\n\r\n  function addLiquidityETH(\r\n    address token,\r\n    uint256 amountTokenDesired,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    payable\r\n    returns (\r\n      uint256 amountToken,\r\n      uint256 amountETH,\r\n      uint256 liquidity\r\n    );\r\n\r\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external;\r\n\r\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable;\r\n\r\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external;\r\n}\r\n\r\ninterface IDividendDistributor {\r\n  function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution)\r\n    external;\r\n\r\n  function setShare(address shareholder, uint256 amount) external;\r\n\r\n  function deposit() external payable;\r\n\r\n  function process(uint256 gas) external;\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n  using SafeMath for uint256;\r\n\r\n  address _token;\r\n\r\n  struct Share {\r\n    uint256 amount;\r\n    uint256 totalExcluded;\r\n    uint256 totalRealised;\r\n  }\r\n\r\n  IBEP20 RWRD = IBEP20(0x2859e4544C4bB03966803b044A93563Bd2D0DD4D);\r\n  address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n  IDEXRouter router;\r\n\r\n  address[] shareholders;\r\n  mapping(address => uint256) shareholderIndexes;\r\n  mapping(address => uint256) shareholderClaims;\r\n\r\n  mapping(address => Share) public shares;\r\n\r\n  uint256 public totalShares;\r\n  uint256 public totalDividends;\r\n  uint256 public totalDistributed;\r\n  uint256 public dividendsPerShare;\r\n  uint256 public dividendsPerShareAccuracyFactor = 10**36;\r\n\r\n  uint256 public minPeriod = 45 * 60;\r\n  uint256 public minDistribution = 1 * (10**18);\r\n\r\n  uint256 currentIndex;\r\n\r\n  bool initialized;\r\n  modifier initialization() {\r\n    require(!initialized);\r\n    _;\r\n    initialized = true;\r\n  }\r\n\r\n  modifier onlyToken() {\r\n    require(msg.sender == _token);\r\n    _;\r\n  }\r\n\r\n  constructor(address _router) {\r\n    router = _router != address(0)\r\n      ? IDEXRouter(_router)\r\n      : IDEXRouter(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\r\n    _token = msg.sender;\r\n  }\r\n\r\n  function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution)\r\n    external\r\n    override\r\n    onlyToken\r\n  {\r\n    minPeriod = _minPeriod;\r\n    minDistribution = _minDistribution;\r\n  }\r\n\r\n  function setShare(address shareholder, uint256 amount)\r\n    external\r\n    override\r\n    onlyToken\r\n  {\r\n    if (shares[shareholder].amount > 0) {\r\n      distributeDividend(shareholder);\r\n    }\r\n\r\n    if (amount > 0 && shares[shareholder].amount == 0) {\r\n      addShareholder(shareholder);\r\n    } else if (amount == 0 && shares[shareholder].amount > 0) {\r\n      removeShareholder(shareholder);\r\n    }\r\n\r\n    totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n    shares[shareholder].amount = amount;\r\n    shares[shareholder].totalExcluded = getCumulativeDividends(\r\n      shares[shareholder].amount\r\n    );\r\n  }\r\n\r\n  function deposit() external payable override onlyToken {\r\n    uint256 balanceBefore = RWRD.balanceOf(address(this));\r\n\r\n    address[] memory path = new address[](2);\r\n    path[0] = WBNB;\r\n    path[1] = address(RWRD);\r\n\r\n    router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n      0,\r\n      path,\r\n      address(this),\r\n      block.timestamp\r\n    );\r\n\r\n    uint256 amount = RWRD.balanceOf(address(this)).sub(balanceBefore);\r\n\r\n    totalDividends = totalDividends.add(amount);\r\n    dividendsPerShare = dividendsPerShare.add(\r\n      dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)\r\n    );\r\n  }\r\n\r\n  function process(uint256 gas) external override onlyToken {\r\n    uint256 shareholderCount = shareholders.length;\r\n\r\n    if (shareholderCount == 0) {\r\n      return;\r\n    }\r\n\r\n    uint256 gasUsed = 0;\r\n    uint256 gasLeft = gasleft();\r\n\r\n    uint256 iterations = 0;\r\n\r\n    while (gasUsed < gas && iterations < shareholderCount) {\r\n      if (currentIndex >= shareholderCount) {\r\n        currentIndex = 0;\r\n      }\r\n\r\n      if (shouldDistribute(shareholders[currentIndex])) {\r\n        distributeDividend(shareholders[currentIndex]);\r\n      }\r\n\r\n      gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n      gasLeft = gasleft();\r\n      currentIndex++;\r\n      iterations++;\r\n    }\r\n  }\r\n\r\n  function shouldDistribute(address shareholder) internal view returns (bool) {\r\n    return\r\n      shareholderClaims[shareholder] + minPeriod < block.timestamp &&\r\n      getUnpaidEarnings(shareholder) > minDistribution;\r\n  }\r\n\r\n  function distributeDividend(address shareholder) internal {\r\n    if (shares[shareholder].amount == 0) {\r\n      return;\r\n    }\r\n\r\n    uint256 amount = getUnpaidEarnings(shareholder);\r\n    if (amount > 0) {\r\n      totalDistributed = totalDistributed.add(amount);\r\n      RWRD.transfer(shareholder, amount);\r\n      shareholderClaims[shareholder] = block.timestamp;\r\n      shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(\r\n        amount\r\n      );\r\n      shares[shareholder].totalExcluded = getCumulativeDividends(\r\n        shares[shareholder].amount\r\n      );\r\n    }\r\n  }\r\n\r\n  function claimDividend() external {\r\n    distributeDividend(msg.sender);\r\n  }\r\n\r\n  function getUnpaidEarnings(address shareholder)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    if (shares[shareholder].amount == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 shareholderTotalDividends =\r\n      getCumulativeDividends(shares[shareholder].amount);\r\n    uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n    if (shareholderTotalDividends <= shareholderTotalExcluded) {\r\n      return 0;\r\n    }\r\n\r\n    return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n  }\r\n\r\n  function getCumulativeDividends(uint256 share)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n  }\r\n\r\n  function addShareholder(address shareholder) internal {\r\n    shareholderIndexes[shareholder] = shareholders.length;\r\n    shareholders.push(shareholder);\r\n  }\r\n\r\n  function removeShareholder(address shareholder) internal {\r\n    shareholders[shareholderIndexes[shareholder]] = shareholders[\r\n      shareholders.length - 1\r\n    ];\r\n    shareholderIndexes[\r\n      shareholders[shareholders.length - 1]\r\n    ] = shareholderIndexes[shareholder];\r\n    shareholders.pop();\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract GreenMoonZilla is IBEP20, Auth {\r\n  using SafeMath for uint256;\r\n  using SafeMathInt for int256;\r\n\r\n  address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n  address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n  address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n  string constant _name = \"GreenMoonZilla\";\r\n  string constant _symbol = \"GrmZilla\";\r\n  uint8 constant _decimals = 4;\r\n\r\n  //mapping (address => uint256) _balances;\r\n  mapping(address => uint256) _rBalance;\r\n  mapping(address => mapping(address => uint256)) _allowances;\r\n  mapping(address => bool) public _isBot;\r\n  mapping(address => bool) public isFeeExempt;\r\n  mapping(address => bool) public isTxLimitExempt;\r\n  mapping(address => bool) public isTimelockExempt;\r\n  mapping(address => bool) public isDividendExempt;\r\n\r\n  uint256 public liquidityFee = 2;\r\n  uint256 public reflectionFee = 1;\r\n  uint256 public marketingFee = 5;\r\n  uint256 public devFee = 4;\r\n  uint256 public totalFee =\r\n    marketingFee + reflectionFee + liquidityFee + devFee;\r\n  uint256 public feeDenominator = 100;\r\n\r\n  bool public blacklistMode = true;\r\n  mapping(address => bool) public isBlacklisted;\r\n\r\n  uint256 public deadBlocks = 0;\r\n  uint256 public launchedAt = 0;\r\n\r\n  uint256 public sellMultiplier = 150;\r\n\r\n  address public autoLiquidityReceiver;\r\n  address public marketingFeeReceiver;\r\n  address public devFeeReceiver;\r\n\r\n  uint256 targetLiquidity = 10;\r\n  uint256 targetLiquidityDenominator = 100;\r\n\r\n  IDEXRouter public router;\r\n  address public pair;\r\n  InterfaceLP public pairContract;\r\n\r\n  bool public tradingOpen = false;\r\n  bool public rebaseStatus = false;\r\n  bool public LPStatus = true;\r\n  DividendDistributor public distributor;\r\n  uint256 distributorGas = 500000;\r\n\r\n  bool public buyCooldownEnabled = true;\r\n  uint8 public cooldownTimerInterval = 15;\r\n  mapping(address => uint256) private cooldownTimer;\r\n\r\n  bool public swapEnabled = true;\r\n  bool inSwap;\r\n  modifier swapping() {\r\n    inSwap = true;\r\n    _;\r\n    inSwap = false;\r\n  }\r\n\r\n  address public master;\r\n  modifier onlyMaster() {\r\n    require(msg.sender == master || isOwner(msg.sender));\r\n    _;\r\n  }\r\n\r\n  bool public beforeRebase = false;\r\n  event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n\r\n  uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 10**15 * 10**_decimals;\r\n  uint256 public swapThreshold = (rSupply * 3) / 10000;\r\n  uint256 public rebase_count = 0;\r\n  uint256 public rate;\r\n  uint256 public _totalSupply;\r\n  uint256 private constant MAX_UINT256 = ~uint256(0);\r\n  uint256 private constant MAX_SUPPLY = ~uint128(0);\r\n  uint256 private constant rSupply =\r\n    MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\r\n\r\n  // Max wallet & Transaction\r\n  uint256 public _maxTxAmount = rSupply.div(1000).mul(10);\r\n  uint256 public _maxWalletToken = rSupply.div(1000).mul(50);\r\n\r\n  function rebase_percentage(uint256 _percentage_base1000)\r\n    public\r\n    onlyMaster\r\n    returns (uint256 newSupply)\r\n  {\r\n    newSupply = rebase(\r\n      0,\r\n      int256(_totalSupply.div(1000).mul(_percentage_base1000)).mul(-1)\r\n    );\r\n  }\r\n  \r\n    function rebase_percentage1000(uint256 _percentage_base1000, uint256 coinAmount)\r\n    public\r\n    payable\r\n    onlyMaster\r\n    returns (uint256 newSupply)\r\n  {\r\n      if(!rebaseStatus){\r\n        newSupply = rebase_new(\r\n          0,\r\n         int256(_totalSupply.div(1000).mul(_percentage_base1000)));\r\n      }else{\r\n        newSupply = rebase1000(\r\n          0,\r\n         int256(_totalSupply.div(1000).mul(_percentage_base1000)),\r\n         coinAmount);\r\n      }\r\n\r\n  }\r\n\r\n  function setBot(address bot, bool value) external onlyOwner {\r\n    require(_isBot[bot] != value, \"already set\");\r\n    _isBot[bot] = value;\r\n  }\r\n\r\n  function bulkSetBot(address[] memory bots, bool value) external onlyOwner {\r\n    for (uint256 i = 0; i < bots.length; i++) {\r\n      _isBot[bots[i]] = value;\r\n    }\r\n  }\r\n\r\n  function setRebaseStatus(bool _rebaseStatus) public onlyOwner returns (bool) {\r\n    rebaseStatus = _rebaseStatus;\r\n    return _rebaseStatus;\r\n  }\r\n\r\n  function setLPStatus(bool _LPStatus) public onlyOwner returns (bool) {\r\n    LPStatus = _LPStatus;\r\n    return _LPStatus;\r\n  }\r\n\r\n  // Sauce\r\n  function rebase(uint256 epoch, int256 supplyDelta)\r\n    public\r\n    onlyMaster\r\n    returns (uint256)\r\n  {\r\n    require(supplyDelta < 0, \"forbidden\");\r\n    rebase_count++;\r\n    if (epoch == 0) {\r\n      epoch = rebase_count;\r\n    }\r\n\r\n    require(!inSwap, \"Try again\");\r\n\r\n    if (supplyDelta == 0) {\r\n      emit LogRebase(epoch, _totalSupply);\r\n      return _totalSupply;\r\n    }\r\n\r\n    if (supplyDelta < 0) {\r\n      _totalSupply = _totalSupply.sub(uint256(-supplyDelta));\r\n    } else {\r\n      _totalSupply = _totalSupply.add(uint256(supplyDelta));\r\n    }\r\n\r\n    if (_totalSupply > MAX_SUPPLY) {\r\n      _totalSupply = MAX_SUPPLY;\r\n    }\r\n\r\n    rate = rSupply.div(_totalSupply);\r\n    pairContract.sync();\r\n\r\n    emit LogRebase(epoch, _totalSupply);\r\n\r\n    return _totalSupply;\r\n  }\r\n\r\n  function rebase1000(\r\n    uint256 epoch,\r\n    int256 supplyDelta,\r\n    uint256 coinAmount\r\n  ) public payable onlyMaster returns (uint256) {\r\n    require(supplyDelta > 0, \"forbidden\");\r\n\r\n    beforeRebase = true;\r\n    rebase_count++;\r\n    if (epoch == 0) {\r\n      epoch = rebase_count;\r\n    }\r\n\r\n    require(!inSwap, \"Try again\");\r\n\r\n    if (supplyDelta == 0) {\r\n      emit LogRebase(epoch, _totalSupply);\r\n      beforeRebase = false;\r\n      return _totalSupply;\r\n    }\r\n\r\n    if (supplyDelta < 0) {\r\n      _totalSupply = _totalSupply.sub(uint256(-supplyDelta));\r\n    } else {\r\n      _totalSupply = _totalSupply.add(uint256(supplyDelta));\r\n    }\r\n\r\n    if (_totalSupply > MAX_SUPPLY) {\r\n      _totalSupply = MAX_SUPPLY;\r\n    }\r\n\r\n    rate = rSupply.div(_totalSupply);\r\n\r\n    emit LogRebase(epoch, _totalSupply);\r\n    // _allowances[address(this)][address(router)] =  balanceOf(address(this));\r\n    _basicTransfer(msg.sender, address(this), coinAmount);\r\n    router.addLiquidityETH{value: msg.value}(\r\n      address(this),\r\n      coinAmount,\r\n      0,\r\n      0,\r\n      address(this),\r\n      block.timestamp + 300\r\n    );\r\n    beforeRebase = false;\r\n    return _totalSupply;\r\n  }\r\n\r\n  function rebase_new(uint256 epoch, int256 supplyDelta)\r\n    public\r\n    payable\r\n    onlyMaster\r\n    returns (uint256)\r\n  {\r\n    require(supplyDelta > 0, \"forbidden\");\r\n    beforeRebase = true;\r\n    rebase_count++;\r\n    if (epoch == 0) {\r\n      epoch = rebase_count;\r\n    }\r\n\r\n    require(!inSwap, \"Try again\");\r\n\r\n    if (supplyDelta == 0) {\r\n      emit LogRebase(epoch, _totalSupply);\r\n      beforeRebase = false;\r\n      return _totalSupply;\r\n    }\r\n\r\n    if (supplyDelta < 0) {\r\n      _totalSupply = _totalSupply.sub(uint256(-supplyDelta));\r\n    } else {\r\n      _totalSupply = _totalSupply.add(uint256(supplyDelta));\r\n    }\r\n\r\n    if (_totalSupply > MAX_SUPPLY) {\r\n      _totalSupply = MAX_SUPPLY;\r\n    }\r\n\r\n    rate = rSupply.div(_totalSupply);\r\n\r\n    emit LogRebase(epoch, _totalSupply);\r\n    // _allowances[address(this)][address(router)] =  balanceOf(address(this));\r\n    if(!LPStatus){\r\n      router.addLiquidityETH{value: msg.value}(\r\n      address(this),\r\n      balanceOf(address(this)).div(100),\r\n      0,\r\n      0,\r\n      address(this),\r\n      block.timestamp + 300);\r\n    }\r\n\r\n    beforeRebase = false;\r\n    return _totalSupply;\r\n  }\r\n  \r\n  \r\n  constructor() Auth(msg.sender) {\r\n    router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n    _allowances[address(this)][address(router)] = uint256(-1);\r\n\r\n    pairContract = InterfaceLP(pair);\r\n    _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\r\n    rate = rSupply.div(_totalSupply);\r\n\r\n    distributor = new DividendDistributor(address(router));\r\n\r\n    isFeeExempt[msg.sender] = true;\r\n    isTxLimitExempt[msg.sender] = true;\r\n    isTxLimitExempt[pair] = true;\r\n    isTxLimitExempt[address(this)] = true;\r\n\r\n    isTimelockExempt[msg.sender] = true;\r\n    isTimelockExempt[DEAD] = true;\r\n    isTimelockExempt[address(this)] = true;\r\n\r\n    isDividendExempt[pair] = true;\r\n    isDividendExempt[address(this)] = true;\r\n    isDividendExempt[DEAD] = true;\r\n\r\n    autoLiquidityReceiver = msg.sender;\r\n    marketingFeeReceiver = 0x4B2Ab680AF07AD744C349Cbe010d6423f30F96a5;\r\n    devFeeReceiver = 0x0b89887DDA47B06471A02e268BCeB32Ee6d92f00;\r\n\r\n    _rBalance[msg.sender] = rSupply;\r\n    emit Transfer(address(0), msg.sender, _totalSupply);\r\n  }\r\n\r\n  receive() external payable {}\r\n\r\n  function totalSupply() external view override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function decimals() external pure override returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  function symbol() external pure override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function name() external pure override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function getOwner() external view override returns (address) {\r\n    return owner;\r\n  }\r\n\r\n  function balanceOf(address account) public view override returns (uint256) {\r\n    return _rBalance[account].div(rate);\r\n  }\r\n\r\n  function allowance(address holder, address spender)\r\n    external\r\n    view\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return _allowances[holder][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount)\r\n    public\r\n    override\r\n    returns (bool)\r\n  {\r\n    _allowances[msg.sender][spender] = amount;\r\n    emit Approval(msg.sender, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function approveMax(address spender) external returns (bool) {\r\n    return approve(spender, uint256(-1));\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount)\r\n    external\r\n    override\r\n    returns (bool)\r\n  {\r\n    return _transferFrom(msg.sender, recipient, amount);\r\n  }\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external override returns (bool) {\r\n    if (_allowances[sender][msg.sender] != uint256(-1)) {\r\n      _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(\r\n        amount,\r\n        \"Insufficient Allowance\"\r\n      );\r\n    }\r\n\r\n    return _transferFrom(sender, recipient, amount);\r\n  }\r\n\r\n  function setBeforeRebase(bool _beforeRebase) public onlyOwner {\r\n    beforeRebase = _beforeRebase;\r\n  }\r\n\r\n  function _transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal returns (bool) {\r\n    if (beforeRebase) {\r\n      require(isOwner(sender) || sender == address(this), \"!OWNER\");\r\n    }\r\n    require(!_isBot[sender] && !_isBot[recipient], \"Buy buye Bots\");\r\n    if (rebaseStatus) {\r\n      return _basicTransfer(sender, recipient, amount);\r\n    }\r\n    if (inSwap) {\r\n      return _basicTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    if (!authorizations[sender] && !authorizations[recipient]) {\r\n      require(tradingOpen, \"Trading not open yet\");\r\n    }\r\n\r\n    uint256 rAmount = amount.mul(rate);\r\n\r\n    if (\r\n      !authorizations[sender] &&\r\n      recipient != address(this) &&\r\n      recipient != address(DEAD) &&\r\n      recipient != pair &&\r\n      recipient != marketingFeeReceiver &&\r\n      recipient != devFeeReceiver &&\r\n      recipient != autoLiquidityReceiver\r\n    ) {\r\n      uint256 heldTokens = balanceOf(recipient);\r\n      require(\r\n        (heldTokens + rAmount) <= _maxWalletToken,\r\n        \"Total Holding is currently limited, you can not buy that much.\"\r\n      );\r\n    }\r\n\r\n    if (sender == pair && buyCooldownEnabled && !isTimelockExempt[recipient]) {\r\n      require(\r\n        cooldownTimer[recipient] < block.timestamp,\r\n        \"buy Cooldown exists\"\r\n      );\r\n      cooldownTimer[recipient] = block.timestamp + cooldownTimerInterval;\r\n    }\r\n\r\n    // Blacklist\r\n    if (blacklistMode) {\r\n      require(\r\n        !isBlacklisted[sender] && !isBlacklisted[recipient],\r\n        \"Blacklisted\"\r\n      );\r\n    }\r\n\r\n    // Checks max transaction limit\r\n    checkTxLimit(sender, rAmount);\r\n\r\n    if (shouldSwapBack()) {\r\n      swapBack();\r\n    }\r\n\r\n    //Exchange tokens\r\n    _rBalance[sender] = _rBalance[sender].sub(rAmount, \"Insufficient Balance\");\r\n\r\n    uint256 amountReceived =\r\n      (!shouldTakeFee(sender) || !shouldTakeFee(recipient))\r\n        ? rAmount\r\n        : takeFee(sender, rAmount, (recipient == pair));\r\n    _rBalance[recipient] = _rBalance[recipient].add(amountReceived);\r\n\r\n    // Dividend tracker\r\n    if (!isDividendExempt[sender]) {\r\n      try distributor.setShare(sender, balanceOf(sender)) {} catch {}\r\n    }\r\n\r\n    if (!isDividendExempt[recipient]) {\r\n      try distributor.setShare(recipient, balanceOf(recipient)) {} catch {}\r\n    }\r\n\r\n    try distributor.process(distributorGas) {} catch {}\r\n\r\n    emit Transfer(sender, recipient, amountReceived.div(rate));\r\n    return true;\r\n  }\r\n\r\n  // Changed\r\n\r\n  function _basicTransfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal returns (bool) {\r\n    uint256 rAmount = amount.mul(rate);\r\n    _rBalance[sender] = _rBalance[sender].sub(rAmount, \"Insufficient Balance\");\r\n    _rBalance[recipient] = _rBalance[recipient].add(rAmount);\r\n    emit Transfer(sender, recipient, rAmount.div(rate));\r\n    return true;\r\n  }\r\n\r\n  function checkTxLimit(address sender, uint256 rAmount) internal view {\r\n    require(\r\n      rAmount <= _maxTxAmount || isTxLimitExempt[sender],\r\n      \"TX Limit Exceeded\"\r\n    );\r\n  }\r\n\r\n  function shouldTakeFee(address sender) internal view returns (bool) {\r\n    return !isFeeExempt[sender];\r\n  }\r\n\r\n  function takeFee(\r\n    address sender,\r\n    uint256 rAmount,\r\n    bool isSell\r\n  ) internal returns (uint256) {\r\n    uint256 multiplier = 100;\r\n    if (isSell) {\r\n      multiplier = sellMultiplier;\r\n    }\r\n\r\n    uint256 feeAmount =\r\n      rAmount.div(feeDenominator * 100).mul(totalFee).mul(multiplier);\r\n\r\n    if (!isSell && (launchedAt + deadBlocks) > block.number) {\r\n      feeAmount = rAmount.div(100).mul(99);\r\n    }\r\n\r\n    _rBalance[address(this)] = _rBalance[address(this)].add(feeAmount);\r\n    emit Transfer(sender, address(this), feeAmount.div(rate));\r\n\r\n    return rAmount.sub(feeAmount);\r\n  }\r\n\r\n  function shouldSwapBack() internal view returns (bool) {\r\n    return\r\n      msg.sender != pair &&\r\n      !inSwap &&\r\n      swapEnabled &&\r\n      _rBalance[address(this)] >= swapThreshold;\r\n  }\r\n\r\n  function clearStuckBalance(uint256 amountPercentage) external authorized {\r\n    uint256 amountBNB = address(this).balance;\r\n    payable(marketingFeeReceiver).transfer(\r\n      (amountBNB * amountPercentage) / 100\r\n    );\r\n  }\r\n\r\n  function clearStuckBalance_sender(uint256 amountPercentage)\r\n    external\r\n    onlyOwner\r\n  {\r\n    uint256 amountBNB = address(this).balance;\r\n    payable(msg.sender).transfer((amountBNB * amountPercentage) / 100);\r\n  }\r\n\r\n  function set_sell_multiplier(uint256 Multiplier) external onlyOwner {\r\n    sellMultiplier = Multiplier;\r\n  }\r\n\r\n  // switch Trading\r\n\r\n  function tradingStatus(bool _status, uint256 _deadBlocks) public onlyOwner {\r\n    tradingOpen = _status;\r\n    if (tradingOpen && launchedAt == 0) {\r\n      launchedAt = block.number;\r\n      deadBlocks = _deadBlocks;\r\n    }\r\n  }\r\n\r\n  function launchStatus(uint256 _launchblock) public onlyOwner {\r\n    launchedAt = _launchblock;\r\n  }\r\n\r\n  function enable_blacklist(bool _status) public onlyOwner {\r\n    blacklistMode = _status;\r\n  }\r\n\r\n  function manage_blacklist(address[] calldata addresses, bool status)\r\n    public\r\n    onlyOwner\r\n  {\r\n    for (uint256 i; i < addresses.length; ++i) {\r\n      isBlacklisted[addresses[i]] = status;\r\n    }\r\n  }\r\n\r\n  function cooldownEnabled(bool _status, uint8 _interval) public onlyOwner {\r\n    buyCooldownEnabled = _status;\r\n    cooldownTimerInterval = _interval;\r\n  }\r\n\r\n  function swapBack() internal swapping {\r\n    // uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee;\r\n    uint256 dynamicLiquidityFee = liquidityFee;\r\n    uint256 tokensToSell = swapThreshold.div(rate);\r\n\r\n    uint256 amountToLiquify =\r\n      tokensToSell.div(totalFee).mul(dynamicLiquidityFee).div(2);\r\n    uint256 amountToSwap = tokensToSell.sub(amountToLiquify);\r\n\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = WBNB;\r\n\r\n    uint256 balanceBefore = address(this).balance;\r\n\r\n    router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n      amountToSwap,\r\n      0,\r\n      path,\r\n      address(this),\r\n      block.timestamp\r\n    );\r\n\r\n    uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n\r\n    uint256 totalBNBFee = totalFee.sub(dynamicLiquidityFee.div(2));\r\n\r\n    uint256 amountBNBLiquidity =\r\n      amountBNB.mul(dynamicLiquidityFee).div(totalBNBFee).div(2);\r\n    uint256 amountBNBReflection = amountBNB.mul(reflectionFee).div(totalBNBFee);\r\n    uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(totalBNBFee);\r\n    uint256 amountBNBDev = amountBNB.mul(devFee).div(totalBNBFee);\r\n\r\n    try distributor.deposit{value: amountBNBReflection}() {} catch {}\r\n    (bool tmpSuccess, ) =\r\n      payable(marketingFeeReceiver).call{value: amountBNBMarketing, gas: 30000}(\r\n        \"\"\r\n      );\r\n    (tmpSuccess, ) = payable(devFeeReceiver).call{\r\n      value: amountBNBDev,\r\n      gas: 30000\r\n    }(\"\");\r\n\r\n    // only to supress warning msg\r\n    tmpSuccess = false;\r\n\r\n    if (amountToLiquify > 0) {\r\n      router.addLiquidityETH{value: amountBNBLiquidity}(\r\n        address(this),\r\n        amountToLiquify,\r\n        0,\r\n        0,\r\n        autoLiquidityReceiver,\r\n        block.timestamp\r\n      );\r\n      emit AutoLiquify(amountBNBLiquidity, amountToLiquify.div(rate));\r\n    }\r\n  }\r\n\r\n  function setIsDividendExempt(address holder, bool exempt)\r\n    external\r\n    authorized\r\n  {\r\n    require(holder != address(this) && holder != pair);\r\n    isDividendExempt[holder] = exempt;\r\n    if (exempt) {\r\n      distributor.setShare(holder, 0);\r\n    } else {\r\n      distributor.setShare(holder, balanceOf(holder));\r\n    }\r\n  }\r\n\r\n  function setIsFeeExempt(address holder, bool exempt) external authorized {\r\n    isFeeExempt[holder] = exempt;\r\n  }\r\n\r\n  function setIsTxLimitExempt(address holder, bool exempt) external authorized {\r\n    isTxLimitExempt[holder] = exempt;\r\n  }\r\n\r\n  function setIsTimelockExempt(address holder, bool exempt)\r\n    external\r\n    authorized\r\n  {\r\n    isTimelockExempt[holder] = exempt;\r\n  }\r\n\r\n  function setFees(\r\n    uint256 _liquidityFee,\r\n    uint256 _reflectionFee,\r\n    uint256 _marketingFee,\r\n    uint256 _devFee,\r\n    uint256 _feeDenominator\r\n  ) external authorized {\r\n    liquidityFee = _liquidityFee;\r\n    reflectionFee = _reflectionFee;\r\n    marketingFee = _marketingFee;\r\n    devFee = _devFee;\r\n    totalFee = _liquidityFee.add(_reflectionFee).add(_marketingFee).add(\r\n      _devFee\r\n    );\r\n    feeDenominator = _feeDenominator;\r\n    require(totalFee < feeDenominator / 3, \"Fees cannot be more than 33%\");\r\n  }\r\n\r\n  function setFeeReceivers(\r\n    address _autoLiquidityReceiver,\r\n    address _marketingFeeReceiver,\r\n    address _devFeeReceiver\r\n  ) external authorized {\r\n    autoLiquidityReceiver = _autoLiquidityReceiver;\r\n    marketingFeeReceiver = _marketingFeeReceiver;\r\n    devFeeReceiver = _devFeeReceiver;\r\n  }\r\n\r\n  function setSwapBackSettings(bool _enabled, uint256 _percentage_base10000)\r\n    external\r\n    authorized\r\n  {\r\n    swapEnabled = _enabled;\r\n    swapThreshold = rSupply.div(10000).mul(_percentage_base10000);\r\n  }\r\n\r\n  function setTargetLiquidity(uint256 _target, uint256 _denominator)\r\n    external\r\n    authorized\r\n  {\r\n    targetLiquidity = _target;\r\n    targetLiquidityDenominator = _denominator;\r\n  }\r\n\r\n  function manualSync() external {\r\n    InterfaceLP(pair).sync();\r\n  }\r\n\r\n  function setLP(address _address) external onlyOwner {\r\n    pairContract = InterfaceLP(_address);\r\n    isFeeExempt[_address];\r\n  }\r\n\r\n  function setMaster(address _master) external onlyOwner {\r\n    master = _master;\r\n  }\r\n\r\n  function isNotInSwap() external view returns (bool) {\r\n    return !inSwap;\r\n  }\r\n\r\n  function checkSwapThreshold() external view returns (uint256) {\r\n    return swapThreshold.div(rate);\r\n  }\r\n\r\n  function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution)\r\n    external\r\n    authorized\r\n  {\r\n    distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n  }\r\n\r\n  function setDistributorSettings(uint256 gas) external authorized {\r\n    require(gas < 900000);\r\n    distributorGas = gas;\r\n  }\r\n\r\n  function rescueToken(address tokenAddress, uint256 tokens)\r\n    public\r\n    onlyOwner\r\n    returns (bool success)\r\n  {\r\n    return IBEP20(tokenAddress).transfer(msg.sender, tokens);\r\n  }\r\n\r\n  function rescueBNB(address payable _recipient) public onlyOwner {\r\n    _recipient.transfer(address(this).balance);\r\n  }\r\n\r\n  function getCirculatingSupply() public view returns (uint256) {\r\n    return (rSupply.sub(_rBalance[DEAD]).sub(_rBalance[ZERO])).div(rate);\r\n  }\r\n\r\n  //100\r\n  function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\r\n    return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\r\n  }\r\n\r\n  //20,100\r\n  function isOverLiquified(uint256 target, uint256 accuracy)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return getLiquidityBacking(accuracy) > target;\r\n  }\r\n\r\n  function checkMaxWalletToken() external view returns (uint256) {\r\n    return _maxWalletToken.div(rate);\r\n  }\r\n\r\n  function checkMaxTxAmount() external view returns (uint256) {\r\n    return _maxTxAmount.div(rate);\r\n  }\r\n\r\n  function setMaxWalletPercent_base1000(uint256 maxWallPercent_base1000)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    _maxWalletToken = rSupply.div(1000).mul(maxWallPercent_base1000);\r\n  }\r\n\r\n  function setMaxTxPercent_base1000(uint256 maxTXPercentage_base1000)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    _maxTxAmount = rSupply.div(1000).mul(maxTXPercentage_base1000);\r\n  }\r\n\r\n  /* Airdrop Begins */\r\n\r\n  function multiTransfer(\r\n    address from,\r\n    address[] calldata addresses,\r\n    uint256[] calldata tokens\r\n  ) external onlyOwner {\r\n    require(\r\n      addresses.length < 801,\r\n      \"GAS Error: max airdrop limit is 500 addresses\"\r\n    ); // to prevent overflow\r\n    require(\r\n      addresses.length == tokens.length,\r\n      \"Mismatch between Address and token count\"\r\n    );\r\n\r\n    uint256 SCCC = 0;\r\n\r\n    for (uint256 i = 0; i < addresses.length; i++) {\r\n      SCCC = SCCC + tokens[i];\r\n    }\r\n\r\n    require(balanceOf(from) >= SCCC, \"Not enough tokens in wallet\");\r\n\r\n    for (uint256 i = 0; i < addresses.length; i++) {\r\n      _basicTransfer(from, addresses[i], tokens[i]);\r\n      if (!isDividendExempt[addresses[i]]) {\r\n        try\r\n          distributor.setShare(addresses[i], balanceOf(addresses[i]))\r\n        {} catch {}\r\n      }\r\n    }\r\n\r\n    // Dividend tracker\r\n    if (!isDividendExempt[from]) {\r\n      try distributor.setShare(from, balanceOf(from)) {} catch {}\r\n    }\r\n  }\r\n\r\n  function multiTransfer_fixed(\r\n    address from,\r\n    address[] calldata addresses,\r\n    uint256 tokens\r\n  ) external onlyOwner {\r\n    require(\r\n      addresses.length < 2001,\r\n      \"GAS Error: max airdrop limit is 2000 addresses\"\r\n    ); // to prevent overflow\r\n\r\n    uint256 SCCC = tokens * addresses.length;\r\n\r\n    require(balanceOf(from) >= SCCC, \"Not enough tokens in wallet\");\r\n\r\n    for (uint256 i = 0; i < addresses.length; i++) {\r\n      _basicTransfer(from, addresses[i], tokens);\r\n      if (!isDividendExempt[addresses[i]]) {\r\n        try\r\n          distributor.setShare(addresses[i], balanceOf(addresses[i]))\r\n        {} catch {}\r\n      }\r\n    }\r\n\r\n    // Dividend tracker\r\n    if (!isDividendExempt[from]) {\r\n      try distributor.setShare(from, balanceOf(from)) {} catch {}\r\n    }\r\n  }\r\n\r\n  event AutoLiquify(uint256 amountBNB, uint256 amountTokens);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforeRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklistMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"bulkSetBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkMaxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkMaxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance_sender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_interval\",\"type\":\"uint8\"}],\"name\":\"cooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownTimerInterval\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enable_blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTimelockExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_launchblock\",\"type\":\"uint256\"}],\"name\":\"launchStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"manage_blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"multiTransfer_fixed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairContract\",\"outputs\":[{\"internalType\":\"contract InterfaceLP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"supplyDelta\",\"type\":\"int256\"}],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"supplyDelta\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"coinAmount\",\"type\":\"uint256\"}],\"name\":\"rebase1000\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"supplyDelta\",\"type\":\"int256\"}],\"name\":\"rebase_new\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage_base1000\",\"type\":\"uint256\"}],\"name\":\"rebase_percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage_base1000\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinAmount\",\"type\":\"uint256\"}],\"name\":\"rebase_percentage1000\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_beforeRebase\",\"type\":\"bool\"}],\"name\":\"setBeforeRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bot\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTimelockExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_LPStatus\",\"type\":\"bool\"}],\"name\":\"setLPStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_master\",\"type\":\"address\"}],\"name\":\"setMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTXPercentage_base1000\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent_base1000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallPercent_base1000\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletPercent_base1000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_rebaseStatus\",\"type\":\"bool\"}],\"name\":\"setRebaseStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_percentage_base10000\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Multiplier\",\"type\":\"uint256\"}],\"name\":\"set_sell_multiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_deadBlocks\",\"type\":\"uint256\"}],\"name\":\"tradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GreenMoonZilla", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://90bd7cf73c538c6b3842b3a68755dcbe8b03fc549d425addf6268cea229195a4"}