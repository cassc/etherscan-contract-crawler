{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/NGR_Grow.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {IGrow} from \\\"./interfaces/IGrow.sol\\\";\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"openzeppelin/access/Ownable.sol\\\";\\n\\nerror NGR_GROW__InvalidLiquidationAmount();\\nerror NGR_GROW__InvalidWithdraw();\\nerror NGR_GROW__LowPrice();\\nerror NGR_GROW__InvalidMinDeposit();\\nerror NGR_GROW__InvalidMaxDeposit();\\nerror NGR_GROW__InvalidDepositAmount();\\nerror NGR_GROW__LiquidatorMinDepositNotReached();\\n\\ncontract NGR_with_Grow is Ownable {\\n    //------------------------------------------------\\n    // Type Declarations\\n    //------------------------------------------------\\n    struct Position {\\n        address owner;\\n        uint depositTime;\\n        uint liqTime;\\n        uint amountDeposited;\\n        uint growAmount;\\n        uint liquidationPrice;\\n        uint liquidatedAmount;\\n        bool isLiquidated;\\n        bool early;\\n    }\\n\\n    struct UserStats {\\n        uint totalDeposited;\\n        uint totalLiquidated;\\n        uint totalEarly;\\n        uint otherLiquidationProfits;\\n    }\\n    struct UserPositions {\\n        uint mainDeposit;\\n        uint liquidationStartPrice;\\n        uint positionId;\\n    }\\n    //------------------------------------------------\\n    // State Variables\\n    //------------------------------------------------\\n    mapping(uint => Position) public positions;\\n    mapping(address => UserStats) public userStats;\\n    mapping(address => bool) public autoReinvest;\\n    mapping(address => bool) public isLiquidator;\\n    mapping(address => UserPositions[]) public userMainDeposits;\\n\\n    IGrow public immutable grow;\\n    IERC20 public immutable usdt;\\n    address public devWallet;\\n\\n    uint public currentPositionToLiquidate;\\n    uint public queuePosition;\\n\\n    uint public totalDeposits;\\n    uint public totalLiquidations;\\n    uint public totalPaidToLiquidators;\\n\\n    uint public liquidatorAmount = 1;\\n    uint public totalAmount = 5;\\n\\n    uint public minLiquidatorThreshold = 50 ether;\\n\\n    uint public constant MIN_DEPOSIT = 10 ether;\\n    uint public constant TCV_DEPOSIT_LIMIT_1 = 500 ether;\\n    uint public constant TCV_DEPOSIT_LIMIT_2 = 1_000 ether;\\n    uint public constant DEPOSIT_LIMIT_2 = 25 ether;\\n    uint public constant DEPOSIT_LIMIT_1 = 50 ether;\\n\\n    uint public constant MAX_DEPOSIT_LIMIT = 25 ether;\\n    uint public constant TARGET_PROFIT = 6;\\n    uint public constant MIN_PROFIT = 5;\\n    uint private constant FULL_MIN_PROFIT = 105;\\n    uint private constant FULL_TARGET_PROFIT = 106;\\n    uint private constant GROW_SELL_TOTAL_RCV = 94;\\n\\n    uint public constant PERCENT = 100;\\n    uint private constant MAGNIFIER = 1 ether;\\n\\n    //------------------------------------------------\\n    // Events\\n    //------------------------------------------------\\n    event Deposit(\\n        address indexed owner,\\n        uint indexed position,\\n        uint amount,\\n        uint growAmount\\n    );\\n    event EarlyExit(\\n        address indexed owner,\\n        uint indexed position,\\n        uint totalReceived\\n    );\\n    event Liquidated(\\n        address indexed owner,\\n        uint indexed position,\\n        uint totalReceived\\n    );\\n    event LiquidatorAction(\\n        address indexed liquidator,\\n        uint totalLiquidatorReceived,\\n        uint totalLiquidated\\n    );\\n    event SetSelfAutoReinvest(address indexed user, bool autoReinvest);\\n\\n    //------------------------------------------------\\n    // Modifiers\\n    //------------------------------------------------\\n    modifier checkAmount(uint amount) {\\n        // Can only deposit FULL token amounts\\n        if (amount % 1 ether != 0) revert NGR_GROW__InvalidDepositAmount();\\n        // Minimum Deposit of 10$ (10 USDT)\\n        if (amount < MIN_DEPOSIT) revert NGR_GROW__InvalidMinDeposit();\\n        if (amount > MAX_DEPOSIT_LIMIT) revert NGR_GROW__InvalidMaxDeposit();\\n        _;\\n    }\\n\\n    //------------------------------------------------\\n    // Constructor\\n    //------------------------------------------------\\n    constructor(address _grow, address _usdt, address _dev) {\\n        currentPositionToLiquidate = 0;\\n        queuePosition = 0;\\n        grow = IGrow(_grow);\\n        usdt = IERC20(_usdt);\\n        devWallet = _dev;\\n        usdt.approve(_grow, type(uint).max);\\n        usdt.approve(address(this), type(uint).max);\\n        isLiquidator[devWallet] = true;\\n    }\\n\\n    //------------------------------------------------\\n    // External Functions\\n    //------------------------------------------------\\n\\n    /**\\n     * @notice Deposit USDT to the contract and buy GROW\\n     * @param amount Amount of USDT to deposit\\n     * @param _autoReinvest Whether to auto reinvest or not\\n     */\\n    function deposit(\\n        uint amount,\\n        bool _autoReinvest\\n    ) external checkAmount(amount) {\\n        autoReinvest[msg.sender] = _autoReinvest;\\n\\n        uint currentQueuePos = queuePosition;\\n        UserPositions[] storage userMain = userMainDeposits[msg.sender];\\n        // First liquidation is stored in the main positions array\\n        userMain.push(\\n            UserPositions({\\n                mainDeposit: amount,\\n                liquidationStartPrice: _deposit(msg.sender, msg.sender, amount),\\n                positionId: currentQueuePos\\n            })\\n        );\\n\\n        userStats[msg.sender].totalDeposited += amount;\\n        totalDeposits += amount;\\n\\n        if (\\n            !isLiquidator[msg.sender] &&\\n            userStats[msg.sender].totalDeposited >= minLiquidatorThreshold\\n        ) {\\n            isLiquidator[msg.sender] = true;\\n        }\\n    }\\n\\n    function depositForUser(\\n        uint amount,\\n        address _receiver\\n    ) external checkAmount(amount) {\\n        uint currentQueuePos = queuePosition;\\n        UserPositions[] storage userMain = userMainDeposits[_receiver];\\n        // First liquidation is stored in the main positions array\\n        userMain.push(\\n            UserPositions({\\n                mainDeposit: amount,\\n                liquidationStartPrice: _deposit(_receiver, msg.sender, amount),\\n                positionId: currentQueuePos\\n            })\\n        );\\n        userStats[msg.sender].totalDeposited += amount;\\n        totalDeposits += amount;\\n    }\\n\\n    function changeAutoReinvest(bool _autoReinvest) external {\\n        autoReinvest[msg.sender] = _autoReinvest;\\n    }\\n\\n    function earlyExit(uint position) external {\\n        Position storage exitPos = positions[position];\\n\\n        if (exitPos.isLiquidated || exitPos.owner != msg.sender)\\n            revert NGR_GROW__InvalidWithdraw();\\n\\n        exitPos.isLiquidated = true;\\n        exitPos.early = true;\\n        exitPos.liqTime = block.timestamp;\\n        uint totalSell = grow.sell(exitPos.growAmount, address(usdt));\\n        uint minSent = (exitPos.amountDeposited * 92) / 100;\\n\\n        uint min = totalSell < minSent ? totalSell : minSent;\\n        uint remaining = totalSell - min;\\n        // Transfer out the minimum\\n        exitPos.liquidatedAmount = min;\\n        usdt.transfer(exitPos.owner, min);\\n        // If there's any remaning, that's the fee\\n        if (remaining > 0) usdt.transfer(devWallet, remaining);\\n        userStats[msg.sender].totalEarly += min;\\n\\n        emit EarlyExit(msg.sender, position, min);\\n        totalLiquidations += totalSell;\\n    }\\n\\n    function liquidatePositions(uint[] calldata _positions) external {\\n        if (!isLiquidator[msg.sender])\\n            revert NGR_GROW__LiquidatorMinDepositNotReached();\\n        uint rewardAccumulator = 0;\\n        uint accLiquidations = 0;\\n        uint accDevProportion = 0;\\n        uint positionLiquidated = currentPositionToLiquidate;\\n        for (uint i = 0; i < _positions.length; i++) {\\n            uint currentPrice = grow.calculatePrice();\\n            if (positionLiquidated < _positions[i])\\n                positionLiquidated = _positions[i];\\n            Position storage liquidatedPos = positions[_positions[i]];\\n            //If position has laready been liquidated or not reached, then skip.\\n            // We can't assure that all _positions are in order, so skipping is necessary\\n            // instead of reverting\\n            if (\\n                currentPrice < liquidatedPos.liquidationPrice ||\\n                liquidatedPos.isLiquidated\\n            ) continue;\\n\\n            liquidatedPos.isLiquidated = true;\\n            liquidatedPos.liqTime = block.timestamp;\\n            uint totalSell = grow.sell(\\n                address(this),\\n                liquidatedPos.growAmount,\\n                address(usdt)\\n            );\\n            accLiquidations += totalSell;\\n\\n            // GET USERS PROFIT\\n            uint userProfit = calculateMinProfitAmount(\\n                liquidatedPos.amountDeposited\\n            );\\n\\n            uint liquidatorProfit = totalSell - userProfit;\\n            uint devProportion = (liquidatorProfit * 6) / 10;\\n            liquidatorProfit -= devProportion;\\n\\n            rewardAccumulator += liquidatorProfit;\\n            accDevProportion += devProportion;\\n            userStats[liquidatedPos.owner].totalLiquidated += userProfit;\\n            liquidatedPos.liquidatedAmount = userProfit;\\n\\n            if (autoReinvest[liquidatedPos.owner]) {\\n                // Cant re invest more than max\\n                if (userProfit > MAX_DEPOSIT_LIMIT) {\\n                    usdt.transfer(\\n                        liquidatedPos.owner,\\n                        userProfit - MAX_DEPOSIT_LIMIT\\n                    );\\n                    userProfit = MAX_DEPOSIT_LIMIT;\\n                }\\n                uint currentQueuePos = queuePosition;\\n                UserPositions[] storage userMain = userMainDeposits[\\n                    liquidatedPos.owner\\n                ];\\n                // First liquidation is stored in the main positions array\\n                userMain.push(\\n                    UserPositions({\\n                        mainDeposit: userProfit,\\n                        liquidationStartPrice: _deposit(\\n                            liquidatedPos.owner,\\n                            address(this),\\n                            userProfit\\n                        ),\\n                        positionId: currentQueuePos\\n                    })\\n                );\\n            } else usdt.transfer(liquidatedPos.owner, userProfit);\\n            emit Liquidated(liquidatedPos.owner, _positions[i], totalSell);\\n        }\\n        currentPositionToLiquidate = positionLiquidated;\\n        totalPaidToLiquidators += rewardAccumulator;\\n        totalLiquidations += accLiquidations;\\n        userStats[msg.sender].otherLiquidationProfits += rewardAccumulator;\\n        if (rewardAccumulator > 0) usdt.transfer(msg.sender, rewardAccumulator);\\n        if (accDevProportion > 0) usdt.transfer(devWallet, accDevProportion);\\n        emit LiquidatorAction(msg.sender, rewardAccumulator, accLiquidations);\\n    }\\n\\n    function setSelfAutoReinvest(bool _autoReinvest) external {\\n        autoReinvest[msg.sender] = _autoReinvest;\\n        emit SetSelfAutoReinvest(msg.sender, _autoReinvest);\\n    }\\n\\n    function updateDevWallet(address _devWallet) external onlyOwner {\\n        devWallet = _devWallet;\\n    }\\n\\n    function setLiquidatorThreshold(uint _thresholdAmount) external onlyOwner {\\n        minLiquidatorThreshold = _thresholdAmount;\\n    }\\n\\n    function setLiquidator(address[] calldata _liquidators) external onlyOwner {\\n        for (uint i = 0; i < _liquidators.length; i++) {\\n            isLiquidator[_liquidators[i]] = true;\\n        }\\n    }\\n\\n    //------------------------------------------------\\n    // Private / Internal Functions\\n    //------------------------------------------------\\n    function _deposit(\\n        address user,\\n        address sender,\\n        uint amount\\n    ) private returns (uint liqPrice) {\\n        usdt.transferFrom(sender, address(grow), amount);\\n        uint boughtGrow = uint(\\n            grow.buyFor(address(this), amount, address(usdt))\\n        );\\n        liqPrice = calculateLiquidationPrice(amount, boughtGrow);\\n        Position storage created = positions[queuePosition];\\n        created.depositTime = block.timestamp;\\n        created.owner = user;\\n        created.amountDeposited = amount;\\n        created.growAmount = boughtGrow;\\n        created.liquidationPrice = liqPrice;\\n        emit Deposit(user, queuePosition, amount, boughtGrow);\\n        queuePosition++;\\n    }\\n\\n    //------------------------------------------------\\n    // External View Functions\\n    //------------------------------------------------\\n    function getUserPositions(\\n        address _owner\\n    ) public view returns (uint[] memory) {\\n        uint length = userMainDeposits[_owner].length;\\n        uint[] memory allPositions = new uint[](length);\\n        for (uint i = 0; i < length; i++) {\\n            allPositions[i] = userMainDeposits[_owner][i].positionId;\\n        }\\n        return allPositions;\\n    }\\n\\n    function getUserPositionsInfo(\\n        address _owner\\n    ) external view returns (Position[] memory) {\\n        uint length = userMainDeposits[_owner].length;\\n        Position[] memory positionsInfo = new Position[](length);\\n        for (uint i = 0; i < length; i++) {\\n            positionsInfo[i] = positions[\\n                userMainDeposits[_owner][i].positionId\\n            ];\\n        }\\n        return positionsInfo;\\n    }\\n\\n    function getPositions(\\n        uint startPosition,\\n        uint positionAmount\\n    ) external view returns (Position[] memory) {\\n        Position[] memory positionsInfo = new Position[](positionAmount);\\n        for (uint i = 0; i < positionAmount; i++) {\\n            positionsInfo[i] = positions[startPosition + i];\\n        }\\n        return positionsInfo;\\n    }\\n\\n    function getUserMainPositions(\\n        address _owner\\n    ) external view returns (UserPositions[] memory) {\\n        return userMainDeposits[_owner];\\n    }\\n\\n    //------------------------------------------------\\n    // Private View PURE Functions\\n    //------------------------------------------------\\n    function calculateLiquidationPrice(\\n        uint depositAmount,\\n        uint growAmount\\n    ) private pure returns (uint) {\\n        return\\n            (depositAmount * FULL_TARGET_PROFIT * MAGNIFIER) /\\n            (growAmount * GROW_SELL_TOTAL_RCV);\\n    }\\n\\n    function calculateMinProfitAmount(uint amount) private pure returns (uint) {\\n        return (amount * FULL_MIN_PROFIT) / PERCENT;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IGrow.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IGrow is IERC20 {\\n    function burn(uint256 amount) external;\\n\\n    function sell(\\n        uint256 amount,\\n        address stable\\n    ) external returns (uint stableReceived);\\n\\n    function sell(\\n        address recipient,\\n        uint256 amount,\\n        address stable\\n    ) external returns (uint stableReceived);\\n\\n    function sellAll(address _stable) external;\\n\\n    // These functions are used to buy CLIMB with STABLE, STABLE will need to be approved for transfer in for this contract.\\n    function buy(uint256 numTokens, address stable) external returns (uint256);\\n\\n    function buy(\\n        address recipient,\\n        uint256 numTokens,\\n        address stable\\n    ) external returns (uint256);\\n\\n    /// @notice although this function has the same parameters as the BUY functions, only Matrix contracts can call this function\\n    /// @dev the Matrix contract MUST send STABLE tokens to this contract before calling this function. Without this function, the Matrix contract would have to receive STABLE tokens from the user, then approve STABLE tokens to the contract to buy CLIMB token and then CLIMB would need to transfer STABLE back to themselves. This function saves gas and time.\\n    function buyFor(\\n        address recipient,\\n        uint256 numTokens,\\n        address stable\\n    ) external returns (uint256);\\n\\n    function eraseHoldings(uint256 nHoldings) external;\\n\\n    function volumeFor(address wallet) external view returns (uint256);\\n\\n    function calculatePrice() external view returns (uint256);\\n\\n    function burnWithUnderlying(\\n        uint256 underlyingAmount,\\n        address _stable\\n    ) external;\\n\\n    function stables(\\n        address _stable\\n    )\\n        external\\n        view\\n        returns (\\n            uint balance,\\n            uint8 index,\\n            uint8 decimals,\\n            bool accepted,\\n            bool setup\\n        );\\n\\n    function allStables() external view returns (address[] memory);\\n\\n    ///@notice this function is called by OWNER only and is used to exchange the complete balance in STABLE1 for STABLE2\\n    function exchangeTokens(\\n        address stable1,\\n        address stable2,\\n        address _router\\n    ) external;\\n\\n    // owner functions\\n    function setExecutorAddress(address executor, bool exempt) external;\\n\\n    ///////////////////////////////////\\n    //////        EVENTS        ///////\\n    ///////////////////////////////////\\n\\n    event UpdateShares(uint256 updatedDevShare, uint256 updatedLiquidityShare);\\n    event UpdateFees(\\n        uint256 updatedSellFee,\\n        uint256 updatedMintFee,\\n        uint256 updatedTransferFee\\n    );\\n    event UpdateDevAddress(address updatedDev);\\n    event SetExecutor(address executor, bool isExecutor);\\n    event PriceChange(\\n        uint256 previousPrice,\\n        uint256 currentPrice,\\n        uint256 totalSupply\\n    );\\n    event ErasedHoldings(address who, uint256 amountTokensErased);\\n    event GarbageCollected(uint256 amountTokensErased);\\n    event UpdateTokenSlippage(uint256 newSlippage);\\n    event TransferOwnership(address newOwner);\\n    event TokenStaked(uint256 assetsReceived, address recipient);\\n    event SetFeeExemption(address Contract, bool exempt);\\n    event TokenActivated(uint256 totalSupply, uint256 price, uint256 timestamp);\\n    event TokenSold(\\n        uint256 amountCLIMB,\\n        uint256 assetsRedeemed,\\n        address recipient\\n    );\\n    event TokenPurchased(uint256 assetsReceived, address recipient);\\n    event SetStableToken(address stable, bool exempt);\\n    event ExchangeToken(\\n        address _from,\\n        address _to,\\n        uint256 amountFROM,\\n        uint256 amountTO\\n    );\\n    event Burn(uint amountInGrow, uint amountInStable);\\n}\\n\\ninterface IOwnableGrow is IGrow {\\n    function owner() external returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"chainlink/=lib/chainlink/contracts/src/v0.8/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_grow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NGR_GROW__InvalidDepositAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NGR_GROW__InvalidMaxDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NGR_GROW__InvalidMinDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NGR_GROW__InvalidWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NGR_GROW__LiquidatorMinDepositNotReached\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"growAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReceived\",\"type\":\"uint256\"}],\"name\":\"EarlyExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReceived\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLiquidatorReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLiquidated\",\"type\":\"uint256\"}],\"name\":\"LiquidatorAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoReinvest\",\"type\":\"bool\"}],\"name\":\"SetSelfAutoReinvest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSIT_LIMIT_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_LIMIT_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEPOSIT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_PROFIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TARGET_PROFIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TCV_DEPOSIT_LIMIT_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TCV_DEPOSIT_LIMIT_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoReinvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autoReinvest\",\"type\":\"bool\"}],\"name\":\"changeAutoReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPositionToLiquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_autoReinvest\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"depositForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"earlyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"}],\"name\":\"getPositions\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liqTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"growAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLiquidated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"early\",\"type\":\"bool\"}],\"internalType\":\"struct NGR_with_Grow.Position[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUserMainPositions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mainDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"internalType\":\"struct NGR_with_Grow.UserPositions[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUserPositions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUserPositionsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liqTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"growAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLiquidated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"early\",\"type\":\"bool\"}],\"internalType\":\"struct NGR_with_Grow.Position[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grow\",\"outputs\":[{\"internalType\":\"contract IGrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_positions\",\"type\":\"uint256[]\"}],\"name\":\"liquidatePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidatorAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLiquidatorThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liqTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"growAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLiquidated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"early\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_liquidators\",\"type\":\"address[]\"}],\"name\":\"setLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_thresholdAmount\",\"type\":\"uint256\"}],\"name\":\"setLiquidatorThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autoReinvest\",\"type\":\"bool\"}],\"name\":\"setSelfAutoReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPaidToLiquidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"name\":\"updateDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userMainDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mainDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarly\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"otherLiquidationProfits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NGR_with_Grow", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a72f53ea4f3cf19f1f6359e87e58221bd0a7068b00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000f38d66f68b7b9570d196daef5c5c1a58ba5597e8", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}