{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n interface IERC20 {\\r\\n/**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.9.3\\r\\n\\r\\n// Original license: SPDX_License_Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * The default value of {decimals} is 18. To change this, you should override\\r\\n * this function so it returns a different value.\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the default value returned by this function, unless\\r\\n     * it's overridden.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\r\\n            // decrementing then incrementing.\\r\\n            _balances[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        unchecked {\\r\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\r\\n            _balances[account] += amount;\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\r\\n            _totalSupply -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\r\\n}\\r\\n/**\\r\\n * @title Crowdsale\\r\\n * @dev Crowdsale is a base contract for managing a token crowdsale,\\r\\n * allowing investors to purchase tokens with ether. This contract implements\\r\\n * such functionality in its most fundamental form and can be extended to provide additional\\r\\n * functionality and/or custom behavior.\\r\\n * The external interface represents the basic interface for purchasing tokens, and conform\\r\\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\\r\\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\\r\\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\\r\\n * behavior.\\r\\n */\\r\\ncontract Crowdsale  {\\r\\n\\r\\n\\r\\n  // The token being sold\\r\\n  ERC20 public token;\\r\\n\\r\\n  // Address where funds are collected\\r\\n  address payable public wallet;\\r\\n\\r\\n  // How many token units a buyer gets per wei\\r\\n  uint256 public rate;\\r\\n\\r\\n  // Amount of wei raised\\r\\n  uint256 public weiRaised;\\r\\n\\r\\n  /**\\r\\n   * Event for token purchase logging\\r\\n   * @param purchaser who paid for the tokens\\r\\n   * @param beneficiary who got the tokens\\r\\n   * @param value weis paid for purchase\\r\\n   * @param amount amount of tokens purchased\\r\\n   */\\r\\n  event TokenPurchase(\\r\\n    address indexed purchaser,\\r\\n    address indexed beneficiary,\\r\\n    uint256 value,\\r\\n    uint256 amount\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @param _rate Number of token units a buyer gets per wei\\r\\n   * @param _wallet Address where collected funds will be forwarded to\\r\\n   * @param _token Address of the token being sold\\r\\n   */\\r\\n  constructor(uint256 _rate, address payable _wallet, ERC20 _token)  {\\r\\n    require(_rate > 0);\\r\\n    require(_wallet != address(0));\\r\\n    //require(_token != address(0));\\r\\n\\r\\n    rate = _rate;\\r\\n    wallet = _wallet;\\r\\n    token = _token;\\r\\n  }\\r\\n\\r\\n  // -----------------------------------------\\r\\n  // Internal interface (extensible)\\r\\n  // -----------------------------------------\\r\\n\\r\\n  /**\\r\\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\\r\\n   * @param _beneficiary Address performing the token purchase\\r\\n   * @param _weiAmount Value in wei involved in the purchase\\r\\n   */\\r\\n  function _preValidatePurchase(\\r\\n    address _beneficiary,\\r\\n    uint256 _weiAmount\\r\\n  )\\r\\n   pure internal\\r\\n  {\\r\\n    require(_beneficiary != address(0));\\r\\n    require(_weiAmount != 0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\\r\\n   * @param _beneficiary Address performing the token purchase\\r\\n   * @param _weiAmount Value in wei involved in the purchase\\r\\n   */\\r\\n  function _postValidatePurchase(\\r\\n    address _beneficiary,\\r\\n    uint256 _weiAmount\\r\\n  )\\r\\n    internal\\r\\n  {\\r\\n    // optional override\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\\r\\n   * @param _beneficiary Address performing the token purchase\\r\\n   * @param _tokenAmount Number of tokens to be emitted\\r\\n   */\\r\\n  function _deliverTokens(\\r\\n    address _beneficiary,\\r\\n    uint256 _tokenAmount\\r\\n  )\\r\\n    internal\\r\\n  {\\r\\n    token.transfer(_beneficiary, _tokenAmount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\\r\\n   * @param _beneficiary Address receiving the tokens\\r\\n   * @param _tokenAmount Number of tokens to be purchased\\r\\n   */\\r\\n  function _processPurchase(\\r\\n    address _beneficiary,\\r\\n    uint256 _tokenAmount\\r\\n  )\\r\\n    internal\\r\\n  {\\r\\n    _deliverTokens(_beneficiary, _tokenAmount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\\r\\n   * @param _beneficiary Address receiving the tokens\\r\\n   * @param _weiAmount Value in wei involved in the purchase\\r\\n   */\\r\\n  function _updatePurchasingState(\\r\\n    address _beneficiary,\\r\\n    uint256 _weiAmount\\r\\n  )\\r\\n    internal\\r\\n  {\\r\\n    // optional override\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Override to extend the way in which ether is converted to tokens.\\r\\n   * @param _weiAmount Value in wei to be converted into tokens\\r\\n   * @return Number of tokens that can be purchased with the specified _weiAmount\\r\\n   */\\r\\n  function _getTokenAmount(uint256 _weiAmount)\\r\\n    internal view returns (uint256)\\r\\n  {\\r\\n    return (_weiAmount * rate) / (10 ** 9);  // polfex have 9 decimals\\r\\n  }\\r\\n\\r\\n\\r\\n  function _forwardFunds() internal {\\r\\n     (bool sent, ) = wallet.call{value: msg.value}(\\\"\\\");\\r\\n     require(sent, \\\"Error sending BNBs\\\");   \\r\\n  }\\r\\n\\r\\n} \\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\r\\n     * `nonReentrant` function in the call stack.\\r\\n     */\\r\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\r\\n        return _status == _ENTERED;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface TokenInterface {\\r\\n\\r\\n    function decimals() external view  returns(uint8);\\r\\n    function balanceOf(address _address) external view returns(uint256);\\r\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * The initial owner is set to the address provided by the deployer. This can\\r\\n * later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    /**\\r\\n     * @dev The caller account is not authorized to perform an operation.\\r\\n     */\\r\\n    error OwnableUnauthorizedAccount(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\r\\n     */\\r\\n    error OwnableInvalidOwner(address owner);\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\r\\n     */\\r\\n    constructor(address initialOwner) {\\r\\n        _transferOwnership(initialOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        if (owner() != _msgSender()) {\\r\\n            revert OwnableUnauthorizedAccount(_msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        if (newOwner == address(0)) {\\r\\n            revert OwnableInvalidOwner(address(0));\\r\\n        }\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// $$$$$$$\\\\   $$$$$$\\\\  $$\\\\       $$$$$$$$\\\\ $$$$$$$$\\\\ $$\\\\   $$\\\\ \\r\\n// $$  __$$\\\\ $$  __$$\\\\ $$ |      $$  _____|$$  _____|$$ |  $$ |\\r\\n// $$ |  $$ |$$ /  $$ |$$ |      $$ |      $$ |      \\\\$$\\\\ $$  |\\r\\n// $$$$$$$  |$$ |  $$ |$$ |      $$$$$\\\\    $$$$$\\\\     \\\\$$$$  / \\r\\n// $$  ____/ $$ |  $$ |$$ |      $$  __|   $$  __|    $$  $$<  \\r\\n// $$ |      $$ |  $$ |$$ |      $$ |      $$ |      $$  /\\\\$$\\\\ \\r\\n// $$ |       $$$$$$  |$$$$$$$$\\\\ $$ |      $$$$$$$$\\\\ $$ /  $$ |\\r\\n// \\\\__|       \\\\______/ \\\\________|\\\\__|      \\\\________|\\\\__|  \\\\__|          \\r\\n// https://www.polfex.io/\\r\\n/// @author POLFEX\\r\\n/// @notice Private Vesting of the PFX token \\r\\n/// @dev cainuriel@gmail.com\\r\\ncontract Vesting is Crowdsale, Ownable, ReentrancyGuard {\\r\\n\\r\\n  bool public startReclaim;\\r\\n  bool public openWhiteListed = true; // private\\r\\n  bool public useWhiteListed =true; // private\\r\\n  bool public saleIsActive;\\r\\n  uint256 public vestingTime = 7802829;  //90 days and seven hours\\r\\n  uint256 public initialDate;\\r\\n  uint256 public vestingOne;\\r\\n  uint256 public vestingTwo;\\r\\n  uint256 public vestingThree;\\r\\n  uint256 public vestingFour;\\r\\n  uint256 public totalReservedPolfex;\\r\\n  uint256 public totalWhiteListedClients;\\r\\n  uint256 public totalClients;\\r\\n  mapping(address => uint256) public polfexPendingWithdrawal;\\r\\n  mapping(address => bool) public whiteList;\\r\\n  mapping(address => uint256) public investments; // total investments of client\\r\\n  mapping(address => bool) public clients;\\r\\n  mapping(address => uint256) public paidOut; // in BNBs\\r\\n  mapping(address => uint256) public isclaimed; // pending claims\\r\\n  mapping(address => uint256) private amounts;\\r\\n  mapping(address => uint256) private amountTokens;\\r\\n\\r\\n  TokenInterface TokenContract;\\r\\n\\r\\n  uint constant MINIMUM_RESERVED = 0.1 ether; // bnbs\\r\\n  uint constant MAXIMUM_RESERVED = 10 ether;  // bnbs\\r\\n  uint constant ONE_QUARTER = 25;\\r\\n  uint constant ONE_THIRD = 33;\\r\\n  uint constant HALF = 50;\\r\\n  uint constant THREE_QUARTERS = 75;\\r\\n\\r\\n    /**\\r\\n   * Event for token purchase logging\\r\\n   * @param amount total sale balance\\r\\n   * @param date collection date\\r\\n   */\\r\\n  event WithdrawBNB(\\r\\n    uint256 amount,\\r\\n    uint256 date\\r\\n  );\\r\\n\\r\\n      /**\\r\\n   * Event for token claim tokens\\r\\n   * @param amount of this vesting\\r\\n    * @param amount of this vesting\\r\\n    * @param owner who claimed\\r\\n    * @param rest amount for will claim\\r\\n   * @param date collection date\\r\\n   */\\r\\n  event ClaimedToken(\\r\\n    uint256 amount,\\r\\n    address owner,\\r\\n    uint256 rest,\\r\\n    uint256 date\\r\\n  );\\r\\n\\r\\n        /**\\r\\n   * Event for token purchase logging\\r\\n   * @param amount total sale balance\\r\\n   * @param date collection date\\r\\n   */\\r\\n  event WithdrawPolfex(\\r\\n    uint256 amount,\\r\\n    uint256 date\\r\\n  );\\r\\n\\r\\n   /**\\r\\n   * Event for reserved Polfex\\r\\n   * @param amountBNB reserved in this transaction\\r\\n   * @param amountTotal total  of bnbs reserved\\r\\n   * @param client who reserved\\r\\n   * @param date of this reserved transaction\\r\\n   */\\r\\n  event ReservedPolfex(\\r\\n    uint256 amountBNB,\\r\\n    uint256 amountTotal,\\r\\n    address client,\\r\\n    uint256 date\\r\\n  );\\r\\n\\r\\n  \\r\\n  constructor  () Crowdsale(33000,  payable(0x689cAe07d937Cf137299b6472c1214566E4040f4),ERC20(0x02d35B6698964d104E55bb21bEb157117F64B896))\\r\\n                  Ownable(msg.sender)\\r\\n  {\\r\\n\\r\\n        TokenContract = TokenInterface(address(0x02d35B6698964d104E55bb21bEb157117F64B896));\\r\\n        \\r\\n  }\\r\\n\\r\\n  function withDrawPolfexFromContract(uint _amount) external  onlyOwner()\\r\\n  {\\r\\n      uint256 balance = TokenContract.balanceOf(address(this));\\r\\n      require(_amount <= balance, \\\"Amount of withdrawal in excess of contract balance\\\");\\r\\n      require(TokenContract.transfer(owner(), _amount));\\r\\n      emit WithdrawPolfex(_amount, block.timestamp);\\r\\n  }\\r\\n\\r\\n  function polfexBalanceInContract() external view returns (uint256)\\r\\n  {\\r\\n      return TokenContract.balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  function setRate(uint256 _newrate) public onlyOwner()\\r\\n  {\\r\\n\\r\\n      rate = _newrate;\\r\\n  }\\r\\n\\r\\n   function changeWallet(address payable _newWallet) external onlyOwner() \\r\\n  {\\r\\n     wallet = _newWallet;\\r\\n  }\\r\\n\\r\\n   function registerINWahiteList(address _client) external\\r\\n  {   \\r\\n      require(saleIsActive, \\\"The Polfex token reserve is not enable\\\");\\r\\n      require(openWhiteListed, \\\"Whitelist is no open\\\");\\r\\n      require(!whiteList[_client], \\\"This address is already registered in the whitelist\\\");\\r\\n      whiteList[_client] = true;\\r\\n      totalWhiteListedClients++;\\r\\n  }\\r\\n\\r\\n    function reservation() public payable\\r\\n  {\\r\\n    require(saleIsActive, \\\"The Polfex token reserve is not enable\\\");\\r\\n    if(useWhiteListed) require(whiteList[msg.sender], \\\"You are not in WhiteList\\\");\\r\\n    if(useWhiteListed) require(!openWhiteListed, \\\"WhiteList time is no over\\\");\\r\\n    require(!startReclaim, \\\"The Polfex token claim is enabled.\\\");\\r\\n    require(msg.value >= MINIMUM_RESERVED, \\\"The quantity is too small to reserve.\\\");\\r\\n    require((msg.value + paidOut[msg.sender]) <= MAXIMUM_RESERVED, \\\"This amount exceeds the maximum of 10 BNBs per person.\\\");\\r\\n    clients[msg.sender] = true;\\r\\n    totalClients++;\\r\\n    investments[msg.sender] = investments[msg.sender] + msg.value;\\r\\n    paidOut[msg.sender] = paidOut[msg.sender] + msg.value;\\r\\n    polfexPendingWithdrawal[msg.sender] = polfexPendingWithdrawal[msg.sender] + (msg.value * rate) / (10 ** 9);\\r\\n    isclaimed[msg.sender] = 4; // four vestings\\r\\n    _forwardFunds();\\r\\n    weiRaised = weiRaised + msg.value;\\r\\n    totalReservedPolfex = totalReservedPolfex + (msg.value * rate) / (10 ** 9);\\r\\n    emit ReservedPolfex(msg.value, paidOut[msg.sender], msg.sender, block.timestamp);\\r\\n  }\\r\\n\\r\\n  function activateClaim() public onlyOwner()\\r\\n  {\\r\\n        startReclaim = !startReclaim;\\r\\n        initialDate = block.timestamp;\\r\\n        vestingOne = initialDate;\\r\\n        vestingTwo = initialDate + vestingTime;\\r\\n        vestingThree = initialDate + (vestingTime * 2);\\r\\n        vestingFour = initialDate + (vestingTime * 3);\\r\\n\\r\\n\\r\\n  }\\r\\n\\r\\n    function openOrCloseWhiteList() external onlyOwner()\\r\\n  {\\r\\n        openWhiteListed = !openWhiteListed;\\r\\n\\r\\n  }\\r\\n\\r\\n      function useWhiteList() external onlyOwner()\\r\\n  {\\r\\n        useWhiteListed = !useWhiteListed;\\r\\n\\r\\n  }\\r\\n\\r\\n  // amount to be withdrawn by the client at the next vesting\\r\\n  function getReservedPolfexInNextVesting(address _client) public view returns (uint256)\\r\\n  {\\r\\n      uint percent = percentageByUser();\\r\\n      if(percent == 100) return polfexPendingWithdrawal[_client];\\r\\n      uint query = (polfexPendingWithdrawal[_client] * percent) / (10**2);\\r\\n      return query;\\r\\n  }\\r\\n\\r\\n  function vestingPeriod() public view returns(uint256)\\r\\n  { return timeVesting();\\r\\n  }\\r\\n\\r\\n\\r\\n  function timeVesting() internal view returns (uint256)\\r\\n  {\\r\\n\\r\\n      if(block.timestamp >= vestingFour) {\\r\\n          return  vestingFour;\\r\\n      } else if(block.timestamp >= vestingThree) {\\r\\n          return  vestingThree;\\r\\n      } else if(block.timestamp >= vestingTwo) {\\r\\n          return  vestingTwo;\\r\\n      } else if(block.timestamp >= vestingOne) {\\r\\n          return  vestingOne;\\r\\n      }\\r\\n\\r\\n      return 0;\\r\\n\\r\\n  }\\r\\n\\r\\n    function getVestingNumber(uint _vestingTime) external view returns (uint256)\\r\\n  {\\r\\n\\r\\n      if(_vestingTime == vestingFour) {\\r\\n          return  4;\\r\\n      } else if(_vestingTime == vestingThree) {\\r\\n          return  3;\\r\\n      } else if(_vestingTime == vestingTwo) {\\r\\n          return  2;\\r\\n      } else if(_vestingTime >= vestingOne) {\\r\\n          return  1;\\r\\n      }\\r\\n\\r\\n      return 0;\\r\\n\\r\\n  }\\r\\n\\r\\n   /**\\r\\n   * @dev Depending on the claim period and the claims made by the user we return a percentage of withdrawal or another.\\r\\n   */\\r\\n    function percentageByUser() public view returns(uint256)\\r\\n  { uint vesting = vestingPeriod();\\r\\n    require(vesting != 0, \\\"The token claiming period is not open yet.\\\");\\r\\n    if(vesting == vestingOne) {\\r\\n            if(isclaimed[msg.sender] == 4) {\\r\\n            return ONE_QUARTER;\\r\\n            }\\r\\n    }\\r\\n\\r\\n    if(vesting == vestingTwo) {\\r\\n            if(isclaimed[msg.sender] == 3) {\\r\\n            return ONE_THIRD;\\r\\n            } else if(isclaimed[msg.sender] == 4){\\r\\n            return HALF;\\r\\n            }\\r\\n    }\\r\\n\\r\\n    if(vesting == vestingThree) {\\r\\n            if(isclaimed[msg.sender] == 2) {\\r\\n            return HALF;\\r\\n            } else if(isclaimed[msg.sender] == 3) {\\r\\n            return ONE_THIRD;\\r\\n            } else if(isclaimed[msg.sender] == 4){\\r\\n            return THREE_QUARTERS;\\r\\n            }\\r\\n    }\\r\\n\\r\\n    if(vesting == vestingFour) {\\r\\n            if(isclaimed[msg.sender] != 0) {\\r\\n            return 100; // 100%\\r\\n            } else {\\r\\n              return 0; // is finish the vesting\\r\\n            }\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n\\r\\n\\r\\n  }\\r\\n\\r\\n    modifier hasClaimed {\\r\\n      uint vesting = vestingPeriod();\\r\\n       if(vesting == vestingOne) {\\r\\n        require(isclaimed[msg.sender] == 4, \\\"You have already claimed your Vesting. Wait for the next\\\");\\r\\n       }\\r\\n       if(vesting == vestingTwo) {\\r\\n        require(isclaimed[msg.sender] >= 3, \\\"You have already claimed your Vesting. Wait for the next\\\");\\r\\n       }\\r\\n       if(vesting == vestingThree) {\\r\\n        require(isclaimed[msg.sender] >= 2, \\\"You have already claimed your Vesting. Wait for the next\\\");\\r\\n       }\\r\\n        if(vesting == vestingFour) {\\r\\n        require(isclaimed[msg.sender] != 0, \\\"You have already claimed all your tokens\\\");\\r\\n       }\\r\\n      _;\\r\\n   }\\r\\n\\r\\n  function claimToken() public nonReentrant() hasClaimed\\r\\n  { require(clients[msg.sender], \\\"This account is not allowed to be claimed.\\\");\\r\\n    require(startReclaim, \\\"The claim is not yet enabled.\\\");\\r\\n    require(isclaimed[msg.sender] != 0 , \\\"You have nothing reserved or you have already claimed all your tokens.\\\");\\r\\n\\r\\n    uint256 vesting = timeVesting();\\r\\n\\r\\n    if (vesting == 0) {\\r\\n\\r\\n        revert(\\\"The vesting is not open. Check the time.\\\");\\r\\n    }\\r\\n\\r\\n    uint256 tokens = getReservedPolfexInNextVesting(msg.sender);\\r\\n\\r\\n    _processPurchase(msg.sender, tokens);\\r\\n\\r\\n    polfexPendingWithdrawal[msg.sender] = polfexPendingWithdrawal[msg.sender] - tokens;\\r\\n    totalReservedPolfex = totalReservedPolfex - tokens;\\r\\n\\r\\n    if(vesting == vestingFour) {isclaimed[msg.sender] = 0;} else {isclaimed[msg.sender] = isclaimed[msg.sender] - 1;}\\r\\n\\r\\n    emit ClaimedToken(tokens, msg.sender, polfexPendingWithdrawal[msg.sender],block.timestamp);\\r\\n\\r\\n  }\\r\\n\\r\\n   function flipSaleState() public onlyOwner \\r\\n    {\\r\\n        saleIsActive = !saleIsActive;\\r\\n    }\\r\\n\\r\\n    receive ()  external payable\\r\\n  {\\r\\n    revert();\\r\\n  }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"ClaimedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"ReservedPolfex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"WithdrawBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"WithdrawPolfex\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"clients\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipSaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"}],\"name\":\"getReservedPolfexInNextVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingTime\",\"type\":\"uint256\"}],\"name\":\"getVestingNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openOrCloseWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paidOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polfexBalanceInContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"polfexPendingWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"}],\"name\":\"registerINWahiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newrate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startReclaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClients\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReservedPolfex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWhiteListedClients\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingFour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingThree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingTwo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withDrawPolfexFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Vesting", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}