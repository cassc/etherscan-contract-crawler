{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) { return msg.sender; }\r\n}\r\n\r\ncontract Ownable is Context {\r\n\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) { return _owner; }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract SMP_BONUS is Ownable {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed from, address indexed to, uint256 amount);\r\n\r\n    string public name = \"SMP BONUS\";\r\n    string public symbol = \"SMP\";\r\n    uint256 public decimals = 18;\r\n    uint256 public totalSupply =   100_000_000_000 * (10**decimals);\r\n    \r\n    IDEXRouter public router;\r\n    address public pair;\r\n    address public receiver;\r\n    bool basicTransfer;\r\n\r\n    uint256 tradingTax = 15;\r\n    uint256 denominator = 1000;\r\n    uint256 swapthreshold = 0;\r\n\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => bool) public isFeeExempt;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    \r\n    constructor() {\r\n        receiver = msg.sender;\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\r\n        allowance[address(this)][address(router)] = type(uint256).max;\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[address(router)] = true;\r\n        isFeeExempt[address(msg.sender)] = true;\r\n        balances[msg.sender] = totalSupply;\r\n        emit Transfer(address(0),msg.sender,totalSupply);\r\n    }\r\n    \r\n    function balanceOf(address adr) public view returns(uint256) { return balances[adr]; }\r\n\r\n    function transfer(address to, uint256 amount) public returns (bool) {\r\n        _transferFrom(msg.sender,to,amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public returns(bool) {\r\n        allowance[from][msg.sender] -= amount;\r\n        _transferFrom(from,to,amount);\r\n        return true;\r\n    }\r\n\r\n    function _transferFrom(address from,address to, uint256 amount) internal {\r\n        if(basicTransfer){ return _basictransfer(from,to,amount); }else{\r\n            if(balances[address(this)] > swapthreshold && msg.sender != pair){\r\n                basicTransfer = true;\r\n                uint256 distribute = balances[address(this)] / 2;\r\n                uint256 liquidfy = distribute / 2;\r\n                uint256 amountToSwap = distribute + liquidfy;\r\n                uint256 before = address(this).balance;\r\n                swap2ETH(amountToSwap);\r\n                uint256 increase = address(this).balance - before;\r\n                uint256 torecevier = increase * 2 / 3;\r\n                uint256 tolp = increase - torecevier;\r\n                (bool success,) = receiver.call{ value: torecevier }(\"\");\r\n                require(success, \"!fail to send eth\");\r\n                autoAddLP(liquidfy,tolp);\r\n                basicTransfer = false;\r\n            }\r\n            _transfer(from,to,amount);\r\n        }\r\n    }\r\n\r\n    function approve(address to, uint256 amount) public returns (bool) {\r\n        require(to != address(0));\r\n        allowance[msg.sender][to] = amount;\r\n        emit Approval(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from,address to, uint256 amount) internal {\r\n        balances[from] -= amount;\r\n        balances[to] += amount;\r\n        uint256 fee;\r\n        if(from==pair){ fee = amount * tradingTax / denominator; }\r\n        if(to==pair){ fee = amount * tradingTax / denominator; }\r\n        if(fee>0){ _basictransfer(to,address(this),fee); }\r\n        emit Transfer(from, to, amount - fee);\r\n    }\r\n\r\n    function _basictransfer(address from,address to, uint256 amount) internal {\r\n        balances[from] -= amount;\r\n        balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function swap2ETH(uint256 amount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        amount,\r\n        0,\r\n        path,\r\n        address(this),\r\n        block.timestamp\r\n        );\r\n    }\r\n\r\n    function autoAddLP(uint256 amountToLiquify,uint256 amountBNB) internal {\r\n        router.addLiquidityETH{value: amountBNB }(\r\n        address(this),\r\n        amountToLiquify,\r\n        0,\r\n        0,\r\n        receiver,\r\n        block.timestamp\r\n        );\r\n    }\r\n\r\n    function settingFeeExempt(address _account,bool _flag) public onlyOwner() returns (bool) {\r\n        isFeeExempt[_account] = _flag;\r\n        return true;\r\n    }\r\n    \r\n    function settingTokenomics(uint256 _tax,uint256 _swapTreshold,uint256 _denominator) public onlyOwner() returns (bool) {\r\n        tradingTax = _tax;\r\n        denominator = _denominator;\r\n        swapthreshold = _swapTreshold;\r\n        return true;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"settingFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapTreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"settingTokenomics\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SMP_BONUS", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ca1552e617255b5661976a93b733f2227bb6d9d34246dc5bddd0cd156da1b1c3"}