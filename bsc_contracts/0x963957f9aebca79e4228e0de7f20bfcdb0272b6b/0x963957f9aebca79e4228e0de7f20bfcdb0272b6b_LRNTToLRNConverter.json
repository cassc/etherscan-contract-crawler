{"SourceCode": "//SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function burn(uint256 amount) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface TokenSystem {\r\n    struct UserInfo {\r\n        uint256 LRNTToken;\r\n        uint256 claimedLRNTToken;\r\n        uint256 unclaimedLRNTToken;\r\n        uint256 lastClaimedAt;\r\n    }\r\n\r\n    function getAddressToUserInfo(\r\n        address _user\r\n    ) external view returns (UserInfo memory userInfo, uint256 cAmount);\r\n}\r\n\r\ncontract LRNTToLRNConverter is Ownable {\r\n    error Please_Wait_Till(uint256 deadline);\r\n    error Not_LRNT_Holder();\r\n    error No_LRN_BALANCE_PleaseContactAdmin();\r\n    error LRN_Not_Approved_PleaseContactAdmin();\r\n    error No_LRNT_Remains();\r\n    error NotEnabled();\r\n    error ConversionIsNotAvailable();\r\n    error LRNT_Transfer_Failed();\r\n    error LRN_Transfer_Failed();\r\n    error NotLRNTHolder();\r\n\r\n    IERC20 private LRNToken;\r\n    IERC20 private LRNTToken;\r\n    TokenSystem private tokenSystem;\r\n\r\n    struct UserInfo {\r\n        uint256 LRNTToken;\r\n        uint256 claimedLRNTToken;\r\n        uint256 unclaimedLRNTToken;\r\n        uint256 lastClaimedAt;\r\n    }\r\n    uint256 private startTime;\r\n    address private multisigWallet;\r\n    bool private isConversionEnable;\r\n    mapping(address => bool) private isLRNTHolder;\r\n    mapping(address => bool) private isInfoUpdated;\r\n    mapping(address => UserInfo) private addressToUserInfo;\r\n\r\n    constructor(\r\n        address _lrn,\r\n        address _lrnt,\r\n        address _multiSig,\r\n        address _ts,\r\n        address[] memory _holders\r\n    ) {\r\n        LRNToken = IERC20(_lrn);\r\n        LRNTToken = IERC20(_lrnt);\r\n        multisigWallet = _multiSig;\r\n        isConversionEnable = true;\r\n        startTime = 1696512864;\r\n        tokenSystem = TokenSystem(_ts);\r\n\r\n        for (uint256 i = 0; i < _holders.length; i++) {\r\n            isLRNTHolder[_holders[i]] = true;\r\n        }\r\n    }\r\n\r\n    function setMultiSigWallet(address _new) public onlyOwner {\r\n        multisigWallet = _new;\r\n    }\r\n\r\n    function setLRNToken(address _lrn) public onlyOwner {\r\n        LRNToken = IERC20(_lrn);\r\n    }\r\n\r\n    function setLRNTToken(address _token) public onlyOwner {\r\n        LRNTToken = IERC20(_token);\r\n    }\r\n\r\n    function setTokenSystem(address _ts) public onlyOwner {\r\n        tokenSystem = TokenSystem(_ts);\r\n    }\r\n\r\n    function setConversionEnable(bool _mode) public onlyOwner {\r\n        isConversionEnable = _mode;\r\n    }\r\n\r\n    function setStartTime(uint256 _time) public onlyOwner {\r\n        startTime = _time;\r\n    }\r\n\r\n    function setIsLRNHolder(address[] memory _holders) public onlyOwner {\r\n        for (uint256 i = 0; i < _holders.length; i++) {\r\n            isLRNTHolder[_holders[i]] = true;\r\n        }\r\n    }\r\n\r\n    function rIsLRNHolder(address[] memory _holders) public onlyOwner {\r\n        for (uint256 i = 0; i < _holders.length; i++) {\r\n            isLRNTHolder[_holders[i]] = false;\r\n        }\r\n    }\r\n\r\n    function convertion() public returns (bool) {\r\n        if (!isConversionEnable) {\r\n            revert ConversionIsNotAvailable();\r\n        }\r\n        if (!isLRNTHolder[msg.sender]) {\r\n            revert NotLRNTHolder();\r\n        }\r\n        uint256 tAmount;\r\n        uint256 interval;\r\n        uint256 calculatedDays;\r\n        UserInfo storage user = addressToUserInfo[msg.sender];\r\n        if (!isInfoUpdated[msg.sender]) {\r\n            isInfoUpdated[msg.sender] = true;\r\n            (\r\n                TokenSystem.UserInfo memory userFromTS,\r\n                uint256 amount\r\n            ) = tokenSystem.getAddressToUserInfo(msg.sender);\r\n            tAmount = amount;\r\n            user.LRNTToken = userFromTS.LRNTToken;\r\n            user.claimedLRNTToken = userFromTS.claimedLRNTToken;\r\n            user.unclaimedLRNTToken = userFromTS.unclaimedLRNTToken;\r\n            user.lastClaimedAt = userFromTS.lastClaimedAt;\r\n        }\r\n        interval =\r\n            block.timestamp -\r\n            (user.lastClaimedAt == 0 ? startTime : user.lastClaimedAt);\r\n        calculatedDays += interval / 1 days;\r\n        tAmount =\r\n            (user.LRNTToken *\r\n                (calculatedDays > 200 ? 200 : calculatedDays) *\r\n                5) /\r\n            1000;\r\n        if (interval < 1 days) {\r\n            if (user.lastClaimedAt != 0) {\r\n                revert Please_Wait_Till(user.lastClaimedAt + 1 days);\r\n            }\r\n        }\r\n\r\n        if (user.LRNTToken == 0) {\r\n            revert Not_LRNT_Holder();\r\n        }\r\n\r\n        if (user.unclaimedLRNTToken == 0) {\r\n            revert No_LRNT_Remains();\r\n        }\r\n        uint256 lrnWBal = LRNToken.balanceOf(multisigWallet);\r\n        if (lrnWBal < tAmount) {\r\n            revert No_LRN_BALANCE_PleaseContactAdmin();\r\n        }\r\n\r\n        uint256 allow = LRNToken.allowance(multisigWallet, address(this));\r\n        if (allow < tAmount) {\r\n            revert LRN_Not_Approved_PleaseContactAdmin();\r\n        }\r\n\r\n        user.claimedLRNTToken += tAmount;\r\n        user.unclaimedLRNTToken -= tAmount;\r\n        user.lastClaimedAt = block.timestamp;\r\n\r\n        bool success = LRNTToken.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            tAmount\r\n        );\r\n        if (!success) {\r\n            revert LRNT_Transfer_Failed();\r\n        }\r\n        bool successTwo = LRNToken.transferFrom(\r\n            multisigWallet,\r\n            msg.sender,\r\n            tAmount\r\n        );\r\n        if (!successTwo) {\r\n            revert LRN_Transfer_Failed();\r\n        }\r\n        LRNTToken.burn(tAmount);\r\n        return true;\r\n    }\r\n\r\n    function getAddressToUserInfo(\r\n        address _user\r\n    ) public view returns (UserInfo memory userInfo, uint256 cAmount) {\r\n        UserInfo memory user;\r\n        uint256 tAmount;\r\n        uint256 interval;\r\n        uint256 calculatedDays;\r\n        if (isInfoUpdated[_user]) {\r\n            user = addressToUserInfo[_user];\r\n        } else {\r\n            (\r\n                TokenSystem.UserInfo memory userFromTS,\r\n                uint256 amount\r\n            ) = tokenSystem.getAddressToUserInfo(_user);\r\n            tAmount = amount;\r\n            user.LRNTToken = userFromTS.LRNTToken;\r\n            user.claimedLRNTToken = userFromTS.claimedLRNTToken;\r\n            user.unclaimedLRNTToken = userFromTS.unclaimedLRNTToken;\r\n            user.lastClaimedAt = userFromTS.lastClaimedAt;\r\n        }\r\n        interval =\r\n            block.timestamp -\r\n            (user.lastClaimedAt == 0 ? startTime : user.lastClaimedAt);\r\n        calculatedDays += interval / 1 days;\r\n        tAmount =\r\n            (user.LRNTToken *\r\n                (calculatedDays > 200 ? 200 : calculatedDays) *\r\n                5) /\r\n            1000;\r\n\r\n        return (user, tAmount);\r\n    }\r\n\r\n    function getAdminDetails()\r\n        public\r\n        view\r\n        returns (address, address, address, uint256)\r\n    {\r\n        return (\r\n            address(LRNTToken),\r\n            address(LRNToken),\r\n            multisigWallet,\r\n            startTime\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lrn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lrnt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiSig\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ts\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ConversionIsNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LRNT_Transfer_Failed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LRN_Not_Approved_PleaseContactAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LRN_Transfer_Failed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"No_LRNT_Remains\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"No_LRN_BALANCE_PleaseContactAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLRNTHolder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Not_LRNT_Holder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"Please_Wait_Till\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"convertion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAddressToUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"LRNTToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedLRNTToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedLRNTToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct LRNTToLRNConverter.UserInfo\",\"name\":\"userInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"cAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"}],\"name\":\"rIsLRNHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_mode\",\"type\":\"bool\"}],\"name\":\"setConversionEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"}],\"name\":\"setIsLRNHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setLRNTToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lrn\",\"type\":\"address\"}],\"name\":\"setLRNToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setMultiSigWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ts\",\"type\":\"address\"}],\"name\":\"setTokenSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LRNTToLRNConverter", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f3a672f68a6f750a17a199d32fe22f48088b8408000000000000000000000000621516ff5c687cdede8ff6216d509b94177699a9000000000000000000000000b815e3dc864e2886b4758b01beb3a3bdf02cf5700000000000000000000000006f6f7a25de7a7eb6405eb9bb241c4b7595037afb00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002b000000000000000000000000b815e3dc864e2886b4758b01beb3a3bdf02cf57000000000000000000000000065ead2bd3f953fda099212555fecd7209611fd290000000000000000000000006bcc72bc44f52b22cef184e92cc3f7357473edf3000000000000000000000000d80f1f99071cb9fea0a56a5eda6e86e695520eaa0000000000000000000000000c9657a67e7382e18fe0f9180c0e133fa126b8ad0000000000000000000000005a03ed231d3c97ae2f55f4ffcc96867ff69fe0030000000000000000000000007515df2aa35b94a0c6cd04b612414f22778052540000000000000000000000004e985843b8bbdd75cd785d1512ac3d4584d94d94000000000000000000000000065416cc1319fdb4a22a7b250569f5b9d6189612000000000000000000000000668dde76bf9919facf729b89b0708cdd2cc81d830000000000000000000000009c4f5d41321a5930e29b5022724135fa248b3601000000000000000000000000837f22874b62af76c56e6451f3159573b6eedcc60000000000000000000000006beea0ea6e98f02f1ecc3a80bb599a4f41f21b2e000000000000000000000000f08a5914bffe1664060f92c643735b960ee0823e000000000000000000000000ec4515ecfb10c0f5d3717e85767893134eb675c00000000000000000000000001ee8444d31b05c7cd788f965b1341a7a006f2903000000000000000000000000c345be2766d8f1ee36b95550f061dd877db70b8f0000000000000000000000009bf4bf45f15f5e2d1820c3ef09ba1e5c31d7181a0000000000000000000000005d9ef9986de88ba02f07c71fbf4365498ed190310000000000000000000000003eef4129bab65ecf338ed4616475fc0afe8c79a3000000000000000000000000f75fb45d296a5822ad68e8b6084a0ad507965313000000000000000000000000c2b407ab624f34a1599f37bdd13a72b5df954964000000000000000000000000aab114650d05f2c3fa0cc0c68a404d43559602b000000000000000000000000007a6f5f4de8f5a0b43b0be8cff055ca909a4e39e000000000000000000000000fc5706cd230a4a4a8b3e6dcd134db89178655199000000000000000000000000fc7b510f3757551e99df919e9499ce082ebb570e000000000000000000000000f3455cc3016802f8127e8eb4817aba907a85c091000000000000000000000000c0f9f4e7bcd9968820dfd4a52e70076d36cb6381000000000000000000000000ceb8f56afecb15bc372731df283bf245be47a91500000000000000000000000029d7ac02976e2f8538496d4a7491bf337073d6bd000000000000000000000000573e8fc5b797553222e57f51c2ac98ff536fe0ad000000000000000000000000d9e784ad8bdd2c59470025418df4deae0d2f3c7000000000000000000000000077162424b86ddfe89a2abc88039b9d80c17dfca9000000000000000000000000b9010c04400d22fb37dc70aeed4e0a11c08c57d0000000000000000000000000c4f891e5bb1ab1655fec70091932676133a4809a00000000000000000000000010d8ddc70baffe431b8ab49342717e9a408b47b9000000000000000000000000bbcd3930910e77f96d748cc690dfee90695d26290000000000000000000000002b60ac6556753748987cb52269a147e5fe556db4000000000000000000000000432330cb611e06b905c50f58e59ece28575cee450000000000000000000000005b7c22a2768b689b3b1ad875dd2dd1f9e1213bf4000000000000000000000000eb648b4ca0ed0bc64c28eb3fdb5db5dec0e723ae000000000000000000000000e60686195c82ac98ffe269138563f7ce82f9a15b000000000000000000000000e18b99a3152193adbb9772d8334dd41292b344af", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://82433dd0a8629b4e9c1090f50ba290174c34214bd7e296648026fb3d5b168ca5"}