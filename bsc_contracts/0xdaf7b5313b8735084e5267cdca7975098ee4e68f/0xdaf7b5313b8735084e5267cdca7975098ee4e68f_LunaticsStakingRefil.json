{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LunaticsStakingRefillRouter.sol\": {\r\n      \"content\": \"pragma solidity 0.8.15;\\r\\n/*                        .?BB?.                          \\r\\n                      .!P&@@@@@@&P!.                      \\r\\n                  .~Y&@@@@@@@@@@@@@@&Y~.                  \\r\\n        ....   .J#@@@@@#P#@@@@@@#P#@@@@@#J.   ....        \\r\\n      J&@@@@G   J@@@5~.  P@@@@@@P  .~5@@@J   G@@@@&J      \\r\\n    ?&@@@&@@@&^  ^&#     G@@@@@@G     #&^  ^&@@@&@@@&?    \\r\\n  7&@@@B~ 7@@@@J  .5     G@@@@@@G     5.  J@@@@7 ~B@@@&7  \\r\\n .B@@@P    :#@@@B.       G@@@@@@G       .B@@@#:    P@@@B. \\r\\n   ~B@@~     5@@@@~      G@@@@@@G      ~@@@@5     ~@@B~   \\r\\n     ^G@^     !&@@@5     G@@@@@@G     5@@@&!     ^@G^     \\r\\n       ~P.     .B@@@&.   G@@@@@@G   .&@@@B.     .P~       \\r\\n            .    Y@@@Y   G@@@@@@G   Y@@@Y    .            \\r\\n           YB?.>  &@@J   G@@@@@@G   J@@& <.?BY            \\r\\n           .5P7. .&@@J   G@@@@@@G   J@@&. .7P5.           \\r\\n       ^^        .&@@G   G@@@@@@G   G@@&.        ^^       \\r\\n    .Y#?         .&@@#   G@5..5@G   #@@&.         ?#Y.    \\r\\n  7#@&:          .&@@#   !:    :!   #@@&.          :&@#7  \\r\\nY@@@&.       ..  .&@@#     .YY.     #@@&.  ..       .&@@@Y\\r\\n:G@@@&7    ^5@G  .&@@#   .5@@@@5.   #@@&.  G@5^    7&@@@G:\\r\\n  !&@@@#~J&@@@Y   #@@@B!Y@@@@@@@@Y!B@@@#   Y@@@&J~#@@@&!  \\r\\n    5@@@@@@@G:     ?&@@@@@@#~~#@@@@@@&?     :G@@@@@@@5    \\r\\n     ^GBBBP:         7BBBG7    7GBBB7         :PBBBG^\\r\\n    Simple Router made by Krakovia | KKTeam (https://t.me/krakovia_evm)\\r\\n    o/\\r\\n*/\\r\\ninterface IERC20 {\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface PancakeRouter {\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function SwapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function WETH() external pure returns (address);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title LunaticsStakingRefillRouter\\r\\n * @author Krakovia\\r\\n * @notice This contract is used to refill the staking factory contract with BNB>LunaT received from fees\\r\\n */\\r\\ncontract LunaticsStakingRefillRouter {\\r\\n    \\r\\n    IERC20        public lunatics;\\r\\n    address       public stakingFactory;\\r\\n    PancakeRouter public router;\\r\\n    address       public multisig;\\r\\n\\r\\n    event StakingRefilled(address indexed from);\\r\\n    error MultisigTransferFailed();\\r\\n\\r\\n    constructor(address _lunatics, address _stakingFactory, address _router, address _multisig) {\\r\\n        lunatics       = IERC20(_lunatics);\\r\\n        stakingFactory = _stakingFactory;\\r\\n        router         = PancakeRouter(_router);\\r\\n        multisig       = _multisig;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice 67% of ETH received from this contract will be swapped for LunaT and send to the staking factory\\r\\n     * 33% will be sent to the multisig\\r\\n     */\\r\\n    receive() external payable {\\r\\n        // create buy path\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = router.WETH();\\r\\n        path[1] = address(lunatics);\\r\\n\\r\\n        uint amountToMarketing = msg.value * 33 / 100;\\r\\n        uint amountToStaking   = msg.value - amountToMarketing;\\r\\n        // 33% to multisig\\r\\n        (bool success,) = multisig.call{value: amountToMarketing}(\\\"\\\");\\r\\n        if(!success) revert MultisigTransferFailed();\\r\\n        // 67% to staking factory\\r\\n\\r\\n        // convert ETH back to LunaT and send to staking factory\\r\\n        router.swapExactETHForTokens{value: amountToStaking}(1, path, stakingFactory, block.timestamp);\\r\\n        emit StakingRefilled(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice anyone can call this function\\r\\n     * @dev use this in case of any leftover for whatever reason\\r\\n     * @param token The token to swap for LunaT\\r\\n     */\\r\\n    function swapAnyTokenReceivedForLunaT(address token) external {\\r\\n        uint balance = IERC20(token).balanceOf(address(this));\\r\\n        // create buy path\\r\\n        address[] memory path = new address[](3);\\r\\n        path[0] = token;\\r\\n        path[1] = router.WETH();\\r\\n        path[2] = address(lunatics);\\r\\n\\r\\n        // convert token back to LunaT and send to staking factory\\r\\n        router.SwapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            balance,\\r\\n            1,\\r\\n            path,\\r\\n            stakingFactory,\\r\\n            block.timestamp\\r\\n        );\\r\\n        emit StakingRefilled(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice anyone can call this function\\r\\n     * @dev use this in case of any leftover for whatever reason\\r\\n     */\\r\\n    function sendLunaTToStakingFactory() external {\\r\\n        // refill staking contract\\r\\n        uint balance = lunatics.balanceOf(address(this));\\r\\n        lunatics.transfer(stakingFactory, balance);\\r\\n        emit StakingRefilled(msg.sender);\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"hardhat/=lib/forge-std/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lunatics\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multisig\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MultisigTransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"StakingRefilled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"lunatics\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract PancakeRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendLunaTToStakingFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"swapAnyTokenReceivedForLunaT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LunaticsStakingRefillRouter", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002a48ece377b87ce941406657b9278b4459595e06000000000000000000000000cfe4db559cdb63eda7e2580f66f44ef8e9da54eb00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000d2ac9c5e5ff70a538252aabf1eb701a8b2fbb1eb", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}