{"SourceCode": "{\"ATM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"./WithdrawAble.sol\\\";\\nimport \\\"./DateTimeLibrary.sol\\\";\\n\\n// interface IERC20 {\\n//     function totalSupply() external view returns (uint256);\\n//     function balanceOf(address account) external view returns (uint256);\\n//     function transfer(address to, uint256 amount) external returns (bool);\\n//     function allowance(address owner, address spender) external view returns (uint256);\\n//     function approve(address spender, uint256 amount) external returns (bool);\\n//     function transferFrom(\\n//         address from,\\n//         address to,\\n//         uint256 amount\\n//     ) external returns (bool);\\n//     event Transfer(address indexed from, address indexed to, uint256 value);\\n//     event Approval(address indexed owner, address indexed spender, uint256 value);\\n// }\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) {// Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n// contract Ownable {\\n//     address public owner;\\n//     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n//     /**\\n//       * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n//       * account.\\n//       */\\n//     constructor() {\\n//         owner = msg.sender;\\n//     }\\n\\n//     /**\\n//       * @dev Throws if called by any account other than the owner.\\n//       */\\n//     modifier onlyOwner() {\\n//         require(msg.sender == owner);\\n//         _;\\n//     }\\n\\n//     /**\\n//     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n//     * @param newOwner The address to transfer ownership to.\\n//     */\\n//     function transferOwnership(address newOwner) public onlyOwner {\\n//         require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n//         _transferOwnership(newOwner);\\n//     }\\n\\n//     function renounceOwnership() public virtual onlyOwner {\\n//         _transferOwnership(address(0));\\n//     }\\n\\n//     function _transferOwnership(address newOwner) internal virtual {\\n//         address oldOwner = owner;\\n//         owner = newOwner;\\n//         emit OwnershipTransferred(oldOwner, newOwner);\\n//     }\\n// }\\n\\ninterface IERC20Ext is IERC20 {\\n    function isBlackListed(address owner) external view returns (bool);\\n    function inviter(address owner) external view returns (address);\\n}\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n\\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\\n}\\n\\n\\ninterface ATMPowerInterface is IERC20 {\\n    function getPledgePower(address _account) external pure returns(uint256);\\n\\n    function mintPower(address _account,uint256 _amount) external;\\n\\n\\n    function getPledgeAddress() external pure returns(address);\\n}\\n\\ninterface MerchantInterface {\\n    function isMerchant(address _account) external view returns(bool);\\n    function getMerchantInfo(address _account) external view returns(bool,uint);\\n}\\n\\n\\n\\ninterface IPriceTool  {\\n    function getTokenPrice(address tokenAddress) external view returns(uint256);\\n}\\n\\ncontract ATMPool is WithdrawAble {\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    \\n\\n    mapping (address =\\u003e bool) public isWhiteListed;\\n    mapping(address =\\u003e bool) public isBurnWhiteListed;\\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\\n    address public usdToken = address(0x55d398326f99059fF775485246999027B3197955); //usd\\n    IPancakeRouter02 public pancakeRouterr =IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n  \\n    IPriceTool priceTool = IPriceTool(0x98ac8D48AF1b86beE8886544c06bAC0F2052954e);\\n\\n    \\n   \\n\\n    IERC20Ext internal CPTToken = IERC20Ext(0xD66734e3663D3Eb36F1e7819bc20bfb9c5B5ba62); //CPT\\n\\n    ATMPowerInterface public atmPower = ATMPowerInterface(0x86f9bCcB514813ce417b0F3e9087F522e8c26057);\\n\\n    MerchantInterface public merchant = MerchantInterface(0x1222281993c27BD2490AB8b28cFfbDf0d25990f7);\\n\\n    event StartPool(address indexed user, uint256 amount);\\n    event StopPool(address indexed user, uint256 amount);\\n    event InviteAmount(address indexed user, uint256 addAmount, uint256 subAmount);\\n\\n    \\n\\n\\n    struct UserInfo {\\n        uint256 lastUpdateTime; \\n        uint256 totalAmount; \\n        uint256 invitedAddPower; \\n        uint256 unClaimedReward; \\n        uint256 amount;     \\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        uint256 amount;\\n        // uint256 allocPoint;       // How many allocation points assigned to this pool. CHERRYs to distribute per block.\\n        uint256 lastRewardBlock;  // Last block number that CHERRYs distribution occurs.\\n        uint256 accPerShare; // Accumulated CACHERRYper share, times 1e12. See below.\\n    }\\n\\n\\n    bool public startPledge = false;\\n    uint256 private prePerBlock = 0;\\n    uint256 public perBlock;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping (address =\\u003e UserInfo) public userInfoMap;\\n\\n    mapping(address =\\u003e uint256) public userInviteRewardMap;\\n\\n    PoolInfo public poolInfo;\\n\\n\\n\\n    uint256 public startBlock;\\n\\n    uint256 public inviteRewardMinPledgeAmount = 3000 * 1e18;\\n\\n    uint[] public _layerHashRate = [724,357,285,214,142,71,357,285,214,142,71,357,285,214,142,71,357,285,214,142,71];\\n    uint public _layerHashMax = 21;\\n    uint public _totalAddRate = 7000;\\n\\n\\n    uint256 basePercent  = 10000;\\n\\n    address public treasury = 0x000000000000000000000000000000000000dEaD;\\n\\n    uint256 public minPeriod = 7 days;\\n    address[] public pledgeHolders;\\n    mapping(address =\\u003e bool) public _updated;\\n\\n    uint256 internal currentIndex = 0;\\n\\n    uint256 public distributorGas = 500000;\\n\\n\\n    constructor(uint256 _startBlock,uint256 _perBlock)  {\\n        require(block.number\\u003c= _startBlock, \\\"startBlock is too little\\\");\\n        startPledge = true;\\n        startBlock = _startBlock;\\n        perBlock  = _perBlock;\\n        initPool();\\n    }\\n\\n\\n    function initPool() private {\\n        poolInfo = PoolInfo({\\n        amount: 0,\\n        lastRewardBlock: startBlock,\\n        accPerShare: 0\\n        });\\n    }\\n\\n\\n    function setPriceTool(address _priceTool) public onlyOwner{\\n       priceTool = IPriceTool(_priceTool);\\n   }\\n\\n   \\n\\n    function setMinPeriod(uint256 _minPeriod) public onlyOwner{\\n        minPeriod = _minPeriod;\\n    }\\n\\n\\n    function stop() public onlyOwner {\\n        setPerBlock(0);\\n    }\\n\\n    \\n\\n    function start() public onlyOwner{\\n        setPerBlock(prePerBlock);\\n    }\\n\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool() public {\\n        if (block.number \\u003c= poolInfo.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = poolInfo.amount;\\n        if (lpSupply == 0) {\\n            poolInfo.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(poolInfo.lastRewardBlock, block.number);\\n        uint256 reward = multiplier.mul(perBlock);\\n        poolInfo.accPerShare = poolInfo.accPerShare.add(reward.mul(1e12).div(lpSupply));\\n        poolInfo.lastRewardBlock = block.number;\\n    }\\n\\n\\n\\n\\n    function pending(address _user) public view returns (uint256){\\n\\n\\n        UserInfo storage user = userInfoMap[_user];\\n        uint256 accPerShare = poolInfo.accPerShare;\\n        uint256 lpSupply = poolInfo.amount;\\n        if (block.number \\u003e poolInfo.lastRewardBlock \\u0026\\u0026 lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(poolInfo.lastRewardBlock, block.number);\\n            uint256 cReward = multiplier.mul(perBlock);\\n            accPerShare = accPerShare.add(cReward.mul(1e12).div(lpSupply));\\n        }\\n        uint256 pendingAmount = user.amount.mul(accPerShare).div(1e12).sub(user.rewardDebt);\\n        \\n        return pendingAmount.add(user.unClaimedReward);\\n\\n    }\\n\\n\\n\\n    function getMultiplier(uint256 _from, uint256 _to) internal pure returns (uint256) {\\n        return _to.sub(_from);\\n    }\\n\\n\\n   \\n\\n\\n    // Deposit LP tokens to MasterChef for CHERRY allocation.\\n    function _innerDeposit(address _user) public returns (uint256) {\\n        setUpdate(_user);\\n        uint256 totalPledgeAmount = atmPower.getPledgePower(_user);\\n        UserInfo storage user = userInfoMap[_user];\\n\\n        uint256 _amount = 0;\\n\\n        if(totalPledgeAmount \\u003e user.totalAmount){\\n            _amount = totalPledgeAmount.sub(user.totalAmount);\\n            user.totalAmount = totalPledgeAmount;\\n        }\\n\\n\\n        uint256 pendingReward = 0;\\n        uint256 currentAmount = user.amount;\\n        uint256 currentPoolAmount = poolInfo.amount;\\n\\n        updatePool();\\n\\n        if (user.amount \\u003e 0) {\\n            pendingReward = user.amount.mul(poolInfo.accPerShare).div(1e12).sub(user.rewardDebt);\\n        }\\n    \\n        pendingReward = pendingReward.add(user.unClaimedReward);\\n\\n\\n        uint256 subAmount = calculPower(pendingReward);\\n\\n\\n\\n        // if(subAmount \\u003e _amount){\\n        if(subAmount \\u003e= _amount.add(currentAmount)){\\n            user.amount = 0;\\n            poolInfo.amount = currentPoolAmount.sub(currentAmount);\\n        }else{\\n            user.amount = _amount.add(currentAmount).sub(subAmount);\\n            poolInfo.amount = currentPoolAmount.sub(currentAmount).add(user.amount);\\n        }\\n        // }else {\\n        //     _amount = _amount.sub(subAmount);\\n        //      user.amount = user.amount.add(_amount);\\n        //     poolInfo.amount = currentPoolAmount.add(_amount);\\n        // }\\n\\n        user.rewardDebt = user.amount.mul(poolInfo.accPerShare).div(1e12);\\n       \\n        user.unClaimedReward = 0;\\n        if(_amount \\u003e 0){\\n            distributeRewardPower(_user, _amount);\\n        }\\n        user.lastUpdateTime = block.timestamp;\\n       \\n        return pendingReward;\\n    }\\n\\n\\n    function calculPower(uint256 rewardAmount) public view returns(uint256){\\n        uint256 price = priceTool.getTokenPrice(address(this));\\n        return rewardAmount.mul(price).div(1e18);\\n    }\\n\\n\\n    function distributeRewardPower(address _user,uint256 _amount) internal {\\n        uint256 totalAddPower = _amount.mul(_totalAddRate).div(basePercent);\\n        uint256 dividedPower = 0;\\n        address cur = _user;\\n        for (uint j = 0; j \\u003c _layerHashMax; j++) {\\n            cur = CPTToken.inviter(cur);\\n            if (cur == address(0)) {\\n                break;\\n            }\\n\\n            UserInfo storage user = userInfoMap[cur];\\n            uint256 minAmount =  _amount;\\n            if(!isBurnWhiteListed[cur]){\\n                minAmount = user.amount \\u003e _amount?_amount:user.amount;\\n            }\\n\\n            uint256 addPower = minAmount.mul(_layerHashRate[j]).div(basePercent);\\n            \\n            if(user.amount\\u003e= inviteRewardMinPledgeAmount || isBurnWhiteListed[cur]){\\n                uint256 pendingReward = 0;\\n     \\n                if (user.amount \\u003e 0) {\\n                    pendingReward = user.amount.mul(poolInfo.accPerShare).div(1e12).sub(user.rewardDebt);\\n                }\\n\\n                \\n                user.amount = user.amount.add(addPower);\\n                user.invitedAddPower = user.invitedAddPower.add(addPower);\\n                poolInfo.amount = poolInfo.amount.add(addPower);\\n\\n                user.unClaimedReward = user.unClaimedReward.add(pendingReward);\\n                user.rewardDebt = user.amount.mul(poolInfo.accPerShare).div(1e12);\\n                dividedPower = dividedPower.add(addPower);\\n            }\\n\\n        }\\n\\n        // updatePool();\\n        if(dividedPower \\u003e 0){\\n            atmPower.mintPower(atmPower.getPledgeAddress(), dividedPower);\\n        }\\n        if(totalAddPower \\u003e dividedPower){\\n            //\u94f8\u9020\u51fapower \u7ed9\u5230\u6307\u5b9a\u5730\u5740\u6c89\u6dc0\\n            atmPower.mintPower(treasury, totalAddPower.sub(dividedPower));\\n        }\\n    }\\n\\n\\n\\n\\n\\n    function setLayerHashRate(uint layerHashMax_, uint[] memory rates_) public onlyOwner {\\n        require(rates_.length == layerHashMax_, \\\"rates_ length error\\\");\\n        uint256 totalRate_ = 0;\\n        for(uint i = 0;i\\u003clayerHashMax_;i++){\\n            totalRate_ = totalRate_.add(rates_[i]);\\n        }\\n\\n        _totalAddRate = totalRate_;\\n        _layerHashRate = rates_;\\n        _layerHashMax = layerHashMax_;\\n    }\\n\\n    function setPerBlock(uint256 _perBlock) public onlyOwner {\\n        if(block.number\\u003estartBlock){\\n            updatePool();\\n        }\\n        perBlock = _perBlock;\\n    }\\n\\n\\n    function setStartBlock(uint256 _startBlock) public onlyOwner {\\n        require(startBlock \\u003e block.number \\u0026\\u0026 _startBlock \\u003e block.number,\\\"Mining started\\\");\\n        startBlock = _startBlock;\\n        updatePool();\\n    }\\n\\n\\n\\n\\n    function totalBlockReward() public view returns (uint256) {\\n        if(perBlock==0 || startBlock ==0) return 0;\\n        return getBlockReward(startBlock);\\n    }\\n\\n\\n    function balanceOfProfit(address _user) public view returns (uint256) {\\n        return pending(_user);\\n    }\\n\\n    function getBlockReward(uint256 _lastRewardBlock) public view returns (uint256) {\\n        uint256 blockReward = 0;\\n        blockReward = blockReward.add(block.number.sub(_lastRewardBlock).mul(perBlock));\\n        return blockReward;\\n    }\\n\\n\\n    function setUpdate(address _user) internal {\\n        if(!_updated[_user]){\\n            _updated[_user] = true;\\n            pledgeHolders.push(_user);\\n        }\\n    }\\n\\n    function updateDistributorGas(uint256 newValue) public onlyOwner {\\n        require(newValue \\u003e= 100000 \\u0026\\u0026 newValue \\u003c= 500000, \\\"distributorGas must be between 200,000 and 500,000\\\");\\n        require(newValue != distributorGas, \\\"Cannot update distributorGas to same value\\\");\\n        distributorGas = newValue;\\n    }\\n\\n\\n   \\n}\\n\\n\\ncontract ATM is ATMPool {\\n    using SafeMath for uint;\\n    using Address for address;\\n    using DateTimeLibrary for uint;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n\\n    \\n\\n    string public name = \\\"Automatic Teller Machine\\\";\\n    string public symbol = \\\"ATM\\\";\\n\\n    uint8  public decimals = 18;\\n\\n    uint private _totalSupply;\\n\\n    uint256 private mintRemainder = 850000 * 1e18;\\n    uint256 public mintAmount;\\n    address public atmPairAddress;\\n    \\n\\n    uint[] public _userBuyFeeDispathRate = [1000,1000,2000,3000,3000];\\n    uint[] public _userSellFeeDispathRate = [0,0,0,0,0];\\n    address[] public _userFeeDispathAddress = [0xC4c84051aA16aE061101F9259d85E10Ff8a6A75B,0xaabDeADa8eFF8A0d8E15E5fF2173586EBB8249fD,0x283f0DEf3d34a234Fc9255818BFCa90eA00Db17e,0x417B5361F49E8Fa58A346286ef18E9b002681644,0x1dF320790EB5de3332643013Aa9A75a89Ea6c4d7];\\n\\n    uint[] public _merchantBuyFeeDispathRate = [0,0,0,0,0];\\n    uint[] public _merchantSellFeeDispathRate = [1000,1000,2000,3000,3000];\\n    address[] public _merchantFeeDispathAddress = [0xC4c84051aA16aE061101F9259d85E10Ff8a6A75B,0xaabDeADa8eFF8A0d8E15E5fF2173586EBB8249fD,0x283f0DEf3d34a234Fc9255818BFCa90eA00Db17e,0x417B5361F49E8Fa58A346286ef18E9b002681644,0x1dF320790EB5de3332643013Aa9A75a89Ea6c4d7];\\n\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event AddedWhiteList(address _user);\\n    event RemovedWhiteList(address _user);\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 swapAmount,\\n        uint256 tokensIntoLiqudity\\n    );\\n\\n    mapping (address =\\u003e uint)                       private  _balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint))  private  _allowances;\\n    \\n\\n    bool public isProcess = false;\\n\\n    mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) public  merchantDayBuyMap;\\n    mapping(uint=\\u003euint) public merchantDayAmount;\\n    bool public isLimitDayBuy = true;\\n\\n    mapping(address =\\u003e bool) public allowanceAddress;\\n   \\n\\n\\n\\n    constructor(address _holder,uint256 _startBlock,uint256 _perBlock)  ATMPool(_startBlock ,_perBlock)\\n    {\\n        atmPairAddress = IPancakeFactory(pancakeRouterr.factory()).createPair(address(this), usdToken);\\n        _totalSupply = mintRemainder;\\n        _mint(_holder, 150000 * 1e18);\\n        isWhiteListed[owner] = true;\\n        isWhiteListed[address(this)] = true;\\n    }\\n\\n    receive() external payable {}\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n    function balanceOf(address _user) public view returns (uint256) {\\n        return _balances[_user];\\n    }\\n\\n    function allowance(address owner, address spender) public view returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n    function _approve(address sender, address spender, uint256 amount) private {\\n        require(sender != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[sender][spender] = amount;\\n        emit Approval(sender, spender, amount);\\n    }\\n\\n    function transfer(address to, uint amount) public returns (bool) {\\n        _transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\\n        return true;\\n    }\\n\\n    function setAllowanceAddress(address _addr,bool _status) public onlyOwner{\\n        if(allowanceAddress[_addr] !=_status){\\n          allowanceAddress[_addr] =_status ; \\n        }\\n    }\\n\\n    function setIsLimitDayBuy(bool _status) public onlyOwner{\\n        isLimitDayBuy = _status;\\n    }\\n\\n    function setDayAmount(uint mType,uint amount) public onlyOwner{\\n        merchantDayAmount[mType] = amount;\\n    }\\n   \\n    function  isPairAddree(address _account) internal view returns(bool){\\n        if( _account == atmPairAddress){\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _takeBuyFee(address _account,uint256 tAmount) internal returns(uint allocatedAmount){\\n        uint curTAmount = 0;\\n         if(merchant.isMerchant(_account)){\\n            for(uint i = 0;i\\u003c_merchantFeeDispathAddress.length;i++){\\n                curTAmount = tAmount.mul(_merchantBuyFeeDispathRate[i]).div(basePercent);\\n                _balances[_merchantFeeDispathAddress[i]] = _balances[_merchantFeeDispathAddress[i]].add(curTAmount);\\n                allocatedAmount = allocatedAmount.add(curTAmount);\\n            }\\n        }else{\\n             for(uint i = 0;i\\u003c_userFeeDispathAddress.length;i++){\\n                curTAmount = tAmount.mul(_userBuyFeeDispathRate[i]).div(basePercent);\\n                _balances[_userFeeDispathAddress[i]] = _balances[_userFeeDispathAddress[i]].add(curTAmount);\\n                allocatedAmount = allocatedAmount.add(curTAmount);\\n            }\\n        }  \\n\\n    }\\n\\n    function _takeSellFee(address _account,uint256 tAmount) internal returns(uint allocatedAmount){\\n        uint curTAmount = 0;\\n\\n        if(merchant.isMerchant(_account)){\\n            for(uint i = 0;i\\u003c_merchantFeeDispathAddress.length;i++){\\n                curTAmount = tAmount.mul(_merchantSellFeeDispathRate[i]).div(basePercent);\\n                _balances[_merchantFeeDispathAddress[i]] = _balances[_merchantFeeDispathAddress[i]].add(curTAmount);\\n                allocatedAmount = allocatedAmount.add(curTAmount);\\n            }\\n        }else{\\n             for(uint i = 0;i\\u003c_userFeeDispathAddress.length;i++){\\n                curTAmount = tAmount.mul(_userSellFeeDispathRate[i]).div(basePercent);\\n                _balances[_userFeeDispathAddress[i]] = _balances[_userFeeDispathAddress[i]].add(curTAmount);\\n                allocatedAmount = allocatedAmount.add(curTAmount);\\n            }\\n        }\\n\\n    }\\n\\n\\n    function _sellFee(address sender, address recipient, uint amount) internal {\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        uint bal = amount;\\n        if(!isWhiteListed[sender]) {\\n            uint lpAmount = _takeSellFee(sender,amount);\\n            bal = amount.sub(lpAmount);\\n        }\\n\\n        _balances[recipient] = _balances[recipient].add(bal);\\n        emit Transfer(sender, recipient, bal);\\n    }\\n\\n    function _buyFee(address sender, address recipient, uint amount) internal {\\n        validateDayBuy(recipient,amount);\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        uint bal = amount;\\n        if(!isWhiteListed[recipient]) {\\n            uint otherAmount = _takeBuyFee(recipient,amount);\\n            bal = amount.sub(otherAmount);\\n        }\\n\\n        _balances[recipient] = _balances[recipient].add(bal);\\n        emit Transfer(sender, recipient, bal);\\n    }\\n\\n    function validateDayBuy(address recipient,uint amount) internal {\\n         (bool isMerchant,uint mType) = merchant.getMerchantInfo(recipient);\\n         if(isMerchant){\\n            uint256 today = DateTimeLibrary.getDayStart(block.timestamp).add(SECONDS_PER_HOUR*8);\\n            uint256 currentAmount = merchantDayBuyMap[recipient][today].add(amount);\\n            require(isWhiteListed[recipient] || currentAmount\\u003c=merchantDayAmount[mType],\\\"over day limit amount\\\" );\\n            merchantDayBuyMap[recipient][today] = currentAmount;\\n         } \\n\\n    }\\n\\n    \\n\\n     function deposit(uint256 _amount) public returns(uint256){\\n        if(_amount \\u003e 0){\\n            atmPower.transferFrom(msg.sender, atmPower.getPledgeAddress(), _amount);\\n        }\\n\\n        uint256 pendingReward = _innerDeposit(msg.sender);\\n        if(pendingReward\\u003e0){\\n             _reward(msg.sender, pendingReward);\\n        }\\n        if(!isProcess){\\n            isProcess = true;\\n            process(distributorGas);\\n             isProcess = false;\\n        }\\n       return pendingReward;\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) private {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount\\u003e0, \\\"ERC20: Transfer amount must be greater than zero\\\");\\n\\n\\n        if(recipient == address(this) \\u0026\\u0026 amount == 10 ** 14) {\\n            address src = sender;\\n            uint256 pendingReward = _innerDeposit(src);\\n            if(pendingReward\\u003e0){\\n                _reward(src, pendingReward);\\n            }\\n            _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n            _balances[recipient] = _balances[recipient].add(amount);\\n            emit Transfer(sender, recipient, amount);\\n        }else if (isPairAddree(sender) \\u0026\\u0026  recipient != address(pancakeRouterr)){\\n            _buyFee(sender, recipient, amount);\\n        } else if(isPairAddree(recipient) \\u0026\\u0026  sender != address(pancakeRouterr) ) {\\n            _sellFee(sender,recipient, amount);\\n        }else {\\n              if(merchant.isMerchant(sender)){\\n                  require(allowanceAddress[recipient],\\\"invalid recipient\\\");\\n              }\\n            _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n            _balances[recipient] = _balances[recipient].add(amount);\\n            emit Transfer(sender, recipient, amount);\\n        }\\n        if(!isProcess){\\n            isProcess = true;\\n            process(distributorGas);\\n             isProcess = false;\\n        }\\n    }\\n\\n\\n\\n    function _mint(address account, uint256 amount) private {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _reward(address src,uint256 _amount) private {\\n        if(_amount\\u003e0 \\u0026\\u0026 mintRemainder\\u003e0) {\\n            if(_amount\\u003emintRemainder) {\\n                _amount = mintRemainder;\\n            }\\n            mintRemainder = mintRemainder.sub(_amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n            mintAmount = mintAmount.add(_amount);\\n            if(src == deadAddress){\\n                _totalSupply = _totalSupply.sub(_amount, \\\"ERC20: destory amount exceeds totalSupply\\\");\\n            }\\n            _balances[src] = _balances[src].add(_amount);\\n            emit Transfer(address(this), src, _amount);\\n        }\\n    }\\n\\n\\n\\n    function addWhiteList(address[] memory _evilUser) public onlyOwner {\\n        require(_evilUser.length \\u003e 0);\\n        for (uint256 i = 0; i \\u003c _evilUser.length; i++) {\\n            if (_evilUser[i] != address(0) \\u0026\\u0026 !isWhiteListed[_evilUser[i]]) {\\n                isWhiteListed[_evilUser[i]] = true;\\n                emit AddedWhiteList(_evilUser[i]);\\n            }\\n        }\\n    }\\n\\n    function removeWhiteList(address[] memory _clearedUser) public onlyOwner {\\n        require(_clearedUser.length \\u003e 0);\\n        for (uint256 i = 0; i \\u003c _clearedUser.length; i++) {\\n            if (isWhiteListed[_clearedUser[i]]) {\\n                isWhiteListed[_clearedUser[i]] = false;\\n                emit RemovedWhiteList(_clearedUser[i]);\\n            }\\n        }\\n    }\\n\\n     function addBurnWhiteList(address[] memory _evilUser) public onlyOwner {\\n        require(_evilUser.length \\u003e 0);\\n        for (uint256 i = 0; i \\u003c _evilUser.length; i++) {\\n            if (_evilUser[i] != address(0) \\u0026\\u0026 !isBurnWhiteListed[_evilUser[i]]) {\\n                isBurnWhiteListed[_evilUser[i]] = true;\\n                emit AddedWhiteList(_evilUser[i]);\\n            }\\n        }\\n    }\\n\\n    function removeBurnWhiteList(address[] memory _clearedUser) public onlyOwner {\\n        require(_clearedUser.length \\u003e 0);\\n        for (uint256 i = 0; i \\u003c _clearedUser.length; i++) {\\n            if (isBurnWhiteListed[_clearedUser[i]]) {\\n                isBurnWhiteListed[_clearedUser[i]] = false;\\n                emit RemovedWhiteList(_clearedUser[i]);\\n            }\\n        }\\n    }\\n\\n\\n    \\n\\n    function setCpt(address _cpt) external onlyOwner{\\n        CPTToken = IERC20Ext(_cpt);\\n    }\\n\\n    function setMerchant(address _merchant) external onlyOwner{\\n        merchant = MerchantInterface(_merchant);\\n    }\\n\\n\\n\\n    function withdrawOther(address _tokenAddress, uint256 amount,address to) external onlyOwner{\\n        IERC20 token = IERC20(_tokenAddress);\\n        token.transfer(to,amount);\\n    }\\n\\n\\n    function setMerchantFee(address[] memory _dispathAddress,uint256[] memory _buyFeeRate, uint256[] memory _sellFeeRate) external onlyOwner{\\n        require(_dispathAddress.length == _buyFeeRate.length \\u0026\\u0026 _dispathAddress.length == _sellFeeRate.length);\\n        uint256 buyTotalRate = 0;\\n        uint256 sellTotalRate = 0;\\n        for(uint i = 0;i\\u003c_buyFeeRate.length;i++){\\n            buyTotalRate = buyTotalRate.add(_buyFeeRate[i]);\\n        }\\n\\n        for(uint i = 0;i\\u003c_sellFeeRate.length;i++){\\n            sellTotalRate = sellTotalRate.add(_sellFeeRate[i]);\\n        }\\n        require(buyTotalRate \\u003c= basePercent \\u0026\\u0026 sellTotalRate \\u003c= basePercent);\\n\\n        _merchantBuyFeeDispathRate = _buyFeeRate;\\n        _merchantSellFeeDispathRate = _sellFeeRate;\\n        _merchantFeeDispathAddress = _dispathAddress;\\n    }\\n\\n \\n\\n    function setUserFee(address[] memory _dispathAddress,uint256[] memory _buyFeeRate, uint256[] memory _sellFeeRate) external onlyOwner{\\n        require(_dispathAddress.length == _buyFeeRate.length \\u0026\\u0026 _dispathAddress.length == _sellFeeRate.length);\\n        uint256 buyTotalRate = 0;\\n        uint256 sellTotalRate = 0;\\n        for(uint i = 0;i\\u003c_buyFeeRate.length;i++){\\n            buyTotalRate = buyTotalRate.add(_buyFeeRate[i]);\\n        }\\n\\n        for(uint i = 0;i\\u003c_sellFeeRate.length;i++){\\n            sellTotalRate = sellTotalRate.add(_sellFeeRate[i]);\\n        }\\n        require(buyTotalRate \\u003c= basePercent \\u0026\\u0026 sellTotalRate \\u003c= basePercent);\\n\\n        _userBuyFeeDispathRate = _buyFeeRate;\\n        _userSellFeeDispathRate = _sellFeeRate;\\n        _userFeeDispathAddress = _dispathAddress;\\n    }\\n\\n\\n    function getPoolInfo() public view returns(uint256 pledgePower,uint256 perDay,uint256 destoryAmount){\\n        pledgePower = poolInfo.amount;\\n        perDay = perBlock.mul(1 days).div(3);\\n        destoryAmount = balanceOf(deadAddress);\\n    }\\n\\n\\n    function getUserInfo(address _user) public view returns(uint256 pledgePower,uint256 pendingReward){\\n        UserInfo memory info = userInfoMap[_user];\\n        pledgePower = info.amount;\\n        pendingReward = pending(_user);\\n    }\\n\\n     function process(uint256 gas) private {\\n        uint256 pledgeHolderCount = pledgeHolders.length;\\n\\n        if(pledgeHolderCount == 0)return;\\n\\n        uint256 gasUsed = 0;\\n        uint256 gasLeft = gasleft();\\n\\n        uint256 iterations = 0;\\n        uint256 cIndex = currentIndex;\\n\\n\\n        while(gasUsed \\u003c gas \\u0026\\u0026 iterations \\u003c pledgeHolderCount) {\\n            if(cIndex \\u003e= pledgeHolderCount){\\n                cIndex = 0;\\n            }\\n           UserInfo memory info  = userInfoMap[pledgeHolders[cIndex]];\\n            if(info.lastUpdateTime+minPeriod \\u003e block.timestamp) {\\n                cIndex++;\\n                iterations++;\\n                return ;\\n            }\\n            _innerDeposit(pledgeHolders[cIndex]);\\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\\n            gasLeft = gasleft();\\n            cIndex++;\\n            iterations++;\\n        }\\n        currentIndex = cIndex;\\n    }\\n\\n\\n    function setIsProcess(bool _status) public onlyOwner{\\n        isProcess = _status;\\n    }\\n\\n}\\n\"},\"DateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.9.0;\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// BokkyPooBah\\u0027s DateTime Library v1.01\\r\\n//\\r\\n// A gas-efficient Solidity date and time library\\r\\n//\\r\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\r\\n//\\r\\n// Tested date range 1970/01/01 to 2345/12/31\\r\\n//\\r\\n// Conventions:\\r\\n// Unit      | Range         | Notes\\r\\n// :-------- |:-------------:|:-----\\r\\n// timestamp | \\u003e= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\r\\n// year      | 1970 ... 2345 |\\r\\n// month     | 1 ... 12      |\\r\\n// day       | 1 ... 31      |\\r\\n// hour      | 0 ... 23      |\\r\\n// minute    | 0 ... 59      |\\r\\n// second    | 0 ... 59      |\\r\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\r\\n//\\r\\n//\\r\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\nlibrary DateTimeLibrary {\\r\\n\\r\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\r\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\r\\n    uint constant SECONDS_PER_MINUTE = 60;\\r\\n    int constant OFFSET19700101 = 2440588;\\r\\n\\r\\n    uint constant DOW_MON = 1;\\r\\n    uint constant DOW_TUE = 2;\\r\\n    uint constant DOW_WED = 3;\\r\\n    uint constant DOW_THU = 4;\\r\\n    uint constant DOW_FRI = 5;\\r\\n    uint constant DOW_SAT = 6;\\r\\n    uint constant DOW_SUN = 7;\\r\\n\\r\\n    uint constant SLIP_AREA = 8;\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\r\\n    // the date conversion algorithm from\\r\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\r\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\r\\n    //\\r\\n    // days = day\\r\\n    //      - 32075\\r\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\r\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\r\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\r\\n    //      - offset\\r\\n    // ------------------------------------------------------------------------\\r\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\r\\n        require(year \\u003e= 1970);\\r\\n        int _year = int(year);\\r\\n        int _month = int(month);\\r\\n        int _day = int(day);\\r\\n\\r\\n        int __days = _day\\r\\n          - 32075\\r\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\r\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\r\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\r\\n          - OFFSET19700101;\\r\\n\\r\\n        _days = uint(__days);\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\r\\n    // the date conversion algorithm from\\r\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\r\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\r\\n    //\\r\\n    // int L = days + 68569 + offset\\r\\n    // int N = 4 * L / 146097\\r\\n    // L = L - (146097 * N + 3) / 4\\r\\n    // year = 4000 * (L + 1) / 1461001\\r\\n    // L = L - 1461 * year / 4 + 31\\r\\n    // month = 80 * L / 2447\\r\\n    // dd = L - 2447 * month / 80\\r\\n    // L = month / 11\\r\\n    // month = month + 2 - 12 * L\\r\\n    // year = 100 * (N - 49) + year + L\\r\\n    // ------------------------------------------------------------------------\\r\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\r\\n        int __days = int(_days);\\r\\n\\r\\n        int L = __days + 68569 + OFFSET19700101;\\r\\n        int N = 4 * L / 146097;\\r\\n        L = L - (146097 * N + 3) / 4;\\r\\n        int _year = 4000 * (L + 1) / 1461001;\\r\\n        L = L - 1461 * _year / 4 + 31;\\r\\n        int _month = 80 * L / 2447;\\r\\n        int _day = L - 2447 * _month / 80;\\r\\n        L = _month / 11;\\r\\n        _month = _month + 2 - 12 * L;\\r\\n        _year = 100 * (N - 49) + _year + L;\\r\\n\\r\\n        year = uint(_year);\\r\\n        month = uint(_month);\\r\\n        day = uint(_day);\\r\\n    }\\r\\n\\r\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\r\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\r\\n    }\\r\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\r\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + (hour-SLIP_AREA) * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\r\\n    }\\r\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\r\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\r\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        uint secs = timestamp % SECONDS_PER_DAY;\\r\\n        hour = secs / SECONDS_PER_HOUR + SLIP_AREA;\\r\\n        secs = secs % SECONDS_PER_HOUR;\\r\\n        minute = secs / SECONDS_PER_MINUTE;\\r\\n        second = secs % SECONDS_PER_MINUTE;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getDayStart(uint timestamp) external pure returns(uint dayStart){\\r\\n        (uint year,uint month,uint day) = timestampToDate(timestamp);\\r\\n        return timestampFromDate(year,month,day);\\r\\n    }\\r\\n\\r\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\r\\n        if (year \\u003e= 1970 \\u0026\\u0026 month \\u003e 0 \\u0026\\u0026 month \\u003c= 12) {\\r\\n            uint daysInMonth = _getDaysInMonth(year, month);\\r\\n            if (day \\u003e 0 \\u0026\\u0026 day \\u003c= daysInMonth) {\\r\\n                valid = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\r\\n        if (isValidDate(year, month, day)) {\\r\\n            if (hour \\u003c 24 \\u0026\\u0026 minute \\u003c 60 \\u0026\\u0026 second \\u003c 60) {\\r\\n                valid = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\r\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        leapYear = _isLeapYear(year);\\r\\n    }\\r\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\r\\n        leapYear = ((year % 4 == 0) \\u0026\\u0026 (year % 100 != 0)) || (year % 400 == 0);\\r\\n    }\\r\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\r\\n        weekDay = getDayOfWeek(timestamp) \\u003c= DOW_FRI;\\r\\n    }\\r\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\r\\n        weekEnd = getDayOfWeek(timestamp) \\u003e= DOW_SAT;\\r\\n    }\\r\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\r\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        daysInMonth = _getDaysInMonth(year, month);\\r\\n    }\\r\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\r\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\r\\n            daysInMonth = 31;\\r\\n        } else if (month != 2) {\\r\\n            daysInMonth = 30;\\r\\n        } else {\\r\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\r\\n        }\\r\\n    }\\r\\n    // 1 = Monday, 7 = Sunday\\r\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\r\\n        uint _days = timestamp / SECONDS_PER_DAY;\\r\\n        dayOfWeek = (_days + 3) % 7 + 1;\\r\\n    }\\r\\n\\r\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\r\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\r\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\r\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\r\\n        uint secs = timestamp % SECONDS_PER_DAY;\\r\\n        hour = secs / SECONDS_PER_HOUR + SLIP_AREA;\\r\\n    }\\r\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\r\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\r\\n        minute = secs / SECONDS_PER_MINUTE;\\r\\n    }\\r\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\r\\n        second = timestamp % SECONDS_PER_MINUTE;\\r\\n    }\\r\\n\\r\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        year += _years;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day \\u003e daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\r\\n        require(newTimestamp \\u003e= timestamp);\\r\\n    }\\r\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        month += _months;\\r\\n        year += (month - 1) / 12;\\r\\n        month = (month - 1) % 12 + 1;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day \\u003e daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\r\\n        require(newTimestamp \\u003e= timestamp);\\r\\n    }\\r\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\r\\n        require(newTimestamp \\u003e= timestamp);\\r\\n    }\\r\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\r\\n        require(newTimestamp \\u003e= timestamp);\\r\\n    }\\r\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\r\\n        require(newTimestamp \\u003e= timestamp);\\r\\n    }\\r\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _seconds;\\r\\n        require(newTimestamp \\u003e= timestamp);\\r\\n    }\\r\\n\\r\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        year -= _years;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day \\u003e daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\r\\n        require(newTimestamp \\u003c= timestamp);\\r\\n    }\\r\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\r\\n        year = yearMonth / 12;\\r\\n        month = yearMonth % 12 + 1;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day \\u003e daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\r\\n        require(newTimestamp \\u003c= timestamp);\\r\\n    }\\r\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\r\\n        require(newTimestamp \\u003c= timestamp);\\r\\n    }\\r\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\r\\n        require(newTimestamp \\u003c= timestamp);\\r\\n    }\\r\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\r\\n        require(newTimestamp \\u003c= timestamp);\\r\\n    }\\r\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _seconds;\\r\\n        require(newTimestamp \\u003c= timestamp);\\r\\n    }\\r\\n\\r\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\r\\n        require(fromTimestamp \\u003c= toTimestamp);\\r\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\r\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\r\\n        _years = toYear - fromYear;\\r\\n    }\\r\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\r\\n        require(fromTimestamp \\u003c= toTimestamp);\\r\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\r\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\r\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\r\\n    }\\r\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\r\\n        require(fromTimestamp \\u003c= toTimestamp);\\r\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\r\\n    }\\r\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\r\\n        require(fromTimestamp \\u003c= toTimestamp);\\r\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\r\\n    }\\r\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\r\\n        require(fromTimestamp \\u003c= toTimestamp);\\r\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\r\\n    }\\r\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\r\\n        require(fromTimestamp \\u003c= toTimestamp);\\r\\n        _seconds = toTimestamp - fromTimestamp;\\r\\n    }\\r\\n}\"},\"WithdrawAble.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\ncontract Ownable {\\r\\n    address public owner;\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n    /**\\r\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n      * account.\\r\\n      */\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev Throws if called by any account other than the owner.\\r\\n      */\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n    * @param newOwner The address to transfer ownership to.\\r\\n    */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = owner;\\r\\n        owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ncontract WithdrawAble is Ownable{\\r\\n\\r\\n    \\r\\n    function withdraw(IERC20 tokens,uint256 amount) public onlyOwner{\\r\\n        require(tokens.balanceOf(address(this)) \\u003e= amount,\\\"invalid amount\\\");\\r\\n        tokens.transfer(msg.sender,amount);\\r\\n    }\\r\\n\\r\\n    function destory()  public onlyOwner {\\r\\n        selfdestruct(payable(msg.sender));\\r\\n    }\\r\\n  \\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subAmount\",\"type\":\"uint256\"}],\"name\":\"InviteAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StartPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StopPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"_innerDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_layerHashMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_layerHashRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_merchantBuyFeeDispathRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_merchantFeeDispathAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_merchantSellFeeDispathRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalAddRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_updated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_userBuyFeeDispathRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_userFeeDispathAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_userSellFeeDispathRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_evilUser\",\"type\":\"address[]\"}],\"name\":\"addBurnWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_evilUser\",\"type\":\"address[]\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowanceAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atmPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atmPower\",\"outputs\":[{\"internalType\":\"contract ATMPowerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOfProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"calculPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastRewardBlock\",\"type\":\"uint256\"}],\"name\":\"getBlockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pledgePower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destoryAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pledgePower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviteRewardMinPledgeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBurnWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLimitDayBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isProcess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merchant\",\"outputs\":[{\"internalType\":\"contract MerchantInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"merchantDayAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"merchantDayBuyMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouterr\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pledgeHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_clearedUser\",\"type\":\"address[]\"}],\"name\":\"removeBurnWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_clearedUser\",\"type\":\"address[]\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAllowanceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cpt\",\"type\":\"address\"}],\"name\":\"setCpt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setDayAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setIsLimitDayBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setIsProcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"layerHashMax_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"rates_\",\"type\":\"uint256[]\"}],\"name\":\"setLayerHashRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_merchant\",\"type\":\"address\"}],\"name\":\"setMerchant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_dispathAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_buyFeeRate\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_sellFeeRate\",\"type\":\"uint256[]\"}],\"name\":\"setMerchantFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"}],\"name\":\"setMinPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_perBlock\",\"type\":\"uint256\"}],\"name\":\"setPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceTool\",\"type\":\"address\"}],\"name\":\"setPriceTool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_dispathAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_buyFeeRate\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_sellFeeRate\",\"type\":\"uint256[]\"}],\"name\":\"setUserFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPledge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDistributorGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfoMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invitedAddPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unClaimedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInviteRewardMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokens\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawOther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ATM", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002c0cff844ffad685ad73db2bf0089d08bdbd38530000000000000000000000000000000000000000000000000000000001507d680000000000000000000000000000000000000000000000000066c1defde639c7", "EVMVersion": "Default", "Library": "DateTimeLibrary:c40ad0f3532080f06273a3f1931b006d69b6f787", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8aab992af1979ba79f03e9c81033cabe07705b245676b67dad1512e696c70748"}