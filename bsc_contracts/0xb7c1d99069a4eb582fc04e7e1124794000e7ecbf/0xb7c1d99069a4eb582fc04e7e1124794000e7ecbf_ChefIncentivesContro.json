{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ChefIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"IMultiFeeDistribution.sol\\\";\\nimport \\\"IOnwardIncentivesController.sol\\\";\\nimport \\\"IERC20.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"Ownable.sol\\\";\\n\\n// based on the Sushi MasterChef\\n// https://github.com/sushiswap/sushiswap/blob/master/contracts/MasterChef.sol\\ncontract ChefIncentivesController is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n    // Info of each pool.\\n    struct PoolInfo {\\n        uint256 totalSupply;\\n        uint256 allocPoint; // How many allocation points assigned to this pool.\\n        uint256 lastRewardTime; // Last second that reward distribution occurs.\\n        uint256 accRewardPerShare; // Accumulated rewards per share, times 1e12. See below.\\n        IOnwardIncentivesController onwardIncentives;\\n    }\\n    // Info about token emissions for a given time period.\\n    struct EmissionPoint {\\n        uint128 startTimeOffset;\\n        uint128 rewardsPerSecond;\\n    }\\n\\n    address public poolConfigurator;\\n\\n    IMultiFeeDistribution public rewardMinter;\\n    uint256 public rewardsPerSecond;\\n    uint256 public immutable maxMintableTokens;\\n    uint256 public mintedTokens;\\n\\n    // Info of each pool.\\n    address[] public registeredTokens;\\n    mapping(address => PoolInfo) public poolInfo;\\n\\n    // Data about the future reward rates. emissionSchedule stored in reverse chronological order,\\n    // whenever the number of blocks since the start block exceeds the next block offset a new\\n    // reward rate is applied.\\n    EmissionPoint[] public emissionSchedule;\\n    // token => user => Info of each user that stakes LP tokens.\\n    mapping(address => mapping(address => UserInfo)) public userInfo;\\n    // user => base claimable balance\\n    mapping(address => uint256) public userBaseClaimable;\\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // The block number when reward mining starts.\\n    uint256 public immutable startTime;\\n\\n    // account earning rewards => receiver of rewards for this account\\n    // if receiver is set to address(0), rewards are paid to the earner\\n    // this is used to aid 3rd party contract integrations\\n    mapping (address => address) public claimReceiver;\\n\\n    event BalanceUpdated(\\n        address indexed token,\\n        address indexed user,\\n        uint256 balance,\\n        uint256 totalSupply\\n    );\\n\\n    constructor(\\n        uint128[] memory _startTimeOffset,\\n        uint128[] memory _rewardsPerSecond,\\n        address _poolConfigurator,\\n        IMultiFeeDistribution _rewardMinter,\\n        uint256 _maxMintable,\\n        uint256 _startTime\\n    )\\n        Ownable()\\n    {\\n        poolConfigurator = _poolConfigurator;\\n        rewardMinter = _rewardMinter;\\n        uint256 length = _startTimeOffset.length;\\n        for (uint256 i = length - 1; i + 1 != 0; i--) {\\n            emissionSchedule.push(\\n                EmissionPoint({\\n                    startTimeOffset: _startTimeOffset[i],\\n                    rewardsPerSecond: _rewardsPerSecond[i]\\n                })\\n            );\\n        }\\n        maxMintableTokens = _maxMintable;\\n        startTime = _startTime;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the poolConfigurator.\\n    function addPool(address _token, uint256 _allocPoint) external {\\n        require(msg.sender == poolConfigurator);\\n        require(poolInfo[_token].lastRewardTime == 0);\\n        _updateEmissions();\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        registeredTokens.push(_token);\\n        poolInfo[_token] = PoolInfo({\\n            totalSupply: 0,\\n            allocPoint: _allocPoint,\\n            lastRewardTime: block.timestamp,\\n            accRewardPerShare: 0,\\n            onwardIncentives: IOnwardIncentivesController(0)\\n        });\\n    }\\n\\n    // Update the given pool's allocation point. Can only be called by the owner.\\n    function batchUpdateAllocPoint(\\n        address[] calldata _tokens,\\n        uint256[] calldata _allocPoints\\n    ) public onlyOwner {\\n        require(_tokens.length == _allocPoints.length);\\n        _massUpdatePools();\\n        uint256 _totalAllocPoint = totalAllocPoint;\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            PoolInfo storage pool = poolInfo[_tokens[i]];\\n            require(pool.lastRewardTime > 0);\\n            _totalAllocPoint = _totalAllocPoint.sub(pool.allocPoint).add(_allocPoints[i]);\\n            pool.allocPoint = _allocPoints[i];\\n        }\\n        totalAllocPoint = _totalAllocPoint;\\n    }\\n\\n    function setOnwardIncentives(\\n        address _token,\\n        IOnwardIncentivesController _incentives\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(poolInfo[_token].lastRewardTime != 0);\\n        poolInfo[_token].onwardIncentives = _incentives;\\n    }\\n\\n    function setClaimReceiver(address _user, address _receiver) external {\\n        require(msg.sender == _user || msg.sender == owner());\\n        claimReceiver[_user] = _receiver;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return registeredTokens.length;\\n    }\\n\\n    function claimableReward(address _user, address[] calldata _tokens)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory claimable = new uint256[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            PoolInfo storage pool = poolInfo[token];\\n            UserInfo storage user = userInfo[token][_user];\\n            uint256 accRewardPerShare = pool.accRewardPerShare;\\n            uint256 lpSupply = pool.totalSupply;\\n            if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\\n                uint256 duration = block.timestamp.sub(pool.lastRewardTime);\\n                uint256 reward = duration.mul(rewardsPerSecond).mul(pool.allocPoint).div(totalAllocPoint);\\n                accRewardPerShare = accRewardPerShare.add(reward.mul(1e12).div(lpSupply));\\n            }\\n            claimable[i] = user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt);\\n        }\\n        return claimable;\\n    }\\n\\n\\n    function _updateEmissions() internal {\\n        uint256 length = emissionSchedule.length;\\n        if (block.timestamp > startTime && length > 0) {\\n            EmissionPoint memory e = emissionSchedule[length-1];\\n            if (block.timestamp.sub(startTime) > e.startTimeOffset) {\\n                 _massUpdatePools();\\n                rewardsPerSecond = uint256(e.rewardsPerSecond);\\n                emissionSchedule.pop();\\n            }\\n        }\\n    }\\n\\n    // Update reward variables for all pools\\n    function _massUpdatePools() internal {\\n        uint256 totalAP = totalAllocPoint;\\n        uint256 length = registeredTokens.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            _updatePool(poolInfo[registeredTokens[i]], totalAP);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function _updatePool(PoolInfo storage pool, uint256 _totalAllocPoint) internal {\\n        if (block.timestamp <= pool.lastRewardTime) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.totalSupply;\\n        if (lpSupply == 0) {\\n            pool.lastRewardTime = block.timestamp;\\n            return;\\n        }\\n        uint256 duration = block.timestamp.sub(pool.lastRewardTime);\\n        uint256 reward = duration.mul(rewardsPerSecond).mul(pool.allocPoint).div(_totalAllocPoint);\\n        pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(1e12).div(lpSupply));\\n        pool.lastRewardTime = block.timestamp;\\n    }\\n\\n    function _mint(address _user, uint256 _amount) internal {\\n        uint256 minted = mintedTokens;\\n        if (minted.add(_amount) > maxMintableTokens) {\\n            _amount = maxMintableTokens.sub(minted);\\n        }\\n        if (_amount > 0) {\\n            mintedTokens = minted.add(_amount);\\n            address receiver = claimReceiver[_user];\\n            if (receiver == address(0)) receiver = _user;\\n            rewardMinter.mint(receiver, _amount, true);\\n        }\\n    }\\n\\n    function handleAction(address _user, uint256 _balance, uint256 _totalSupply) external {\\n        PoolInfo storage pool = poolInfo[msg.sender];\\n        require(pool.lastRewardTime > 0);\\n        _updateEmissions();\\n        _updatePool(pool, totalAllocPoint);\\n        UserInfo storage user = userInfo[msg.sender][_user];\\n        uint256 amount = user.amount;\\n        uint256 accRewardPerShare = pool.accRewardPerShare;\\n        if (amount > 0) {\\n            uint256 pending = amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt);\\n            if (pending > 0) {\\n                userBaseClaimable[_user] = userBaseClaimable[_user].add(pending);\\n            }\\n        }\\n        user.amount = _balance;\\n        user.rewardDebt = _balance.mul(accRewardPerShare).div(1e12);\\n        pool.totalSupply = _totalSupply;\\n        if (pool.onwardIncentives != IOnwardIncentivesController(0)) {\\n            pool.onwardIncentives.handleAction(msg.sender, _user, _balance, _totalSupply);\\n        }\\n        emit BalanceUpdated(msg.sender, _user, _balance, _totalSupply);\\n    }\\n\\n    // Claim pending rewards for one or more pools.\\n    // Rewards are not received directly, they are minted by the rewardMinter.\\n    function claim(address _user, address[] calldata _tokens) external {\\n        _updateEmissions();\\n        uint256 pending = userBaseClaimable[_user];\\n        userBaseClaimable[_user] = 0;\\n        uint256 _totalAllocPoint = totalAllocPoint;\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            PoolInfo storage pool = poolInfo[_tokens[i]];\\n            require(pool.lastRewardTime > 0);\\n            _updatePool(pool, _totalAllocPoint);\\n            UserInfo storage user = userInfo[_tokens[i]][_user];\\n            uint256 rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\\n            pending = pending.add(rewardDebt.sub(user.rewardDebt));\\n            user.rewardDebt = rewardDebt;\\n        }\\n        _mint(_user, pending);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"IMultiFeeDistribution.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\ninterface IMultiFeeDistribution {\\n\\n    function addReward(address rewardsToken) external;\\n    function mint(address user, uint256 amount, bool withPenalty) external;\\n\\n}\\n\"\r\n    },\r\n    \"IOnwardIncentivesController.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\ninterface IOnwardIncentivesController {\\n    function handleAction(\\n        address _token,\\n        address _user,\\n        uint256 _balance,\\n        uint256 _totalSupply\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\nimport {SafeMath} from \\\"SafeMath.sol\\\";\\nimport {Address} from \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"ChefIncentivesController.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint128[]\",\"name\":\"_startTimeOffset\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_rewardsPerSecond\",\"type\":\"uint128[]\"},{\"internalType\":\"address\",\"name\":\"_poolConfigurator\",\"type\":\"address\"},{\"internalType\":\"contract IMultiFeeDistribution\",\"name\":\"_rewardMinter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxMintable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"BalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocPoints\",\"type\":\"uint256[]\"}],\"name\":\"batchUpdateAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"claimableReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"emissionSchedule\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"startTimeOffset\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardsPerSecond\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"handleAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolConfigurator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"contract IOnwardIncentivesController\",\"name\":\"onwardIncentives\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardMinter\",\"outputs\":[{\"internalType\":\"contract IMultiFeeDistribution\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setClaimReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IOnwardIncentivesController\",\"name\":\"_incentives\",\"type\":\"address\"}],\"name\":\"setOnwardIncentives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBaseClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ChefIncentivesController", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}