{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OrderContractV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >= 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./commons/GameCurrency.sol\\\";\\nimport \\\"./commons/WanakaBase.sol\\\";\\nimport \\\"./commons/PermissionRight.sol\\\";\\n\\nimport \\\"./erc20/WaiToken.sol\\\";\\nimport \\\"./interfaces/IOrderContract.sol\\\";\\n\\ncontract OrderContractV2 is\\n    PermissionRight,\\n    Pausable,\\n    WanakaStorage,\\n    IOrderContract,\\n    ReentrancyGuard,\\n    GameCurrency\\n{\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @dev Initialize this contract. Acts as a constructor\\n     * @param _exchangeCurrency - Address of the ERC20 accepted for this marketplace\\n     * @param _gameCurrency - Address of the ERC20 accepted for this game\\n     * @param _listingFeeHolder - Address of fee holder\\n     * @param _shareProfitHolder - Address of profit holder\\n     * @param _listingFeeInBps - Listing fee per order creation\\n     * @param _shareProfitInBps - Share profit per each transaction for holder : sample: 50\\n     * @param _shareProfitToBasePriceInBps - Share profit per each transaction to increase the price of NFT: sample: 200\\n     * @param _owner - owner of this contract\\n     */\\n    constructor(\\n        IERC20 _exchangeCurrency,\\n        WaiToken _gameCurrency,\\n        address _listingFeeHolder,\\n        address _shareProfitHolder,\\n        uint32 _listingFeeInBps,\\n        uint32 _shareProfitInBps,\\n        uint32 _shareProfitToBasePriceInBps,\\n        address _owner\\n    ) public GameCurrency(_exchangeCurrency, _gameCurrency) {\\n        _setShareProfit(_listingFeeInBps, _shareProfitInBps, _shareProfitToBasePriceInBps);\\n        _setFeeHolder(_listingFeeHolder, _shareProfitHolder);\\n        _addAdminUser(_owner);\\n        transferOwnership(_owner);\\n    }\\n\\n    /**\\n     * @dev Sets the listing fee that's charged to users to publish items\\n     * @param _listingFeeHolder - The address listing fee holder\\n     * @param _shareProfitHolder - The address share profit holder\\n     */\\n    function setFeeHolder(address _listingFeeHolder, address _shareProfitHolder)\\n        external\\n        onlyAdmin\\n    {\\n        _setFeeHolder(_listingFeeHolder, _shareProfitHolder);\\n    }\\n\\n    /**\\n     * @dev Sets the flag to decide cancel or not all offers\\n     * @param _isCancelOffersOnExecuted - The flag to decide cancel or not all offers\\n     */\\n    function setCancelOfferOnExecuted(bool _isCancelOffersOnExecuted)\\n        external\\n        onlyAdmin\\n    {\\n        isCancelOffersOnExecuted = _isCancelOffersOnExecuted;\\n    }\\n\\n    /**\\n     * @dev Sets the maximum of offers for each item\\n     * @param _maxOfferForItem - The maximum of offers for each item\\n     */\\n    function setMaxOfferForItem(uint _maxOfferForItem)\\n        external\\n        onlyAdmin\\n    {\\n        maxOfferForItem = _maxOfferForItem;\\n    }\\n\\n    /**\\n     * @dev Sets the fee config\\n     * @param _listingFeeInBps - Listing fee per order creation\\n     * @param _shareProfitInBps - Share profit per each transaction for holder : sample: 50\\n     * @param _shareProfitToBasePriceInBps - Share profit per each transaction to increase the price of NFT: sample: 200\\n     */\\n    function setFeeConfig(\\n        uint32 _listingFeeInBps,\\n        uint32 _shareProfitInBps,\\n        uint32 _shareProfitToBasePriceInBps\\n    ) external onlyAdmin {\\n        _setShareProfit(_listingFeeInBps, _shareProfitInBps, _shareProfitToBasePriceInBps);\\n    }\\n\\n    function setWLandContract(address contractAddress) external onlyAdmin {\\n        require(_validateContract(contractAddress), \\\"Wanaka: Land contract address is in-valid\\\");\\n        wLandContractAddress = contractAddress;\\n        emit WLandContractChanged(contractAddress);\\n    }\\n\\n    function setWItemContract(address contractAddress) external onlyAdmin {\\n        require(_validateContract(contractAddress), \\\"Wanaka: Item contract address is in-valid\\\");\\n        wItemContractAddress = contractAddress;\\n        emit WItemContractChanged(contractAddress);\\n    }\\n\\n    /**\\n     * @dev Returns true if order exists\\n     * @param contractAddress - Address of the NFT\\n     * @param itemId - ID of the published NFT\\n     */\\n    function orderExist(address contractAddress, uint256 itemId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return orderByItemId[contractAddress][itemId].id != bytes32(0);\\n    }\\n\\n    /**\\n     * @dev Returns listing fee if setted\\n     * @param orderPrice - Price of Order\\n     */\\n    function listingFeeInWei(uint256 orderPrice) external view override returns (uint256) {\\n        return _getListingFeeInWei(orderPrice);\\n    }\\n\\n    /**\\n     * @dev Creates a new order\\n     * @param contractAddress - Address of the published NFT\\n     * @param itemId - ID of the published NFT\\n     * @param priceInWei - Price in Wei for the supported coin\\n     * @param expiresAt - Duration of the order (in hours)\\n     */\\n    function createOrder(\\n        address contractAddress,\\n        uint256 itemId,\\n        uint256 priceInWei,\\n        uint256 expiresAt\\n    ) external override nonReentrant whenNotPaused {\\n        _createOrder(contractAddress, itemId, priceInWei, expiresAt);\\n    }\\n\\n    function cancelOrder(address contractAddress, uint256 itemId)\\n        external\\n        override\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        address sender = _msgSender();\\n        Order memory order = orderByItemId[contractAddress][itemId];\\n        require(order.id != 0, \\\"Wanaka: Order is not listed\\\");\\n        // require sender is seller if actor is seller\\n        require(order.seller == sender, \\\"Wanaka: Unauthorized user\\\");\\n        _cancelOrder(order);\\n    }\\n\\n    function executeOrder(\\n        address contractAddress,\\n        uint256 itemId,\\n        uint256 price\\n    ) external override nonReentrant whenNotPaused {\\n        _executeOrder(contractAddress, itemId, price);\\n    }\\n\\n    function createOffer(\\n        address contractAddress,\\n        uint256 itemId,\\n        uint256 priceInWei,\\n        uint256 expiresAt\\n    ) external override nonReentrant whenNotPaused {\\n        _createOffer(contractAddress, itemId, priceInWei, expiresAt);\\n    }\\n\\n    function cancelOffer(address contractAddress, uint256 itemId)\\n        external\\n        override\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        _cancelOffer(contractAddress, _msgSender(), itemId);\\n    }\\n\\n    function takeOffer(\\n        address contractAddress,\\n        address buyer,\\n        uint256 itemId,\\n        uint256 price\\n    ) external override nonReentrant whenNotPaused {\\n        _takeOffer(contractAddress, buyer, itemId, price);\\n    }\\n\\n    function _setFeeHolder(address _listingFeeHolder, address _shareProfitHolder) private {\\n        require(\\n            _listingFeeHolder != address(this) && _listingFeeHolder != address(0),\\n            \\\"Wanaka: _listingFeeHolder is invalid\\\"\\n        );\\n        require(\\n            _shareProfitHolder != address(this) && _shareProfitHolder != address(0),\\n            \\\"Wanaka: _shareProfitHolder is invalid\\\"\\n        );\\n        feeConfig.listingFeeHolder = _listingFeeHolder;\\n        feeConfig.shareProfitHolder = _shareProfitHolder;\\n        emit ChangedFeeHolder(_listingFeeHolder, _shareProfitHolder);\\n    }\\n\\n    function _setShareProfit(\\n        uint32 _listingFeeInBps,\\n        uint32 _shareProfitInBps,\\n        uint32 _shareProfitToBasePriceInBps\\n    ) private {\\n        require(\\n            _listingFeeInBps <= LISTING_FEE_MAXIMUM,\\n            \\\"Wanaka: _listingFeeInBps is over the maximum\\\"\\n        );\\n        require(\\n            _shareProfitInBps + _shareProfitToBasePriceInBps <= SHARE_PROFIT_MAXIMUM,\\n            \\\"Wanaka: _shareProfitInBps + _shareProfitToBasePriceInBps is over the maximum\\\"\\n        );\\n        feeConfig.listingFeeInBps = _listingFeeInBps;\\n        feeConfig.shareProfitInBps = _shareProfitInBps;\\n        feeConfig.shareProfitToBasePriceInBps = _shareProfitToBasePriceInBps;\\n\\n        emit ChangedFeeConfig(_listingFeeInBps, _shareProfitInBps, _shareProfitToBasePriceInBps);\\n    }\\n\\n    /**\\n     * @dev Creates a new order for NFT\\n     * @param contractAddress - Address of the NFT\\n     * @param itemId - ID of the published NFT\\n     * @param priceInWei - Price in Wei for the supported coin\\n     * @param expiresAt - Duration of the order (in hours)\\n     */\\n    function _createOrder(\\n        address contractAddress,\\n        uint256 itemId,\\n        uint256 priceInWei,\\n        uint256 expiresAt\\n    ) internal {\\n        address seller = _msgSender();\\n        NFTDetail memory detail = _getDetails(contractAddress, itemId);\\n        require(seller == detail.ownerOfItem, \\\"Wanaka: Only the owner can create orders\\\");\\n        require(detail.inInventory, \\\"Wanaka: Should move the item to inventory first\\\");\\n        require(priceInWei > detail.floorPrice, \\\"Wanaka: Price should be greater than floorPrice\\\");\\n        require(\\n            expiresAt > block.timestamp + MIN_ORDER_DURATION,\\n            \\\"Wanaka: Listing should be more than 5 minutes in the future\\\"\\n        );\\n        _requireApproved(contractAddress, seller, itemId);\\n\\n        uint256 _listingFeeInWei = 0;\\n        Order memory existedOrder = orderByItemId[contractAddress][itemId];\\n        if (existedOrder.id != bytes32(0)) {\\n            _cancelOrder(existedOrder);\\n        }\\n        // Check if there's a listing fee and\\n        // transfer the amount to marketplace owner\\n        if (feeConfig.listingFeeInBps > 0) {\\n            _listingFeeInWei = _getListingFeeInWei(priceInWei);\\n            exchangeCurrency.safeTransferFrom(seller, address(this), _listingFeeInWei);\\n        }\\n        AssetType assetTypeEnum = _getAssetType(contractAddress);\\n        bytes32 orderId = keccak256(\\n            abi.encodePacked(\\n                block.timestamp,\\n                detail.ownerOfItem,\\n                uint256(assetTypeEnum),\\n                itemId,\\n                contractAddress,\\n                priceInWei\\n            )\\n        );\\n\\n        orderByItemId[contractAddress][itemId] = Order({\\n            id: orderId,\\n            assetType: assetTypeEnum,\\n            seller: seller,\\n            nftContractAddress: contractAddress,\\n            itemId: itemId,\\n            quantity: 1,\\n            price: priceInWei,\\n            expiresAt: expiresAt,\\n            listingFeeBacked: _listingFeeInWei\\n        });\\n\\n        emit OrderCreated(orderId, itemId, seller, contractAddress, priceInWei, expiresAt);\\n    }\\n\\n    /**\\n     * @dev Cancel an already published order\\n     *  can only be canceled by seller\\n     * @param order - Order of the NFT\\n     */\\n    function _cancelOrder(Order memory order) internal {\\n        // Check if there's a listing fee and\\n        // transfer the amount back to NFT owner\\n        if (order.listingFeeBacked > 0) {\\n            exchangeCurrency.safeTransfer(order.seller, order.listingFeeBacked);\\n        }\\n\\n        emit OrderCancelled(order.id, order.itemId, order.seller, order.nftContractAddress);\\n        _emptyOrder(order.nftContractAddress, order.itemId);\\n    }\\n\\n    /**\\n     * @dev Executes the sale for a published NFT\\n     * @param contractAddress - Address of the NFT\\n     * @param itemId - ID of the published NFT\\n     * @param price - Order price this ensures that the NFT price does not change when the order is accepted.\\n     */\\n    function _executeOrder(\\n        address contractAddress,\\n        uint256 itemId,\\n        uint256 price\\n    ) internal returns (Order memory order) {\\n        address buyer = _msgSender();\\n        order = orderByItemId[contractAddress][itemId];\\n        require(order.id != 0, \\\"Wanaka: Item is not listed\\\");\\n        require(order.seller != address(0), \\\"Wanaka: Invalid address\\\");\\n        require(order.seller != buyer, \\\"Wanaka: Unauthorized user\\\");\\n\\n        NFTDetail memory detail = _getDetails(contractAddress, itemId);\\n        require(detail.inInventory, \\\"Wanaka: The Item must be in the inventory\\\");\\n        require(order.seller == detail.ownerOfItem, \\\"Wanaka: The seller is no longer the owner\\\");\\n        require(order.price == price, \\\"Wanaka: The price is not correct\\\");\\n        require(block.timestamp < order.expiresAt, \\\"Wanaka: The order expired\\\");\\n\\n        if (isCancelOffersOnExecuted) {\\n            _cancelOffers(contractAddress, itemId, bytes32(0));\\n        }\\n        else if (bidByBidder[contractAddress][itemId][buyer].id != bytes32(0)) {\\n            // cancel the previous offer\\n            _cancelOffer(contractAddress, buyer, itemId);\\n        }\\n        if (order.listingFeeBacked > 0) {\\n            exchangeCurrency.safeTransfer(feeConfig.listingFeeHolder, order.listingFeeBacked);\\n        }\\n        uint256 saleShareAmount = 0;\\n        // The amount will be adding to the base price if NFT is Land type.\\n        uint256 incPriceAmount = 0;\\n        if (feeConfig.shareProfitInBps > 0) {\\n            // Calculate sale share\\n            saleShareAmount += (price * feeConfig.shareProfitInBps) / BPS;\\n            // Transfer share amount to profit holder\\n            exchangeCurrency.safeTransferFrom(buyer, feeConfig.shareProfitHolder, saleShareAmount);\\n        }\\n        // only land for this logic\\n        // each transation will share a little amount to the base price\\n        AssetType assetTypeEnum = _getAssetType(contractAddress);\\n        if (assetTypeEnum == AssetType.WLand && feeConfig.shareProfitToBasePriceInBps > 0) {\\n            // Calculate sale share\\n            incPriceAmount += (price * feeConfig.shareProfitToBasePriceInBps) / BPS;\\n            // keep a little amount to the the base price of NFT\\n            exchangeCurrency.safeTransferFrom(buyer, wLandContractAddress, incPriceAmount);\\n            // increase the base price\\n            // each transation will share a little amount to the base price\\n            uint256 newPrice = detail.floorPrice + incPriceAmount;\\n            WLandInterfaceLight(wLandContractAddress).increaseBasePrice(itemId, newPrice);\\n        }\\n        // Transfer sale amount to seller\\n        exchangeCurrency.safeTransferFrom(\\n            buyer,\\n            order.seller,\\n            price\\n        );\\n        // Transfer Land owner\\n        _doTransfer(contractAddress, order.seller, buyer, assetTypeEnum, itemId);\\n\\n        emit OrderSuccessful(order.id, itemId, order.seller, contractAddress, price, buyer);\\n\\n        _emptyOrder(contractAddress, itemId);\\n    }\\n\\n    /**\\n     * @dev Creates a new order for NFT\\n     * Buyer can create only once offer for each item at a time\\n     * @param contractAddress - Address of the NFT\\n     * @param itemId - ID of the published NFT\\n     * @param priceInWei - Price in Wei for the supported coin\\n     * @param expiresAt - Duration of the order (in hours)\\n     */\\n    function _createOffer(\\n        address contractAddress,\\n        uint256 itemId,\\n        uint256 priceInWei,\\n        uint256 expiresAt\\n    ) internal {\\n        address buyer = _msgSender();\\n        NFTDetail memory detail = _getDetails(contractAddress, itemId);\\n        require(buyer != detail.ownerOfItem, \\\"Wanaka: Can not create offer for Item you own\\\");\\n        require(priceInWei > detail.floorPrice, \\\"Wanaka: Price should be greater than floorPrice\\\");\\n        require(\\n            expiresAt > block.timestamp + MIN_ORDER_DURATION,\\n            \\\"Wanaka: Listing should be more than 5 minutes in the future\\\"\\n        );\\n        Offer memory currentOffer = bidByBidder[contractAddress][itemId][buyer];\\n        // check offer exists\\n        if (currentOffer.id != bytes32(0)) {\\n            require(currentOffer.price != priceInWei, \\\"Wanaka: Duplicated offer\\\");\\n            if (currentOffer.price > priceInWei) {\\n                // buyer decrease the offer's price, refund the different amount\\n                exchangeCurrency.safeTransfer(buyer, currentOffer.price - priceInWei);\\n            } else {\\n                // buyer increase the offer's price, collect the different amount\\n                exchangeCurrency.safeTransferFrom(\\n                    buyer,\\n                    address(this),\\n                    priceInWei - currentOffer.price\\n                );\\n            }\\n            delete bidByBidder[contractAddress][itemId][buyer];\\n            emit OfferCancelled(currentOffer.id, contractAddress, itemId, buyer);\\n        } else {\\n            require(itemToOfferBuyers[contractAddress][itemId].length() < maxOfferForItem, \\\"Wanaka: The number of offers has reached the maximum\\\");\\n            exchangeCurrency.safeTransferFrom(buyer, address(this), priceInWei);\\n        }\\n\\n        bytes32 id = keccak256(\\n            abi.encodePacked(block.timestamp, contractAddress, buyer, itemId, priceInWei)\\n        );\\n\\n        bidByBidder[contractAddress][itemId][buyer] = Offer({\\n            id: id,\\n            assetType: detail.assetType,\\n            nftContractAddress: contractAddress,\\n            itemId: itemId,\\n            quantity: 1,\\n            price: priceInWei,\\n            expiresAt: expiresAt\\n        });\\n        if (!itemToOfferBuyers[contractAddress][itemId].contains(buyer)) {\\n            itemToOfferBuyers[contractAddress][itemId].add(buyer);\\n        }\\n        emit OfferCreated(\\n            id,\\n            contractAddress,\\n            itemId,\\n            buyer,\\n            detail.ownerOfItem,\\n            priceInWei,\\n            expiresAt\\n        );\\n    }\\n\\n    /**\\n     * @dev Cancel an already published offer\\n     *  can only be canceled by buyer\\n     * @param contractAddress - Address of the NFT\\n     * @param buyer - Address of the buyer\\n     * @param itemId - ID of the published NFT\\n     */\\n    function _cancelOffer(\\n        address contractAddress,\\n        address buyer,\\n        uint256 itemId\\n    ) private returns (Offer memory offer) {\\n        offer = bidByBidder[contractAddress][itemId][buyer];\\n        require(offer.id != bytes32(0), \\\"Wanaka: Offer does not exists\\\");\\n\\n        exchangeCurrency.safeTransfer(buyer, offer.price);\\n        // emit BidCancelled event\\n        emit OfferCancelled(offer.id, contractAddress, itemId, buyer);\\n        // remove cached offer\\n        itemToOfferBuyers[contractAddress][itemId].remove(buyer);\\n        // remove currentOffer from the cached\\n        delete bidByBidder[contractAddress][itemId][buyer];\\n    }\\n\\n    function _cancelOffers(\\n        address contractAddress,\\n        uint256 itemId,\\n        bytes32 ignoreOfferId\\n    ) private {\\n        uint _startIndex = 0;\\n        uint _count = itemToOfferBuyers[contractAddress][itemId].length();\\n        while (_count > _startIndex) {\\n            address _buyer = itemToOfferBuyers[contractAddress][itemId].at(_startIndex);\\n            Offer memory _offer = bidByBidder[contractAddress][itemId][_buyer];\\n            if (ignoreOfferId != bytes32(0) && _offer.id == ignoreOfferId) {\\n                _startIndex = 1;\\n                continue;\\n            }\\n            if (_offer.id != bytes32(0)) {\\n                exchangeCurrency.safeTransfer(_buyer, _offer.price);\\n                // emit BidCancelled event\\n                emit OfferCancelled(_offer.id, contractAddress, itemId, _buyer);\\n                // remove currentOffer from the cached\\n                delete bidByBidder[contractAddress][itemId][_buyer];\\n            }\\n            itemToOfferBuyers[contractAddress][itemId].remove(_buyer);\\n            _count = itemToOfferBuyers[contractAddress][itemId].length();\\n        }\\n    }\\n\\n    /**\\n     * @dev Executes the sale for a published NFT\\n     * @param contractAddress - Address of the NFT\\n     * @param buyer - Address of the buyer\\n     * @param itemId - ID of the published NFT\\n     * @param minPrice - Offer min price\\n     */\\n    function _takeOffer(\\n        address contractAddress,\\n        address buyer,\\n        uint256 itemId,\\n        uint256 minPrice\\n    ) private returns (Offer memory offer) {\\n        address seller = _msgSender();\\n        require(seller != buyer, \\\"Wanaka: Can not take offer you own\\\");\\n        NFTDetail memory detail = _getDetails(contractAddress, itemId);\\n        require(detail.inInventory, \\\"Wanaka: The Item must be in the inventory\\\");\\n        require(seller == detail.ownerOfItem, \\\"Wanaka: The seller is no longer the owner\\\");\\n        offer = bidByBidder[contractAddress][itemId][buyer];\\n        require(offer.id != bytes32(0), \\\"Wanaka: Offer does not exists\\\");\\n        require(\\n            offer.price >= minPrice,\\n            \\\"Wanaka: The price of offer has been changed, please check again\\\"\\n        );\\n        require(block.timestamp < offer.expiresAt, \\\"Wanaka: The offer expired\\\");\\n        _requireApproved(contractAddress, seller, itemId);\\n\\n        uint256 saleShareAmount = 0;\\n        // The amount will be adding to the base price if NFT is Land type.\\n        uint256 incPriceAmount = 0;\\n        if (feeConfig.shareProfitInBps > 0) {\\n            // Calculate sale share\\n            saleShareAmount += (offer.price * feeConfig.shareProfitInBps) / BPS;\\n            // Transfer share amount to profit holder\\n            exchangeCurrency.safeTransfer(feeConfig.shareProfitHolder, saleShareAmount);\\n        }\\n        // only land for this logic\\n        // each transation will share a little amount to the base price\\n        AssetType assetTypeEnum = _getAssetType(contractAddress);\\n        if (assetTypeEnum == AssetType.WLand && feeConfig.shareProfitToBasePriceInBps > 0) {\\n            // Calculate sale share\\n            incPriceAmount += (offer.price * feeConfig.shareProfitToBasePriceInBps) / BPS;\\n            // keep a little amount to the the base price of NFT\\n            exchangeCurrency.safeTransfer(wLandContractAddress, incPriceAmount);\\n            // change the base price\\n            // each transation will share a little amount to the base price\\n            uint256 newPrice = detail.floorPrice + incPriceAmount;\\n            WLandInterfaceLight(wLandContractAddress).increaseBasePrice(itemId, newPrice);\\n        }\\n        uint256 actualPrice = offer.price - (saleShareAmount + incPriceAmount);\\n        // Transfer sale amount to seller\\n        exchangeCurrency.safeTransfer(seller, actualPrice);\\n\\n        // cancel order from Order Contract if its exist\\n        Order memory order = orderByItemId[contractAddress][itemId];\\n        if (order.id != bytes32(0)) {\\n            _cancelOrder(order);\\n        }\\n        if (isCancelOffersOnExecuted) {\\n            _cancelOffers(contractAddress, itemId, offer.id);\\n        }\\n        // Transfer item owner\\n        _doTransfer(contractAddress, seller, buyer, assetTypeEnum, itemId);\\n\\n        // remove currentOffer from the cached\\n        delete bidByBidder[contractAddress][itemId][buyer];\\n\\n        emit OfferAccepted(\\n            offer.id,\\n            contractAddress,\\n            itemId,\\n            buyer,\\n            seller,\\n            offer.price,\\n            saleShareAmount\\n        );\\n    }\\n\\n    function _getListingFeeInWei(uint256 orderPrice) private view returns (uint256) {\\n        return (feeConfig.listingFeeInBps * orderPrice) / BPS;\\n    }\\n\\n    function _doTransfer(\\n        address contractAddress,\\n        address seller,\\n        address buyer,\\n        AssetType assetType,\\n        uint256 itemId\\n    ) private {\\n        W721InterfaceLight wContract = W721InterfaceLight(contractAddress);\\n        wContract.safeTransferFrom(seller, buyer, itemId);\\n        emit ItemTransferred(seller, buyer, assetType, itemId);\\n    }\\n\\n    function _emptyOrder(address addr, uint256 itemId) private {\\n        orderByItemId[addr][itemId].id = bytes32(0);\\n        delete orderByItemId[addr][itemId];\\n    }\\n\\n    function _requireApproved(\\n        address contractAddress,\\n        address seller,\\n        uint256 itemId\\n    ) private view {\\n        W721InterfaceLight wContract = W721InterfaceLight(contractAddress);\\n        require(\\n            wContract.getApproved(itemId) == address(this) ||\\n                wContract.isApprovedForAll(seller, address(this)),\\n            \\\"Wanaka: The contract is not authorized, please approve it before\\\"\\n        );\\n    }\\n\\n    function _getDetails(address contractAddress, uint256 itemId)\\n        private\\n        view\\n        returns (NFTDetail memory detail)\\n    {\\n        detail.assetType = _getAssetType(contractAddress);\\n        if (detail.assetType == AssetType.WLand) {\\n            WLandInterfaceLight wContract = WLandInterfaceLight(contractAddress);\\n            (detail.ownerOfItem, detail.floorPrice, , , detail.inInventory, ) = wContract\\n                .getLandData(itemId);\\n        }\\n        if (detail.assetType == AssetType.WItem) {\\n            WItemInterfaceLight wContract = WItemInterfaceLight(contractAddress);\\n            (detail.ownerOfItem, detail.floorPrice, , ) = wContract.getItemData(itemId);\\n            detail.inInventory = true;\\n        }\\n    }\\n\\n    function _getAssetType(address contractAddress) private view returns (AssetType assetType) {\\n        if (contractAddress == wLandContractAddress) {\\n            assetType = AssetType.WLand;\\n        } else if (contractAddress == wItemContractAddress) {\\n            assetType = AssetType.WItem;\\n        } else {\\n            revert(\\\"Wanaka: contract address does not supports\\\");\\n        }\\n    }\\n\\n    function _validateContract(address contractAddress) private view returns (bool) {\\n        if (contractAddress == address(0)) return false;\\n        if (!contractAddress.isContract()) return false;\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/commons/GameCurrency.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./PermissionRight.sol\\\";\\nimport \\\"../erc20/WaiToken.sol\\\";\\n\\ncontract GameCurrency is PermissionRight {\\n    // Token as a currency it will be using for rewarding in the game.\\n    WaiToken public gameCurrency;\\n    // Token as a currency it will be using for exchange in the market.\\n    IERC20 public exchangeCurrency;\\n\\n    constructor(IERC20 _exchangeCurrency, WaiToken _gameCurrency) {\\n        exchangeCurrency = _exchangeCurrency;\\n        gameCurrency = _gameCurrency;\\n    }\\n\\n    /**\\n     * @notice Sets currency token using in the game.\\n     */\\n    function setGameCurrency(WaiToken tokenAddr) external onlyOwner {\\n        require(address(tokenAddr) != address(0));\\n        gameCurrency = tokenAddr;\\n    }\\n\\n    /**\\n     * @notice Sets exchange token using in the marketplace.\\n     */\\n    function setExchangeCurrency(IERC20 tokenAddr) external onlyOwner {\\n        require(address(tokenAddr) != address(0));\\n        exchangeCurrency = tokenAddr;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/commons/WanakaBase.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ninterface W721InterfaceLight {\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\\n/**\\n * @title Light Interface for contracts conforming to ERC-721\\n */\\ninterface WLandInterfaceLight {\\n    function getLandData(uint256 itemId)\\n        external\\n        view\\n        returns (\\n            address ownerOfItem,\\n            uint256 salePrice,\\n            uint256 level,\\n            uint256 releaseVersion,\\n            bool inInventory,\\n            string memory name\\n        );\\n\\n    function increaseBasePrice(uint256 itemId, uint256 incPrice) external;\\n}\\n\\n/**\\n * @title Light Interface for contracts conforming to ERC-721\\n */\\ninterface WItemInterfaceLight {\\n    function getItemData(uint256 itemId)\\n        external\\n        view\\n        returns (\\n            address ownerOfItem,\\n            uint256 salePrice,\\n            uint256 rarity,\\n            string memory name\\n        );\\n}\\n\\ncontract WanakaStorage {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @title The Land's types\\n    enum Environment {\\n        Basic,\\n        Forest,\\n        Sea\\n    }\\n    enum AssetType {\\n        WLand,\\n        WItem\\n    }\\n\\n    struct Order {\\n        // Order ID\\n        bytes32 id;\\n        // Asset type\\n        AssetType assetType;\\n        // Owner of the NFT\\n        address seller;\\n        // NFT contract address\\n        address nftContractAddress;\\n        // NFT's quantity, required if NFT item\\n        uint16 quantity;\\n        // NFT's ID\\n        uint256 itemId;\\n        // Price (in wei) for the listed item\\n        uint256 price;\\n        // Time when this sale ends\\n        uint256 expiresAt;\\n        // Cached The listing fee, it will be used when canceling order\\n        uint256 listingFeeBacked;\\n    }\\n\\n    struct Offer {\\n        bytes32 id;\\n        // Asset type\\n        AssetType assetType;\\n        // NFT contract address\\n        address nftContractAddress;\\n        // NFT's ID\\n        uint256 itemId;\\n        // NFT's quantity, required if NFT item\\n        uint16 quantity;\\n        // Price (in wei) for the listed item\\n        uint256 price;\\n        // Time when this sale ends\\n        uint256 expiresAt;\\n    }\\n\\n    struct NFTDetail {\\n        AssetType assetType;\\n        address ownerOfItem;\\n        bool inInventory;\\n        uint256 floorPrice;\\n    }\\n\\n    struct FeeConfig {\\n        address listingFeeHolder;\\n        // The fee that seller have to pay for market to list on market\\n        // and must be <= LISTING_FEE_MAXIMUM\\n        uint32 listingFeeInBps;\\n        address shareProfitHolder;\\n        // The profit percent that seller will share for the owner of contract\\n        // based on UNIT_FOR_SHARE_PROFIT\\n        // shareProfitInBps + shareProfitToBasePriceInBps <= SHARE_PROFIT_MAXIMUM\\n        uint32 shareProfitInBps;\\n        // The profit to add to basePrice of NFT\\n        // based on UNIT_FOR_SHARE_PROFIT\\n        uint32 shareProfitToBasePriceInBps;\\n    }\\n\\n    uint256 public constant LISTING_FEE_MAXIMUM = 50; // equivalent 0.5%\\n    uint256 internal constant MIN_ORDER_DURATION = 5 minutes;\\n    uint256 public constant BPS = 10000;\\n    // the maximum of share fee that ensure that every transaction is safe\\n    // total share profit = SHARE_PROFIT_MAXIMUM / UNIT_FOR_SHARE_PROFIT = 5%\\n    uint256 public constant SHARE_PROFIT_MAXIMUM = 500; // equivalent 5%\\n    // Order by address => itemId => Order\\n    mapping(address => mapping(uint256 => Order)) public orderByItemId;\\n    // Bid by token address => token id => buyer address => bid\\n    mapping(address => mapping(uint256 => mapping(address => Offer))) public bidByBidder;\\n    // Bid by token address => token id => buyer address\\n    mapping(address => mapping(uint256 => EnumerableSet.AddressSet)) internal itemToOfferBuyers;\\n    FeeConfig public feeConfig;\\n    address public wLandContractAddress;\\n    address public wItemContractAddress;\\n    uint public maxOfferForItem = 20;\\n    bool public isCancelOffersOnExecuted = true;\\n\\n    // EVENTS\\n    event OrderCreated(\\n        bytes32 id,\\n        uint256 indexed itemId,\\n        address indexed seller,\\n        address indexed nftContractAddress,\\n        uint256 priceInWei,\\n        uint256 expiresAt\\n    );\\n    event OrderSuccessful(\\n        bytes32 id,\\n        uint256 indexed itemId,\\n        address indexed seller,\\n        address indexed nftContractAddress,\\n        uint256 totalPrice,\\n        address buyer\\n    );\\n    event OrderCancelled(\\n        bytes32 id,\\n        uint256 indexed itemId,\\n        address indexed seller,\\n        address indexed nftContractAddress\\n    );\\n\\n    event OfferCreated(\\n        bytes32 id,\\n        address indexed nftContractAddress,\\n        uint256 indexed itemId,\\n        address indexed buyer,\\n        address seller,\\n        uint256 price,\\n        uint256 expiresAt\\n    );\\n    event OfferAccepted(\\n        bytes32 id,\\n        address indexed nftContractAddress,\\n        uint256 indexed itemId,\\n        address indexed buyer,\\n        address seller,\\n        uint256 price,\\n        uint256 fee\\n    );\\n    event OfferCancelled(\\n        bytes32 id,\\n        address indexed nftContractAddress,\\n        uint256 indexed itemId,\\n        address indexed buyer\\n    );\\n\\n    event ChangedFeeHolder(address indexed listingFeeHolder, address indexed profitShareHolder);\\n    event ChangedFeeConfig(\\n        uint32 listingFeeInBps,\\n        uint32 shareProfitInBps,\\n        uint32 shareProfitToBasePriceInBps\\n    );\\n\\n    event ItemsTransferred(\\n        address seller,\\n        address buyer,\\n        uint256 itemId,\\n        AssetType assetType,\\n        uint256[] ids,\\n        uint256[] quantities\\n    );\\n    event ItemTransferred(address seller, address buyer, AssetType assetType, uint256 itemId);\\n    event ItemDetached(uint256 itemId, uint256 assetType, uint256 id, uint256 quantity);\\n    event ItemAttached(uint256 itemId, uint256 assetType, uint256 id, uint256 quantity);\\n\\n    event WLandContractChanged(address indexed newContractAddress);\\n    event WItemContractChanged(address indexed newContractAddress);\\n}\\n\"\r\n    },\r\n    \"contracts/commons/PermissionRight.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract PermissionRight is Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet internal adminGroup;\\n    EnumerableSet.AddressSet internal operatorGroup;\\n\\n    event AdminUserAdded(address indexed candidate);\\n    event AdminUserRemoved(address indexed account);\\n    event OperatorUserAdded(address indexed candidate);\\n    event OperatorUserRemoved(address indexed account);\\n\\n    modifier onlyAdmin() {\\n        require(\\n            adminGroup.contains(_msgSender()),\\n            \\\"PermissionRight: You're not in the admin group\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            operatorGroup.contains(_msgSender()),\\n            \\\"PermissionRight: You're not in the operator group\\\"\\n        );\\n        _;\\n    }\\n\\n    function inAdminGroup() internal view returns (bool) {\\n        return adminGroup.contains(_msgSender());\\n    }\\n\\n    function inOperatorGroup() internal view returns (bool) {\\n        return inOperatorGroup(_msgSender());\\n    }\\n\\n    function inOperatorGroup(address user) internal view returns (bool) {\\n        return operatorGroup.contains(user);\\n    }\\n\\n    function listAdminUser() external view onlyOwner returns (address[] memory _users) {\\n        _users = new address[](adminGroup.length());\\n        for (uint256 i = 0; i < adminGroup.length(); i++) {\\n            _users[i] = adminGroup.at(i);\\n        }\\n    }\\n\\n    function listOperatorUser() external view onlyOwner returns (address[] memory _users) {\\n        _users = new address[](operatorGroup.length());\\n        for (uint256 i = 0; i < operatorGroup.length(); i++) {\\n            _users[i] = operatorGroup.at(i);\\n        }\\n    }\\n\\n    // Adds an candidate to admin group.\\n    function addAdminUser(address candidate) external onlyOwner {\\n        _addAdminUser(candidate);\\n    }\\n\\n    // Removes an address from admin group.\\n    function removeAdminUser(address user) external onlyOwner {\\n        adminGroup.remove(user);\\n        emit AdminUserRemoved(user);\\n    }\\n\\n    // Adds an candidate to operator group.\\n    function addOperatorUser(address candidate) external onlyAdmin {\\n        _addOperatorUser(candidate);\\n    }\\n\\n    // Removes an address from operator group.\\n    function removeOperatorUser(address user) external onlyAdmin {\\n        operatorGroup.remove(user);\\n        emit OperatorUserRemoved(user);\\n    }\\n\\n    function _addOperatorUser(address candidate) internal {\\n        operatorGroup.add(candidate);\\n        emit OperatorUserAdded(candidate);\\n    }\\n\\n    function _addAdminUser(address candidate) internal {\\n        adminGroup.add(candidate);\\n        emit AdminUserAdded(candidate);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc20/WaiToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\nimport \\\"../commons/PermissionRight.sol\\\";\\n\\ncontract WaiToken is ERC20Burnable, Ownable, PermissionRight {\\n    constructor(\\n        address _owner, \\n        string memory _tokenName, \\n        string memory _tokenSymbol\\n    ) \\n    public \\n    ERC20(_tokenName, _tokenSymbol) {\\n        _addAdminUser(_owner);\\n        _addOperatorUser(_owner);\\n        transferOwnership(_owner);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n    * the total supply.\\n    *\\n    * Emits a {Transfer} event with `from` set to the zero address.\\n    *\\n    * Requirements\\n    *\\n    * - `to` cannot be the zero address.\\n    */\\n    function mint(address account, uint256 amount) external onlyOperator {\\n        super._mint(account, amount);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOrderContract.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface IOrderContract {\\n    /**\\n     * @dev Returns true if order exists\\n     * @param contractAddress - Address of the NFT\\n     * @param itemId - ID of the published NFT\\n     */\\n    function orderExist(address contractAddress, uint256 itemId) external returns (bool);\\n\\n    /**\\n     * @dev Returns listing fee if setted from the order Price\\n     * @param orderPrice - Price of Order\\n     */\\n    function listingFeeInWei(uint256 orderPrice) external returns (uint256);\\n\\n    /**\\n     * @dev Creates a new order\\n     * @param contractAddress - Address of the NFT\\n     * @param itemId - ID of the published NFT\\n     * @param priceInWei - Price in Wei for the supported coin\\n     * @param expiresAt - Duration of the order\\n     */\\n    function createOrder(\\n        address contractAddress,\\n        uint256 itemId,\\n        uint256 priceInWei,\\n        uint256 expiresAt\\n    ) external;\\n\\n    /**\\n     * @dev Cancel an already published order\\n     *  can only be canceled by seller\\n     * @param contractAddress - Address of the NFT\\n     * @param itemId - ID of the published NFT\\n     */\\n    function cancelOrder(address contractAddress, uint256 itemId) external;\\n\\n    /**\\n     * @dev Executes the sale for a published NFT\\n     * @param contractAddress - Address of the NFT\\n     * @param itemId - ID of the published NFT\\n     * @param price - Order minPrice this ensures that the NFT price does not change when the order is accepted.\\n     */\\n    function executeOrder(\\n        address contractAddress,\\n        uint256 itemId,\\n        uint256 price\\n    ) external;\\n\\n    /**\\n     * @dev Creates a new offer\\n     * Buyer can create only once offer for each item at a time\\n     * If exist it will be replaced\\n     * @param contractAddress - Address of the NFT\\n     * @param itemId - ID of the published NFT\\n     * @param priceInWei - Price in Wei for the supported coin\\n     * @param expiresAt - Duration of the order (in hours)\\n     */\\n    function createOffer(\\n        address contractAddress,\\n        uint256 itemId,\\n        uint256 priceInWei,\\n        uint256 expiresAt\\n    ) external;\\n\\n    /**\\n     * @dev Cancel an already published offer\\n     *  can only be canceled by seller\\n     * @param contractAddress - Address of the NFT\\n     * @param itemId - ID of the published NFT\\n     */\\n    function cancelOffer(address contractAddress, uint256 itemId) external;\\n\\n    /**\\n     * @dev Executes the sale for a published NFT\\n     * @param contractAddress - Address of the NFT\\n     * @param buyer - Address of the buyer\\n     * @param itemId - ID of the published NFT\\n     * @param price - Order price\\n     * required:\\n     * quantity >=1 with NFT item\\n     */\\n    function takeOffer(\\n        address contractAddress,\\n        address buyer,\\n        uint256 itemId,\\n        uint256 price\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        _approve(account, _msgSender(), currentAllowance - amount);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_exchangeCurrency\",\"type\":\"address\"},{\"internalType\":\"contract WaiToken\",\"name\":\"_gameCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_listingFeeHolder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shareProfitHolder\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_listingFeeInBps\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_shareProfitInBps\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_shareProfitToBasePriceInBps\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"AdminUserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminUserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"listingFeeInBps\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"shareProfitInBps\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"shareProfitToBasePriceInBps\",\"type\":\"uint32\"}],\"name\":\"ChangedFeeConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listingFeeHolder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"profitShareHolder\",\"type\":\"address\"}],\"name\":\"ChangedFeeHolder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"ItemAttached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"ItemDetached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum WanakaStorage.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"ItemTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum WanakaStorage.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"name\":\"ItemsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"OfferAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"OfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"OfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"OperatorUserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorUserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"OrderSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newContractAddress\",\"type\":\"address\"}],\"name\":\"WItemContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newContractAddress\",\"type\":\"address\"}],\"name\":\"WLandContractChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LISTING_FEE_MAXIMUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHARE_PROFIT_MAXIMUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"addAdminUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"addOperatorUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bidByBidder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"enum WanakaStorage.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"createOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeCurrency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"executeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"listingFeeHolder\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"listingFeeInBps\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"shareProfitHolder\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"shareProfitInBps\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"shareProfitToBasePriceInBps\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameCurrency\",\"outputs\":[{\"internalType\":\"contract WaiToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCancelOffersOnExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAdminUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listOperatorUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderPrice\",\"type\":\"uint256\"}],\"name\":\"listingFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOfferForItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderByItemId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"enum WanakaStorage.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingFeeBacked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"orderExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeAdminUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeOperatorUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isCancelOffersOnExecuted\",\"type\":\"bool\"}],\"name\":\"setCancelOfferOnExecuted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"setExchangeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_listingFeeInBps\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_shareProfitInBps\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_shareProfitToBasePriceInBps\",\"type\":\"uint32\"}],\"name\":\"setFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_listingFeeHolder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shareProfitHolder\",\"type\":\"address\"}],\"name\":\"setFeeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract WaiToken\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"setGameCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxOfferForItem\",\"type\":\"uint256\"}],\"name\":\"setMaxOfferForItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setWItemContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setWLandContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"takeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wItemContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wLandContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OrderContractV2", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000339c72829ab7dd45c3c52f965e7abe358dd8761e000000000000000000000000934c9198582bf2631128c5d4b051aacef9a6224f000000000000000000000000574d630164edc7e09a852144b44f760041cf2fb8000000000000000000000000574d630164edc7e09a852144b44f760041cf2fb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000574d630164edc7e09a852144b44f760041cf2fb8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}