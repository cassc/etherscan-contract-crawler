{"SourceCode": "// Sources flattened with hardhat v2.11.2 https://hardhat.org\r\n\r\n// File contracts/interfaces/IEmergencyGuard.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IEmergencyGuard {\r\n    /**\r\n     * Emitted on BNB withdrawal\r\n     *\r\n     * @param receiver address - Receiver of BNB\r\n     * @param amount uint256 - BNB amount\r\n     */\r\n    event EmergencyWithdraw(address receiver, uint256 amount);\r\n\r\n    /**\r\n     * Emitted on token withdrawal\r\n     *\r\n     * @param receiver address - Receiver of token\r\n     * @param token address - Token address\r\n     * @param amount uint256 - token amount\r\n     */\r\n    event EmergencyWithdrawToken(\r\n        address receiver,\r\n        address token,\r\n        uint256 amount\r\n    );\r\n\r\n    /**\r\n     * Withdraws BNB stores at the contract\r\n     *\r\n     * @param amount uint256 - Amount of BNB to withdraw\r\n     */\r\n    function emergencyWithdraw(uint256 amount) external;\r\n\r\n    /**\r\n     * Withdraws token stores at the contract\r\n     *\r\n     * @param token address - Token to withdraw\r\n     * @param amount uint256 - Amount of token to withdraw\r\n     */\r\n    function emergencyWithdrawToken(address token, uint256 amount) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/EmergencyGuard.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\nabstract contract EmergencyGuard is IEmergencyGuard {\r\n    function _emergencyWithdraw(uint256 amount) internal virtual {\r\n        address payable sender = payable(msg.sender);\r\n        (bool sent, ) = sender.call{value: amount}(\"\");\r\n        require(sent, \"WeSendit: Failed to send BNB\");\r\n\r\n        emit EmergencyWithdraw(msg.sender, amount);\r\n    }\r\n\r\n    function _emergencyWithdrawToken(address token, uint256 amount)\r\n        internal\r\n        virtual\r\n    {\r\n        IERC20(token).transfer(msg.sender, amount);\r\n        emit EmergencyWithdrawToken(msg.sender, token, amount);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IPancakeRouter.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IDynamicFeeManager.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * Fee entry structure\r\n */\r\nstruct FeeEntry {\r\n    // Unique identifier for the fee entry\r\n    // Generated out of (destination, doLiquify, doSwapForBusd, swapOrLiquifyAmount) to\r\n    // always use the same feeEntryAmounts entry.\r\n    bytes32 id;\r\n    // Sender address OR wildcard address\r\n    address from;\r\n    // Receiver address OR wildcard address\r\n    address to;\r\n    // Fee percentage multiplied by 100000\r\n    uint256 percentage;\r\n    // Fee destination address\r\n    address destination;\r\n    // Indicator, if contracts should be excluded from this fee\r\n    bool excludeContracts;\r\n    // Indicator, if the fee amount should be used to add liquidation on DEX\r\n    bool doLiquify;\r\n    // Indicator, if the fee amount should be swapped to BUSD\r\n    bool doSwapForBusd;\r\n    // Amount used to add liquidation OR swap to BUSD\r\n    uint256 swapOrLiquifyAmount;\r\n    // Timestamp after which the fee won't be applied anymore\r\n    uint256 expiresAt;\r\n}\r\n\r\ninterface IDynamicFeeManager {\r\n    /**\r\n     * Emitted on fee addition\r\n     *\r\n     * @param id bytes32 - \"Unique\" identifier for fee entry\r\n     * @param from address - Sender address OR address(0) for wildcard\r\n     * @param to address - Receiver address OR address(0) for wildcard\r\n     * @param percentage uint256 - Fee percentage to take multiplied by 100000\r\n     * @param destination address - Destination address for the fee\r\n     * @param excludeContracts bool - Indicates, if contracts should be excluded from this fee\r\n     * @param doLiquify bool - Indicates, if the fee amount should be used to add liquidy on DEX\r\n     * @param doSwapForBusd bool - Indicates, if the fee amount should be swapped to BUSD\r\n     * @param swapOrLiquifyAmount uint256 - Amount for liquidify or swap\r\n     * @param expiresAt uint256 - Timestamp after which the fee won't be applied anymore\r\n     */\r\n    event FeeAdded(\r\n        bytes32 indexed id,\r\n        address indexed from,\r\n        address to,\r\n        uint256 percentage,\r\n        address indexed destination,\r\n        bool excludeContracts,\r\n        bool doLiquify,\r\n        bool doSwapForBusd,\r\n        uint256 swapOrLiquifyAmount,\r\n        uint256 expiresAt\r\n    );\r\n\r\n    /**\r\n     * Emitted on fee removal\r\n     *\r\n     * @param id bytes32 - \"Unique\" identifier for fee entry\r\n     * @param index uint256 - Index of removed the fee\r\n     */\r\n    event FeeRemoved(bytes32 indexed id, uint256 index);\r\n\r\n    /**\r\n     * Emitted on fee reflection / distribution\r\n     *\r\n     * @param id bytes32 - \"Unique\" identifier for fee entry\r\n     * @param token address - Token used for fee\r\n     * @param from address - Sender address OR address(0) for wildcard\r\n     * @param to address - Receiver address OR address(0) for wildcard\r\n     * @param destination address - Destination address for the fee\r\n     * @param excludeContracts bool - Indicates, if contracts should be excluded from this fee\r\n     * @param doLiquify bool - Indicates, if the fee amount should be used to add liquidy on DEX\r\n     * @param doSwapForBusd bool - Indicates, if the fee amount should be swapped to BUSD\r\n     * @param swapOrLiquifyAmount uint256 - Amount for liquidify or swap\r\n     * @param expiresAt uint256 - Timestamp after which the fee won't be applied anymore\r\n     */\r\n    event FeeReflected(\r\n        bytes32 indexed id,\r\n        address token,\r\n        address indexed from,\r\n        address to,\r\n        uint256 tFee,\r\n        address indexed destination,\r\n        bool excludeContracts,\r\n        bool doLiquify,\r\n        bool doSwapForBusd,\r\n        uint256 swapOrLiquifyAmount,\r\n        uint256 expiresAt\r\n    );\r\n\r\n    /**\r\n     * Emitted on fee state update\r\n     *\r\n     * @param enabled bool - Indicates if fees are enabled now\r\n     */\r\n    event FeeEnabledUpdated(bool enabled);\r\n\r\n    /**\r\n     * Emitted on pancake router address update\r\n     *\r\n     * @param newAddress address - New pancake router address\r\n     */\r\n    event PancakeRouterUpdated(address newAddress);\r\n\r\n    /**\r\n     * Emitted on BUSD address update\r\n     *\r\n     * @param newAddress address - New BUSD address\r\n     */\r\n    event BusdAddressUpdated(address newAddress);\r\n\r\n    /**\r\n     * Emitted on fee limits (fee percentage and transsaction limit) decrease\r\n     */\r\n    event FeeLimitsDecreased();\r\n\r\n    /**\r\n     * Emitted on volume percentage for swap events updated\r\n     *\r\n     * @param newPercentage uint256 - New volume percentage for swap events\r\n     */\r\n    event PercentageVolumeSwapUpdated(uint256 newPercentage);\r\n\r\n    /**\r\n     * Emitted on volume percentage for liquify events updated\r\n     *\r\n     * @param newPercentage uint256 - New volume percentage for liquify events\r\n     */\r\n    event PercentageVolumeLiquifyUpdated(uint256 newPercentage);\r\n\r\n    /**\r\n     * Emitted on Pancakeswap pair (WSI <-> BUSD) address updated\r\n     *\r\n     * @param newAddress address - New pair address\r\n     */\r\n    event PancakePairBusdUpdated(address newAddress);\r\n\r\n    /**\r\n     * Emitted on Pancakeswap pair (WSI <-> BNB) address updated\r\n     *\r\n     * @param newAddress address - New pair address\r\n     */\r\n    event PancakePairBnbUpdated(address newAddress);\r\n\r\n    /**\r\n     * Emitted on swap and liquify event\r\n     *\r\n     * @param firstHalf uint256 - Half of tokens\r\n     * @param newBalance uint256 - Amount of BNB\r\n     * @param secondHalf uint256 - Half of tokens for BNB swap\r\n     */\r\n    event SwapAndLiquify(\r\n        uint256 firstHalf,\r\n        uint256 newBalance,\r\n        uint256 secondHalf\r\n    );\r\n\r\n    /**\r\n     * Emitted on token swap to BUSD\r\n     *\r\n     * @param token address - Token used for swap\r\n     * @param inputAmount uint256 - Amount used as input for swap\r\n     * @param newBalance uint256 - Amount of received BUSD\r\n     * @param destination address - Destination address for BUSD\r\n     */\r\n    event SwapTokenForBusd(\r\n        address token,\r\n        uint256 inputAmount,\r\n        uint256 newBalance,\r\n        address indexed destination\r\n    );\r\n\r\n    /**\r\n     * Return the fee entry at the given index\r\n     *\r\n     * @param index uint256 - Index of the fee entry\r\n     *\r\n     * @return fee FeeEntry - Fee entry\r\n     */\r\n    function getFee(uint256 index) external view returns (FeeEntry memory fee);\r\n\r\n    /**\r\n     * Adds a fee entry to the list of fees\r\n     *\r\n     * @param from address - Sender address OR wildcard address\r\n     * @param to address - Receiver address OR wildcard address\r\n     * @param percentage uint256 - Fee percentage to take multiplied by 100000\r\n     * @param destination address - Destination address for the fee\r\n     * @param excludeContracts bool - Indicates, if contracts should be excluded from this fee\r\n     * @param doLiquify bool - Indicates, if the fee amount should be used to add liquidy on DEX\r\n     * @param doSwapForBusd bool - Indicates, if the fee amount should be swapped to BUSD\r\n     * @param swapOrLiquifyAmount uint256 - Amount for liquidify or swap\r\n     * @param expiresAt uint256 - Timestamp after which the fee won't be applied anymore\r\n     *\r\n     * @return index uint256 - Index of the newly added fee entry\r\n     */\r\n    function addFee(\r\n        address from,\r\n        address to,\r\n        uint256 percentage,\r\n        address destination,\r\n        bool excludeContracts,\r\n        bool doLiquify,\r\n        bool doSwapForBusd,\r\n        uint256 swapOrLiquifyAmount,\r\n        uint256 expiresAt\r\n    ) external returns (uint256 index);\r\n\r\n    /**\r\n     * Removes the fee entry at the given index\r\n     *\r\n     * @param index uint256 - Index to remove\r\n     */\r\n    function removeFee(uint256 index) external;\r\n\r\n    /**\r\n     * Reflects the fee for a transaction\r\n     *\r\n     * @param from address - Sender address\r\n     * @param to address - Receiver address\r\n     * @param amount uint256 - Transaction amount\r\n     *\r\n     * @return tTotal uint256 - Total transaction amount after fees\r\n     * @return tFees uint256 - Total fee amount\r\n     */\r\n    function reflectFees(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (uint256 tTotal, uint256 tFees);\r\n\r\n    /**\r\n     * Returns the collected amount for swap / liquify fees\r\n     *\r\n     * @param id bytes32 - Fee entry id\r\n     *\r\n     * @return amount uint256 - Collected amount\r\n     */\r\n    function getFeeAmount(bytes32 id) external view returns (uint256 amount);\r\n\r\n    /**\r\n     * Returns true if fees are enabled, false when disabled\r\n     *\r\n     * @param value bool - Indicates if fees are enabled\r\n     */\r\n    function feesEnabled() external view returns (bool value);\r\n\r\n    /**\r\n     * Sets the transaction fee state\r\n     *\r\n     * @param value bool - true to enable fees, false to disable\r\n     */\r\n    function setFeesEnabled(bool value) external;\r\n\r\n    /**\r\n     * Returns the pancake router\r\n     *\r\n     * @return value IPancakeRouter02 - Pancake router\r\n     */\r\n    function pancakeRouter() external view returns (IPancakeRouter02 value);\r\n\r\n    /**\r\n     * Sets the pancake router\r\n     *\r\n     * @param value address - New pancake router address\r\n     */\r\n    function setPancakeRouter(address value) external;\r\n\r\n    /**\r\n     * Returns the BUSD address\r\n     *\r\n     * @return value address - BUSD address\r\n     */\r\n    function busdAddress() external view returns (address value);\r\n\r\n    /**\r\n     * Sets the BUSD address\r\n     *\r\n     * @param value address - BUSD address\r\n     */\r\n    function setBusdAddress(address value) external;\r\n\r\n    /**\r\n     * Returns the fee decrease status\r\n     *\r\n     * @return value bool - True if fees are already decreased, false if not\r\n     */\r\n    function feeDecreased() external view returns (bool value);\r\n\r\n    /**\r\n     * Returns the fee entry percentage limit\r\n     *\r\n     * @return value uint256 - Fee entry percentage limit\r\n     */\r\n    function feePercentageLimit() external view returns (uint256 value);\r\n\r\n    /**\r\n     * Returns the overall transaction fee limit\r\n     *\r\n     * @return value uint256 - Transaction fee limit in percent\r\n     */\r\n    function transactionFeeLimit() external view returns (uint256 value);\r\n\r\n    /**\r\n     * Decreases the fee limits from initial values (used for bot protection), to normal values\r\n     */\r\n    function decreaseFeeLimits() external;\r\n\r\n    /**\r\n     * Returns the current volume percentage for swap events\r\n     *\r\n     * @return value uint256 - Volume percentage for swap events\r\n     */\r\n    function percentageVolumeSwap() external view returns (uint256 value);\r\n\r\n    /**\r\n     * Sets the volume percentage for swap events\r\n     * If set to zero, swapping based on volume will be disabled and fee.swapOrLiquifyAmount is used.\r\n     *\r\n     * @param value uint256 - New volume percentage for swapping\r\n     */\r\n    function setPercentageVolumeSwap(uint256 value) external;\r\n\r\n    /**\r\n     * Returns the current volume percentage for liquify events\r\n     *\r\n     * @return value uint256 - Volume percentage for liquify events\r\n     */\r\n    function percentageVolumeLiquify() external view returns (uint256 value);\r\n\r\n    /**\r\n     * Sets the volume percentage for liquify events\r\n     * If set to zero, adding liquidity based on volume will be disabled and fee.swapOrLiquifyAmount is used.\r\n     *\r\n     * @param value uint256 - New volume percentage for adding liquidity\r\n     */\r\n    function setPercentageVolumeLiquify(uint256 value) external;\r\n\r\n    /**\r\n     * Returns the Pancakeswap pair address (WSI <-> BUSD)\r\n     *\r\n     * @return value address - Pair address\r\n     */\r\n    function pancakePairBusdAddress() external view returns (address value);\r\n\r\n    /**\r\n     * Sets the Pancakeswap pair address (WSI <-> BUSD)\r\n     *\r\n     * @param value address - New pair address\r\n     */\r\n    function setPancakePairBusdAddress(address value) external;\r\n\r\n    /**\r\n     * Returns the Pancakeswap pair address (WSI <-> BNB)\r\n     *\r\n     * @return value address - Pair address\r\n     */\r\n    function pancakePairBnbAddress() external view returns (address value);\r\n\r\n    /**\r\n     * Sets the Pancakeswap pair address (WSI <-> BNB)\r\n     *\r\n     * @param value address - New pair address\r\n     */\r\n    function setPancakePairBnbAddress(address value) external;\r\n\r\n    /**\r\n     * Returns the WeSendit token instance\r\n     *\r\n     * @return value IERC20 - WeSendit Token instance\r\n     */\r\n    function token() external view returns (IERC20 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IWeStakeitToken.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IWeStakeitToken is IERC721 {\r\n    enum StakingTier {\r\n        BLUE_WHALE,\r\n        SHARK,\r\n        SQUID,\r\n        SHRIMP\r\n    }\r\n\r\n    /**\r\n     * Mint a NFT as staking entry\r\n     *\r\n     * @param receiver address - Receiver address\r\n     *\r\n     * @return tokenId uint256 - Minted token id\r\n     */\r\n    function mint(address receiver) external returns (uint256 tokenId);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IStakingPool.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\n/**\r\n * Pool staking entry object structure\r\n */\r\nstruct PoolEntry {\r\n    // Initial amount of staked token\r\n    uint256 amount;\r\n    // Stake lock duration (in days)\r\n    uint256 duration;\r\n    // Amount of pool shares\r\n    uint256 shares;\r\n    // Reward debt used for calculation\r\n    uint256 rewardDebt;\r\n    // Amount of claimed rewards (only if no auto compounding enabled)\r\n    uint256 claimedRewards;\r\n    // Amount of fees collected from rewards\r\n    uint256 collectedFees;\r\n    // Timestamp of last rewards claim (only if no auto compounding enabled)\r\n    uint256 lastClaimedAt;\r\n    // Block timestamp of staking start\r\n    uint256 startedAt;\r\n    // Indicator, if entry was already unstaked\r\n    bool isUnstaked;\r\n    // Indicator, if auto compounding should be used\r\n    bool isAutoCompoundingEnabled;\r\n}\r\n\r\ninterface IStakingPool {\r\n    /**\r\n     * Emitted when entering the staking pool\r\n     *\r\n     * @param tokenId uint256 - Proof token ID\r\n     * @param amount uint256 - Initial amount of staked token\r\n     * @param duration uint256 - Stake lock duration (in days)\r\n     * @param shares uint256 - Amount of pool shares\r\n     * @param isAutoCompoundingEnabled bool - Indicator, if auto compounding should be used\r\n     *\r\n     */\r\n    event Staked(\r\n        uint256 indexed tokenId,\r\n        uint256 indexed amount,\r\n        uint256 indexed duration,\r\n        uint256 shares,\r\n        bool isAutoCompoundingEnabled\r\n    );\r\n\r\n    /**\r\n     * Emitted when leaving the staking pool\r\n     *\r\n     * @param tokenId uint256 - Proof token ID\r\n     * @param amount uint256 - Initial amount of staked token\r\n     * @param duration uint256 - Stake lock duration (in days)\r\n     * @param shares uint256 - Amount of pool shares\r\n     * @param isAutoCompoundingEnabled bool - Indicator, if auto compounding should be used\r\n     *\r\n     */\r\n    event Unstaked(\r\n        uint256 indexed tokenId,\r\n        uint256 indexed amount,\r\n        uint256 indexed duration,\r\n        uint256 shares,\r\n        bool isAutoCompoundingEnabled\r\n    );\r\n\r\n    /**\r\n     * Emitted when entering the staking pool\r\n     *\r\n     * @param tokenId uint256 - Proof token ID\r\n     * @param claimedRewards uint256 - Amount of rewards claimed\r\n     *\r\n     */\r\n    event RewardsClaimed(\r\n        uint256 indexed tokenId,\r\n        uint256 indexed claimedRewards\r\n    );\r\n\r\n    /**\r\n     * Set pool paused state\r\n     *\r\n     * @param value bool - true = Pause pool, false = Unpause pool\r\n     */\r\n    function setPoolPaused(bool value) external;\r\n\r\n    /**\r\n     * Set active allocated pool shares\r\n     * This is only called by off-chain service\r\n     *\r\n     * @param value uint256 - New active allocated pool shares\r\n     */\r\n    function setActiveAllocatedPoolShares(uint256 value) external;\r\n\r\n    /**\r\n     * Calculates the APY in percent for given staking duration (days)\r\n     *\r\n     * @param duration uint256 - Staking duration in days\r\n     *\r\n     * @return value uint256 - APY in percent multiplied by 1e5\r\n     */\r\n    function apy(uint256 duration) external view returns (uint256 value);\r\n\r\n    /**\r\n     * Calculates the APR in percent for given staking duration (days)\r\n     *\r\n     * @param duration uint256 - Staking duration in days\r\n     *\r\n     * @return value uint256 - APR in percent multiplied by 1e5\r\n     */\r\n    function apr(uint256 duration) external view returns (uint256 value);\r\n\r\n    /**\r\n     * Returns pool paused state\r\n     *\r\n     * @return value bool - true = pool paused, false = pool unpaused\r\n     */\r\n    function poolPaused() external view returns (bool value);\r\n\r\n    /**\r\n     * Current pool factor\r\n     *\r\n     * @return value uint256 - Current pool factor\r\n     */\r\n    function currentPoolFactor() external view returns (uint256 value);\r\n\r\n    /**\r\n     * Last block timestamp rewards were calculated at\r\n     *\r\n     * @return value uint256 - Last block timestamp rewards were calculated at\r\n     */\r\n    function lastRewardTimestamp() external view returns (uint256 value);\r\n\r\n    /**\r\n     * Total amount of allocated pool shares\r\n     *\r\n     * @return value uint256 - Amount of allocated pool shares\r\n     */\r\n    function allocatedPoolShares() external view returns (uint256 value);\r\n\r\n    /**\r\n     * Last block timestamp active allocated pool shares were calculated at\r\n     *\r\n     * @return value uint256 - Last block timestamp active allocated pool shares calculated at\r\n     */\r\n    function activeAllocatedPoolShares() external view returns (uint256 value);\r\n\r\n    /**\r\n     * Total amount of active (within staking duration) allocated pool shares\r\n     *\r\n     * @return value uint256 - Amount of active allocated pool shares\r\n     */\r\n    function lastActiveAllocatedPoolSharesTimestamp()\r\n        external\r\n        view\r\n        returns (uint256 value);\r\n\r\n    /**\r\n     * Accured rewards per pool share\r\n     *\r\n     * @return value uint256 - Accured rewards per pool share at lastRewardTimestamp\r\n     */\r\n    function accRewardsPerShare() external view returns (uint256 value);\r\n\r\n    /**\r\n     * Total amount of pool shares available\r\n     *\r\n     * @return value uint256 - Total pool shares available\r\n     */\r\n    function totalPoolShares() external pure returns (uint256 value);\r\n\r\n    /**\r\n     * Total amount of token locked inside the pool\r\n     *\r\n     * @return value uint256 - Total amount of token locked\r\n     */\r\n    function totalTokenLocked() external view returns (uint256 value);\r\n\r\n    /**\r\n     * Min. staking duration in days\r\n     *\r\n     * @return value uint256 - Min. staking duration\r\n     */\r\n    function minDuration() external pure returns (uint256 value);\r\n\r\n    /**\r\n     * Max. staking duration in days\r\n     *\r\n     * @return value uint256 - Max. staking duration\r\n     */\r\n    function maxDuration() external pure returns (uint256 value);\r\n\r\n    /**\r\n     * Compounding interval in days\r\n     * Ex. 730 ~= two times per day\r\n     *\r\n     * @return value uint256 - Compounding interval\r\n     */\r\n    function compoundInterval() external pure returns (uint256 value);\r\n\r\n    /**\r\n     * Token used for staking\r\n     *\r\n     * @return value IERC20 - Token \"instance\" used for staking\r\n     */\r\n    function stakeToken() external view returns (IERC20 value);\r\n\r\n    /**\r\n     * Token used for staking rewards\r\n     *\r\n     * @return value IWeStakeitToken - Token \"instance\" used for rewards\r\n     */\r\n    function proofToken() external view returns (IWeStakeitToken value);\r\n\r\n    /**\r\n     * Staking pool balance without locked token and allocated rewards\r\n     *\r\n     * @return value uint256 - Pool balance\r\n     */\r\n    function poolBalance() external view returns (uint256 value);\r\n\r\n    /**\r\n     * Staking pool balance, calculated with pool factor, without locked\r\n     * token and allocated rewards\r\n     *\r\n     * @param poolFactor_ uint256 - Pool factor\r\n     *\r\n     * @return value uint256 - Pool balance\r\n     */\r\n    function poolBalance(\r\n        uint256 poolFactor_\r\n    ) external view returns (uint256 value);\r\n\r\n    /**\r\n     * Returns a single staking pool entry\r\n     *\r\n     * @param tokenId uint256 - Staking token ID\r\n     *\r\n     * @return value PoolEntry - Staking pool entry\r\n     */\r\n    function poolEntry(\r\n        uint256 tokenId\r\n    ) external view returns (PoolEntry memory value);\r\n\r\n    /**\r\n     * Calculates the APY in percent for given staking duration\r\n     * and pool factor.\r\n     *\r\n     * @param duration uint256 - Staking duration in days\r\n     * @param factor uint256 - Pool factor\r\n     *\r\n     * @return value uint256 - APY in percent multiplied by 1e5\r\n     */\r\n    function apy(\r\n        uint256 duration,\r\n        uint256 factor\r\n    ) external view returns (uint256 value);\r\n\r\n    /**\r\n     * Calculates the ARR in percent for given staking duration\r\n     * and pool factor.\r\n     *\r\n     * @param duration uint256 - Staking duration in days\r\n     * @param factor uint256 - Pool factor\r\n     *\r\n     * @return value uint256 - APR in percent multiplied by 1e5\r\n     */\r\n    function apr(\r\n        uint256 duration,\r\n        uint256 factor\r\n    ) external view returns (uint256 value);\r\n\r\n    /**\r\n     * Calculates the pool factor\r\n     *\r\n     * @return value uint256 - Pool factor in wei\r\n     */\r\n    function poolFactor() external view returns (uint256 value);\r\n\r\n    /**\r\n     * Calculates the pool factor for given pool balance\r\n     *\r\n     * @param balance uint256 - Staking pool balance\r\n     *\r\n     * @return value uint256 - Pool factor in wei\r\n     */\r\n    function poolFactor(uint256 balance) external view returns (uint256 value);\r\n\r\n    /**\r\n     * Return accRewardsPerShare at best matching snapshot\r\n     *\r\n     * @param snapshotId uint256 - Snapshot ID / block timestamp to look for\r\n     *\r\n     * @return snapshotId_ uint256 - Best matching snapshot ID\r\n     * @return snapshotValue uint256 - Value at the snapshot or fallback value, if no snapshot was found\r\n     */\r\n    function accRewardsPerShareAt(\r\n        uint256 snapshotId\r\n    ) external view returns (uint256 snapshotId_, uint256 snapshotValue);\r\n\r\n    /**\r\n     * Return lastRewardTimestamp at best matching snapshot\r\n     *\r\n     * @param snapshotId uint256 - Snapshot ID / block timestamp to look for\r\n     *\r\n     * @return snapshotId_ uint256 - Best matching snapshot ID\r\n     * @return snapshotValue uint256 - Value at the snapshot or fallback value, if no snapshot was found\r\n     */\r\n    function lastRewardTimestampAt(\r\n        uint256 snapshotId\r\n    ) external view returns (uint256 snapshotId_, uint256 snapshotValue);\r\n\r\n    /**\r\n     * Max. amount a user is able to stake currently\r\n     *\r\n     * @return value uint256 - Max. staking amount\r\n     */\r\n    function maxStakingAmount() external view returns (uint256 value);\r\n\r\n    /**\r\n     * Stakes token with the given parameters\r\n     *\r\n     * @param amount uint256 - Amount of token to stake\r\n     * @param duration uint256 - Staking duration in days\r\n     * @param enableAutoCompounding bool - Indicator, if auto compounding should be used\r\n     *\r\n     * @return tokenId uint256 - Proof token ID\r\n     */\r\n    function stake(\r\n        uint256 amount,\r\n        uint256 duration,\r\n        bool enableAutoCompounding\r\n    ) external returns (uint256 tokenId);\r\n\r\n    /**\r\n     * Unstakes staking entry\r\n     *\r\n     * @param tokenId uint256 - Proof token ID\r\n     */\r\n    function unstake(uint256 tokenId) external;\r\n\r\n    /**\r\n     * Claim rewards for given staking entry\r\n     *\r\n     * @param tokenId uint256 - Proof token ID\r\n     */\r\n    function claimRewards(uint256 tokenId) external;\r\n\r\n    /**\r\n     * Return pending / claimable rewards for staking entry\r\n     *\r\n     * @param tokenId uint256 - Proof token ID\r\n     */\r\n    function pendingRewards(\r\n        uint256 tokenId\r\n    ) external view returns (uint256 rewards);\r\n\r\n    /**\r\n     * Updates the pool calculations for rewards, etc.\r\n     */\r\n    function updatePool() external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/IAccessControl.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/IAccessControlEnumerable.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlEnumerable is IAccessControl {\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/Math.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1);\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10**64) {\r\n                value /= 10**64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10**32) {\r\n                value /= 10**32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10**16) {\r\n                value /= 10**16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10**8) {\r\n                value /= 10**8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10**4) {\r\n                value /= 10**4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10**2) {\r\n                value /= 10**2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10**1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/AccessControl.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\r\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\r\n     *\r\n     * Format of the revert message is described in {_checkRole}.\r\n     *\r\n     * _Available since v4.6._\r\n     */\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(account),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/structs/EnumerableSet.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\r\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\r\n * unusable.\r\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\r\n * array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        bytes32[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/AccessControlEnumerable.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\r\n */\r\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\r\n        return _roleMembers[role].at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\r\n        return _roleMembers[role].length();\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {_grantRole} to track enumerable memberships\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual override {\r\n        super._grantRole(role, account);\r\n        _roleMembers[role].add(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {_revokeRole} to track enumerable memberships\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual override {\r\n        super._revokeRole(role, account);\r\n        _roleMembers[role].remove(account);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/BaseDynamicFeeManager.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Base Dynamic Fee Manager\r\n */\r\nabstract contract BaseDynamicFeeManager is\r\n    IDynamicFeeManager,\r\n    EmergencyGuard,\r\n    AccessControlEnumerable,\r\n    Ownable,\r\n    ReentrancyGuard\r\n{\r\n    // Role allowed to do admin operations like adding to fee whitelist, withdraw, etc.\r\n    bytes32 public constant ADMIN = keccak256(\"ADMIN\");\r\n\r\n    // Role allowed to bypass fees\r\n    bytes32 public constant FEE_WHITELIST = keccak256(\"FEE_WHITELIST\");\r\n\r\n    // Role allowed to token be sent to without fee\r\n    bytes32 public constant RECEIVER_FEE_WHITELIST =\r\n        keccak256(\"RECEIVER_FEE_WHITELIST\");\r\n\r\n    // Role allowed to bypass swap and liquify\r\n    bytes32 public constant BYPASS_SWAP_AND_LIQUIFY =\r\n        keccak256(\"BYPASS_SWAP_AND_LIQUIFY\");\r\n\r\n    // Role allowed to bypass wildcard fees\r\n    bytes32 public constant EXCLUDE_WILDCARD_FEE =\r\n        keccak256(\"EXCLUDE_WILDCARD_FEE\");\r\n\r\n    // Role allowed to call reflectFees\r\n    bytes32 public constant CALL_REFLECT_FEES = keccak256(\"CALL_REFLECT_FEES\");\r\n\r\n    // Fee percentage limit\r\n    uint256 public constant FEE_PERCENTAGE_LIMIT = 10_000; // 10%\r\n\r\n    // Fee percentage limit on creation\r\n    uint256 public constant INITIAL_FEE_PERCENTAGE_LIMIT = 25_000; // 25%\r\n\r\n    // Transaction fee limit\r\n    uint256 public constant TRANSACTION_FEE_LIMIT = 10_000; // 10%\r\n\r\n    // Transaction fee limit on creation\r\n    uint256 public constant INITIAL_TRANSACTION_FEE_LIMIT = 25_000; // 25%\r\n\r\n    // Max. amount for fee entries\r\n    uint256 public constant MAX_FEE_AMOUNT = 30;\r\n\r\n    // Min. amount for swap / liquify\r\n    uint256 public constant MIN_SWAP_OR_LIQUIFY_AMOUNT = 1 ether;\r\n\r\n    // Fee divider\r\n    uint256 internal constant FEE_DIVIDER = 100_000;\r\n\r\n    // Wildcard address for fees\r\n    address internal constant WHITELIST_ADDRESS =\r\n        0x000000000000000000000000000000000000dEaD;\r\n\r\n    // List of all currently added fees\r\n    FeeEntry[] internal feeEntries;\r\n\r\n    // Mapping id to current swap or liquify amounts\r\n    mapping(bytes32 => uint256) internal feeEntryAmounts;\r\n\r\n    // Fees enabled state\r\n    bool internal feesEnabled_ = false;\r\n\r\n    // Pancake Router address\r\n    IPancakeRouter02 private _pancakeRouter =\r\n        IPancakeRouter02(address(0x10ED43C718714eb63d5aA57B78B54704E256024E));\r\n\r\n    // BUSD address\r\n    address private _busdAddress;\r\n\r\n    // Fee Decrease status\r\n    bool private _feeDecreased = false;\r\n\r\n    // Volume percentage for swap events\r\n    uint256 private _percentageVolumeSwap = 0;\r\n\r\n    // Volume percentage for liquify events\r\n    uint256 private _percentageVolumeLiquify = 0;\r\n\r\n    // Pancakeswap Pair (WSI <-> BUSD) address\r\n    address private _pancakePairBusdAddress;\r\n\r\n    // Pancakeswap Pair (WSI <-> BNB) address\r\n    address private _pancakePairBnbAddress;\r\n\r\n    // WeSendit token\r\n    IERC20 private _token;\r\n\r\n    // WeStakeit token\r\n    IERC721Enumerable private _weStakeitToken;\r\n\r\n    // Staking pool\r\n    IStakingPool private _stakingPool;\r\n\r\n    constructor(address wesenditToken) {\r\n        // Add creator to admin role\r\n        _setupRole(ADMIN, _msgSender());\r\n\r\n        // Set role admin for roles\r\n        _setRoleAdmin(ADMIN, ADMIN);\r\n        _setRoleAdmin(FEE_WHITELIST, ADMIN);\r\n        _setRoleAdmin(RECEIVER_FEE_WHITELIST, ADMIN);\r\n        _setRoleAdmin(BYPASS_SWAP_AND_LIQUIFY, ADMIN);\r\n        _setRoleAdmin(EXCLUDE_WILDCARD_FEE, ADMIN);\r\n        _setRoleAdmin(CALL_REFLECT_FEES, ADMIN);\r\n\r\n        // Create WeSendit token instance\r\n        _token = IERC20(wesenditToken);\r\n    }\r\n\r\n    /**\r\n     * Getter & Setter\r\n     */\r\n    function getFee(\r\n        uint256 index\r\n    ) external view override returns (FeeEntry memory fee) {\r\n        return feeEntries[index];\r\n    }\r\n\r\n    function getFeeAmount(\r\n        bytes32 id\r\n    ) external view override returns (uint256 amount) {\r\n        return feeEntryAmounts[id];\r\n    }\r\n\r\n    function setFeesEnabled(bool value) external override onlyRole(ADMIN) {\r\n        feesEnabled_ = value;\r\n\r\n        emit FeeEnabledUpdated(value);\r\n    }\r\n\r\n    function setPancakeRouter(address value) external override onlyRole(ADMIN) {\r\n        require(\r\n            value != address(0),\r\n            \"DynamicFeeManager: Cannot set Pancake Router to zero address\"\r\n        );\r\n\r\n        _pancakeRouter = IPancakeRouter02(value);\r\n        emit PancakeRouterUpdated(value);\r\n    }\r\n\r\n    function setBusdAddress(address value) external override onlyRole(ADMIN) {\r\n        require(\r\n            value != address(0),\r\n            \"DynamicFeeManager: Cannot set BUSD to zero address\"\r\n        );\r\n\r\n        _busdAddress = value;\r\n        emit BusdAddressUpdated(value);\r\n    }\r\n\r\n    function setWeStakeitToken(address value) external onlyRole(ADMIN) {\r\n        // TODO: add override\r\n        _weStakeitToken = IERC721Enumerable(value);\r\n        // TODO: event\r\n    }\r\n\r\n    function setStakingPool(address value) external onlyRole(ADMIN) {\r\n        // TODO: add override\r\n        _stakingPool = IStakingPool(value);\r\n        // TODO: event\r\n    }\r\n\r\n    function feeDecreased() external view override returns (bool value) {\r\n        return _feeDecreased;\r\n    }\r\n\r\n    function decreaseFeeLimits() external override onlyRole(ADMIN) {\r\n        require(\r\n            !_feeDecreased,\r\n            \"DynamicFeeManager: Fee limits are already decreased\"\r\n        );\r\n\r\n        _feeDecreased = true;\r\n\r\n        emit FeeLimitsDecreased();\r\n    }\r\n\r\n    function emergencyWithdraw(\r\n        uint256 amount\r\n    ) external override onlyRole(ADMIN) {\r\n        super._emergencyWithdraw(amount);\r\n    }\r\n\r\n    function emergencyWithdrawToken(\r\n        address tokenToWithdraw,\r\n        uint256 amount\r\n    ) external override onlyRole(ADMIN) {\r\n        super._emergencyWithdrawToken(tokenToWithdraw, amount);\r\n    }\r\n\r\n    function setPercentageVolumeSwap(\r\n        uint256 value\r\n    ) external override onlyRole(ADMIN) {\r\n        require(\r\n            value <= 100,\r\n            \"DynamicFeeManager: Invalid percentage volume swap value\"\r\n        );\r\n\r\n        _percentageVolumeSwap = value;\r\n\r\n        emit PercentageVolumeSwapUpdated(value);\r\n    }\r\n\r\n    function setPercentageVolumeLiquify(\r\n        uint256 value\r\n    ) external override onlyRole(ADMIN) {\r\n        require(\r\n            value <= 100,\r\n            \"DynamicFeeManager: Invalid percentage volume liquify value\"\r\n        );\r\n\r\n        _percentageVolumeLiquify = value;\r\n\r\n        emit PercentageVolumeLiquifyUpdated(value);\r\n    }\r\n\r\n    function setPancakePairBusdAddress(\r\n        address value\r\n    ) external override onlyRole(ADMIN) {\r\n        require(\r\n            value != address(0),\r\n            \"DynamicFeeManager: Cannot set BUSD pair to zero address\"\r\n        );\r\n\r\n        _pancakePairBusdAddress = value;\r\n\r\n        emit PancakePairBusdUpdated(value);\r\n    }\r\n\r\n    function setPancakePairBnbAddress(\r\n        address value\r\n    ) external override onlyRole(ADMIN) {\r\n        require(\r\n            value != address(0),\r\n            \"DynamicFeeManager: Cannot set BNB pair to zero address\"\r\n        );\r\n\r\n        _pancakePairBnbAddress = value;\r\n\r\n        emit PancakePairBnbUpdated(value);\r\n    }\r\n\r\n    function feesEnabled() public view override returns (bool) {\r\n        return feesEnabled_;\r\n    }\r\n\r\n    function pancakeRouter()\r\n        public\r\n        view\r\n        override\r\n        returns (IPancakeRouter02 value)\r\n    {\r\n        return _pancakeRouter;\r\n    }\r\n\r\n    function busdAddress() public view override returns (address value) {\r\n        return _busdAddress;\r\n    }\r\n\r\n    function feePercentageLimit() public view override returns (uint256 value) {\r\n        return\r\n            _feeDecreased ? FEE_PERCENTAGE_LIMIT : INITIAL_FEE_PERCENTAGE_LIMIT;\r\n    }\r\n\r\n    function transactionFeeLimit()\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 value)\r\n    {\r\n        return\r\n            _feeDecreased\r\n                ? TRANSACTION_FEE_LIMIT\r\n                : INITIAL_TRANSACTION_FEE_LIMIT;\r\n    }\r\n\r\n    function percentageVolumeSwap()\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 value)\r\n    {\r\n        return _percentageVolumeSwap;\r\n    }\r\n\r\n    function percentageVolumeLiquify()\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 value)\r\n    {\r\n        return _percentageVolumeLiquify;\r\n    }\r\n\r\n    function pancakePairBusdAddress()\r\n        public\r\n        view\r\n        override\r\n        returns (address value)\r\n    {\r\n        return _pancakePairBusdAddress;\r\n    }\r\n\r\n    function pancakePairBnbAddress()\r\n        public\r\n        view\r\n        override\r\n        returns (address value)\r\n    {\r\n        return _pancakePairBnbAddress;\r\n    }\r\n\r\n    function token() public view override returns (IERC20 value) {\r\n        return _token;\r\n    }\r\n\r\n    function weStakeitToken() public view returns (IERC721Enumerable value) {\r\n        // TODO: add override\r\n        return _weStakeitToken;\r\n    }\r\n\r\n    function stakingPool() public view returns (IStakingPool value) {\r\n        // TODO: add override\r\n        return _stakingPool;\r\n    }\r\n\r\n    /**\r\n     * Swaps half of the token amount and add liquidity on Pancakeswap\r\n     *\r\n     * @param amount uint256 - Amount to use\r\n     * @param destination address - Destination address for the LP tokens\r\n     *\r\n     * @return tokenSwapped uint256 - Amount of token which have been swapped\r\n     */\r\n    function _swapAndLiquify(\r\n        uint256 amount,\r\n        address destination\r\n    ) internal nonReentrant returns (uint256 tokenSwapped) {\r\n        // split the contract balance into halves\r\n        uint256 half = amount / 2;\r\n        uint256 otherHalf = amount - half;\r\n\r\n        // capture the contract's current BNB balance.\r\n        // this is so that we can capture exactly the amount of BNB that the\r\n        // swap creates, and not make the liquidity event include any BNB that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for BNB\r\n        _swapTokensForBnb(half, address(this));\r\n\r\n        // how much BNB did we just swap into?\r\n        uint256 newBalance = address(this).balance - initialBalance;\r\n\r\n        // add liquidity to uniswap\r\n        uint256 tokenLiquified = _addLiquidity(\r\n            otherHalf,\r\n            newBalance,\r\n            destination\r\n        );\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n\r\n        return half + tokenLiquified;\r\n    }\r\n\r\n    /**\r\n     * Swaps tokens against BNB on Pancakeswap\r\n     *\r\n     * @param amount uint256 - Amount to use\r\n     * @param destination address - Destination address for BNB\r\n     */\r\n    function _swapTokensForBnb(uint256 amount, address destination) internal {\r\n        // generate the uniswap pair path of token -> wbnb\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(token());\r\n        path[1] = pancakeRouter().WETH();\r\n\r\n        require(\r\n            token().approve(address(pancakeRouter()), amount),\r\n            \"DynamicFeeManager: Failed to approve token for swap to BNB\"\r\n        );\r\n\r\n        // make the swap\r\n        pancakeRouter().swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            destination,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Swaps tokens against BUSD on Pancakeswap\r\n     *\r\n     * @param amount uint256 - Amount to use\r\n     * @param destination address - Destination address for BUSD\r\n     */\r\n    function _swapTokensForBusd(\r\n        uint256 amount,\r\n        address destination\r\n    ) internal nonReentrant {\r\n        // generate the uniswap pair path of token -> wbnb\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(token());\r\n        path[1] = busdAddress();\r\n\r\n        require(\r\n            token().approve(address(pancakeRouter()), amount),\r\n            \"DynamicFeeManager: Failed to approve token for swap to BUSD\"\r\n        );\r\n\r\n        // capture the contract's current balances\r\n        uint256 initialBalance = IERC20(busdAddress()).balanceOf(destination);\r\n\r\n        // make the swap\r\n        pancakeRouter().swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0, // accept any amount of BUSD\r\n            path,\r\n            destination,\r\n            block.timestamp\r\n        );\r\n\r\n        // how much BUSD did we just swap into?\r\n        uint256 newBalance = IERC20(busdAddress()).balanceOf(destination) -\r\n            initialBalance;\r\n\r\n        emit SwapTokenForBusd(\r\n            address(token()),\r\n            amount,\r\n            newBalance,\r\n            destination\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates liquidity on Pancakeswap\r\n     *\r\n     * @param tokenAmount uint256 - Amount of token to use\r\n     * @param bnbAmount uint256 - Amount of BNB to use\r\n     * @param destination address - Destination address for the LP tokens\r\n     *\r\n     * @return tokenSwapped uint256 - Amount of token which have been swapped\r\n     */\r\n    function _addLiquidity(\r\n        uint256 tokenAmount,\r\n        uint256 bnbAmount,\r\n        address destination\r\n    ) internal returns (uint256 tokenSwapped) {\r\n        // approve token transfer to cover all possible scenarios\r\n        require(\r\n            token().approve(address(pancakeRouter()), tokenAmount),\r\n            \"DynamicFeeManager: Failed to approve token for adding liquidity\"\r\n        );\r\n\r\n        // add the liquidity\r\n        (tokenSwapped, , ) = pancakeRouter().addLiquidityETH{value: bnbAmount}(\r\n            address(token()),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            destination,\r\n            block.timestamp\r\n        );\r\n\r\n        return tokenSwapped;\r\n    }\r\n\r\n    /**\r\n     * Returns the amount used for swap / liquify based on volume percentage for swap / liquify\r\n     *\r\n     * @param feeId bytes32 - Fee entry id\r\n     * @param swapOrLiquifyAmount uint256 - Fee entry swap or liquify amount\r\n     * @param percentageVolume uint256 - Volume percentage for swap / liquify\r\n     * @param pancakePairAddress address - Pancakeswap pair address to use for volume\r\n     *\r\n     * @return amount uint256 - Amount used for swap / liquify\r\n     */\r\n    function _getSwapOrLiquifyAmount(\r\n        bytes32 feeId,\r\n        uint256 swapOrLiquifyAmount,\r\n        uint256 percentageVolume,\r\n        address pancakePairAddress\r\n    ) internal view returns (uint256 amount) {\r\n        // If no percentage and fixed amount is set, use balance\r\n        if (percentageVolume == 0 && swapOrLiquifyAmount == 0) {\r\n            return feeEntryAmounts[feeId];\r\n        }\r\n\r\n        if (pancakePairAddress == address(0) || percentageVolume == 0) {\r\n            return swapOrLiquifyAmount;\r\n        }\r\n\r\n        // Get pancakeswap pair token balance to identify, how many\r\n        // token are currently on the market\r\n        uint256 pancakePairTokenBalance = token().balanceOf(pancakePairAddress);\r\n\r\n        // Calculate percentual amount of volume\r\n        uint256 percentualAmount = (pancakePairTokenBalance *\r\n            percentageVolume) / 100;\r\n\r\n        // If swap or liquify amount is zero, and percentual amount is\r\n        // higher than collected amount, return collected amount, otherwise\r\n        // return percentual amount\r\n        if (swapOrLiquifyAmount == 0) {\r\n            return\r\n                percentualAmount > feeEntryAmounts[feeId]\r\n                    ? feeEntryAmounts[feeId]\r\n                    : percentualAmount;\r\n        }\r\n\r\n        // Do not exceed swap or liquify amount from fee entry\r\n        if (percentualAmount >= swapOrLiquifyAmount) {\r\n            return swapOrLiquifyAmount;\r\n        }\r\n\r\n        return percentualAmount;\r\n    }\r\n\r\n    /**\r\n     * Checks if the given address is a contract or not\r\n     *\r\n     * @param addr address - Address to check\r\n     *\r\n     * @return isContract bool - Indicator, if checked address is a contract\r\n     */\r\n    function _isContract(address addr) internal view returns (bool isContract) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n\r\n// File hardhat/console.sol@v2.11.2\r\n\r\n\r\npragma solidity >= 0.4.22 <0.9.0;\r\n\r\nlibrary console {\r\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\r\n\r\n\tfunction _sendLogPayload(bytes memory payload) private view {\r\n\t\tuint256 payloadLength = payload.length;\r\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\r\n\t\tassembly {\r\n\t\t\tlet payloadStart := add(payload, 32)\r\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction log() internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\r\n\t}\r\n\r\n\tfunction logInt(int256 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\r\n\t}\r\n\r\n\tfunction logUint(uint256 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\r\n\t}\r\n\r\n\tfunction logString(string memory p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n\t}\r\n\r\n\tfunction logBool(bool p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n\t}\r\n\r\n\tfunction logAddress(address p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes(bytes memory p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes1(bytes1 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes2(bytes2 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes3(bytes3 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes4(bytes4 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes5(bytes5 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes6(bytes6 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes7(bytes7 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes8(bytes8 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes9(bytes9 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes10(bytes10 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes11(bytes11 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes12(bytes12 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes13(bytes13 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes14(bytes14 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes15(bytes15 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes16(bytes16 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes17(bytes17 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes18(bytes18 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes19(bytes19 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes20(bytes20 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes21(bytes21 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes22(bytes22 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes23(bytes23 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes24(bytes24 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes25(bytes25 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes26(bytes26 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes27(bytes27 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes28(bytes28 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes29(bytes29 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes30(bytes30 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes31(bytes31 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes32(bytes32 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\r\n\t}\r\n\r\n\tfunction log(uint256 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\r\n\t}\r\n\r\n\tfunction log(string memory p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n\t}\r\n\r\n\tfunction log(bool p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n\t}\r\n\r\n\tfunction log(address p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint256 p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/StorageSlot.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\r\n */\r\nlibrary StorageSlot {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Arrays.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Arrays.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to array types.\r\n */\r\nlibrary Arrays {\r\n    using StorageSlot for bytes32;\r\n\r\n    /**\r\n     * @dev Searches a sorted `array` and returns the first index that contains\r\n     * a value greater or equal to `element`. If no such index exists (i.e. all\r\n     * values in the array are strictly less than `element`), the array length is\r\n     * returned. Time complexity O(log n).\r\n     *\r\n     * `array` is expected to be sorted in ascending order, and to contain no\r\n     * repeated elements.\r\n     */\r\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\r\n        if (array.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 low = 0;\r\n        uint256 high = array.length;\r\n\r\n        while (low < high) {\r\n            uint256 mid = Math.average(low, high);\r\n\r\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\r\n            // because Math.average rounds down (it does integer division with truncation).\r\n            if (unsafeAccess(array, mid).value > element) {\r\n                high = mid;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\r\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\r\n            return low - 1;\r\n        } else {\r\n            return low;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\r\n     *\r\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\r\n     */\r\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\r\n        bytes32 slot;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0, arr.slot)\r\n            slot := add(keccak256(0, 0x20), pos)\r\n        }\r\n        return slot.getAddressSlot();\r\n    }\r\n\r\n    /**\r\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\r\n     *\r\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\r\n     */\r\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\r\n        bytes32 slot;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0, arr.slot)\r\n            slot := add(keccak256(0, 0x20), pos)\r\n        }\r\n        return slot.getBytes32Slot();\r\n    }\r\n\r\n    /**\r\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\r\n     *\r\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\r\n     */\r\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\r\n        bytes32 slot;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0, arr.slot)\r\n            slot := add(keccak256(0, 0x20), pos)\r\n        }\r\n        return slot.getUint256Slot();\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Counters.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/StakingPoolSnapshot.sol\r\n\r\n\r\n// Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/ERC20Snapshot.sol\r\npragma solidity 0.8.17;\r\n\r\n\r\n/**\r\n * Snapshot object structure\r\n */\r\nstruct Snapshots {\r\n    // Snapshot ids\r\n    uint256[] ids;\r\n    // Snapshot values\r\n    uint256[] values;\r\n}\r\n\r\nabstract contract StakingPoolSnapshot {\r\n    using Arrays for uint256[];\r\n    using Counters for Counters.Counter;\r\n\r\n    // Snapshots for _accRewardsPerShare\r\n    Snapshots internal _accRewardsPerShareSnapshots;\r\n\r\n    // Snapshots for _lastRewardTimestamp\r\n    Snapshots internal _lastRewardTimestampSnapshots;\r\n\r\n    // Current snapshot id\r\n    Counters.Counter private _currentSnapshotId;\r\n\r\n    /**\r\n     * Returns accRewardsPerShare at best matching snapshot\r\n     *\r\n     * @param snapshotId uint256 - Snapshot ID / block timestamp to look for\r\n     * @param currentValue uint256 - Current value used as fallback\r\n     *\r\n     * @return snapshotId_ uint256 - Best matching snapshot ID\r\n     * @return snapshotValue uint256 - Value at the snapshot or fallback value, if no snapshot was found\r\n     */\r\n    function _accRewardsPerShareAt(\r\n        uint256 snapshotId,\r\n        uint256 currentValue\r\n    ) internal view returns (uint256 snapshotId_, uint256 snapshotValue) {\r\n        (bool snapshotted, uint256 id, uint256 value) = _valueAt(\r\n            snapshotId,\r\n            _accRewardsPerShareSnapshots\r\n        );\r\n\r\n        return (id, snapshotted ? value : currentValue);\r\n    }\r\n\r\n    /**\r\n     * Returns lastRewardTimestamp at best matching snapshot\r\n     *\r\n     * @param snapshotId uint256 - Snapshot ID / block timestamp to look for\r\n     * @param currentValue uint256 - Current value used as fallback\r\n     *\r\n     * @return snapshotId_ uint256 - Best matching snapshot ID\r\n     * @return snapshotValue uint256 - Value at the snapshot or fallback value, if no snapshot was found\r\n     */\r\n    function _lastRewardTimestampAt(\r\n        uint256 snapshotId,\r\n        uint256 currentValue\r\n    ) internal view returns (uint256 snapshotId_, uint256 snapshotValue) {\r\n        (bool snapshotted, uint256 id, uint256 value) = _valueAt(\r\n            snapshotId,\r\n            _lastRewardTimestampSnapshots\r\n        );\r\n\r\n        return (id, snapshotted ? value : currentValue);\r\n    }\r\n\r\n    /**\r\n     * Triggers a snapshot for current snapshot ID\r\n     */\r\n    function _snapshot() internal returns (uint256) {\r\n        _currentSnapshotId.increment();\r\n\r\n        uint256 currentId = _getCurrentSnapshotId();\r\n        return currentId;\r\n    }\r\n\r\n    /**\r\n     * Updates the current \"in-work\" snapshot\r\n     *\r\n     * @param snapshots Snapshots - Snapshots struct / object to update\r\n     * @param currentValue uint256 - New value\r\n     */\r\n    function _updateSnapshot(\r\n        Snapshots storage snapshots,\r\n        uint256 currentValue\r\n    ) internal {\r\n        uint256 currentId = _getCurrentSnapshotId();\r\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\r\n            snapshots.ids.push(currentId);\r\n            snapshots.values.push(currentValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Current snapshot ID\r\n     */\r\n    function _getCurrentSnapshotId() private view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * Last snapshot ID for given array\r\n     *\r\n     * @param ids uint256[] - List of snapshot IDs\r\n     */\r\n    function _lastSnapshotId(\r\n        uint256[] storage ids\r\n    ) private view returns (uint256) {\r\n        if (ids.length == 0) {\r\n            return 0;\r\n        } else {\r\n            return ids[ids.length - 1];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the value at best matching snapshot\r\n     *\r\n     * @param snapshotId uint256 - Snapshot ID / block timestamp to look for\r\n     * @param snapshots Snapshots - Snapshots struct / object\r\n     *\r\n     * @return snapshotFound bool - Indicator, if snapshot was available for the given ID\r\n     * @return snapshotId_ uint256 - Best matching snapshot ID\r\n     * @return snapshotValue uint256 - Value at the snapshot or fallback value, if no snapshot was found\r\n     */\r\n    function _valueAt(\r\n        uint256 snapshotId,\r\n        Snapshots storage snapshots\r\n    )\r\n        private\r\n        view\r\n        returns (bool snapshotFound, uint256 snapshotId_, uint256 snapshotValue)\r\n    {\r\n        require(snapshotId > 0, \"Staking Pool Snapshot: id is 0\");\r\n        require(\r\n            snapshotId <= _getCurrentSnapshotId(),\r\n            \"Staking Pool Snapshot: nonexistent id\"\r\n        );\r\n\r\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\r\n\r\n        if (index == snapshots.ids.length) {\r\n            return (false, 0, 0);\r\n        } else {\r\n            return (true, snapshots.ids[index], snapshots.values[index]);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/Trigonometry.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @notice Solidity library offering basic trigonometry functions where inputs and outputs are\r\n * integers. Inputs are specified in radians scaled by 1e18, and similarly outputs are scaled by 1e18.\r\n *\r\n * This implementation is based off the Solidity trigonometry library written by Lefteris Karapetsas\r\n * which can be found here: https://github.com/Sikorkaio/sikorka/blob/e75c91925c914beaedf4841c0336a806f2b5f66d/contracts/trigonometry.sol\r\n *\r\n * Compared to Lefteris' implementation, this version makes the following changes:\r\n *   - Uses a 32 bits instead of 16 bits for improved accuracy\r\n *   - Updated for Solidity 0.8.x\r\n *   - Various gas optimizations\r\n *   - Change inputs/outputs to standard trig format (scaled by 1e18) instead of requiring the\r\n *     integer format used by the algorithm\r\n *\r\n * Lefertis' implementation is based off Dave Dribin's trigint C library\r\n *     http://www.dribin.org/dave/trigint/\r\n *\r\n * Which in turn is based from a now deleted article which can be found in the Wayback Machine:\r\n *     http://web.archive.org/web/20120301144605/http://www.dattalo.com/technical/software/pic/picsine.html\r\n */\r\nlibrary Trigonometry {\r\n    // Table index into the trigonometric table\r\n    uint256 constant INDEX_WIDTH = 8;\r\n    // Interpolation between successive entries in the table\r\n    uint256 constant INTERP_WIDTH = 16;\r\n    uint256 constant INDEX_OFFSET = 28 - INDEX_WIDTH;\r\n    uint256 constant INTERP_OFFSET = INDEX_OFFSET - INTERP_WIDTH;\r\n    uint32 constant ANGLES_IN_CYCLE = 1073741824;\r\n    uint32 constant QUADRANT_HIGH_MASK = 536870912;\r\n    uint32 constant QUADRANT_LOW_MASK = 268435456;\r\n    uint256 constant SINE_TABLE_SIZE = 256;\r\n\r\n    // Pi as an 18 decimal value, which is plenty of accuracy: \"For JPL's highest accuracy calculations, which are for\r\n    // interplanetary navigation, we use 3.141592653589793: https://www.jpl.nasa.gov/edu/news/2016/3/16/how-many-decimals-of-pi-do-we-really-need/\r\n    uint256 constant PI = 3141592653589793238;\r\n    uint256 constant TWO_PI = 2 * PI;\r\n    uint256 constant PI_OVER_TWO = PI / 2;\r\n\r\n    // The constant sine lookup table was generated by generate_trigonometry.py. We must use a constant\r\n    // bytes array because constant arrays are not supported in Solidity. Each entry in the lookup\r\n    // table is 4 bytes. Since we're using 32-bit parameters for the lookup table, we get a table size\r\n    // of 2^(32/4) + 1 = 257, where the first and last entries are equivalent (hence the table size of\r\n    // 256 defined above)\r\n    uint8 constant entry_bytes = 4; // each entry in the lookup table is 4 bytes\r\n    uint256 constant entry_mask = ((1 << (8 * entry_bytes)) - 1); // mask used to cast bytes32 -> lookup table entry\r\n    bytes constant sin_table =\r\n        hex\"00_00_00_00_00_c9_0f_88_01_92_1d_20_02_5b_26_d7_03_24_2a_bf_03_ed_26_e6_04_b6_19_5d_05_7f_00_35_06_47_d9_7c_07_10_a3_45_07_d9_5b_9e_08_a2_00_9a_09_6a_90_49_0a_33_08_bc_0a_fb_68_05_0b_c3_ac_35_0c_8b_d3_5e_0d_53_db_92_0e_1b_c2_e4_0e_e3_87_66_0f_ab_27_2b_10_72_a0_48_11_39_f0_cf_12_01_16_d5_12_c8_10_6e_13_8e_db_b1_14_55_76_b1_15_1b_df_85_15_e2_14_44_16_a8_13_05_17_6d_d9_de_18_33_66_e8_18_f8_b8_3c_19_bd_cb_f3_1a_82_a0_25_1b_47_32_ef_1c_0b_82_6a_1c_cf_8c_b3_1d_93_4f_e5_1e_56_ca_1e_1f_19_f9_7b_1f_dc_dc_1b_20_9f_70_1c_21_61_b3_9f_22_23_a4_c5_22_e5_41_af_23_a6_88_7e_24_67_77_57_25_28_0c_5d_25_e8_45_b6_26_a8_21_85_27_67_9d_f4_28_26_b9_28_28_e5_71_4a_29_a3_c4_85_2a_61_b1_01_2b_1f_34_eb_2b_dc_4e_6f_2c_98_fb_ba_2d_55_3a_fb_2e_11_0a_62_2e_cc_68_1e_2f_87_52_62_30_41_c7_60_30_fb_c5_4d_31_b5_4a_5d_32_6e_54_c7_33_26_e2_c2_33_de_f2_87_34_96_82_4f_35_4d_90_56_36_04_1a_d9_36_ba_20_13_37_6f_9e_46_38_24_93_b0_38_d8_fe_93_39_8c_dd_32_3a_40_2d_d1_3a_f2_ee_b7_3b_a5_1e_29_3c_56_ba_70_3d_07_c1_d5_3d_b8_32_a5_3e_68_0b_2c_3f_17_49_b7_3f_c5_ec_97_40_73_f2_1d_41_21_58_9a_41_ce_1e_64_42_7a_41_d0_43_25_c1_35_43_d0_9a_ec_44_7a_cd_50_45_24_56_bc_45_cd_35_8f_46_75_68_27_47_1c_ec_e6_47_c3_c2_2e_48_69_e6_64_49_0f_57_ee_49_b4_15_33_4a_58_1c_9d_4a_fb_6c_97_4b_9e_03_8f_4c_3f_df_f3_4c_e1_00_34_4d_81_62_c3_4e_21_06_17_4e_bf_e8_a4_4f_5e_08_e2_4f_fb_65_4c_50_97_fc_5e_51_33_cc_94_51_ce_d4_6e_52_69_12_6e_53_02_85_17_53_9b_2a_ef_54_33_02_7d_54_ca_0a_4a_55_60_40_e2_55_f5_a4_d2_56_8a_34_a9_57_1d_ee_f9_57_b0_d2_55_58_42_dd_54_58_d4_0e_8c_59_64_64_97_59_f3_de_12_5a_82_79_99_5b_10_35_ce_5b_9d_11_53_5c_29_0a_cc_5c_b4_20_df_5d_3e_52_36_5d_c7_9d_7b_5e_50_01_5d_5e_d7_7c_89_5f_5e_0d_b2_5f_e3_b3_8d_60_68_6c_ce_60_ec_38_2f_61_6f_14_6b_61_f1_00_3e_62_71_fa_68_62_f2_01_ac_63_71_14_cc_63_ef_32_8f_64_6c_59_bf_64_e8_89_25_65_63_bf_91_65_dd_fb_d2_66_57_3c_bb_66_cf_81_1f_67_46_c7_d7_67_bd_0f_bc_68_32_57_aa_68_a6_9e_80_69_19_e3_1f_69_8c_24_6b_69_fd_61_4a_6a_6d_98_a3_6a_dc_c9_64_6b_4a_f2_78_6b_b8_12_d0_6c_24_29_5f_6c_8f_35_1b_6c_f9_34_fb_6d_62_27_f9_6d_ca_0d_14_6e_30_e3_49_6e_96_a9_9c_6e_fb_5f_11_6f_5f_02_b1_6f_c1_93_84_70_23_10_99_70_83_78_fe_70_e2_cb_c5_71_41_08_04_71_9e_2c_d1_71_fa_39_48_72_55_2c_84_72_af_05_a6_73_07_c3_cf_73_5f_66_25_73_b5_eb_d0_74_0b_53_fa_74_5f_9d_d0_74_b2_c8_83_75_04_d3_44_75_55_bd_4b_75_a5_85_ce_75_f4_2c_0a_76_41_af_3c_76_8e_0e_a5_76_d9_49_88_77_23_5f_2c_77_6c_4e_da_77_b4_17_df_77_fa_b9_88_78_40_33_28_78_84_84_13_78_c7_ab_a1_79_09_a9_2c_79_4a_7c_11_79_8a_23_b0_79_c8_9f_6d_7a_05_ee_ac_7a_42_10_d8_7a_7d_05_5a_7a_b6_cb_a3_7a_ef_63_23_7b_26_cb_4e_7b_5d_03_9d_7b_92_0b_88_7b_c5_e2_8f_7b_f8_88_2f_7c_29_fb_ed_7c_5a_3d_4f_7c_89_4b_dd_7c_b7_27_23_7c_e3_ce_b1_7d_0f_42_17_7d_39_80_eb_7d_62_8a_c5_7d_8a_5f_3f_7d_b0_fd_f7_7d_d6_66_8e_7d_fa_98_a7_7e_1d_93_e9_7e_3f_57_fe_7e_5f_e4_92_7e_7f_39_56_7e_9d_55_fb_7e_ba_3a_38_7e_d5_e5_c5_7e_f0_58_5f_7f_09_91_c3_7f_21_91_b3_7f_38_57_f5_7f_4d_e4_50_7f_62_36_8e_7f_75_4e_7f_7f_87_2b_f2_7f_97_ce_bc_7f_a7_36_b3_7f_b5_63_b2_7f_c2_55_95_7f_ce_0c_3d_7f_d8_87_8d_7f_e1_c7_6a_7f_e9_cb_bf_7f_f0_94_77_7f_f6_21_81_7f_fa_72_d0_7f_fd_88_59_7f_ff_62_15_7f_ff_ff_ff\";\r\n\r\n    /**\r\n     * @notice Return the sine of a value, specified in radians scaled by 1e18\r\n     * @dev This algorithm for converting sine only uses integer values, and it works by dividing the\r\n     * circle into 30 bit angles, i.e. there are 1,073,741,824 (2^30) angle units, instead of the\r\n     * standard 360 degrees (2pi radians). From there, we get an output in range -2,147,483,647 to\r\n     * 2,147,483,647, (which is the max value of an int32) which is then converted back to the standard\r\n     * range of -1 to 1, again scaled by 1e18\r\n     * @param _angle Angle to convert\r\n     * @return Result scaled by 1e18\r\n     */\r\n    function sin(uint256 _angle) internal pure returns (int256) {\r\n        unchecked {\r\n            // Convert angle from from arbitrary radian value (range of 0 to 2pi) to the algorithm's range\r\n            // of 0 to 1,073,741,824\r\n            _angle = (ANGLES_IN_CYCLE * (_angle % TWO_PI)) / TWO_PI;\r\n\r\n            // Apply a mask on an integer to extract a certain number of bits, where angle is the integer\r\n            // whose bits we want to get, the width is the width of the bits (in bits) we want to extract,\r\n            // and the offset is the offset of the bits (in bits) we want to extract. The result is an\r\n            // integer containing _width bits of _value starting at the offset bit\r\n            uint256 interp = (_angle >> INTERP_OFFSET) &\r\n                ((1 << INTERP_WIDTH) - 1);\r\n            uint256 index = (_angle >> INDEX_OFFSET) & ((1 << INDEX_WIDTH) - 1);\r\n\r\n            // The lookup table only contains data for one quadrant (since sin is symmetric around both\r\n            // axes), so here we figure out which quadrant we're in, then we lookup the values in the\r\n            // table then modify values accordingly\r\n            bool is_odd_quadrant = (_angle & QUADRANT_LOW_MASK) == 0;\r\n            bool is_negative_quadrant = (_angle & QUADRANT_HIGH_MASK) != 0;\r\n\r\n            if (!is_odd_quadrant) {\r\n                index = SINE_TABLE_SIZE - 1 - index;\r\n            }\r\n\r\n            bytes memory table = sin_table;\r\n            // We are looking for two consecutive indices in our lookup table\r\n            // Since EVM is left aligned, to read n bytes of data from idx i, we must read from `i * data_len` + `n`\r\n            // therefore, to read two entries of size entry_bytes `index * entry_bytes` + `entry_bytes * 2`\r\n            uint256 offset1_2 = (index + 2) * entry_bytes;\r\n\r\n            // This following snippet will function for any entry_bytes <= 15\r\n            uint256 x1_2;\r\n            assembly {\r\n                // mload will grab one word worth of bytes (32), as that is the minimum size in EVM\r\n                x1_2 := mload(add(table, offset1_2))\r\n            }\r\n\r\n            // We now read the last two numbers of size entry_bytes from x1_2\r\n            // in example: entry_bytes = 4; x1_2 = 0x00...12345678abcdefgh\r\n            // therefore: entry_mask = 0xFFFFFFFF\r\n\r\n            // 0x00...12345678abcdefgh >> 8*4 = 0x00...12345678\r\n            // 0x00...12345678 & 0xFFFFFFFF = 0x12345678\r\n            uint256 x1 = (x1_2 >> (8 * entry_bytes)) & entry_mask;\r\n            // 0x00...12345678abcdefgh & 0xFFFFFFFF = 0xabcdefgh\r\n            uint256 x2 = x1_2 & entry_mask;\r\n\r\n            // Approximate angle by interpolating in the table, accounting for the quadrant\r\n            uint256 approximation = ((x2 - x1) * interp) >> INTERP_WIDTH;\r\n            int256 sine = is_odd_quadrant\r\n                ? int256(x1) + int256(approximation)\r\n                : int256(x2) - int256(approximation);\r\n            if (is_negative_quadrant) {\r\n                sine *= -1;\r\n            }\r\n\r\n            // Bring result from the range of -2,147,483,647 through 2,147,483,647 to -1e18 through 1e18.\r\n            // This can never overflow because sine is bounded by the above values\r\n            return (sine * 1e18) / 2_147_483_647;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Return the cosine of a value, specified in radians scaled by 1e18\r\n     * @dev This is identical to the sin() method, and just computes the value by delegating to the\r\n     * sin() method using the identity cos(x) = sin(x + pi/2)\r\n     * @dev Overflow when `angle + PI_OVER_TWO > type(uint256).max` is ok, results are still accurate\r\n     * @param _angle Angle to convert\r\n     * @return Result scaled by 1e18\r\n     */\r\n    function cos(uint256 _angle) internal pure returns (int256) {\r\n        unchecked {\r\n            return sin(_angle + PI_OVER_TWO);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/WeSenditMath.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary WeSenditMath {\r\n    /**\r\n     * Calculates staking pool \"pool factor\" using given parameters\r\n     *\r\n     * @param balance uint256 - Pool balance in wei\r\n     *\r\n     * @return result uint256 - Pool Factor\r\n     */\r\n    function poolFactor(\r\n        uint256 balance\r\n    ) internal pure returns (uint256 result) {\r\n        uint256 pMax = 120_000_000 ether;\r\n        uint256 pMin = 0;\r\n\r\n        // Handle overflow\r\n        if (balance > pMax) {\r\n            balance = pMax;\r\n        }\r\n\r\n        uint256 PI = Trigonometry.PI; // / 1e13;\r\n        uint256 bracketsOne = (pMax / 1e13) - (balance / 1e13);\r\n        uint256 bracketsTwo = (pMax / 1e18) - (pMin / 1e18);\r\n        uint256 division = bracketsOne / bracketsTwo;\r\n        uint256 bracketsCos = (PI * division) / 1e5;\r\n\r\n        uint256 cos;\r\n        uint256 brackets;\r\n        if (bracketsCos >= Trigonometry.PI_OVER_TWO) {\r\n            cos = uint256(Trigonometry.cos(bracketsCos + Trigonometry.PI));\r\n            brackets = (cos + 1e18) / (2 * 1e1);\r\n            // Subtract cos result from brackets result, since we shifted the cos input by PI\r\n            brackets -= (cos / 1e1);\r\n        } else {\r\n            cos = uint256(Trigonometry.cos(bracketsCos));\r\n            brackets = (cos + 1e18) / (2 * 1e1);\r\n        }\r\n\r\n        uint256 res = brackets * (100 - 15) + (15 * 1e17);\r\n        return res * 1e1;\r\n    }\r\n\r\n    /**\r\n     * Calculates staking pool APY using given parameters\r\n     *\r\n     * @param duration uint256 - Staking duration in days\r\n     * @param factor uint256 - Pool Factor (1e18)\r\n     * @param maxDuration uint256 - Max. allowed staking duration in days\r\n     * @param compoundInterval uint256 - Compounding interval\r\n     *\r\n     * @return result uint256 - Pool APY\r\n     */\r\n    function apy(\r\n        uint256 duration,\r\n        uint256 factor,\r\n        uint256 maxDuration,\r\n        uint256 compoundInterval\r\n    ) internal pure returns (uint256 result) {\r\n        // Handle overflow\r\n        if (duration > maxDuration) {\r\n            duration = maxDuration;\r\n        }\r\n\r\n        uint256 _roi = 11 * 1e4; // 110%\r\n        uint256 _poolFactor = factor / 1e14;\r\n        uint256 _compoundInterval = compoundInterval * 1e4;\r\n        uint256 _duration = duration * 1e7;\r\n        uint256 _maxDuration = maxDuration * 1e4;\r\n\r\n        uint256 x = 1e7 + (_roi * _poolFactor) / _compoundInterval;\r\n        uint256 y = _compoundInterval * (_duration / _maxDuration);\r\n        uint256 pow = power(x, y / 1e7, 7);\r\n\r\n        return pow - 1e7;\r\n    }\r\n\r\n    /**\r\n     * Calculates staking pool APR using given parameters\r\n     *\r\n     * @param duration uint256 - Staking duration in days\r\n     * @param factor uint256 - Pool Factor (1e18)\r\n     * @param maxDuration uint256 - Max. allowed staking duration in days\r\n     *\r\n     * @return result uint256 - Pool APR\r\n     */\r\n    function apr(\r\n        uint256 duration,\r\n        uint256 factor,\r\n        uint256 maxDuration\r\n    ) internal pure returns (uint256 result) {\r\n        // Handle overflow\r\n        if (duration > maxDuration) {\r\n            duration = maxDuration;\r\n        }\r\n\r\n        uint256 _roi = 11 * 1e4; // 110%\r\n        uint256 _poolFactor = factor / 1e14;\r\n        uint256 _duration = duration * 1e7;\r\n        uint256 _maxDuration = maxDuration * 1e4;\r\n\r\n        uint256 x = _roi * _poolFactor;\r\n        uint256 y = _duration / _maxDuration;\r\n\r\n        return (x * y) / 1e7;\r\n    }\r\n\r\n    /**\r\n     * Calculates the power for the given parameters.\r\n     *\r\n     * @param base uint256 - Base\r\n     * @param exponent uint256 - Exponent\r\n     * @param precision uint256 - Precision used for calculation\r\n     *\r\n     * @return result uint256 - Calculation result\r\n     */\r\n    function power(\r\n        uint256 base,\r\n        uint256 exponent,\r\n        uint256 precision\r\n    ) internal pure returns (uint256 result) {\r\n        if (exponent == 0) {\r\n            return 10 ** precision;\r\n        } else if (exponent == 1) {\r\n            return base;\r\n        } else {\r\n            uint256 answer = base;\r\n            for (uint256 i = 0; i < exponent; i++) {\r\n                answer = (answer * base) / (10 ** precision);\r\n            }\r\n            return answer;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/BaseStakingPool.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract BaseStakingPool is\r\n    IStakingPool,\r\n    StakingPoolSnapshot,\r\n    EmergencyGuard,\r\n    Ownable,\r\n    AccessControlEnumerable,\r\n    ReentrancyGuard\r\n{\r\n    // Role allowed to do admin operations like pausing and emergency withdrawal.\r\n    bytes32 public constant ADMIN = keccak256(\"ADMIN\");\r\n\r\n    // Role allowed to update allocatedPoolShares\r\n    bytes32 public constant UPDATE_ALLOCATED_POOL_SHARES =\r\n        keccak256(\"UPDATE_ALLOCATED_POOL_SHARES\");\r\n\r\n    // Rewards in token per second\r\n    // Calculation: Max. rewards per 364 days / 31_449_600 (seconds per 364 days)\r\n    uint256 public constant TOKEN_PER_SECOND = 7654263202075702075;\r\n\r\n    // Initial pool token balance\r\n    uint256 internal constant INITIAL_POOL_BALANCE = 120_000_000 ether;\r\n\r\n    // Seconds per day\r\n    uint256 internal constant SECONDS_PER_DAY = 86400;\r\n\r\n    // Seconds per hour\r\n    uint256 internal constant SECONDS_PER_HOUR = 3600;\r\n\r\n    // Indicator, if pool is paused (no stake, no unstake, no claim)\r\n    bool internal _poolPaused = false;\r\n\r\n    // Indicator, if user emergency unstake is enabled\r\n    bool internal _emergencyUnstakeEnabled = false;\r\n\r\n    // Current pool factor, updated on every updatePool() call\r\n    uint256 internal _currentPoolFactor = 100 ether;\r\n\r\n    // Timestamp of last block rewards were calculated\r\n    uint256 internal _lastRewardTimestamp;\r\n\r\n    // Amount of allocated pool shares\r\n    uint256 internal _allocatedPoolShares;\r\n\r\n    // Amount of active allocated pool shares\r\n    uint256 internal _activeAllocatedPoolShares;\r\n\r\n    // Timestamp of last block active allocated pool shares were updated\r\n    uint256 internal _lastActiveAllocatedPoolSharesTimestamp;\r\n\r\n    // Amount of accured rewards per share, updated on every updatePool() call\r\n    uint256 internal _accRewardsPerShare;\r\n\r\n    // Total amount of locked token (excluding rewards)\r\n    uint256 internal _totalTokenLocked;\r\n\r\n    // Amount of reserved rewards (claimed, but no unstake yet = no reduction of shares)\r\n    uint256 internal _reservedRewards;\r\n\r\n    // Amount of reserved fees (collected, but not withdrawn yet)\r\n    uint256 internal _reservedFees;\r\n\r\n    // Token used for staking\r\n    IERC20 private _stakeToken = IERC20(address(0));\r\n\r\n    // Token used as staking proof\r\n    IWeStakeitToken private _proofToken = IWeStakeitToken(address(0));\r\n\r\n    // Mapping of proof token to staking entry\r\n    mapping(uint256 => PoolEntry) internal _poolEntries;\r\n\r\n    /**\r\n     * Checks if tokenId owner equals sender\r\n     *\r\n     * @param tokenId uint256 - Proof token ID\r\n     */\r\n    modifier onlyTokenOwner(uint256 tokenId) {\r\n        require(\r\n            proofToken().ownerOf(tokenId) == _msgSender(),\r\n            \"Staking Pool: Caller is not entry owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Checks if pool is paused\r\n     */\r\n    modifier onlyUnpaused() {\r\n        require(\r\n            !poolPaused(),\r\n            \"Staking Pool: Pool operations are currently paused\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(address stakeTokenAddress, address proofTokenAddress) {\r\n        // Add creator to admin role\r\n        _setupRole(ADMIN, _msgSender());\r\n\r\n        // Set role admin for roles\r\n        _setRoleAdmin(ADMIN, ADMIN);\r\n        _setRoleAdmin(UPDATE_ALLOCATED_POOL_SHARES, ADMIN);\r\n\r\n        // Setup token\r\n        _stakeToken = IERC20(stakeTokenAddress);\r\n        _proofToken = IWeStakeitToken(proofTokenAddress);\r\n    }\r\n\r\n    // Emergency functions\r\n    function emergencyWithdraw(\r\n        uint256 amount\r\n    ) external override onlyRole(ADMIN) {\r\n        super._emergencyWithdraw(amount);\r\n    }\r\n\r\n    function emergencyWithdrawToken(\r\n        address token,\r\n        uint256 amount\r\n    ) external override onlyRole(ADMIN) {\r\n        require(\r\n            amount <=\r\n                stakeToken().balanceOf(address(this)) - totalTokenLocked(),\r\n            \"Staking Pool: Withdraw amount exceeds available balance\"\r\n        );\r\n\r\n        super._emergencyWithdrawToken(token, amount);\r\n    }\r\n\r\n    function withdrawFee() external onlyRole(ADMIN) {\r\n        stakeToken().transfer(_msgSender(), _reservedFees);\r\n\r\n        _reservedFees = 0;\r\n    }\r\n\r\n    function setPoolPaused(bool value) external onlyRole(ADMIN) {\r\n        _poolPaused = value;\r\n    }\r\n\r\n    function setEmergencyUnstakeEnabled(bool value) external onlyRole(ADMIN) {\r\n        _emergencyUnstakeEnabled = value;\r\n    }\r\n\r\n    function setActiveAllocatedPoolShares(\r\n        uint256 value\r\n    ) external onlyRole(UPDATE_ALLOCATED_POOL_SHARES) {\r\n        _activeAllocatedPoolShares = value;\r\n        _lastActiveAllocatedPoolSharesTimestamp = block.timestamp;\r\n    }\r\n\r\n    function setReservedRewards(\r\n        uint256 value\r\n    ) external onlyRole(UPDATE_ALLOCATED_POOL_SHARES) {\r\n        _reservedRewards = value;\r\n    }\r\n\r\n    function setReservedFees(\r\n        uint256 value\r\n    ) external onlyRole(UPDATE_ALLOCATED_POOL_SHARES) {\r\n        _reservedFees = value;\r\n    }\r\n\r\n    function apy(uint256 duration) external view returns (uint256 value) {\r\n        return apy(duration, poolFactor(poolBalance()));\r\n    }\r\n\r\n    function apr(uint256 duration) external view returns (uint256 value) {\r\n        return apr(duration, poolFactor(poolBalance()));\r\n    }\r\n\r\n    function poolPaused() public view returns (bool value) {\r\n        return _poolPaused;\r\n    }\r\n\r\n    function emergencyUnstakeEnabled() public view returns (bool value) {\r\n        return _emergencyUnstakeEnabled;\r\n    }\r\n\r\n    function currentPoolFactor() public view returns (uint256 value) {\r\n        return _currentPoolFactor;\r\n    }\r\n\r\n    function lastRewardTimestamp() public view returns (uint256 value) {\r\n        return _lastRewardTimestamp;\r\n    }\r\n\r\n    function allocatedPoolShares() public view returns (uint256 value) {\r\n        return _allocatedPoolShares;\r\n    }\r\n\r\n    function activeAllocatedPoolShares() public view returns (uint256 value) {\r\n        return _activeAllocatedPoolShares;\r\n    }\r\n\r\n    function lastActiveAllocatedPoolSharesTimestamp()\r\n        public\r\n        view\r\n        returns (uint256 value)\r\n    {\r\n        return _lastActiveAllocatedPoolSharesTimestamp;\r\n    }\r\n\r\n    function accRewardsPerShare() public view returns (uint256 value) {\r\n        return _accRewardsPerShare;\r\n    }\r\n\r\n    function totalPoolShares() public pure returns (uint256 value) {\r\n        // Total possible shares per 364 days\r\n        // Calculation: 120_000_000 * 200.60293 (max. APY)\r\n        return 240_723_516 * 1e2;\r\n    }\r\n\r\n    function totalTokenLocked() public view returns (uint256 value) {\r\n        return _totalTokenLocked;\r\n    }\r\n\r\n    function reservedRewards() public view returns (uint256 value) {\r\n        return _reservedRewards;\r\n    }\r\n\r\n    function reservedFees() public view returns (uint256 value) {\r\n        return _reservedFees;\r\n    }\r\n\r\n    function minDuration() public pure override returns (uint256 duration) {\r\n        return 7;\r\n    }\r\n\r\n    function maxDuration() public pure returns (uint256 value) {\r\n        return 364; // 52 weeks\r\n    }\r\n\r\n    function compoundInterval() public pure returns (uint256 value) {\r\n        return 730;\r\n    }\r\n\r\n    function stakeToken() public view returns (IERC20 value) {\r\n        return _stakeToken;\r\n    }\r\n\r\n    function proofToken() public view returns (IWeStakeitToken value) {\r\n        return _proofToken;\r\n    }\r\n\r\n    function poolBalance() public view returns (uint256 value) {\r\n        return poolBalance(currentPoolFactor());\r\n    }\r\n\r\n    function poolBalance(\r\n        uint256 poolFactor_\r\n    ) public view returns (uint256 value) {\r\n        // Get current pool balance\r\n        uint256 tokenBalance = stakeToken().balanceOf(address(this));\r\n\r\n        uint256 correctedBalance = tokenBalance -\r\n            totalTokenLocked() +\r\n            reservedRewards() -\r\n            reservedFees();\r\n\r\n        // Calculate all rewards paid or are claimable until now\r\n        uint256 rewardDebt = activeAllocatedPoolShares() *\r\n            _calculateAccRewardsPerShare(poolFactor_);\r\n\r\n        // All fees\r\n        uint256 rewardFee = (rewardDebt * 3) / 100;\r\n        uint256 rewardFeeExternal = rewardFee / 2;\r\n\r\n        uint256 availableRewards = rewardDebt - rewardFeeExternal;\r\n\r\n        return correctedBalance - availableRewards;\r\n    }\r\n\r\n    function poolEntry(\r\n        uint256 tokenId\r\n    ) public view returns (PoolEntry memory entry) {\r\n        return _poolEntries[tokenId];\r\n    }\r\n\r\n    function apy(\r\n        uint256 duration,\r\n        uint256 factor\r\n    ) public pure returns (uint256 value) {\r\n        return\r\n            WeSenditMath.apy(\r\n                duration,\r\n                factor,\r\n                maxDuration(),\r\n                compoundInterval()\r\n            );\r\n    }\r\n\r\n    function apr(\r\n        uint256 duration,\r\n        uint256 factor\r\n    ) public pure returns (uint256 value) {\r\n        return WeSenditMath.apr(duration, factor, maxDuration());\r\n    }\r\n\r\n    function poolFactor() public view returns (uint256 value) {\r\n        return poolFactor(poolBalance());\r\n    }\r\n\r\n    function poolFactor(uint256 balance) public pure returns (uint256 value) {\r\n        return WeSenditMath.poolFactor(balance);\r\n    }\r\n\r\n    function accRewardsPerShareAt(\r\n        uint256 snapshotId\r\n    ) public view returns (uint256 snapshotId_, uint256 snapshotValue) {\r\n        return _accRewardsPerShareAt(snapshotId, accRewardsPerShare());\r\n    }\r\n\r\n    function lastRewardTimestampAt(\r\n        uint256 snapshotId\r\n    ) public view returns (uint256 snapshotId_, uint256 snapshotValue) {\r\n        return _lastRewardTimestampAt(snapshotId, lastRewardTimestamp());\r\n    }\r\n\r\n    function maxStakingAmount() public view returns (uint256 value) {\r\n        return _calculateMaxStakingAmount();\r\n    }\r\n\r\n    /**\r\n     * Calculates accured rewards per share\r\n     *\r\n     * @return accRewardsPerShare_ uint256 - Accured rewards per share for given parameter\r\n     */\r\n    function _calculateAccRewardsPerShare()\r\n        internal\r\n        view\r\n        returns (uint256 accRewardsPerShare_)\r\n    {\r\n        return\r\n            _calculateAccRewardsPerShare(\r\n                lastRewardTimestamp(),\r\n                currentPoolFactor(),\r\n                accRewardsPerShare()\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Calculates accured rewards per share\r\n     *\r\n     * @param poolFactor_ uint256 - Pool factor\r\n     *\r\n     * @return accRewardsPerShare_ uint256 - Accured rewards per share for given parameter\r\n     */\r\n    function _calculateAccRewardsPerShare(\r\n        uint256 poolFactor_\r\n    ) internal view returns (uint256 accRewardsPerShare_) {\r\n        return\r\n            _calculateAccRewardsPerShare(\r\n                lastRewardTimestamp(),\r\n                poolFactor_,\r\n                accRewardsPerShare()\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Validates staking duration\r\n     *\r\n     * @param duration uint256 - Staking duration in days\r\n     */\r\n    function _validateStakingDuration(uint256 duration) internal pure {\r\n        // Check for min. / max. duration\r\n        require(\r\n            duration >= minDuration() && duration <= maxDuration(),\r\n            \"Staking Pool: Invalid staking duration\"\r\n        );\r\n\r\n        // Check for full week\r\n        require(\r\n            duration % 7 == 0,\r\n            \"Staking Pool: Staking duration needs to be a full week\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Validates staking amount\r\n     *\r\n     * @param amount uint256 - Amount of token to stake\r\n     */\r\n    function _validateStakingAmount(uint256 amount) internal view {\r\n        // Important: check for max. staking amount before transferring token to pool\r\n        require(\r\n            amount <= maxStakingAmount(),\r\n            \"Staking Pool: Max. staking amount exceeded\"\r\n        );\r\n\r\n        require(\r\n            amount + _calculateUserStakingAmount(_msgSender()) <=\r\n                maxStakingAmount(),\r\n            \"Staking Pool: User max. staking amount exceeded\"\r\n        );\r\n\r\n        // CHeck allowance\r\n        uint256 allowance = stakeToken().allowance(_msgSender(), address(this));\r\n        require(allowance >= amount, \"Staking Pool: Amount exceeds allowance\");\r\n    }\r\n\r\n    function _validateClaim(PoolEntry memory entry) internal view {\r\n        // Check if already unstaked\r\n        require(\r\n            entry.isUnstaked == false,\r\n            \"Staking Pool: Staking entry was already unstaked\"\r\n        );\r\n\r\n        // Require entry either to be non auto-compounding or already ended\r\n        require(\r\n            !entry.isAutoCompoundingEnabled ||\r\n                block.timestamp >=\r\n                (entry.startedAt + (entry.duration * SECONDS_PER_DAY)),\r\n            \"Staking Pool: Cannot claim before staking end\"\r\n        );\r\n    }\r\n\r\n    function _validateUnstake(PoolEntry memory entry) internal view {\r\n        // Check if already unstaked\r\n        require(\r\n            !entry.isUnstaked,\r\n            \"Staking Pool: Staking entry was already unstaked\"\r\n        );\r\n\r\n        // Check for staking lock period\r\n        require(\r\n            block.timestamp >=\r\n                entry.startedAt + (entry.duration * SECONDS_PER_DAY),\r\n            \"Staking Pool: Staking entry is locked\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Calculates \"historic\" rewards if we're \"out\" of staking\r\n     *\r\n     * @param shares uint256 - Staking entry shares\r\n     * @param startTimestamp uint256 - Staking entry start timestamp\r\n     * @param endTimestamp uint256 - Staking entry end timestamp\r\n     *\r\n     * @return rewards uint256 - Available rewards\r\n     */\r\n    function _calculateHistoricRewards(\r\n        uint256 shares,\r\n        uint256 startTimestamp,\r\n        uint256 endTimestamp\r\n    ) internal view returns (uint256 rewards) {\r\n        // Get snapshot values\r\n        (, uint256 lastRewardTimestampSnapshot) = lastRewardTimestampAt(\r\n            endTimestamp\r\n        );\r\n        (, uint256 accRewardsPerShareSnapshot) = accRewardsPerShareAt(\r\n            endTimestamp\r\n        );\r\n\r\n        if (lastRewardTimestampSnapshot > endTimestamp) {\r\n            // Pool update was triggered after staking end\r\n\r\n            // Calculate duration from staking start to snpashot\r\n            uint256 elapsedSinceStart = lastRewardTimestampSnapshot -\r\n                startTimestamp;\r\n\r\n            // Calculate staking entry duration\r\n            uint256 duration = endTimestamp - startTimestamp;\r\n\r\n            // Calculate rewards based on ratio\r\n            uint256 partialAccRewardsPerShare = (accRewardsPerShareSnapshot *\r\n                duration) / elapsedSinceStart;\r\n\r\n            // Calculate final rewards\r\n            return shares * partialAccRewardsPerShare;\r\n        } else {\r\n            // Pool update was trigger before staking end\r\n\r\n            // Calculate duration from lastRewardTimestampSnapshot to endTimestamp\r\n            uint256 duration = endTimestamp - lastRewardTimestampSnapshot;\r\n\r\n            // Calculate rewards using snapshot values and remaining duration\r\n            return\r\n                shares *\r\n                _calculateAccRewardsPerShareForDuration(\r\n                    duration,\r\n                    lastRewardTimestampSnapshot,\r\n                    accRewardsPerShareSnapshot\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates accured rewards per share\r\n     *\r\n     * @param lastRewardTimestamp_ uint256 - Last reward timestamp\r\n     * @param poolFactor_ uint256 - Pool factor\r\n     * @param initialAccRewardsPerShare_ uint256 - Initial accured rewards per share\r\n     *\r\n     * @return accRewardsPerShare_ uint256 - Accured rewards per share for given parameter\r\n     */\r\n    function _calculateAccRewardsPerShare(\r\n        uint256 lastRewardTimestamp_,\r\n        uint256 poolFactor_,\r\n        uint256 initialAccRewardsPerShare_\r\n    ) private view returns (uint256 accRewardsPerShare_) {\r\n        // Calculate seconds elapsed since last reward update\r\n        uint256 secondsSinceLastRewards = block.timestamp -\r\n            lastRewardTimestamp_;\r\n\r\n        // Calculate total rewards since lastRewardTimestamp\r\n        uint256 totalRewards = secondsSinceLastRewards * TOKEN_PER_SECOND;\r\n\r\n        // Multiply rewards with pool factor\r\n        uint256 currentRewards = (totalRewards * poolFactor_) / 100 ether;\r\n\r\n        // Calculate rewards per share\r\n        return\r\n            initialAccRewardsPerShare_ + (currentRewards / totalPoolShares());\r\n    }\r\n\r\n    /**\r\n     * Calculates accured rewards per share for custom duration\r\n     *\r\n     * @param duration uint256 - Duration to calculate rewards for\r\n     * @param lastRewardTimestamp_ uint256 - Last reward timestamp\r\n     * @param initialAccRewardsPerShare_ uint256 - Initial accured rewards per share\r\n     *\r\n     * @return accRewardsPerShare_ uint256 - Accured rewards per share for given parameter\r\n     */\r\n    function _calculateAccRewardsPerShareForDuration(\r\n        uint256 duration,\r\n        uint256 lastRewardTimestamp_,\r\n        uint256 initialAccRewardsPerShare_\r\n    ) private view returns (uint256 accRewardsPerShare_) {\r\n        // Calculate current rewards per shares\r\n        uint256 currentAccRewardsPerShare = _calculateAccRewardsPerShare(\r\n            lastRewardTimestamp(),\r\n            poolFactor(),\r\n            accRewardsPerShare()\r\n        );\r\n\r\n        // Calculate difference to \"historic\" rewards per share\r\n        uint256 futureAccRewardsPerShare = currentAccRewardsPerShare -\r\n            initialAccRewardsPerShare_;\r\n\r\n        // Calculate time difference between customLastRewardTimestamp and current block\r\n        uint256 diff = block.timestamp - lastRewardTimestamp_;\r\n\r\n        // Calculate rewards per share\r\n        return\r\n            initialAccRewardsPerShare_ +\r\n            ((futureAccRewardsPerShare * duration) / diff);\r\n    }\r\n\r\n    /**\r\n     * Calculates max. staking amount\r\n     *\r\n     * @return maxAmount uint256 - Max. amount of token allowed to stake\r\n     */\r\n    function _calculateMaxStakingAmount()\r\n        private\r\n        view\r\n        returns (uint256 maxAmount)\r\n    {\r\n        // Get current pool balance\r\n        uint256 balance = poolBalance();\r\n\r\n        // Calculate upper limit (= 80% of initial balance)\r\n        uint256 upperLimit = (INITIAL_POOL_BALANCE * 80) / 100;\r\n\r\n        if (balance > upperLimit) {\r\n            // If current pool balance is greater than 80% of initial balance, allow up\r\n            // to 1_000_000 token.\r\n            return 1_000_000 ether;\r\n        } else {\r\n            // If current pool balance is below or equal 80% of initial balance, allow up\r\n            // to (1% * pool balance) token\r\n            return (balance * 1) / 100;\r\n        }\r\n    }\r\n\r\n    function _calculateUserStakingAmount(\r\n        address addr\r\n    ) private view returns (uint256 stakingAmount) {\r\n        IERC721Enumerable token = IERC721Enumerable(address(proofToken()));\r\n        uint256 balance = token.balanceOf(addr);\r\n        uint256 amount = 0;\r\n\r\n        for (uint256 i = 0; i < balance; i++) {\r\n            uint256 tokenId = token.tokenOfOwnerByIndex(addr, i);\r\n            amount += _poolEntries[tokenId].amount;\r\n        }\r\n\r\n        return amount;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IWeSenditToken.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\ninterface IWeSenditToken {\r\n    /**\r\n     * Emitted on transaction unpause\r\n     */\r\n    event Unpaused();\r\n\r\n    /**\r\n     * Emitted on dynamic fee manager update\r\n     *\r\n     * @param newAddress address - New dynamic fee manager address\r\n     */\r\n    event DynamicFeeManagerUpdated(address newAddress);\r\n\r\n    /**\r\n     * Returns the initial supply\r\n     *\r\n     * @return value uint256 - Initial supply\r\n     */\r\n    function initialSupply() external pure returns (uint256 value);\r\n\r\n    /**\r\n     * Returns true if transactions are pause, false if unpaused\r\n     *\r\n     * @param value bool - Indicates if transactions are paused\r\n     */\r\n    function paused() external view returns (bool value);\r\n\r\n    /**\r\n     * Sets the transaction pause state to false and therefor, allowing any transactions\r\n     */\r\n    function unpause() external;\r\n\r\n    /**\r\n     * Returns the dynamic fee manager\r\n     *\r\n     * @return value IDynamicFeeManager - Dynamic Fee Manager\r\n     */\r\n    function dynamicFeeManager()\r\n        external\r\n        view\r\n        returns (IDynamicFeeManager value);\r\n\r\n    /**\r\n     * Sets the dynamic fee manager\r\n     * Can be set to zero address to disable fee reflection.\r\n     *\r\n     * @param value address - New dynamic fee manager address\r\n     */\r\n    function setDynamicFeeManager(address value) external;\r\n\r\n    /**\r\n     * Transfers token from <from> to <to> without applying fees\r\n     *\r\n     * @param from address - Sender address\r\n     * @param to address - Receiver address\r\n     * @param amount uin256 - Transaction amount\r\n     */\r\n    function transferFromNoFees(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/BaseWeSenditToken.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\nabstract contract BaseWeSenditToken is\r\n    IWeSenditToken,\r\n    EmergencyGuard,\r\n    AccessControlEnumerable,\r\n    Ownable\r\n{\r\n    // Initial token supply\r\n    uint256 public constant INITIAL_SUPPLY = 37_500_000 ether;\r\n\r\n    // Total token supply\r\n    uint256 public constant TOTAL_SUPPLY = 1_500_000_000 ether;\r\n\r\n    // Role allowed to do admin operations like adding to fee whitelist, withdraw, etc.\r\n    bytes32 public constant ADMIN = keccak256(\"ADMIN\");\r\n\r\n    // Role allowed to bypass pause\r\n    bytes32 public constant BYPASS_PAUSE = keccak256(\"BYPASS_PAUSE\");\r\n\r\n    // Indicator, if transactions are paused\r\n    bool private _paused = true;\r\n\r\n    // Dynamic Fee Manager instance\r\n    IDynamicFeeManager private _dynamicFeeManager;\r\n\r\n    constructor() {\r\n        _setupRole(ADMIN, _msgSender());\r\n        _setRoleAdmin(ADMIN, ADMIN);\r\n        _setRoleAdmin(BYPASS_PAUSE, ADMIN);\r\n    }\r\n\r\n    /**\r\n     * Getter & Setter\r\n     */\r\n    function initialSupply() external pure override returns (uint256) {\r\n        return INITIAL_SUPPLY;\r\n    }\r\n\r\n    function unpause() external override onlyRole(ADMIN) {\r\n        _paused = false;\r\n        emit Unpaused();\r\n    }\r\n\r\n    function setDynamicFeeManager(address value)\r\n        external\r\n        override\r\n        onlyRole(ADMIN)\r\n    {\r\n        _dynamicFeeManager = IDynamicFeeManager(value);\r\n        emit DynamicFeeManagerUpdated(value);\r\n    }\r\n\r\n    function emergencyWithdraw(uint256 amount)\r\n        external\r\n        override\r\n        onlyRole(ADMIN)\r\n    {\r\n        super._emergencyWithdraw(amount);\r\n    }\r\n\r\n    function emergencyWithdrawToken(address token, uint256 amount)\r\n        external\r\n        override\r\n        onlyRole(ADMIN)\r\n    {\r\n        super._emergencyWithdrawToken(token, amount);\r\n    }\r\n\r\n    function paused() public view override returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    function dynamicFeeManager()\r\n        public\r\n        view\r\n        override\r\n        returns (IDynamicFeeManager manager)\r\n    {\r\n        return _dynamicFeeManager;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IFeeReceiver.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IFeeReceiver {\r\n    /**\r\n     * Callback function on ERC20 receive\r\n     *\r\n     * @param caller address - Calling contract\r\n     * @param token address - Received ERC20 token address\r\n     * @param from address - Sender address\r\n     * @param to address - Receiver address\r\n     * @param amount uint256 - Transaction amount\r\n     */\r\n    function onERC20Received(\r\n        address caller,\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/DynamicFeeManager.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n/**\r\n * @title Dynamic Fee Manager for ERC20 token\r\n *\r\n * The dynamic fee manager allows to dynamically add fee rules to ERC20 token transactions.\r\n * Fees will be applied if the given conditions are met.\r\n * Additonally, fees can be used to create liquidity on DEX or can be swapped to BUSD.\r\n */\r\ncontract DynamicFeeManager is BaseDynamicFeeManager {\r\n    constructor(address wesenditToken) BaseDynamicFeeManager(wesenditToken) {}\r\n\r\n    receive() external payable {}\r\n\r\n    function addFee(\r\n        address from,\r\n        address to,\r\n        uint256 percentage,\r\n        address destination,\r\n        bool excludeContracts,\r\n        bool doLiquify,\r\n        bool doSwapForBusd,\r\n        uint256 swapOrLiquifyAmount,\r\n        uint256 expiresAt\r\n    ) external override onlyRole(ADMIN) returns (uint256 index) {\r\n        require(\r\n            feeEntries.length < MAX_FEE_AMOUNT,\r\n            \"DynamicFeeManager: Amount of max. fees reached\"\r\n        );\r\n        require(\r\n            percentage <= feePercentageLimit(),\r\n            \"DynamicFeeManager: Fee percentage exceeds limit\"\r\n        );\r\n        require(\r\n            !(doLiquify && doSwapForBusd),\r\n            \"DynamicFeeManager: Cannot enable liquify and swap at the same time\"\r\n        );\r\n\r\n        bytes32 id = _generateIdentifier(\r\n            destination,\r\n            doLiquify,\r\n            doSwapForBusd,\r\n            swapOrLiquifyAmount\r\n        );\r\n\r\n        FeeEntry memory feeEntry = FeeEntry(\r\n            id,\r\n            from,\r\n            to,\r\n            percentage,\r\n            destination,\r\n            excludeContracts,\r\n            doLiquify,\r\n            doSwapForBusd,\r\n            swapOrLiquifyAmount,\r\n            expiresAt\r\n        );\r\n\r\n        feeEntries.push(feeEntry);\r\n\r\n        emit FeeAdded(\r\n            id,\r\n            from,\r\n            to,\r\n            percentage,\r\n            destination,\r\n            excludeContracts,\r\n            doLiquify,\r\n            doSwapForBusd,\r\n            swapOrLiquifyAmount,\r\n            expiresAt\r\n        );\r\n\r\n        // Return entry index\r\n        return feeEntries.length - 1;\r\n    }\r\n\r\n    function removeFee(uint256 index) external override onlyRole(ADMIN) {\r\n        require(\r\n            index < feeEntries.length,\r\n            \"DynamicFeeManager: array out of bounds\"\r\n        );\r\n\r\n        // Reset current amount for liquify or swap\r\n        bytes32 id = feeEntries[index].id;\r\n        feeEntryAmounts[id] = 0;\r\n\r\n        // Remove fee entry from array\r\n        feeEntries[index] = feeEntries[feeEntries.length - 1];\r\n        feeEntries.pop();\r\n\r\n        emit FeeRemoved(id, index);\r\n    }\r\n\r\n    function reflectFees(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external override returns (uint256 tTotal, uint256 tFees) {\r\n        require(\r\n            hasRole(CALL_REFLECT_FEES, _msgSender()),\r\n            \"DynamicFeeManager: Caller is missing required role\"\r\n        );\r\n\r\n        bool bypassFees = !feesEnabled() ||\r\n            from == owner() ||\r\n            hasRole(ADMIN, from) ||\r\n            hasRole(FEE_WHITELIST, from) ||\r\n            hasRole(RECEIVER_FEE_WHITELIST, to);\r\n\r\n        if (bypassFees) {\r\n            return (amount, 0);\r\n        }\r\n\r\n        bool bypassSwapAndLiquify = hasRole(ADMIN, to) ||\r\n            hasRole(ADMIN, from) ||\r\n            hasRole(BYPASS_SWAP_AND_LIQUIFY, to) ||\r\n            hasRole(BYPASS_SWAP_AND_LIQUIFY, from);\r\n\r\n        // Loop over all fee entries and calculate plus reflect fee\r\n        uint256 feeAmount = feeEntries.length;\r\n\r\n        // Keep track of fees applied, to prevent applying more fees than transaction limit\r\n        uint256 totalFeePercentage = 0;\r\n        uint256 txFeeLimit = transactionFeeLimit();\r\n\r\n        for (uint256 i = 0; i < feeAmount; i++) {\r\n            FeeEntry memory fee = feeEntries[i];\r\n\r\n            if (\r\n                _isFeeEntryValid(fee) &&\r\n                (_isFeeEntryMatching(fee, from, to, amount))\r\n            ) {\r\n                uint256 tFee = _calculateFee(amount, fee.percentage);\r\n                uint256 tempPercentage = totalFeePercentage + fee.percentage;\r\n\r\n                if (tFee > 0 && tempPercentage <= txFeeLimit) {\r\n                    tFees = tFees + tFee;\r\n                    totalFeePercentage = tempPercentage;\r\n                    _reflectFee(from, to, tFee, fee, bypassSwapAndLiquify);\r\n                }\r\n            }\r\n        }\r\n\r\n        tTotal = amount - tFees;\r\n        require(tTotal > 0, \"DynamicFeeManager: invalid total amount\");\r\n\r\n        return (tTotal, tFees);\r\n    }\r\n\r\n    function _isFeeMatchingStakingUnclaim(\r\n        FeeEntry memory fee,\r\n        address to,\r\n        uint256 amount\r\n    ) private view returns (bool matching) {\r\n        // Get users staking nfts balance\r\n        uint256 balance = weStakeitToken().balanceOf(to);\r\n\r\n        for (uint256 i = 0; i < balance; i++) {\r\n            // Get staking token id\r\n            uint256 tokenId = weStakeitToken().tokenOfOwnerByIndex(to, i);\r\n\r\n            // Get staking entry from pool\r\n            PoolEntry memory entry = stakingPool().poolEntry(tokenId);\r\n\r\n            /**\r\n             * Check if entry is:\r\n             * - unstaked (happens right before transfer)\r\n             * - claimed with this block (happens likely directly before transfer)\r\n             * - fee amount is matching 3% of initial stake amount\r\n             */\r\n            if (\r\n                entry.isUnstaked &&\r\n                entry.lastClaimedAt == block.timestamp &&\r\n                (amount * fee.percentage) / FEE_DIVIDER ==\r\n                (entry.amount * fee.percentage) / FEE_DIVIDER\r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Reflects a single fee\r\n     *\r\n     * @param from address - Sender address\r\n     * @param to address - Receiver address\r\n     * @param tFee uint256 - Fee amount\r\n     * @param fee FeeEntry - Fee Entry\r\n     * @param bypassSwapAndLiquify bool - Indicator, if swap and liquify should be bypassed\r\n     */\r\n    function _reflectFee(\r\n        address from,\r\n        address to,\r\n        uint256 tFee,\r\n        FeeEntry memory fee,\r\n        bool bypassSwapAndLiquify\r\n    ) private {\r\n        if (fee.doLiquify || fee.doSwapForBusd) {\r\n            // add to liquify / swap amount or transfer to fee destination\r\n            require(\r\n                IWeSenditToken(address(token())).transferFromNoFees(\r\n                    from,\r\n                    address(this),\r\n                    tFee\r\n                ),\r\n                \"DynamicFeeManager: Fee transfer to manager failed\"\r\n            );\r\n            feeEntryAmounts[fee.id] = feeEntryAmounts[fee.id] + tFee;\r\n        } else {\r\n            require(\r\n                IWeSenditToken(address(token())).transferFromNoFees(\r\n                    from,\r\n                    fee.destination,\r\n                    tFee\r\n                ),\r\n                \"DynamicFeeManager: Fee transfer to destination failed\"\r\n            );\r\n        }\r\n\r\n        // Check if swap / liquify amount was reached\r\n        if (\r\n            !bypassSwapAndLiquify &&\r\n            feeEntryAmounts[fee.id] >= MIN_SWAP_OR_LIQUIFY_AMOUNT &&\r\n            feeEntryAmounts[fee.id] >= fee.swapOrLiquifyAmount\r\n        ) {\r\n            // Disable fees, to prevent PancakeSwap pair recursive calls\r\n            feesEnabled_ = false;\r\n\r\n            // Check if swap / liquify amount was reached\r\n            uint256 tokenSwapped = 0;\r\n\r\n            if (fee.doSwapForBusd && from != pancakePairBusdAddress()) {\r\n                // Calculate amount of token we're going to swap\r\n                tokenSwapped = _getSwapOrLiquifyAmount(\r\n                    fee.id,\r\n                    fee.swapOrLiquifyAmount,\r\n                    percentageVolumeSwap(),\r\n                    pancakePairBusdAddress()\r\n                );\r\n\r\n                // Swap token for BUSD\r\n                _swapTokensForBusd(tokenSwapped, fee.destination);\r\n            }\r\n\r\n            if (fee.doLiquify && from != pancakePairBnbAddress()) {\r\n                // Swap (BNB) and liquify token\r\n                tokenSwapped = _swapAndLiquify(\r\n                    _getSwapOrLiquifyAmount(\r\n                        fee.id,\r\n                        fee.swapOrLiquifyAmount,\r\n                        percentageVolumeLiquify(),\r\n                        pancakePairBnbAddress()\r\n                    ),\r\n                    fee.destination\r\n                );\r\n            }\r\n\r\n            // Subtract amount of swapped token from fee entry amount\r\n            feeEntryAmounts[fee.id] = feeEntryAmounts[fee.id] - tokenSwapped;\r\n\r\n            // Enable fees again\r\n            feesEnabled_ = true;\r\n        }\r\n\r\n        emit FeeReflected(\r\n            fee.id,\r\n            address(token()),\r\n            from,\r\n            to,\r\n            tFee,\r\n            fee.destination,\r\n            fee.excludeContracts,\r\n            fee.doLiquify,\r\n            fee.doSwapForBusd,\r\n            fee.swapOrLiquifyAmount,\r\n            fee.expiresAt\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Checks if the fee entry is still valid\r\n     *\r\n     * @param fee FeeEntry - Fee Entry\r\n     *\r\n     * @return isValid bool - Indicates, if the fee entry is still valid\r\n     */\r\n    function _isFeeEntryValid(\r\n        FeeEntry memory fee\r\n    ) private view returns (bool isValid) {\r\n        return fee.expiresAt == 0 || block.timestamp <= fee.expiresAt;\r\n    }\r\n\r\n    /**\r\n     * Checks if the fee entry matches\r\n     *\r\n     * @param fee FeeEntry - Fee Entry\r\n     * @param from address - Sender address\r\n     * @param to address - Receiver address\r\n     *\r\n     * @return matching bool - Indicates, if the fee entry and from / to are matching\r\n     */\r\n    function _isFeeEntryMatching(\r\n        FeeEntry memory fee,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private view returns (bool matching) {\r\n        // Staking pool customization\r\n        if (fee.from == address(stakingPool())) {\r\n            return _isFeeMatchingStakingUnclaim(fee, to, amount);\r\n        }\r\n\r\n        return\r\n            ((fee.from == WHITELIST_ADDRESS &&\r\n                fee.to == WHITELIST_ADDRESS &&\r\n                !hasRole(EXCLUDE_WILDCARD_FEE, from) &&\r\n                !hasRole(EXCLUDE_WILDCARD_FEE, to)) &&\r\n                !(fee.excludeContracts && _isContract(from))) ||\r\n            (fee.from == from &&\r\n                fee.to == WHITELIST_ADDRESS &&\r\n                !hasRole(EXCLUDE_WILDCARD_FEE, to)) ||\r\n            (fee.to == to &&\r\n                fee.from == WHITELIST_ADDRESS &&\r\n                !hasRole(EXCLUDE_WILDCARD_FEE, from)) ||\r\n            (fee.to == to && fee.from == from);\r\n    }\r\n\r\n    /**\r\n     * Calculates a single fee\r\n     *\r\n     * @param amount uint256 - Transaction amount\r\n     * @param percentage uint256 - Fee percentage\r\n     *\r\n     * @return tFee - Total Fee Amount\r\n     */\r\n    function _calculateFee(\r\n        uint256 amount,\r\n        uint256 percentage\r\n    ) private pure returns (uint256 tFee) {\r\n        return (amount * percentage) / FEE_DIVIDER;\r\n    }\r\n\r\n    /**\r\n     * Generates an unique identifier for a fee entry\r\n     *\r\n     * @param destination address - Destination address for the fee\r\n     * @param doLiquify bool - Indicates, if the fee amount should be used to add liquidy on DEX\r\n     * @param doSwapForBusd bool - Indicates, if the fee amount should be swapped to BUSD\r\n     * @param swapOrLiquifyAmount uint256 - Amount for liquidify or swap\r\n     *\r\n     * @return id bytes32 - Unique id\r\n     */\r\n    function _generateIdentifier(\r\n        address destination,\r\n        bool doLiquify,\r\n        bool doSwapForBusd,\r\n        uint256 swapOrLiquifyAmount\r\n    ) private pure returns (bytes32 id) {\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    destination,\r\n                    doLiquify,\r\n                    doSwapForBusd,\r\n                    swapOrLiquifyAmount\r\n                )\r\n            );\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IMultiVestingWallet.sol\r\n\r\n\r\n// Based on VestingWallet from OpenZeppelin Contracts (last updated v4.8.0) (finance/VestingWallet.sol)\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n\r\n\r\ninterface IMultiVestingWallet {\r\n    event EtherReleased(address indexed beneficiary, uint256 amount);\r\n    event ERC20Released(\r\n        address indexed beneficiary,\r\n        address indexed token,\r\n        uint256 amount\r\n    );\r\n\r\n    /**\r\n     * @dev The contract should be able to receive Eth.\r\n     */\r\n    receive() external payable;\r\n\r\n    /**\r\n     * @dev Add multiple beneficiaries for ETH.\r\n     */\r\n    function addBeneficiaries(\r\n        address[] calldata beneficiaries,\r\n        uint256[] calldata amounts\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Add multiple beneficiaries for token.\r\n     */\r\n    function addBeneficiaries(\r\n        address[] calldata beneficiaries,\r\n        address token,\r\n        uint256[] calldata amounts\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Add single beneficiaries for ETH.\r\n     */\r\n    function addBeneficiary(address beneficiary, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Add single beneficiaries for token.\r\n     */\r\n    function addBeneficiary(\r\n        address beneficiary,\r\n        address token,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Getter for the start timestamp.\r\n     */\r\n    function start() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Getter for the vesting duration.\r\n     */\r\n    function duration() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Amount of initial eth\r\n     */\r\n    function initial(address beneficiary) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Amount of initial token\r\n     */\r\n    function initial(\r\n        address beneficiary,\r\n        address token\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Amount of eth already released\r\n     */\r\n    function released(address beneficiary) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Amount of token already released\r\n     */\r\n    function released(\r\n        address beneficiary,\r\n        address token\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Getter for the amount of releasable eth.\r\n     */\r\n    function releasable(address beneficiary) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Getter for the amount of releasable `token` tokens. `token` should be the address of an\r\n     * IERC20 contract.\r\n     */\r\n    function releasable(\r\n        address beneficiary,\r\n        address token\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Release the native token (ether) that have already vested.\r\n     *\r\n     * Emits a {EtherReleased} event.\r\n     */\r\n    function release(address beneficiary) external;\r\n\r\n    /**\r\n     * @dev Release the tokens that have already vested.\r\n     *\r\n     * Emits a {ERC20Released} event.\r\n     */\r\n    function release(address beneficiary, address token) external;\r\n\r\n    /**\r\n     * @dev Calculates the amount of ether that has already vested. Default implementation is a linear vesting curve.\r\n     */\r\n    function vestedAmount(\r\n        address beneficiary,\r\n        uint64 timestamp\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve.\r\n     */\r\n    function vestedAmount(\r\n        address beneficiary,\r\n        address token,\r\n        uint64 timestamp\r\n    ) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/MultiVestingWallet.sol\r\n\r\n\r\n// Based on VestingWallet from OpenZeppelin Contracts (last updated v4.8.0) (finance/VestingWallet.sol)\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MultiVestingWallet is\r\n    IMultiVestingWallet,\r\n    Context,\r\n    Ownable,\r\n    EmergencyGuard\r\n{\r\n    uint64 private immutable _start;\r\n    uint64 private immutable _duration;\r\n\r\n    // Total initial ETH amount\r\n    uint256 private _totalInitialETH;\r\n\r\n    // Mapping from token to total initial token amount\r\n    mapping(address => uint256) private _totalInitialToken;\r\n\r\n    // Total released token amount\r\n    uint256 private _totalReleasedETH;\r\n\r\n    // Mapping from ttoken to total released token amount\r\n    mapping(address => uint256) private _totalReleasedToken;\r\n\r\n    // Mapping from beneficiary address to initial ETH\r\n    mapping(address => uint256) private _userInitialETH;\r\n\r\n    // Mapping from beneficiary address to release ETH\r\n    mapping(address => uint256) private _userReleaseETH;\r\n\r\n    // Mapping from beneficiary address to token address to initial token\r\n    mapping(address => mapping(address => uint256)) private _userInitialToken;\r\n\r\n    // Mapping from beneficiary address to token address to release token\r\n    mapping(address => mapping(address => uint256)) private _userReleasedToken;\r\n\r\n    /**\r\n     * @dev Set the start timestamp and vesting duration of the vesting wallet.\r\n     */\r\n    constructor(uint64 startTimestamp, uint64 durationSeconds) payable {\r\n        _start = startTimestamp;\r\n        _duration = durationSeconds;\r\n    }\r\n\r\n    receive() external payable virtual {}\r\n\r\n    function addBeneficiaries(\r\n        address[] calldata beneficiaries,\r\n        uint256[] calldata amounts\r\n    ) external virtual onlyOwner {\r\n        require(\r\n            beneficiaries.length == amounts.length,\r\n            \"MultiVestingWallet: mismatching beneficiaries / amounts pair\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < beneficiaries.length; i++) {\r\n            addBeneficiary(beneficiaries[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function addBeneficiaries(\r\n        address[] calldata beneficiaries,\r\n        address token,\r\n        uint256[] calldata amounts\r\n    ) external virtual onlyOwner {\r\n        require(\r\n            beneficiaries.length == amounts.length,\r\n            \"MultiVestingWallet: mismatching beneficiaries / amounts pair\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < beneficiaries.length; i++) {\r\n            addBeneficiary(beneficiaries[i], token, amounts[i]);\r\n        }\r\n    }\r\n\r\n    function addBeneficiary(\r\n        address beneficiary,\r\n        uint256 amount\r\n    ) public virtual onlyOwner {\r\n        require(\r\n            address(this).balance + _totalReleasedETH - _totalInitialETH >=\r\n                amount,\r\n            \"MultiVestingWallet: ETH amount exceeds balance\"\r\n        );\r\n\r\n        _userInitialETH[beneficiary] = amount;\r\n        _totalInitialETH += amount;\r\n    }\r\n\r\n    function addBeneficiary(\r\n        address beneficiary,\r\n        address token,\r\n        uint256 amount\r\n    ) public virtual onlyOwner {\r\n        require(\r\n            IERC20(token).balanceOf(address(this)) +\r\n                _totalReleasedToken[token] -\r\n                _totalInitialToken[token] >=\r\n                amount,\r\n            \"MultiVestingWallet: Token amount exceeds balance\"\r\n        );\r\n\r\n        _userInitialToken[beneficiary][token] = amount;\r\n        _totalInitialToken[token] += amount;\r\n    }\r\n\r\n    function start() public view virtual returns (uint256) {\r\n        return _start;\r\n    }\r\n\r\n    function duration() public view virtual returns (uint256) {\r\n        return _duration;\r\n    }\r\n\r\n    function initial(\r\n        address beneficiary\r\n    ) public view virtual returns (uint256) {\r\n        return _userInitialETH[beneficiary];\r\n    }\r\n\r\n    function initial(\r\n        address beneficiary,\r\n        address token\r\n    ) public view virtual returns (uint256) {\r\n        return _userInitialToken[beneficiary][token];\r\n    }\r\n\r\n    function released(\r\n        address beneficiary\r\n    ) public view virtual returns (uint256) {\r\n        return _userReleaseETH[beneficiary];\r\n    }\r\n\r\n    function released(\r\n        address beneficiary,\r\n        address token\r\n    ) public view virtual returns (uint256) {\r\n        return _userReleasedToken[beneficiary][token];\r\n    }\r\n\r\n    function releasable(\r\n        address beneficiary\r\n    ) public view virtual returns (uint256) {\r\n        return\r\n            vestedAmount(beneficiary, uint64(block.timestamp)) -\r\n            released(beneficiary);\r\n    }\r\n\r\n    function releasable(\r\n        address beneficiary,\r\n        address token\r\n    ) public view virtual returns (uint256) {\r\n        return\r\n            vestedAmount(beneficiary, token, uint64(block.timestamp)) -\r\n            released(beneficiary, token);\r\n    }\r\n\r\n    function release(address beneficiary) public virtual {\r\n        uint256 amount = releasable(beneficiary);\r\n        _userReleaseETH[beneficiary] += amount;\r\n        _totalReleasedETH += amount;\r\n        emit EtherReleased(beneficiary, amount);\r\n        Address.sendValue(payable(beneficiary), amount);\r\n    }\r\n\r\n    function release(address beneficiary, address token) public virtual {\r\n        uint256 amount = releasable(beneficiary, token);\r\n        _userReleasedToken[beneficiary][token] += amount;\r\n        _totalReleasedToken[token] += amount;\r\n        emit ERC20Released(beneficiary, token, amount);\r\n        SafeERC20.safeTransfer(IERC20(token), beneficiary, amount);\r\n    }\r\n\r\n    function vestedAmount(\r\n        address beneficiary,\r\n        uint64 timestamp\r\n    ) public view virtual returns (uint256) {\r\n        return _vestingSchedule(_userInitialETH[beneficiary], timestamp);\r\n    }\r\n\r\n    function vestedAmount(\r\n        address beneficiary,\r\n        address token,\r\n        uint64 timestamp\r\n    ) public view virtual returns (uint256) {\r\n        return\r\n            _vestingSchedule(_userInitialToken[beneficiary][token], timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Virtual implementation of the vesting formula. This returns the amount vested, as a function of time, for\r\n     * an asset given its total historical allocation.\r\n     */\r\n    function _vestingSchedule(\r\n        uint256 totalAllocation,\r\n        uint64 timestamp\r\n    ) internal view virtual returns (uint256) {\r\n        if (timestamp < start()) {\r\n            return 0;\r\n        } else if (timestamp > start() + duration()) {\r\n            return totalAllocation;\r\n        } else {\r\n            return (totalAllocation * (timestamp - start())) / duration();\r\n        }\r\n    }\r\n\r\n    function emergencyWithdraw(uint256 amount) external override onlyOwner {\r\n        super._emergencyWithdraw(amount);\r\n    }\r\n\r\n    function emergencyWithdrawToken(\r\n        address token,\r\n        uint256 amount\r\n    ) external override onlyOwner {\r\n        super._emergencyWithdrawToken(token, amount);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IPaymentProcessor.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\nstruct Payment {\r\n    // Unique identifier for the payment\r\n    // Generated out of (user, timestamp, amount)\r\n    bytes32 id;\r\n    // User address\r\n    address user;\r\n    // Payment amount\r\n    uint256 amount;\r\n    // Time when payment was executed\r\n    uint256 executedAt;\r\n    // Indicated if the payment was refunded\r\n    bool isRefunded;\r\n    // Time when payment was refunded (if not refunded, defaults to zero)\r\n    uint256 refundedAt;\r\n}\r\n\r\ninterface IPaymentProcessor {\r\n    /**\r\n     * Emitted when a payment was done by an user\r\n     *\r\n     * @param paymentId bytes32 - Unique id of the payment\r\n     * @param user address - User address\r\n     * @param amount uint256 - Added token amount\r\n     */\r\n    event PaymentDone(\r\n        bytes32 indexed paymentId,\r\n        address indexed user,\r\n        uint256 amount\r\n    );\r\n\r\n    /**\r\n     * Emitted when a payment was refunded to an user\r\n     *\r\n     * @param paymentId bytes32 - Unique id of the payment\r\n     * @param user address - User address\r\n     * @param amount uint256 - Added token amount\r\n     */\r\n    event PaymentRefunded(\r\n        bytes32 indexed paymentId,\r\n        address indexed user,\r\n        uint256 amount\r\n    );\r\n\r\n    /**\r\n     * Returns details about the last payment of an user\r\n     *\r\n     * @param user address - User address\r\n     *\r\n     * @return payment Payment - Last payment object\r\n     */\r\n    function lastPayment(\r\n        address user\r\n    ) external view returns (Payment memory payment);\r\n\r\n    /**\r\n     * Returns all payments of a given user\r\n     *\r\n     * @param user address - User address\r\n     *\r\n     * @return payments Payment[] - List of payment object\r\n     */\r\n    function paymentsByUser(\r\n        address user\r\n    ) external view returns (Payment[] memory payments);\r\n\r\n    /**\r\n     * Returns a payment of a given user at given index\r\n     *\r\n     * @param user address - User address\r\n     * @param index uint256 - Index of payment\r\n     *\r\n     * @return payment Payment - Payment object\r\n     */\r\n    function paymentAtIndex(\r\n        address user,\r\n        uint256 index\r\n    ) external view returns (Payment memory payment);\r\n\r\n    /**\r\n     * Returns a payment by a given id\r\n     *\r\n     * @param paymentId Unique payment id\r\n     *\r\n     * @return payment Payment - Payment object\r\n     */\r\n    function paymentById(\r\n        bytes32 paymentId\r\n    ) external view returns (Payment memory payment);\r\n\r\n    /**\r\n     * Returns the count of payment done by an user\r\n     *\r\n     * @param user address - User address\r\n     *\r\n     * @return count uint256 - Count of payments\r\n     */\r\n    function paymentCount(address user) external view returns (uint256 count);\r\n\r\n    /**\r\n     * Executes a payment from for the given user\r\n     * (can only be called with EXECUTE_PAYMENT role)\r\n     *\r\n     * @param user address - User address\r\n     * @param amount uint256 - Payment token amount\r\n     */\r\n    function executePayment(address user, uint256 amount) external;\r\n\r\n    /**\r\n     * Refunds a payment of the given user\r\n     * (can only be called with REFUND_PAYMENT role)\r\n     *\r\n     * @param paymentId bytes32 - Unique payment id\r\n     */\r\n    function refundPayment(bytes32 paymentId) external;\r\n}\r\n\r\n\r\n// File contracts/PaymentProcessor.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n\r\n\r\ncontract PaymentProcessor is\r\n    IPaymentProcessor,\r\n    Ownable,\r\n    AccessControlEnumerable,\r\n    ReentrancyGuard,\r\n    EmergencyGuard\r\n{\r\n    // Role allowed to do admin operations like withdrawal.\r\n    bytes32 public constant ADMIN = keccak256(\"ADMIN\");\r\n\r\n    // Role allowed to do processor operations like executing and refunding payments.\r\n    bytes32 public constant PROCESSOR = keccak256(\"PROCESSOR\");\r\n\r\n    // Token instance used for payments\r\n    IERC20 internal immutable _token;\r\n\r\n    // Payments by user\r\n    mapping(address => bytes32[]) internal _paymentsByUser;\r\n\r\n    // Payments by id\r\n    mapping(bytes32 => Payment) internal _paymentsById;\r\n\r\n    constructor(address tokenAddress) {\r\n        // Add creator to admin role\r\n        _setupRole(ADMIN, _msgSender());\r\n\r\n        // Set role admin for roles\r\n        _setRoleAdmin(ADMIN, ADMIN);\r\n        _setRoleAdmin(PROCESSOR, ADMIN);\r\n\r\n        // Initialize token instance\r\n        _token = IERC20(tokenAddress);\r\n    }\r\n\r\n    function lastPayment(\r\n        address user\r\n    ) external view override returns (Payment memory payment) {\r\n        bytes32[] memory paymentIds = _paymentsByUser[user];\r\n        bytes32 lastPaymentId = paymentIds[paymentIds.length - 1];\r\n\r\n        return _paymentsById[lastPaymentId];\r\n    }\r\n\r\n    function paymentsByUser(\r\n        address user\r\n    ) external view override returns (Payment[] memory payments) {\r\n        bytes32[] memory paymentIds = _paymentsByUser[user];\r\n\r\n        Payment[] memory paymentsArr = new Payment[](paymentIds.length);\r\n        for (uint256 i = 0; i < paymentIds.length; i++) {\r\n            paymentsArr[i] = _paymentsById[paymentIds[i]];\r\n        }\r\n\r\n        return paymentsArr;\r\n    }\r\n\r\n    function paymentAtIndex(\r\n        address user,\r\n        uint256 index\r\n    ) external view override returns (Payment memory payment) {\r\n        bytes32 paymentId = _paymentsByUser[user][index];\r\n\r\n        return _paymentsById[paymentId];\r\n    }\r\n\r\n    function paymentById(\r\n        bytes32 paymentId\r\n    ) external view override returns (Payment memory payment) {\r\n        return _paymentsById[paymentId];\r\n    }\r\n\r\n    function paymentCount(\r\n        address user\r\n    ) external view override returns (uint256 count) {\r\n        return _paymentsByUser[user].length;\r\n    }\r\n\r\n    function executePayment(\r\n        address user,\r\n        uint256 amount\r\n    ) external override onlyRole(PROCESSOR) nonReentrant {\r\n        // Transfer token from user\r\n        require(\r\n            _token.transferFrom(user, address(this), amount),\r\n            \"PaymentProcessor: Token transfer failed\"\r\n        );\r\n\r\n        // Generate unique payment id\r\n        bytes32 paymentId = _generateIdentifier(user, amount, block.timestamp);\r\n\r\n        // Create payment object\r\n        Payment memory payment = Payment(\r\n            paymentId,\r\n            user,\r\n            amount,\r\n            block.timestamp,\r\n            false,\r\n            0\r\n        );\r\n\r\n        // Add payments to mappings\r\n        _paymentsByUser[user].push(paymentId);\r\n        _paymentsById[paymentId] = payment;\r\n\r\n        // Emit event\r\n        emit PaymentDone(paymentId, user, amount);\r\n    }\r\n\r\n    function refundPayment(\r\n        bytes32 paymentId\r\n    ) external override onlyRole(PROCESSOR) nonReentrant {\r\n        // Get payment\r\n        Payment memory payment = _paymentsById[paymentId];\r\n\r\n        // Ensure it's not refunded yet\r\n        require(\r\n            !payment.isRefunded,\r\n            \"PaymentProcessor: Payment was already refunded\"\r\n        );\r\n\r\n        // Refund token\r\n        require(\r\n            _token.transfer(payment.user, payment.amount),\r\n            \"PaymentProcessor: Token transfer failed\"\r\n        );\r\n\r\n        // Update mappings\r\n        _paymentsById[paymentId].isRefunded = true;\r\n        _paymentsById[paymentId].refundedAt = block.timestamp;\r\n\r\n        // Emit event\r\n        emit PaymentRefunded(paymentId, payment.user, payment.amount);\r\n    }\r\n\r\n    function emergencyWithdraw(\r\n        uint256 amount\r\n    ) external override onlyRole(ADMIN) {\r\n        super._emergencyWithdraw(amount);\r\n    }\r\n\r\n    function emergencyWithdrawToken(\r\n        address tokenToWithdraw,\r\n        uint256 amount\r\n    ) external override onlyRole(ADMIN) {\r\n        super._emergencyWithdrawToken(tokenToWithdraw, amount);\r\n    }\r\n\r\n    /**\r\n     * Generates an unique identifier for a payment\r\n     *\r\n     * @param user address - User address\r\n     * @param amount uint256 - Payment amount\r\n     * @param executedAt uint256 - Time when payment was executed\r\n     *\r\n     * @return id bytes32 - Unique id\r\n     */\r\n    function _generateIdentifier(\r\n        address user,\r\n        uint256 amount,\r\n        uint256 executedAt\r\n    ) private pure returns (bytes32 id) {\r\n        return keccak256(abi.encodePacked(user, amount, executedAt));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IRewardDistributor.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IRewardDistributor {\r\n    /**\r\n     * Emitted when claimable token are added for an user\r\n     *\r\n     * @param user address - User address\r\n     * @param amount uint256 - Added token amount\r\n     */\r\n    event TokenAdded(address indexed user, uint256 amount);\r\n\r\n    /**\r\n     * Emitted when token are claimed by an user\r\n     *\r\n     * @param user address - User address\r\n     * @param amount uint256 - Claimed token amount\r\n     */\r\n    event TokenClaimed(address indexed user, uint256 amount);\r\n\r\n    /**\r\n     * Emitted when token of an user are slayed\r\n     *\r\n     * @param user address - User address\r\n     * @param amount uint256 - Slayed token amount\r\n     */\r\n    event TokenSlayed(address indexed user, uint256 amount);\r\n\r\n    /**\r\n     * Returns the amount of claimable token for an user\r\n     *\r\n     * @param user address - User address\r\n     */\r\n    function claimableToken(\r\n        address user\r\n    ) external view returns (uint256 amount);\r\n\r\n    /**\r\n     * Returns the amount of claimed token for an user\r\n     *\r\n     * @param user address - User address\r\n     */\r\n    function claimedToken(address user) external view returns (uint256 amount);\r\n\r\n    /**\r\n     * Returns the amount of slayed token for an user\r\n     *\r\n     * @param user address - User address\r\n     */\r\n    function slayedToken(address user) external view returns (uint256 amount);\r\n\r\n    /**\r\n     * Returns the timestamp of last user claim\r\n     *\r\n     * @param user address - User address\r\n     */\r\n    function lastClaimedAt(\r\n        address user\r\n    ) external view returns (uint256 timestamp);\r\n\r\n    /**\r\n     * Returns the timestamp of last user token slay\r\n     *\r\n     * @param user address - User address\r\n     */\r\n    function lastSlayedAt(\r\n        address user\r\n    ) external view returns (uint256 timestamp);\r\n\r\n    /**\r\n     * Returns the amount of fees collected\r\n     */\r\n    function totalFees() external view returns (uint256 amount);\r\n\r\n    /**\r\n     * Adds claimable token for an user\r\n     *\r\n     * @param user address - User address\r\n     * @param amount uint256 - Token amount to add\r\n     */\r\n    function addTokenForUser(address user, uint256 amount) external;\r\n\r\n    /**\r\n     * Adds claimable token for multiple users\r\n     *\r\n     * @param users address[] - Users addresses\r\n     * @param amounts uint256[] - Token amounts to add\r\n     */\r\n    function addTokenForUsers(\r\n        address[] memory users,\r\n        uint256[] memory amounts\r\n    ) external;\r\n\r\n    /**\r\n     * Claims token for a user (msg.sender)\r\n     */\r\n    function claimToken() external;\r\n\r\n    /**\r\n     * Slays / return token for the specified user\r\n     *\r\n     * @param user address - User address\r\n     */\r\n    function slayTokenForUser(address user) external;\r\n\r\n    /**\r\n     * Slays / return token for multiple users\r\n     *\r\n     * @param users address - Users addresses\r\n     */\r\n    function slayTokenForUsers(address[] memory users) external;\r\n}\r\n\r\n\r\n// File contracts/RewardDistributor.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n\r\n\r\ncontract RewardDistributor is\r\n    IRewardDistributor,\r\n    Ownable,\r\n    AccessControlEnumerable,\r\n    ReentrancyGuard,\r\n    EmergencyGuard\r\n{\r\n    // Role allowed to do admin operations.\r\n    bytes32 public constant ADMIN = keccak256(\"ADMIN\");\r\n\r\n    // Role allowed to do processor operations like adding token to users.\r\n    bytes32 public constant PROCESSOR = keccak256(\"PROCESSOR\");\r\n\r\n    // Role allowed to do slayer operations like slaying token.\r\n    bytes32 public constant SLAYER = keccak256(\"SLAYER\");\r\n\r\n    // Duration after user token are allowed to be slayed.\r\n    uint256 public constant SLAY_INACTIVE_DURATION = 200 * 24 * 60 * 60; // 200 days in seconds\r\n\r\n    // Fee address\r\n    address public constant FEE_ADDRESS =\r\n        0xD70E8C40003AE32b8E82AB5F25607c010532f148;\r\n\r\n    // Token instance used for payments\r\n    IERC20 internal immutable _token;\r\n\r\n    // Claimable token amount by user\r\n    mapping(address => uint256) internal _claimableByUser;\r\n\r\n    // Claimed token amount by user\r\n    mapping(address => uint256) internal _claimedByUser;\r\n\r\n    // Slayed token amount by user\r\n    mapping(address => uint256) internal _slayedByUser;\r\n\r\n    // Last claim timestamp by user\r\n    mapping(address => uint256) internal _lastClaimedAtByUser;\r\n\r\n    // Last slay timestamp by user\r\n    mapping(address => uint256) internal _lastSlayedAtByUser;\r\n\r\n    // Total amount of fees collected\r\n    uint256 internal _totalFees;\r\n\r\n    constructor(address tokenAddress) {\r\n        // Add creator to admin role\r\n        _setupRole(ADMIN, _msgSender());\r\n\r\n        // Set role admin for roles\r\n        _setRoleAdmin(ADMIN, ADMIN);\r\n        _setRoleAdmin(PROCESSOR, ADMIN);\r\n        _setRoleAdmin(SLAYER, ADMIN);\r\n\r\n        // Initialize token instance\r\n        _token = IERC20(tokenAddress);\r\n    }\r\n\r\n    function claimableToken(\r\n        address user\r\n    ) external view override returns (uint256 amount) {\r\n        return _claimableByUser[user];\r\n    }\r\n\r\n    function claimedToken(\r\n        address user\r\n    ) external view override returns (uint256 amount) {\r\n        return _claimedByUser[user];\r\n    }\r\n\r\n    function slayedToken(\r\n        address user\r\n    ) external view override returns (uint256 amount) {\r\n        return _slayedByUser[user];\r\n    }\r\n\r\n    function lastClaimedAt(\r\n        address user\r\n    ) external view override returns (uint256 timestamp) {\r\n        return _lastClaimedAtByUser[user];\r\n    }\r\n\r\n    function lastSlayedAt(\r\n        address user\r\n    ) external view override returns (uint256 timestamp) {\r\n        return _lastSlayedAtByUser[user];\r\n    }\r\n\r\n    function totalFees() external view override returns (uint256 amount) {\r\n        return _totalFees;\r\n    }\r\n\r\n    function addTokenForUsers(\r\n        address[] memory users,\r\n        uint256[] memory amounts\r\n    ) external override onlyRole(PROCESSOR) {\r\n        // Check if input data is valid\r\n        require(\r\n            users.length == amounts.length,\r\n            \"RewardDistributor: Count of users and amounts is mismatching\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            addTokenForUser(users[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function claimToken() external override nonReentrant {\r\n        // Get claimable amount\r\n        address user = _msgSender();\r\n        uint256 amount = _claimableByUser[user];\r\n\r\n        // Check amount\r\n        require(\r\n            amount > 0,\r\n            \"RewardDistributor: Cannot claim token if claimable amount is zero\"\r\n        );\r\n\r\n        // Transfer 3% fee\r\n        uint256 fees = (amount * 3) / 100;\r\n        require(\r\n            _token.transfer(FEE_ADDRESS, fees),\r\n            \"RewardDistributor: Token transfer failed\"\r\n        );\r\n\r\n        _totalFees += fees;\r\n\r\n        // Send token\r\n        require(\r\n            _token.transfer(user, amount - fees),\r\n            \"RewardDistributor: Token transfer failed\"\r\n        );\r\n\r\n        // Update state\r\n        _claimableByUser[user] -= amount;\r\n        _claimedByUser[user] += amount;\r\n\r\n        // Set last claim timestamp\r\n        _lastClaimedAtByUser[user] = block.timestamp;\r\n\r\n        // Emit event\r\n        emit TokenClaimed(user, amount);\r\n    }\r\n\r\n    function slayTokenForUsers(\r\n        address[] memory users\r\n    ) external override onlyRole(SLAYER) {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            slayTokenForUser(users[i]);\r\n        }\r\n    }\r\n\r\n    function emergencyWithdraw(\r\n        uint256 amount\r\n    ) external override onlyRole(ADMIN) {\r\n        super._emergencyWithdraw(amount);\r\n    }\r\n\r\n    function emergencyWithdrawToken(\r\n        address tokenToWithdraw,\r\n        uint256 amount\r\n    ) external override onlyRole(ADMIN) {\r\n        super._emergencyWithdrawToken(tokenToWithdraw, amount);\r\n    }\r\n\r\n    function addTokenForUser(\r\n        address user,\r\n        uint256 amount\r\n    ) public override onlyRole(PROCESSOR) {\r\n        _claimableByUser[user] += amount;\r\n\r\n        // Emit event\r\n        emit TokenAdded(user, amount);\r\n    }\r\n\r\n    function slayTokenForUser(address user) public override onlyRole(SLAYER) {\r\n        // Get last claim timestamp\r\n        uint256 lastClaimTimestamp = _lastClaimedAtByUser[user];\r\n        require(\r\n            block.timestamp > (lastClaimTimestamp + SLAY_INACTIVE_DURATION),\r\n            \"RewardDistributor: Cannot slay token of an active user\"\r\n        );\r\n\r\n        // Get claimable token amount\r\n        uint256 amount = _claimableByUser[user];\r\n        require(\r\n            amount > 0,\r\n            \"RewardDistributor: Cannot slay token if claimable amount is zero\"\r\n        );\r\n\r\n        // Send token\r\n        require(\r\n            _token.transfer(FEE_ADDRESS, amount),\r\n            \"RewardDistributor: Token transfer failed\"\r\n        );\r\n\r\n        // Update state\r\n        _claimableByUser[user] -= amount;\r\n        _slayedByUser[user] += amount;\r\n\r\n        // Set last slay timestamp\r\n        _lastSlayedAtByUser[user] = block.timestamp;\r\n\r\n        // Emit event\r\n        emit TokenSlayed(user, amount);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/StakingPool.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @title WeSendit Staking Pool\r\n */\r\ncontract StakingPool is BaseStakingPool {\r\n    constructor(\r\n        address stakeTokenAddress,\r\n        address proofTokenAddress\r\n    ) BaseStakingPool(stakeTokenAddress, proofTokenAddress) {}\r\n\r\n    function stake(\r\n        uint256 amount,\r\n        uint256 duration,\r\n        bool enableAutoCompounding\r\n    ) external onlyUnpaused nonReentrant returns (uint256 value) {\r\n        // Validate inputs\r\n        _validateStakingDuration(duration);\r\n        _validateStakingAmount(amount);\r\n\r\n        // Trigger pool update to make sure _accRewardsPerShare is up-to-date\r\n        updatePool();\r\n\r\n        // Transfer token to pool\r\n        require(\r\n            stakeToken().transferFrom(_msgSender(), address(this), amount),\r\n            \"Staking Pool: Failed to transfer token\"\r\n        );\r\n\r\n        // Calculate shares multiplier based on max. APY / APR\r\n        uint256 multiplier;\r\n        if (enableAutoCompounding) {\r\n            multiplier = apy(duration, 100 ether);\r\n        } else {\r\n            multiplier = apr(duration, 100 ether);\r\n        }\r\n\r\n        // Calculate pool shares for staking entry\r\n        uint256 totalShares = (amount * multiplier) / 1e23;\r\n\r\n        // Update global pool state\r\n        _allocatedPoolShares += totalShares;\r\n        _activeAllocatedPoolShares += totalShares;\r\n        _totalTokenLocked += amount;\r\n\r\n        // Calculate initial reward debt (similar to PancakeSwap staking / farms)\r\n        uint256 rewardDebt = totalShares * accRewardsPerShare();\r\n\r\n        // Create pool entry\r\n        PoolEntry memory entry = PoolEntry(\r\n            amount,\r\n            duration,\r\n            totalShares,\r\n            rewardDebt,\r\n            0,\r\n            0,\r\n            block.timestamp,\r\n            block.timestamp,\r\n            false,\r\n            enableAutoCompounding\r\n        );\r\n\r\n        // Mint staking reward NFT\r\n        uint256 tokenId = proofToken().mint(_msgSender());\r\n\r\n        // Set pool enty\r\n        _poolEntries[tokenId] = entry;\r\n\r\n        // Emit event\r\n        emit Staked(\r\n            tokenId,\r\n            amount,\r\n            duration,\r\n            totalShares,\r\n            enableAutoCompounding\r\n        );\r\n\r\n        return tokenId;\r\n    }\r\n\r\n    function unstake(\r\n        uint256 tokenId\r\n    ) external onlyUnpaused onlyTokenOwner(tokenId) nonReentrant {\r\n        // Get pool entry\r\n        PoolEntry memory entry = _poolEntries[tokenId];\r\n\r\n        // Validate unstake action\r\n        _validateUnstake(entry);\r\n\r\n        // Unstake token\r\n        // Check if user got pending rewards\r\n        (uint256 rewards, uint256 totalFee) = _pendingRewards(entry);\r\n\r\n        // Claim rewards or unstake if possible\r\n        _claimOrUnstake(tokenId, entry, rewards, totalFee);\r\n\r\n        // Trigger pool update\r\n        updatePool();\r\n\r\n        // Emit event\r\n        emit Unstaked(\r\n            tokenId,\r\n            entry.amount,\r\n            entry.duration,\r\n            entry.shares,\r\n            entry.isAutoCompoundingEnabled\r\n        );\r\n    }\r\n\r\n    function emergencyUnstake(\r\n        uint256 tokenId\r\n    ) external onlyTokenOwner(tokenId) {\r\n        require(\r\n            emergencyUnstakeEnabled(),\r\n            \"Staking Pool: Emergency unstake disabled\"\r\n        );\r\n\r\n        PoolEntry memory entry = _poolEntries[tokenId];\r\n        _unstake(tokenId, entry);\r\n    }\r\n\r\n    function claimRewards(\r\n        uint256 tokenId\r\n    ) external onlyUnpaused onlyTokenOwner(tokenId) nonReentrant {\r\n        // Get pool entry\r\n        PoolEntry memory entry = _poolEntries[tokenId];\r\n\r\n        // Check if user got pending rewards\r\n        (uint256 rewards, uint256 totalFee) = _pendingRewards(entry);\r\n        require(rewards > 0, \"Staking Pool: No rewards available to claim\");\r\n\r\n        // Claim rewards or unstake if possible\r\n        _claimOrUnstake(tokenId, entry, rewards, totalFee);\r\n\r\n        // Trigger pool update\r\n        updatePool();\r\n    }\r\n\r\n    function claimMultipleRewards(\r\n        uint256[] memory tokenIds\r\n    ) external onlyUnpaused nonReentrant {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            // Get token ID\r\n            uint256 tokenId = tokenIds[i];\r\n\r\n            // Check if token owner is sender\r\n            require(\r\n                proofToken().ownerOf(tokenId) == _msgSender(),\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"Staking Pool: Mismatching token owner for id: \",\r\n                        tokenId\r\n                    )\r\n                )\r\n            );\r\n\r\n            // Get pool entry\r\n            PoolEntry memory entry = _poolEntries[tokenId];\r\n\r\n            // Check if user got pending rewards\r\n            (uint256 rewards, uint256 totalFee) = _pendingRewards(entry);\r\n            if (rewards > 0) {\r\n                // Claim rewards\r\n                _claimOrUnstake(tokenId, entry, rewards, totalFee);\r\n            }\r\n        }\r\n\r\n        // Trigger pool update\r\n        updatePool();\r\n    }\r\n\r\n    function pendingRewards(\r\n        uint256 tokenId\r\n    ) public view returns (uint256 value) {\r\n        // Get pool entry\r\n        PoolEntry memory entry = poolEntry(tokenId);\r\n\r\n        // Calculate pending rewards\r\n        (uint256 rewards, ) = _pendingRewards(entry);\r\n        return rewards;\r\n    }\r\n\r\n    function updatePool() public {\r\n        // We've already updated this block\r\n        if (lastRewardTimestamp() >= block.timestamp) {\r\n            return;\r\n        }\r\n\r\n        // No one is currently staking, skipping update\r\n        if (allocatedPoolShares() == 0) {\r\n            _lastRewardTimestamp = block.timestamp;\r\n            return;\r\n        }\r\n\r\n        // Calculate global pool factor\r\n        _currentPoolFactor = poolFactor();\r\n\r\n        // Calculate global rewards per share\r\n        _accRewardsPerShare = _calculateAccRewardsPerShare();\r\n\r\n        // Update last reward block\r\n        _lastRewardTimestamp = block.timestamp;\r\n\r\n        // Save values for snapshot\r\n        _updateSnapshot(_accRewardsPerShareSnapshots, accRewardsPerShare());\r\n        _updateSnapshot(_lastRewardTimestampSnapshots, lastRewardTimestamp());\r\n\r\n        // Execute snapshot\r\n        _snapshot();\r\n    }\r\n\r\n    function _claimOrUnstake(\r\n        uint256 tokenId,\r\n        PoolEntry memory entry,\r\n        uint256 rewards,\r\n        uint256 totalFee\r\n    ) private {\r\n        // Validate claim action\r\n        _validateClaim(entry);\r\n\r\n        if (rewards > 0) {\r\n            // Claim rewards if available\r\n            _claimRewards(tokenId, rewards, totalFee);\r\n\r\n            // Update pool entry\r\n            entry = _poolEntries[tokenId];\r\n        }\r\n\r\n        // Check if pool entry is expired and unstake\r\n        if (\r\n            block.timestamp >=\r\n            entry.startedAt + (entry.duration * SECONDS_PER_DAY)\r\n        ) {\r\n            _unstake(tokenId, entry);\r\n        }\r\n    }\r\n\r\n    function _pendingRewards(\r\n        PoolEntry memory entry\r\n    ) private view returns (uint256 availableRewards, uint256 totalFee) {\r\n        // If already unstaked, return zero\r\n        if (entry.isUnstaked) {\r\n            return (0, 0);\r\n        }\r\n\r\n        // If we're exceeding staking duration, calculate rewards using\r\n        // snapshot values around entry end timestamp and calculate\r\n        // partial rewards\r\n        uint256 durationInSeconds = entry.duration * SECONDS_PER_DAY;\r\n        uint256 endTimestamp = entry.startedAt + durationInSeconds;\r\n\r\n        // If we have already claimed this block or claimed after end, we've got all possible rewards\r\n        if (\r\n            entry.lastClaimedAt == block.timestamp ||\r\n            entry.lastClaimedAt >= endTimestamp\r\n        ) {\r\n            return (0, 0);\r\n        }\r\n\r\n        // Calculate rewards based on shares\r\n        uint256 rewards;\r\n        if (block.timestamp > endTimestamp) {\r\n            // Calculate historic rewards\r\n            rewards = _calculateHistoricRewards(\r\n                entry.shares,\r\n                entry.startedAt,\r\n                endTimestamp\r\n            );\r\n        } else if (block.timestamp > lastRewardTimestamp()) {\r\n            // If lastRewardTimestamp is in the past, calculate new values here\r\n            rewards = entry.shares * _calculateAccRewardsPerShare(poolFactor());\r\n        } else {\r\n            // If we've just updated, use static values here\r\n            rewards = entry.shares * accRewardsPerShare();\r\n        }\r\n\r\n        // Subtract reward debt from rewards\r\n        uint256 totalRewards = rewards - entry.rewardDebt;\r\n\r\n        // Prevent underflow\r\n        if (totalRewards < entry.claimedRewards + entry.collectedFees) {\r\n            return (0, 0);\r\n        }\r\n\r\n        // Calculate available rewards\r\n        uint256 unclaimedRewards = totalRewards -\r\n            entry.claimedRewards -\r\n            entry.collectedFees;\r\n\r\n        // Calculate pool rewards fees\r\n        uint256 fee = (unclaimedRewards * 3) / 100;\r\n\r\n        // Return pending rewards without fee and claimed rewards\r\n        return (unclaimedRewards - fee, fee);\r\n    }\r\n\r\n    /**\r\n     * Claims rewards for the given entry\r\n     *\r\n     * @param tokenId uint256 - Proof token ID\r\n     * @param rewards uint256 - Pending rewards\r\n     * @param totalFee uint256 - Total fee subtracted from rewards\r\n     */\r\n    function _claimRewards(\r\n        uint256 tokenId,\r\n        uint256 rewards,\r\n        uint256 totalFee\r\n    ) private {\r\n        // Transfer rewards to sender\r\n        require(\r\n            stakeToken().transfer(_msgSender(), rewards),\r\n            \"Staking Pool: Failed to transfer rewards\"\r\n        );\r\n\r\n        // Update staking entry\r\n        _poolEntries[tokenId].claimedRewards += rewards;\r\n        _poolEntries[tokenId].collectedFees += totalFee;\r\n        _poolEntries[tokenId].lastClaimedAt = block.timestamp;\r\n\r\n        _reservedRewards += rewards;\r\n\r\n        // Emit event\r\n        emit RewardsClaimed(tokenId, rewards);\r\n    }\r\n\r\n    function _unstake(uint256 tokenId, PoolEntry memory entry) private {\r\n        // Flag entry as unstaked\r\n        _poolEntries[tokenId].isUnstaked = true;\r\n\r\n        // Transfer initial stake amount back to sender\r\n        require(\r\n            stakeToken().transfer(_msgSender(), entry.amount),\r\n            \"Staking Pool: Failed to transfer initial stake\"\r\n        );\r\n\r\n        // Update global pool state\r\n        _allocatedPoolShares -= entry.shares;\r\n        _totalTokenLocked -= entry.amount;\r\n\r\n        _reservedRewards -= entry.claimedRewards;\r\n        _reservedFees += entry.collectedFees / 2;\r\n\r\n        _activeAllocatedPoolShares -= entry.shares;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IStakingUtils.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\nstruct PoolEntryWithRewards {\r\n    PoolEntry poolEntry;\r\n    uint256 tokenId;\r\n    uint256 pendingRewards;\r\n}\r\n\r\ninterface IStakingUtils {\r\n    /**\r\n     * Returns the staking pool address\r\n     */\r\n    function stakingPool() external view returns (address value);\r\n\r\n    /**\r\n     * Returns staking pool APY values for each week\r\n     */\r\n    function apys() external view returns (uint256[] memory value);\r\n\r\n    /**\r\n     * Returns staking pool APR values for each week\r\n     */\r\n    function aprs() external view returns (uint256[] memory value);\r\n\r\n    /**\r\n     * Returns all staking token ids for a specific address\r\n     *\r\n     * @param addr address - address to get token ids for\r\n     */\r\n    function stakingTokenIds(\r\n        address addr\r\n    ) external view returns (uint256[] memory value);\r\n\r\n    /**\r\n     * Returns all staking entries for a specific address, including pending rewards\r\n     *\r\n     * @param addr address - address to get staking entries for\r\n     */\r\n    function stakingEntries(\r\n        address addr\r\n    ) external view returns (PoolEntryWithRewards[] memory value);\r\n\r\n    /**\r\n     * Returns a single staking entry for a specific token id\r\n     *\r\n     * @param tokenId uint256 - token id to fetch entry for\r\n     */\r\n    function stakingEntry(\r\n        uint256 tokenId\r\n    ) external view returns (PoolEntryWithRewards memory value);\r\n\r\n    /**\r\n     * Returns a bulk of staking entries for start -> start + amount\r\n     *\r\n     * @param start uint256 - token id to start at\r\n     * @param amount uint256 - amount of entries to fetch (exclusive)\r\n     */\r\n    function stakingEntriesBulk(\r\n        uint256 start,\r\n        uint256 amount\r\n    ) external view returns (PoolEntryWithRewards[] memory value);\r\n}\r\n\r\n\r\n// File contracts/StakingUtils.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n\r\ncontract StakingUtils is IStakingUtils {\r\n    uint256 private constant STAKING_MAX_WEEKS = 52;\r\n    IStakingPool private _stakingPool;\r\n\r\n    constructor(address stakingPoolAddress) {\r\n        _stakingPool = IStakingPool(stakingPoolAddress);\r\n    }\r\n\r\n    function stakingPool() external view override returns (address value) {\r\n        return address(_stakingPool);\r\n    }\r\n\r\n    function apys() external view override returns (uint256[] memory value) {\r\n        uint256[] memory values = new uint256[](STAKING_MAX_WEEKS);\r\n\r\n        for (uint64 i = 1; i <= STAKING_MAX_WEEKS; i++) {\r\n            values[i - 1] = _stakingPool.apy(i * 7);\r\n        }\r\n\r\n        return values;\r\n    }\r\n\r\n    function aprs() external view override returns (uint256[] memory value) {\r\n        uint256[] memory values = new uint256[](STAKING_MAX_WEEKS);\r\n\r\n        for (uint64 i = 1; i <= STAKING_MAX_WEEKS; i++) {\r\n            values[i - 1] = _stakingPool.apr(i * 7);\r\n        }\r\n\r\n        return values;\r\n    }\r\n\r\n    function stakingEntries(\r\n        address addr\r\n    ) external view override returns (PoolEntryWithRewards[] memory value) {\r\n        uint256[] memory tokenIds = stakingTokenIds(addr);\r\n        PoolEntryWithRewards[] memory poolEntries = new PoolEntryWithRewards[](\r\n            tokenIds.length\r\n        );\r\n\r\n        for (uint64 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n\r\n            PoolEntryWithRewards memory poolEntry = PoolEntryWithRewards(\r\n                _stakingPool.poolEntry(tokenId),\r\n                tokenId,\r\n                _stakingPool.pendingRewards(tokenId)\r\n            );\r\n\r\n            poolEntries[i] = poolEntry;\r\n        }\r\n\r\n        return poolEntries;\r\n    }\r\n\r\n    function stakingEntry(\r\n        uint256 tokenId\r\n    ) external view override returns (PoolEntryWithRewards memory value) {\r\n        PoolEntryWithRewards memory poolEntry = PoolEntryWithRewards(\r\n            _stakingPool.poolEntry(tokenId),\r\n            tokenId,\r\n            _stakingPool.pendingRewards(tokenId)\r\n        );\r\n\r\n        return poolEntry;\r\n    }\r\n\r\n    function stakingEntriesBulk(\r\n        uint256 start,\r\n        uint256 amount\r\n    ) external view returns (PoolEntryWithRewards[] memory value) {\r\n        IERC721Enumerable proofToken = IERC721Enumerable(\r\n            address(_stakingPool.proofToken())\r\n        );\r\n\r\n        require(\r\n            proofToken.totalSupply() >= start + amount,\r\n            \"StakingUtils: start + amount exceeds total supply\"\r\n        );\r\n\r\n        PoolEntryWithRewards[] memory poolEntries = new PoolEntryWithRewards[](\r\n            amount\r\n        );\r\n\r\n        uint256 arrIndex = 0;\r\n        for (uint256 i = start; i < start + amount; i++) {\r\n            PoolEntryWithRewards memory poolEntry = PoolEntryWithRewards(\r\n                _stakingPool.poolEntry(i),\r\n                i,\r\n                _stakingPool.pendingRewards(i)\r\n            );\r\n\r\n            poolEntries[arrIndex] = poolEntry;\r\n            arrIndex++;\r\n        }\r\n\r\n        return poolEntries;\r\n    }\r\n\r\n    function stakingTokenIds(\r\n        address addr\r\n    ) public view override returns (uint256[] memory value) {\r\n        IERC721Enumerable proofToken = IERC721Enumerable(\r\n            address(_stakingPool.proofToken())\r\n        );\r\n\r\n        uint256 balance = proofToken.balanceOf(addr);\r\n        uint256[] memory tokenIds = new uint256[](balance);\r\n\r\n        for (uint64 i = 0; i < balance; i++) {\r\n            tokenIds[i] = proofToken.tokenOfOwnerByIndex(addr, i);\r\n        }\r\n\r\n        return tokenIds;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ITokenVault.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface ITokenVault {\r\n    /**\r\n     * Emitted on vault lock\r\n     */\r\n    event Locked();\r\n\r\n    /**\r\n     * Emitted on vault unlock\r\n     */\r\n    event Unlocked();\r\n\r\n    /**\r\n     * Emitted on token withdrawal\r\n     *\r\n     * @param receiver address - Receiver of token\r\n     * @param token address - Token address\r\n     * @param amount uint256 - token amount\r\n     */\r\n    event WithdrawToken(address receiver, address token, uint256 amount);\r\n\r\n    /**\r\n     * Locks the vault\r\n     */\r\n    function lock() external;\r\n\r\n    /**\r\n     * Unlocks the vault\r\n     */\r\n    function unlock() external;\r\n\r\n    /**\r\n     * Withdraws token stores at the contract\r\n     *\r\n     * @param token address - Token to withdraw\r\n     * @param amount uint256 - Amount of token to withdraw\r\n     */\r\n    function withdrawToken(address token, uint256 amount) external;\r\n}\r\n\r\n\r\n// File contracts/TokenVault.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\ncontract TokenVault is ITokenVault, Ownable {\r\n    bool public locked = true;\r\n\r\n    function lock() external onlyOwner {\r\n        locked = true;\r\n        emit Locked();\r\n    }\r\n\r\n    function unlock() external onlyOwner {\r\n        locked = false;\r\n        emit Unlocked();\r\n    }\r\n\r\n    function withdrawToken(\r\n        address token,\r\n        uint256 amount\r\n    ) external override onlyOwner {\r\n        require(!locked, \"TokenVault: Token vault is locked\");\r\n\r\n        IERC20(token).transfer(msg.sender, amount);\r\n        emit WithdrawToken(msg.sender, token, amount);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/VestingWallet.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (finance/VestingWallet.sol)\r\n// Modified by the WeSendit Development Team to support VestingManager\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n/**\r\n * @title VestingWallet\r\n * @dev This contract handles the vesting of Eth and ERC20 tokens for a given beneficiary. Custody of multiple tokens\r\n * can be given to this contract, which will release the token to the beneficiary following a given vesting schedule.\r\n * The vesting schedule is customizable through the {vestedAmount} function.\r\n *\r\n * Any token transferred to this contract will follow the vesting schedule as if they were locked from the beginning.\r\n * Consequently, if the vesting has already started, any amount of tokens sent to this contract will (at least partly)\r\n * be immediately releasable.\r\n */\r\ncontract VestingWallet is Context {\r\n    event EtherReleased(uint256 amount);\r\n    event ERC20Released(address indexed token, uint256 amount);\r\n\r\n    uint256 private _released;\r\n    mapping(address => uint256) private _erc20Released;\r\n    address private immutable _beneficiary;\r\n    uint64 private immutable _start;\r\n    uint64 private immutable _duration;\r\n\r\n    /**\r\n     * @dev Set the beneficiary, start timestamp and vesting duration of the vesting wallet.\r\n     */\r\n    constructor(address beneficiaryAddress, uint64 startTimestamp, uint64 durationSeconds) payable {\r\n        require(beneficiaryAddress != address(0), \"VestingWallet: beneficiary is zero address\");\r\n        _beneficiary = beneficiaryAddress;\r\n        _start = startTimestamp;\r\n        _duration = durationSeconds;\r\n    }\r\n\r\n    /**\r\n     * @dev The contract should be able to receive Eth.\r\n     */\r\n    receive() external payable virtual {}\r\n\r\n    /**\r\n     * @dev Getter for the beneficiary address.\r\n     */\r\n    function beneficiary() public view virtual returns (address) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the start timestamp.\r\n     */\r\n    function start() public view virtual returns (uint256) {\r\n        return _start;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the vesting duration.\r\n     */\r\n    function duration() public view virtual returns (uint256) {\r\n        return _duration;\r\n    }\r\n\r\n    /**\r\n     * @dev Amount of eth already released\r\n     */\r\n    function released() public view virtual returns (uint256) {\r\n        return _released;\r\n    }\r\n\r\n    /**\r\n     * @dev Amount of token already released\r\n     */\r\n    function released(address token) public view virtual returns (uint256) {\r\n        return _erc20Released[token];\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of releasable eth.\r\n     */\r\n    function releasable() public view virtual returns (uint256) {\r\n        return vestedAmount(uint64(block.timestamp)) - released();\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of releasable `token` tokens. `token` should be the address of an\r\n     * IERC20 contract.\r\n     */\r\n    function releasable(address token) public view virtual returns (uint256) {\r\n        return vestedAmount(token, uint64(block.timestamp)) - released(token);\r\n    }\r\n\r\n    /**\r\n     * @dev Release the native token (ether) that have already vested.\r\n     *\r\n     * Emits a {EtherReleased} event.\r\n     */\r\n    function release() public virtual {\r\n        uint256 amount = releasable();\r\n        _released += amount;\r\n        emit EtherReleased(amount);\r\n        Address.sendValue(payable(beneficiary()), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Release the tokens that have already vested.\r\n     *\r\n     * Emits a {ERC20Released} event.\r\n     */\r\n    function release(address token) public virtual {\r\n        uint256 amount = releasable(token);\r\n        _erc20Released[token] += amount;\r\n        emit ERC20Released(token, amount);\r\n        SafeERC20.safeTransfer(IERC20(token), beneficiary(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount of ether that has already vested. Default implementation is a linear vesting curve.\r\n     */\r\n    function vestedAmount(uint64 timestamp) public view virtual returns (uint256) {\r\n        return _vestingSchedule(address(this).balance + released(), timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve.\r\n     */\r\n    function vestedAmount(address token, uint64 timestamp) public view virtual returns (uint256) {\r\n        return _vestingSchedule(IERC20(token).balanceOf(address(this)) + released(token), timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Virtual implementation of the vesting formula. This returns the amount vested, as a function of time, for\r\n     * an asset given its total historical allocation.\r\n     */\r\n    function _vestingSchedule(uint256 totalAllocation, uint64 timestamp) internal view virtual returns (uint256) {\r\n        if (timestamp < start()) {\r\n            return 0;\r\n        } else if (timestamp > start() + duration()) {\r\n            return totalAllocation;\r\n        } else {\r\n            return (totalAllocation * (timestamp - start())) / duration();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/WeSenditSender.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\n/**\r\n * @title WeSendit token sender\r\n */\r\ncontract WeSenditSender is Ownable {\r\n    IERC20 private _token;\r\n\r\n    constructor(address token) {\r\n        _token = IERC20(token);\r\n    }\r\n\r\n    function transferBulk(\r\n        address[] calldata addresses,\r\n        uint256[] calldata amounts\r\n    ) external onlyOwner returns (bool) {\r\n        require(\r\n            addresses.length == amounts.length,\r\n            \"WeSenditSender: mismatching addresses / amounts pair\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            require(\r\n                _token.transferFrom(_msgSender(), addresses[i], amounts[i])\r\n            );\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\r\n */\r\nabstract contract ERC20Capped is ERC20 {\r\n    uint256 private immutable _cap;\r\n\r\n    /**\r\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\r\n     * set once during construction.\r\n     */\r\n    constructor(uint256 cap_) {\r\n        require(cap_ > 0, \"ERC20Capped: cap is 0\");\r\n        _cap = cap_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token's total supply.\r\n     */\r\n    function cap() public view virtual returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_mint}.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual override {\r\n        require(ERC20.totalSupply() + amount <= cap(), \"ERC20Capped: cap exceeded\");\r\n        super._mint(account, amount);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        _spendAllowance(account, _msgSender(), amount);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/WeSenditToken.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n/**\r\n * @title WeSendit ERC20 token\r\n */\r\ncontract WeSenditToken is BaseWeSenditToken, ERC20Capped, ERC20Burnable {\r\n    constructor(address addressTotalSupply)\r\n        ERC20(\"WeSendit\", \"WSI\")\r\n        ERC20Capped(TOTAL_SUPPLY)\r\n        BaseWeSenditToken()\r\n    {\r\n        _mint(addressTotalSupply, TOTAL_SUPPLY);\r\n    }\r\n\r\n    /**\r\n     * Transfer token from without fee reflection\r\n     *\r\n     * @param from address - Address to transfer token from\r\n     * @param to address - Address to transfer token to\r\n     * @param amount uint256 - Amount of token to transfer\r\n     *\r\n     * @return bool - Indicator if transfer was successful\r\n     */\r\n    function transferFromNoFees(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external virtual override returns (bool) {\r\n        require(\r\n            _msgSender() == address(dynamicFeeManager()),\r\n            \"WeSendit: Can only be called by Dynamic Fee Manager\"\r\n        );\r\n\r\n        return super.transferFrom(from, to, amount);\r\n    }\r\n\r\n    /**\r\n     * Transfer token with fee reflection\r\n     *\r\n     * @inheritdoc ERC20\r\n     */\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        // Reflect fees\r\n        (uint256 tTotal, ) = _reflectFees(_msgSender(), to, amount);\r\n\r\n        // Execute normal transfer\r\n        return super.transfer(to, tTotal);\r\n    }\r\n\r\n    /**\r\n     * Transfer token from with fee reflection\r\n     *\r\n     * @inheritdoc ERC20\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        // Reflect fees\r\n        (uint256 tTotal, ) = _reflectFees(from, to, amount);\r\n\r\n        // Execute normal transfer\r\n        return super.transferFrom(from, to, tTotal);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ERC20\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        _preValidateTransfer(from);\r\n    }\r\n\r\n    // Needed since we inherit from ERC20 and ERC20Capped\r\n    function _mint(address account, uint256 amount)\r\n        internal\r\n        virtual\r\n        override(ERC20, ERC20Capped)\r\n    {\r\n        super._mint(account, amount);\r\n    }\r\n\r\n    /**\r\n     * Reflects fees using the dynamic fee manager\r\n     *\r\n     * @param from address - Sender address\r\n     * @param to address - Receiver address\r\n     * @param amount uint256 - Transaction amount\r\n     */\r\n    function _reflectFees(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private returns (uint256 tTotal, uint256 tFees) {\r\n        if (address(dynamicFeeManager()) == address(0)) {\r\n            return (amount, 0);\r\n        } else {\r\n            // Allow dynamic fee manager to spent amount for fees if needed\r\n            _approve(from, address(dynamicFeeManager()), amount);\r\n\r\n            // Reflect fees\r\n            (tTotal, tFees) = dynamicFeeManager().reflectFees(from, to, amount);\r\n\r\n            // Reset fee manager approval to zero for security reason\r\n            _approve(from, address(dynamicFeeManager()), 0);\r\n\r\n            return (tTotal, tFees);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the minimum transaction amount is exceeded and if pause is enabled\r\n     *\r\n     * @param from address - Sender address\r\n     */\r\n    function _preValidateTransfer(address from) private view {\r\n        /**\r\n         * Only allow transfers if:\r\n         * - token is not paused\r\n         * - sender is owner\r\n         * - sender is admin\r\n         * - sender has bypass role\r\n         */\r\n        require(\r\n            !paused() ||\r\n                from == address(0) ||\r\n                from == owner() ||\r\n                hasRole(ADMIN, from) ||\r\n                hasRole(BYPASS_PAUSE, from),\r\n            \"WeSendit: transactions are paused\"\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/ERC721.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _ownerOf(tokenId);\r\n        require(owner != address(0), \"ERC721: invalid token ID\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        _requireMinted(tokenId);\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overridden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not token owner or approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        _requireMinted(tokenId);\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\r\n        _safeTransfer(from, to, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\r\n     */\r\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\r\n        return _owners[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _ownerOf(tokenId) != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\r\n\r\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        unchecked {\r\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\r\n            // Given that tokens are minted one by one, it is impossible in practice that\r\n            // this ever happens. Might change if we allow batch minting.\r\n            // The ERC fails to describe this case.\r\n            _balances[to] += 1;\r\n        }\r\n\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n\r\n        _afterTokenTransfer(address(0), to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\r\n\r\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\r\n        owner = ERC721.ownerOf(tokenId);\r\n\r\n        // Clear approvals\r\n        delete _tokenApprovals[tokenId];\r\n\r\n        unchecked {\r\n            // Cannot overflow, as that would require more tokens to be burned/transferred\r\n            // out than the owner initially received through minting and transferring in.\r\n            _balances[owner] -= 1;\r\n        }\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n\r\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId, 1);\r\n\r\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n\r\n        // Clear approvals from the previous owner\r\n        delete _tokenApprovals[tokenId];\r\n\r\n        unchecked {\r\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\r\n            // `from`'s balance is the number of token held, which is at least one before the current\r\n            // transfer.\r\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\r\n            // all 2**256 token ids to be minted, which in practice is impossible.\r\n            _balances[from] -= 1;\r\n            _balances[to] += 1;\r\n        }\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if the `tokenId` has not been minted yet.\r\n     */\r\n    function _requireMinted(uint256 tokenId) internal view virtual {\r\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    /// @solidity memory-safe-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\r\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\r\n     * - When `from` is zero, the tokens will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `batchSize` is non-zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256, /* firstTokenId */\r\n        uint256 batchSize\r\n    ) internal virtual {\r\n        if (batchSize > 1) {\r\n            if (from != address(0)) {\r\n                _balances[from] -= batchSize;\r\n            }\r\n            if (to != address(0)) {\r\n                _balances[to] += batchSize;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\r\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\r\n     * - When `from` is zero, the tokens were minted for `to`.\r\n     * - When `to` is zero, ``from``'s tokens were burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `batchSize` is non-zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 firstTokenId,\r\n        uint256 batchSize\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev ERC721 token with storage based token URI management.\r\n */\r\nabstract contract ERC721URIStorage is ERC721 {\r\n    using Strings for uint256;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping(uint256 => string) private _tokenURIs;\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        _requireMinted(tokenId);\r\n\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n        string memory base = _baseURI();\r\n\r\n        // If there is no base URI, return the token URI.\r\n        if (bytes(base).length == 0) {\r\n            return _tokenURI;\r\n        }\r\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\r\n        if (bytes(_tokenURI).length > 0) {\r\n            return string(abi.encodePacked(base, _tokenURI));\r\n        }\r\n\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\r\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\r\n     * the storage mapping.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual override {\r\n        super._burn(tokenId);\r\n\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol@v4.8.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC721-_beforeTokenTransfer}.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 firstTokenId,\r\n        uint256 batchSize\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\r\n\r\n        if (batchSize > 1) {\r\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\r\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\r\n        }\r\n\r\n        uint256 tokenId = firstTokenId;\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n\r\n// File contracts/WeStakeitToken.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title WeSendit Staking Token\r\n */\r\ncontract WeStakeitToken is\r\n    IWeStakeitToken,\r\n    ERC721,\r\n    ERC721URIStorage,\r\n    ERC721Enumerable,\r\n    Ownable\r\n{\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _tokenIds;\r\n\r\n    constructor() ERC721(\"WeStakeit\", \"sWSI\") {}\r\n\r\n    function mint(\r\n        address receiver\r\n    ) external onlyOwner returns (uint256 tokenId) {\r\n        tokenId = _tokenIds.current();\r\n\r\n        _mint(receiver, tokenId);\r\n        _setTokenURI(\r\n            tokenId,\r\n            string(\r\n                abi.encodePacked(\r\n                    \"https://app.wesendit.io/api/tokenMetadata/\",\r\n                    Strings.toString(tokenId)\r\n                )\r\n            )\r\n        );\r\n\r\n        _tokenIds.increment();\r\n        return tokenId;\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 batchSize\r\n    ) internal override(ERC721, ERC721Enumerable) {\r\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\r\n    }\r\n\r\n    function _burn(\r\n        uint256 tokenId\r\n    ) internal override(ERC721, ERC721URIStorage) {\r\n        super._burn(tokenId);\r\n    }\r\n\r\n    function tokenURI(\r\n        uint256 tokenId\r\n    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    ) public view override(IERC165, ERC721, ERC721Enumerable) returns (bool) {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/mocks/MockERC20.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n\r\ncontract MockERC20 is ERC20, Ownable {\r\n    constructor() ERC20(\"MockERC20\", \"MERC20\") {\r\n        _mint(_msgSender(), 100_000_000 ether);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/mocks/MockFeeReceiver.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\ncontract MockFeeReceiver is IFeeReceiver {\r\n    function onERC20Received(\r\n        address caller,\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external override {}\r\n\r\n    receive() external payable {}\r\n}\r\n\r\n\r\n// File contracts/mocks/MockPancakePair.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\ncontract MockPancakePair is ReentrancyGuard {\r\n    constructor() {}\r\n\r\n    function swap(\r\n        address token,\r\n        address to,\r\n        uint256 amountOutMin\r\n    ) public nonReentrant {\r\n        IERC20(token).transfer(to, amountOutMin);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/mocks/MockPancakeRouter.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\ncontract MockPancakeRouter {\r\n    event MockEvent(uint256 value);\r\n\r\n    address private immutable _weth;\r\n\r\n    // See https://github.com/pancakeswap/pancake-smart-contracts/blob/master/projects/exchange-protocol/contracts/PancakeFactory.sol#L13\r\n    mapping(address => mapping(address => address)) public getPair;\r\n\r\n    constructor(\r\n        address weth,\r\n        address busd,\r\n        address wsi,\r\n        address wethPair,\r\n        address busdPair\r\n    ) {\r\n        // BNB\r\n        _weth = weth;\r\n\r\n        // BNB <-> WSI\r\n        getPair[weth][wsi] = wethPair;\r\n        getPair[wsi][weth] = wethPair;\r\n\r\n        // BUSD <-> WSI\r\n        getPair[busd][wsi] = busdPair;\r\n        getPair[wsi][busd] = busdPair;\r\n    }\r\n\r\n    function WETH() public view returns (address) {\r\n        return _weth;\r\n    }\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        public\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity)\r\n    {\r\n        address pair = getPair[_weth][token];\r\n\r\n        IERC20(token).transferFrom(msg.sender, pair, amountTokenDesired);\r\n\r\n        return (amountTokenDesired, msg.value, 0);\r\n    }\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) public {\r\n        require(amountIn > 0, \"MockPancakeRouter: Invalid input amount\");\r\n\r\n        address pair = getPair[path[0]][path[1]];\r\n\r\n        IERC20(path[0]).transferFrom(msg.sender, pair, amountIn);\r\n        MockPancakePair(pair).swap(path[1], to, amountIn);\r\n        //payable(to).transfer(amountIn);\r\n    }\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) public payable {\r\n        address pair = getPair[path[0]][path[1]];\r\n\r\n        IERC20(path[0]).transfer(pair, msg.value);\r\n        MockPancakePair(pair).swap(path[1], to, amountOutMin);\r\n    }\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) public {\r\n        address pair = getPair[path[0]][path[1]];\r\n\r\n        IERC20(path[0]).transferFrom(msg.sender, pair, amountIn);\r\n        MockPancakePair(pair).swap(\r\n            path[1],\r\n            to,\r\n            amountOutMin > 0 ? amountOutMin : amountIn\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// File contracts/mocks/MockNonPayable.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\ncontract MockNonPayable {\r\n  constructor() {\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenSlayed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROCESSOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLAYER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLAY_INACTIVE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTokenForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"addTokenForUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimableToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToWithdraw\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lastClaimedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lastSlayedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"slayTokenForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"slayTokenForUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"slayedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RewardDistributor", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000837a130aed114300bab4f9f1f4f500682f7efd48", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://eb64d15faf961f17525e253ea0b0d38b872e63e63af770d1d41f083e5fb6f106"}