{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/UnizenDexAggrV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {IAxelarGasService} from \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGasService.sol\\\";\\nimport {IAxelarGateway} from \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\\\";\\nimport {EthReceiver} from \\\"./helpers/EthReceiver.sol\\\";\\nimport {AxelarHelper} from \\\"./helpers/AxelarHelper.sol\\\";\\nimport {MessageSenderApp} from \\\"./interfaces/MessageSenderApp.sol\\\";\\nimport {IMessageReceiverApp} from \\\"./interfaces/IMessageReceiverApp.sol\\\";\\nimport {IUnizenTradeV2} from \\\"./interfaces/IUnizenTradeV2.sol\\\";\\nimport {IUnizenDexAggr} from \\\"./interfaces/IUnizenDexAggr.sol\\\";\\nimport {Controller} from \\\"./dependencies/Controller.sol\\\";\\nimport {IFeeClaimer} from \\\"./interfaces/IFeeClaimer.sol\\\";\\nimport {MsgDataTypes} from \\\"./libraries/MsgDataTypes.sol\\\";\\n\\ncontract UnizenDexAggrV2 is\\n    IUnizenTradeV2,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    MessageSenderApp,\\n    IMessageReceiverApp,\\n    ReentrancyGuardUpgradeable,\\n    EthReceiver,\\n    AxelarHelper\\n{\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    Controller public unizenController;\\n    address public vipOracle;\\n    uint256 public tradingFee;\\n    uint256 public vipFee;\\n    address public treasury;\\n\\n    // Celer address\\n    address public celrMsgBus;\\n    address public executorReceiver;\\n    mapping(uint16 => address) public destAddr;\\n    mapping(address => uint64) public celrPerUserNonce;\\n    mapping(address => bool) public celrAssets;\\n\\n    // Axelar address\\n    IAxelarGasService public axlGasService;\\n    IAxelarGateway public axlGateway;\\n\\n    //FeeClaimer smart contract address\\n    address public feeClaimer;\\n    // mapping(address => uint256) public unizenEarnedFee; //Integrator shared fee\\n    mapping(address => uint256) public _psEarned; //PS fee\\n    mapping(address => mapping(address => uint256)) public integratorPSEarned;\\n    uint256 public limitShare;\\n    // Temp variable struct\\n    struct EWT {\\n        address user;\\n        address dstToken;\\n        uint256 actualQuote;\\n        string uuid;\\n        uint256 userPSFee;\\n        SwapCall[] dstCalls;\\n    }\\n    modifier onlyMessageBus() {\\n        require(msg.sender == celrMsgBus, \\\"Only-Msg-Bus\\\");\\n        _;\\n    }\\n\\n    function initialize() public initializer {\\n        __UnizenDexAggr_init();\\n    }\\n\\n    function __Controller_init_() internal onlyInitializing {\\n        __Ownable_init();\\n        __Pausable_init();\\n    }\\n\\n    function __UnizenDexAggr_init() internal onlyInitializing {\\n        __Controller_init_();\\n        __ReentrancyGuard_init();\\n    }\\n\\n    // ADMIN function\\n    function setLimitShare(uint256 _limitShare) external onlyOwner {\\n        limitShare = _limitShare;\\n    }\\n\\n    function setFeeClaimer(address feeClaimerAddr) external onlyOwner {\\n        feeClaimer = feeClaimerAddr;\\n    }\\n\\n    function setcelrMsgBus(address msgBus) external onlyOwner {\\n        celrMsgBus = msgBus;\\n    }\\n\\n    function setdestAddr(\\n        uint16 chainId,\\n        address chainDestAddr\\n    ) external onlyOwner {\\n        destAddr[chainId] = chainDestAddr;\\n    }\\n\\n    function setIntermediaryAllowed(\\n        address intermediary,\\n        bool allowed\\n    ) external onlyOwner {\\n        celrAssets[intermediary] = allowed;\\n    }\\n\\n    function setUnizenController(address controller) external onlyOwner {\\n        unizenController = Controller(payable(controller));\\n    }\\n\\n    function setExecutorReceiver(address controller) external onlyOwner {\\n        executorReceiver = payable(controller);\\n    }\\n\\n    function setAxelarGasService(address _axelarGasService) external onlyOwner {\\n        axlGasService = IAxelarGasService(_axelarGasService);\\n    }\\n\\n    function setAxelarGateway(address _axelarGateway) external onlyOwner {\\n        axlGateway = IAxelarGateway(_axelarGateway);\\n    }\\n\\n    function approveRouter(address token, address router) external onlyOwner {\\n        IERC20(token).safeApprove(router, type(uint256).max);\\n    }\\n\\n    function swapCLR(\\n        CrossChainSwapClr memory swapInfo,\\n        SwapCall[] memory calls,\\n        SwapCall[] memory dstCalls\\n    ) external payable nonReentrant {\\n        require(destAddr[swapInfo.dstChain] != address(0), \\\"Invalid-address\\\");\\n        require(\\n            celrAssets[swapInfo.intermediary] == true,\\n            \\\"Celer-stable-not-set-yet\\\"\\n        );\\n        ContractStatus memory contractStatus = ContractStatus(0, 0, 0, 0, 0, 0);\\n        uint256 amount = swapInfo.amount;\\n        contractStatus.balanceDstBefore = IERC20(swapInfo.intermediary)\\n            .balanceOf(address(this));\\n        if (!swapInfo.isFromNative) {\\n            require(\\n                msg.value >= swapInfo.busFee + swapInfo.executorFee,\\n                \\\"Invalid-amount\\\"\\n            );\\n            IERC20(swapInfo.srcToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                swapInfo.amount\\n            );\\n        } else {\\n            require(\\n                msg.value >=\\n                    swapInfo.amount + swapInfo.busFee + swapInfo.executorFee,\\n                \\\"Invalid-amount\\\"\\n            );\\n        }\\n        if (\\n            bytes(swapInfo.uuid).length != 0 &&\\n            IUnizenDexAggr(address(unizenController)).integratorFees(\\n                swapInfo.uuid\\n            ) !=\\n            0\\n        ) {\\n            amount =\\n                amount -\\n                _takeIntegratorFee(\\n                    swapInfo.uuid,\\n                    swapInfo.isFromNative,\\n                    swapInfo.srcToken,\\n                    amount\\n                );\\n        }\\n        contractStatus.balanceSrcBefore = swapInfo.isFromNative\\n            ? address(this).balance\\n            : IERC20(swapInfo.srcToken).balanceOf(address(this));\\n\\n        // pay executor fee\\n        payable(executorReceiver).sendValue(swapInfo.executorFee);\\n\\n        for (uint8 i = 0; i < calls.length; i++) {\\n            require(calls[i].amount != 0, \\\"Invalid-trade-amount\\\");\\n            require(\\n                unizenController.isWhiteListedDex(calls[i].targetExchange),\\n                \\\"Not-verified-dex\\\"\\n            );\\n            if (!swapInfo.isFromNative) {\\n                IERC20(swapInfo.srcToken).safeApprove(\\n                    calls[i].targetExchange,\\n                    0\\n                );\\n                IERC20(swapInfo.srcToken).safeApprove(\\n                    calls[i].targetExchange,\\n                    calls[i].amount\\n                );\\n            }\\n            {\\n                bool success;\\n                if (swapInfo.isFromNative) {\\n                    success = _executeTrade(\\n                        calls[i].targetExchange,\\n                        calls[i].amount,\\n                        calls[i].data\\n                    );\\n                } else {\\n                    success = _executeTrade(\\n                        calls[i].targetExchange,\\n                        0,\\n                        calls[i].data\\n                    );\\n                }\\n                require(success, \\\"Call-Failed\\\");\\n            }\\n        }\\n\\n        contractStatus.balanceDstAfter = IERC20(swapInfo.intermediary)\\n            .balanceOf(address(this));\\n        contractStatus.bridgeAmount =\\n            contractStatus.balanceDstAfter -\\n            contractStatus.balanceDstBefore;\\n\\n        require(contractStatus.bridgeAmount > 0, \\\"Something-went-wrong\\\");\\n        bytes memory payload = abi.encode(\\n            msg.sender,\\n            swapInfo.dstToken,\\n            swapInfo.actualQuote,\\n            swapInfo.uuid,\\n            dstCalls\\n        ); // any changes in CELR payload should be changed in receive, fallback and refund functions\\n        contractStatus.userNonce = celrPerUserNonce[msg.sender];\\n        {\\n            _crossChainTransferWithSwap(\\n                destAddr[swapInfo.dstChain],\\n                swapInfo.srcChain,\\n                swapInfo.dstChain,\\n                payload,\\n                swapInfo.slippage,\\n                contractStatus.userNonce,\\n                swapInfo.busFee,\\n                swapInfo.intermediary,\\n                contractStatus.bridgeAmount\\n            );\\n        }\\n        celrPerUserNonce[msg.sender] = contractStatus.userNonce + 1;\\n        emit CrossChainCelerSwapped(\\n            uint16(swapInfo.dstChain),\\n            msg.sender,\\n            contractStatus.bridgeAmount,\\n            swapInfo.apiId\\n        );\\n        // calculate remaining srcToken and refund back to the user\\n\\n        uint diff;\\n        if (!swapInfo.isFromNative) {\\n            contractStatus.balanceSrcAfter = IERC20(swapInfo.srcToken)\\n                .balanceOf(address(this));\\n            diff =\\n                amount +\\n                contractStatus.balanceSrcAfter -\\n                contractStatus.balanceSrcBefore;\\n            if (diff > 0) {\\n                IERC20(swapInfo.srcToken).safeTransfer(msg.sender, diff);\\n            }\\n        } else {\\n            contractStatus.balanceSrcAfter = address(this).balance;\\n            diff =\\n                amount +\\n                swapInfo.executorFee +\\n                swapInfo.busFee +\\n                contractStatus.balanceSrcAfter -\\n                contractStatus.balanceSrcBefore;\\n            if (diff > 0) {\\n                payable(msg.sender).sendValue(diff);\\n            }\\n        }\\n    }\\n\\n    function _executeTrade(\\n        address _targetExchange,\\n        uint256 _nativeAmount,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = _targetExchange.call{value: _nativeAmount}(_data);\\n        return success;\\n    }\\n\\n    function _crossChainTransferWithSwap(\\n        address _receiver,\\n        uint64 _chainId,\\n        uint64 _dstChainId,\\n        bytes memory payload,\\n        uint32 _maxBridgeSlippage,\\n        uint64 _nonce,\\n        uint256 _fee,\\n        address srcTokenOut,\\n        uint256 srcAmtOut\\n    ) private {\\n        sendMessageWithTransfer(\\n            _receiver,\\n            srcTokenOut,\\n            srcAmtOut,\\n            _dstChainId,\\n            _nonce,\\n            _maxBridgeSlippage,\\n            payload,\\n            MsgDataTypes.BridgeSendType.Liquidity,\\n            _fee,\\n            celrMsgBus\\n        );\\n    }\\n\\n    /**\\n     * @notice called by MessageBus when the tokens are checked to be arrived at this contract's address.\\n               sends the amount received to the receiver. swaps beforehand if swap behavior is defined in message\\n     * NOTE: if the swap fails, it sends the tokens received directly to the receiver as fallback behavior\\n     * @param _token the address of the token sent through the bridge\\n     * @param _amount the amount of tokens received at this contract through the cross-chain bridge\\n     * @param _srcChainId source chain ID\\n     * @param _payload SwapRequest message that defines the swap behavior on this destination chain\\n     */\\n    function executeMessageWithTransfer(\\n        address, // _sender\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _payload,\\n        address // executor\\n    )\\n        external\\n        payable\\n        override\\n        onlyMessageBus\\n        returns (IMessageReceiverApp.ExecutionStatus)\\n    {\\n        EWT memory ewt;\\n        {\\n            (\\n                ewt.user,\\n                ewt.dstToken,\\n                ewt.actualQuote,\\n                ewt.uuid,\\n                ewt.userPSFee,\\n                ewt.dstCalls\\n            ) = abi.decode(\\n                _payload,\\n                (address, address, uint256, string, uint256, SwapCall[])\\n            );\\n        }\\n        emit CrossChainCelerSwapped(uint16(_srcChainId), ewt.user, _amount, 0);\\n        if (ewt.dstCalls.length == 0) {\\n            // user doesnt want to swap, want to take stable\\n            if (_amount > ewt.actualQuote) {\\n                uint256 profitShare = getPSShare(\\n                    _amount,\\n                    ewt.actualQuote,\\n                    ewt.userPSFee,\\n                    ewt.uuid,\\n                    ewt.dstToken\\n                );\\n\\n                unchecked {\\n                    _amount -= profitShare;\\n                }\\n            }\\n            IERC20(_token).safeTransfer(ewt.user, _amount);\\n            return IMessageReceiverApp.ExecutionStatus.Success;\\n        }\\n        ContractStatusDstCLR memory contractStatus = ContractStatusDstCLR(\\n            0,\\n            0,\\n            0\\n        );\\n        if (ewt.dstToken == address(0)) {\\n            // trade to native\\n            contractStatus.balanceDstBefore = address(this).balance; // eth balance of contract\\n        } else {\\n            contractStatus.balanceDstBefore = IERC20(ewt.dstToken).balanceOf(\\n                address(this)\\n            );\\n        }\\n        contractStatus.balanceStableBefore = IERC20(_token).balanceOf(\\n            address(this)\\n        );\\n        for (\\n            _srcChainId = 0;\\n            _srcChainId < ewt.dstCalls.length;\\n            _srcChainId++\\n        ) {\\n            require(\\n                ewt.dstCalls[_srcChainId].amount >= 0,\\n                \\\"Invalid-trade-amount\\\"\\n            );\\n            require(\\n                unizenController.isWhiteListedDex(\\n                    ewt.dstCalls[_srcChainId].targetExchange\\n                ),\\n                \\\"Not-verified-dex\\\"\\n            );\\n            IERC20(_token).safeApprove(\\n                ewt.dstCalls[_srcChainId].targetExchange,\\n                0\\n            );\\n            IERC20(_token).safeApprove(\\n                ewt.dstCalls[_srcChainId].targetExchange,\\n                _amount\\n            );\\n            _executeTrade(\\n                ewt.dstCalls[_srcChainId].targetExchange,\\n                0,\\n                ewt.dstCalls[_srcChainId].data\\n            );\\n        }\\n        // return token to user\\n        {\\n            _amount =\\n                _amount +\\n                IERC20(_token).balanceOf(address(this)) -\\n                contractStatus.balanceStableBefore;\\n\\n            if (_amount > 0) {\\n                IERC20(_token).safeTransfer(ewt.user, _amount);\\n            }\\n            _amount = 0; // reset value\\n            if (ewt.dstToken == address(0)) {\\n                // trade to native\\n                contractStatus.balanceDstAfter = address(this).balance; // eth balance of contract\\n                _amount =\\n                    contractStatus.balanceDstAfter -\\n                    contractStatus.balanceDstBefore;\\n                if (_amount > 0) {\\n                    if (_amount > ewt.actualQuote) {\\n                        uint256 profitShare = getPSShare(\\n                            _amount,\\n                            ewt.actualQuote,\\n                            ewt.userPSFee,\\n                            ewt.uuid,\\n                            ewt.dstToken\\n                        );\\n\\n                        unchecked {\\n                            _amount -= profitShare;\\n                        }\\n                    }\\n                    payable(ewt.user).sendValue(_amount);\\n                }\\n            } else {\\n                contractStatus.balanceDstAfter = IERC20(ewt.dstToken).balanceOf(\\n                    address(this)\\n                );\\n                _amount =\\n                    contractStatus.balanceDstAfter -\\n                    contractStatus.balanceDstBefore;\\n                if (_amount > 0) {\\n                    if (_amount > ewt.actualQuote) {\\n                        uint256 profitShare = getPSShare(\\n                            _amount,\\n                            ewt.actualQuote,\\n                            ewt.userPSFee,\\n                            ewt.uuid,\\n                            ewt.dstToken\\n                        );\\n                        unchecked {\\n                            _amount -= profitShare;\\n                        }\\n                    }\\n                    IERC20(ewt.dstToken).safeTransfer(ewt.user, _amount);\\n                }\\n            }\\n        }\\n\\n        // always return success since swap failure is already handled in-place\\n        return IMessageReceiverApp.ExecutionStatus.Success;\\n    }\\n\\n    /**\\n     * @notice called by MessageBus when the executeMessageWithTransfer call fails. does nothing but emitting a \\\"fail\\\" event\\n     * @param _srcChainId source chain ID\\n     * @param _message SwapRequest message that defines the swap behavior on this destination chain\\n     */\\n    function executeMessageWithTransferFallback(\\n        address _sender, // _sender\\n        address _token, // _token\\n        uint256 _amount, // _amount\\n        uint64 _srcChainId,\\n        bytes memory _message,\\n        address // executor\\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\\n        // TODO: implement trustedremotelookup check\\n\\n        (address user, , , , ) = abi.decode(\\n            _message,\\n            (address, address, uint256, string, SwapCall[])\\n        );\\n\\n        IERC20(_token).safeTransfer(user, _amount);\\n\\n        // always return fail to mark this transfer as failed since if this function is called then there nothing more\\n        // we can do in this app as the swap failures are already handled in executeMessageWithTransfer\\n        return ExecutionStatus.Fail;\\n    }\\n\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address // executor\\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\\n        (address user, , , , ) = abi.decode(\\n            _message,\\n            (address, address, uint256, string, SwapCall[])\\n        );\\n        IERC20(_token).safeTransfer(user, _amount);\\n        return ExecutionStatus.Success;\\n    }\\n\\n    function swapAxelar(\\n        CrossChainSwapAxelar memory swapInfo,\\n        SwapCall[] calldata calls, // trade source chain from src assets to axlUSDC/USDC\\n        SwapCall[] calldata dstCalls\\n    ) external payable whenNotPaused nonReentrant {\\n        require(destAddr[swapInfo.dstChain] != address(0), \\\"Invalid-address\\\");\\n        string memory sibling = _addressToString(destAddr[swapInfo.dstChain]);\\n\\n        ContractStatus memory contractStatus = ContractStatus(0, 0, 0, 0, 0, 0);\\n        address axlStable = axlGateway.tokenAddresses(swapInfo.assetSymbol);\\n\\n        // balance of axlUSDC/USDC\\n        contractStatus.balanceDstBefore = IERC20(axlStable).balanceOf(\\n            address(this)\\n        );\\n        if (!swapInfo.isFromNative) {\\n            IERC20(swapInfo.srcToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                swapInfo.amount\\n            );\\n        } else {\\n            require(\\n                msg.value >= swapInfo.amount + swapInfo.gas,\\n                \\\"Invalid-amount\\\"\\n            );\\n        }\\n\\n        if (\\n            bytes(swapInfo.uuid).length != 0 &&\\n            IUnizenDexAggr(address(unizenController)).integratorFees(\\n                swapInfo.uuid\\n            ) !=\\n            0\\n        ) {\\n            swapInfo.amount =\\n                swapInfo.amount -\\n                _takeIntegratorFee(\\n                    swapInfo.uuid,\\n                    swapInfo.isFromNative,\\n                    swapInfo.srcToken,\\n                    swapInfo.amount\\n                );\\n        }\\n        contractStatus.balanceSrcBefore = swapInfo.isFromNative\\n            ? address(this).balance\\n            : IERC20(swapInfo.srcToken).balanceOf(address(this));\\n\\n        for (uint8 i = 0; i < calls.length; i++) {\\n            require(calls[i].amount != 0, \\\"Invalid-trade-amount\\\");\\n            require(\\n                unizenController.isWhiteListedDex(calls[i].targetExchange),\\n                \\\"Not-verified-dex\\\"\\n            );\\n            bool success;\\n            if (msg.value != 0) {\\n                // trade ETH\\n                success = _executeTrade(\\n                    calls[i].targetExchange,\\n                    calls[i].amount,\\n                    calls[i].data\\n                );\\n            } else {\\n                // trade ERC20\\n                IERC20(swapInfo.srcToken).safeApprove(\\n                    calls[i].targetExchange,\\n                    0\\n                );\\n                IERC20(swapInfo.srcToken).safeApprove(\\n                    calls[i].targetExchange,\\n                    calls[i].amount\\n                );\\n\\n                success = _executeTrade(\\n                    calls[i].targetExchange,\\n                    0,\\n                    calls[i].data\\n                );\\n            }\\n            require(success, \\\"Call-Failed\\\");\\n        }\\n        // bridge amount (axlUSDC/USDC)\\n        {\\n            uint256 bridgeAmount = IERC20(axlStable).balanceOf(address(this)) -\\n                contractStatus.balanceDstBefore;\\n            bytes memory payload = abi.encode(\\n                msg.sender,\\n                swapInfo.dstToken,\\n                swapInfo.actualQuote,\\n                swapInfo.uuid,\\n                dstCalls\\n            );\\n            string memory tokenSymbol = swapInfo.assetSymbol;\\n            axlGasService.payNativeGasForContractCallWithToken{\\n                value: swapInfo.gas\\n            }(\\n                address(this),\\n                swapInfo.dstChainName,\\n                sibling,\\n                payload,\\n                tokenSymbol,\\n                bridgeAmount,\\n                msg.sender\\n            );\\n            axlGateway.callContractWithToken(\\n                swapInfo.dstChainName,\\n                sibling,\\n                payload,\\n                tokenSymbol,\\n                bridgeAmount\\n            );\\n\\n            emit CrossChainAxelar(\\n                block.chainid,\\n                msg.sender,\\n                bridgeAmount,\\n                swapInfo.apiId\\n            );\\n        }\\n        uint diff;\\n        if (!swapInfo.isFromNative) {\\n            contractStatus.balanceSrcAfter = IERC20(swapInfo.srcToken)\\n                .balanceOf(address(this));\\n            diff =\\n                swapInfo.amount +\\n                contractStatus.balanceSrcAfter -\\n                contractStatus.balanceSrcBefore;\\n            if (diff > 0) {\\n                IERC20(swapInfo.srcToken).safeTransfer(msg.sender, diff);\\n            }\\n        } else {\\n            contractStatus.balanceSrcAfter = address(this).balance;\\n            diff =\\n                swapInfo.amount +\\n                contractStatus.balanceSrcAfter -\\n                contractStatus.balanceSrcBefore;\\n            if (diff > 0) {\\n                payable(msg.sender).sendValue(diff);\\n            }\\n        }\\n    }\\n\\n    /** Axelar function on dest chain, allow gateway call */\\n    function executeWithToken(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) external {\\n        {\\n            bytes32 payloadHash = keccak256(payload);\\n            require(\\n                axlGateway.validateContractCallAndMint(\\n                    commandId,\\n                    sourceChain,\\n                    sourceAddress,\\n                    payloadHash,\\n                    tokenSymbol,\\n                    amount\\n                ),\\n                \\\"Not-Approved-By-Gateway\\\"\\n            );\\n        }\\n\\n        address _token = axlGateway.tokenAddresses(tokenSymbol);\\n        EWT memory ewt;\\n        {\\n            (\\n                ewt.user,\\n                ewt.dstToken,\\n                ewt.actualQuote,\\n                ewt.uuid,\\n                ewt.userPSFee,\\n                ewt.dstCalls\\n            ) = abi.decode(\\n                payload,\\n                (address, address, uint256, string, uint256, SwapCall[])\\n            );\\n            emit CrossChainAxelarSwapped(sourceChain, ewt.user, amount, 0);\\n        }\\n        if (ewt.dstCalls.length == 0) {\\n            // user doesnt want to swap, want to take stable\\n            if (amount > ewt.actualQuote) {\\n                uint256 profitShare = getPSShare(\\n                    amount,\\n                    ewt.actualQuote,\\n                    ewt.userPSFee,\\n                    ewt.uuid,\\n                    ewt.dstToken\\n                );\\n\\n                unchecked {\\n                    amount -= profitShare;\\n                }\\n            }\\n            IERC20(_token).safeTransfer(ewt.user, amount);\\n            return;\\n        }\\n        ContractStatus memory contractStatus = ContractStatus(0, 0, 0, 0, 0, 0);\\n        contractStatus.balanceSrcBefore = IERC20(_token).balanceOf(\\n            address(this)\\n        );\\n        if (ewt.dstToken == address(0)) {\\n            // trade to native\\n            contractStatus.balanceDstBefore = address(this).balance; // eth balance of contract\\n        } else {\\n            contractStatus.balanceDstBefore = IERC20(ewt.dstToken).balanceOf(\\n                address(this)\\n            );\\n        }\\n        for (uint8 i = 0; i < ewt.dstCalls.length; i++) {\\n            require(ewt.dstCalls[i].amount >= 0, \\\"Invalid-trade-amount\\\");\\n            require(\\n                unizenController.isWhiteListedDex(\\n                    ewt.dstCalls[i].targetExchange\\n                ),\\n                \\\"Not-verified-dex\\\"\\n            );\\n            IERC20(_token).safeApprove(ewt.dstCalls[i].targetExchange, 0);\\n            IERC20(_token).safeApprove(ewt.dstCalls[i].targetExchange, amount);\\n            _executeTrade(\\n                ewt.dstCalls[i].targetExchange,\\n                0,\\n                ewt.dstCalls[i].data\\n            );\\n        }\\n\\n        uint256 diff = IERC20(_token).balanceOf(address(this)) +\\n            amount -\\n            contractStatus.balanceSrcBefore;\\n        if (diff > 0) {\\n            IERC20(_token).safeTransfer(ewt.user, diff);\\n        }\\n\\n        if (ewt.dstToken == address(0)) {\\n            // trade to native\\n            contractStatus.balanceDstAfter = address(this).balance; // eth balance of contract\\n            diff =\\n                contractStatus.balanceDstAfter -\\n                contractStatus.balanceDstBefore;\\n            if (diff > ewt.actualQuote) {\\n                uint256 profitShare = getPSShare(\\n                    diff,\\n                    ewt.actualQuote,\\n                    ewt.userPSFee,\\n                    ewt.uuid,\\n                    ewt.dstToken\\n                );\\n\\n                unchecked {\\n                    diff -= profitShare;\\n                }\\n            }\\n            payable(ewt.user).sendValue(diff);\\n        } else {\\n            contractStatus.balanceDstAfter = IERC20(ewt.dstToken).balanceOf(\\n                address(this)\\n            );\\n            diff =\\n                contractStatus.balanceDstAfter -\\n                contractStatus.balanceDstBefore;\\n            if (diff > ewt.actualQuote) {\\n                uint256 profitShare = getPSShare(\\n                    diff,\\n                    ewt.actualQuote,\\n                    ewt.userPSFee,\\n                    ewt.uuid,\\n                    ewt.dstToken\\n                );\\n\\n                unchecked {\\n                    diff -= profitShare;\\n                }\\n            }\\n            IERC20(ewt.dstToken).safeTransfer(ewt.user, diff);\\n        }\\n    }\\n\\n    // emergency function\\n    function recoverAsset(address token) external onlyOwner {\\n        if (token == address(0)) {\\n            payable(msg.sender).sendValue(address(this).balance);\\n        } else {\\n            uint256 balance = IERC20(token).balanceOf(address(this));\\n            IERC20(token).safeTransfer(msg.sender, balance);\\n        }\\n    }\\n\\n    function _takeIntegratorFee(\\n        string memory uuid,\\n        bool isETHTrade,\\n        address token,\\n        uint256 amount\\n    ) private returns (uint256 totalFee) {\\n        uint256 unizenFee;\\n        totalFee =\\n            (amount *\\n                IUnizenDexAggr(address(unizenController)).integratorFees(\\n                    uuid\\n                )) /\\n            10000;\\n        //Collect integrator unizen shared fee\\n        if (\\n            IUnizenDexAggr(address(unizenController)).integratorUnizenSFP(\\n                uuid\\n            ) != 0\\n        ) {\\n            unizenFee =\\n                (totalFee *\\n                    IUnizenDexAggr(address(unizenController))\\n                        .integratorUnizenSFP(uuid)) /\\n                10000;\\n        }\\n        if (isETHTrade) {\\n            IFeeClaimer(feeClaimer).topUpFee{value: totalFee}(\\n                IUnizenDexAggr(address(unizenController)).integratorAddrs(uuid),\\n                address(0),\\n                totalFee - unizenFee,\\n                unizenFee\\n            );\\n        } else {\\n            if (IERC20(token).allowance(address(this), feeClaimer) == 0) {\\n                IERC20(token).safeApprove(feeClaimer, type(uint256).max);\\n            }\\n            IFeeClaimer(feeClaimer).topUpFee(\\n                IUnizenDexAggr(address(unizenController)).integratorAddrs(uuid),\\n                token,\\n                totalFee - unizenFee,\\n                unizenFee\\n            );\\n        }\\n        return totalFee;\\n    }\\n\\n    function unizenWithdrawPS(\\n        address payable receiver,\\n        address[] calldata tokens\\n    ) external onlyOwner {\\n        require(receiver != address(0), \\\"Invalid-address\\\");\\n        for (uint256 i; i < tokens.length; i++) {\\n            if (_psEarned[tokens[i]] > 0) {\\n                IERC20(tokens[i]).safeTransfer(receiver, _psEarned[tokens[i]]);\\n                _psEarned[tokens[i]] = 0;\\n            }\\n        }\\n        if (_psEarned[address(0)] > 0) {\\n            receiver.call{value: _psEarned[address(0)]}(\\\"\\\");\\n            _psEarned[address(0)] = 0;\\n        }\\n    }\\n\\n    function integratorsWithdrawPS(address[] calldata tokens) external {\\n        address integratorAddr = msg.sender;\\n        for (uint256 i; i < tokens.length; i++) {\\n            if (integratorPSEarned[integratorAddr][tokens[i]] > 0) {\\n                IERC20(tokens[i]).safeTransfer(\\n                    integratorAddr,\\n                    integratorPSEarned[integratorAddr][tokens[i]]\\n                );\\n                integratorPSEarned[integratorAddr][tokens[i]] = 0;\\n            }\\n        }\\n        if (integratorPSEarned[integratorAddr][address(0)] > 0) {\\n            integratorAddr.call{\\n                value: integratorPSEarned[integratorAddr][address(0)]\\n            }(\\\"\\\");\\n            integratorPSEarned[integratorAddr][address(0)] = 0;\\n        }\\n    }\\n\\n    function getPSShare(\\n        uint256 amount,\\n        uint256 actualQuote,\\n        uint256 userFee,\\n        string memory uuid,\\n        address token\\n    ) internal returns (uint256) {\\n        uint256 difference = (amount - actualQuote); // e.g. 10\\n        uint256 positiveSlippage = (difference *\\n            IUnizenDexAggr(address(unizenController)).psFee()) / 10000; //e.g. 5\\n        if (\\n            IUnizenDexAggr(address(unizenController)).integratorFees(uuid) <=\\n            limitShare\\n        ) {\\n            // @dev Unizen dont take any fee, 50% of PS to Unizen, 50% of PS to Integrator\\n            integratorPSEarned[\\n                IUnizenDexAggr(address(unizenController)).integratorAddrs(uuid)\\n            ][token] += positiveSlippage / 2;\\n            _psEarned[token] += positiveSlippage / 2;\\n            return positiveSlippage;\\n        }\\n\\n        //@dev based on userFee we calculat how much they get of the positive slipage\\n        uint256 psAmount = (positiveSlippage * userFee) / 10000;\\n        _psEarned[token] = _psEarned[token] + (positiveSlippage - psAmount);\\n        return psAmount;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGasService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// This should be owned by the microservice that is paying for gas.\\ninterface IAxelarGasService {\\n    error NothingReceived();\\n    error InvalidAddress();\\n    error NotCollector();\\n    error InvalidAmounts();\\n\\n    event GasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForExpressCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForExpressCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasAdded(bytes32 indexed txHash, uint256 indexed logIndex, uint256 gasFeeAmount, address refundAddress);\\n\\n    event ExpressGasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeExpressGasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address refundAddress\\n    ) external payable;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address refundAddress\\n    ) external payable;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForExpressCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForExpressCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address refundAddress\\n    ) external payable;\\n\\n    function addGas(\\n        bytes32 txHash,\\n        uint256 txIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    function addNativeGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address refundAddress\\n    ) external payable;\\n\\n    function addExpressGas(\\n        bytes32 txHash,\\n        uint256 txIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    function addNativeExpressGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address refundAddress\\n    ) external payable;\\n\\n    function collectFees(\\n        address payable receiver,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function refund(\\n        address payable receiver,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function gasCollector() external returns (address);\\n}\\n\"\r\n    },\r\n    \"node_modules/@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAxelarGateway {\\n    /**********\\\\\\n    |* Errors *|\\n    \\\\**********/\\n\\n    error NotSelf();\\n    error NotProxy();\\n    error InvalidCodeHash();\\n    error SetupFailed();\\n    error InvalidAuthModule();\\n    error InvalidTokenDeployer();\\n    error InvalidAmount();\\n    error InvalidChainId();\\n    error InvalidCommands();\\n    error TokenDoesNotExist(string symbol);\\n    error TokenAlreadyExists(string symbol);\\n    error TokenDeployFailed(string symbol);\\n    error TokenContractDoesNotExist(address token);\\n    error BurnFailed(string symbol);\\n    error MintFailed(string symbol);\\n    error InvalidSetMintLimitsParams();\\n    error ExceedMintLimit(string symbol);\\n\\n    /**********\\\\\\n    |* Events *|\\n    \\\\**********/\\n\\n    event TokenSent(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationAddress,\\n        string symbol,\\n        uint256 amount\\n    );\\n\\n    event ContractCall(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload\\n    );\\n\\n    event ContractCallWithToken(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload,\\n        string symbol,\\n        uint256 amount\\n    );\\n\\n    event Executed(bytes32 indexed commandId);\\n\\n    event TokenDeployed(string symbol, address tokenAddresses);\\n\\n    event ContractCallApproved(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event ContractCallApprovedWithMint(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event TokenMintLimitUpdated(string symbol, uint256 limit);\\n\\n    event OperatorshipTransferred(bytes newOperatorsData);\\n\\n    event Upgraded(address indexed implementation);\\n\\n    /********************\\\\\\n    |* Public Functions *|\\n    \\\\********************/\\n\\n    function sendToken(\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function callContract(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    function callContractWithToken(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function isContractCallApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash\\n    ) external view returns (bool);\\n\\n    function isContractCallAndMintApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external view returns (bool);\\n\\n    function validateContractCall(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash\\n    ) external returns (bool);\\n\\n    function validateContractCallAndMint(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function authModule() external view returns (address);\\n\\n    function tokenDeployer() external view returns (address);\\n\\n    function tokenMintLimit(string memory symbol) external view returns (uint256);\\n\\n    function tokenMintAmount(string memory symbol) external view returns (uint256);\\n\\n    function allTokensFrozen() external view returns (bool);\\n\\n    function implementation() external view returns (address);\\n\\n    function tokenAddresses(string memory symbol) external view returns (address);\\n\\n    function tokenFrozen(string memory symbol) external view returns (bool);\\n\\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\\n\\n    function adminEpoch() external view returns (uint256);\\n\\n    function adminThreshold(uint256 epoch) external view returns (uint256);\\n\\n    function admins(uint256 epoch) external view returns (address[] memory);\\n\\n    /*******************\\\\\\n    |* Admin Functions *|\\n    \\\\*******************/\\n\\n    function setTokenMintLimits(string[] calldata symbols, uint256[] calldata limits) external;\\n\\n    function upgrade(\\n        address newImplementation,\\n        bytes32 newImplementationCodeHash,\\n        bytes calldata setupParams\\n    ) external;\\n\\n    /**********************\\\\\\n    |* External Functions *|\\n    \\\\**********************/\\n\\n    function setup(bytes calldata params) external;\\n\\n    function execute(bytes calldata input) external;\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/EthReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\nabstract contract EthReceiver {\\n    receive() external payable {\\n        require(msg.sender != tx.origin, \\\"Rejected\\\");\\n    }\\n}\"\r\n    },\r\n    \"contracts/helpers/AxelarHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\nabstract contract AxelarHelper {\\n    function _addressToString(address a) internal pure returns (string memory) {\\n        bytes memory data = abi.encodePacked(a);\\n        bytes memory characters = \\\"0123456789abcdef\\\";\\n        bytes memory byteString = new bytes(2 + data.length * 2);\\n\\n        byteString[0] = \\\"0\\\";\\n        byteString[1] = \\\"x\\\";\\n\\n        for (uint256 i; i < data.length; ++i) {\\n            byteString[2 + i * 2] = characters[uint256(uint8(data[i] >> 4))];\\n            byteString[3 + i * 2] = characters[uint256(uint8(data[i] & 0x0f))];\\n        }\\n        return string(byteString);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/MessageSenderApp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\n// import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../libraries/MsgDataTypes.sol\\\";\\nimport \\\"../libraries/MessageSenderLib.sol\\\";\\n// import \\\"../messagebus/MessageBus.sol\\\";\\n// import \\\"./MessageBusAddress.sol\\\";\\n\\nabstract contract MessageSenderApp {\\n    using SafeERC20 for IERC20;\\n\\n    // ============== Utility functions called by apps ==============\\n\\n    // /**\\n    //  * @notice Sends a message to a contract on another chain.\\n    //  * Sender needs to make sure the uniqueness of the message Id, which is computed as\\n    //  * hash(type.MessageOnly, sender, receiver, srcChainId, srcTxHash, dstChainId, message).\\n    //  * If messages with the same Id are sent, only one of them will succeed at dst chain.\\n    //  * @param _receiver The address of the destination app contract.\\n    //  * @param _dstChainId The destination chain ID.\\n    //  * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n    //  * @param _fee The fee amount to pay to MessageBus.\\n    //  */\\n    // function sendMessage(\\n    //     address _receiver,\\n    //     uint64 _dstChainId,\\n    //     bytes memory _message,\\n    //     uint256 _fee\\n    // ) internal {\\n    //     MessageSenderLib.sendMessage(_receiver, _dstChainId, _message, messageBus, _fee);\\n    // }\\n\\n    // // Send message to non-evm chain with bytes for receiver address,\\n    // // otherwise same as above.\\n    // function sendMessage(\\n    //     bytes calldata _receiver,\\n    //     uint64 _dstChainId,\\n    //     bytes memory _message,\\n    //     uint256 _fee\\n    // ) internal {\\n    //     MessageSenderLib.sendMessage(_receiver, _dstChainId, _message, messageBus, _fee);\\n    // }\\n\\n    /**\\n     * @notice Sends a message associated with a transfer to a contract on another chain.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     *        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least\\n     *        (100% - max slippage percentage) * amount or the transfer can be refunded.\\n     *        Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     *        If message is empty, only the token transfer will be sent\\n     * @param _bridgeSendType One of the {BridgeSendType} enum.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        uint256 _fee,\\n        address messageBus\\n    ) internal returns (bytes32) {\\n        return\\n            MessageSenderLib.sendMessageWithTransfer(\\n                _receiver,\\n                _token,\\n                _amount,\\n                _dstChainId,\\n                _nonce,\\n                _maxSlippage,\\n                _message,\\n                _bridgeSendType,\\n                messageBus,\\n                _fee\\n            );\\n    }\\n\\n    // /**\\n    //  * @notice Sends a token transfer via a bridge.\\n    //  * @dev sendMessageWithTransfer with empty message\\n    //  * @param _receiver The address of the destination app contract.\\n    //  * @param _token The address of the token to be sent.\\n    //  * @param _amount The amount of tokens to be sent.\\n    //  * @param _dstChainId The destination chain ID.\\n    //  * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n    //  * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n    //  *        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least\\n    //  *        (100% - max slippage percentage) * amount or the transfer can be refunded.\\n    //  *        Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\\n    //  * @param _bridgeSendType One of the {BridgeSendType} enum.\\n    //  */\\n    // function sendTokenTransfer(\\n    //     address _receiver,\\n    //     address _token,\\n    //     uint256 _amount,\\n    //     uint64 _dstChainId,\\n    //     uint64 _nonce,\\n    //     uint32 _maxSlippage,\\n    //     MsgDataTypes.BridgeSendType _bridgeSendType,\\n    //     address messageBus\\n    // ) internal returns (bytes32) {\\n    //     return\\n    //         MessageSenderLib.sendMessageWithTransfer(\\n    //             _receiver,\\n    //             _token,\\n    //             _amount,\\n    //             _dstChainId,\\n    //             _nonce,\\n    //             _maxSlippage,\\n    //             \\\"\\\", // empty message, which will not trigger sendMessage\\n    //             _bridgeSendType,\\n    //             messageBus,\\n    //             0\\n    //         );\\n    // }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMessageReceiverApp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageReceiverApp {\\n    enum ExecutionStatus {\\n        Fail, // execution failed, finalized\\n        Success, // execution succeeded, finalized\\n        Retry // execution rejected, can retry later\\n    }\\n\\n    // /**\\n    //  * @notice Called by MessageBus to execute a message\\n    //  * @param _sender The address of the source app contract\\n    //  * @param _srcChainId The source chain ID where the transfer is originated from\\n    //  * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n    //  * @param _executor Address who called the MessageBus execution function\\n    //  */\\n    // function executeMessage(\\n    //     address _sender,\\n    //     uint64 _srcChainId,\\n    //     bytes calldata _message,\\n    //     address _executor\\n    // ) external payable returns (ExecutionStatus);\\n\\n    // // same as above, except that sender is an non-evm chain address,\\n    // // otherwise same as above.\\n    // function executeMessage(\\n    //     bytes calldata _sender,\\n    //     uint64 _srcChainId,\\n    //     bytes calldata _message,\\n    //     address _executor\\n    // ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus to execute a message with an associated token transfer.\\n     * The contract is guaranteed to have received the right amount of tokens before this function is called.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    // /**\\n    //  * @notice Only called by MessageBus if\\n    //  *         1. executeMessageWithTransfer reverts, or\\n    //  *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\\n    //  * The contract is guaranteed to have received the right amount of tokens before this function is called.\\n    //  * @param _sender The address of the source app contract\\n    //  * @param _token The address of the token that comes out of the bridge\\n    //  * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n    //  * @param _srcChainId The source chain ID where the transfer is originated from\\n    //  * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n    //  * @param _executor Address who called the MessageBus execution function\\n    //  */\\n    // function executeMessageWithTransferFallback(\\n    //     address _sender,\\n    //     address _token,\\n    //     uint256 _amount,\\n    //     uint64 _srcChainId,\\n    //     bytes calldata _message,\\n    //     address _executor\\n    // ) external payable returns (ExecutionStatus);\\n\\n    // /**\\n    //  * @notice Called by MessageBus to process refund of the original transfer from this contract.\\n    //  * The contract is guaranteed to have received the refund before this function is called.\\n    //  * @param _token The token address of the original transfer\\n    //  * @param _amount The amount of the original transfer\\n    //  * @param _message The same message associated with the original transfer\\n    //  * @param _executor Address who called the MessageBus execution function\\n    //  */\\n    // function executeMessageWithTransferRefund(\\n    //     address _token,\\n    //     uint256 _amount,\\n    //     bytes calldata _message,\\n    //     address _executor\\n    // ) external payable returns (ExecutionStatus);\\n\\n    function executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus to process refund of the original transfer from this contract.\\n     * The contract is guaranteed to have received the refund before this function is called.\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUnizenTradeV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IUnizenTradeV2 {\\n    struct SwapCall {\\n        address targetExchange;\\n        uint256 amount;\\n        bytes data; // Encoded data to execute the trade by contract call\\n    }\\n\\n    struct CrossChainSwapClr {\\n        uint16 srcChain;\\n        uint16 dstChain;\\n        uint32 slippage;\\n        bool isFromNative;\\n        address srcToken;\\n        address dstToken;\\n        address intermediary;\\n        uint256 amount; // trade amount of srcToken\\n        uint256 busFee; // fee to LZ\\n        uint256 executorFee;\\n        uint256 actualQuote; // expected amount\\n        string uuid; //integrator uuid (if swap directly by unizen leave it empty \\\"\\\")\\n        uint16 apiId;\\n    }\\n\\n    struct ContractStatus {\\n        uint256 balanceSrcBefore;\\n        uint256 balanceSrcAfter;\\n        uint256 balanceDstBefore;\\n        uint256 balanceDstAfter;\\n        uint64 userNonce;\\n        uint256 bridgeAmount;\\n    }\\n\\n    struct ContractStatusDstCLR {\\n        uint256 balanceStableBefore;\\n        uint256 balanceDstBefore;\\n        uint256 balanceDstAfter;\\n    }\\n\\n    struct CrossChainSwapAxelar {\\n        uint16 dstChain;\\n        bool isFromNative;\\n        address srcToken;\\n        address dstToken;\\n        uint256 amount; // trade amount of srcToken\\n        uint256 gas; // fee to axlGas\\n        uint256 actualQuote;\\n        string dstChainName;\\n        string assetSymbol;\\n        string uuid;\\n        uint16 apiId;\\n    }\\n\\n    function initialize() external;\\n\\n    function setUnizenController(address controller) external;\\n\\n\\n    event CrossChainCelerSwapped(\\n        uint16 chainId,\\n        address user,\\n        uint256 valueInUSD,\\n        uint16 apiId\\n    );\\n    event CrossChainAxelar(\\n        uint256 chainId,\\n        address user,\\n        uint256 valueInUSD,\\n        uint16 apiId\\n    );\\n    event CrossChainAxelarSwapped(\\n        string sourceChain,\\n        address user,\\n        uint256 valueInUSD,\\n        uint16 apiId\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUnizenDexAggr.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IUnizenDexAggr {\\n    struct SwapCall {\\n        address targetExchange;\\n        uint256 amount;\\n        bytes data; // Encoded data to execute the trade by contract call\\n    }\\n\\n    struct SwapExactInInfo {\\n        address sender; // Sender address\\n        address receiver; // Receiver address\\n        address srcToken; //Input token\\n        address dstToken; //Output token\\n        uint256 amountIn; // amount in user want to trade\\n        uint256 amountOutMin; // expected amount out min\\n        uint256 actualQuote; // expected amount out\\n        string uuid; //integrator uuid (if swap directly by unizen leave it empty \\\"\\\")\\n        uint16 apiId;\\n        uint16 userPSFee; // User fee level based on balances across chains\\n    }\\n\\n    struct SwapExactOutInfo {\\n        address sender; // Sender address\\n        address receiver; // Receiver address\\n        address srcToken; //Input token\\n        address dstToken; //Output token\\n        uint256 amountOut; // expect amount out of user\\n        uint256 amountInMax; //amount in max that user willing to pay\\n        uint256 actualQuote; // expected amountIn,\\n        string uuid; //integrator uuid (if swap directly by unizen leave it empty \\\"\\\")\\n        uint16 apiId;\\n        uint16 userPSFee; // User fee level based on balances across chains\\n    }\\n\\n    struct CrossChainSwapSg {\\n        uint16 dstChain; // dstChainId in LZ - not network chain id\\n        uint16 srcPool; // src stable pool id\\n        uint16 dstPool; // dst stable pool id\\n        bool isFromNative;\\n        address srcToken;\\n        uint256 amount;\\n        uint256 nativeFee; // fee to LZ\\n        bool isAmountOut; // true if the swap is exactOut\\n        address dstToken;\\n        uint256 actualQuote; // expected amount out\\n        string uuid; //integrator uuid (if swap directly by unizen leave it empty \\\"\\\")\\n        uint16 apiId;\\n        uint16 userPSFee; // User fee level based on balances across chains\\n    }\\n\\n    struct SplitTrade {\\n        uint16 dstChain; // dstChainId in LZ - not network chain id\\n        uint16 srcPool; // src stable pool id\\n        uint16 dstPool; // dst stable pool id\\n        uint256[2] amount; // amount of srcToken\\n        uint256 bridgeAmount; // amount of stable token want to swap to destination chain\\n        uint256 amountOutMinSrc;\\n        uint256 amountOutMin; // amountOutMin on destination chain\\n        uint256 nativeFee; // fee to LZ\\n        address[] pathToken; // path to token out\\n        address[] pathStable; // path to stable\\n        address[] pathDstChain; // path trade on dst chain\\n    }\\n\\n    struct CallBackTrade {\\n        uint16 dstChain; // dstChainId in LZ - not network chain id\\n        uint16 srcPool; // src stable pool id\\n        uint16 dstPool; // dst stable pool id\\n        uint256 amount; // amount of srcToken\\n        uint256 amountOutMinSrc;\\n        uint256 nativeFee; // fee to LZ\\n        address[] dstExchange;\\n        bytes[] dstExchangeData;\\n        address[] pathSrcChain; // path to stable\\n    }\\n\\n    struct ContractStatus {\\n        uint256 balanceDstBefore;\\n        uint256 balanceDstAfter;\\n        uint256 balanceSrcBefore;\\n        uint256 balanceSrcAfter;\\n        uint256 totalDstAmount;\\n    }\\n\\n    event Swapped(\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address srcToken,\\n        address dstToken,\\n        address receiver,\\n        address sender,\\n        uint16 apiId\\n    );\\n\\n    event CrossChainSwapped(\\n        uint16 chainId,\\n        address user,\\n        uint256 valueInUSD,\\n        uint16 apiId\\n    );\\n\\n    function getIntegratorInfor(\\n        string memory uuid\\n    ) external view returns (address, uint256, uint256);\\n\\n    function psFee() external view returns (uint256);\\n\\n    function integratorFees(string memory uuid) external view returns (uint256);\\n\\n    function integratorAddrs(\\n        string memory uuid\\n    ) external view returns (address);\\n\\n    function integratorUnizenSFP(\\n        string memory uuid\\n    ) external view returns (uint256);\\n\\n    function psShare() external view returns (uint256);\\n\\n    function uuidType(string memory uuid) external view returns (uint8);\\n\\n\\n    function initialize() external;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/Controller.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLISENCED\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\n\\nabstract contract Controller is\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    IController\\n{\\n    mapping(address => bool) private _isVerified;\\n\\n    function __Controller_init_() internal onlyInitializing {\\n        __Ownable_init();\\n        __Pausable_init();\\n    }\\n\\n    function whiteListDex(\\n        address _exchangeAddr,\\n        bool _verification\\n    ) external override onlyOwner returns (bool) {\\n        require(_exchangeAddr != address(0), \\\"Zero-address\\\");\\n        _isVerified[_exchangeAddr] = _verification;\\n        return (_verification);\\n    }\\n\\n    function whiteListDexes(\\n        address[] memory _dexes,\\n        bool[] memory _verifications\\n    ) external onlyOwner {\\n        for (uint8 i = 0; i < _dexes.length; i++) {\\n            require(_dexes[i] != address(0), \\\"Zero-address\\\");\\n            _isVerified[_dexes[i]] = _verifications[i];\\n        }\\n    }\\n\\n    function adminPause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    function adminUnPause() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    function isWhiteListedDex(\\n        address _exchangeAddr\\n    ) public view override returns (bool) {\\n        return _isVerified[_exchangeAddr];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeClaimer.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\ninterface IFeeClaimer {\\n    function topUpFee(\\n        address feeClaimer,\\n        address token,\\n        uint256 amount,\\n        uint256 unizenAmount\\n    ) external payable returns(bool);\\n\\n    function withdrawToken(address token, address receiver) external;\\n\\n    function withdrawETH(address payable receiver) external;\\n\\n    function batchWithdrawTokensAndETH(\\n        address[] calldata tokens,\\n        address payable receiver\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/libraries/MsgDataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nlibrary MsgDataTypes {\\n    string constant ABORT_PREFIX = \\\"MSG::ABORT:\\\";\\n\\n    // bridge operation type at the sender side (src chain)\\n    enum BridgeSendType {\\n        Null,\\n        Liquidity,\\n        PegDeposit,\\n        PegBurn,\\n        PegV2Deposit,\\n        PegV2Burn,\\n        PegV2BurnFrom\\n    }\\n\\n    // bridge operation type at the receiver side (dst chain)\\n    enum TransferType {\\n        Null,\\n        LqRelay, // relay through liquidity bridge\\n        LqWithdraw, // withdraw from liquidity bridge\\n        PegMint, // mint through pegged token bridge\\n        PegWithdraw, // withdraw from original token vault\\n        PegV2Mint, // mint through pegged token bridge v2\\n        PegV2Withdraw // withdraw from original token vault v2\\n    }\\n\\n    enum MsgType {\\n        MessageWithTransfer,\\n        MessageOnly\\n    }\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail,\\n        Fallback,\\n        Pending // transient state within a transaction\\n    }\\n\\n    struct TransferInfo {\\n        TransferType t;\\n        address sender;\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        uint64 wdseq; // only needed for LqWithdraw (refund)\\n        uint64 srcChainId;\\n        bytes32 refId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct RouteInfo {\\n        address sender;\\n        address receiver;\\n        uint64 srcChainId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    // used for msg from non-evm chains with longer-bytes address\\n    struct RouteInfo2 {\\n        bytes sender;\\n        address receiver;\\n        uint64 srcChainId;\\n        bytes32 srcTxHash;\\n    }\\n\\n    // combination of RouteInfo and RouteInfo2 for easier processing\\n    struct Route {\\n        address sender; // from RouteInfo\\n        bytes senderBytes; // from RouteInfo2\\n        address receiver;\\n        uint64 srcChainId;\\n        bytes32 srcTxHash;\\n    }\\n\\n    struct MsgWithTransferExecutionParams {\\n        bytes message;\\n        TransferInfo transfer;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n\\n    struct BridgeTransferParams {\\n        bytes request;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/MessageSenderLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IBridge.sol\\\";\\nimport \\\"../interfaces/IMessageBus.sol\\\";\\nimport \\\"./MsgDataTypes.sol\\\";\\n\\nlibrary MessageSenderLib {\\n    using SafeERC20 for IERC20;\\n\\n    // ============== Internal library functions called by apps ==============\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal {\\n        IMessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\\n    }\\n\\n    // Send message to non-evm chain with bytes for receiver address,\\n    // otherwise same as above.\\n    function sendMessage(\\n        bytes calldata _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal {\\n        IMessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded. Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        (bytes32 transferId, address bridge) = sendTokenTransfer(\\n            _receiver,\\n            _token,\\n            _amount,\\n            _dstChainId,\\n            _nonce,\\n            _maxSlippage,\\n            _bridgeSendType,\\n            _messageBus\\n        );\\n        if (_message.length > 0) {\\n            IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\\n                _receiver,\\n                _dstChainId,\\n                bridge,\\n                transferId,\\n                _message\\n            );\\n        }\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Sends a token transfer via a bridge.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     */\\n    function sendTokenTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _messageBus\\n    ) internal returns (bytes32 transferId, address bridge) {\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\\n            bridge = IMessageBus(_messageBus).liquidityBridge();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            IBridge(bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n            transferId = computeLiqBridgeTransferId(_receiver, _token, _amount, _dstChainId, _nonce);\\n        // } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\\n        //     bridge = IMessageBus(_messageBus).pegVault();\\n        //     IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n        //     IOriginalTokenVault(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        //     transferId = computePegV1DepositId(_receiver, _token, _amount, _dstChainId, _nonce);\\n        // } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\\n        //     bridge = IMessageBus(_messageBus).pegBridge();\\n        //     IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n        //     IPeggedTokenBridge(bridge).burn(_token, _amount, _receiver, _nonce);\\n        //     // handle cases where certain tokens do not spend allowance for role-based burn\\n        //     IERC20(_token).safeApprove(bridge, 0);\\n        //     transferId = computePegV1BurnId(_receiver, _token, _amount, _nonce);\\n        // } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit) {\\n        //     bridge = IMessageBus(_messageBus).pegVaultV2();\\n        //     IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n        //     transferId = IOriginalTokenVaultV2(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        // } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn) {\\n        //     bridge = IMessageBus(_messageBus).pegBridgeV2();\\n        //     IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n        //     transferId = IPeggedTokenBridgeV2(bridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\\n        //     // handle cases where certain tokens do not spend allowance for role-based burn\\n        //     IERC20(_token).safeApprove(bridge, 0);\\n        // } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2BurnFrom) {\\n            // bridge = IMessageBus(_messageBus).pegBridgeV2();\\n            // IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            // transferId = IPeggedTokenBridgeV2(bridge).burnFrom(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // // handle cases where certain tokens do not spend allowance for role-based burn\\n            // IERC20(_token).safeApprove(bridge, 0);\\n        } else {\\n            revert(\\\"bridge type not supported\\\");\\n        }\\n    }\\n\\n    function computeLiqBridgeTransferId(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(address(this), _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\\n            );\\n    }\\n\\n    // function computePegV1DepositId(\\n    //     address _receiver,\\n    //     address _token,\\n    //     uint256 _amount,\\n    //     uint64 _dstChainId,\\n    //     uint64 _nonce\\n    // ) internal view returns (bytes32) {\\n    //     return\\n    //         keccak256(\\n    //             abi.encodePacked(address(this), _token, _amount, _dstChainId, _receiver, _nonce, uint64(block.chainid))\\n    //         );\\n    // }\\n\\n    // function computePegV1BurnId(\\n    //     address _receiver,\\n    //     address _token,\\n    //     uint256 _amount,\\n    //     uint64 _nonce\\n    // ) internal view returns (bytes32) {\\n    //     return keccak256(abi.encodePacked(address(this), _token, _amount, _receiver, _nonce, uint64(block.chainid)));\\n    // }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\ninterface IController {\\n    function whiteListDex(address, bool) external returns(bool);\\n    function adminPause() external; \\n    function adminUnPause() external;\\n    function isWhiteListedDex(address) external returns(bool);\\n}\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IBridge {\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external;\\n\\n    function sendNative(\\n        address _receiver,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external payable;\\n\\n    function relay(\\n        bytes calldata _relayRequest,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function transfers(bytes32 transferId) external view returns (bool);\\n\\n    function withdraws(bytes32 withdrawId) external view returns (bool);\\n\\n    function withdraw(\\n        bytes calldata _wdmsg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMessageBus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../libraries/MsgDataTypes.sol\\\";\\n\\ninterface IMessageBus {\\n    /**\\n     * @notice Send a message to a contract on another chain.\\n     * Sender needs to make sure the uniqueness of the message Id, which is computed as\\n     * hash(type.MessageOnly, sender, receiver, srcChainId, srcTxHash, dstChainId, message).\\n     * If messages with the same Id are sent, only one of them will succeed at dst chain..\\n     * A fee is charged in the native gas token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    // same as above, except that receiver is an non-evm chain address,\\n    function sendMessage(\\n        bytes calldata _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Send a message associated with a token transfer to a contract on another chain.\\n     * If messages with the same srcTransferId are sent, only one of them will succeed at dst chain..\\n     * A fee is charged in the native token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _srcBridge The bridge contract to send the transfer with.\\n     * @param _srcTransferId The transfer ID.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message not associated with a transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessage(\\n        bytes calldata _message,\\n        MsgDataTypes.RouteInfo calldata _route,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message with a successful transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransfer(\\n        bytes calldata _message,\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message with a refunded transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransferRefund(\\n        bytes calldata _message, // the same message associated with the original transfer\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdrawFee(\\n        address _account,\\n        uint256 _cumulativeFee,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Calculates the required fee for the message.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     @ @return The required fee.\\n     */\\n    function calcFee(bytes calldata _message) external view returns (uint256);\\n\\n    function liquidityBridge() external view returns (address);\\n\\n    function pegBridge() external view returns (address);\\n\\n    function pegBridgeV2() external view returns (address);\\n\\n    function pegVault() external view returns (address);\\n\\n    function pegVaultV2() external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@axelar-network/=node_modules/@axelar-network/\",\r\n      \"@nomiclabs/=node_modules/@nomiclabs/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@solidity-parser/=node_modules/@nomiclabs/buidler/node_modules/@solidity-parser/\",\r\n      \"@sushiswap/=node_modules/@sushiswap/\",\r\n      \"@uniswap/=node_modules/@uniswap/\",\r\n      \"base64-sol/=node_modules/base64-sol/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat-deploy/=node_modules/hardhat-deploy/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"sgn-v2-contracts/=node_modules/sgn-v2-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueInUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"apiId\",\"type\":\"uint16\"}],\"name\":\"CrossChainAxelar\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueInUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"apiId\",\"type\":\"uint16\"}],\"name\":\"CrossChainAxelarSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueInUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"apiId\",\"type\":\"uint16\"}],\"name\":\"CrossChainCelerSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_psEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"approveRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"axlGasService\",\"outputs\":[{\"internalType\":\"contract IAxelarGasService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"axlGateway\",\"outputs\":[{\"internalType\":\"contract IAxelarGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"celrAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"celrMsgBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"celrPerUserNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"destAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransfer\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransferFallback\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransferRefund\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executorReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeClaimer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"integratorPSEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"integratorsWithdrawPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_axelarGasService\",\"type\":\"address\"}],\"name\":\"setAxelarGasService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_axelarGateway\",\"type\":\"address\"}],\"name\":\"setAxelarGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"setExecutorReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeClaimerAddr\",\"type\":\"address\"}],\"name\":\"setFeeClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"intermediary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setIntermediaryAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limitShare\",\"type\":\"uint256\"}],\"name\":\"setLimitShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"setUnizenController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgBus\",\"type\":\"address\"}],\"name\":\"setcelrMsgBus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"chainDestAddr\",\"type\":\"address\"}],\"name\":\"setdestAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"dstChain\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isFromNative\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualQuote\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"dstChainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"assetSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uuid\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"apiId\",\"type\":\"uint16\"}],\"internalType\":\"struct IUnizenTradeV2.CrossChainSwapAxelar\",\"name\":\"swapInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IUnizenTradeV2.SwapCall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IUnizenTradeV2.SwapCall[]\",\"name\":\"dstCalls\",\"type\":\"tuple[]\"}],\"name\":\"swapAxelar\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"srcChain\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dstChain\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"slippage\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isFromNative\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"intermediary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"busFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualQuote\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uuid\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"apiId\",\"type\":\"uint16\"}],\"internalType\":\"struct IUnizenTradeV2.CrossChainSwapClr\",\"name\":\"swapInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IUnizenTradeV2.SwapCall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IUnizenTradeV2.SwapCall[]\",\"name\":\"dstCalls\",\"type\":\"tuple[]\"}],\"name\":\"swapCLR\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unizenController\",\"outputs\":[{\"internalType\":\"contract Controller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"unizenWithdrawPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vipFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vipOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UnizenDexAggrV2", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}