{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: OrbFusion.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ninterface IOrb {\r\n    struct Orb {\r\n        uint8 star;\r\n        uint8 rarity;\r\n        uint8 classType;\r\n        uint256 bornAt;\r\n    }\r\n}\r\n\r\ninterface IERC721 {\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n\r\ninterface IOrbNFT is IERC721, IOrb {\r\n\tfunction getOrb(uint256 _tokenId) external view returns (Orb memory);\r\n\r\n    function mintOrb(address to, uint8 _star, uint8 _rarity, uint8 _classType) external;\r\n\r\n    function latestOrbId() external view returns (uint256);\r\n}\r\n\r\ninterface IHolyPackage is IERC721 {\r\n    struct Package {\r\n        string holyType;\r\n        uint256 createdAt;\r\n    }\r\n\r\n    function getPackage(uint256 _packageId) external returns (Package memory);\r\n}\r\n\r\ninterface IBEP20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract OrbFusion is Ownable, IOrb {\r\n\tusing SafeMath for uint256;\r\n\r\n    IOrbNFT public orbNft;\r\n\r\n\tIHolyPackage public holyPackage;\r\n\r\n\tstruct Requirement {\r\n\t\tuint8 baseRate;\r\n\t\tuint8 addRate;\r\n\t\taddress token;\r\n\t\tuint256 tokenRequire;\r\n\t\tuint8 holyPackageMaxAmount;\r\n\t}\r\n\r\n\tmapping (uint8 => Requirement) public requirements;\r\n\r\n\tmapping (string => uint8) public orbClasses;\r\n\r\n\tuint nonce = 0;\r\n\r\n\taddress public deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address public feeAddress = 0x81F403fE697CfcF2c21C019bD546C6b36370458c;\r\n\r\n\tuint8[] public classList = [2,3,4];\r\n\r\n\tuint8 classBaseRate;\r\n\r\n\tuint8 classAddRate;\r\n\r\n\tevent Fusion(address indexed user, bool isSuccess, uint256[] orbIds, uint256 newOrbId);\r\n\r\n\tconstructor(address _orbNft, address _holyPackage, uint8 _classBaseRate, uint8 _classAddRate) {\r\n        orbNft = IOrbNFT(_orbNft);\r\n\t\tholyPackage = IHolyPackage(_holyPackage);\r\n\t\tclassBaseRate = _classBaseRate;\r\n\t\tclassAddRate = _classAddRate;\r\n\t}\r\n\r\n\tfunction fusion(uint256[] memory _orbIds, uint256[] memory _holyPackageIds) external {\r\n\t\tuint8 requiredRarity = orbNft.getOrb(_orbIds[0]).rarity;\r\n\t\trequire(requiredRarity > 2 && requiredRarity < 5, \"require: invalid rariry\");\r\n\t\tfor (uint256 k = 0; k < _orbIds.length; k++) {\r\n            require(orbNft.ownerOf(_orbIds[k]) == _msgSender(), \"require: must be owner of orb\");\r\n\t\t\trequire(orbNft.getOrb(_orbIds[k]).rarity == requiredRarity, \"require: must same rariry\");\r\n\t\t}\r\n        Requirement memory requirement = requirements[requiredRarity];\r\n\t\trequire(requirement.token != address(0), \"invalid token\");\r\n\t\tuint256 length = _holyPackageIds.length;\r\n\t\tuint8 targetClass = 0;\r\n\t\tif (length > 0) {\r\n\t\t\trequire(length <= requirement.holyPackageMaxAmount, \"exceed max holy package amount\");\r\n\t\t\tstring memory requiredHolyType = holyPackage.getPackage(_holyPackageIds[0]).holyType;\r\n\t\t\tfor (uint256 i = 0; i < length; i++) {\r\n\t\t\t\trequire(holyPackage.ownerOf(_holyPackageIds[i]) == _msgSender(), \"require: must be owner of holies\");\r\n\t\t\t\trequire(compareStrings(holyPackage.getPackage(_holyPackageIds[i]).holyType, requiredHolyType), \"require: wrong holy type\");\r\n\t\t\t}\r\n\t\t\tfor (uint256 i = 0; i < length; i++) {\r\n\t\t\t\tholyPackage.transferFrom(_msgSender(), deadAddress, _holyPackageIds[i]);\r\n\t\t\t}\r\n\t\t\ttargetClass = orbClasses[requiredHolyType];\r\n\t\t}\r\n\t\tuint8 successRate = getSuccessRate(requirement.baseRate, requirement.addRate, length);\r\n\t\trequire(successRate <= 100, \"invalid\");\r\n\t\tIBEP20(requirement.token).transferFrom(_msgSender(), feeAddress, getFee(requiredRarity));\r\n\t\tfor (uint256 k = 0; k < _orbIds.length; k++) {\r\n\t\t\torbNft.transferFrom(_msgSender(), deadAddress, _orbIds[k]);\r\n\t\t}\r\n\t\tuint256 randomNumber = getRandomNumber();\r\n\t\tbool isSuccess = randomFusion(randomNumber, successRate);\r\n\t\tuint8 classSuccessRate = getSuccessRate(classBaseRate, classAddRate, length);\r\n\t\tuint8 orbClass = randomClass(randomNumber, classSuccessRate, targetClass);\r\n\t\tuint8 rarity = requiredRarity;\r\n\t\tif (isSuccess) {\r\n\t\t\trarity = requiredRarity + 1;\r\n\t\t}\r\n\t\torbNft.mintOrb(_msgSender(), 3, rarity, orbClass);\r\n\t\temit Fusion(_msgSender(), isSuccess, _orbIds, orbNft.latestOrbId());\r\n\t}\r\n\r\n\tfunction getFee(uint8 _rarity) public view returns (uint256) {\r\n\t\tRequirement memory requirement = requirements[_rarity];\r\n\t\treturn requirement.tokenRequire;\r\n\t}\r\n\r\n\tfunction getSuccessRate(uint8 _baseRate, uint8 _addRate, uint256 _numberHolyPackage) public view returns (uint8) {\r\n\t\treturn uint8(uint256(_baseRate).add(uint256(_addRate).mul(_numberHolyPackage)));\r\n\t}\r\n\r\n\tfunction randomFusion(uint256 _randomNumber, uint8 _successRate) internal returns (bool) {\r\n        uint seed = _randomNumber % 100;\r\n        if (seed < _successRate) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\tfunction randomClass(uint256 _randomNumber, uint8 _successRate, uint8 _targetClass) internal returns (uint8) {\r\n\t\tuint256 totalClass = classList.length;\r\n\t\tuint seed = _randomNumber % 100;\r\n\t\tif (_targetClass == 0) {\r\n\t\t\treturn uint8(_randomNumber.mod(totalClass).add(1));\r\n\t\t}\r\n\t\tif (seed < _successRate) {\r\n\t\t\treturn _targetClass;\r\n\t\t}\r\n\t\tuint8[] memory classes = new uint8[](totalClass.sub(1));\r\n        uint256 count;\r\n\t\tfor (uint256 i = 0; i < totalClass; i++) {\r\n\t\t\tif (classList[i] != _targetClass) {\r\n\t\t\t\tclasses[count] = classList[i];\r\n                count++;\r\n\t\t\t}\r\n        }\r\n\t\treturn classes[_randomNumber.mod(totalClass.sub(1))];\r\n\t}\r\n\r\n\tfunction getRandomNumber() internal returns (uint) {\r\n        nonce += 1;\r\n        return uint(keccak256(abi.encodePacked(nonce, msg.sender, blockhash(block.number - 1))));\r\n    }\r\n\r\n\tfunction setRequirement(uint8 _rarity, uint8 _baseRate, uint8 _addRate, address _token, uint256 _tokenRequire, uint8 _holyPackageMaxAmount) external onlyOwner {\r\n        requirements[_rarity] = Requirement({\r\n\t\t\tbaseRate: _baseRate,\r\n\t\t\taddRate: _addRate,\r\n            token: _token,\r\n            tokenRequire: _tokenRequire,\r\n\t\t\tholyPackageMaxAmount: _holyPackageMaxAmount\r\n        });\r\n    }\r\n\r\n\tfunction setOrbClasses(string memory _holyType, uint8 _orbClass) external onlyOwner {\r\n\t\torbClasses[_holyType] = _orbClass;\r\n\t}\r\n\r\n\tfunction compareStrings(string memory a, string memory b) public pure returns (bool) {\r\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\r\n    }\r\n\r\n\tfunction updateFeeAddress(address _newAddress) external onlyOwner {\r\n        feeAddress = _newAddress;\r\n    }\r\n\r\n\tfunction updateClassList(uint8[] memory _classList) external onlyOwner {\r\n\t\tclassList = _classList;\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_orbNft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holyPackage\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_classBaseRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_classAddRate\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSuccess\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"orbIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOrbId\",\"type\":\"uint256\"}],\"name\":\"Fusion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"classList\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"a\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"b\",\"type\":\"string\"}],\"name\":\"compareStrings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_orbIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_holyPackageIds\",\"type\":\"uint256[]\"}],\"name\":\"fusion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rarity\",\"type\":\"uint8\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_baseRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_addRate\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_numberHolyPackage\",\"type\":\"uint256\"}],\"name\":\"getSuccessRate\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holyPackage\",\"outputs\":[{\"internalType\":\"contract IHolyPackage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"orbClasses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orbNft\",\"outputs\":[{\"internalType\":\"contract IOrbNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"requirements\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"baseRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"addRate\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenRequire\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"holyPackageMaxAmount\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_holyType\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_orbClass\",\"type\":\"uint8\"}],\"name\":\"setOrbClasses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_baseRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_addRate\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenRequire\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_holyPackageMaxAmount\",\"type\":\"uint8\"}],\"name\":\"setRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_classList\",\"type\":\"uint8[]\"}],\"name\":\"updateClassList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OrbFusion", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008ddda130d49afd93311ba0ebf50d37631e7d12d600000000000000000000000021ff9ae6917c6167e7a66e91d27ab841a229131900000000000000000000000000000000000000000000000000000000000000210000000000000000000000000000000000000000000000000000000000000003", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://62b3d0374f26ed9b677f36982305e98ef09d9fe658de5c10d637f262195493f3"}