{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-11-18\r\n*/\r\n\r\npragma solidity ^0.6.0;\r\ninterface tokenEx {\r\n    function transfer(address receiver, uint amount) external;\r\n    function transferFrom(address _from, address _to, uint256 _value)external;\r\n    function balanceOf(address receiver) external view returns(uint256);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n}\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface DEXw{\r\n    function users(address addr)external  view returns (uint,uint);\r\n    function addrs(uint a)external  view returns (address);\r\n}\r\ncontract MetaAMG{\r\n    using Address for address;\r\n    address public WBNB;\r\n    address public  DEX;\r\n    address public  SAM;\r\n    address public owner;\r\n    address public jjh;\r\n    address public SAMLP;\r\n    uint public sumValue;\r\n    uint public allSumLP;\r\n    address public dexs;\r\n    uint public BNB;\r\n    address[] public addrs;\r\n    mapping (address=>user)public users;\r\n    mapping (address=>bool)public inst;\r\n    struct user{\r\n        uint _time;\r\n        uint samLP;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    constructor () public {\r\n       WBNB=0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n       owner=msg.sender;\r\n       DEX=0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n       SAM=0x25D3E7C92c817B96C457FbC8eB0803B8406a045e;\r\n       dexs=0x768704996F0EcC89E3e71F4601559086d166BA48;\r\n    }\r\n    function muupdates(uint s)public onlyOwner{\r\n        for(uint i=0;i<s;i++){\r\n            address addr=DEXw(dexs).addrs(i);\r\n            if(addr != address(0)){\r\n                inst[addr]=true;\r\n                addrs.push(addr);\r\n            }\r\n            (uint n,uint m)=DEXw(dexs).users(addr);\r\n            users[addr].samLP=m;\r\n            users[addr]._time=n;\r\n        }\r\n        \r\n\r\n    }\r\n    function setJJH(address _jjh)public onlyOwner{\r\n        jjh=_jjh;\r\n    }\r\n    function setsam(address _jjh)public onlyOwner{\r\n        SAM=_jjh;\r\n    }\r\n    function setsamLP(address _jjh)public onlyOwner{\r\n        SAMLP=_jjh;\r\n    }\r\n    function vote()payable public {\r\n        BNB+=msg.value;\r\n    }\r\n    function votes(uint b)payable public onlyOwner{\r\n        BNB=b;\r\n    }\r\n    function votesallSumLP(uint b)payable public onlyOwner{\r\n        allSumLP=b;\r\n    }\r\n    function add()payable public {\r\n        uint samtoken=getTokenPrice(msg.value);\r\n        tokenEx(SAM).transferFrom(msg.sender, address(this), samtoken);\r\n        tokenEx(SAM).approve(address(address(DEX)),samtoken);\r\n        uint lastvalue=tokenEx(SAMLP).balanceOf(address(this));\r\n        IRouter(DEX).addLiquidityETH{value : msg.value}(SAM,samtoken,0, 0,address(this),block.timestamp+100);\r\n        uint lpvalue;\r\n        if(tokenEx(SAMLP).balanceOf(address(this)) >lastvalue){\r\n               lpvalue= tokenEx(SAMLP).balanceOf(address(this)) - lastvalue;\r\n           }else {\r\n               lpvalue= 0;\r\n           }\r\n           allSumLP+=lpvalue;\r\n           users[msg.sender].samLP+=lpvalue;\r\n           users[msg.sender]._time=block.timestamp+86400;\r\n           if(!inst[msg.sender]){\r\n              inst[msg.sender]=true;\r\n              addrs.push(msg.sender);\r\n           }\r\n        \r\n    }\r\n    function removeLiquidity()public {\r\n        require(users[msg.sender].samLP > 0);\r\n        require(allSumLP >=users[msg.sender].samLP);\r\n        uint lp=users[msg.sender].samLP;\r\n        users[msg.sender].samLP=0;\r\n        users[msg.sender]._time=0;\r\n        remove(lp,msg.sender);\r\n        allSumLP-=lp;\r\n    }\r\n    function claim(uint s,uint t)public onlyOwner{\r\n        for(s;s<t;s++){    \r\n           uint _bnb=users[addrs[s]].samLP *1 ether / allSumLP*BNB/ 1 ether;\r\n           if(_bnb > 0 && block.timestamp > users[addrs[s]]._time){\r\n             payable(addrs[s]).transfer(_bnb);\r\n           }\r\n        }\r\n    }\r\n    function remove(uint _lp,address to)internal   {\r\n        tokenEx(SAMLP).approve(address(address(DEX)),_lp+1 ether);\r\n        IRouter(DEX).removeLiquidity(SAM,WBNB,_lp,0,0,to,block.timestamp+100); \r\n    }\r\n    function getbnb(address addr,uint _value)public onlyOwner{\r\n        payable(addr).transfer(_value);\r\n     }\r\n     function getToken(address token,uint amount)public onlyOwner{\r\n        tokenEx(token).transfer(msg.sender,amount);\r\n    }\r\n    function getTokenPrice(uint bnb) view public   returns(uint){\r\n           address[] memory routePath = new address[](2);\r\n           routePath[0] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n           routePath[1] = SAM;\r\n           return IRouter(DEX).getAmountsOut(bnb,routePath)[1];    \r\n    }\r\n    receive() external payable{ \r\n        BNB+=msg.value*60/100;\r\n        payable(owner).transfer(msg.value*40/100);\r\n    }\r\n    \r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAMLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allSumLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnb\",\"type\":\"uint256\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getbnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inst\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jjh\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"name\":\"muupdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jjh\",\"type\":\"address\"}],\"name\":\"setJJH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jjh\",\"type\":\"address\"}],\"name\":\"setsam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jjh\",\"type\":\"address\"}],\"name\":\"setsamLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sumValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"samLP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"votesallSumLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MetaAMG", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://355458e8c5161cc090f4340dd677fc9e4aa2c58a74b7885a5d9c8d7b77c46926"}