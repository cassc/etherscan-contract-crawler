{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/spepe.sol\": {\r\n      \"content\": \"/**\\r\\n *Submitted for verification at BscScan.com on 2022-09-02\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0 <0.9.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function name() external view returns (string memory);\\r\\n    function getOwner() external view returns (address);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ninterface IFactoryV2 {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\\r\\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\\r\\n}\\r\\n\\r\\ninterface IV2Pair {\\r\\n    function factory() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function sync() external;\\r\\n}\\r\\n\\r\\ninterface IRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function swapExactETHForTokens(\\r\\n        uint amountOutMin, \\r\\n        address[] calldata path, \\r\\n        address to, uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IRouter02 is IRouter01 {\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ncontract SPEPE is IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address => uint256) private _balances;\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n\\r\\n    mapping(address => bool) private _isExcludedFromFee;\\r\\n    mapping (address => bool) private _liquidityHolders;\\r\\n    \\r\\n    mapping (address => bool) private _isExcludedFromProtection;\\r\\n   \\r\\n    string constant private _name = \\\"SPACE PEPE\\\";\\r\\n    string constant private _symbol = \\\"SPEPE\\\";\\r\\n    uint8 constant private _decimals = 6;\\r\\n\\r\\n    uint256 constant private _totalSupply = 210_000_000_000_000_000 * 10**_decimals;\\r\\n\\r\\n    uint256 public taxFeeOnBuy = 30;\\r\\n    uint256 public taxFeeOnSell = 30;\\r\\n\\r\\n    IRouter02 public dexRouter;\\r\\n\\r\\n    address public lpPair;\\r\\n    address public operator;\\r\\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n    address private _owner;\\r\\n    address payable private devAddress = payable(0x054428914C1C4703933680AF26e43d1644b94563);\\r\\n\\r\\n    bool public tradingEnabled = false;\\r\\n    bool public hasLiqBeenAdded = false;\\r\\n    bool private allowedPresaleExclusion = true;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == msg.sender, \\\"Caller =/= owner.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor () payable {\\r\\n        // Set the owner.\\r\\n        _owner = msg.sender;\\r\\n        \\r\\n        _balances[_owner] = _totalSupply;\\r\\n        emit Transfer(address(0), _owner, _totalSupply);\\r\\n\\r\\n        if (block.chainid == 56) {\\r\\n            dexRouter = IRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n        } else if (block.chainid == 97) {\\r\\n            dexRouter = IRouter02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1);\\r\\n        } else if (block.chainid == 1 || block.chainid == 4 || block.chainid == 3) {\\r\\n            dexRouter = IRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n            //Ropstein DAI 0xaD6D458402F60fD3Bd25163575031ACDce07538D\\r\\n        } else if (block.chainid == 43114) {\\r\\n            dexRouter = IRouter02(0x60aE616a2155Ee3d9A68541Ba4544862310933d4);\\r\\n        } else if (block.chainid == 250) {\\r\\n            dexRouter = IRouter02(0xF491e7B69E4244ad4002BC14e878a34207E38c29);\\r\\n        } else {\\r\\n            revert();\\r\\n        }\\r\\n\\r\\n        lpPair = IFactoryV2(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));\\r\\n\\r\\n        _liquidityHolders[_owner] = true;\\r\\n\\r\\n        _isExcludedFromFee[_owner] = true;\\r\\n        _isExcludedFromFee[devAddress] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n\\r\\n        _approve(_owner, address(dexRouter), type(uint256).max);\\r\\n        _approve(address(this), address(dexRouter), type(uint256).max);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function totalSupply() external pure override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function decimals() external pure override returns (uint8) { \\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function symbol() external pure override returns (string memory) { return _symbol; }\\r\\n\\r\\n    function name() external pure override returns (string memory) { return _name; }\\r\\n\\r\\n    function getOwner() external view override returns (address) { return _owner; }\\r\\n\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address sender, address spender, uint256 amount) internal {\\r\\n        require(sender != address(0), \\\"ERC20: Zero Address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: Zero Address\\\");\\r\\n\\r\\n        _allowances[sender][spender] = amount;\\r\\n        emit Approval(sender, spender, amount);\\r\\n    }\\r\\n\\r\\n    function approveContractContingency() external onlyOwner returns (bool) {\\r\\n        _approve(address(this), address(dexRouter), type(uint256).max);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\\r\\n            _allowances[sender][msg.sender] -= amount;\\r\\n        }\\r\\n\\r\\n        return _transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function isExcludedFromProtection(address account) external view returns (bool) {\\r\\n        return _isExcludedFromProtection[account];\\r\\n    }\\r\\n\\r\\n    function _hasLimits(address from, address to) internal view returns (bool) {\\r\\n        return from != _owner\\r\\n            && to != _owner\\r\\n            && tx.origin != _owner\\r\\n            && !_liquidityHolders[to]\\r\\n            && !_liquidityHolders[from]\\r\\n            && to != DEAD\\r\\n            && to != address(0)\\r\\n            && from != address(this);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n\\r\\n        if (_hasLimits(from, to)) {\\r\\n            if(!tradingEnabled) {\\r\\n                revert(\\\"Trading not yet enabled!\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return finalizeTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function finalizeTransfer(address from, address to, uint256 amount) internal returns (bool) {\\r\\n        uint256 _taxFee = 0;\\r\\n        bool other = false;\\r\\n\\r\\n        if (from == lpPair && to != address(dexRouter)) {\\r\\n            _taxFee = taxFeeOnBuy;\\r\\n        } else if (to == lpPair && from != address(dexRouter)) {\\r\\n            _taxFee = taxFeeOnSell;\\r\\n        } else {\\r\\n            other = true;\\r\\n        }\\r\\n\\r\\n        if (\\r\\n                (_isExcludedFromFee[from] || _isExcludedFromFee[to]) ||\\r\\n                (from != lpPair && to != lpPair)\\r\\n        ) {\\r\\n            _taxFee = 0;\\r\\n        }\\r\\n\\r\\n        if (!hasLiqBeenAdded) {\\r\\n            _checkLiquidityAdd(from, to);\\r\\n            if (!hasLiqBeenAdded && _hasLimits(from, to) && !_isExcludedFromProtection[from] && !_isExcludedFromProtection[to] && !other) {\\r\\n                revert(\\\"Pre-liquidity transfer protection.\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n        }\\r\\n\\r\\n        uint256 fee = amount.mul(_taxFee).div(1000);\\r\\n        uint256 transferAmount = amount.sub(fee);\\r\\n\\r\\n        _balances[to] = _balances[to].add(transferAmount);\\r\\n        _balances[devAddress] = _balances[devAddress].add(fee);\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _checkLiquidityAdd(address from, address to) internal {\\r\\n        require(!hasLiqBeenAdded, \\\"Liquidity already added and marked.\\\");\\r\\n        if (!_hasLimits(from, to) && to == lpPair) {\\r\\n            _liquidityHolders[from] = true;\\r\\n            hasLiqBeenAdded = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferOwner(address _newOwner) external onlyOwner {\\r\\n        require(_newOwner != address(0), \\\"Call renounceOwnership to transfer owner to the zero address.\\\");\\r\\n        require(_newOwner != DEAD, \\\"Call renounceOwnership to transfer owner to the zero address.\\\");\\r\\n        if (balanceOf(_owner) > 0) {\\r\\n            finalizeTransfer(_owner, _newOwner, balanceOf(_owner));\\r\\n        }\\r\\n        \\r\\n        address oldOwner = _owner;\\r\\n        _owner = _newOwner;\\r\\n        _isExcludedFromFee[_owner] = true;\\r\\n\\r\\n        emit OwnershipTransferred(oldOwner, _newOwner);\\r\\n        \\r\\n    }\\r\\n\\r\\n    function renounceOwnership() external onlyOwner {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = address(0);\\r\\n        emit OwnershipTransferred(oldOwner, address(0));\\r\\n    }\\r\\n\\r\\n    function setExcludedFromProtection(address _account, bool _enabled) external onlyOwner {\\r\\n        _isExcludedFromProtection[_account] = _enabled;\\r\\n    }\\r\\n\\r\\n    function excludePresaleAddresses(address _router, address _presale) external onlyOwner {\\r\\n        require(allowedPresaleExclusion);\\r\\n        require(_router != address(this) \\r\\n                && _presale != address(this) \\r\\n                && lpPair != _router \\r\\n                && lpPair != _presale, \\\"Just don't.\\\");\\r\\n        if (_router == _presale) {\\r\\n            _liquidityHolders[_presale] = true;\\r\\n        } else {\\r\\n            _liquidityHolders[_router] = true;\\r\\n            _liquidityHolders[_presale] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setOperator(address _newOperator) external onlyOwner {\\r\\n        address oldOperator = operator;\\r\\n        if (oldOperator != address(0)) {\\r\\n            _liquidityHolders[oldOperator] = false;\\r\\n        }\\r\\n        operator = _newOperator;\\r\\n        _liquidityHolders[_newOperator] = true;\\r\\n    }\\r\\n\\r\\n    function setDevAddress(address _newAddress) external onlyOwner {\\r\\n        require(devAddress != address(0), \\\"address cannot be 0\\\");\\r\\n        devAddress = payable(_newAddress);\\r\\n    }\\r\\n\\r\\n    function excludeMultipleAccountsFromFees(\\r\\n        address[] calldata _accounts,\\r\\n        bool _excluded\\r\\n    ) public onlyOwner {\\r\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\r\\n            _isExcludedFromFee[_accounts[i]] = _excluded;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enableTrading() public onlyOwner {\\r\\n        require(!tradingEnabled, \\\"Trading already enabled!\\\");\\r\\n        require(hasLiqBeenAdded, \\\"Liquidity must be added.\\\");\\r\\n        tradingEnabled = true;\\r\\n        allowedPresaleExclusion = false;\\r\\n    }\\r\\n\\r\\n    function setFee(uint256 _taxFeeOnBuy, uint256 _taxFeeOnSell) public onlyOwner {\\r\\n        require(_taxFeeOnBuy < 40, \\\"Tax cannot be more than 3.\\\");\\r\\n        require(_taxFeeOnSell < 40, \\\"Tax cannot be more than 3.\\\");\\r\\n        taxFeeOnBuy = _taxFeeOnBuy;\\r\\n        taxFeeOnSell = _taxFeeOnSell;\\r\\n    }\\r\\n\\r\\n    function setLPPair(address _lpPair) external onlyOwner {\\r\\n        lpPair = _lpPair;\\r\\n    }\\r\\n\\r\\n    function withdrawToken(address _token, address _to) external onlyOwner returns (bool _sent) {\\r\\n        require(_token != address(0), \\\"_token address cannot be 0\\\");\\r\\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\\r\\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\\r\\n    }\\r\\n\\r\\n    // withdraw ETH if stuck or someone sends to the address\\r\\n    function withdrawStuckETH() external onlyOwner {\\r\\n        bool success;\\r\\n        (success,) = address(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveContractContingency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_presale\",\"type\":\"address\"}],\"name\":\"excludePresaleAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasLiqBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromProtection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taxFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpPair\",\"type\":\"address\"}],\"name\":\"setLPPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFeeOnBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFeeOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SPEPE", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}