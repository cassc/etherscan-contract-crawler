{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-12-31\r\n */\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.8.0;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Context {\r\n    constructor() {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface ICOOld {\r\n    function totalTokens(address) external returns (uint256);\r\n\r\n    function totalWithdrawnTokens(address) external returns (uint256);\r\n\r\n    function codes(string memory) external returns (address);\r\n\r\n    function referralCodes(address) external returns (string memory);\r\n\r\n    function referals(address) external returns (address);\r\n}\r\n\r\ncontract ICO is Context, ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public oldICO = 0xC47f1411d7F0cf9A62A4cA1b483e1d352a55ce3e;\r\n\r\n    address public usd;\r\n    address public token;\r\n    address public admin;\r\n    address public settlementWallet;\r\n    uint256 public sendTokenPercentage = 1; // 100/4;\r\n    uint256 public sendVestingTokenPercentage = 1; // 100/4;\r\n    uint256 public tokenPrice = 0.8 * 10 ** 18; // 0.8 USD\r\n\r\n    mapping(address => uint256) public totalTokens;\r\n    mapping(address => uint256) public totalWithdrawnTokens;\r\n    mapping(string => address) public codes;\r\n    mapping(address => string) public referralCodes;\r\n    mapping(address => address) public referals;\r\n\r\n    uint256 public totalTokensSold = 0;\r\n\r\n    uint256 public minUSD = 0 * 10 ** 18;\r\n    uint256 public maxUSD = 50000 * 10 ** 18;\r\n\r\n    bool public ICOOngoing = true;\r\n\r\n    mapping(uint8 => uint256) public referalPercentage;\r\n\r\n    event Purchase(\r\n        address indexed buyer,\r\n        uint256 amount,\r\n        uint256 onVesting,\r\n        uint256 valueInPurchaseCurrency,\r\n        string currency\r\n    );\r\n\r\n    event Refferal(\r\n        address _address,\r\n        address _from,\r\n        uint256 amount,\r\n        uint256 percentage\r\n    );\r\n\r\n    constructor(address _usd, address _token, address _settlementWallet) {\r\n        admin = _msgSender();\r\n        usd = _usd;\r\n        token = _token;\r\n        settlementWallet = _settlementWallet;\r\n        codes[\"IFX2023\"] = _settlementWallet;\r\n        referalPercentage[0] = 30;\r\n        referalPercentage[1] = 15;\r\n        referalPercentage[2] = 10;\r\n        referalPercentage[3] = 5;\r\n        referalPercentage[4] = 5;\r\n    }\r\n\r\n    function copyData(address[] memory _buyers) public returns (bool) {\r\n        for (uint256 index = 0; index < _buyers.length; index++) {\r\n            totalTokens[_buyers[index]] = ICOOld(oldICO).totalTokens(\r\n                _buyers[index]\r\n            );\r\n            totalWithdrawnTokens[_buyers[index]] = ICOOld(oldICO)\r\n                .totalWithdrawnTokens(_buyers[index]);\r\n            referralCodes[_buyers[index]] = ICOOld(oldICO).referralCodes(\r\n                _buyers[index]\r\n            );\r\n            referals[_buyers[index]] = ICOOld(oldICO).referals(_buyers[index]);\r\n            codes[referralCodes[_buyers[index]]] = referals[_buyers[index]];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function buyToken(\r\n        uint256 _amount,\r\n        string memory _code,\r\n        string memory _refferalCode\r\n    ) public virtual nonReentrant returns (bool) {\r\n        uint256 balance = ERC20(usd).balanceOf(_msgSender());\r\n        uint256 allowance = ERC20(usd).allowance(_msgSender(), address(this));\r\n\r\n        uint256 totalCostInUSDC = tokenPrice.mul(_amount.div(10 ** 8));\r\n        uint256 tokenToSend = _amount.div(sendTokenPercentage);\r\n        uint256 vestingToken = _amount.sub(tokenToSend);\r\n\r\n        require(\r\n            codes[_refferalCode] != address(0),\r\n            \"Error: use valid referral code\"\r\n        );\r\n        require(ICOOngoing, \"Error: ICO halted\");\r\n        require(\r\n            totalCostInUSDC >= minUSD,\r\n            \"Error: BUDS token should be min 100.\"\r\n        );\r\n        require(\r\n            totalCostInUSDC <= maxUSD,\r\n            \"Error: BUSD token should be max 50000.\"\r\n        );\r\n        require(balance >= totalCostInUSDC, \"Error: insufficient USDC Balance\");\r\n        require(\r\n            allowance >= totalCostInUSDC,\r\n            \"Error: allowance less than spending\"\r\n        );\r\n\r\n        if (referals[_msgSender()] != address(0)) {\r\n            require(\r\n                referals[_msgSender()] == codes[_refferalCode],\r\n                \"Error: Please use same referral code which used for first purchase.\"\r\n            );\r\n        }\r\n\r\n        ERC20(usd).transferFrom(\r\n            _msgSender(),\r\n            settlementWallet,\r\n            totalCostInUSDC\r\n        );\r\n        ERC20(token).transfer(_msgSender(), tokenToSend);\r\n\r\n        totalTokens[_msgSender()] = totalTokens[_msgSender()].add(_amount);\r\n        totalWithdrawnTokens[_msgSender()] = totalWithdrawnTokens[_msgSender()]\r\n            .add(tokenToSend);\r\n\r\n        totalTokensSold = totalTokensSold.add(_amount);\r\n\r\n        codes[_code] = _msgSender();\r\n        referralCodes[_msgSender()] = _refferalCode;\r\n\r\n        referals[_msgSender()] = codes[_refferalCode];\r\n\r\n        sendReferralCodes(_msgSender(), _amount);\r\n\r\n        emit Purchase(\r\n            _msgSender(),\r\n            tokenToSend,\r\n            vestingToken,\r\n            totalCostInUSDC,\r\n            \"USDC\"\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function sendReferralCodes(address _buyer, uint256 _amount) internal {\r\n        uint8 iterator = 0;\r\n        address _referral = referals[_buyer];\r\n        while (iterator < 5) {\r\n            uint256 tokenToSend = (_amount * referalPercentage[iterator]).div(\r\n                1000\r\n            );\r\n            if (_referral != address(0) && _referral != _buyer) {\r\n                ERC20(token).transfer(_referral, tokenToSend);\r\n                emit Refferal(\r\n                    _referral,\r\n                    _buyer,\r\n                    tokenToSend,\r\n                    referalPercentage[iterator]\r\n                );\r\n                _referral = referals[_referral];\r\n            }\r\n            iterator++;\r\n        }\r\n    }\r\n\r\n    function updateBuyWithTokenAddress(\r\n        address newAddress\r\n    ) public virtual onlyOwner {\r\n        require(newAddress != address(0), \"Error: address cannot be zero\");\r\n        usd = newAddress;\r\n    }\r\n\r\n    function updateTokenAddress(address newAddress) public virtual onlyOwner {\r\n        require(newAddress != address(0), \"Error: address cannot be zero\");\r\n        token = newAddress;\r\n    }\r\n\r\n    function updateSendTokenPercentage(\r\n        uint256 _sendTokenPercentage\r\n    ) public virtual onlyOwner {\r\n        uint256 total = 100;\r\n        sendTokenPercentage = total.div(_sendTokenPercentage);\r\n    }\r\n\r\n    function updateSettlementWallet(\r\n        address newAddress\r\n    ) public virtual onlyOwner {\r\n        require(newAddress != address(0), \"Error: not a valid address\");\r\n        settlementWallet = newAddress;\r\n    }\r\n\r\n    function resumeICO() public virtual onlyOwner {\r\n        ICOOngoing = true;\r\n    }\r\n\r\n    function stopICO() public virtual onlyOwner {\r\n        ICOOngoing = false;\r\n    }\r\n\r\n    function changeTokenPrice(uint256 price) public virtual onlyOwner {\r\n        tokenPrice = price;\r\n    }\r\n\r\n    function regainUnusedToken(uint256 amount) public virtual onlyOwner {\r\n        ERC20(token).transfer(owner(), amount);\r\n    }\r\n\r\n    function checkCanBuyToken(uint256 _amount) public view returns (bool) {\r\n        uint256 balance = ERC20(usd).balanceOf(_msgSender());\r\n        uint256 allowance = ERC20(usd).allowance(_msgSender(), address(this));\r\n\r\n        uint256 totalCostInUSDC = tokenPrice.mul(_amount.div(10 ** 8));\r\n\r\n        require(ICOOngoing, \"Error: ICO halted\");\r\n        require(balance >= totalCostInUSDC, \"Error: insufficient USDC Balance\");\r\n        require(\r\n            allowance >= totalCostInUSDC,\r\n            \"Error: allowance less than spending\"\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function updateMinUSD(uint256 _minUSD) public virtual onlyOwner {\r\n        minUSD = _minUSD;\r\n    }\r\n\r\n    function updateMaxUsdc(uint256 _maxUSD) public virtual onlyOwner {\r\n        maxUSD = _maxUSD;\r\n    }\r\n\r\n    function sendPendingReferral(\r\n        address[] memory _buyer,\r\n        address[] memory _referral,\r\n        uint256[] memory tokenToSend,\r\n        uint256[] memory _referalPercentage\r\n    ) public onlyOwner {\r\n        for (uint256 index = 0; index < _buyer.length; index++) {\r\n            ERC20(token).transfer(_referral[index], tokenToSend[index]);\r\n            emit Refferal(\r\n                _referral[index],\r\n                _buyer[index],\r\n                tokenToSend[index],\r\n                _referalPercentage[index]\r\n            );\r\n        }\r\n    }\r\n\r\n    function changePercentage(\r\n        uint8 _index,\r\n        uint256 _percentage\r\n    ) public onlyOwner {\r\n        referalPercentage[_index] = _percentage;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_settlementWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"onVesting\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueInPurchaseCurrency\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"Refferal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ICOOngoing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_refferalCode\",\"type\":\"string\"}],\"name\":\"buyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"changePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"changeTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkCanBuyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"codes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_buyers\",\"type\":\"address[]\"}],\"name\":\"copyData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldICO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"referalPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCodes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"regainUnusedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_buyer\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_referral\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenToSend\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_referalPercentage\",\"type\":\"uint256[]\"}],\"name\":\"sendPendingReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendTokenPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendVestingTokenPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalWithdrawnTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateBuyWithTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxUSD\",\"type\":\"uint256\"}],\"name\":\"updateMaxUsdc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minUSD\",\"type\":\"uint256\"}],\"name\":\"updateMinUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sendTokenPercentage\",\"type\":\"uint256\"}],\"name\":\"updateSendTokenPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateSettlementWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ICO", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000007d16dbca69baa0b2c57f5eadb823c7c7a3cfa71c00000000000000000000000085f2593cfb7fe2185c41cfc11788cf3e8bb805a8", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a7c4d61dd8acee82cb1d55bf72cafaae2f4b37b2ffc62564bd9dd0ed67be6180"}