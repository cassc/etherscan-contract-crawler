{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DocumentStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"./IDocumentStoreInterface.sol\\\";\\r\\n\\r\\ncontract DocumentStore is OwnableUpgradeable {\\r\\n    string private _name;\\r\\n    string private _email;\\r\\n    string private _legalReference;\\r\\n    string private _intentDeclaration;\\r\\n    string private _host;\\r\\n    uint256 private _contractExpiredTime;\\r\\n\\r\\n    address private _ownerManager;\\r\\n    address[] public publishers;\\r\\n    /// uint256 constant YEAR_IN_SECONDS = 31536000;\\r\\n\\r\\n    /// A mapping of the document hash to the block number that was issued\\r\\n    mapping(bytes32 => uint256) private documentIssued;\\r\\n    /// A mapping of the hash of the claim being revoked to the revocation block number\\r\\n    mapping(bytes32 => uint256) private documentRevoked;\\r\\n    /// A mapping of the hash of the document to the expiration date\\r\\n    mapping(bytes32 => uint256) private documentExpiration;\\r\\n    /// A mapping of the hash of the document to the publisher\\r\\n    mapping(bytes32 => address) private documentPublisher;\\r\\n\\r\\n    event DocumentIssued(bytes32 indexed document);\\r\\n    event DocumentRevoked(bytes32 indexed document);\\r\\n    event PublisherChanged(address indexed documentStore, address[] currentPublishers);\\r\\n    event ContractExpired(address indexed thisContract,uint256 time);\\r\\n    event ContractInfoChanged(\\r\\n        string name,\\r\\n        string email,\\r\\n        string legalReference,\\r\\n        string intentDeclaration,\\r\\n        string host,\\r\\n        uint256 time\\r\\n    );\\r\\n\\r\\n    function initialize(\\r\\n        string memory name,\\r\\n        string memory email,\\r\\n        string memory legalReference,\\r\\n        string memory intentDeclaration,\\r\\n        string memory host,\\r\\n        uint256 time,\\r\\n        address owner,\\r\\n        address ownerManager\\r\\n    ) public initializer {\\r\\n        require(time > block.timestamp, \\\"Error: expired date has passed\\\");\\r\\n        super.__Ownable_init();\\r\\n        super.transferOwnership(owner);\\r\\n        publishers.push(owner);\\r\\n        _name = name;\\r\\n        _email = email;\\r\\n        _legalReference = legalReference;\\r\\n        _intentDeclaration = intentDeclaration;\\r\\n        _host = host;\\r\\n        _ownerManager = ownerManager;\\r\\n        _contractExpiredTime = time;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public override onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        IDocumentStoreInterface(_ownerManager).setOwnerOfContract(owner(), newOwner, _name);\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public override onlyOwner {\\r\\n        IDocumentStoreInterface(_ownerManager).setOwnerOfContract(owner(), address(0), _name);\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function getExpiredTime() external view returns (uint256) {\\r\\n        return _contractExpiredTime;\\r\\n    }\\r\\n\\r\\n    function getName() external view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function getEmail() external view returns (string memory) {\\r\\n        return _email;\\r\\n    }\\r\\n\\r\\n    function getLegalReference() external view returns (string memory) {\\r\\n        return _legalReference;\\r\\n    }\\r\\n\\r\\n    function getIntentDeclaration() external view returns (string memory) {\\r\\n        return _intentDeclaration;\\r\\n    }\\r\\n\\r\\n    function getHost() external view returns (string memory) {\\r\\n        return _host;\\r\\n    }\\r\\n\\r\\n    function getPublishers() external view returns (address[] memory) {\\r\\n        return publishers;\\r\\n    }\\r\\n\\r\\n    function setName(string memory name) external onlyOwner contractNotExpired{\\r\\n        _name = name;\\r\\n        IDocumentStoreInterface(_ownerManager).setName(\\r\\n            address(this), \\r\\n            _name\\r\\n        );\\r\\n        emit ContractInfoChanged(\\r\\n            _name,\\r\\n            _email,\\r\\n            _legalReference,\\r\\n            _intentDeclaration,\\r\\n            _host,\\r\\n            _contractExpiredTime\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setEmail(string memory email) external onlyOwner contractNotExpired{\\r\\n        _email = email;\\r\\n        IDocumentStoreInterface(_ownerManager).setEmail(\\r\\n            address(this), \\r\\n            _email\\r\\n        );\\r\\n        emit ContractInfoChanged(\\r\\n            _name,\\r\\n            _email,\\r\\n            _legalReference,\\r\\n            _intentDeclaration,\\r\\n            _host,\\r\\n            _contractExpiredTime\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setLegalReference(string memory legalReference) external onlyOwner contractNotExpired{\\r\\n        _legalReference = legalReference;\\r\\n        IDocumentStoreInterface(_ownerManager).setLegalReference(\\r\\n            address(this),\\r\\n            _legalReference\\r\\n        );\\r\\n        emit ContractInfoChanged(\\r\\n            _name,\\r\\n            _email,\\r\\n            _legalReference,\\r\\n            _intentDeclaration,\\r\\n            _host,\\r\\n            _contractExpiredTime\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setIntentDeclaration(string memory intentDeclaration) external onlyOwner contractNotExpired{\\r\\n        _intentDeclaration = intentDeclaration;\\r\\n        IDocumentStoreInterface(_ownerManager).setIntentDeclaration(\\r\\n            address(this),\\r\\n            _intentDeclaration\\r\\n        );\\r\\n        emit ContractInfoChanged(\\r\\n            _name,\\r\\n            _email,\\r\\n            _legalReference,\\r\\n            _intentDeclaration,\\r\\n            _host,\\r\\n            _contractExpiredTime\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setHost(string memory host) external onlyOwner contractNotExpired{\\r\\n        _host = host;\\r\\n        IDocumentStoreInterface(_ownerManager).setHost(\\r\\n            address(this), \\r\\n            _host\\r\\n        );\\r\\n        emit ContractInfoChanged(\\r\\n            _name,\\r\\n            _email,\\r\\n            _legalReference,\\r\\n            _intentDeclaration,\\r\\n            _host,\\r\\n            _contractExpiredTime\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setExpiredTime(uint256 time) external onlyOwner{\\r\\n        IDocumentStoreInterface(_ownerManager).setExpiredTime(\\r\\n            address(this), \\r\\n            time\\r\\n        );\\r\\n        _contractExpiredTime = time;\\r\\n        emit ContractInfoChanged(\\r\\n            _name,\\r\\n            _email,\\r\\n            _legalReference,\\r\\n            _intentDeclaration,\\r\\n            _host,\\r\\n            _contractExpiredTime\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function removeAllPublishers() external onlyOwner contractNotExpired{\\r\\n        while(publishers.length > 0) {\\r\\n            publishers.pop();\\r\\n        }\\r\\n        emit PublisherChanged(address(this), publishers);\\r\\n    }\\r\\n\\r\\n    function setPublishers(address[] memory _newPublishers) external onlyOwner contractNotExpired{\\r\\n        while(publishers.length > 0) {\\r\\n            publishers.pop();\\r\\n        }\\r\\n        for (uint256 i; i < _newPublishers.length; i++) {\\r\\n            if (publisherCheck(_newPublishers[i])) continue;\\r\\n            publishers.push(_newPublishers[i]);\\r\\n        }\\r\\n        emit PublisherChanged(address(this), publishers);\\r\\n    }\\r\\n\\r\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) \\r\\n        public \\r\\n        view \\r\\n        onlyIssued(root) \\r\\n        onlyNotRevoked(root)\\r\\n        onlyNotExpired(root)\\r\\n        onlyNotRevoked(leaf)\\r\\n        contractNotExpired \\r\\n        returns (bool) \\r\\n    {\\r\\n        return processProof(proof, leaf) == root;\\r\\n    }\\r\\n\\r\\n    function processProof(bytes32[] memory proof, bytes32 leaf)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            bytes32 proofElement = proof[i];\\r\\n            if (computedHash <= proofElement) {\\r\\n                // Hash(current computed hash + current element of the proof)\\r\\n                computedHash = _efficientHash(computedHash, proofElement);\\r\\n            } else {\\r\\n                // Hash(current element of the proof + current computed hash)\\r\\n                computedHash = _efficientHash(proofElement, computedHash);\\r\\n            }\\r\\n        }\\r\\n        return computedHash;\\r\\n    }\\r\\n\\r\\n    function _efficientHash(bytes32 a, bytes32 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32 value)\\r\\n    {\\r\\n        assembly {\\r\\n            mstore(0x00, a)\\r\\n            mstore(0x20, b)\\r\\n            value := keccak256(0x00, 0x40)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function issue(bytes32 document, uint256 expiredTime)\\r\\n        public\\r\\n        onlyPublisher\\r\\n        onlyNotIssued(document)\\r\\n        contractNotExpired\\r\\n    {\\r\\n        documentIssued[document] = block.number;\\r\\n        documentExpiration[document] = expiredTime;\\r\\n        documentPublisher[document] = msg.sender;\\r\\n        emit DocumentIssued(document);\\r\\n    }\\r\\n\\r\\n    function bulkIssue(bytes32[] memory documents, uint256[] memory expiredTime)\\r\\n        external\\r\\n    {\\r\\n        for (uint256 i = 0; i < documents.length; i++) {\\r\\n            issue(documents[i], expiredTime[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getIssuedBlock(bytes32 document)\\r\\n        external\\r\\n        view\\r\\n        onlyIssued(document)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return documentIssued[document];\\r\\n    }\\r\\n\\r\\n    function isIssued(bytes32 document) \\r\\n        public \\r\\n        view \\r\\n        returns (bool) \\r\\n    {\\r\\n        return (documentIssued[document] != 0);\\r\\n    }\\r\\n\\r\\n    function isIssuedBefore(bytes32 document, uint256 blockNumber)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return (documentIssued[document] != 0 && documentIssued[document] <= blockNumber);\\r\\n    }\\r\\n\\r\\n    function revoke(bytes32 document)\\r\\n        public\\r\\n        onlyPublisher\\r\\n        onlyNotRevoked(document)\\r\\n        contractNotExpired\\r\\n    {\\r\\n        documentRevoked[document] = block.number;\\r\\n        emit DocumentRevoked(document);\\r\\n    }\\r\\n\\r\\n    function bulkRevoke(bytes32[] memory documents) \\r\\n        external\\r\\n    {\\r\\n        for (uint256 i = 0; i < documents.length; i++) {\\r\\n            revoke(documents[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isRevoked(bytes32 document) \\r\\n        public\\r\\n        view \\r\\n        returns (bool) \\r\\n    {\\r\\n        return documentRevoked[document] != 0;\\r\\n    }\\r\\n\\r\\n    function isRevokedBefore(bytes32 document, uint256 blockNumber)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return (documentRevoked[document] <= blockNumber && documentRevoked[document] != 0);\\r\\n    }\\r\\n\\r\\n    function getDocExpiredTime(bytes32 document)\\r\\n        external\\r\\n        view\\r\\n        onlyIssued(document)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return documentExpiration[document];\\r\\n    }\\r\\n\\r\\n    function isNotExpired(bytes32 document)\\r\\n        public\\r\\n        view\\r\\n        onlyIssued(document)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return documentExpiration[document] > block.timestamp || documentExpiration[document] == 0;\\r\\n    }\\r\\n\\r\\n    function publisherCheck(address _address) \\r\\n        public \\r\\n        view\\r\\n        returns (bool check) \\r\\n    {\\r\\n        check = false;\\r\\n        for (uint256 i; i < publishers.length; i++) {\\r\\n            if (publishers[i] == _address) {\\r\\n                check = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier onlyNotExpired(bytes32 document) {\\r\\n        require(isNotExpired(document), \\\"Error: Document is not expired\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyIssued(bytes32 document) {\\r\\n        require(isIssued(document), \\\"Error: Document's hash is not issued \\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyNotIssued(bytes32 document) {\\r\\n        require(!isIssued(document), \\\"Error: Only hashes that have not been issued can be issued\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyNotRevoked(bytes32 claim) {\\r\\n        require(!isRevoked(claim), \\\"Error: Hash has been revoked previously\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPublisher() {\\r\\n        require(publisherCheck(msg.sender), \\\"Error: Only Publisher can revoke or issue documents\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyVerified(bytes32[] memory proof, bytes32 root, bytes32 leaf) {\\r\\n        require(verify(proof, root, leaf), \\\"Error: Leaf is not verified\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier contractNotExpired() {\\r\\n        require(_contractExpiredTime > block.timestamp);\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/IDocumentStoreInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\ninterface IDocumentStoreInterface {\\r\\n    function getName() external view returns(string memory);\\r\\n        \\r\\n    function getEmail() external view returns(string memory);\\r\\n\\r\\n    function getLegalReference() external view returns(string memory);\\r\\n\\r\\n    function getIntentDeclaration() external view returns(string memory);\\r\\n\\r\\n    function getHost() external returns(string memory);\\r\\n    \\r\\n    function getExpiredTime() external returns(uint256);\\r\\n\\r\\n    function setOwnerOfContract(address _oldOwner, address _newOwner, string memory _name) external;\\r\\n\\r\\n    function setName(address _contract, string memory _name) external;\\r\\n        \\r\\n    function setEmail(address _contract, string memory _email) external;\\r\\n\\r\\n    function setLegalReference(address _contract, string memory _legalReference) external;\\r\\n\\r\\n    function setIntentDeclaration(address _contract, string memory _intentDeclaration) external;\\r\\n\\r\\n    function setHost(address _contract, string memory _host) external;\\r\\n\\r\\n    function setExpiredTime(address _contract, uint256 _time) external;\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"thisContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ContractExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"legalReference\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"intentDeclaration\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"host\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ContractInfoChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"DocumentIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"DocumentRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"documentStore\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"currentPublishers\",\"type\":\"address[]\"}],\"name\":\"PublisherChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"documents\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"expiredTime\",\"type\":\"uint256[]\"}],\"name\":\"bulkIssue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"documents\",\"type\":\"bytes32[]\"}],\"name\":\"bulkRevoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"getDocExpiredTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmail\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpiredTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHost\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntentDeclaration\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"getIssuedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLegalReference\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublishers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"legalReference\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"intentDeclaration\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"host\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"isIssued\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"document\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"isIssuedBefore\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"isNotExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"isRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"document\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"isRevokedBefore\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"document\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiredTime\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"publisherCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"check\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publishers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllPublishers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"}],\"name\":\"setEmail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setExpiredTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"host\",\"type\":\"string\"}],\"name\":\"setHost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"intentDeclaration\",\"type\":\"string\"}],\"name\":\"setIntentDeclaration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"legalReference\",\"type\":\"string\"}],\"name\":\"setLegalReference\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newPublishers\",\"type\":\"address[]\"}],\"name\":\"setPublishers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DocumentStore", "CompilerVersion": "v0.8.5+commit.a4f2e591", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}