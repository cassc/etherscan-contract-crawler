{"SourceCode": "{\"BEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract BEP20 is IBEP20, Ownable {\\n    mapping (address =\\u003e uint256) private _balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    string private constant NAME = \\\"MetaworldPad\\\";\\n    string private constant SYMBOL = \\\"MWP\\\";\\n    uint8 private constant DECIMALS = 18;\\n    uint256 private constant TOTAL_SUPPLY = 10**12 * 10**DECIMALS;\\n\\n    constructor(address recipient) {\\n        _balances[recipient] = TOTAL_SUPPLY;\\n        emit Transfer(address(0), recipient, TOTAL_SUPPLY);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return owner();\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return DECIMALS;\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return SYMBOL;\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return NAME;\\n    }\\n\\n    function totalSupply() public pure returns (uint256) {\\n        return TOTAL_SUPPLY;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        require(currentAllowance \\u003e= amount, \\\"BEP20: transfer amount exceeds allowance\\\");\\n\\n        _approve(sender, msg.sender, currentAllowance - amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        uint256 currentAllowance = _allowances[msg.sender][spender];\\n        require(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n\\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\\n        return true;\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance \\u003e= amount, \\\"BEP20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n}\\n\"},\"DividendDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"./IDEX.sol\\\";\\n\\ncontract DividendDistributor {\\n    struct Share {\\n        uint256 amount;\\n        uint256 totalExcluded;\\n        uint256 totalRealised;\\n    }\\n\\n    IBEP20 constant BUSD = IBEP20(0x55d398326f99059fF775485246999027B3197955);\\n    IDEXRouter public constant ROUTER = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    address immutable token;\\n    address[] shareHolders;\\n    uint256 currentIndex;\\n\\n    mapping (address =\\u003e Share) public shares;\\n    mapping (address =\\u003e uint256) shareholderIndexes;\\n    mapping (address =\\u003e uint256) shareholderClaims;\\n\\n    uint256 public totalShares;\\n    uint256 public totalDividends;\\n    uint256 public totalDistributed;\\n    uint256 public dividendsPerShare;\\n    uint256 public dividendsPerShareAccuracyFactor = 10**18;\\n\\n    uint256 public gasLimit = 300000;\\n    uint256 public minPeriod = 1 hours;\\n    uint256 public minDistribution = 10**18;\\n    \\n    event Deposit(uint256 amount);\\n    event SetShare(address indexed account, uint256 amount);\\n    event Process();\\n    event DividendDistributed(address indexed to, uint256 amount);\\n    event SetDistributionCriteria(uint256 period, uint256 amount);\\n    event SetGasLimit(uint256 newGas, uint256 oldGas);\\n\\n    modifier onlyToken() {\\n        require(msg.sender == token);\\n        _;\\n    }\\n\\n    constructor () {\\n        token = msg.sender;\\n    }\\n\\n    // Token interface\\n\\n    function deposit() external payable onlyToken {\\n        if (msg.value \\u003e 0) {\\n            address[] memory path = new address[](2);\\n            path[0] = ROUTER.WETH();\\n            path[1] = address(BUSD);\\n\\n            uint256 balanceBefore = BUSD.balanceOf(address(this));\\n            ROUTER.swapExactETHForTokens{value: msg.value}(\\n                0,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n            uint256 receivedAmount = BUSD.balanceOf(address(this)) - balanceBefore;\\n\\n            totalDividends += receivedAmount;\\n            dividendsPerShare += dividendsPerShareAccuracyFactor * receivedAmount / totalShares;\\n\\n            emit Deposit(msg.value);\\n        }\\n    }\\n\\n    function setShare(address shareholder, uint256 amount) external onlyToken {\\n        if (shares[shareholder].amount \\u003e 0) {\\n            distributeDividend(shareholder);\\n        }\\n\\n        if (amount \\u003e 0 \\u0026\\u0026 shares[shareholder].amount == 0) {\\n            addShareholder(shareholder);\\n        } else if (amount == 0 \\u0026\\u0026 shares[shareholder].amount \\u003e 0) {\\n            removeShareholder(shareholder);\\n        }\\n\\n        totalShares = totalShares - shares[shareholder].amount + amount;\\n        shares[shareholder].amount = amount;\\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\\n\\n        emit SetShare(shareholder, amount);\\n    }\\n\\n    function process() external onlyToken {\\n        uint256 shareholderCount = shareHolders.length;\\n        if (shareholderCount == 0) { return; }\\n\\n        uint256 gasLeft = gasleft();\\n        uint256 gasUsed;\\n        uint256 avgGasCost;\\n        uint256 iterations;\\n\\n        while (gasUsed + avgGasCost \\u003c gasLimit \\u0026\\u0026 iterations \\u003c shareholderCount) {\\n            if (currentIndex \\u003e= shareholderCount) { currentIndex = 0; }\\n\\n            if(shouldDistribute(shareHolders[currentIndex])){\\n                distributeDividend(shareHolders[currentIndex]);\\n            }\\n\\n            gasUsed += gasLeft - gasleft();\\n            gasLeft = gasleft();\\n            currentIndex++;\\n            iterations++;\\n            avgGasCost = gasUsed / iterations;\\n        }\\n\\n        emit Process();\\n    }\\n\\n    // Public\\n\\n    function claimDividend() external {\\n        distributeDividend(msg.sender);\\n    }\\n\\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\\n        if (shares[shareholder].amount == 0) { return 0; }\\n\\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\\n\\n        if (shareholderTotalDividends \\u003c= shareholderTotalExcluded) { return 0; }\\n        return shareholderTotalDividends - shareholderTotalExcluded;\\n    }\\n\\n    // Private\\n    \\n    function shouldDistribute(address shareholder) private view returns (bool) {\\n        return shareholderClaims[shareholder] + minPeriod \\u003c block.timestamp\\n                \\u0026\\u0026 getUnpaidEarnings(shareholder) \\u003e minDistribution;\\n    }\\n\\n    function distributeDividend(address shareholder) private {\\n        if (shares[shareholder].amount == 0) { return; }\\n\\n        uint256 amount = getUnpaidEarnings(shareholder);\\n        if (amount \\u003e 0) {\\n            shareholderClaims[shareholder] = block.timestamp;\\n            shares[shareholder].totalRealised += amount;\\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\\n\\n            totalDistributed += amount;\\n            BUSD.transfer(shareholder, amount);\\n\\n            emit DividendDistributed(shareholder, amount);\\n        }\\n    }\\n\\n    function getCumulativeDividends(uint256 share) private view returns (uint256) {\\n        return share * dividendsPerShare / dividendsPerShareAccuracyFactor;\\n    }\\n\\n    function addShareholder(address shareholder) private {\\n        shareholderIndexes[shareholder] = shareHolders.length;\\n        shareHolders.push(shareholder);\\n    }\\n\\n    function removeShareholder(address shareholder) private {\\n        shareHolders[shareholderIndexes[shareholder]] = shareHolders[shareHolders.length-1];\\n        shareholderIndexes[shareHolders[shareHolders.length-1]] = shareholderIndexes[shareholder];\\n        shareHolders.pop();\\n    }\\n\\n    // Maintenance\\n\\n    function setDistributionCriteria(uint256 newPeriod, uint256 newMinDistribution) external onlyToken {\\n        require(newPeriod \\u003c= 1 weeks \\u0026\\u0026 newMinDistribution \\u003c= 1 ether, \\\"Invalid parameters\\\");\\n        minPeriod = newPeriod;\\n        minDistribution = newMinDistribution;\\n        emit SetDistributionCriteria(newPeriod, newMinDistribution);\\n    }\\n\\n    function setGasLimit(uint256 newGasLimit) external onlyToken {\\n        require(newGasLimit \\u003c= 500000 \\u0026\\u0026 newGasLimit \\u003e= 100000);\\n        emit SetGasLimit(newGasLimit, gasLimit);\\n        gasLimit = newGasLimit;\\n    }\\n}\\n\"},\"IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\ninterface IBEP20 {\\n    function totalSupply() external view returns (uint256);\\n    function decimals() external view returns (uint8);\\n    function symbol() external view returns (string memory);\\n    function name() external view returns (string memory);\\n    function getOwner() external view returns (address);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IDEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\ninterface IDEXFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IDEXRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\n\"},\"MetaworldPad.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./BEP20.sol\\\";\\nimport \\\"./DividendDistributor.sol\\\";\\n\\ncontract MetaworldPad is BEP20 {\\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n\\n    IDEXRouter public constant ROUTER = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    address public immutable pair;\\n\\n    address public marketingWallet = 0x7492faCe0093F97257061d96BFf8685c25F453Da;\\n    address public buybackWallet = 0x0E7e8edf3E7651bac33705518bc7EFB49dA5F0fC;\\n\\n    uint256 public swapThreshold = 100000000 * 10**18;\\n    bool public swapEnabled = true;\\n    bool presaleInitialized;\\n    bool tradingEnabled;\\n    bool inSwap;\\n\\n    mapping (address =\\u003e bool) public isWhitelisted;\\n    mapping (address =\\u003e bool) public isDividendExempt;\\n    mapping (address =\\u003e bool) public isMarketMaker;\\n    mapping (address =\\u003e bool) public isCEX;\\n\\n    uint256 public buyTax = 1200;\\n    uint256 public sellTax = 1800;\\n    uint256 public transferTax = 1200;\\n\\n    uint256 public rewardShare = 500;\\n    uint256 public buybackShare = 166;\\n    uint256 public liquidityShare = 168;\\n    uint256 public marketingShare = 166;\\n    uint256 totalShares = 1000;\\n    uint256 constant DENOMINATOR = 10000;\\n\\n    DividendDistributor public immutable distributor;\\n    uint256 public minBalanceForDividends = 100000000 * 10**18;\\n    uint256 public transferGas = 25000;\\n\\n    event PreparePresale(address presale);\\n    event RecoverBNB(uint256 amount);\\n    event RecoverBEP20(address token, uint256 amount);\\n    event EnableTrading();\\n    event SetMarketingWallet(address newWallet, address oldWallet);\\n    event SetBuybackWallet(address newWallet, address oldWallet);\\n    event SetTransferGas(uint256 newGas, uint256 oldGas);\\n    event SetWhitelisted(address account, bool value);\\n    event SetCEX(address account, bool value);\\n    event SetMarketMaker(address account, bool value);\\n    event SetDividendExempt(address account, bool exempt);\\n    event SetMinBalanceForDividends(uint256 amount);\\n    event SetSwapBackSettings(bool enabled, uint256 amount);\\n    event TriggerSwapBack();\\n    event SetTaxes(uint256 buyTax, uint256 sellTax, uint256 transferTax);\\n    event SetTaxShares(uint256 rewardShare, uint256 buybackShare, uint256 liquidityShare, uint256 marketingShare);\\n    event DepositMarketing(address wallet, uint256 amount);\\n    event DepositCharity(address wallet, uint256 amount);\\n    event AutoLiquidity(uint256 pairAmount, uint256 tokenAmount);\\n\\n    modifier swapping() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor() BEP20(marketingWallet) {\\n        pair = IDEXFactory(ROUTER.factory()).createPair(ROUTER.WETH(), address(this));\\n        _approve(address(this), address(ROUTER), type(uint256).max);\\n        isMarketMaker[pair] = true;\\n\\n        distributor = new DividendDistributor();\\n        _excludeAccounts();\\n    }\\n\\n    // Public\\n\\n    receive() external payable {}\\n\\n    function getCirculatingSupply() external view returns (uint256) {\\n        return totalSupply() - balanceOf(DEAD);\\n    }\\n\\n    // Private\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\\n        if (!isWhitelisted[sender]) { require(tradingEnabled, \\\"Trading is disabled\\\"); }\\n\\n        if (inSwap || amount == 0) {\\n            super._transfer(sender, recipient, amount);\\n            return;\\n        }\\n\\n        if (_shouldSwapBack(recipient)) { _swapBack(); }\\n        uint256 amountAfterTaxes = _shouldTakeTaxes(sender) ? _takeTax(sender, recipient, amount) : amount;\\n        super._transfer(sender, recipient, amountAfterTaxes);\\n\\n        if (_shouldSetShares(sender)) { try distributor.setShare(sender, balanceOf(sender)) {} catch {} }\\n        if (_shouldSetShares(recipient)) { try distributor.setShare(recipient, balanceOf(recipient)) {} catch {} }\\n        if (_shouldProcessDividends(sender, recipient)) { try distributor.process() {} catch {} }\\n    }\\n\\n    function _shouldSwapBack(address recipient) private view returns (bool) {\\n        return isMarketMaker[recipient] \\u0026\\u0026 swapEnabled \\u0026\\u0026 balanceOf(address(this)) \\u003e= swapThreshold;\\n    }\\n\\n    function _shouldTakeTaxes(address sender) private view returns (bool) {\\n        return !isWhitelisted[sender];\\n    }\\n\\n    function _shouldSetShares(address account) private view returns (bool) {\\n        return !isDividendExempt[account] \\u0026\\u0026 balanceOf(account) \\u003e= minBalanceForDividends;\\n    }\\n\\n    function _shouldProcessDividends(address sender, address recipient) private view returns (bool) {\\n        return !isWhitelisted[sender] \\u0026\\u0026 !isCEX[sender] \\u0026\\u0026 !isCEX[recipient];\\n    }\\n\\n    function _swapBack() private swapping {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = ROUTER.WETH();\\n\\n        uint256 liquidityTokens = swapThreshold * liquidityShare / totalShares / 2;\\n        uint256 amountToSwap = swapThreshold - liquidityTokens;\\n        uint256 balanceBefore = address(this).balance;\\n\\n        ROUTER.swapExactTokensForETH(\\n            amountToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amountBNB = address(this).balance - balanceBefore;\\n        uint256 totalBNBShares = totalShares - liquidityShare / 2;\\n\\n        uint256 amountBNBLiquidity = amountBNB * liquidityShare / totalBNBShares / 2;\\n        uint256 amountBNBMarketing = amountBNB * marketingShare / totalBNBShares;\\n        uint256 amountBNBCharity = amountBNB * buybackShare / totalBNBShares;\\n        uint256 amountBNBRewards = amountBNB * rewardShare / totalBNBShares;\\n\\n        try distributor.deposit{value: amountBNBRewards}() {} catch {}\\n        (bool marketingSuccess,) = payable(marketingWallet).call{value: amountBNBMarketing, gas: transferGas}(\\\"\\\");\\n        if (marketingSuccess) { emit DepositMarketing(marketingWallet, amountBNBMarketing); }\\n        (bool charitySuccess,) = payable(buybackWallet).call{value: amountBNBCharity, gas: transferGas}(\\\"\\\");\\n        if (charitySuccess) { emit DepositCharity(buybackWallet, amountBNBCharity); }\\n\\n        if (liquidityTokens \\u003e 0) {\\n            ROUTER.addLiquidityETH{value: amountBNBLiquidity}(\\n                address(this),\\n                liquidityTokens,\\n                0,\\n                0,\\n                address(this),\\n                block.timestamp\\n            );\\n\\n            emit AutoLiquidity(amountBNBLiquidity, liquidityTokens);\\n        }\\n    }\\n\\n    function _takeTax(address sender, address recipient, uint256 amount) private returns (uint256) {\\n        uint256 taxAmount = amount * _getTotalTax(sender, recipient) / DENOMINATOR;\\n        if (taxAmount \\u003e 0) { super._transfer(sender, address(this), taxAmount); }\\n        return amount - taxAmount;\\n    }\\n\\n    function _getTotalTax(address sender, address recipient) private view returns (uint256) {\\n        if (isCEX[recipient]) { return 0; }\\n        if (isCEX[sender]) { return buyTax; }\\n\\n        if (isMarketMaker[sender]) {\\n            return buyTax;\\n        } else if (isMarketMaker[recipient]) {\\n            return sellTax;\\n        } else {\\n            return transferTax;\\n        }\\n    }\\n\\n    function _excludeAccounts() private {\\n        isWhitelisted[marketingWallet] = true;\\n        isDividendExempt[marketingWallet] = true;\\n        isDividendExempt[address(this)] = true;\\n        isDividendExempt[pair] = true;\\n        isDividendExempt[DEAD] = true;\\n    }\\n\\n    // Maintenance\\n\\n    function preparePresale(address presale) external onlyOwner {\\n        require(!presaleInitialized, \\\"Presale is already initialized\\\");\\n        isWhitelisted[presale] = true;\\n        isDividendExempt[presale] = true;\\n        distributor.setShare(presale, 0);\\n        presaleInitialized = true;\\n        emit PreparePresale(presale);\\n    }\\n\\n    function recoverBNB() external onlyOwner {\\n        uint256 amount = address(this).balance;\\n        (bool sent,) = payable(marketingWallet).call{value: amount, gas: transferGas}(\\\"\\\");\\n        require(sent, \\\"Tx failed\\\");\\n        emit RecoverBNB(amount);\\n    }\\n\\n    function recoverBEP20(IBEP20 token, address recipient) external onlyOwner {\\n        require(address(token) != address(this), \\\"Can\\u0027t withdraw MRFLOKI\\\");\\n        uint256 amount = token.balanceOf(address(this));\\n        token.transfer(recipient, amount);\\n        emit RecoverBEP20(address(token), amount);\\n    }\\n\\n    function enableTrading() external onlyOwner {\\n        tradingEnabled = true;\\n        emit EnableTrading();\\n    }\\n\\n    function setMarketingWallet(address newWallet) external onlyOwner {\\n        require(newWallet != address(0), \\\"New marketing wallet is the zero address\\\");\\n        isWhitelisted[marketingWallet] = false;\\n        isDividendExempt[marketingWallet] = false;\\n        isDividendExempt[newWallet] = true;\\n        emit SetMarketingWallet(newWallet, marketingWallet);\\n        marketingWallet = newWallet;\\n    }\\n\\n    function setBuybackWallet(address newWallet) external onlyOwner {\\n        require(newWallet != address(0), \\\"New buyback wallet is the zero address\\\");\\n        emit SetBuybackWallet(newWallet, buybackWallet);\\n        buybackWallet = newWallet;\\n    }\\n\\n    function setTransferGas(uint256 gas) external onlyOwner {\\n        require(gas \\u003e= 21000 \\u0026\\u0026 gas \\u003c= 50000, \\\"Invalid parameter\\\");\\n        emit SetTransferGas(gas, transferGas);\\n        transferGas = gas;\\n    }\\n\\n    function setIsWhitelisted(address account, bool value) external onlyOwner {\\n        require(account != pair, \\\"Can\\u0027t modify pair\\\");\\n        isWhitelisted[account] = value;\\n        emit SetWhitelisted(account, value);\\n    }\\n\\n    function setIsCEX(address account, bool value) external onlyOwner {\\n        require(account != pair, \\\"Can\\u0027t modify pair\\\");\\n        isCEX[account] = value;\\n        emit SetCEX(account, value);\\n    }\\n\\n    function setIsMarketMaker(address account, bool value) external onlyOwner {\\n        require(account != pair, \\\"Can\\u0027t modify pair\\\");\\n        isMarketMaker[account] = value;\\n        emit SetMarketMaker(account, value);\\n    }\\n\\n    function setIsDividendExempt(address account, bool exempt) external onlyOwner {\\n        require(account != address(this) \\u0026\\u0026 account != pair \\u0026\\u0026 account != marketingWallet, \\\"Invalid account\\\");\\n\\n        isDividendExempt[account] = exempt;\\n        if (exempt) {\\n            distributor.setShare(account, 0);\\n        } else {\\n            distributor.setShare(account, balanceOf(account));\\n        }\\n\\n        emit SetDividendExempt(account, exempt);\\n    }\\n\\n    function setMinBalanceForDividends(uint256 amount) external onlyOwner {\\n        uint256 tokenAmount = amount * 10**decimals();\\n        require(tokenAmount \\u003c= 100000000 * 10**decimals(), \\\"Invalid parameter\\\");\\n        minBalanceForDividends = tokenAmount;\\n        emit SetMinBalanceForDividends(tokenAmount);\\n    }\\n\\n    function setSwapBackSettings(bool enabled, uint256 amount) external onlyOwner {\\n        uint256 tokenAmount = amount * 10**decimals();\\n        swapEnabled = enabled;\\n        swapThreshold = tokenAmount;\\n        emit SetSwapBackSettings(enabled, tokenAmount);\\n    }\\n\\n    function triggerSwapBack() external onlyOwner {\\n        _swapBack();\\n        emit TriggerSwapBack();\\n    }\\n\\n    function setTaxes(uint256 newBuyTax, uint256 newSellTax, uint256 newTransferTax) external onlyOwner {\\n        require(newBuyTax \\u003c= 3000 \\u0026\\u0026 newSellTax \\u003c= 3500 \\u0026\\u0026 newTransferTax \\u003c= 1500, \\\"Too high taxes\\\");\\n        buyTax = newBuyTax;\\n        sellTax = newSellTax;\\n        transferTax = newTransferTax;\\n        emit SetTaxes(buyTax, sellTax, transferTax);\\n    }\\n\\n    function setTaxShares(\\n        uint256 newRewardShare,\\n        uint256 newBuybackShare,\\n        uint256 newLiquidityShare,\\n        uint256 newMarketingShare\\n    ) external onlyOwner {\\n        rewardShare = newRewardShare;\\n        buybackShare = newBuybackShare;\\n        liquidityShare = newLiquidityShare;\\n        marketingShare = newMarketingShare;\\n        totalShares = rewardShare + buybackShare + liquidityShare + marketingShare;\\n        emit SetTaxShares(rewardShare, buybackShare, liquidityShare, marketingShare);\\n    }\\n\\n    function setDistributionCriteria(uint256 newPeriod, uint256 newMinDistribution) external onlyOwner {\\n        distributor.setDistributionCriteria(newPeriod, newMinDistribution);\\n    }\\n\\n    function setGasLimit(uint256 newGasLimit) external onlyOwner {\\n        distributor.setGasLimit(newGasLimit);\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    function owner() internal view returns (address) {\\n        return _owner;\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"AutoLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositCharity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositMarketing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnableTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"presale\",\"type\":\"address\"}],\"name\":\"PreparePresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverBEP20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"SetBuybackWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetCEX\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"SetDividendExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetMarketMaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"SetMarketingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetMinBalanceForDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetSwapBackSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buybackShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingShare\",\"type\":\"uint256\"}],\"name\":\"SetTaxShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferTax\",\"type\":\"uint256\"}],\"name\":\"SetTaxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldGas\",\"type\":\"uint256\"}],\"name\":\"SetTransferGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TriggerSwapBack\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCEX\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketMaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBalanceForDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"presale\",\"type\":\"address\"}],\"name\":\"preparePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"recoverBEP20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setBuybackWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMinDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newGasLimit\",\"type\":\"uint256\"}],\"name\":\"setGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsCEX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsMarketMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBuybackShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLiquidityShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingShare\",\"type\":\"uint256\"}],\"name\":\"setTaxShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTransferTax\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setTransferGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MetaworldPad", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fdfe34e7217d20bbd06c0dfd31a801066b05b3ac3ca4d12def0d224cdfaf353f"}