{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-11-18\r\n*/\r\n\r\npragma solidity ^0.5.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * NOTE: This call _does not revert_ if the signature is invalid, or\r\n     * if the signer is otherwise unable to be retrieved. In those scenarios,\r\n     * the zero address is returned.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return address(0);\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            return address(0);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n//Beneficieries (validators) template\r\n//import \"../helpers/ValidatorsOperations.sol\";\r\ncontract ADSCBridge {\r\n\r\n        IERC20 public token;\r\n        using SafeERC20 for IERC20;\r\n        using SafeMath for uint256;\r\n\r\n        enum Status {PENDING,WITHDRAW, CANCELED, CONFIRMED, CONFIRMED_WITHDRAW}\r\n        \r\n        struct DepositInfo{\r\n            uint256 last_deposit_time;\r\n            uint256 deposit_amount;\r\n        }\r\n\r\n        struct WithdrawInfo{\r\n            uint256 last_withdraw_time;\r\n            uint256 withdraw_amount;\r\n        }\r\n        struct Message {\r\n            bytes32 messageID;\r\n            address spender;\r\n            bytes32 substrateAddress;\r\n            uint availableAmount;\r\n            Status status;\r\n        }\r\n\r\n    \r\n\r\n        event RelayMessage(bytes32 messageID, address sender, bytes32 recipient, uint amount);\r\n        event RevertMessage(bytes32 messageID, address sender, uint amount);\r\n        event WithdrawMessage(bytes32 MessageID, address recipient , bytes32 substrateSender, uint amount, bytes sig);\r\n        event ConfirmWithdrawMessage(bytes32 messageID);\r\n        \r\n\r\n        bytes constant internal SIGN_HASH_PREFIX = \"\\x19Ethereum Signed Message:\\n32\";\r\n        mapping(bytes32 => Message) public messages;\r\n        mapping(address => DepositInfo) public user_deposit_info;\r\n        mapping(address => WithdrawInfo) public user_withdraw_info;\r\n        DepositInfo public contract_deposit_info;\r\n        WithdrawInfo public contract_withdraw_info;\r\n        address public submiter;\r\n        address public owner;\r\n        uint256 private user_daily_max_deposit_and_withdraw_amount = 100000 * 10 ** 18; //init value\r\n        uint256 private daily_max_deposit_and_withdraw_amount = 6000000 * 10 ** 18; //init value\r\n        uint256 private user_min_deposit_and_withdraw_amount = 1000 * 10 ** 18; //init value\r\n        uint256 private user_max_deposit_and_withdraw_amount = 20000 * 10 ** 18; //init value\r\n\r\n\r\n\r\n       /**\r\n       * @notice Constructor.\r\n       * @param _token  Address of DPR token\r\n       */\r\n\r\n        constructor (IERC20 _token,address _submiter) public {\r\n            owner = msg.sender;\r\n            token = _token;\r\n            submiter = _submiter;\r\n        }  \r\n\r\n        /*\r\n            check that message is valid\r\n        */\r\n        modifier validMessage(bytes32 messageID, address spender, bytes32 substrateAddress, uint availableAmount) {\r\n            require((messages[messageID].spender == spender)\r\n                && (messages[messageID].substrateAddress == substrateAddress)\r\n                && (messages[messageID].availableAmount == availableAmount), \"Data is not valid\");\r\n            _;\r\n        }\r\n\r\n\r\n        modifier pendingMessage(bytes32 messageID) {\r\n            require(messages[messageID].status ==  Status.PENDING, \"DPRBridge: Message is not pending\");\r\n            _;\r\n        }\r\n\r\n        modifier onlyOwner(){\r\n            require(msg.sender == owner, \"DPRBridge: Not Owner\");\r\n        _;\r\n        }\r\n\r\n        modifier withdrawMessage(bytes32 messageID) {\r\n            require(messages[messageID].status ==  Status.WITHDRAW, \"Message is not withdrawed\");\r\n            _;\r\n        }\r\n\r\n        modifier  updateUserDepositInfo(address user, uint256 amount) {\r\n            require(amount >= user_min_deposit_and_withdraw_amount && amount <= user_max_deposit_and_withdraw_amount, \"DPRBridge: Not in the range\");\r\n            DepositInfo storage di = user_deposit_info[user];\r\n            uint256 last_deposit_time = di.last_deposit_time;\r\n            if(last_deposit_time == 0){\r\n                require(amount <= user_daily_max_deposit_and_withdraw_amount,\"DPRBridge: Execeed the daily limit\");\r\n                di.last_deposit_time = block.timestamp;\r\n                di.deposit_amount = amount;\r\n            }else{\r\n                uint256 pass_time = block.timestamp.sub(last_deposit_time);\r\n                if(pass_time <= 1 days){\r\n                    uint256 total_deposit_amount = di.deposit_amount.add(amount);\r\n                    require(total_deposit_amount <= user_daily_max_deposit_and_withdraw_amount, \"DPRBridge: Execeed the daily limit\");\r\n                    di.deposit_amount = total_deposit_amount;\r\n                }else{\r\n                    require(amount <= user_daily_max_deposit_and_withdraw_amount, \"DPRBridge: Execeed the daily limit\");\r\n                    di.last_deposit_time = block.timestamp;\r\n                    di.deposit_amount = amount;\r\n\r\n                }\r\n            }\r\n            _;\r\n        }\r\n\r\n        modifier updateContractDepositInfo(uint256 amount){\r\n            DepositInfo storage cdi = contract_deposit_info;\r\n            uint256 last_deposit_time = cdi.last_deposit_time;\r\n            if(last_deposit_time == 0){\r\n                cdi.last_deposit_time = block.timestamp;\r\n                cdi.deposit_amount += amount;\r\n            }else{\r\n                uint256 pass_time = block.timestamp.sub(last_deposit_time);\r\n                if(pass_time <= 1 days){\r\n                    uint256 total_deposit_amount = cdi.deposit_amount.add(amount);\r\n                    require(total_deposit_amount <= daily_max_deposit_and_withdraw_amount, \"DPRBridge: Execeed contract deposit limit\");\r\n                    cdi.deposit_amount = total_deposit_amount;\r\n                }else{\r\n                    cdi.deposit_amount = amount;\r\n                    cdi.last_deposit_time = block.timestamp;\r\n                }\r\n                \r\n            }\r\n            _;\r\n            \r\n        }\r\n\r\n        modifier updateContractWithdrawInfo(uint256 amount){\r\n            WithdrawInfo storage cdi = contract_withdraw_info;\r\n            uint256 last_withdraw_time = cdi.last_withdraw_time;\r\n            if(last_withdraw_time == 0){\r\n                cdi.last_withdraw_time = block.timestamp;\r\n                cdi.withdraw_amount += amount;\r\n            }else{\r\n                uint256 pass_time = block.timestamp.sub(last_withdraw_time);\r\n                if(pass_time <= 1 days){\r\n                    uint256 total_withdraw_amount = cdi.withdraw_amount.add(amount);\r\n                    require(total_withdraw_amount <= daily_max_deposit_and_withdraw_amount, \"DPRBridge: Execeed contract deposit limit\");\r\n                    cdi.withdraw_amount = total_withdraw_amount;\r\n                }else{\r\n                    cdi.withdraw_amount = amount;\r\n                    cdi.last_withdraw_time = block.timestamp;\r\n                }\r\n                \r\n            }\r\n            _;\r\n            \r\n        }\r\n\r\n        modifier  updateUserWithdrawInfo(address user, uint256 amount) {\r\n            require(amount >= user_min_deposit_and_withdraw_amount && amount <= user_max_deposit_and_withdraw_amount, \"DPRBridge: Not in the range\");\r\n            WithdrawInfo storage ui = user_withdraw_info[user];\r\n            uint256 last_withdraw_time = ui.last_withdraw_time;\r\n            if(last_withdraw_time == 0){\r\n                require(amount <= user_daily_max_deposit_and_withdraw_amount,\"DPRBridge: Execeed the daily limit\");\r\n                ui.last_withdraw_time = block.timestamp;\r\n                ui.withdraw_amount = amount;\r\n            }else{\r\n                uint256 pass_time = block.timestamp.sub(last_withdraw_time);\r\n                if(pass_time <= 1 days){\r\n                    uint256 total_withdraw_amount = ui.withdraw_amount.add(amount);\r\n                    require(total_withdraw_amount <= user_daily_max_deposit_and_withdraw_amount, \"DPRBridge: Execeed the daily limit\");\r\n                    ui.withdraw_amount = total_withdraw_amount;\r\n                }else{\r\n                    require(amount <= user_daily_max_deposit_and_withdraw_amount, \"DPRBridge: Execeed the daily limit\");\r\n                    ui.last_withdraw_time = block.timestamp;\r\n                    ui.withdraw_amount = amount;\r\n\r\n                }\r\n            }\r\n            _;\r\n        }\r\n\r\n        function changeSubmiter(address _newSubmiter)   external onlyOwner{\r\n            submiter = _newSubmiter;\r\n        }\r\n\r\n        function setUserDailyMax(uint256 max_amount) external onlyOwner returns(bool){\r\n            user_daily_max_deposit_and_withdraw_amount = max_amount;\r\n            return true;\r\n        }\r\n\r\n        function setDailyMax(uint256 max_amount) external onlyOwner returns(bool){\r\n            daily_max_deposit_and_withdraw_amount = max_amount;\r\n            return true;\r\n        }\r\n\r\n        function setUserMin(uint256 min_amount) external onlyOwner returns(bool){\r\n            user_min_deposit_and_withdraw_amount = min_amount;\r\n            return true;\r\n        }\r\n\r\n         function setUserMax(uint256 max_amount) external onlyOwner returns(bool){\r\n            user_max_deposit_and_withdraw_amount = max_amount;\r\n            return true;\r\n         }\r\n\r\n        function setTransfer(uint amount, bytes32 substrateAddress) public  \r\n            updateUserDepositInfo(msg.sender, amount) \r\n            updateContractDepositInfo(amount){\r\n            require(token.allowance(msg.sender, address(this)) >= amount, \"contract is not allowed to this amount\");\r\n            \r\n            token.transferFrom(msg.sender, address(this), amount);\r\n\r\n            bytes32 messageID = keccak256(abi.encodePacked(now));\r\n\r\n            Message  memory message = Message(messageID, msg.sender, substrateAddress, amount, Status.CONFIRMED);\r\n            messages[messageID] = message;\r\n\r\n            emit RelayMessage(messageID, msg.sender, substrateAddress, amount);\r\n        }\r\n\r\n        /*\r\n        * Widthdraw finance by message ID when transfer pending\r\n        */\r\n        function revertTransfer(bytes32 messageID) public pendingMessage(messageID) {\r\n            Message storage message = messages[messageID];\r\n            require(message.spender == msg.sender, \"DPRBridge: Not spender\");\r\n            message.status = Status.CANCELED;\r\n            DepositInfo storage di = user_deposit_info[msg.sender];\r\n            di.deposit_amount = di.deposit_amount.sub(message.availableAmount);\r\n            DepositInfo storage cdi = contract_deposit_info;\r\n            cdi.deposit_amount.sub(message.availableAmount);\r\n            token.transfer(msg.sender, message.availableAmount);\r\n\r\n            emit RevertMessage(messageID, msg.sender, message.availableAmount);\r\n        }\r\n\r\n\r\n        /*\r\n        * Withdraw tranfer by message ID after approve from Substrate\r\n        */\r\n        function withdrawTransfer(bytes32  substrateSender, address recipient, uint availableAmount,bytes memory sig)  public\r\n        updateContractWithdrawInfo(availableAmount)\r\n        updateUserWithdrawInfo(recipient, availableAmount)\r\n         {  \r\n            require(token.balanceOf(address(this)) >= availableAmount, \"DPRBridge: Balance is not enough\");\r\n            bytes32 messageID = keccak256(abi.encodePacked(substrateSender, recipient, availableAmount, block.timestamp));\r\n            setMessageAndEmitEvent(messageID, substrateSender, recipient, availableAmount, sig);\r\n        }\r\n\r\n        function setMessageAndEmitEvent(bytes32 messageID, bytes32  substrateSender, address recipient, uint availableAmount, bytes memory sig) private {\r\n             Message  memory message = Message(messageID, recipient, substrateSender, availableAmount, Status.WITHDRAW);\r\n             messages[messageID] = message;\r\n             emit WithdrawMessage(messageID,msg.sender , substrateSender, availableAmount, sig);\r\n        }\r\n\r\n        /*\r\n        * Confirm Withdraw tranfer by message ID after approve from Substrate\r\n        */\r\n        function confirmWithdrawTransfer(bytes32 messageID, bytes memory signature) public withdrawMessage(messageID) \r\n        {\r\n            bytes32 data = keccak256(abi.encodePacked(messageID));\r\n            bytes32 sign_data = keccak256(abi.encodePacked(SIGN_HASH_PREFIX, data));\r\n            address recover_address = ECDSA.recover(sign_data, signature);\r\n            require(recover_address == submiter, \"DPRBridge: Address not match\");\r\n            Message storage message = messages[messageID];\r\n            uint256 withdraw_amount = message.availableAmount;\r\n            //setWithdrawData(message.spender, withdraw_amount);\r\n            message.status = Status.CONFIRMED_WITHDRAW;\r\n            token.safeTransfer(message.spender, withdraw_amount);\r\n            emit ConfirmWithdrawMessage(messageID);\r\n            \r\n            \r\n        }\r\n        function transferOwnerShip(address _newOwner) onlyOwner external{\r\n            owner = _newOwner;\r\n        }\r\n        function withdrawAllTokens(IERC20 _token, uint256 amount) external onlyOwner{\r\n            _token.safeTransfer(owner, amount);\r\n        }\r\n\r\n        function cancelWithdraw(bytes32 messageID) onlyOwner external withdrawMessage(messageID) {\r\n            Message storage message = messages[messageID];\r\n            message.status = Status.CANCELED;\r\n        }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_submiter\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageID\",\"type\":\"bytes32\"}],\"name\":\"ConfirmWithdrawMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RelayMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RevertMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"MessageID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"substrateSender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"WithdrawMessage\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageID\",\"type\":\"bytes32\"}],\"name\":\"cancelWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSubmiter\",\"type\":\"address\"}],\"name\":\"changeSubmiter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"confirmWithdrawTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_deposit_info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"last_deposit_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_withdraw_info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"last_withdraw_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"messages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"substrateAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum ADSCBridge.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageID\",\"type\":\"bytes32\"}],\"name\":\"revertTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max_amount\",\"type\":\"uint256\"}],\"name\":\"setDailyMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"substrateAddress\",\"type\":\"bytes32\"}],\"name\":\"setTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max_amount\",\"type\":\"uint256\"}],\"name\":\"setUserDailyMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max_amount\",\"type\":\"uint256\"}],\"name\":\"setUserMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min_amount\",\"type\":\"uint256\"}],\"name\":\"setUserMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"submiter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnerShip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_deposit_info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"last_deposit_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_withdraw_info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"last_withdraw_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"substrateSender\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"withdrawTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ADSCBridge", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008a7b5fe6f43db70affc51f3881ff79354640f3e70000000000000000000000002d8c194578ef8e66dff2b3faa3e03a872f74ffd4", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://33dea9bab1c9e46dc18a40e1022a4462977441f47a604c5c4cad26edf0c40ae6"}