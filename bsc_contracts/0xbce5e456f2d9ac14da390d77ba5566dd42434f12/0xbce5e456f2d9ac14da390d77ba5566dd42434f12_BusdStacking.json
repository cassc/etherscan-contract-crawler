{"SourceCode": "/**\r\n  ____    _   _   ____    ____    ____    _____      _       ____   _  __  ___   _   _    ____ \r\n | __ )  | | | | / ___|  |  _ \\  / ___|  |_   _|    / \\     / ___| | |/ / |_ _| | \\ | |  / ___|\r\n |  _ \\  | | | | \\___ \\  | | | | \\___ \\    | |     / _ \\   | |     | ' /   | |  |  \\| | | |  _ \r\n | |_) | | |_| |  ___) | | |_| |  ___) |   | |    / ___ \\  | |___  | . \\   | |  | |\\  | | |_| |\r\n |____/   \\___/  |____/  |____/  |____/    |_|   /_/   \\_\\  \\____| |_|\\_\\ |___| |_| \\_|  \\____|r\n **/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\ninterface BUSDToken {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract BusdStacking {\r\n    using SafeMath for uint256;\r\n\r\n    BUSDToken public token_BUSD;\r\n\r\n    address erctoken = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; /** BUSD token **/\r\n    \r\n    uint256 public MINER_TO_HIRE_1FARM = 2880000; \r\n    uint256 public PERCENTS_DIVIDER = 1000;\r\n    uint256 public REFERRAL = 80;\r\n    uint256 public TAX = 10;\r\n    uint256 public MARKET_MINER_DIVISOR = 2; // 50%\r\n    uint256 public MARKET_MINER_DIVISOR_SELL = 1; // 100%\r\n\r\n    uint256 public MIN_INVEST_LIMIT = 10 * 1e18; /** 10 BUSD  **/\r\n    uint256 public WALLET_DEPOSIT_LIMIT = 50000 * 1e18; /** 50000 BUSD  **/\r\n\r\n\tuint256 public COMPOUND_BONUS = 25; /** 2.5% **/\r\n\tuint256 public COMPOUND_BONUS_MAX_TIMES = 10; /** 10 times / 5 days. **/\r\n    uint256 public COMPOUND_STEP = 12 * 60 * 60; /** every 12 hours. **/\r\n\r\n    uint256 public WITHDRAWAL_TAX = 300; \r\n    uint256 public COMPOUND_FOR_NO_TAX_WITHDRAWAL = 2; // compound days, for no tax withdrawal.\r\n\r\n    uint256 public totalStaked;\r\n    uint256 public totalDeposits;\r\n    uint256 public totalCompound;\r\n    uint256 public totalRefBonus;\r\n    uint256 public totalWithdrawn;\r\n\r\n    uint256 public marketMiners;\r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n    bool public contractStarted;\r\n\r\n\tuint256 public CUTOFF_STEP = 120 * 60 * 60; /** 5 days cut interest **/\r\n\tuint256 public WITHDRAW_COOLDOWN = 4 * 60 * 60; /** 4 hours  **/\r\n\r\n    address public owner;\r\n    address public dev1;\r\n    address public dev2;\r\n    address public dev3;\r\n    address public dev4;\r\n    address public mkt;\r\n\r\n    struct User {\r\n        uint256 initialDeposit;\r\n        uint256 userDeposit;\r\n        uint256 miners;\r\n        uint256 claimedMiners;\r\n        uint256 lastHatch;\r\n        address referrer;\r\n        uint256 referralsCount;\r\n        uint256 referralMinerRewards;\r\n        uint256 totalWithdrawn;\r\n        uint256 dailyCompoundBonus;\r\n        uint256 lastWithdrawTime;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n\r\n    constructor(address _dev1, address _dev2, address _dev3, address _dev4, address _mkt) {\r\n\t\trequire(!isContract(_dev1) && !isContract(_dev2) && !isContract(_dev3) && !isContract(_dev4) && !isContract(_mkt));\r\n        owner = msg.sender;\r\n        dev1 = _dev1;\r\n        dev2 = _dev2;\r\n        dev3 = _dev3;\r\n        dev4 = _dev4;   \r\n        mkt = _mkt;     /** Marketing */\r\n        token_BUSD = BUSDToken(erctoken);\r\n    }\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    function Compounding(bool isCompound) public {\r\n        User storage user = users[msg.sender];\r\n        require(contractStarted, \"Contract not yet Started.\");\r\n\r\n        uint256 minersUsed = getMyMiners();\r\n        uint256 minersForCompound = minersUsed;\r\n\r\n        if(isCompound) {\r\n            uint256 dailyCompoundBonus = getDailyCompoundBonus(msg.sender, minersForCompound);\r\n            minersForCompound = minersForCompound.add(dailyCompoundBonus);\r\n            uint256 minersUsedValue = calculateMinersSell(minersForCompound);\r\n            user.userDeposit = user.userDeposit.add(minersUsedValue);\r\n            totalCompound = totalCompound.add(minersUsedValue);\r\n        } \r\n\r\n        if(block.timestamp.sub(user.lastHatch) >= COMPOUND_STEP) {\r\n            if(user.dailyCompoundBonus < COMPOUND_BONUS_MAX_TIMES) {\r\n                user.dailyCompoundBonus = user.dailyCompoundBonus.add(1);\r\n            }\r\n        }\r\n        \r\n        user.miners = user.miners.add(minersForCompound.div(MINER_TO_HIRE_1FARM));\r\n        user.claimedMiners = 0;\r\n        user.lastHatch = block.timestamp;\r\n\r\n        marketMiners = marketMiners.add(minersUsed.div(MARKET_MINER_DIVISOR));\r\n    }\r\n\r\n    function Withdraw() public{\r\n        require(contractStarted);\r\n        User storage user = users[msg.sender];\r\n        uint256 hasMiners = getMyMiners();\r\n        uint256 minerValue = calculateMinersSell(hasMiners);\r\n        \r\n        /** \r\n            if user compound < to mandatory compound days**/\r\n        if(user.dailyCompoundBonus < COMPOUND_FOR_NO_TAX_WITHDRAWAL){\r\n            //daily compound bonus count will not reset and minerValue will be deducted with feedback tax.\r\n            minerValue = minerValue.sub(minerValue.mul(WITHDRAWAL_TAX).div(PERCENTS_DIVIDER));\r\n        }else{\r\n            //set daily compound bonus count to 0 and minerValue will remain without deductions\r\n             user.dailyCompoundBonus = 0;   \r\n        }\r\n        \r\n        user.lastWithdrawTime = block.timestamp;\r\n        user.claimedMiners = 0;  \r\n        user.lastHatch = block.timestamp;\r\n        marketMiners = marketMiners.add(hasMiners.div(MARKET_MINER_DIVISOR_SELL));\r\n        \r\n        if(getBalance() < minerValue) {\r\n            minerValue = getBalance();\r\n        }\r\n\r\n        uint256 minersPayout = minerValue.sub(payFees(minerValue));\r\n        token_BUSD.transfer(msg.sender, minersPayout);\r\n        user.totalWithdrawn = user.totalWithdrawn.add(minersPayout);\r\n        totalWithdrawn = totalWithdrawn.add(minersPayout);\r\n    }\r\n\r\n    function Deposit(address ref, uint256 amount) public{\r\n        require(contractStarted);\r\n        User storage user = users[msg.sender];\r\n        require(amount >= MIN_INVEST_LIMIT, \"Mininum investment not met.\");\r\n        require(user.initialDeposit.add(amount) <= WALLET_DEPOSIT_LIMIT, \"Max deposit limit reached.\");\r\n        \r\n        token_BUSD.transferFrom(address(msg.sender), address(this), amount);\r\n        uint256 minerBought = calculateMinerBuy(amount, getBalance().sub(amount));\r\n        user.userDeposit = user.userDeposit.add(amount);\r\n        user.initialDeposit = user.initialDeposit.add(amount);\r\n        user.claimedMiners = user.claimedMiners.add(minerBought);\r\n\r\n        if (user.referrer == address(0)) {\r\n            if (ref != msg.sender) {\r\n                user.referrer = ref;\r\n            }\r\n\r\n            address upline1 = user.referrer;\r\n            if (upline1 != address(0)) {\r\n                users[upline1].referralsCount = users[upline1].referralsCount.add(1);\r\n            }\r\n        }\r\n                \r\n        if (user.referrer != address(0)) {\r\n            address upline = user.referrer;\r\n            if (upline != address(0)) {\r\n                uint256 refRewards = amount.mul(REFERRAL).div(PERCENTS_DIVIDER);\r\n                token_BUSD.transfer(upline, refRewards);\r\n                users[upline].referralMinerRewards = users[upline].referralMinerRewards.add(refRewards);\r\n                totalRefBonus = totalRefBonus.add(refRewards);\r\n            }\r\n        }\r\n\r\n        uint256 minersPayout = payFees(amount);\r\n        /** less the fee on total Staked to give more transparency of data. **/\r\n        totalStaked = totalStaked.add(amount.sub(minersPayout));\r\n        totalDeposits = totalDeposits.add(1);\r\n        Compounding(false);\r\n    }\r\n\r\n    function payFees(uint256 minerValue) internal returns(uint256){\r\n        uint256 tax = minerValue.mul(TAX).div(PERCENTS_DIVIDER);\r\n        token_BUSD.transfer(dev1, tax);\r\n        token_BUSD.transfer(dev2, tax);\r\n        token_BUSD.transfer(dev3, tax);\r\n        token_BUSD.transfer(dev4, tax);\r\n        token_BUSD.transfer(mkt, tax);\r\n        return tax.mul(5);\r\n    }\r\n\r\n    function getDailyCompoundBonus(address _adr, uint256 amount) public view returns(uint256){\r\n        if(users[_adr].dailyCompoundBonus == 0) {\r\n            return 0;\r\n        } else {\r\n            uint256 totalBonus = users[_adr].dailyCompoundBonus.mul(COMPOUND_BONUS); \r\n            uint256 result = amount.mul(totalBonus).div(PERCENTS_DIVIDER);\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function getUserInfo(address _adr) public view returns(uint256 _initialDeposit, uint256 _userDeposit, uint256 _miners,\r\n     uint256 _claimedMiners, uint256 _lastHatch, address _referrer, uint256 _referrals,\r\n\t uint256 _totalWithdrawn, uint256 _referralMinerRewards, uint256 _dailyCompoundBonus, uint256 _lastWithdrawTime) {\r\n         _initialDeposit = users[_adr].initialDeposit;\r\n         _userDeposit = users[_adr].userDeposit;\r\n         _miners = users[_adr].miners;\r\n         _claimedMiners = users[_adr].claimedMiners;\r\n         _lastHatch = users[_adr].lastHatch;\r\n         _referrer = users[_adr].referrer;\r\n         _referrals = users[_adr].referralsCount;\r\n         _totalWithdrawn = users[_adr].totalWithdrawn;\r\n         _referralMinerRewards = users[_adr].referralMinerRewards;\r\n         _dailyCompoundBonus = users[_adr].dailyCompoundBonus;\r\n         _lastWithdrawTime = users[_adr].lastWithdrawTime;\r\n\t}\r\n\r\n    function initialize(uint256 amount) public{\r\n        if (!contractStarted) {\r\n    \t\tif (msg.sender == owner) {\r\n    \t\t    require(marketMiners == 0);\r\n    \t\t\tcontractStarted = true;\r\n                marketMiners = 86400000000;\r\n                Deposit(msg.sender, amount);\r\n    \t\t} else revert(\"Contract not yet started.\");\r\n    \t}\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return token_BUSD.balanceOf(address(this));\r\n\t}\r\n\r\n    function getTimeStamp() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getAvailableEarnings(address _adr) public view returns(uint256) {\r\n        uint256 userminers = users[_adr].claimedMiners.add(getMinersSinceLastHatch(_adr));\r\n        return calculateMinersSell(userminers);\r\n    }\r\n\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(PSN, bs), SafeMath.add(PSNH, SafeMath.div(SafeMath.add(SafeMath.mul(PSN, rs), SafeMath.mul(PSNH, rt)), rt)));\r\n    }\r\n\r\n    function calculateMinersSell(uint256 miners) public view returns(uint256){\r\n        return calculateTrade(miners, marketMiners, getBalance());\r\n    }\r\n\r\n    function calculateMinerBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth, contractBalance, marketMiners);\r\n    }\r\n\r\n    function calculateMinerBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateMinerBuy(eth, getBalance());\r\n    }\r\n\r\n    function getMinersYield(uint256 amount) public view returns(uint256,uint256) {\r\n        uint256 minersAmount = calculateMinerBuy(amount , getBalance().add(amount).sub(amount));\r\n        uint256 miners = minersAmount.div(MINER_TO_HIRE_1FARM);\r\n        uint256 day = 1 days;\r\n        uint256 minersPerDay = day.mul(miners);\r\n        uint256 earningsPerDay = calculateMinersSellForYield(minersPerDay, amount);\r\n        return(miners, earningsPerDay);\r\n    }\r\n\r\n    function calculateMinersSellForYield(uint256 miners,uint256 amount) public view returns(uint256){\r\n        return calculateTrade(miners,marketMiners, getBalance().add(amount));\r\n    }\r\n\r\n    function getSiteInfo() public view returns (uint256 _totalStaked, uint256 _totalDeposits, uint256 _totalCompound, uint256 _totalRefBonus) {\r\n        return (totalStaked, totalDeposits, totalCompound, totalRefBonus);\r\n    }\r\n\r\n    function getMyFarms() public view returns(uint256){\r\n        return users[msg.sender].miners;\r\n    }\r\n\r\n    function getMyMiners() public view returns(uint256){\r\n        return users[msg.sender].claimedMiners.add(getMinersSinceLastHatch(msg.sender));\r\n    }\r\n\r\n    function getMinersSinceLastHatch(address adr) public view returns(uint256){\r\n        uint256 secondsSinceLastHatch = block.timestamp.sub(users[adr].lastHatch);\r\n                            /** get min time. **/\r\n        uint256 cutoffTime = min(secondsSinceLastHatch, CUTOFF_STEP);\r\n        uint256 secondsPassed = min(MINER_TO_HIRE_1FARM, cutoffTime);\r\n        return secondsPassed.mul(users[adr].miners);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /** wallet addresses setters **/\r\n    function CHANGE_OWNERSHIP(address value) external {\r\n        require(msg.sender == owner, \"Team use only.\");\r\n        owner = value;\r\n    }\r\n\r\n    /** percentage setters **/\r\n    // 2880000 - 3%, 2160000 - 4%, 1728000 - 5%, 1440000 - 6%, 1200000 - 7%, 1080000 - 8%\r\n    // 959000 - 9%, 864000 - 10%, 720000 - 12%, 575424 - 15%, 540000 - 16%, 479520 - 18%\r\n    \r\n    function PRC_MINER_TO_HIRE_1FARM(uint256 value) external {\r\n        require(msg.sender == owner, \"Team use only.\");\r\n        require(value >= 479520 && value <= 2880000); /** min 3% max 12%**/\r\n        MINER_TO_HIRE_1FARM = value;\r\n    }\r\n\r\n    function PRC_TAX(uint256 value) external {\r\n        require(msg.sender == owner, \"Team use only.\");\r\n        require(value <= 100); /** 10% max **/\r\n        TAX = value;\r\n    }    \r\n\r\n    function PRC_REFERRAL(uint256 value) external {\r\n        require(msg.sender == owner, \"Team use only.\");\r\n        require(value >= 10 && value <= 100); /** 10% max **/\r\n        REFERRAL = value;\r\n    }\r\n\r\n    function PRC_MARKET_MINER_DIVISOR(uint256 value) external {\r\n        require(msg.sender == owner, \"Team use only.\");\r\n        require(value <= 50); /** 50 = 2% **/\r\n        MARKET_MINER_DIVISOR = value;\r\n    }\r\n\r\n    /** withdrawal tax **/\r\n    function SET_WITHDRAWAL_TAX(uint256 value) external {\r\n        require(msg.sender == owner, \"Team use only.\");\r\n        require(value <= 800); /** Max Tax is 80% or lower **/\r\n        WITHDRAWAL_TAX = value;\r\n    }\r\n    \r\n    function SET_COMPOUND_FOR_NO_TAX_WITHDRAWAL(uint256 value) external {\r\n        require(msg.sender == owner, \"Team use only.\");\r\n        COMPOUND_FOR_NO_TAX_WITHDRAWAL = value;\r\n    }\r\n\r\n    function BONUS_DAILY_COMPOUND(uint256 value) external {\r\n        require(msg.sender == owner, \"Team use only.\");\r\n        require(value >= 10 && value <= 900);\r\n        COMPOUND_BONUS = value;\r\n    }\r\n\r\n    function BONUS_DAILY_COMPOUND_BONUS_MAX_TIMES(uint256 value) external {\r\n        require(msg.sender == owner, \"Team use only.\");\r\n        require(value <= 30);\r\n        COMPOUND_BONUS_MAX_TIMES = value;\r\n    }\r\n\r\n    function BONUS_COMPOUND_STEP(uint256 value) external {\r\n        require(msg.sender == owner, \"Team use only.\");\r\n        COMPOUND_STEP = value * 60 * 60;\r\n    }\r\n\r\n    function SET_MIN_INVEST_LIMIT(uint256 value) external {\r\n        require(msg.sender == owner, \"Team use only\");\r\n        MIN_INVEST_LIMIT = value * 1e18;\r\n    }\r\n\r\n    function SET_CUTOFF_STEP(uint256 value) external {\r\n        require(msg.sender == owner, \"Team use only\");\r\n        CUTOFF_STEP = value * 60 * 60;\r\n    }\r\n\r\n    function SET_WITHDRAW_COOLDOWN(uint256 value) external {\r\n        require(msg.sender == owner, \"Team use only\");\r\n        require(value <= 24);\r\n        WITHDRAW_COOLDOWN = value * 60 * 60;\r\n    }\r\n\r\n    function SET_WALLET_DEPOSIT_LIMIT(uint256 value) external {\r\n        require(msg.sender == owner, \"Team use only\");\r\n        require(value >= 20);\r\n        WALLET_DEPOSIT_LIMIT = value * 1e18;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mkt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BONUS_COMPOUND_STEP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BONUS_DAILY_COMPOUND\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BONUS_DAILY_COMPOUND_BONUS_MAX_TIMES\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_OWNERSHIP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_BONUS_MAX_TIMES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_FOR_NO_TAX_WITHDRAWAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUTOFF_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isCompound\",\"type\":\"bool\"}],\"name\":\"Compounding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_MINER_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_MINER_DIVISOR_SELL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINER_TO_HIRE_1FARM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_INVEST_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_MARKET_MINER_DIVISOR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_MINER_TO_HIRE_1FARM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_REFERRAL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_TAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_COMPOUND_FOR_NO_TAX_WITHDRAWAL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_CUTOFF_STEP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_MIN_INVEST_LIMIT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_WALLET_DEPOSIT_LIMIT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_WITHDRAWAL_TAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_WITHDRAW_COOLDOWN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_DEPOSIT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateMinerBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateMinerBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"miners\",\"type\":\"uint256\"}],\"name\":\"calculateMinersSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateMinersSellForYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getAvailableEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDailyCompoundBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMinersSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getMinersYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyFarms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCompound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRefBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedMiners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralMinerRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyCompoundBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastWithdrawTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mkt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_BUSD\",\"outputs\":[{\"internalType\":\"contract BUSDToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedMiners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralMinerRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyCompoundBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BusdStacking", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ec1e68b8ab905142124c474d33b38929f207e453000000000000000000000000404996867f8ad607c0002bf8795cae30858636b20000000000000000000000004e62c0fd6ca38191881a7c7bc0041b963fc196a3000000000000000000000000ea434ce519922fb154f9c14f60ed82f6eff2f757000000000000000000000000be424677f700154736e5bedf25b3bc893b6e2c34", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6e6e0d56bc282cf1326b7bdf089ba79200f3dc2d967efb0c3aefee3b164fc9ed"}