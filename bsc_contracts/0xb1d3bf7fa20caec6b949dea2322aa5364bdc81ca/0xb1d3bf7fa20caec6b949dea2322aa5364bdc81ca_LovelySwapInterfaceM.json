{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/lens/LovelySwapInterfaceMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\n/// @notice A fork of Multicall2 specifically tailored for the LovelySwap Interface\\r\\ncontract LovelySwapInterfaceMulticall {\\r\\n    struct Call {\\r\\n        address target;\\r\\n        uint256 gasLimit;\\r\\n        bytes callData;\\r\\n    }\\r\\n\\r\\n    struct Result {\\r\\n        bool success;\\r\\n        uint256 gasUsed;\\r\\n        bytes returnData;\\r\\n    }\\r\\n\\r\\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\\r\\n        timestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\r\\n        balance = addr.balance;\\r\\n    }\\r\\n\\r\\n    function multicall(Call[] memory calls) public returns (uint256 blockNumber, Result[] memory returnData) {\\r\\n        blockNumber = block.number;\\r\\n        returnData = new Result[](calls.length);\\r\\n        for (uint256 i = 0; i < calls.length; i++) {\\r\\n            (address target, uint256 gasLimit, bytes memory callData) =\\r\\n                (calls[i].target, calls[i].gasLimit, calls[i].callData);\\r\\n            uint256 gasLeftBefore = gasleft();\\r\\n            (bool success, bytes memory ret) = target.call{gas: gasLimit}(callData);\\r\\n            uint256 gasUsed = gasLeftBefore - gasleft();\\r\\n            returnData[i] = Result(success, gasUsed, ret);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct LovelySwapInterfaceMulticall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct LovelySwapInterfaceMulticall.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LovelySwapInterfaceMulticall", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}