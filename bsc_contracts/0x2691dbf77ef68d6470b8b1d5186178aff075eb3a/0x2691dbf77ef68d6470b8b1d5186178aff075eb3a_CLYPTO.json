{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address delegate, uint256 numTokens) external returns (bool);\r\n    function allowance(address owner, address delegate) external view returns (uint256);\r\n    function transferFrom(address from, address buyer, uint256 numTokens) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed delegate, uint256 value);\r\n}\r\n\r\ncontract CLYPTO is IERC20 {\r\n    string public constant name = \"CLYPTO\";\r\n    string public constant symbol = \"CLY\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    address public constant owner = 0xB5fFB2Ad1249F4147029836586B289095692c46B;\r\n    address public admin;\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 totalSupply_;\r\n    uint256 public burnRate = 2;\r\n    uint256 public lastBurnBlock; \r\n    uint256 public initialSupply = 1e9 * 1e18; \r\n    uint256 public minimumSupply = 100000 * 1e18; \r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Only admin can call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        admin = msg.sender; // Initialisation de l'admin\r\n        totalSupply_ = initialSupply;\r\n        balances[owner] = initialSupply;\r\n        lastBurnBlock = block.number; \r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public override view returns (uint256) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function transfer(address receiver, uint256 numTokens) public override returns (bool) {\r\n        require(numTokens <= balances[msg.sender], \"Insufficient balance.\");\r\n        balances[msg.sender] -= numTokens;\r\n        balances[receiver] += numTokens;\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address delegate, uint256 numTokens) public override returns (bool) {\r\n        require(numTokens == 0 || allowed[msg.sender][delegate] == 0, \"Reset allowance to zero before changing it\");\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address tokenOwner, address delegate) public override view returns (uint) {\r\n        return allowed[tokenOwner][delegate];\r\n    }\r\n\r\n    function transferFrom(address from, address buyer, uint256 numTokens) public override returns (bool) {\r\n        require(numTokens <= balances[from], \"Insufficient balance.\");\r\n        require(numTokens <= allowed[from][msg.sender], \"Insufficient allowance.\");\r\n\r\n        balances[from] -= numTokens;\r\n        allowed[from][msg.sender] -= numTokens;\r\n        balances[buyer] += numTokens;\r\n        emit Transfer(from, buyer, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function burnTokens() public onlyAdmin {\r\n        uint256 blocksSinceLastBurn = block.number - lastBurnBlock;\r\n        uint256 expectedBlocks = 2 * 365 * 24 * 60 * 60 / 15; \r\n\r\n        require(blocksSinceLastBurn >= expectedBlocks, \"It's not time to burn yet.\");\r\n        require(totalSupply_ > minimumSupply, \"Minimum supply reached.\");\r\n\r\n        uint256 tokensToBurn = (totalSupply_ * burnRate) / 100;\r\n        if (totalSupply_ - tokensToBurn < minimumSupply) {\r\n            tokensToBurn = totalSupply_ - minimumSupply;\r\n        }\r\n\r\n        totalSupply_ -= tokensToBurn;\r\n        lastBurnBlock = block.number; \r\n    }\r\n\r\n    function changeBurnRate(uint256 newBurnRate) public onlyAdmin {\r\n        burnRate = newBurnRate;\r\n    }\r\n\r\n    function transferAdminship(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0), \"Invalid address\");\r\n        admin = newAdmin;\r\n    }\r\n\r\n    function distributeAirdrop(address[] memory recipients, uint256 amountPerRecipient) public onlyAdmin {\r\n        require(recipients.length > 0, \"Recipients list cannot be empty\");\r\n        uint256 totalAirdropAmount = recipients.length * amountPerRecipient;\r\n        require(balances[admin] >= totalAirdropAmount, \"Insufficient balance for airdrop\");\r\n\r\n        for (uint i = 0; i < recipients.length; i++) {\r\n            address recipient = recipients[i];\r\n            balances[admin] -= amountPerRecipient;\r\n            balances[recipient] += amountPerRecipient;\r\n            emit Transfer(admin, recipient, amountPerRecipient);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBurnRate\",\"type\":\"uint256\"}],\"name\":\"changeBurnRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountPerRecipient\",\"type\":\"uint256\"}],\"name\":\"distributeAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBurnBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CLYPTO", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cff7ace89bc2a0e7ef8b55f1e1125933a271083dd2a5d9f79057eb868d0429a5"}