{"SourceCode": "{\"ADMC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IADMC20.sol\\\";\\n\\ncontract ADMC20 is IADMC20 {\\n    mapping(address =\\u003e uint256) private balances;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private allowances;\\n\\n    /**\\n     * @dev Mapping to the blacklist status of the `account`.\\n     */\\n    mapping(address =\\u003e bool) private blacklisted;\\n\\n    /**\\n     * @dev Mapping to the fee excluded status of the `account`.\\n     */\\n    mapping(address =\\u003e bool) private feeExcluded;\\n    \\n    // Token\\u0027s metadatas\\n    uint256 public override totalSupply;\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    string public override name;\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    string public override symbol;\\n\\n    /**\\n     * @dev Returns the address of the token\\u0027s owner.\\n     */\\n    address public owner;\\n\\n    // Fee receiving address\\n    address public fundAddress;\\n\\n    // Fee percentage\\n    uint public feePercentage;\\n    \\n    // Contract\\u0027s paused status\\n    bool public paused;\\n\\n    constructor() {\\n        name = \\\"Altan Dornod Mongol Coin\\\";\\n        symbol = \\\"ADMC\\\";\\n        owner = msg.sender;\\n        //0.5% fee on transfer\\n        feePercentage = 50;\\n        totalSupply = 495000000000 * 10 ** 18;\\n        balances[msg.sender] = totalSupply;\\n        feeExcluded[msg.sender] = true;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it\\u0027s overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */    \\n    function allowance(address from, address spender) public view virtual override returns (uint256) {\\n        return allowances[from][spender];\\n    }\\n\\n    /**\\n     * @dev Returns blacklist status `account`.\\n     */\\n    function getBlacklistStatus(address account) public view virtual returns (bool) {\\n        return blacklisted[account];\\n    }\\n    \\n    /**\\n     * @dev See {ADMC20 - _transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override notBlacklisted(msg.sender) returns (bool) {\\n        _transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     * Can only be called by the current owner.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() public onlyOwner returns(bool) {\\n        _pause();\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     * Can only be called by the current owner.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() public onlyOwner returns(bool) {\\n        _unpause();\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Sets `fundAddress` to `newFundAddress`.\\n     * Can only be called by the current owner.\\n     *\\n     * Emits a {FundAddressUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function updateFundAddress(address newFundAddress) public onlyOwner {\\n        address oldFundAddress = fundAddress;\\n        fundAddress = newFundAddress;\\n        emit FundAddressUpdated(msg.sender, oldFundAddress, newFundAddress);\\n    }\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        if (blacklisted[from] \\u0026\\u0026 msg.sender == owner) {\\n            _transfer(from, to, amount);\\n        } else {\\n            _spendAllowance(from, msg.sender, amount);\\n            _transfer(from, to, amount);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from caller, reducing the\\n     * total supply.\\n     * See {ADMC20 - _burn}.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     */\\n    function burn(uint256 amount) public virtual returns (bool) {\\n        _burn(msg.sender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller\\u0027s\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual onlyOwner returns (bool) {\\n        _spendAllowance(account, msg.sender, amount);\\n        _burn(account, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Sets blacklist status of `account` to `blacklist` which is boolean.\\n     * The `account` will be removed/added from/to blacklist.\\n     * Can only be called by the current owner.\\n     */\\n    function blacklistUpdate(address account, bool blacklist) public virtual onlyOwner {\\n        _blacklistUpdate(account, blacklist);\\n    }\\n\\n    /**\\n     * @dev Sets blacklist status of `account` to true.\\n     * The `account` will be added to blacklist.\\n     * Can only be called by the current owner.\\n     */\\n    function addBlacklist(address account) public virtual onlyOwner {\\n        _blacklistUpdate(account, true);\\n    }\\n\\n    /**\\n     * @dev Sets blacklist status of `account` to false.\\n     * The `account` will be removed from blacklist.\\n     * Can only be called by the current owner.\\n     */\\n    function removeBlacklist(address account) public virtual onlyOwner {\\n        _blacklistUpdate(account, false);\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, allowance(msg.sender, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = allowance(msg.sender, spender);\\n        require(currentAllowance \\u003e= subtractedValue, \\\"ADMC20: Decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Sets `fee` to `newFeePercentage`.\\n     * Can only be called by the current owner.\\n     *\\n     * Emits a {FeePercentageUpdated} event.\\n     */\\n    function updateFeePercentage(uint newFeePercentage) public virtual onlyOwner {\\n        uint oldFeePercentage = feePercentage;\\n        feePercentage = newFeePercentage;\\n        emit FeePercentageUpdated(msg.sender, oldFeePercentage, newFeePercentage);\\n    }\\n\\n    /**\\n     * @dev Adds `excludingAddress` to the fee excluded list.\\n     * Can only be called by the current owner.\\n     *\\n     * See {ADMC20 - _feeExclude}\\n     */\\n    function feeExclude(address excludingAddress) public virtual onlyOwner{\\n        _feeExclude(excludingAddress);\\n    }\\n\\n    /**\\n     * @dev Removes `includingAddress` from the fee excluded list.\\n     * Can only be called by the current owner.\\n     *\\n     * See {ADMC20 - _feeInclude}\\n     */\\n    function feeInclude(address includingAddress) public virtual onlyOwner{\\n        _feeInclude(includingAddress);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     *\\n     * Emits a {OwnershipTransferred} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `newOwner` cannot be the zero address.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"ADMC20: New owner is the zero address\\\");\\n        owner = newOwner;\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     *\\n     * Emits a {OwnershipTransferred} event.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        owner = address(0);\\n        emit OwnershipTransferred(msg.sender, address(0));\\n    }\\n\\n    /**\\n     * @dev Function to recover locked `tokenAddress` ERC20 token from address(this). \\n     * Can only be called by the current owner.\\n     */\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\\n        IADMC20(tokenAddress).transfer(owner, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev Sets `paused` to true.\\n     *\\n     * IMPORTANT: This internal function uses `whenNotPaused` modifier see {ADMC20 - whenNotPaused} \\n     *\\n     * Emits a {Paused} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `paused` cannot be set to `true`.\\n     */\\n    function _pause() internal whenNotPaused virtual {\\n        paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Sets `paused` to false.\\n     *\\n     * IMPORTANT: This internal function uses `whenPaused` modifier see {ADMC20 - whenPaused}\\n     *\\n     * Emits a {Unpaused} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `paused` cannot be set to `false`.\\n     */\\n    function _unpause() internal whenPaused virtual {\\n        paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     * IMPORTANT: If `fee` is more than 0 and `from`, `to` addresses are not \\n     * excluded from fee. The `fundAddress` will receive `fee` amount.\\n     *\\n     * Emits a {Transfer} events.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ADMC20: Transfer from the zero address\\\");\\n        require(to != address(0), \\\"ADMC20: Transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint fee = amount * feePercentage / 10000;\\n        if (feeExcluded[to] || feeExcluded[from]) {\\n            fee = 0;\\n        }\\n        uint sendAmount = amount - fee;\\n        uint256 fromBalance = balances[from];\\n        require(fromBalance \\u003e= amount, \\\"ADMC20: Transfer amount exceeds balance\\\");\\n        unchecked {\\n            balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            balances[to] += sendAmount;\\n        }\\n\\n        if (fee \\u003e 0 \\u0026\\u0026 feeExcluded[to] == false \\u0026\\u0026 feeExcluded[from] == false) {\\n            balances[fundAddress] = balances[fundAddress] + fee;\\n            emit Transfer(from, fundAddress, fee);\\n        }\\n\\n        emit Transfer(from, to, sendAmount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ADMC20: Mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ADMC20: Burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = balances[account];\\n        require(accountBalance \\u003e= amount, \\\"ADMC20: Burn amount exceeds balance\\\");\\n        unchecked {\\n            balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount \\u003c= accountBalance \\u003c= totalSupply.\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `blacklisted[account]` to `blacklist` which is boolean.\\n     *\\n     * This internal function will add/exclude `account` to/from fee excluded list.\\n     *\\n     * Emits an {BlacklistUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `blacklisted[account]` cannot be same as `blacklist`.\\n     * - `account` cannot be the zero address.\\n     */\\n    function _blacklistUpdate(address account, bool blacklist) internal virtual {\\n        require(account != address(0), \\\"ADMC20: Blacklist the zero address\\\");\\n        require(blacklisted[account] != blacklist, \\\"ADMC20: Account\\u0027s blacklist status is already set\\\");\\n        blacklisted[account] = blacklist;\\n        emit BlacklistUpdated(account, blacklist);\\n    }\\n\\n    /**\\n     * @dev Sets `feeExcluded[account]` to true.\\n     *\\n     * This internal function will add `account` to the fee excluded list.\\n     *\\n     * Emits an {FeeExcludeUpdated} event with `isExcluded` set to true.\\n     *\\n     * Requirements:\\n     *\\n     * - `feeExcluded[account]` cannot be true.\\n     * - `account` cannot be the zero address.\\n     */\\n    function _feeExclude(address account) internal virtual{\\n        require(!feeExcluded[account], \\\"ADMC20: Account already excluded\\\");\\n        require(account != address(0), \\\"ADMC20: Exclude the zero address\\\");\\n        \\n        feeExcluded[account] = true;\\n        \\n        emit FeeExcludeUpdated(account, true);\\n    }\\n\\n    /**\\n     * @dev Sets `feeExcluded[account]` to false.\\n     *\\n     * This internal function will remove `account` from the fee excluded list.\\n     *\\n     * Emits an {FeeExcludeUpdated} event with `isExcluded` set to false.\\n     *\\n     * Requirements:\\n     *\\n     * - `feeExcluded[account]` cannot be false.\\n     * - `account` cannot be the zero address.\\n     */\\n    function _feeInclude(address account) internal virtual{\\n        require(feeExcluded[account], \\\"ADMC20: Account already included\\\");\\n        require(account != address(0), \\\"ADMC20: Include the zero address\\\");\\n        \\n        feeExcluded[account] = false;\\n\\n        emit FeeExcludeUpdated(account, false);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address from,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ADMC20: Approve from the zero address\\\");\\n        require(spender != address(0), \\\"ADMC20: Approve to the zero address\\\");\\n\\n        allowances[from][spender] = amount;\\n        emit Approval(from, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address from,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(from, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance \\u003e= amount, \\\"ADMC20: Insufficient allowance\\\");\\n            unchecked {\\n                _approve(from, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(!paused, \\\"ADMC20: Cant transfer while paused\\\");\\n        require(!blacklisted[to], \\\"ADMC20: Cant transfer to blacklisted address\\\");\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"ADMC20: Not contract owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"ADMC20: Token is paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused, \\\"ADMC20: Token is not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if `account` is blacklisted.\\n     */\\n    modifier notBlacklisted(address account) {\\n        require(!blacklisted[account], \\\"ADMC20: Account is blacklisted\\\");\\n        _;\\n    }\\n}\\n\"},\"IADMC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ADMC20/IADMC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ADMC20 standard as defined in the EIP.\\n */\\ninterface IADMC20 {\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Emitted when `account`\\u0027s blacklist status is updated.\\n     */\\n    event BlacklistUpdated(address indexed account, bool indexed isBlacklisted);\\n\\n    /**\\n     * @dev Emitted when contract\\u0027s owner is transferred.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Emitted when `account`\\u0027s fee exclude status is updated.\\n     */\\n    event FeeExcludeUpdated(address account, bool isExcluded);\\n\\n    /**\\n     * @dev Emitted when fee percentage amount is updated.\\n     */\\n    event FeePercentageUpdated(address indexed account, uint oldPercentage, uint newPercentage);\\n\\n    /**\\n     * @dev Emitted when contract\\u0027s fund address is updated.\\n     */\\n    event FundAddressUpdated(address indexed account, address indexed oldFundAddress, address indexed newFundAddress);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"BlacklistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"FeeExcludeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"FeePercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFundAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFundAddress\",\"type\":\"address\"}],\"name\":\"FundAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"blacklist\",\"type\":\"bool\"}],\"name\":\"blacklistUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"excludingAddress\",\"type\":\"address\"}],\"name\":\"feeExclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"includingAddress\",\"type\":\"address\"}],\"name\":\"feeInclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBlacklistStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFundAddress\",\"type\":\"address\"}],\"name\":\"updateFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ADMC20", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a91c716c721df1a89162555984c8e19d578e091b535e4b47e33b895c2c3c4afa"}