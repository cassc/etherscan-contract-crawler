{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PrivateSale.sol\": {\r\n      \"content\": \"/**\\r\\n *Submitted for verification at BscScan.com on 2023-05-02\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\ninterface IEnums {\\r\\n    enum LAUNCHPAD_STATE {\\r\\n        OPENING,\\r\\n        FINISHED,\\r\\n        CANCELLED\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract Pausable is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor() {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        _requireNotPaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        _requirePaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is paused.\\r\\n     */\\r\\n    function _requireNotPaused() internal view virtual {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is not paused.\\r\\n     */\\r\\n    function _requirePaused() internal view virtual {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\r\\n     * `nonReentrant` function in the call stack.\\r\\n     */\\r\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\r\\n        return _status == _ENTERED;\\r\\n    }\\r\\n}\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract PrivateSale is Ownable, Pausable, ReentrancyGuard, IEnums {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // variables for operating sale\\r\\n    string public saleName;\\r\\n    uint256 public softCap;\\r\\n    uint256 public hardCap;\\r\\n    uint256 public startTime;\\r\\n    uint256 public endTime;\\r\\n    uint256 public finishTime;\\r\\n    uint256 public maxBuyPerParticipant;\\r\\n    uint256 public minBuyPerParticipant;\\r\\n    address public tokenSale;\\r\\n    address public admin;\\r\\n    address public adminAddress;\\r\\n    uint256 public releasedIndex;\\r\\n    uint256 public firstRelease;\\r\\n    bool public firstReleased;\\r\\n    uint256 public eachCycleRelease;\\r\\n    uint256 public eachCycleDays;\\r\\n    bool public usingWhitelist;\\r\\n    uint256 public whitelistEndTime;\\r\\n\\r\\n    // variable for display data\\r\\n    uint256 public totalDeposits;\\r\\n    uint256 public contributorCount;\\r\\n    uint256 public whitelistorCount;\\r\\n    uint256 public status;\\r\\n    uint256 public claimedPercent;\\r\\n\\r\\n    mapping(address => uint256) public depositedAmount;\\r\\n    mapping(uint256 => address) public contributors;\\r\\n    mapping(address => bool) public whitelisters;\\r\\n    mapping(uint256 => address) public whitelist;\\r\\n\\r\\n    event userDeposit(uint256 amount, address user);\\r\\n    event userRefunded(uint256 amount, address user, uint256 timestamp);\\r\\n    event adminClaimed(uint256 amount, address user, uint256 timestamp);\\r\\n    event saleFinished(uint256 timeStamp, uint256 collectedAmount);\\r\\n    event saleCanceled(uint256 timeStamp, address operator);\\r\\n    event whitelisterAdded(address user, uint256 timestamp);\\r\\n    event WithdrawnBeforePrivateSaleFinalize(\\r\\n        address indexed contributor,\\r\\n        uint256 amount,\\r\\n        uint256 adminFee\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        string memory _saleName,\\r\\n        bool _usingWhitelist,\\r\\n        uint256[2] memory _caps,\\r\\n        uint256[2] memory _times,\\r\\n        uint256[2] memory _limits,\\r\\n        address _token,\\r\\n        uint256[2] memory _cyclesAmount,\\r\\n        uint256 _cyclesDays,\\r\\n        address _admin,\\r\\n        address _adminAddress\\r\\n    ) {\\r\\n        saleName = _saleName;\\r\\n        usingWhitelist = _usingWhitelist;\\r\\n        softCap = _caps[0];\\r\\n        hardCap = _caps[1];\\r\\n        startTime = _times[0];\\r\\n        endTime = _times[1];\\r\\n        tokenSale = _token;\\r\\n        admin = _admin;\\r\\n        adminAddress = _adminAddress;\\r\\n        minBuyPerParticipant = _limits[0];\\r\\n        maxBuyPerParticipant = _limits[1];\\r\\n        firstRelease = _cyclesAmount[0];\\r\\n        eachCycleRelease = _cyclesAmount[1];\\r\\n        eachCycleDays = _cyclesDays;\\r\\n\\r\\n        firstReleased = false;\\r\\n        finishTime = endTime;\\r\\n        whitelistEndTime = endTime;\\r\\n        claimedPercent = 0;\\r\\n    }\\r\\n\\r\\n    modifier restricted() {\\r\\n        require(\\r\\n            msg.sender == owner() || msg.sender == admin,\\r\\n            \\\"PrivateSale: Caller not allowed\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function invest(uint256 _amount) external payable nonReentrant {\\r\\n        _checkCanInvest(msg.sender);\\r\\n        require(\\r\\n            status == uint256(IEnums.LAUNCHPAD_STATE.OPENING),\\r\\n            \\\"PrivateSale: Sale is not open\\\"\\r\\n        );\\r\\n        require(\\r\\n            startTime <= block.timestamp,\\r\\n            \\\"PrivateSale: Sale is not open yet.\\\"\\r\\n        );\\r\\n        require(\\r\\n            finishTime >= block.timestamp,\\r\\n            \\\"PrivateSale: Sale is already closed\\\"\\r\\n        );\\r\\n        require(\\r\\n            _amount + totalDeposits <= hardCap,\\r\\n            \\\"PrivateSale: HardCap reached\\\"\\r\\n        );\\r\\n        if (tokenSale == address(0)) {\\r\\n            require(\\r\\n                _amount == msg.value,\\r\\n                \\\"PrivateSale: Invalid payament amount\\\"\\r\\n            );\\r\\n        } else {\\r\\n            IERC20(tokenSale).transferFrom(msg.sender, address(this), _amount);\\r\\n        }\\r\\n        if (depositedAmount[msg.sender] == 0) {\\r\\n            contributors[contributorCount] = msg.sender;\\r\\n            contributorCount++;\\r\\n        }\\r\\n        depositedAmount[msg.sender] += _amount;\\r\\n        require(\\r\\n            depositedAmount[msg.sender] >= minBuyPerParticipant,\\r\\n            \\\"PrivateSale: Min contribution not reached\\\"\\r\\n        );\\r\\n        require(\\r\\n            depositedAmount[msg.sender] <= maxBuyPerParticipant,\\r\\n            \\\"PrivateSale: Max contribution not reached\\\"\\r\\n        );\\r\\n\\r\\n        totalDeposits += _amount;\\r\\n\\r\\n        emit userDeposit(_amount, msg.sender);\\r\\n    }\\r\\n\\r\\n    function claimFund() external payable nonReentrant onlyOwner {\\r\\n        require(\\r\\n            status == uint256(IEnums.LAUNCHPAD_STATE.FINISHED),\\r\\n            \\\"PrivateSale: sale not ended\\\"\\r\\n        );\\r\\n        require(claimedPercent <= 10000, \\\"PrivateSale: claimed 100%\\\");\\r\\n        _checkCanClaimFund();\\r\\n        uint256 totalAmount = totalDeposits;\\r\\n        uint256 percents = 0;\\r\\n        if (firstReleased == false) {\\r\\n            firstReleased = true;\\r\\n            percents = percents.add(firstRelease);\\r\\n        }\\r\\n        percents = percents.add(\\r\\n            ((block.timestamp - finishTime).div(eachCycleDays * 1 minutes)).mul(\\r\\n                eachCycleRelease\\r\\n            )\\r\\n        );\\r\\n        uint256 mustSendAmount = (totalAmount * percents) / 10000;\\r\\n\\r\\n        require(mustSendAmount > 0, \\\"The withdraw fund amount is zero\\\");\\r\\n\\r\\n        finishTime = block.timestamp;\\r\\n        if (tokenSale == address(0)) {\\r\\n            payable(msg.sender).transfer(mustSendAmount);\\r\\n        } else {\\r\\n            IERC20(tokenSale).transfer(msg.sender, mustSendAmount);\\r\\n        }\\r\\n        claimedPercent = claimedPercent + percents;\\r\\n\\r\\n        emit adminClaimed(mustSendAmount, msg.sender, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function claimRefund() external payable {\\r\\n        require(\\r\\n            status == uint256(IEnums.LAUNCHPAD_STATE.OPENING) ||\\r\\n                status == uint256(IEnums.LAUNCHPAD_STATE.CANCELLED),\\r\\n            \\\"PrivateSale: Successfully ended\\\"\\r\\n        );\\r\\n\\r\\n        if (status == uint256(IEnums.LAUNCHPAD_STATE.OPENING)) {\\r\\n            require(block.timestamp >= endTime && softCap > totalDeposits);\\r\\n        }\\r\\n\\r\\n        uint256 amount = depositedAmount[msg.sender];\\r\\n        require(amount > 0, \\\"PrivateSale: User Balance must be greater than 0\\\");\\r\\n        uint256 totalBalance = 0;\\r\\n        if (tokenSale == address(0)) {\\r\\n            totalBalance = payable(address(this)).balance;\\r\\n        } else {\\r\\n            totalBalance = IERC20(tokenSale).balanceOf(address(this));\\r\\n        }\\r\\n        require(totalBalance >= amount, \\\"PrivateSale: Insufficient Balance\\\");\\r\\n        if (tokenSale == address(0)) {\\r\\n            payable(msg.sender).transfer(amount);\\r\\n        } else {\\r\\n            IERC20(tokenSale).transfer(msg.sender, amount);\\r\\n        }\\r\\n\\r\\n        emit userRefunded(amount, msg.sender, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function withdrawBeforePrivateSaleFinalize(uint256 amount) public {\\r\\n        require(amount > 0, \\\"Amount must be greater than zero\\\");\\r\\n        require(\\r\\n            amount <= depositedAmount[msg.sender],\\r\\n            \\\"Not enough funds in investor's balance\\\"\\r\\n        );\\r\\n        require(\\r\\n            status == uint256(IEnums.LAUNCHPAD_STATE.OPENING),\\r\\n            \\\"PrivateSale: Already finished or cancelled\\\"\\r\\n        );\\r\\n\\r\\n        // Calculate the amount to transfer to the admin address (10% of the withdrawn amount)\\r\\n        uint256 adminFee = amount.mul(10).div(100);\\r\\n\\r\\n        // Transfer funds to investor's wallet\\r\\n        payable(msg.sender).transfer(amount.sub(adminFee));\\r\\n\\r\\n        // Transfer admin fee to admin address\\r\\n        payable(adminAddress).transfer(adminFee);\\r\\n\\r\\n        // Update investor's contribution and total contribution amounts\\r\\n        depositedAmount[msg.sender] = depositedAmount[msg.sender].sub(amount);\\r\\n        totalDeposits = totalDeposits.sub(amount);\\r\\n\\r\\n        // Remove the user's wallet address from the contributorArray\\r\\n        address[] memory result = new address[](contributorCount);\\r\\n        uint256 i = 0;\\r\\n        for (i = 0; i < contributorCount; i++) {\\r\\n            result[i] = contributors[i];\\r\\n            if (result[i] == msg.sender) {\\r\\n                delete contributors[i];\\r\\n                contributorCount -= 1;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit WithdrawnBeforePrivateSaleFinalize(msg.sender, amount, adminFee);\\r\\n    }\\r\\n\\r\\n    function getAllContributors() external view returns (address[] memory) {\\r\\n        address[] memory result = new address[](contributorCount);\\r\\n        uint256 i = 0;\\r\\n        for (i = 0; i < contributorCount; i++) {\\r\\n            result[i] = contributors[i];\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function finishSale() external restricted nonReentrant {\\r\\n        require(totalDeposits >= softCap, \\\"PrivateSale: SoftCap not reached\\\");\\r\\n        require(\\r\\n            status == uint256(IEnums.LAUNCHPAD_STATE.OPENING),\\r\\n            \\\"PrivateSale: Already finished or cancelled\\\"\\r\\n        );\\r\\n\\r\\n        status = uint256(IEnums.LAUNCHPAD_STATE.FINISHED);\\r\\n        finishTime = block.timestamp;\\r\\n\\r\\n        emit saleFinished(block.timestamp, totalDeposits);\\r\\n    }\\r\\n\\r\\n    function cancelSale() external restricted nonReentrant {\\r\\n        require(\\r\\n            status == uint256(IEnums.LAUNCHPAD_STATE.OPENING),\\r\\n            \\\"PrivateSale: Already finished or cancelled\\\"\\r\\n        );\\r\\n        status = uint256(IEnums.LAUNCHPAD_STATE.CANCELLED);\\r\\n\\r\\n        emit saleCanceled(block.timestamp, msg.sender);\\r\\n    }\\r\\n\\r\\n    function addWhitelister(address _user) public restricted nonReentrant {\\r\\n        if (whitelisters[_user] == false) {\\r\\n            whitelist[whitelistorCount] = _user;\\r\\n            whitelistorCount++;\\r\\n            whitelisters[_user] = true;\\r\\n\\r\\n            emit whitelisterAdded(_user, block.timestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addWhitelisters(address[] memory _users)\\r\\n        external\\r\\n        restricted\\r\\n        nonReentrant\\r\\n    {\\r\\n        uint256 length = _users.length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            if (whitelisters[_users[i]] == false) {\\r\\n                whitelist[whitelistorCount] = _users[i];\\r\\n                whitelistorCount++;\\r\\n                whitelisters[_users[i]] = true;\\r\\n\\r\\n                emit whitelisterAdded(_users[i], block.timestamp);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeWhitelister(address _user) external restricted nonReentrant {\\r\\n        whitelisters[_user] = false;\\r\\n    }\\r\\n\\r\\n    function removeWhitelisters(address[] memory _users)\\r\\n        external\\r\\n        restricted\\r\\n        nonReentrant\\r\\n    {\\r\\n        uint256 length = _users.length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            whitelisters[_users[i]] = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enableWhitelist() external restricted nonReentrant {\\r\\n        require(usingWhitelist == false, \\\"PrivateSale: whitelist already set\\\");\\r\\n        usingWhitelist = true;\\r\\n    }\\r\\n\\r\\n    function disableWhitelist() external restricted nonReentrant {\\r\\n        require(\\r\\n            usingWhitelist == true,\\r\\n            \\\"PrivateSale: whitelist already disabled\\\"\\r\\n        );\\r\\n        usingWhitelist = false;\\r\\n    }\\r\\n\\r\\n    function setEndWhitelistTime(uint256 time)\\r\\n        external\\r\\n        restricted\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(usingWhitelist == true, \\\"PrivateSale: whitelist not set\\\");\\r\\n        whitelistEndTime = time;\\r\\n    }\\r\\n\\r\\n    function updateAdminWallet(address _adminAddr) external onlyOwner {\\r\\n        adminAddress = _adminAddr;\\r\\n    }\\r\\n\\r\\n    function getSaleName() external view returns (string memory) {\\r\\n        return saleName;\\r\\n    }\\r\\n\\r\\n    function getTimes() external view returns (uint256, uint256) {\\r\\n        return (startTime, endTime);\\r\\n    }\\r\\n\\r\\n    function getCaps() external view returns (uint256, uint256) {\\r\\n        return (softCap, hardCap);\\r\\n    }\\r\\n\\r\\n    function getLimits() external view returns (uint256, uint256) {\\r\\n        return (minBuyPerParticipant, maxBuyPerParticipant);\\r\\n    }\\r\\n\\r\\n    function getWhitelist() external view returns (bool) {\\r\\n        if (block.timestamp <= whitelistEndTime) {\\r\\n            return usingWhitelist;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTotalDepositAmount() external view returns (uint256) {\\r\\n        return totalDeposits;\\r\\n    }\\r\\n\\r\\n    function getUserDepositAmount(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return depositedAmount[user];\\r\\n    }\\r\\n\\r\\n    function getStatus() external view returns (uint256) {\\r\\n        return status;\\r\\n    }\\r\\n\\r\\n    function getClaimedPercent() external view returns (uint256) {\\r\\n        return claimedPercent;\\r\\n    }\\r\\n\\r\\n    function getRemainingFund() external view returns (uint256) {\\r\\n        uint256 totalBalance;\\r\\n        if (tokenSale == address(0)) {\\r\\n            totalBalance = address(this).balance;\\r\\n        } else {\\r\\n            totalBalance = IERC20(tokenSale).balanceOf(address(this));\\r\\n        }\\r\\n        return totalBalance;\\r\\n    }\\r\\n\\r\\n    function getAllWhitelisters() external view returns (address[] memory) {\\r\\n        uint256 i = 0;\\r\\n        uint256 j = 0;\\r\\n        uint256 count = 0;\\r\\n        for (i = 0; i < whitelistorCount; i++) {\\r\\n            if (whitelisters[whitelist[i]] == true) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n        address[] memory result = new address[](count);\\r\\n        for (i = 0; i < whitelistorCount; i++) {\\r\\n            if (whitelisters[whitelist[i]] == true) {\\r\\n                result[j++] = whitelist[i];\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function getFirstReleasePercent() external view returns (uint256) {\\r\\n        return firstRelease;\\r\\n    }\\r\\n\\r\\n    function getCycleReleasePercent() external view returns (uint256) {\\r\\n        return eachCycleRelease;\\r\\n    }\\r\\n\\r\\n    function getCycleReleaseDuration() external view returns (uint256) {\\r\\n        return eachCycleDays;\\r\\n    }\\r\\n\\r\\n    function _checkCanInvest(address _user) private view {\\r\\n        require(\\r\\n            (usingWhitelist &&\\r\\n                block.timestamp <= whitelistEndTime &&\\r\\n                whitelisters[_user]) ||\\r\\n                !usingWhitelist ||\\r\\n                (block.timestamp >= whitelistEndTime),\\r\\n            \\\"PrivateSale: User can not invest\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _checkCanClaimFund() private view {\\r\\n        require(\\r\\n            block.timestamp >= finishTime,\\r\\n            \\\"PrivateSale: Finishing privateSale does not available now\\\"\\r\\n        );\\r\\n        require(totalDeposits >= softCap, \\\"PrivateSale: SoftCap not reached\\\");\\r\\n    }\\r\\n\\r\\n    function _checkCanCancel() private view {\\r\\n        require(\\r\\n            status == uint256(IEnums.LAUNCHPAD_STATE.OPENING),\\r\\n            \\\"PrivateSale: Sale is already finished or cancelled\\\"\\r\\n        );\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_saleName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_usingWhitelist\",\"type\":\"bool\"},{\"internalType\":\"uint256[2]\",\"name\":\"_caps\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_times\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_limits\",\"type\":\"uint256[2]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_cyclesAmount\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_cyclesDays\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"}],\"name\":\"WithdrawnBeforePrivateSaleFinalize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"adminClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"saleCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectedAmount\",\"type\":\"uint256\"}],\"name\":\"saleFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"userRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"whitelisterAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addWhitelister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"addWhitelisters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contributorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eachCycleDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eachCycleRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstReleased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllContributors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllWhitelisters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCycleReleaseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCycleReleasePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFirstReleasePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyPerParticipant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuyPerParticipant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releasedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeWhitelister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"removeWhitelisters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setEndWhitelistTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddr\",\"type\":\"address\"}],\"name\":\"updateAdminWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usingWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBeforePrivateSaleFinalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PrivateSale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000645bb6c200000000000000000000000000000000000000000000000000000000645bd9ea00000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000177000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000d77bbc72912d44630a82b9bbeeb782b151a79074000000000000000000000000d57b78693ebdcae70d2d6bfff1e514d4e78710f100000000000000000000000000000000000000000000000000000000000000055445535431000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}