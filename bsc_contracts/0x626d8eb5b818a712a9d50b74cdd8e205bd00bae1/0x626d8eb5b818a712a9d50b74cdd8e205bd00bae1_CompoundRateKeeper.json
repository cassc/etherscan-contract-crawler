{"SourceCode": "pragma solidity ^0.7.0;\r\n\r\nlibrary DSMath {\r\n    /// @dev github.com/makerdao/dss implementation\r\n    /// of exponentiation by squaring\r\n    //  nth power of x mod b\r\n    function rpow(uint x, uint n, uint b) internal pure returns (uint z) {\r\n      assembly {\r\n        switch x case 0 {switch n case 0 {z := b} default {z := 0}}\r\n        default {\r\n          switch mod(n, 2) case 0 { z := b } default { z := x }\r\n          let half := div(b, 2)  // for rounding.\r\n          for { n := div(n, 2) } n { n := div(n,2) } {\r\n            let xx := mul(x, x)\r\n            if iszero(eq(div(xx, x), x)) { revert(0,0) }\r\n            let xxRound := add(xx, half)\r\n            if lt(xxRound, xx) { revert(0,0) }\r\n            x := div(xxRound, b)\r\n            if mod(n,2) {\r\n              let zx := mul(z, x)\r\n              if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\r\n              let zxRound := add(zx, half)\r\n              if lt(zxRound, zx) { revert(0,0) }\r\n              z := div(zxRound, b)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract CompoundRateKeeper is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct CompoundRate {\r\n        uint256 rate;\r\n        uint256 lastUpdate;\r\n    }\r\n\r\n    CompoundRate public compoundRate;\r\n\r\n    constructor () {\r\n        compoundRate.rate = 1 * 10 ** 27;\r\n        compoundRate.lastUpdate = block.timestamp;\r\n    }\r\n\r\n    function getCurrentRate() view external returns(uint256) {\r\n        return compoundRate.rate;\r\n    }\r\n\r\n    function getLastUpdate() view external returns(uint256) {\r\n        return compoundRate.lastUpdate;\r\n    }\r\n\r\n    function update(uint256 _interestRate) external onlyOwner returns(uint256) {\r\n        uint256 _decimal = 10 ** 27;\r\n        uint256 _period = (block.timestamp).sub(compoundRate.lastUpdate);\r\n        uint256 _newRate = compoundRate.rate\r\n        .mul(DSMath.rpow(_interestRate.add(_decimal), _period, _decimal)).div(_decimal);\r\n\r\n        compoundRate.rate = _newRate;\r\n        compoundRate.lastUpdate = block.timestamp;\r\n\r\n        return _newRate;\r\n    }\r\n}\r\n\r\ninterface IBEPANStaking {\r\n    /**\r\n     * @notice Update compound rate\r\n     */\r\n    function updateCompoundRate() external;\r\n\r\n    /**\r\n     * @notice Update compound rate timeframe\r\n     */\r\n    function updateCompoundRateTimeframe() external;\r\n\r\n    /**\r\n     * @notice Update both compound rates\r\n     */\r\n    function updateCompoundRates() external;\r\n\r\n    /**\r\n     * @notice Update compound rate and stake tokens to user balance\r\n     * @param _amount Amount to stake\r\n     * @param _isTimeframe If true, stake to timeframe structure\r\n     */\r\n    function updateCompoundAndStake(uint256 _amount, bool _isTimeframe) external returns (bool);\r\n\r\n    /**\r\n     * @notice Update compound rate and withdraw tokens from contract\r\n     * @param _amount Amount to stake\r\n     * @param _isTimeframe If true, withdraw from timeframe structure\r\n     */\r\n    function updateCompoundAndWithdraw(uint256 _amount, bool _isTimeframe) external returns (bool);\r\n\r\n    /**\r\n     * @notice Stake tokens to user balance\r\n     * @param _amount Amount to stake\r\n     * @param _isTimeframe If true, stake to timeframe structure\r\n     */\r\n    function stake(uint256 _amount, bool _isTimeframe) external returns (bool);\r\n\r\n    /**\r\n     * @notice Withdraw tokens from user balance. Only for timeframe stake\r\n     * @param _amount Amount to withdraw\r\n     * @param _isTimeframe If true, withdraws from timeframe structure\r\n     */\r\n    function withdraw(uint256 _amount, bool _isTimeframe) external returns (bool);\r\n\r\n    /**\r\n     * @notice Returns the staking balance of the user\r\n     * @param _isTimeframe If true, return balance from timeframe structure\r\n     */\r\n    function getBalance(bool _isTimeframe) external view returns (uint256);\r\n\r\n    /**\r\n    * @notice Set interest rate\r\n    */\r\n    function setInterestRate(uint256 _newInterestRate) external;\r\n\r\n    /**\r\n    * @notice Set interest rate timeframe\r\n    * @param _newInterestRate New interest rate\r\n    */\r\n    function setInterestRateTimeframe(uint256 _newInterestRate) external;\r\n\r\n    /**\r\n     * @notice Set interest rates\r\n     * @param _newInterestRateTimeframe New interest rate timeframe\r\n     */\r\n    function setInterestRates(uint256 _newInterestRate, uint256 _newInterestRateTimeframe) external;\r\n\r\n    /**\r\n     * @notice Add tokens to contract address to be spent as rewards\r\n     * @param _amount Token amount that will be added to contract as reward\r\n     */\r\n    function supplyRewardPool(uint256 _amount) external returns (bool);\r\n\r\n    /**\r\n     * @notice Get reward amount for sender address\r\n     * @param _isTimeframe If timeframe, calculate reward for user from timeframe structure\r\n     */\r\n    function getRewardAmount(bool _isTimeframe) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Get coefficient. Tokens on the contract / reward to be paid\r\n     */\r\n    function monitorSecurityMargin() external view returns (uint256);\r\n}\r\n\r\n\r\ncontract BEPANStaking is IBEPANStaking, Ownable {\r\n    using SafeMath for uint;\r\n    \r\n    uint256 constant INTEREST_500_THRESHOLD = 51034942716352291304;\r\n\r\n    CompoundRateKeeper public compRateKeeper;\r\n    CompoundRateKeeper public compRateKeeperTimeframe;\r\n    IERC20 public token;\r\n\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 normalizedAmount;\r\n    }\r\n\r\n    struct StakeTimeframe {\r\n        uint256 amount;\r\n        uint256 normalizedAmount;\r\n        uint256 lastStakeTime;\r\n    }\r\n\r\n    uint256 public interestRate;\r\n    uint256 public interestRateTimeframe;\r\n\r\n    mapping(address => Stake) public userStakes;\r\n    mapping(address => StakeTimeframe) public userStakesTimeframe;\r\n\r\n    uint256 public aggregatedNormalizedStake;\r\n    uint256 public aggregatedNormalizedStakeTimeframe;\r\n\r\n    constructor(address _token, address _compRateKeeper, address _compRateKeeperTimeframe) {\r\n        compRateKeeper = CompoundRateKeeper(_compRateKeeper);\r\n        compRateKeeperTimeframe = CompoundRateKeeper(_compRateKeeperTimeframe);\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    /**\r\n     * @notice Update compound rate\r\n     */\r\n    function updateCompoundRate() public override {\r\n        compRateKeeper.update(interestRate);\r\n    }\r\n\r\n    /**\r\n     * @notice Update compound rate timeframe\r\n     */\r\n    function updateCompoundRateTimeframe() public override {\r\n        compRateKeeperTimeframe.update(interestRateTimeframe);\r\n    }\r\n\r\n    /**\r\n     * @notice Update both compound rates\r\n     */\r\n    function updateCompoundRates() public override {\r\n        updateCompoundRate();\r\n        updateCompoundRateTimeframe();\r\n    }\r\n\r\n    /**\r\n     * @notice Update compound rate and stake tokens to user balance\r\n     * @param _amount Amount to stake\r\n     * @param _isTimeframe If true, stake to timeframe structure\r\n     */\r\n    function updateCompoundAndStake(uint256 _amount, bool _isTimeframe) external override returns (bool) {\r\n        updateCompoundRates();\r\n        return stake(_amount, _isTimeframe);\r\n    }\r\n\r\n    /**\r\n     * @notice Update compound rate and withdraw tokens from contract\r\n     * @param _amount Amount to stake\r\n     * @param _isTimeframe If true, withdraw from timeframe structure\r\n     */\r\n    function updateCompoundAndWithdraw(uint256 _amount, bool _isTimeframe) external override returns (bool) {\r\n        updateCompoundRates();\r\n        return withdraw(_amount, _isTimeframe);\r\n    }\r\n\r\n    /**\r\n     * @notice Stake tokens to user balance\r\n     * @param _amount Amount to stake\r\n     * @param _isTimeframe If true, stake to timeframe structure\r\n     */\r\n    function stake(uint256 _amount, bool _isTimeframe) public override returns (bool) {\r\n        require(_amount > 0, \"[E-11]-Invalid value for the stake amount, failed to stake a zero value.\");\r\n\r\n        if (_isTimeframe) {\r\n            StakeTimeframe memory _stake = userStakesTimeframe[msg.sender];\r\n\r\n            uint256 _newAmount = _getBalance(_stake.normalizedAmount, true).add(_amount);\r\n            uint256 _newNormalizedAmount = _newAmount.mul(10 ** 27).div(compRateKeeperTimeframe.getCurrentRate());\r\n\r\n            aggregatedNormalizedStakeTimeframe = aggregatedNormalizedStakeTimeframe.add(_newNormalizedAmount)\r\n            .sub(_stake.normalizedAmount);\r\n\r\n            userStakesTimeframe[msg.sender].amount = _stake.amount.add(_amount);\r\n            userStakesTimeframe[msg.sender].normalizedAmount = _newNormalizedAmount;\r\n            userStakesTimeframe[msg.sender].lastStakeTime = block.timestamp;\r\n\r\n        } else {\r\n            Stake memory _stake = userStakes[msg.sender];\r\n\r\n            uint256 _newAmount = _getBalance(_stake.normalizedAmount, false).add(_amount);\r\n            uint256 _newNormalizedAmount = _newAmount.mul(10 ** 27).div(compRateKeeper.getCurrentRate());\r\n\r\n            aggregatedNormalizedStake = aggregatedNormalizedStake.add(_newNormalizedAmount)\r\n            .sub(_stake.normalizedAmount);\r\n\r\n            userStakes[msg.sender].amount = _stake.amount.add(_amount);\r\n            userStakes[msg.sender].normalizedAmount = _newNormalizedAmount;\r\n        }\r\n\r\n        require(token.transferFrom(msg.sender, address(this), _amount), \"[E-12]-Failed to transfer token.\");\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw tokens from user balance. Only for timeframe stake\r\n     * @param _amount Amount to withdraw\r\n     * @param _isTimeframe If true, withdraws from timeframe structure\r\n     */\r\n    function withdraw(uint256 _amount, bool _isTimeframe) public override returns (bool) {\r\n        uint256 _withdrawAmount = _amount;\r\n\r\n        if (_isTimeframe) {\r\n            StakeTimeframe memory _stake = userStakesTimeframe[msg.sender];\r\n\r\n            uint256 _userAmount = _getBalance(_stake.normalizedAmount, true);\r\n\r\n            require(_userAmount != 0, \"[E-31]-The deposit does not exist, failed to withdraw.\");\r\n            require(block.timestamp - _stake.lastStakeTime > 180 days, \"[E-32]-Funds are not available for withdraw.\");\r\n\r\n            if (_userAmount < _withdrawAmount) _withdrawAmount = _userAmount;\r\n\r\n            uint256 _newAmount = _userAmount.sub(_withdrawAmount);\r\n            uint256 _newNormalizedAmount = _newAmount.mul(10 ** 27).div(compRateKeeperTimeframe.getCurrentRate());\r\n\r\n            aggregatedNormalizedStakeTimeframe = aggregatedNormalizedStakeTimeframe.add(_newNormalizedAmount)\r\n            .sub(_stake.normalizedAmount);\r\n\r\n            if (_withdrawAmount > _getRewardAmount(_stake.amount, _stake.normalizedAmount, _isTimeframe)) {\r\n                userStakesTimeframe[msg.sender].amount = _newAmount;\r\n            }\r\n            userStakesTimeframe[msg.sender].normalizedAmount = _newNormalizedAmount;\r\n\r\n        } else {\r\n            Stake memory _stake = userStakes[msg.sender];\r\n\r\n            uint256 _userAmount = _getBalance(_stake.normalizedAmount, false);\r\n\r\n            require(_userAmount != 0, \"[E-33]-The deposit does not exist, failed to withdraw.\");\r\n\r\n            if (_userAmount < _withdrawAmount) _withdrawAmount = _userAmount;\r\n\r\n            uint256 _newAmount = _getBalance(_stake.normalizedAmount, false).sub(_withdrawAmount);\r\n            uint256 _newNormalizedAmount = _newAmount.mul(10 ** 27).div(compRateKeeper.getCurrentRate());\r\n\r\n            aggregatedNormalizedStake = aggregatedNormalizedStake.add(_newNormalizedAmount)\r\n            .sub(_stake.normalizedAmount);\r\n\r\n            if (_withdrawAmount > _getRewardAmount(_stake.amount, _stake.normalizedAmount, _isTimeframe)) {\r\n                userStakes[msg.sender].amount = _newAmount;\r\n            }\r\n            userStakes[msg.sender].normalizedAmount = _newNormalizedAmount;\r\n        }\r\n\r\n        require(token.transfer(msg.sender, _withdrawAmount), \"[E-34]-Failed to transfer token.\");\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the staking balance of the user\r\n     * @param _isTimeframe If true, return balance from timeframe structure\r\n     */\r\n    function getBalance(bool _isTimeframe) public view override returns (uint256) {\r\n        if (_isTimeframe) {\r\n            return _getBalance(userStakesTimeframe[msg.sender].normalizedAmount, true);\r\n        }\r\n        return _getBalance(userStakes[msg.sender].normalizedAmount, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the staking balance of the user\r\n     * @param _normalizedAmount User normalized amount\r\n     * @param _isTimeframe If true, return balance from timeframe structure\r\n     */\r\n    function _getBalance(uint256 _normalizedAmount, bool _isTimeframe) private view returns (uint256) {\r\n        if (_isTimeframe) {\r\n            return _normalizedAmount.mul(compRateKeeperTimeframe.getCurrentRate()).div(10 ** 27);\r\n        }\r\n        return _normalizedAmount.mul(compRateKeeper.getCurrentRate()).div(10 ** 27);\r\n    }\r\n\r\n    /**\r\n     * @notice Set interest rate\r\n     */\r\n    function setInterestRate(uint256 _newInterestRate) external override onlyOwner {\r\n        require(_newInterestRate <= INTEREST_500_THRESHOLD, \"[E-202]-Can't be more than 500%.\");\r\n        \r\n        updateCompoundRate();\r\n        interestRate = _newInterestRate;\r\n    }\r\n\r\n    /**\r\n    * @notice Set interest rate timeframe\r\n    * @param _newInterestRate New interest rate\r\n    */\r\n    function setInterestRateTimeframe(uint256 _newInterestRate) external override onlyOwner {\r\n        require(_newInterestRate <= INTEREST_500_THRESHOLD, \"[E-211]-Can't be more than 500%.\");\r\n\r\n        updateCompoundRateTimeframe();\r\n        interestRateTimeframe = _newInterestRate;\r\n    }\r\n\r\n    /**\r\n     * @notice Set interest rates\r\n     * @param _newInterestRateTimeframe New interest rate timeframe\r\n     */\r\n    function setInterestRates(uint256 _newInterestRate, uint256 _newInterestRateTimeframe) external override onlyOwner {\r\n        require(_newInterestRate <= INTEREST_500_THRESHOLD && _newInterestRateTimeframe <= INTEREST_500_THRESHOLD,\r\n            \"[E-221]-Can't be more than 500%.\");\r\n\r\n        updateCompoundRate();\r\n        updateCompoundRateTimeframe();\r\n        interestRate = _newInterestRate;\r\n        interestRateTimeframe = _newInterestRateTimeframe;\r\n    }\r\n\r\n    /**\r\n     * @notice Add tokens to contract address to be spent as rewards\r\n     * @param _amount Token amount that will be added to contract as reward\r\n     */\r\n    function supplyRewardPool(uint256 _amount) external override onlyOwner returns (bool) {\r\n        require(token.transferFrom(msg.sender, address(this), _amount), \"[E-231]-Failed to transfer token.\");\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Get reward amount for sender address\r\n     * @param _isTimeframe If timeframe, calculate reward for user from timeframe structure\r\n     */\r\n    function getRewardAmount(bool _isTimeframe) external view override returns (uint256) {\r\n        if (_isTimeframe) {\r\n            StakeTimeframe memory _stake = userStakesTimeframe[msg.sender];\r\n            return _getRewardAmount(_stake.amount, _stake.normalizedAmount, true);\r\n        }\r\n\r\n        Stake memory _stake = userStakes[msg.sender];\r\n        return _getRewardAmount(_stake.amount, _stake.normalizedAmount, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Get reward amount by params\r\n     * @param _amount Token amount\r\n     * @param _normalizedAmount Normalized token amount\r\n     * @param _isTimeframe If timeframe, calculate reward for user from timeframe structure\r\n     */\r\n    function _getRewardAmount(uint256 _amount, uint256 _normalizedAmount, bool _isTimeframe) private view returns (uint256) {\r\n        uint256 _balance = 0;\r\n\r\n        if (_isTimeframe) {\r\n            _balance = _getBalance(_normalizedAmount, _isTimeframe);\r\n        } else {\r\n            _balance = _getBalance(_normalizedAmount, _isTimeframe);\r\n        }\r\n\r\n        if (_balance <= _amount) return 0;\r\n        return _balance.sub(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Get coefficient. Tokens on the contract / total stake + total reward to be paid\r\n     */\r\n    function monitorSecurityMargin() external view override onlyOwner returns (uint256) {\r\n        uint256 _contractBalance = token.balanceOf(address(this));\r\n        uint256 _toReward = aggregatedNormalizedStake.mul(compRateKeeper.getCurrentRate()).div(10 ** 27);\r\n        uint256 _toRewardTimeframe = aggregatedNormalizedStakeTimeframe.mul(compRateKeeperTimeframe.getCurrentRate())\r\n        .div(10 ** 27);\r\n\r\n        return _contractBalance.mul(10 ** 27).div(_toReward.add(_toRewardTimeframe));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"compoundRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CompoundRateKeeper", "CompilerVersion": "v0.7.2+commit.51b20bc0", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e9786dfeeb78518939d920abdde11f419b572c875d439cc233f50e11391bf116"}