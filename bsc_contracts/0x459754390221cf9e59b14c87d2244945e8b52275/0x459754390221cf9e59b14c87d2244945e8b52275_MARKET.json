{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\Context.sol\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n \r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n   interface WAL {\r\n    function send(address token, uint256 amount ,  address addr, address to) external returns (bool);\r\n    function myaddr(address addr) external view returns (address);\r\n}\r\n    contract MARKET is Ownable   {\r\n    constructor()   {\r\n    }\r\n    uint256 public fee   = 5;\r\n    uint256 public min_sell_jb = 1e18;\r\n  \r\n    function setfee(uint256 fee_, uint256  min_sell_jb_ ) external onlyOwner {\r\n     if(fee <50) fee  = fee_ ;\r\n      min_sell_jb    = min_sell_jb_;\r\n    }\r\n\r\n    address WALLET = 0x4618C15FF8B59dC06C3Baf30C1ee47cF80d850eD;\r\n    address JBUS   = 0x6863593F1BA425689F6054b81608990104260108;\r\n    address JBX     = 0xEF9ADBE9BD4630deA61e342625eA4A7B153627Be;\r\n\r\n    function getjb(uint256 amount_jbus ) internal view returns(uint256){\r\n         uint256 jb   = IERC20(JBX).balanceOf(address(this));\r\n         uint256 jbus = IERC20(JBUS).balanceOf(address(this));\r\n         uint256 est  =  (amount_jbus*jb)/jbus;\r\n         jb-=est;\r\n         jbus+=amount_jbus;\r\n         uint256 nest  =  (amount_jbus*jb)/jbus;\r\n         return(nest - (nest*fee)/1000);  \r\n    }\r\n    \r\n     function getjbus(uint256 amount_jb ) internal view returns(uint256){\r\n         uint256 jb   = IERC20(JBX).balanceOf(address(this));\r\n         uint256 jbus = IERC20(JBUS).balanceOf(address(this));\r\n         uint256 est  =  (amount_jb*jbus)/jb;\r\n         jb+=amount_jb;\r\n         jbus-=est;\r\n         uint256 nest  =  (amount_jb*jbus)/jb;\r\n         return(nest - (nest*fee)/1000);  \r\n    }\r\n\r\n    function get_jb(uint256 amount_jbus) external view returns(uint256) {\r\n        return getjb(amount_jbus);\r\n    }\r\n\r\n     function get_jbus(uint256 amount_jb) external view returns(uint256) {\r\n        return getjbus(amount_jb);\r\n    }\r\n\r\n      function selljb(uint256 amount) external returns(bool) {\r\n         require(amount>=min_sell_jb,\"Minimum sell jb\");\r\n        uint256 jb1 = IERC20(JBX).balanceOf(address(this));\r\n        WAL(WALLET).send(JBX,amount,msg.sender,address(this));\r\n        uint256 jb2 = IERC20(JBX).balanceOf(address(this));\r\n        require(jb2>jb1,\"Amount not found\");\r\n        uint256 am = getjbus(amount) ;\r\n        address to = WAL(WALLET).myaddr(msg.sender);\r\n        IERC20(JBUS).transfer(to,am);\r\n         return true;\r\n    }\r\n\r\n     function buyjb(uint256 amount) external returns(bool) {\r\n        uint256 jbus1 = IERC20(JBUS).balanceOf(address(this));\r\n        WAL(WALLET).send(JBUS,amount,msg.sender,address(this));\r\n        uint256 jbus2 = IERC20(JBUS).balanceOf(address(this));\r\n        require(jbus2>jbus1,\"Amount not found\");\r\n        uint256 am = getjb(amount);\r\n        address to = WAL(WALLET).myaddr(msg.sender);\r\n        IERC20(JBX).transfer(to,am);\r\n        return true;\r\n    }\r\n\r\n    function addlp(uint256 jbus_) external onlyOwner {\r\n        uint256 jb   = IERC20(JBX).balanceOf(address(this));\r\n        uint256 jbus = IERC20(JBUS).balanceOf(address(this));\r\n        IERC20(JBUS).transferFrom(msg.sender,address(this),jbus_);\r\n        uint256 amjbx = jbus_;\r\n        if(jbus>0&&jb>0)  amjbx = (jbus_ * jb)/jbus;\r\n        IERC20(JBX).transferFrom(msg.sender,address(this),amjbx);\r\n    }\r\n\r\n     function removelp(uint256 jbus_) external onlyOwner {\r\n        uint256 jb   = IERC20(JBX).balanceOf(address(this));\r\n        uint256 jbus = IERC20(JBUS).balanceOf(address(this));\r\n        IERC20(JBUS).transfer(msg.sender ,jbus_);\r\n        IERC20(JBX).transfer(msg.sender ,(jbus_*jb)/jbus);\r\n    }\r\n\r\n }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jbus_\",\"type\":\"uint256\"}],\"name\":\"addlp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyjb\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_jbus\",\"type\":\"uint256\"}],\"name\":\"get_jb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_jb\",\"type\":\"uint256\"}],\"name\":\"get_jbus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min_sell_jb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jbus_\",\"type\":\"uint256\"}],\"name\":\"removelp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"selljb\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_sell_jb_\",\"type\":\"uint256\"}],\"name\":\"setfee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MARKET", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7b339dbcf9abf3077a24fadc926af17ae511ff0e1c4b6c109d698e8efbe931c1"}