{"SourceCode": "// Sources flattened with hardhat v2.18.3 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File contracts/interfaces/IMhdaoSquad.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IMhdaoSquad {\r\n  struct Squad {\r\n    address owner; // squad owner\r\n    uint256 type_; // squad type: 1 for mouse, 2 for ghost, 3 for mixed\r\n    uint256 size; // how many NFTs can be in the squad\r\n    uint256 baseFarmPerBlock; // farm per block without synergy bonus\r\n    uint256 synergyBonus; // synergy bonus\r\n    uint256 squadBonus; // squad bonus\r\n    uint256 squadTrait; // a trait that the squad has and can synergize with all NFTs there\r\n    uint256 farmPerBlock; // farm per block with synergy bonus\r\n    uint256 currentQuest; // current quest this squad is engaged in\r\n    uint256 questStartedAt; // when the squad started farming this quest\r\n    uint256 questEndsAt; // when the squad should finish this quest\r\n    uint256[] nftIds; // a dynamic list of NFT ids in the squad\r\n    uint256[] traits; // a dynamic list of possibly sinergetic traits in the squad\r\n    uint256[] collections; // a dynamic list of possibly sinergetic collections in the squad\r\n  }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IBkFarmV18P9V2.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\ninterface IBkFarmV18P9V2 {\r\n  // write the interface for the contract ../features/BkFarmV18.sol:\r\n  function registerPlayer(address mentor) external;\r\n\r\n  function addToSquad(uint256[] memory nftIds, uint256 squadId) external;\r\n\r\n  function removeFromSquad(uint256[] memory nftIds, uint256 squadId) external;\r\n\r\n  function clearSquad(uint256 squadId) external;\r\n\r\n  function withdraw(uint256 amount) external;\r\n\r\n  function setMentor(address mentorAddress) external;\r\n\r\n  function transfer(address to, uint256 bct, uint256 eBct, uint256[] memory _resources) external;\r\n\r\n  function transferEbct(address from, address to, uint256 amount) external;\r\n\r\n  //################\r\n  // UPDATER functions\r\n  function startQuestFor(uint256 squadId, uint256 questId) external;\r\n\r\n  function finishQuestFor(uint256 squadId) external;\r\n\r\n  function cancelQuestFor(uint256 squadId) external;\r\n\r\n  function addSquadToPlayer(address playerAddress, uint256 type_) external returns (uint256);\r\n\r\n  function increaseSquadSize(uint256 squadId) external;\r\n\r\n  function payWithBalance(\r\n    address account,\r\n    uint256 bctAmount,\r\n    uint256[] memory _resources\r\n  ) external returns (uint256[] memory);\r\n\r\n  function spendBctFrom(address account, uint256 amount, bool ethereal) external;\r\n\r\n  function transferInGameBctAndLootFrom(\r\n    address from,\r\n    address to,\r\n    uint256 bctAmount,\r\n    uint256[] memory _resources\r\n  ) external;\r\n\r\n  function recalculateSquadFarming(uint256 squadId) external;\r\n\r\n  function addTo(address playerAddress, uint256 amount, uint256[] memory _resources) external;\r\n\r\n  function setSquadType(uint256 squadId, uint256 type_) external;\r\n\r\n  function setSquadTrait(uint256 squadId, uint256 squadTrait) external;\r\n\r\n  function burnBct(uint256 amount) external;\r\n\r\n  function transferFrom(address from, address to, uint256 bct, uint256 eBct, uint256[] memory _resources) external;\r\n\r\n  function setQuestRewardsCalculator(address questRewardsCalculator_) external;\r\n\r\n  function addBctToClaim(address playerAddress, uint256 amount) external;\r\n\r\n  function getSquad(uint256 squadId) external view returns (IMhdaoSquad.Squad memory);\r\n\r\n  function singleBalanceOf(address playerAddress, uint256 resourceId) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IMhdaoNft.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IMhdaoNft {\r\n  struct NftCharacter {\r\n    uint256 id; // the NFT ID\r\n    string name; // is an empty string up until the owner sets it\r\n    string imageUrl; // is an empty string up until the owner sets it\r\n    address owner; // the current owner\r\n    uint256 type_; // 0 for none, 1 for mouse, 2 for ghost, 3+ for exotic\r\n    uint256 rarity; // 0 for none, 1 for common, 2 for rare, 3 for epic, 4 for legendary, 5 for mythic, 6 for supreme\r\n    uint256[] traits; // from 0 to 2 traits, that are numbers from 1 to 50 (initially)\r\n    uint256[] skills; // multipliers for the farming of [sc/hc, ec/cc, nuts, crafting, advanced crafting] (all have to be acquired, all go up to 3)\r\n    uint256 baseFarm; // how many Weis of BCT this NFT will generate per cycle\r\n    uint256 agility; // improves Ranks\r\n    uint256 rank; // multiplies the base farm by rank/10\r\n    uint256 farmPerBlock; // the final farm per block\r\n    uint256 squadId; // the squad ID this NFT is in\r\n    uint256 collection; // the collection this NFT belongs to\r\n  }\r\n\r\n  struct Booster {\r\n    address address_; // the address of the booster\r\n    address boosterData; // the address of the booster data contract (has names, traits, and imageURLs); if 0x0, use the default values\r\n    string name; // the name of the booster\r\n    string tokensDefaultUri; // the base URI for the tokens that can be unboxed\r\n    uint256 type_; // 1 for mouse, 2 for ghost, 3+ for exotic\r\n    uint256 rarity; // each booster has a defined NFT rarity: it will always mint NFTs of that rarity\r\n    uint256 baseFarmBoost; // how many Weis of BONUS BCT this NFT will generate per cycle\r\n    bool accepted; // whether this booster is accepted by the contract\r\n  }\r\n\r\n  function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n  function tokenIdTracker() external view returns (uint256);\r\n\r\n  function getNft(uint256 tokenId) external view returns (NftCharacter memory);\r\n\r\n  function nftsOfOwner(address _owner) external view returns (NftCharacter[] memory);\r\n\r\n  function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n  function paginatedNftsOfOwner(address _owner, uint256 page, uint256 pageSize) external view;\r\n\r\n  function getBooster(address boosterAddress) external view returns (Booster memory);\r\n\r\n  function tokensOfOwner(address _owner) external view returns (uint256[] memory);\r\n\r\n  function squadOf(uint256 tokenId) external view returns (uint256);\r\n\r\n  function isOnQuest(uint256 tokenId) external view returns (bool);\r\n\r\n  function farmPerBlockOf(uint256 tokenId) external view returns (uint256);\r\n\r\n  function rarityOf(uint256 tokenId) external view returns (uint256);\r\n\r\n  function typeOf(uint256 tokenId) external view returns (uint256);\r\n\r\n  function rarityTypeAndSkillsOf(uint256 tokenId) external view returns (uint256, uint256, uint256[] memory);\r\n\r\n  function rarityTypeRankAndSkillsOf(\r\n    uint256 tokenId\r\n  ) external view returns (uint256, uint256, uint256, uint256[] memory);\r\n\r\n  function traitsOf(uint256 tokenId) external view returns (uint256[] memory);\r\n\r\n  function collectionOf(uint256 tokenId) external view returns (uint256);\r\n\r\n  function burnFrom(address account, uint256 tokenId) external;\r\n\r\n  function setSquad(uint256 tokenId, uint256 squadId) external;\r\n\r\n  function unboxBooster(address boosterAddress) external;\r\n\r\n  function rankUp(uint256 tokenId) external;\r\n\r\n  function setBaseFarm(uint256 tokenId, uint256 newBaseFarm) external;\r\n\r\n  function setRank(uint256 tokenId, uint256 newRank) external;\r\n\r\n  function setRarityAndType(uint256 tokenId, uint256 newRarity, uint256 newType_, uint256 newBaseFarm) external;\r\n\r\n  function setTraits(uint256 tokenId, uint256[] memory traits) external;\r\n\r\n  function setSkills(uint256 tokenId, uint256[] memory _skills) external;\r\n\r\n  function setRankAgilityAndSkills(uint256 tokenId, uint256 _rank, uint256 _agility, uint256[] memory skills) external;\r\n\r\n  function setNameAndImage(uint256 tokenId, string memory newName, string memory newImageUrl) external;\r\n\r\n  function rerollTraits(uint256 tokenId) external;\r\n\r\n  function legendaryRerollTraits(uint256 tokenId, uint256 chosenTrait) external;\r\n\r\n  function setAgility(uint256 tokenId, uint256 _agility) external;\r\n\r\n  function changeName(uint256 tokenId, string memory newName) external;\r\n\r\n  function changeImageUrl(uint256 tokenId, string memory newImageUrl) external;\r\n\r\n  function setCollection(uint256 tokenId, uint256 newCollection) external;\r\n\r\n  function mint(\r\n    string memory _name,\r\n    string memory _imageUrl,\r\n    address _owner,\r\n    uint256 type_,\r\n    uint256 _rarity,\r\n    uint256 _rank,\r\n    uint256[] memory _traits,\r\n    uint256 _collection\r\n  ) external;\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/access/IAccessControlUpgradeable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlUpgradeable {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/utils/AddressUpgradeable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n  /**\r\n   * @dev Returns true if `account` is a contract.\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * It is unsafe to assume that an address for which this function returns\r\n   * false is an externally-owned account (EOA) and not a contract.\r\n   *\r\n   * Among others, `isContract` will return false for the following\r\n   * types of addresses:\r\n   *\r\n   *  - an externally-owned account\r\n   *  - a contract in construction\r\n   *  - an address where a contract will be created\r\n   *  - an address where a contract lived, but was destroyed\r\n   * ====\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n   *\r\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n   * constructor.\r\n   * ====\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    // This method relies on extcodesize/address.code.length, which returns 0\r\n    // for contracts in construction, since the code is only stored at the end\r\n    // of the constructor execution.\r\n\r\n    return account.code.length > 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n   * `recipient`, forwarding all available gas and reverting on errors.\r\n   *\r\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n   * imposed by `transfer`, making them unable to receive funds via\r\n   * `transfer`. {sendValue} removes this limitation.\r\n   *\r\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n   *\r\n   * IMPORTANT: because control is transferred to `recipient`, care must be\r\n   * taken to not create reentrancy vulnerabilities. Consider using\r\n   * {ReentrancyGuard} or the\r\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n   */\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount);\r\n\r\n    (bool success, ) = recipient.call{value: amount}(\"\");\r\n    require(success);\r\n  }\r\n\r\n  /**\r\n   * @dev Performs a Solidity function call using a low level `call`. A\r\n   * plain `call` is an unsafe replacement for a function call: use this\r\n   * function instead.\r\n   *\r\n   * If `target` reverts with a revert reason, it is bubbled up by this\r\n   * function (like regular Solidity function calls).\r\n   *\r\n   * Returns the raw returned data. To convert to the expected return value,\r\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `target` must be a contract.\r\n   * - calling `target` with `data` must not revert.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n   * `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but also transferring `value` wei to `target`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the calling contract must have an ETH balance of at least `value`.\r\n   * - the called Solidity function must be `payable`.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(address(this).balance >= value);\r\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n    return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal view returns (bytes memory) {\r\n    (bool success, bytes memory returndata) = target.staticcall(data);\r\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n   * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n   *\r\n   * _Available since v4.8._\r\n   */\r\n  function verifyCallResultFromTarget(\r\n    address target,\r\n    bool success,\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) internal view returns (bytes memory) {\r\n    if (success) {\r\n      if (returndata.length == 0) {\r\n        // only check isContract if the call was successful and the return data is empty\r\n        // otherwise we already know that it was a contract\r\n        require(isContract(target));\r\n      }\r\n      return returndata;\r\n    } else {\r\n      _revert(returndata, errorMessage);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n   * revert reason or using the provided one.\r\n   *\r\n   * _Available since v4.3._\r\n   */\r\n  function verifyCallResult(\r\n    bool success,\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) internal pure returns (bytes memory) {\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      _revert(returndata, errorMessage);\r\n    }\r\n  }\r\n\r\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n    // Look for revert reason and bubble it up if present\r\n    if (returndata.length > 0) {\r\n      // The easiest way to bubble the revert reason is using memory via assembly\r\n      /// @solidity memory-safe-assembly\r\n      assembly {\r\n        let returndata_size := mload(returndata)\r\n        revert(add(32, returndata), returndata_size)\r\n      }\r\n    } else {\r\n      revert(errorMessage);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/proxy/utils/Initializable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   * @custom:oz-retyped-from bool\r\n   */\r\n  uint8 private _initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private _initializing;\r\n\r\n  /**\r\n   * @dev Triggered when the contract has been initialized or reinitialized.\r\n   */\r\n  event Initialized(uint8 version);\r\n\r\n  /**\r\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n   * `onlyInitializing` functions can be used to initialize parent contracts.\r\n   *\r\n   * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\r\n   * constructor.\r\n   *\r\n   * Emits an {Initialized} event.\r\n   */\r\n  modifier initializer() {\r\n    bool isTopLevelCall = !_initializing;\r\n    require(\r\n      (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1)\r\n    );\r\n    _initialized = 1;\r\n    if (isTopLevelCall) {\r\n      _initializing = true;\r\n    }\r\n    _;\r\n    if (isTopLevelCall) {\r\n      _initializing = false;\r\n      emit Initialized(1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n   * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n   * used to initialize parent contracts.\r\n   *\r\n   * A reinitializer may be used after the original initialization step. This is essential to configure modules that\r\n   * are added through upgrades and that require initialization.\r\n   *\r\n   * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\r\n   * cannot be nested. If one is invoked in the context of another, execution will revert.\r\n   *\r\n   * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n   * a contract, executing them in the right order is up to the developer or operator.\r\n   *\r\n   * WARNING: setting the version to 255 will prevent any future reinitialization.\r\n   *\r\n   * Emits an {Initialized} event.\r\n   */\r\n  modifier reinitializer(uint8 version) {\r\n    require(!_initializing && _initialized < version);\r\n    _initialized = version;\r\n    _initializing = true;\r\n    _;\r\n    _initializing = false;\r\n    emit Initialized(version);\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n   * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n   */\r\n  modifier onlyInitializing() {\r\n    require(_initializing);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n   * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n   * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n   * through proxies.\r\n   *\r\n   * Emits an {Initialized} event the first time it is successfully executed.\r\n   */\r\n  function _disableInitializers() internal virtual {\r\n    require(!_initializing);\r\n    if (_initialized < type(uint8).max) {\r\n      _initialized = type(uint8).max;\r\n      emit Initialized(type(uint8).max);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that returns the initialized version. Returns `_initialized`\r\n   */\r\n  function _getInitializedVersion() internal view returns (uint8) {\r\n    return _initialized;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that returns the initialized version. Returns `_initializing`\r\n   */\r\n  function _isInitializing() internal view returns (bool) {\r\n    return _initializing;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/utils/ContextUpgradeable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165Upgradeable {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\r\n    function __ERC165_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __ERC165_init_unchained() internal onlyInitializing {\r\n    }\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/utils/math/MathUpgradeable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary MathUpgradeable {\r\n  enum Rounding {\r\n    Down, // Toward negative infinity\r\n    Up, // Toward infinity\r\n    Zero // Toward zero\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the largest of two numbers.\r\n   */\r\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a > b ? a : b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the smallest of two numbers.\r\n   */\r\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the average of two numbers. The result is rounded towards\r\n   * zero.\r\n   */\r\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // (a + b) / 2 can overflow.\r\n    return (a & b) + (a ^ b) / 2;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the ceiling of the division of two numbers.\r\n   *\r\n   * This differs from standard division with `/` in that it rounds up instead\r\n   * of rounding down.\r\n   */\r\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // (a + b - 1) / b can overflow on addition, so we distribute.\r\n    return a == 0 ? 0 : (a - 1) / b + 1;\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n   * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n   * with further edits by Uniswap Labs also under MIT license.\r\n   */\r\n  function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n    unchecked {\r\n      // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n      // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n      // variables such that product = prod1 * 2^256 + prod0.\r\n      uint256 prod0; // Least significant 256 bits of the product\r\n      uint256 prod1; // Most significant 256 bits of the product\r\n      assembly {\r\n        let mm := mulmod(x, y, not(0))\r\n        prod0 := mul(x, y)\r\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n      }\r\n\r\n      // Handle non-overflow cases, 256 by 256 division.\r\n      if (prod1 == 0) {\r\n        return prod0 / denominator;\r\n      }\r\n\r\n      // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n      require(denominator > prod1);\r\n\r\n      ///////////////////////////////////////////////\r\n      // 512 by 256 division.\r\n      ///////////////////////////////////////////////\r\n\r\n      // Make division exact by subtracting the remainder from [prod1 prod0].\r\n      uint256 remainder;\r\n      assembly {\r\n        // Compute remainder using mulmod.\r\n        remainder := mulmod(x, y, denominator)\r\n\r\n        // Subtract 256 bit number from 512 bit number.\r\n        prod1 := sub(prod1, gt(remainder, prod0))\r\n        prod0 := sub(prod0, remainder)\r\n      }\r\n\r\n      // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n      // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n      // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n      uint256 twos = denominator & (~denominator + 1);\r\n      assembly {\r\n        // Divide denominator by twos.\r\n        denominator := div(denominator, twos)\r\n\r\n        // Divide [prod1 prod0] by twos.\r\n        prod0 := div(prod0, twos)\r\n\r\n        // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n        twos := add(div(sub(0, twos), twos), 1)\r\n      }\r\n\r\n      // Shift in bits from prod1 into prod0.\r\n      prod0 |= prod1 * twos;\r\n\r\n      // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n      // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n      // four bits. That is, denominator * inv = 1 mod 2^4.\r\n      uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n      // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n      // in modular arithmetic, doubling the correct bits in each step.\r\n      inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n      inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n      inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n      inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n      inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n      inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n      // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n      // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n      // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n      // is no longer required.\r\n      result = prod0 * inverse;\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n   */\r\n  function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n    uint256 result = mulDiv(x, y, denominator);\r\n    if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n      result += 1;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n   *\r\n   * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n   */\r\n  function sqrt(uint256 a) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n    //\r\n    // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n    //\r\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n    // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n    // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n    //\r\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n    uint256 result = 1 << (log2(a) >> 1);\r\n\r\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n    // into the expected uint128 result.\r\n    unchecked {\r\n      result = (result + a / result) >> 1;\r\n      result = (result + a / result) >> 1;\r\n      result = (result + a / result) >> 1;\r\n      result = (result + a / result) >> 1;\r\n      result = (result + a / result) >> 1;\r\n      result = (result + a / result) >> 1;\r\n      result = (result + a / result) >> 1;\r\n      return min(result, a / result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates sqrt(a), following the selected rounding direction.\r\n   */\r\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n    unchecked {\r\n      uint256 result = sqrt(a);\r\n      return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Return the log in base 2, rounded down, of a positive value.\r\n   * Returns 0 if given 0.\r\n   */\r\n  function log2(uint256 value) internal pure returns (uint256) {\r\n    uint256 result = 0;\r\n    unchecked {\r\n      if (value >> 128 > 0) {\r\n        value >>= 128;\r\n        result += 128;\r\n      }\r\n      if (value >> 64 > 0) {\r\n        value >>= 64;\r\n        result += 64;\r\n      }\r\n      if (value >> 32 > 0) {\r\n        value >>= 32;\r\n        result += 32;\r\n      }\r\n      if (value >> 16 > 0) {\r\n        value >>= 16;\r\n        result += 16;\r\n      }\r\n      if (value >> 8 > 0) {\r\n        value >>= 8;\r\n        result += 8;\r\n      }\r\n      if (value >> 4 > 0) {\r\n        value >>= 4;\r\n        result += 4;\r\n      }\r\n      if (value >> 2 > 0) {\r\n        value >>= 2;\r\n        result += 2;\r\n      }\r\n      if (value >> 1 > 0) {\r\n        result += 1;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n   * Returns 0 if given 0.\r\n   */\r\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n    unchecked {\r\n      uint256 result = log2(value);\r\n      return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Return the log in base 10, rounded down, of a positive value.\r\n   * Returns 0 if given 0.\r\n   */\r\n  function log10(uint256 value) internal pure returns (uint256) {\r\n    uint256 result = 0;\r\n    unchecked {\r\n      if (value >= 10 ** 64) {\r\n        value /= 10 ** 64;\r\n        result += 64;\r\n      }\r\n      if (value >= 10 ** 32) {\r\n        value /= 10 ** 32;\r\n        result += 32;\r\n      }\r\n      if (value >= 10 ** 16) {\r\n        value /= 10 ** 16;\r\n        result += 16;\r\n      }\r\n      if (value >= 10 ** 8) {\r\n        value /= 10 ** 8;\r\n        result += 8;\r\n      }\r\n      if (value >= 10 ** 4) {\r\n        value /= 10 ** 4;\r\n        result += 4;\r\n      }\r\n      if (value >= 10 ** 2) {\r\n        value /= 10 ** 2;\r\n        result += 2;\r\n      }\r\n      if (value >= 10 ** 1) {\r\n        result += 1;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n   * Returns 0 if given 0.\r\n   */\r\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n    unchecked {\r\n      uint256 result = log10(value);\r\n      return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Return the log in base 256, rounded down, of a positive value.\r\n   * Returns 0 if given 0.\r\n   *\r\n   * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n   */\r\n  function log256(uint256 value) internal pure returns (uint256) {\r\n    uint256 result = 0;\r\n    unchecked {\r\n      if (value >> 128 > 0) {\r\n        value >>= 128;\r\n        result += 16;\r\n      }\r\n      if (value >> 64 > 0) {\r\n        value >>= 64;\r\n        result += 8;\r\n      }\r\n      if (value >> 32 > 0) {\r\n        value >>= 32;\r\n        result += 4;\r\n      }\r\n      if (value >> 16 > 0) {\r\n        value >>= 16;\r\n        result += 2;\r\n      }\r\n      if (value >> 8 > 0) {\r\n        result += 1;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n   * Returns 0 if given 0.\r\n   */\r\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n    unchecked {\r\n      uint256 result = log256(value);\r\n      return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/utils/StringsUpgradeable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary StringsUpgradeable {\r\n  bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n  uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n   */\r\n  function toString(uint256 value) internal pure returns (string memory) {\r\n    unchecked {\r\n      uint256 length = MathUpgradeable.log10(value) + 1;\r\n      string memory buffer = new string(length);\r\n      uint256 ptr;\r\n      /// @solidity memory-safe-assembly\r\n      assembly {\r\n        ptr := add(buffer, add(32, length))\r\n      }\r\n      while (true) {\r\n        ptr--;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n          mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n        }\r\n        value /= 10;\r\n        if (value == 0) break;\r\n      }\r\n      return buffer;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n   */\r\n  function toHexString(uint256 value) internal pure returns (string memory) {\r\n    unchecked {\r\n      return toHexString(value, MathUpgradeable.log256(value) + 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n   */\r\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n    bytes memory buffer = new bytes(2 * length + 2);\r\n    buffer[0] = \"0\";\r\n    buffer[1] = \"x\";\r\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n      buffer[i] = _SYMBOLS[value & 0xf];\r\n      value >>= 4;\r\n    }\r\n    require(value == 0);\r\n    return string(buffer);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n   */\r\n  function toHexString(address addr) internal pure returns (string memory) {\r\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n  }\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/access/AccessControlUpgradeable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControlUpgradeable is\r\n  Initializable,\r\n  ContextUpgradeable,\r\n  IAccessControlUpgradeable,\r\n  ERC165Upgradeable\r\n{\r\n  function __AccessControl_init() internal onlyInitializing {}\r\n\r\n  function __AccessControl_init_unchained() internal onlyInitializing {}\r\n\r\n  struct RoleData {\r\n    mapping(address => bool) members;\r\n    bytes32 adminRole;\r\n  }\r\n\r\n  mapping(bytes32 => RoleData) private _roles;\r\n\r\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n  /**\r\n   * @dev Modifier that checks that an account has a specific role. Reverts\r\n   * with a standardized message including the required role.\r\n   *\r\n   * The format of the revert reason is given by the following regular expression:\r\n   *\r\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n   *\r\n   * _Available since v4.1._\r\n   */\r\n  modifier onlyRole(bytes32 role) {\r\n    _checkRole(role);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n    return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns `true` if `account` has been granted `role`.\r\n   */\r\n  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n    return _roles[role].members[account];\r\n  }\r\n\r\n  /**\r\n   * @dev Revert with a standard message if `_msgSender()` is missing `role`.\r\n   * Overriding this function changes the behavior of the {onlyRole} modifier.\r\n   *\r\n   * Format of the revert message is described in {_checkRole}.\r\n   *\r\n   * _Available since v4.6._\r\n   */\r\n  function _checkRole(bytes32 role) internal view virtual {\r\n    _checkRole(role, _msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Revert with a standard message if `account` is missing `role`.\r\n   *\r\n   * The format of the revert reason is given by the following regular expression:\r\n   *\r\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n   */\r\n  function _checkRole(bytes32 role, address account) internal view virtual {\r\n    if (!hasRole(role, account)) {\r\n      revert(\r\n        string(\r\n          abi.encodePacked(\r\n            \"AccessControl: account \",\r\n            StringsUpgradeable.toHexString(account),\r\n            \" is missing role \",\r\n            StringsUpgradeable.toHexString(uint256(role), 32)\r\n          )\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n   * {revokeRole}.\r\n   *\r\n   * To change a role's admin, use {_setRoleAdmin}.\r\n   */\r\n  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n    return _roles[role].adminRole;\r\n  }\r\n\r\n  /**\r\n   * @dev Grants `role` to `account`.\r\n   *\r\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n   * event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the caller must have ``role``'s admin role.\r\n   *\r\n   * May emit a {RoleGranted} event.\r\n   */\r\n  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n    _grantRole(role, account);\r\n  }\r\n\r\n  /**\r\n   * @dev Revokes `role` from `account`.\r\n   *\r\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the caller must have ``role``'s admin role.\r\n   *\r\n   * May emit a {RoleRevoked} event.\r\n   */\r\n  function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n    _revokeRole(role, account);\r\n  }\r\n\r\n  /**\r\n   * @dev Revokes `role` from the calling account.\r\n   *\r\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n   * purpose is to provide a mechanism for accounts to lose their privileges\r\n   * if they are compromised (such as when a trusted device is misplaced).\r\n   *\r\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n   * event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the caller must be `account`.\r\n   *\r\n   * May emit a {RoleRevoked} event.\r\n   */\r\n  function renounceRole(bytes32 role, address account) public virtual override {\r\n    require(account == _msgSender());\r\n\r\n    _revokeRole(role, account);\r\n  }\r\n\r\n  /**\r\n   * @dev Grants `role` to `account`.\r\n   *\r\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n   * event. Note that unlike {grantRole}, this function doesn't perform any\r\n   * checks on the calling account.\r\n   *\r\n   * May emit a {RoleGranted} event.\r\n   *\r\n   * [WARNING]\r\n   * ====\r\n   * This function should only be called from the constructor when setting\r\n   * up the initial roles for the system.\r\n   *\r\n   * Using this function in any other way is effectively circumventing the admin\r\n   * system imposed by {AccessControl}.\r\n   * ====\r\n   *\r\n   * NOTE: This function is deprecated in favor of {_grantRole}.\r\n   */\r\n  function _setupRole(bytes32 role, address account) internal virtual {\r\n    _grantRole(role, account);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets `adminRole` as ``role``'s admin role.\r\n   *\r\n   * Emits a {RoleAdminChanged} event.\r\n   */\r\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n    bytes32 previousAdminRole = getRoleAdmin(role);\r\n    _roles[role].adminRole = adminRole;\r\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n  }\r\n\r\n  /**\r\n   * @dev Grants `role` to `account`.\r\n   *\r\n   * Internal function without access restriction.\r\n   *\r\n   * May emit a {RoleGranted} event.\r\n   */\r\n  function _grantRole(bytes32 role, address account) internal virtual {\r\n    if (!hasRole(role, account)) {\r\n      _roles[role].members[account] = true;\r\n      emit RoleGranted(role, account, _msgSender());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Revokes `role` from `account`.\r\n   *\r\n   * Internal function without access restriction.\r\n   *\r\n   * May emit a {RoleRevoked} event.\r\n   */\r\n  function _revokeRole(bytes32 role, address account) internal virtual {\r\n    if (hasRole(role, account)) {\r\n      _roles[role].members[account] = false;\r\n      emit RoleRevoked(role, account, _msgSender());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev This empty reserved space is put in place to allow future versions to add new\r\n   * variables without shifting down storage in the inheritance chain.\r\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n   */\r\n  uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/security/PausableUpgradeable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal onlyInitializing {\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal onlyInitializing {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/utils/AdministrableUpgradableP9.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\n// Exactly the same as OpoenZeppelin's, but without require() return strings:\r\n\r\n\r\n\r\ninterface IRecoverableErc20 {\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract AdministrableUpgradableP9 is Initializable, AccessControlUpgradeable, PausableUpgradeable {\r\n  bytes32 internal constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\r\n  bytes32 internal constant UPDATER_ROLE = keccak256(\"UPDATER_ROLE\");\r\n  bytes32 internal constant VIP_ROLE = keccak256(\"VIP_ROLE\");\r\n\r\n  function __Administrable_init(address _operator) public initializer {\r\n    __AccessControl_init();\r\n    __Pausable_init();\r\n\r\n    _setupRole(DEFAULT_ADMIN_ROLE, _operator);\r\n    _setupRole(OPERATOR_ROLE, _operator);\r\n    _setupRole(UPDATER_ROLE, _operator);\r\n  }\r\n\r\n  function _onlyAccountNotPausedOrUpdater(address account) internal view {\r\n    require((account == msg.sender && !paused()) || hasRole(UPDATER_ROLE, msg.sender));\r\n  }\r\n\r\n  ////////////////////\r\n  // Operator Functions:\r\n  function pause() external onlyRole(OPERATOR_ROLE) {\r\n    _pause();\r\n  }\r\n\r\n  function unpause() external onlyRole(OPERATOR_ROLE) {\r\n    _unpause();\r\n  }\r\n\r\n  function recoverERC20(address tokenAddress, address to, uint256 amount) external onlyRole(OPERATOR_ROLE) {\r\n    IRecoverableErc20(tokenAddress).transfer(to, amount);\r\n  }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IBlocklistP9.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\ninterface IBlocklistP9 {\r\n  function isBlocklisted(address account) external view returns (bool);\r\n\r\n  function areBlocklisted(address accountA, address accountB) external view returns (bool); // true if either account is blocklisted\r\n}\r\n\r\n\r\n// File contracts/utils/BlocklistableFlowP9.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\ncontract BlocklistableFlowP9 {\r\n  /**\r\n   * @dev the blocklist contract\r\n   */\r\n  IBlocklistP9 public blocklist;\r\n\r\n  /**\r\n   * @notice is the blocklist active?\r\n   */\r\n  bool public hasBlocklist;\r\n\r\n  modifier notBlocklisted() {\r\n    require(!_isBlocklisted(msg.sender), \"Blocklisted\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Lets the operator set the blocklist address\r\n   * @param blocklistAddress The address of the blocklist contract\r\n   */\r\n  function _setBlocklist(address blocklistAddress) internal {\r\n    blocklist = IBlocklistP9(blocklistAddress);\r\n    hasBlocklist = true;\r\n  }\r\n\r\n  function _isBlocklisted(address account) internal view returns (bool) {\r\n    if (!hasBlocklist) {\r\n      return false;\r\n    }\r\n\r\n    return blocklist.isBlocklisted(account);\r\n  }\r\n\r\n  function _resetBlocklist() internal {\r\n    blocklist = IBlocklistP9(address(0));\r\n    hasBlocklist = false;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/utils/MutexableP9.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\ncontract MutexableP9 {\r\n  bool private _locked;\r\n\r\n  modifier mutex() {\r\n    require(!_locked, \"mutex\");\r\n    _locked = true;\r\n    _;\r\n    _locked = false;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IBkFarmV18P9.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\ninterface IBkFarmV18P9 {\r\n  // write the interface for the contract ../features/BkFarmV18.sol:\r\n  function registerPlayer(address mentor) external;\r\n\r\n  function addToSquad(uint256[] memory nftIds, uint256 squadId) external;\r\n\r\n  function removeFromSquad(uint256[] memory nftIds, uint256 squadId) external;\r\n\r\n  function clearSquad(uint256 squadId) external;\r\n\r\n  function withdraw(uint256 amount) external;\r\n\r\n  function setMentor(address mentorAddress) external;\r\n\r\n  function transfer(address to, uint256 bct, uint256 eBct, uint256[] memory _resources) external;\r\n\r\n  function transferEbct(address from, address to, uint256 amount) external;\r\n\r\n  //################\r\n  // UPDATER functions\r\n  function startQuestFor(uint256 squadId, uint256 questId) external;\r\n\r\n  function finishQuestFor(uint256 squadId) external;\r\n\r\n  function cancelQuestFor(uint256 squadId) external;\r\n\r\n  function addSquadToPlayer(address playerAddress, uint256 type_) external returns (uint256);\r\n\r\n  function increaseSquadSize(uint256 squadId) external;\r\n\r\n  function payWithBalance(\r\n    address account,\r\n    uint256 bctAmount,\r\n    uint256[] memory _resources\r\n  ) external returns (uint256[] memory);\r\n\r\n  function spendBctFrom(address account, uint256 amount, bool ethereal) external;\r\n\r\n  function transferInGameBctAndLootFrom(\r\n    address from,\r\n    address to,\r\n    uint256 bctAmount,\r\n    uint256[] memory _resources\r\n  ) external;\r\n\r\n  function recalculateSquadFarming(uint256 squadId) external;\r\n\r\n  function addTo(address playerAddress, uint256 amount, uint256[] memory _resources) external;\r\n\r\n  function setSquadType(uint256 squadId, uint256 type_) external;\r\n\r\n  function setSquadTrait(uint256 squadId, uint256 squadTrait) external;\r\n\r\n  function burnBct(uint256 amount) external;\r\n\r\n  function transferFrom(address from, address to, uint256 bct, uint256 eBct, uint256[] memory _resources) external;\r\n\r\n  function setQuestRewardsCalculator(address questRewardsCalculator_) external;\r\n\r\n  function addBctToClaim(address playerAddress, uint256 amount) external;\r\n\r\n  function getSquad(uint256 squadId) external view returns (IMhdaoSquad.Squad memory);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ICommunityPool.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface ICommunityPool {\r\n  function getReserves() external view returns (uint256 _gameTokenReserve, uint256 _stableTokenReserve);\r\n\r\n  function getPrice() external view returns (uint256 _price);\r\n\r\n  function quoteStableToGameTokens(uint256 stableTokens) external view returns (uint256 gameTokens);\r\n\r\n  function quoteGameToStableTokens(uint256 gameTokens) external view returns (uint256 stableTokens);\r\n\r\n  function getStableTokensIn(uint256 bctOut) external view returns (uint256 stableTokensIn);\r\n\r\n  function quoteBuyGameTokens(uint256 gameTokensToBuy) external view returns (uint256 costInStableTokens);\r\n\r\n  function quoteSellGameTokens(\r\n    uint256 gameTokensToSell\r\n  ) external view returns (uint256 stableTokensOut, uint256 feeInWei);\r\n\r\n  function quoteSellGameTokensFor(\r\n    uint256 gameTokensToSell,\r\n    address account\r\n  ) external view returns (uint256 stableTokensOut, uint256 feeInWei);\r\n\r\n  function buyGameTokens(uint256 gameTokens) external returns (uint256 stableTokensPaid);\r\n\r\n  function buyGameTokensAtPrice(\r\n    uint256 gameTokens,\r\n    uint256 atPrice,\r\n    uint256 maxSlippage\r\n  ) external returns (uint256 stableTokensPaid);\r\n\r\n  function sellGameTokens(uint256 gameTokens) external returns (uint256 stableTokensOut);\r\n\r\n  function sellGameTokensAtPrice(\r\n    uint256 gameTokens,\r\n    uint256 atPrice,\r\n    uint256 maxSlippage\r\n  ) external returns (uint256 stableTokensOut);\r\n\r\n  function buyAndBurn(uint256 amountIn) external returns (uint256 amountBurned);\r\n}\r\n\r\n\r\n// File contracts/interfaces/MHIERC20.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface MHIERC20 {\r\n  function approve(address to, uint256 tokenId) external;\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external;\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  function burn(uint256 amount) external;\r\n\r\n  function burn(address from, uint256 amount) external;\r\n\r\n  function burnFrom(address account, uint256 amount) external;\r\n\r\n  function decimals() external view returns (uint8);\r\n\r\n  function mint(address to, uint256 amount) external;\r\n\r\n  function totalSupply() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/utils/PaymentReceiverP9.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\ninterface IBalancesForResources {\r\n  function getResources() external view returns (address[] memory);\r\n}\r\n\r\ncontract PaymentReceiverP9 {\r\n  uint256 public resourcesCount; // total number of resources\r\n  mapping(uint256 => address) public resources; // all the possible resources\r\n\r\n  struct PaymentContracts {\r\n    MHIERC20 bct;\r\n    MHIERC20 busd;\r\n    ICommunityPool pool;\r\n    IBkFarmV18P9 farm;\r\n  }\r\n  PaymentContracts public paymentContracts;\r\n  uint256 public autoReturnRate;\r\n\r\n  struct PaymentOptions {\r\n    bool isNominalInBct;\r\n    bool isBctOnly;\r\n    bool isPaymentWithBusd;\r\n    bool isBusdOnly;\r\n  }\r\n\r\n  function _setupPaymentModule(\r\n    address _bct,\r\n    address _busd,\r\n    address _pool,\r\n    address _farm,\r\n    address _resourcesSource,\r\n    uint256 _autoReturnRate\r\n  ) internal {\r\n    paymentContracts.bct = MHIERC20(_bct);\r\n    paymentContracts.busd = MHIERC20(_busd);\r\n    paymentContracts.pool = ICommunityPool(_pool);\r\n    paymentContracts.farm = IBkFarmV18P9(_farm);\r\n\r\n    _updateResources(_resourcesSource);\r\n\r\n    autoReturnRate = _autoReturnRate; // usually 90 (90%)\r\n\r\n    paymentContracts.busd.approve(_pool, type(uint256).max);\r\n  }\r\n\r\n  /**\r\n   * @notice Charges the user for the payment\r\n   * @dev The payment can be either in BCT or BUSD;\r\n   *      when in BUSD, we don't charge any resources and return most of the value to the community pool;\r\n   *      when in BCT, we charge resources and burn the BCT\r\n   * @param priceInNominalCoin Can be in weis of BCT or weis of BUSD\r\n   * @param priceInResources An array N slots, each slot is the price of the resource at the index\r\n   * @param options A struct with the options for the payment\r\n   */\r\n  function _receivePayment(\r\n    uint256 priceInNominalCoin,\r\n    uint256[] memory priceInResources,\r\n    PaymentOptions memory options\r\n  ) internal {\r\n    if (options.isPaymentWithBusd) {\r\n      require(!options.isBctOnly, \"p0\");\r\n      // We find out how much we should charge in BUSD\r\n      uint256 priceInBusd = options.isNominalInBct ? bctToBusd(priceInNominalCoin) : priceInNominalCoin;\r\n\r\n      // If the payment is in BUSD, we just charge the user\r\n      paymentContracts.busd.transferFrom(msg.sender, address(this), priceInBusd);\r\n\r\n      // then we use part of the money to buy BCT at the Community Pool\r\n      uint256 liquidityShare = (autoReturnRate * priceInBusd) / 100;\r\n      paymentContracts.pool.buyAndBurn(liquidityShare);\r\n    } else {\r\n      require(!options.isBusdOnly, \"p1\");\r\n\r\n      uint256 priceInBct = options.isNominalInBct ? priceInNominalCoin : busdToBct(priceInNominalCoin);\r\n\r\n      // Try to pay with ingame balances and get the remaining costs\r\n      uint256[] memory remainingResourcesToPay = paymentContracts.farm.payWithBalance(\r\n        msg.sender,\r\n        priceInBct,\r\n        priceInResources\r\n      );\r\n\r\n      // If there are still resources to pay, we try to pay with BCT\r\n      if (remainingResourcesToPay[0] > 0) {\r\n        paymentContracts.bct.burnFrom(msg.sender, remainingResourcesToPay[0]);\r\n      }\r\n\r\n      for (uint i = 1; i < remainingResourcesToPay.length; i++) {\r\n        if (remainingResourcesToPay[i] > 0) {\r\n          MHIERC20(resources[i - 1]).burnFrom(msg.sender, remainingResourcesToPay[i]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function _updateResources(address sourceContract) internal {\r\n    IBalancesForResources _sourceContract = IBalancesForResources(sourceContract);\r\n    address[] memory _resources = _sourceContract.getResources();\r\n\r\n    // transform the array into a mapping\r\n    for (uint256 i = 0; i < _resources.length; i++) {\r\n      resources[i] = _resources[i];\r\n    }\r\n\r\n    resourcesCount = _resources.length;\r\n  }\r\n\r\n  function _setAutoReturnRate(uint256 _autoReturnRate) internal {\r\n    autoReturnRate = _autoReturnRate;\r\n  }\r\n\r\n  function _recoverERC20(address tokenAddress, address to, uint256 amount) internal {\r\n    MHIERC20(tokenAddress).transfer(to, amount);\r\n  }\r\n\r\n  // How much busd to charge for a given amount of BCT;\r\n  function bctToBusd(uint256 bctAmount) public view returns (uint256) {\r\n    return paymentContracts.pool.quoteBuyGameTokens(bctAmount);\r\n  }\r\n\r\n  // How much BCT to charge for a given amount of BUSD;\r\n  function busdToBct(uint256 busdAmount) public view returns (uint256) {\r\n    return paymentContracts.pool.quoteStableToGameTokens(busdAmount);\r\n  }\r\n}\r\n\r\n\r\n// File contracts/features/BkForge.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title BkForge\r\n * @dev Sells items for BCT\r\n */\r\ncontract BkForge is AdministrableUpgradableP9, PaymentReceiverP9, MutexableP9, BlocklistableFlowP9 {\r\n  mapping(uint256 => uint256) public baseBalanceOf;\r\n  mapping(uint256 => uint256) public lastUpdateBlockOf;\r\n\r\n  mapping(uint256 => uint256) public weights; // the weight of each resource (in cents)\r\n  mapping(uint256 => uint256) public costEbct; // the extra cost in ebct of each resource (in cents)\r\n  mapping(uint256 => uint256) public costDrasca; // the extra cost in drasca of each resource (in cents)\r\n\r\n  mapping(address => uint256) public powderBalances; // the amount of powder each player has\r\n\r\n  bool public craftEnabled;\r\n  bool public meltEnabled;\r\n  bool public buyEbctEnabled;\r\n\r\n  // ERC20 features for Crafting Powder:\r\n  string public constant name = \"Crafting Powder\";\r\n  string public constant symbol = \"BKCP\";\r\n  uint8 public constant decimals = 2; // like the other resources, this is in cents\r\n  mapping(address => mapping(address => uint256)) public allowances;\r\n  uint256 public totalSupply;\r\n\r\n  event Transfer(address from, address to, uint256 value);\r\n  event Approval(address owner, address spender, uint256 value);\r\n  event Craft(address account, uint256 resourceIndex, uint256 amountInUnits, uint256 apeToolsUsed);\r\n  event Melt(address account, uint256 resourceIndex, uint256 amountInUnits);\r\n  event BuyEbct(address account, uint256 stableTokensIn, uint256 ebctAmount);\r\n  event TransferResources(address from, address to, uint256[] resources);\r\n  event TransferEbct(address from, address to, uint256 value);\r\n\r\n  // When crafting a resource, it costs its weight, but it costs more the less balance there is (it's a \"virtual\" balance)\r\n  // When \"melting\" (selling) a resource, it always pays 1/5 the resource's weight\r\n  // Each Ape tool used grants you a 5% discount on the price of the resource\r\n  // Cost in eBCT: 1/100 of the weight of the resource (unaffected by the kingdom scale)\r\n  function initialize(address _operator) public initializer {\r\n    __Administrable_init(_operator);\r\n\r\n    weights[0] = 100; // Super Cheese\r\n    weights[1] = 150; // Shiny Fish\r\n    weights[2] = 300; // Groovy Grass\r\n    weights[3] = 400; // Happy Roots\r\n    weights[4] = 500; // Bang Bananas\r\n\r\n    weights[5] = 300; // Exotic Cheese\r\n    weights[6] = 400; // Cat Milk\r\n    weights[7] = 500; // Magic Mushrooms\r\n    weights[8] = 3000; // Power Mangoes\r\n    weights[9] = 500; // Ape Tools (can't melt)\r\n\r\n    weights[10] = 200; // Golden Nuts\r\n\r\n    weights[11] = 250; // Gene Therapy\r\n    weights[12] = 300; // Mouse Box\r\n    weights[13] = 400; // Cat Box\r\n\r\n    weights[14] = 750; // Mouse Dna\r\n    weights[15] = 1500; // Cat Dna\r\n    weights[16] = 3000; // Cow Dna\r\n    weights[17] = 4500; // Elephant Dna\r\n    weights[18] = 6000; // Ape Dna\r\n\r\n    //weights[19] = 0; // Cow Box\r\n    //weights[20] = 0; // Elephant Box\r\n    //weights[21] = 0; // Dragon Scales\r\n\r\n    weights[22] = 12000; // Griffin Feathers (can't be melted, can be crafted)\r\n    weights[23] = 20000; // Satyrn Horns (can't be melted, can be crafted)\r\n    weights[24] = 30000; // Dinosaur Skulls (can't be melted, can be crafted)\r\n\r\n    costDrasca[22] = 100; // Griffin Feathers\r\n    costDrasca[23] = 100; // Satyrn Horns\r\n    costDrasca[24] = 100; // Dinosaur Skulls\r\n\r\n    //costDrasca[25] = 0; // Ai Chips\r\n  }\r\n\r\n  function balanceOf(address account) external view returns (uint256) {\r\n    return powderBalances[account];\r\n  }\r\n\r\n  function priceOf(\r\n    uint256 resourceIndex,\r\n    uint256 amountInUnits,\r\n    uint256 apeToolsUsed\r\n  ) public view returns (uint256 priceInPowder) {\r\n    require(amountInUnits > 0, \"0\");\r\n    require(apeToolsUsed <= 10, \"2\"); // 5% discount per ape tool, up to 50% max discount\r\n\r\n    priceInPowder = weights[resourceIndex] * amountInUnits;\r\n\r\n    // then we'll apply a discount based on the number of ApeTools used\r\n    // the discount is 5% per ApeTools used up to 50% max total discount\r\n    uint256 discount = apeToolsUsed * 5;\r\n    priceInPowder = (priceInPowder * (100 - discount)) / 100;\r\n  }\r\n\r\n  function craftMany(\r\n    uint256[] memory resourceIndexes,\r\n    uint256[] memory amountsInUnits,\r\n    uint256 apeToolsUsed\r\n  ) external notBlocklisted mutex whenNotPaused {\r\n    require(resourceIndexes.length == amountsInUnits.length, \"10\");\r\n    require(craftEnabled || hasRole(UPDATER_ROLE, msg.sender), \"77\");\r\n\r\n    uint256 price = 0;\r\n    uint256[] memory _resources = new uint256[](25);\r\n    uint256 costInDrasca = 0;\r\n\r\n    for (uint256 i = 0; i < resourceIndexes.length; i++) {\r\n      uint256 resourceIndex = resourceIndexes[i];\r\n      uint256 amountInUnits = amountsInUnits[i];\r\n\r\n      require(weights[resourceIndex] > 0, \"8\"); // can't craft high boxes or Dragon Scales / Ai Chips here\r\n\r\n      price += priceOf(resourceIndex, amountInUnits, apeToolsUsed);\r\n\r\n      // create an array where the resource is the index\r\n      _resources[resourceIndex] = amountInUnits * 100; //the farm likes it in cents\r\n      costInDrasca += amountInUnits * costDrasca[resourceIndex]; // drasca if needed\r\n    }\r\n\r\n    // charge the player\r\n    require(powderBalances[msg.sender] >= price, \"9\");\r\n    _burn(msg.sender, price);\r\n    if (costInDrasca > 0 || apeToolsUsed > 0) {\r\n      uint256[] memory _resourcesToCharge = new uint256[](22);\r\n      _resourcesToCharge[9] = apeToolsUsed * 100; // Ape Tools\r\n      _resourcesToCharge[21] = costInDrasca; // drasca if needed\r\n      _receivePayment(0, _resourcesToCharge, PaymentOptions(true, true, false, false));\r\n    }\r\n\r\n    // send the resources to the player:\r\n    _sendResourcesTo(msg.sender, _resources);\r\n  }\r\n\r\n  function _sendResourcesTo(address to, uint256[] memory _resources) private {\r\n    paymentContracts.farm.addTo(to, 0, _resources);\r\n    emit TransferResources(msg.sender, to, _resources);\r\n  }\r\n\r\n  function meltMany(\r\n    uint256[] memory resourceIndexes,\r\n    uint256[] memory amountsInUnits,\r\n    uint256 apeToolsUsed\r\n  ) external notBlocklisted mutex whenNotPaused {\r\n    require(resourceIndexes.length == amountsInUnits.length, \"10\");\r\n    require(meltEnabled || hasRole(UPDATER_ROLE, msg.sender), \"77\");\r\n\r\n    uint256 yield = 0;\r\n    uint256[] memory _resources = new uint256[](19);\r\n\r\n    for (uint256 i = 0; i < resourceIndexes.length; i++) {\r\n      uint256 resourceIndex = resourceIndexes[i];\r\n      require(resourceIndex < 19, \"8\"); // can't melt high boxes or dream resources here\r\n      require(resourceIndex != 9, \"9\"); // can't melt Ape Tools\r\n\r\n      uint256 amountInUnits = amountsInUnits[i];\r\n\r\n      yield += ((weights[resourceIndex] * amountInUnits) / 5);\r\n\r\n      // create an array where the resource is the index\r\n      _resources[resourceIndex] = amountInUnits * 100; //the farm likes it in cents\r\n    }\r\n\r\n    // charge the player\r\n    _receivePayment(0, _resources, PaymentOptions(true, true, false, false));\r\n\r\n    // Apply Ape Tools to the Yield:\r\n    uint256 bonus = apeToolsUsed * 5;\r\n    yield = (yield * (100 + bonus)) / 100;\r\n\r\n    // send the yield to the player\r\n    _mint(msg.sender, yield);\r\n  }\r\n\r\n  function buyEbct(uint256 stableTokensIn) external notBlocklisted mutex whenNotPaused {\r\n    uint256 bctAmount = paymentContracts.pool.quoteStableToGameTokens(stableTokensIn);\r\n    require(buyEbctEnabled || hasRole(UPDATER_ROLE, msg.sender), \"77\");\r\n\r\n    // charge the player\r\n    _receivePayment(stableTokensIn, new uint256[](0), PaymentOptions(false, false, true, true));\r\n\r\n    // create the resource array:\r\n    uint256[] memory _resources = new uint256[](22);\r\n    _resources[21] = (((stableTokensIn / 1e18) * 4) / 10) * 100; // 40% of the StableTokens is converted to Drasca (and the farm likes it in cents)\r\n\r\n    // send twice as much eBCT to the player\r\n    paymentContracts.farm.addTo(msg.sender, bctAmount * 2, _resources);\r\n  }\r\n\r\n  //######################\r\n  // ERC20:\r\n  function transfer(address recipient, uint256 amount) public returns (bool) {\r\n    powderBalances[msg.sender] -= amount; // will revert if not enough balance\r\n    powderBalances[recipient] += amount;\r\n\r\n    emit Transfer(msg.sender, recipient, amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n    powderBalances[sender] -= amount; // will revert if not enough balance\r\n    powderBalances[recipient] += amount;\r\n    allowances[sender][msg.sender] -= amount; // will revert if not enough allowance\r\n\r\n    emit Transfer(sender, recipient, amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) public returns (bool) {\r\n    allowances[msg.sender][spender] = amount;\r\n\r\n    emit Approval(msg.sender, spender, amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return allowances[owner][spender];\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) private {\r\n    powderBalances[account] += amount;\r\n    totalSupply += amount;\r\n\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) private {\r\n    powderBalances[account] -= amount; // will revert if not enough balance\r\n    totalSupply -= amount;\r\n\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  //######################\r\n  // OPERATOR functions\r\n  function setupPaymentModule(\r\n    address _bct,\r\n    address _busd,\r\n    address _pool,\r\n    address _farm,\r\n    address _resourcesSource,\r\n    uint256 _autoReturnRate\r\n  ) external onlyRole(OPERATOR_ROLE) {\r\n    _setupPaymentModule(_bct, _busd, _pool, _farm, _resourcesSource, _autoReturnRate);\r\n  }\r\n\r\n  function updateResources(address sourceContract) external onlyRole(OPERATOR_ROLE) {\r\n    _updateResources(sourceContract);\r\n  }\r\n\r\n  function setWeights(uint256[] memory _weights) external onlyRole(OPERATOR_ROLE) {\r\n    for (uint256 i = 0; i < _weights.length; i++) {\r\n      weights[i] = _weights[i];\r\n    }\r\n  }\r\n\r\n  function addTo(address to, uint256 amount) external onlyRole(OPERATOR_ROLE) {\r\n    _mint(to, amount);\r\n  }\r\n\r\n  function setCraftEnabled(bool _craftEnabled) external onlyRole(OPERATOR_ROLE) {\r\n    craftEnabled = _craftEnabled;\r\n  }\r\n\r\n  function setMeltEnabled(bool _meltEnabled) external onlyRole(OPERATOR_ROLE) {\r\n    meltEnabled = _meltEnabled;\r\n  }\r\n\r\n  function setBuyEbctEnabled(bool _buyEbctEnabled) external onlyRole(OPERATOR_ROLE) {\r\n    buyEbctEnabled = _buyEbctEnabled;\r\n  }\r\n\r\n  function forceTotalSupply(uint256 _totalSupply) external onlyRole(OPERATOR_ROLE) {\r\n    totalSupply = _totalSupply;\r\n  }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableTokensIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ebctAmount\",\"type\":\"uint256\"}],\"name\":\"BuyEbct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resourceIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInUnits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apeToolsUsed\",\"type\":\"uint256\"}],\"name\":\"Craft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resourceIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInUnits\",\"type\":\"uint256\"}],\"name\":\"Melt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferEbct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"resources\",\"type\":\"uint256[]\"}],\"name\":\"TransferResources\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"__Administrable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReturnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"baseBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bctAmount\",\"type\":\"uint256\"}],\"name\":\"bctToBusd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocklist\",\"outputs\":[{\"internalType\":\"contract IBlocklistP9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"busdAmount\",\"type\":\"uint256\"}],\"name\":\"busdToBct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stableTokensIn\",\"type\":\"uint256\"}],\"name\":\"buyEbct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyEbctEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"costDrasca\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"costEbct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"craftEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"resourceIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInUnits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"apeToolsUsed\",\"type\":\"uint256\"}],\"name\":\"craftMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"forceTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasBlocklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastUpdateBlockOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"meltEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"resourceIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInUnits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"apeToolsUsed\",\"type\":\"uint256\"}],\"name\":\"meltMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentContracts\",\"outputs\":[{\"internalType\":\"contract MHIERC20\",\"name\":\"bct\",\"type\":\"address\"},{\"internalType\":\"contract MHIERC20\",\"name\":\"busd\",\"type\":\"address\"},{\"internalType\":\"contract ICommunityPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IBkFarmV18P9\",\"name\":\"farm\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"powderBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resourceIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apeToolsUsed\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInPowder\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resources\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resourcesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_buyEbctEnabled\",\"type\":\"bool\"}],\"name\":\"setBuyEbctEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_craftEnabled\",\"type\":\"bool\"}],\"name\":\"setCraftEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_meltEnabled\",\"type\":\"bool\"}],\"name\":\"setMeltEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"setWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bct\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_busd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resourcesSource\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_autoReturnRate\",\"type\":\"uint256\"}],\"name\":\"setupPaymentModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceContract\",\"type\":\"address\"}],\"name\":\"updateResources\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BkForge", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://343c3ce05d1bdff2f520bc7c63d75d5013256cd743b65be80e11b5c0b728f675"}