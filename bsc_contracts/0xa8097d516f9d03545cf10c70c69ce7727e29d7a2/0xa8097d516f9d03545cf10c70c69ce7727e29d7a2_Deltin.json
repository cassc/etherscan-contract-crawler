{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\n// ----------------------------------------------------------------------------\r\n/// @title Deltin\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n/// @title Interface : Token Standard #20. https://github.com/ethereum/EIPs/issues/20\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n/// @title Website : https://deltincoin.com/\r\n// ----------------------------------------------------------------------------\r\ninterface ERC20Interface {\r\n    \r\n    /**\r\n     * @dev Triggers on any successful call to transfer() and transferFrom().\r\n     * @param _from : The address sending the tokens.\r\n     * @param _to : The address receiving the tokens.\r\n     * @param _amount : The quantity of tokens to be sent.\r\n     */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    \r\n    /**\r\n     * @dev Triggers on any successful call to approve() and allowance().\r\n     * @param _owner : The address allowing token to be spent.\r\n     * @param _spender : The address allowed to spend tokens.\r\n     * @param _amount : The quantity allowed to be spent.\r\n     */\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\r\n    \r\n    /**\r\n     * @notice Transfers `_amount` tokens to `_to`.\r\n     * @param _to : The address receiving tokens.\r\n     * @param _amount : The quantity of tokens to send.\r\n     */\r\n    function transfer(address _to, uint256 _amount) external returns (bool success);\r\n    \r\n    /**\r\n     * @notice Transfers `_amount` tokens from `_from` to `_to`.\r\n     * @param _from : The address sending tokens.\r\n     * @param _to : The address receiving tokens.\r\n     * @param _amount : The quantity of tokens to be sent.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool success);\r\n    \r\n    /**\r\n     * @notice Sets `_amount` to be spent by `_spender` on your behalf.\r\n     * @param _spender : The address allowed to spend tokens.\r\n     * @param _amount : The quantity allowed to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _amount) external returns (bool success);\r\n    \r\n    /**\r\n     * @notice Returns the amount which `_spender` is still allowed to withdraw from `_owner`.\r\n     * @param _owner : The address allowing token to be spent.\r\n     * @param _spender : The address allowed to spend tokens.\r\n     */\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n    \r\n    /**\r\n     * @notice Returns the amount of tokens owned by account `_owner`.\r\n     * @param _owner : The address from which the balance will be retrieved.\r\n     * @return holdings 000\r\n     */\r\n    function balanceOf(address _owner) external view returns (uint256 holdings);\r\n    \r\n    /**\r\n     * @notice Returns the amount of tokens in existence.\r\n     * @return remaining 000\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n/// @title Context : Information about sender, value, and data of the transaction.\r\n// ----------------------------------------------------------------------------\r\nabstract contract Context {\r\n    /// @dev Returns information about the sender of the transaction.\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    /// @dev Returns information about the value of the transaction.\r\n    function _msgValue() internal view virtual returns (uint256) {\r\n        return msg.value;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n/// @title Ownable : Information about the founder of the contract and none-zero address modifier.\r\n// ----------------------------------------------------------------------------\r\nabstract contract Ownable is Context {\r\n    // Define public constant variables.\r\n    address payable public founder;\r\n    mapping(address => uint256) balances;\r\n\r\n    // Set values on construction.\r\n    constructor() {\r\n        founder = payable(_msgSender());\r\n    }\r\n    \r\n    /**\r\n     * @dev Triggers on any successful call to transferOwnership().\r\n     * @param _oldOwner : The address tranfering the ownership.\r\n     * @param _newOwner : The address gaining ownership.\r\n     */\r\n    event TransferOwnership(address _oldOwner, address _newOwner);\r\n    \r\n    /// @dev Makes a function callable only by the founder.\r\n    modifier onlyFounder() {\r\n        require(_msgSender() == founder, \"Your are not the Founder.\");\r\n        _;\r\n    }\r\n    \r\n    /// @dev Makes a function callable only when the _owner is not a zero-address.\r\n    modifier noneZero(address _owner){\r\n        require(_owner != address(0), \"Zero address not allowed.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers ownership of the contract to `_newOwner`.\r\n     * @notice Callable by the founder only.\r\n     * @notice Callable only by a none-zero address.\r\n     */\r\n    function transferOwnership(address payable _newOwner) \r\n    onlyFounder \r\n    noneZero(_newOwner) \r\n    public \r\n    returns (bool success) \r\n    {\r\n        // Check founder's balance.\r\n        uint256 founderBalance = balances[founder];\r\n        // Check new owner's balance.\r\n        uint256 newOwnerBalance = balances[_newOwner];\r\n        \r\n        // Set founder balance to 0.\r\n        balances[founder] = 0;\r\n        \r\n        // Add founder's old balance to the new owner's balance.\r\n        balances[_newOwner] = newOwnerBalance + founderBalance;\r\n        \r\n        // Transfer ownership from `founder` to the `_newOwner`.\r\n        founder = _newOwner;\r\n        \r\n        // Emit event\r\n        emit TransferOwnership(founder, _newOwner);\r\n        \r\n        // Returns true on success.\r\n        return true;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n/// @title Whitelisted : The ability to block evil users' transactions and to burn their tokens.\r\n// ----------------------------------------------------------------------------\r\nabstract contract Whitelisted is Ownable {\r\n    // Define public constant variables.\r\n    mapping (address => bool) public isWhitelisted;\r\n    \r\n    /**\r\n     * @dev Triggers on any successful call to burnWhiteTokens().\r\n     * @param _evilOwner : The address to burn tokens from.\r\n     * @param _dirtyTokens : The quantity of tokens burned.\r\n     */\r\n    event BurnWhiteTokens(address _evilOwner, uint256 _dirtyTokens);\r\n    \r\n    /**\r\n     * @dev Triggers on any successful call to addToWhitelist().\r\n     * @param _evilOwner : The address to add to whitelist.\r\n     */\r\n    event AddToWhitelist(address _evilOwner);\r\n    \r\n    /**\r\n     * @dev Triggers on any successful call to removedFromWhitelist().\r\n     * @param _owner : The address to remove from whitelist.\r\n     */\r\n    event RemovedFromWhitelist(address _owner);\r\n    \r\n    /// @dev Makes a function callable only when `_owner` is not whitelisted.\r\n    modifier whenNotWhitelisted(address _owner) {\r\n        require(isWhitelisted[_owner] == false, \"Whitelisted status detected; please check whitelisted status.\");\r\n        _;\r\n    }\r\n    \r\n    /// @dev Makes a function callable only when `_owner` is whitelisted.\r\n    modifier whenWhitelisted(address _owner) {\r\n        require(isWhitelisted[_owner] == true, \"Whitelisted status not detected; please check whitelisted status.\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @notice Adds `_evilOwner` to whitelist.\r\n     * @notice Callable only by the founder.\r\n     * @notice Callable only when `_evilOwner` is not whitelisted.\r\n     * @param _evilOwner : The address to whitelist.\r\n     * @return success\r\n     */\r\n    function addToWhitelist(address _evilOwner) \r\n    onlyFounder \r\n    whenNotWhitelisted(_evilOwner)\r\n    public \r\n    returns (bool success) \r\n    {\r\n        // Set whitelisted status\r\n        isWhitelisted[_evilOwner] = true;\r\n        \r\n        // Emit event\r\n        emit AddToWhitelist(_evilOwner);\r\n        \r\n        // Returns true on success.\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @notice Removes `_owner` from whitelist.\r\n     * @notice Callable only by the founder.\r\n     * @notice Callable only when `_owner` is whitelisted.\r\n     * @param _owner : The address to remove from whitelist.\r\n     * @return success\r\n     */\r\n    function removedFromWhitelist(address _owner) \r\n    onlyFounder \r\n    whenWhitelisted(_owner) \r\n    public \r\n    returns (bool success) \r\n    {\r\n        // Unset whitelisted status\r\n        isWhitelisted[_owner] = false;\r\n        \r\n        // Emit event\r\n        emit RemovedFromWhitelist(_owner);\r\n        \r\n        // Returns true on success.\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @notice Burns tokens of `_evilOwner`. \r\n     * @notice Callable only by the founder.\r\n     * @notice Callable only when `_evilOwner` is whitelisted.\r\n     * @param _evilOwner : The address to burn funds from.\r\n     * @return success\r\n     */\r\n    function burnWhiteTokens(address _evilOwner) \r\n    onlyFounder\r\n    whenWhitelisted(_evilOwner)\r\n    public\r\n    returns (bool success) {\r\n        // Check evil owner's balance - NOTE - Always check the balance first.\r\n        uint256 _dirtyTokens = balances[_evilOwner];\r\n        \r\n        // Set the evil owner balance to 0.\r\n        balances[_evilOwner] = 0;\r\n        // Send the dirty tokens to the founder for purification!\r\n        balances[founder] += _dirtyTokens;\r\n        \r\n        // Emit event\r\n        emit BurnWhiteTokens(_evilOwner, _dirtyTokens);\r\n        \r\n        // Returns true on success.\r\n        return true;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n/// @title Pausable: The ability to pause or unpause trasactions of all tokens.\r\n// ----------------------------------------------------------------------------\r\nabstract contract Pausable is Ownable {\r\n    // Define public constant variables.\r\n    bool public paused = false;\r\n    \r\n    /// @dev Triggers on any successful call to pause().    \r\n    event Pause();\r\n    \r\n    /// @dev Triggers on any successful call to unpause(). \r\n    event Unpause();\r\n\r\n    /// @dev Makes a function callable only when the contract is not paused.\r\n    modifier whenNotPaused() {\r\n        require(paused == false, \"All transactions have been paused.\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Makes a function callable only when the contract is paused.\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @notice Pauses transactions.\r\n     * @notice Callable only by the founder.\r\n     * @notice Callable only when the contract is not paused.\r\n     * @return success\r\n     */\r\n    function pause() public onlyFounder whenNotPaused returns (bool success) {\r\n        // Set pause\r\n        paused = true;\r\n        \r\n        // See {event Pause}\r\n        emit Pause();\r\n        \r\n        // Returns true on success.\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Unpauses transactions.\r\n     * @notice Callable only by the founder.\r\n     * @notice Callable only when the contract is paused.\r\n     * @return success\r\n     */\r\n    function unpause() public  onlyFounder whenPaused returns (bool success) {\r\n        // Unset pause\r\n        paused = false;\r\n        \r\n        // See {event Unpause}\r\n        emit Unpause();\r\n        \r\n        // Returns true on success.\r\n        return true;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n/// @title Deltin : ERC Token.\r\n// ----------------------------------------------------------------------------\r\ncontract Deltin is  ERC20Interface, Context, Ownable, Whitelisted, Pausable {\r\n    // Define public constant variables.\r\n    uint8 public decimals; // Number of decimals\r\n    string public name;    // Token name\r\n    string public symbol;  // Token symbol\r\n    uint256 public override totalSupply;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    \r\n    // Set immutable values.\r\n    constructor() {\r\n        name              = \"Deltin\";\r\n        decimals          = 18;\r\n        symbol            = \"DELT\";\r\n        totalSupply       = 110000000*10**18;\r\n        balances[founder] = totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers on any successful call to burn().\r\n     * @param _from : The address burning tokens.\r\n     * @param _to : The address tokens will be burned from.\r\n     * @param _amount : The quantity of tokes to be burned.\r\n     */\r\n    event Burn(address indexed _from, address indexed _to, uint256 _amount);\r\n    \r\n    /**\r\n     * @notice Changes token name to `_newName`.\r\n     * @notice Callable by the founder only.\r\n     * @notice Callable only by a none-zero address.\r\n     */\r\n    function changeTokenName(string memory _newName) \r\n    onlyFounder\r\n    public \r\n    returns (bool success) \r\n    {\r\n        // Change token name from `name` to the `_newName`.\r\n        name = _newName;\r\n        \r\n        // Returns true on success.\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @notice Changes token symbol to `_newSymbol`.\r\n     * @notice Callable by the founder only.\r\n     * @notice Callable only by a none-zero address.\r\n     */\r\n    function changeTokenSymbol(string memory _newSymbol) \r\n    onlyFounder\r\n    public \r\n    returns (bool success) \r\n    {\r\n        // Change token symbol from `symbol` to the `_newSymbol`.\r\n        symbol = _newSymbol;\r\n        \r\n        // Returns true on success.\r\n        return true;\r\n    }\r\n    \r\n    // See {_transfer} and {ERC20Interface - transfer}\r\n    function transfer(address _to, uint256 _amount) public virtual override returns (bool success) {\r\n        // Inherit from {_transfer}.\r\n        _transfer(_msgSender(), _to, _amount);\r\n        \r\n        // Returns true on success.\r\n        return true;\r\n    }\r\n    \r\n    // See {_transfer}, {_approve} and {ERC20Interface - transferFrom}\r\n    // @notice Execution cost recommended: 87,000 gas - 90,000 gas\r\n    function transferFrom(\r\n        address _from, \r\n        address _to, \r\n        uint256 _amount\r\n    ) public virtual override returns (bool success) {\r\n        // Inherits from _transfer.\r\n        _transfer(_from, _to, _amount);\r\n        \r\n        // Check sender's allowance.\r\n        // NOTE - Always check balances before transaction.\r\n        uint256 currentAllowance = allowed[_from][_msgSender()];\r\n        \r\n        // Inherits from _approve.\r\n        _approve(_from, _msgSender(), currentAllowance - _amount, currentAllowance); \r\n\r\n        // Returns true on success.\r\n        return true;\r\n    }\r\n\r\n    // See also {_approve} and {ERC20Interface - approve}\r\n    function approve(address _spender, uint256 _amount) public virtual override returns (bool success) {\r\n        // Inherits from _approve.\r\n        _approve(_msgSender(), _spender, _amount, balances[_msgSender()]);\r\n        \r\n        // Returns true on success.\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Increases total allowance to `_amount`.\r\n     * See also {_approve} and {ERC20Interface - approve}\r\n     */\r\n    function increaseAllowance(address _spender, uint256 _amount) public virtual returns (bool success) {\r\n        // Check spender's allowance.\r\n        // NOTE - Always check balances before transaction.\r\n        uint256 currentAllowance = allowed[_msgSender()][_spender];\r\n        \r\n        // Inherits from _approve.\r\n        _approve(_msgSender(), _spender, currentAllowance + _amount, balances[_msgSender()]);\r\n        \r\n        // Returns true on success.\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Decreases total allowance by `_amount`.\r\n     * See also {_approve} and {ERC20Interface - approve}\r\n     */\r\n    function decreaseAllowance(address _spender, uint256 _amount) public virtual returns (bool success) {\r\n        // Check sender's allowance balance.\r\n        // NOTE - Always check balances before transaction.\r\n        uint256 currentAllowance = allowed[_msgSender()][_spender];\r\n        \r\n        // Inherits from _approve.\r\n        _approve(_msgSender(), _spender, currentAllowance - _amount, currentAllowance);\r\n\r\n        // Returns true on success.\r\n        return true;\r\n    }  \r\n    \r\n    /**\r\n     * @notice See {ERC20Interface - transfer}. \r\n     * @notice MUST trigger Transfer event.\r\n     */\r\n    function _transfer( address _from, address _to, uint256 _amount)\r\n    noneZero(_from)\r\n    noneZero(_to)\r\n    whenNotWhitelisted(_from)\r\n    whenNotWhitelisted(_to)\r\n    whenNotPaused\r\n    internal \r\n    virtual \r\n    {\r\n        // Check sender's balance.\r\n        // NOTE - Always check balances before transaction.\r\n        uint256 senderBalance = balances[_from];\r\n        \r\n        /// @dev Requires the sender `senderBalance` balance be at least the `_amount`.\r\n        require(senderBalance >= _amount, \"The transfer amount exceeds balance.\");\r\n        \r\n        // Increase recipient balance.\r\n        balances[_to] += _amount;\r\n        // Decrease sender balance.\r\n        balances[_from] -= _amount;\r\n        \r\n        // See {event ERC20Interface-Transfer}\r\n        emit Transfer(_from, _to, _amount);\r\n    }\r\n    \r\n    /**\r\n     * @notice See {ERC20Interface - approve}\r\n     * @notice MUST trigger a Approval event.\r\n     */\r\n    function _approve( address _owner, address _spender, uint256 _amount, uint256 _initialBalance)\r\n    noneZero(_spender)\r\n    noneZero(_owner)\r\n    internal \r\n    virtual \r\n    {\r\n        /// @dev Requires the owner `_initialBalance` balance be at least the `_amount`.\r\n        require(_initialBalance >= _amount, \"Not enough balance.\");\r\n        \r\n        /// @dev Requires the `_amount` be at least 0 (zero).\r\n        require(_amount >= 0, \"The value is less than or zero!\");\r\n        \r\n        // Set spender allowance to the `_amount`.\r\n        allowed[_owner][_spender] = _amount;\r\n        \r\n        // See {event ERC20Interface-Approval}\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n\r\n    /**  \r\n     * @notice Decreases an address balance, and add to the total supply.\r\n     * @notice Callable only by the founder.\r\n     * @notice Callable only by a none-zero address.\r\n     * @param _owner : The address to burn or substract tokens from.\r\n     * @param _amount : The quantity of tokens to burn or destroy.\r\n     * @notice MUST trigger Burn event.\r\n     */\r\n    function burn(address _owner, uint256 _amount) \r\n    onlyFounder\r\n    public\r\n    virtual\r\n    returns (bool success)\r\n    {\r\n        // Check owner's balance.\r\n        // NOTE - Always check balance first before transaction.\r\n        uint256 accountBalance = balances[_owner];\r\n        \r\n        /// @dev Requires the owner's balance `accountBalance` be at least `_amount`.\r\n        require(accountBalance >= _amount, \"Burn amount exceeds balance\");\r\n        \r\n        // Decrease owner total supply.\r\n        balances[_owner] -= _amount;\r\n        // Decrease `totalSupply` by `_amount`.\r\n        totalSupply -= _amount;\r\n\r\n        // See {event Burn}\r\n        emit Burn(address(0), _owner, _amount);\r\n        \r\n        // Returns true on success.\r\n        return true;\r\n    }\r\n    \r\n    // See {ERC20Interface - balanceOf}\r\n    function balanceOf(address _owner) public view override returns (uint256 holdings) {\r\n        // Returns owner's token balance.\r\n        return balances[_owner];\r\n    }\r\n\r\n    // See {ERC20Interface - allowance}\r\n    function allowance(address _owner, address _spender) public view virtual override returns (uint256 remaining) {\r\n        // Returns spender's allowance balance.\r\n        return allowed[_owner][_spender];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_evilOwner\",\"type\":\"address\"}],\"name\":\"AddToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_evilOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dirtyTokens\",\"type\":\"uint256\"}],\"name\":\"BurnWhiteTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"RemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilOwner\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"holdings\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilOwner\",\"type\":\"address\"}],\"name\":\"burnWhiteTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"}],\"name\":\"changeTokenName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newSymbol\",\"type\":\"string\"}],\"name\":\"changeTokenSymbol\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removedFromWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Deltin", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5a98813edc586c7e55b489e17218445acf387bba5232c36abf85ac7d129ddfeb"}