{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// Sources flattened with hardhat v2.4.0 https://hardhat.org\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC20/IERC20.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/utils/Context.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/access/Ownable.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/utils/math/SafeMath.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File contracts/tokens/abstract/AbstractDeflationaryToken.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\nabstract contract AbstractDeflationaryToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256; // only for custom reverts on sub\r\n\r\n    mapping (address => uint256) internal _rOwned;\r\n    mapping (address => uint256) internal _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => uint256) internal _isExcludedFromFee;\r\n    mapping (address => uint256) internal _isExcludedFromReward;\r\n\r\n    uint256 private constant MAX = type(uint256).max;\r\n    uint256 private immutable _decimals;\r\n    uint256 internal immutable _tTotal; // real total supply\r\n    uint256 internal _tIncludedInReward;\r\n    uint256 internal _rTotal;\r\n    uint256 internal _rIncludedInReward;\r\n    uint256 internal _tFeeTotal;\r\n\r\n    uint256 public _taxHolderFee;\r\n\r\n    uint256 public _maxTxAmount;\r\n\r\n    string private _name; \r\n    string private _symbol;\r\n\r\n    constructor ( \r\n        string memory tName, \r\n        string memory tSymbol, \r\n        uint256 totalAmount,\r\n        uint256 tDecimals, \r\n        uint256 tTaxHolderFee, \r\n        uint256 maxTxAmount\r\n        ) {\r\n        _name = tName;\r\n        _symbol = tSymbol;\r\n        _tTotal = totalAmount;\r\n        _tIncludedInReward = totalAmount;\r\n        _rTotal = (MAX - (MAX % totalAmount));\r\n        _decimals = tDecimals;\r\n        _taxHolderFee = tTaxHolderFee;\r\n        _maxTxAmount = maxTxAmount != 0 ? maxTxAmount : type(uint256).max;\r\n\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        _rIncludedInReward = _rTotal;\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = 1;\r\n        _isExcludedFromFee[address(this)] = 1;\r\n\r\n        emit Transfer(address(0), _msgSender(), totalAmount);\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override virtual returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true; \r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) external view returns (bool) {\r\n        return _isExcludedFromReward[account] == 1;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) external view returns(bool) {\r\n        return _isExcludedFromFee[account] == 1;\r\n    }\r\n\r\n    function totalFees() external view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function deliver(uint256 tAmount) external {\r\n        address sender = _msgSender();\r\n        require(_isExcludedFromReward[sender] == 0, \"Forbidden for excluded addresses\");\r\n        \r\n        uint256 rAmount = tAmount * _getRate();\r\n        _tFeeTotal += tAmount;\r\n        _rOwned[sender] -= rAmount;\r\n        _rTotal -= rAmount;\r\n        _rIncludedInReward -= rAmount;\r\n    }\r\n\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = 1;\r\n    }\r\n\r\n    function includeInFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = 0;\r\n    }\r\n\r\n    function setTaxHolderFeePercent(uint256 taxHolderFee) external onlyOwner {\r\n        _taxHolderFee = taxHolderFee;\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner {\r\n        _maxTxAmount = _tTotal * maxTxPercent / 100;\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        require(_isExcludedFromReward[account] == 0, \"Account is already excluded\");\r\n        if(_rOwned[account] != 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n            _tIncludedInReward -= _tOwned[account];\r\n            _rIncludedInReward -= _rOwned[account];\r\n            _rOwned[account] = 0;\r\n            \r\n        }\r\n        _isExcludedFromReward[account] = 1;\r\n    }\r\n\r\n    function includeInReward(address account) public onlyOwner {\r\n        require(_isExcludedFromReward[account] == 1, \"Account is already included\");\r\n\r\n        _rOwned[account] = reflectionFromToken(_tOwned[account], false);\r\n        _rIncludedInReward += _rOwned[account];\r\n        _tIncludedInReward += _tOwned[account];\r\n        _tOwned[account] = 0;\r\n        _isExcludedFromReward[account] = 0;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcludedFromReward[account] == 1) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        uint256 rate = _getRate();\r\n        if (!deductTransferFee) {\r\n            return tAmount * rate;\r\n        } else {\r\n            uint256[] memory fees = _getFeesArray(tAmount, rate, true);\r\n            (, uint256 rTransferAmount) = _getTransferAmount(tAmount, fees[0], rate);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Can't exceed total reflections\");\r\n        return rAmount / _getRate();\r\n    }\r\n\r\n    function _reflectHolderFee(uint256 tFee, uint256 rFee)  internal {\r\n        if (tFee != 0) _tFeeTotal += tFee;\r\n        if (rFee != 0) {\r\n            _rTotal -= rFee;\r\n            _rIncludedInReward -= rFee;\r\n        }\r\n    }\r\n\r\n    function _getRate() internal view returns(uint256) {\r\n        uint256 rIncludedInReward = _rIncludedInReward; // gas savings\r\n\r\n        uint256 koeff = _rTotal / _tTotal;\r\n\r\n        if (rIncludedInReward < koeff) return koeff;\r\n        return rIncludedInReward / _tIncludedInReward;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _getFeesArray(uint256 tAmount, uint256 rate, bool takeFee) internal view virtual returns(uint256[] memory fees); \r\n\r\n    function _getTransferAmount(uint256 tAmount, uint256 totalFeesForTx, uint256 rate) internal virtual view\r\n    returns(uint256 tTransferAmount, uint256 rTransferAmount);\r\n\r\n    function _recalculateRewardPool(\r\n        bool isSenderExcluded, \r\n        bool isRecipientExcluded,\r\n        uint256[] memory fees,\r\n        uint256 tAmount,\r\n        uint256 rAmount,\r\n        uint256 tTransferAmount,\r\n        uint256 rTransferAmount) internal virtual;\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual;\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee, bool ignoreBalance) internal virtual;\r\n}\r\n\r\n\r\n// File contracts/tokens/abstract/AbstractBurnableDeflToken.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\nabstract contract AbstractBurnableDeflToken is AbstractDeflationaryToken {\r\n    uint256 public totalBurned;\r\n\r\n    function burn(uint256 amount) external {\r\n        require(balanceOf(_msgSender()) >= amount, 'Not enough tokens');\r\n        totalBurned += amount;\r\n\r\n        if(_isExcludedFromReward[_msgSender()] == 1) {\r\n            _tOwned[_msgSender()] -= amount;\r\n        }\r\n        else {\r\n            uint256 rate = _getRate();\r\n            _rOwned[_msgSender()] -= amount * rate;\r\n            _tIncludedInReward -= amount;\r\n            _rIncludedInReward -= amount * rate;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/tokens/abstract/AbstractAutoBurnableDeflToken.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\nabstract contract AbstractAutoBurnableDeflToken is AbstractBurnableDeflToken {\r\n    uint256 public burnFee;\r\n\r\n    function setBurnFee(uint256 newBurnFee) external onlyOwner {\r\n        burnFee = newBurnFee;\r\n    }\r\n\r\n    function _getTransferAmount(uint256 tAmount, uint256 totalFeesForTx, uint256 rate) \r\n    internal override virtual view \r\n    returns(uint256 tTransferAmount, uint256 rTransferAmount) {\r\n        if (totalFeesForTx != 0) {\r\n            tTransferAmount = tAmount - totalFeesForTx - tAmount * burnFee/100;\r\n        } else {\r\n            tTransferAmount = tAmount;\r\n        }\r\n        rTransferAmount = tTransferAmount * rate;\r\n    }\r\n\r\n    function _recalculateRewardPool(\r\n        bool isSenderExcluded, \r\n        bool isRecipientExcluded,\r\n        uint256[] memory fees,\r\n        uint256 tAmount,\r\n        uint256 rAmount,\r\n        uint256 tTransferAmount,\r\n        uint256 rTransferAmount) internal override virtual {\r\n\r\n        uint256 burned;\r\n        if (fees[0] != 0) {\r\n            burned = tAmount * burnFee/100;\r\n            totalBurned += burned;\r\n        }\r\n\r\n        if (isSenderExcluded) {\r\n            if (isRecipientExcluded) {\r\n                _tIncludedInReward += fees[0];\r\n                _rIncludedInReward += fees[1];  \r\n            } else {\r\n                \r\n                _tIncludedInReward += tAmount - burned;\r\n                _rIncludedInReward += rAmount - burned * (rAmount/tAmount);   \r\n                          \r\n            }\r\n        } else {\r\n            if (isRecipientExcluded) {\r\n                if (!isSenderExcluded) {\r\n                    _tIncludedInReward -= tTransferAmount;\r\n                    _rIncludedInReward -= rTransferAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n// File contracts/tokens/deflationalAutoLP/abstract/AbstractDeflationaryAutoLPToken.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\nabstract contract AbstractDeflationaryAutoLPToken is AbstractDeflationaryToken {\r\n   \r\n    uint256 public _liquidityFee;\r\n\r\n    address public liquidityOwner;\r\n    address public immutable poolAddress;\r\n\r\n    uint256 constant SWAP_AND_LIQUIFY_DISABLED = 0;\r\n    uint256 constant SWAP_AND_LIQUIFY_ENABLED = 1;\r\n    uint256 constant IN_SWAP_AND_LIQUIFY = 2;\r\n    uint256 LiqStatus;\r\n\r\n    uint256 private numTokensSellToAddToLiquidity;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event LiquidityOwnerChanged(address newLiquidityOwner);\r\n\r\n\r\n    modifier lockTheSwap {\r\n        LiqStatus = IN_SWAP_AND_LIQUIFY;\r\n        _;\r\n        LiqStatus = SWAP_AND_LIQUIFY_ENABLED;\r\n    }\r\n\r\n    constructor ( \r\n        string memory tName, \r\n        string memory tSymbol, \r\n        uint256 totalAmount,\r\n        uint256 tDecimals, \r\n        uint256 tTaxFee, \r\n        uint256 tLiquidityFee,\r\n        uint256 maxTxAmount,\r\n        uint256 _numTokensSellToAddToLiquidity,\r\n        bool _swapAndLiquifyEnabled,\r\n        address liquidityPoolAddress\r\n\r\n        ) AbstractDeflationaryToken(\r\n            tName,\r\n            tSymbol,\r\n            totalAmount,\r\n            tDecimals,\r\n            tTaxFee,\r\n            maxTxAmount\r\n        ) {\r\n        _liquidityFee = tLiquidityFee;\r\n        numTokensSellToAddToLiquidity = _numTokensSellToAddToLiquidity;\r\n\r\n        if (_swapAndLiquifyEnabled) {\r\n            LiqStatus = SWAP_AND_LIQUIFY_ENABLED;\r\n        }\r\n\r\n        liquidityOwner = _msgSender();\r\n        poolAddress = liquidityPoolAddress;\r\n    }\r\n\r\n    receive() external virtual payable {}\r\n\r\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner {\r\n        _liquidityFee = liquidityFee;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {\r\n        LiqStatus = _enabled ? 1 : 0;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function setLiquidityOwner(address newLiquidityOwner) external onlyOwner {\r\n        liquidityOwner = newLiquidityOwner;\r\n        emit LiquidityOwnerChanged(newLiquidityOwner);\r\n    }\r\n\r\n    function _takeLiquidity(uint256 tLiquidity, uint256 rate) internal {\r\n        if (tLiquidity == 0) return;\r\n        \r\n        if(_isExcludedFromReward[address(this)] == 1) {\r\n            _tOwned[address(this)] += tLiquidity;\r\n            _tIncludedInReward -= tLiquidity;\r\n            _rIncludedInReward -= tLiquidity * rate;\r\n        }\r\n        else {\r\n            _rOwned[address(this)] += tLiquidity * rate;\r\n        }\r\n    }\r\n    function _getTransferAmount(uint256 tAmount, uint256 totalFeesForTx, uint256 rate) internal virtual override view \r\n    returns(uint256 tTransferAmount, uint256 rTransferAmount) {\r\n        tTransferAmount = tAmount - totalFeesForTx;\r\n        rTransferAmount = tTransferAmount * rate;\r\n    }\r\n\r\n    function _recalculateRewardPool(\r\n        bool isSenderExcluded, \r\n        bool isRecipientExcluded,\r\n        uint256[] memory fees,\r\n        uint256 tAmount,\r\n        uint256 rAmount,\r\n        uint256 tTransferAmount,\r\n        uint256 rTransferAmount) internal virtual override{\r\n\r\n        if (isSenderExcluded) {\r\n            if (isRecipientExcluded) {\r\n                _tIncludedInReward += fees[0];\r\n                _rIncludedInReward += fees[1];  \r\n            } else {\r\n                _tIncludedInReward += tAmount;\r\n                _rIncludedInReward += rAmount;              \r\n            }\r\n        } else {\r\n            if (isRecipientExcluded) {\r\n                if (!isSenderExcluded) {\r\n                    _tIncludedInReward -= tTransferAmount;\r\n                    _rIncludedInReward -= rTransferAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n   \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount != 0, \"Transfer amount can't be zero\");\r\n\r\n        address __owner = owner();\r\n        if(from != __owner && to != __owner)\r\n            require(amount <= _maxTxAmount, \"Amount exceeds the maxTxAmount\");\r\n\r\n\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is uniswap pair.\r\n        uint256 _numTokensSellToAddToLiquidity = numTokensSellToAddToLiquidity; // gas savings\r\n        if (\r\n            balanceOf(address(this)) >= _numTokensSellToAddToLiquidity &&\r\n            _maxTxAmount >= _numTokensSellToAddToLiquidity &&\r\n            LiqStatus == SWAP_AND_LIQUIFY_ENABLED &&\r\n            from != poolAddress\r\n        ) {\r\n            //add liquidity\r\n            _swapAndLiquify(_numTokensSellToAddToLiquidity);\r\n        }\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        bool takeFee = _isExcludedFromFee[from] == 0 && _isExcludedFromFee[to] == 0;\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee, false);\r\n    }\r\n\r\n    function _swapAndLiquify(uint256 contractTokenBalance) internal virtual;\r\n\r\n    function _swapTokensForEth(uint256 tokenAmount) internal virtual;\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) internal virtual;\r\n    \r\n    function _getFeesArray(uint256 tAmount, uint256 rate, bool takeFee) internal view override virtual returns(uint256[] memory fees) {\r\n        fees = new uint256[](5);\r\n        if (takeFee) {\r\n            // Holders fee\r\n            fees[2] = tAmount * _taxHolderFee / 100; // t\r\n            fees[3] = fees[2] * rate;                // r\r\n\r\n            // liquidity fee\r\n            fees[4] = tAmount * _liquidityFee / 100; // t\r\n\r\n            // Total fees\r\n            fees[0] = fees[2] + fees[4];             // t\r\n            fees[1] = fees[3] + fees[4] * rate;      // r\r\n        }\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee, bool ignoreBalance)\r\n    internal override virtual {\r\n            \r\n        uint256 rate = _getRate();\r\n        uint256 rAmount = amount * rate;\r\n        uint256[] memory fees = _getFeesArray(amount, rate, takeFee);\r\n\r\n        (uint256 tTransferAmount, uint256 rTransferAmount) = _getTransferAmount(amount, fees[0], rate);\r\n\r\n        {\r\n            bool isSenderExcluded = _isExcludedFromReward[sender] == 1;\r\n            bool isRecipientExcluded = _isExcludedFromReward[recipient] == 1;\r\n\r\n            if (isSenderExcluded) {\r\n                _tOwned[sender] -= ignoreBalance ? 0 : amount;\r\n            } else {\r\n                _rOwned[sender] -= ignoreBalance ? 0 : rAmount;\r\n            }\r\n\r\n            if (isRecipientExcluded) {\r\n                _tOwned[recipient] += tTransferAmount;\r\n            } else {\r\n                _rOwned[recipient] += rTransferAmount;\r\n            }\r\n\r\n            if (!ignoreBalance) _recalculateRewardPool( \r\n                isSenderExcluded, \r\n                isRecipientExcluded, \r\n                fees,\r\n                amount, \r\n                rAmount,\r\n                tTransferAmount,\r\n                rTransferAmount);\r\n        }\r\n\r\n        _takeLiquidity(fees[4], rate);\r\n        _reflectHolderFee(fees[2], fees[3]);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/tokens/deflationalAutoLP/UniswapV2/DeflationaryAutoLPToken.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\ncontract DeflationaryAutoLPToken is AbstractDeflationaryAutoLPToken {\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address private immutable WETH;\r\n\r\n    constructor ( \r\n        string memory tName, \r\n        string memory tSymbol, \r\n        uint256 totalAmount,\r\n        uint256 tDecimals, \r\n        uint256 tTaxFee, \r\n        uint256 tLiquidityFee,\r\n        uint256 maxTxAmount,\r\n        uint256 _numTokensSellToAddToLiquidity,\r\n        bool _swapAndLiquifyEnabled,\r\n\r\n        address tUniswapV2Router\r\n        ) AbstractDeflationaryAutoLPToken (\r\n            tName,\r\n            tSymbol,\r\n            totalAmount,\r\n            tDecimals,\r\n            tTaxFee,\r\n            tLiquidityFee,\r\n            maxTxAmount,\r\n            _numTokensSellToAddToLiquidity,\r\n            _swapAndLiquifyEnabled,\r\n            IUniswapV2Factory(IUniswapV2Router02(tUniswapV2Router).factory())\r\n                .createPair(address(this), IUniswapV2Router02(tUniswapV2Router).WETH()) // Create a uniswap pair for this new token\r\n        ) {\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(tUniswapV2Router);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        WETH = _uniswapV2Router.WETH();\r\n    }\r\n\r\n    function withdrawStuckFunds() external onlyOwner {\r\n        // normally balance of contract always should be zero\r\n        // but slippage in _addLiquidity is possible\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    function _swapAndLiquify(uint256 contractTokenBalance) internal override lockTheSwap {\r\n        // split the contract balance into halves\r\n        uint256 half = contractTokenBalance / 2;\r\n        uint256 otherHalf = contractTokenBalance - half;\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 currentBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        _swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much ETH did we just swap into?\r\n        currentBalance = address(this).balance - currentBalance;\r\n\r\n        // add liquidity to uniswap\r\n        _addLiquidity(otherHalf, currentBalance);\r\n\r\n        emit SwapAndLiquify(half, currentBalance, otherHalf);\r\n    }\r\n\r\n    function _swapTokensForEth(uint256 tokenAmount) internal override {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) internal override {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            liquidityOwner,\r\n            block.timestamp\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// File contracts/tokens/deflationalAutoLP/UniswapV2/extensions/COVD$_constructed.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\ncontract COVD$ is DeflationaryAutoLPToken, AbstractAutoBurnableDeflToken {\r\n\r\n    constructor(\r\n        string memory tName, \r\n        string memory tSymbol, \r\n        uint256 totalAmount,\r\n        uint256 tDecimals, \r\n        uint256 tTaxFee, \r\n        uint256 tLiquidityFee,\r\n        uint256 maxTxAmount,\r\n        uint256 _numTokensSellToAddToLiquidity,\r\n        bool _swapAndLiquifyEnabled,\r\n        address tUniswapV2Router,\r\n        uint256 burnFeePercent\r\n    ) DeflationaryAutoLPToken(\r\n        tName,\r\n        tSymbol,\r\n        totalAmount,\r\n        tDecimals,\r\n        tTaxFee,\r\n        tLiquidityFee,\r\n        maxTxAmount,\r\n        _numTokensSellToAddToLiquidity,\r\n        _swapAndLiquifyEnabled,\r\n        tUniswapV2Router) {\r\n\r\n        burnFee = burnFeePercent;\r\n    }\r\n\r\n    function totalSupply() external view override returns(uint256) {\r\n        return _tTotal - totalBurned;\r\n    }\r\n\r\n    function _getTransferAmount(uint256 tAmount, uint256 totalFeesForTx, uint256 rate) \r\n    internal override(AbstractDeflationaryAutoLPToken, AbstractAutoBurnableDeflToken) view \r\n    returns(uint256 tTransferAmount, uint256 rTransferAmount) {\r\n        (tTransferAmount, rTransferAmount) = super._getTransferAmount(tAmount, totalFeesForTx, rate);\r\n    }\r\n\r\n    function _recalculateRewardPool(\r\n        bool isSenderExcluded, \r\n        bool isRecipientExcluded,\r\n        uint256[] memory fees,\r\n        uint256 tAmount,\r\n        uint256 rAmount,\r\n        uint256 tTransferAmount,\r\n        uint256 rTransferAmount) internal override(AbstractDeflationaryAutoLPToken, AbstractAutoBurnableDeflToken) {\r\n\r\n        super._recalculateRewardPool(\r\n            isSenderExcluded,\r\n            isRecipientExcluded,\r\n            fees,\r\n            tAmount,\r\n            rAmount,\r\n            tTransferAmount,\r\n            rTransferAmount\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tTaxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numTokensSellToAddToLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_swapAndLiquifyEnabled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"tUniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnFeePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLiquidityOwner\",\"type\":\"address\"}],\"name\":\"LiquidityOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxHolderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBurnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityOwner\",\"type\":\"address\"}],\"name\":\"setLiquidityOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxHolderFee\",\"type\":\"uint256\"}],\"name\":\"setTaxHolderFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "COVD$", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000010f0cf064dd5920000000000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c434f56494443525950544f2400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005434f564424000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bb0b5f842d12e0b17f34928da7bcca2dafb01ab8a9a3c7a9bdb35dcc1b9022ef"}