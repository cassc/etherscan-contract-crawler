{"SourceCode": "/*\r\n* \r\nCheems\r\n\r\nInitial Supply: 6 000 000 000 000 000 000 000 tokens\r\nMax Wallet: 3%\r\n\r\nTax: \r\n10% buy\r\n40% sell at launch, declining 5% every 30 mins\r\n\r\nhttps://t.me/cheemstokenbsc\r\n*\r\n*/\r\n\r\npragma solidity ^0.8.4;\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IPancakeERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getamountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getamountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getamountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getamountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n//Cheems Inu Contract /////////////\r\n\r\ncontract CheemsInu is IBEP20, Ownable\r\n{\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    \r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint256) private _sellLock;\r\n    mapping (address => uint256) private _buyLock;\r\n\r\n    EnumerableSet.AddressSet private _excluded;\r\n    EnumerableSet.AddressSet private _excludedFromSellLock;\r\n    EnumerableSet.AddressSet private _excludedFromBuyLock;\r\n    EnumerableSet.AddressSet private _excludedFromStaking;\r\n    //Token Info\r\n    string private constant _name = 'CHEEMSINU';\r\n    string private constant _symbol = '$CINU';\r\n    uint8 private constant _decimals = 9;\r\n    uint256 public constant InitialSupply= 6000000000000000000000 * 10**_decimals;//equals 500B tokens\r\n\r\n    //Divider for the MaxBalance based on circulating Supply (3%)\r\n    uint8 public constant BalanceLimitDivider=34;\r\n    //Divider for sellLimit based on circulating Supply (1%))\r\n    uint16 public constant SellLimitDivider=100;\r\n    //Sellers get locked for MaxSellLockTime (put in seconds, works better especially if changing later) so they can't dump repeatedly\r\n    uint16 public constant MaxSellLockTime= 0 seconds;\r\n\t//Buyers get locked for MaxBuyLockTime (put in seconds, works better especially if changing later) so they can't buy repeatedly\r\n    uint16 public constant MaxBuyLockTime= 0 seconds;\r\n    //The time Liquidity gets locked at start and prolonged once it gets released\r\n    uint256 private constant DefaultLiquidityLockTime= 1800;\r\n    //DevWallets\r\n    address public TeamWallet=payable(0xC5e1a2854178b152b239068F4DC8d53cC34f26c7);\r\n    address public walletTwo=payable(0x653b82418a8Af3D701C9576d889048f3cbe5e0E9);\r\n    //TestNet\r\n    //address private constant PancakeRouter=0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\r\n    //MainNet\r\n    address private constant PancakeRouter=0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    //variables that track balanceLimit and sellLimit,\r\n    //can be updated based on circulating supply and Sell- and BalanceLimitDividers\r\n    uint256 private _circulatingSupply =InitialSupply;\r\n    uint256 public  balanceLimit = _circulatingSupply;\r\n    uint256 public  sellLimit = _circulatingSupply;\r\n\tuint256 private antiWhale = 60000000000000000000 * 10**_decimals;\r\n    \r\n    //Tracks the current Taxes, different Taxes can be applied for buy/sell/transfer\r\n    uint8 private _buyTax;\r\n    uint8 private _sellTax;\r\n    uint8 private _transferTax;\r\n\r\n    uint8 private _burnTax;\r\n    uint8 private _liquidityTax;\r\n    uint8 private _stakingTax;\r\n\r\n       \r\n    address private _pancakePairAddress; \r\n    IPancakeRouter02 private  _pancakeRouter;\r\n    \r\n    //Checks if address is in Team, is needed to give Team access even if contract is renounced\r\n    //Team doesn't have access to critical Functions that could turn this into a Rugpull(Exept liquidity unlocks)\r\n    function _isTeam(address addr) private view returns (bool){\r\n        return addr==owner()||addr==TeamWallet||addr==walletTwo;\r\n    }\r\n\r\n    //Constructor///////////\r\n\r\n    constructor () {\r\n        //contract creator gets 90% of the token to create LP-Pair\r\n        uint256 deployerBalance=_circulatingSupply;\r\n        _balances[msg.sender] = deployerBalance;\r\n        emit Transfer(address(0), msg.sender, deployerBalance);\r\n        // Pancake Router\r\n        _pancakeRouter = IPancakeRouter02(PancakeRouter);\r\n        //Creates a Pancake Pair\r\n        _pancakePairAddress = IPancakeFactory(_pancakeRouter.factory()).createPair(address(this), _pancakeRouter.WETH());\r\n        \r\n        //Sets Buy/Sell limits\r\n        balanceLimit=InitialSupply/BalanceLimitDivider;\r\n        sellLimit=InitialSupply/SellLimitDivider;\r\n\r\n\t\t//Sets sellLockTime\r\n        sellLockTime=0;\r\n\t\t\r\n\t\t//Sets buyLockTime\r\n        buyLockTime=0;\r\n\r\n        //Set Starting Tax \r\n        \r\n        _buyTax=10;\r\n        _sellTax=40;\r\n        _transferTax=40;\r\n\r\n        _burnTax=0;\r\n        _liquidityTax=40;\r\n        _stakingTax=60;\r\n\r\n        //Team wallets and deployer are excluded from Taxes\r\n        _excluded.add(TeamWallet);\r\n        _excluded.add(walletTwo);\r\n        _excluded.add(msg.sender);\r\n        //excludes Pancake Router, pair, contract and burn address from staking\r\n        _excludedFromStaking.add(address(_pancakeRouter));\r\n        _excludedFromStaking.add(_pancakePairAddress);\r\n        _excludedFromStaking.add(address(this));\r\n        _excludedFromStaking.add(0x000000000000000000000000000000000000dEaD);\r\n    \r\n    }\r\n\r\n    //Transfer functionality///\r\n\r\n    //transfer function, every transfer runs through this function\r\n    function _transfer(address sender, address recipient, uint256 amount) private{\r\n        require(sender != address(0), \"Transfer from zero\");\r\n        require(recipient != address(0), \"Transfer to zero\");\r\n        \r\n        //Manually Excluded adresses are transfering tax and lock free\r\n        bool isExcluded = (_excluded.contains(sender) || _excluded.contains(recipient));\r\n        \r\n        //Transactions from and to the contract are always tax and lock free\r\n        bool isContractTransfer=(sender==address(this) || recipient==address(this));\r\n        \r\n        //transfers between PancakeRouter and PancakePair are tax and lock free\r\n        address pancakeRouter=address(_pancakeRouter);\r\n        bool isLiquidityTransfer = ((sender == _pancakePairAddress && recipient == pancakeRouter) \r\n        || (recipient == _pancakePairAddress && sender == pancakeRouter));\r\n\r\n        //differentiate between buy/sell/transfer to apply different taxes/restrictions\r\n        bool isBuy=sender==_pancakePairAddress|| sender == pancakeRouter;\r\n        bool isSell=recipient==_pancakePairAddress|| recipient == pancakeRouter;\r\n\r\n        //Pick transfer\r\n        if(isContractTransfer || isLiquidityTransfer || isExcluded){\r\n            _feelessTransfer(sender, recipient, amount);\r\n        }\r\n        else{ \r\n            //once trading is enabled, it can't be turned off again\r\n            require(tradingEnabled,\"trading not yet enabled\");\r\n            _taxedTransfer(sender,recipient,amount,isBuy,isSell);\r\n        }\r\n    }\r\n    //applies taxes, checks for limits, locks generates autoLP and stakingBNB, and autostakes\r\n    function _taxedTransfer(address sender, address recipient, uint256 amount,bool isBuy,bool isSell) private{\r\n        uint256 recipientBalance = _balances[recipient];\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"Transfer exceeds balance\");\r\n\r\n        uint8 tax;\r\n        if(isSell){\r\n            if(!_excludedFromSellLock.contains(sender)){\r\n                 //If seller sold less than sellLockTime(2h 50m) ago, sell is declined, can be disabled by Team         \r\n                require(_sellLock[sender]<=block.timestamp||sellLockDisabled,\"Seller in sellLock\");\r\n                //Sets the time sellers get locked(2 hours 50 mins by default)\r\n                _sellLock[sender]=block.timestamp+sellLockTime;\r\n            }\r\n            //Sells can't exceed the sell limit(21,000 Tokens at start, can be updated to circulating supply)\r\n            require(amount<=sellLimit,\"Dump protection\");\r\n            tax=_sellTax;\r\n\r\n\r\n        } else if(isBuy){\r\n\t\t\tif(!_excludedFromBuyLock.contains(recipient)){\r\n                 //If buyer bought less than buyLockTime(2h 50m) ago, buy is declined, can be disabled by Team         \r\n                require(_buyLock[recipient]<=block.timestamp||buyLockDisabled,\"Buyer in buyLock\");\r\n                //Sets the time buyers get locked(2 hours 50 mins by default)\r\n                _buyLock[recipient]=block.timestamp+buyLockTime;\r\n            }\r\n            //Checks If the recipient balance(excluding Taxes) would exceed Balance Limit\r\n            require(recipientBalance+amount<=balanceLimit,\"whale protection\");\r\n\t\t\trequire(amount <= antiWhale,\"Tx amount exceeding max buy amount\");\r\n            tax=_buyTax;\r\n\r\n        } else {//Transfer\r\n            //withdraws BNB when sending less or equal to 1 Token\r\n            //that way you can withdraw without connecting to any dApp.\r\n            //might needs higher gas limit\r\n            if(amount<=10**(_decimals)) claim(sender);\r\n            //Checks If the recipient balance(excluding Taxes) would exceed Balance Limit\r\n            require(recipientBalance+amount<=balanceLimit,\"whale protection\");\r\n            //Transfers are disabled in sell lock, this doesn't stop someone from transfering before\r\n            //selling, but there is no satisfying solution for that, and you would need to pax additional tax\r\n            if(!_excludedFromSellLock.contains(sender))\r\n                require(_sellLock[sender]<=block.timestamp||sellLockDisabled,\"Sender in Lock\");\r\n            tax=_transferTax;\r\n\r\n        }     \r\n        //Swapping AutoLP and MarketingBNB is only possible if sender is not pancake pair, \r\n        //if its not manually disabled, if its not already swapping and if its a Sell to avoid\r\n        // people from causing a large price impact from repeatedly transfering when theres a large backlog of Tokens\r\n        if((sender!=_pancakePairAddress)&&(!manualConversion)&&(!_isSwappingContractModifier)&&isSell)\r\n            _swapContractToken();\r\n        //Calculates the exact token amount for each tax\r\n        uint256 tokensToBeBurnt=_calculateFee(amount, tax, _burnTax);\r\n        //staking and liquidity Tax get treated the same, only during conversion they get split\r\n        uint256 contractToken=_calculateFee(amount, tax, _stakingTax+_liquidityTax);\r\n        //Subtract the Taxed Tokens from the amount\r\n        uint256 taxedAmount=amount-(tokensToBeBurnt + contractToken);\r\n\r\n        //Removes token and handles staking\r\n        _removeToken(sender,amount);\r\n        \r\n        //Adds the taxed tokens to the contract wallet\r\n        _balances[address(this)] += contractToken;\r\n        //Burns tokens\r\n        _circulatingSupply-=tokensToBeBurnt;\r\n\r\n        //Adds token and handles staking\r\n        _addToken(recipient, taxedAmount);\r\n        \r\n        emit Transfer(sender,recipient,taxedAmount);\r\n\r\n    }\r\n\r\n    //Feeless transfer only transfers and autostakes\r\n    function _feelessTransfer(address sender, address recipient, uint256 amount) private{\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"Transfer exceeds balance\");\r\n        //Removes token and handles staking\r\n        _removeToken(sender,amount);\r\n        //Adds token and handles staking\r\n        _addToken(recipient, amount);\r\n        \r\n        emit Transfer(sender,recipient,amount);\r\n\r\n    }\r\n    //Calculates the token that should be taxed\r\n    function _calculateFee(uint256 amount, uint8 tax, uint8 taxPercent) private pure returns (uint256) {\r\n        return (amount*tax*taxPercent) / 10000;\r\n    }\r\n\r\n     //BNB Autostake/////////////////////////////////////////////////////////////////////////////////////////\r\n       //Autostake uses the balances of each holder to redistribute auto generated BNB.\r\n    //Each transaction _addToken and _removeToken gets called for the transaction amount\r\n    //WithdrawBNB can be used for any holder to withdraw BNB at any time, like true Staking,\r\n    //so unlike MRAT clones you can leave and forget your Token and claim after a while\r\n\r\n    //lock for the withdraw\r\n    bool private _isWithdrawing;\r\n    //Multiplier to add some accuracy to profitPerShare\r\n    uint256 private constant DistributionMultiplier = 2**64;\r\n    //profit for each share a holder holds, a share equals a token.\r\n    uint256 public profitPerShare;\r\n    //the total reward distributed through staking, for tracking purposes\r\n    uint256 public totalStakingReward;\r\n    //the total payout through staking, for tracking purposes\r\n    uint256 public totalPayouts;\r\n    \r\n  \r\n    uint8 public marketingShare=100;\r\n    //balance that is claimable by the team\r\n    uint256 public marketingBalance;\r\n\r\n    //Mapping of the already paid out(or missed) shares of each staker\r\n    mapping(address => uint256) private alreadyPaidShares;\r\n    //Mapping of shares that are reserved for payout\r\n    mapping(address => uint256) private toBePaid;\r\n\r\n    //Contract, pancake and burnAddress are excluded, other addresses like CEX\r\n    //can be manually excluded, excluded list is limited to 30 entries to avoid a\r\n    //out of gas exeption during sells\r\n    function isExcludedFromStaking(address addr) public view returns (bool){\r\n        return _excludedFromStaking.contains(addr);\r\n    }\r\n\r\n    //Total shares equals circulating supply minus excluded Balances\r\n    function _getTotalShares() public view returns (uint256){\r\n        uint256 shares=_circulatingSupply;\r\n        //substracts all excluded from shares, excluded list is limited to 30\r\n        // to avoid creating a Honeypot through OutOfGas exeption\r\n        for(uint i=0; i<_excludedFromStaking.length(); i++){\r\n            shares-=_balances[_excludedFromStaking.at(i)];\r\n        }\r\n        return shares;\r\n    }\r\n\r\n    //adds Token to balances, adds new BNB to the toBePaid mapping and resets staking\r\n    function _addToken(address addr, uint256 amount) private {\r\n        //the amount of token after transfer\r\n        uint256 newAmount=_balances[addr]+amount;\r\n        \r\n        if(isExcludedFromStaking(addr)){\r\n           _balances[addr]=newAmount;\r\n           return;\r\n        }\r\n        \r\n        //gets the payout before the change\r\n        uint256 payment=_newDividentsOf(addr);\r\n        //resets dividents to 0 for newAmount\r\n        alreadyPaidShares[addr] = profitPerShare * newAmount;\r\n        //adds dividents to the toBePaid mapping\r\n        toBePaid[addr]+=payment; \r\n        //sets newBalance\r\n        _balances[addr]=newAmount;\r\n    }\r\n    \r\n    \r\n    //removes Token, adds BNB to the toBePaid mapping and resets staking\r\n    function _removeToken(address addr, uint256 amount) private {\r\n        //the amount of token after transfer\r\n        uint256 newAmount=_balances[addr]-amount;\r\n        \r\n        if(isExcludedFromStaking(addr)){\r\n           _balances[addr]=newAmount;\r\n           return;\r\n        }\r\n        \r\n        //gets the payout before the change\r\n        uint256 payment=_newDividentsOf(addr);\r\n        //sets newBalance\r\n        _balances[addr]=newAmount;\r\n        //resets dividents to 0 for newAmount\r\n        alreadyPaidShares[addr] = profitPerShare * newAmount;\r\n        //adds dividents to the toBePaid mapping\r\n        toBePaid[addr]+=payment; \r\n    }\r\n    \r\n    \r\n    //gets the not dividents of a staker that aren't in the toBePaid mapping \r\n    //returns wrong value for excluded accounts\r\n    function _newDividentsOf(address staker) private view returns (uint256) {\r\n        uint256 fullPayout = profitPerShare * _balances[staker];\r\n        // if theres an overflow for some unexpected reason, return 0, instead of \r\n        // an exeption to still make trades possible\r\n        if(fullPayout<alreadyPaidShares[staker]) return 0;\r\n        return (fullPayout - alreadyPaidShares[staker]) / DistributionMultiplier;\r\n    }\r\n\r\n    //distributes bnb between marketing share and dividents \r\n    function _distributeStake(uint256 BNBamount) private {\r\n        // Deduct marketing Tax\r\n        uint256 marketingSplit = (BNBamount * marketingShare) / 100;\r\n        uint256 amount = BNBamount - marketingSplit;\r\n\r\n       marketingBalance+=marketingSplit;\r\n       \r\n        if (amount > 0) {\r\n            totalStakingReward += amount;\r\n            uint256 totalShares=_getTotalShares();\r\n            //when there are 0 shares, add everything to marketing budget\r\n            if (totalShares == 0) {\r\n                marketingBalance += amount;\r\n            }else{\r\n                //Increases profit per share based on current total shares\r\n                profitPerShare += ((amount * DistributionMultiplier) / totalShares);\r\n            }\r\n        }\r\n    }\r\n    event OnWithdrawXRP(uint256 amount, address recipient);\r\n    \r\n    //withdraws all dividents of address\r\n    function claim(address addr) private{\r\n        require(!_isWithdrawing);\r\n        _isWithdrawing=true;\r\n        uint256 amount;\r\n        if(isExcludedFromStaking(addr)){\r\n            //if excluded just withdraw remaining toBePaid BNB\r\n            amount=toBePaid[addr];\r\n            toBePaid[addr]=0;\r\n        }\r\n        else{\r\n            uint256 newAmount=_newDividentsOf(addr);\r\n            //sets payout mapping to current amount\r\n            alreadyPaidShares[addr] = profitPerShare * _balances[addr];\r\n            //the amount to be paid \r\n            amount=toBePaid[addr]+newAmount;\r\n            toBePaid[addr]=0;\r\n        }\r\n        if(amount==0){//no withdraw if 0 amount\r\n            _isWithdrawing=false;\r\n            return;\r\n        }\r\n        totalPayouts+=amount;\r\n        address[] memory path = new address[](2);\r\n        path[0] = _pancakeRouter.WETH(); //BNB\r\n        path[1] = 0x1D2F0da169ceB9fC7B3144628dB156f3F6c60dBE;  //Binance-Peg XRP Token\r\n\r\n        _pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n        0,\r\n        path,\r\n        addr,\r\n        block.timestamp);\r\n        \r\n        emit OnWithdrawXRP(amount, addr);\r\n        _isWithdrawing=false;\r\n    }\r\n\r\n    //Swap Contract Tokens//////////////////////////////////////////////////////////////////////////////////\r\n\r\n    //tracks auto generated BNB, useful for ticker etc\r\n    uint256 public totalLPBNB;\r\n    //Locks the swap if already swapping\r\n    bool private _isSwappingContractModifier;\r\n    modifier lockTheSwap {\r\n        _isSwappingContractModifier = true;\r\n        _;\r\n        _isSwappingContractModifier = false;\r\n    }\r\n\r\n    //swaps the token on the contract for Marketing BNB and LP Token.\r\n    //always swaps the sellLimit of token to avoid a large price impact\r\n    function _swapContractToken() private lockTheSwap{\r\n        uint256 contractBalance=_balances[address(this)];\r\n        uint16 totalTax=_liquidityTax+_stakingTax;\r\n        uint256 tokenToSwap = 15000000000000000000 * 10**_decimals;\r\n        //only swap if contractBalance is larger than tokenToSwap, and totalTax is unequal to 0\r\n        if(contractBalance<tokenToSwap||totalTax==0){\r\n            return;\r\n        }\r\n        //splits the token in TokenForLiquidity and tokenForMarketing\r\n        uint256 tokenForLiquidity=(tokenToSwap*_liquidityTax)/totalTax;\r\n        uint256 tokenForMarketing= tokenToSwap-tokenForLiquidity;\r\n\r\n        //splits tokenForLiquidity in 2 halves\r\n        uint256 liqToken=tokenForLiquidity/2;\r\n        uint256 liqBNBToken=tokenForLiquidity-liqToken;\r\n\r\n        //swaps marktetingToken and the liquidity token half for BNB\r\n        uint256 swapToken=liqBNBToken+tokenForMarketing;\r\n        //Gets the initial BNB balance, so swap won't touch any staked BNB\r\n        uint256 initialBNBBalance = address(this).balance;\r\n        _swapTokenForBNB(swapToken);\r\n        uint256 newBNB=(address(this).balance - initialBNBBalance);\r\n        //calculates the amount of BNB belonging to the LP-Pair and converts them to LP\r\n        uint256 liqBNB = (newBNB*liqBNBToken)/swapToken;\r\n        _addLiquidity(liqToken, liqBNB);\r\n        //Get the BNB balance after LP generation to get the\r\n        //exact amount of token left for Staking\r\n        uint256 distributeBNB=(address(this).balance - initialBNBBalance);\r\n        //distributes remaining BNB between stakers and Marketing\r\n        _distributeStake(distributeBNB);\r\n    }\r\n    //swaps tokens on the contract for BNB\r\n    function _swapTokenForBNB(uint256 amount) private {\r\n        _approve(address(this), address(_pancakeRouter), amount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _pancakeRouter.WETH();\r\n\r\n        _pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    //Adds Liquidity directly to the contract where LP are locked(unlike safemoon forks, that transfer it to the owner)\r\n    function _addLiquidity(uint256 tokenamount, uint256 bnbamount) private {\r\n        totalLPBNB+=bnbamount;\r\n        _approve(address(this), address(_pancakeRouter), tokenamount);\r\n        _pancakeRouter.addLiquidityETH{value: bnbamount}(\r\n            address(this),\r\n            tokenamount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //public functions /////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function getLiquidityReleaseTimeInSeconds() public view returns (uint256){\r\n        if(block.timestamp<_liquidityUnlockTime){\r\n            return _liquidityUnlockTime-block.timestamp;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getBurnedTokens() public view returns(uint256){\r\n        return (InitialSupply-_circulatingSupply)/10**_decimals;\r\n    }\r\n\r\n    function getLimits() public view returns(uint256 balance, uint256 sell){\r\n        return(balanceLimit/10**_decimals, sellLimit/10**_decimals);\r\n    }\r\n\r\n    function getTaxes() public view returns(uint256 burnTax,uint256 liquidityTax,uint256 marketingTax, uint256 buyTax, uint256 sellTax, uint256 transferTax){\r\n        return (_burnTax,_liquidityTax,_stakingTax,_buyTax,_sellTax,_transferTax);\r\n    }\r\n\r\n    //How long is a given address still locked from selling\r\n    function getAddressSellLockTimeInSeconds(address AddressToCheck) public view returns (uint256){\r\n       uint256 lockTime=_sellLock[AddressToCheck];\r\n       if(lockTime<=block.timestamp)\r\n       {\r\n           return 0;\r\n       }\r\n       return lockTime-block.timestamp;\r\n    }\r\n    function getSellLockTimeInSeconds() public view returns(uint256){\r\n        return sellLockTime;\r\n    }\r\n\t\r\n    //How long is a given address still locked from buying\r\n\tfunction getAddressBuyLockTimeInSeconds(address AddressToCheck) public view returns (uint256){\r\n       uint256 lockTime=_buyLock[AddressToCheck];\r\n       if(lockTime<=block.timestamp)\r\n       {\r\n           return 0;\r\n       }\r\n       return lockTime-block.timestamp;\r\n    }\r\n    function getBuyLockTimeInSeconds() public view returns(uint256){\r\n        return buyLockTime;\r\n    }\r\n    \r\n    //Functions every wallet can call\r\n    //Resets sell lock of caller to the default sellLockTime should something go very wrong\r\n    function AddressResetSellLock() public{\r\n        _sellLock[msg.sender]=block.timestamp+sellLockTime;\r\n    }\r\n\t\r\n\t//Resets buy lock of caller to the default buyLockTime should something go very wrong\r\n    function AddressResetBuyLock() public{\r\n        _buyLock[msg.sender]=block.timestamp+buyLockTime;\r\n\t\r\n    }\r\n    function getDividents(address addr) public view returns (uint256){\r\n        if(isExcludedFromStaking(addr)) return toBePaid[addr];\r\n        return _newDividentsOf(addr)+toBePaid[addr];\r\n    }\r\n\r\n    //Settings//////////////////////////////////////////////////////////////////////////////////////////////\r\n \r\n    bool public sellLockDisabled;\r\n    uint256 public sellLockTime;\r\n\tbool public buyLockDisabled;\r\n    uint256 public buyLockTime;\r\n    bool public manualConversion; \r\n\r\n    function TeamWithdrawALLMarketingBNB() public onlyOwner{\r\n        uint256 amount=marketingBalance;\r\n        marketingBalance=0;\r\n        payable(TeamWallet).transfer((amount*75) / 100);\r\n        payable(walletTwo).transfer((amount*25) / 100);\r\n    } \r\n    function TeamWithdrawXMarketingBNB(uint256 amount) public onlyOwner{\r\n        require(amount<=marketingBalance);\r\n        marketingBalance-=amount;\r\n        payable(TeamWallet).transfer((amount*75) / 100);\r\n        payable(walletTwo).transfer((amount*25) / 100);\r\n    } \r\n\r\n    //switches autoLiquidity and marketing BNB generation during transfers\r\n    function TeamSwitchManualBNBConversion(bool manual) public onlyOwner{\r\n        manualConversion=manual;\r\n    }\r\n\t\r\n\tfunction TeamChangeAntiWhale(uint256 newAntiWhale) public onlyOwner{\r\n      antiWhale=newAntiWhale * 10**_decimals;\r\n    }\r\n    \r\n    function TeamChangeTeamWallet(address newTeamWallet) public onlyOwner{\r\n      TeamWallet=payable(newTeamWallet);\r\n    }\r\n    \r\n    function TeamChangeWalletTwo(address newWalletTwo) public onlyOwner{\r\n      walletTwo=payable(newWalletTwo);\r\n    }\r\n\r\n    //Disables the timeLock after selling for everyone\r\n    function TeamDisableSellLock(bool disabled) public onlyOwner{\r\n        sellLockDisabled=disabled;\r\n    }\r\n\t\r\n\t//Disables the timeLock after buying for everyone\r\n    function TeamDisableBuyLock(bool disabled) public onlyOwner{\r\n        buyLockDisabled=disabled;\r\n    }\r\n\r\n    //Sets SellLockTime, needs to be lower than MaxSellLockTime\r\n    function TeamSetSellLockTime(uint256 sellLockSeconds)public onlyOwner{\r\n            require(sellLockSeconds<=MaxSellLockTime,\"Sell Lock time too high\");\r\n            sellLockTime=sellLockSeconds;\r\n    } \r\n\t\r\n\t//Sets BuyLockTime, needs to be lower than MaxBuyLockTime\r\n    function TeamSetBuyLockTime(uint256 buyLockSeconds)public onlyOwner{\r\n            require(buyLockSeconds<=MaxBuyLockTime,\"Buy Lock time too high\");\r\n            buyLockTime=buyLockSeconds;\r\n    } \r\n    \r\n    //Allows wallet exclusion to be added after launch\r\n    function AddWalletExclusion(address exclusionAdd) public onlyOwner{\r\n        _excluded.add(exclusionAdd);\r\n    }\r\n    \r\n    //Sets Taxes, is limited by MaxTax(20%) to make it impossible to create honeypot\r\n    function TeamSetTaxes(uint8 burnTaxes, uint8 liquidityTaxes, uint8 stakingTaxes,uint8 buyTax, uint8 sellTax, uint8 transferTax) public onlyOwner{\r\n        uint8 totalTax=burnTaxes+liquidityTaxes+stakingTaxes;\r\n        require(totalTax==100, \"burn+liq+marketing needs to equal 100%\");\r\n\r\n        _burnTax=burnTaxes;\r\n        _liquidityTax=liquidityTaxes;\r\n        _stakingTax=stakingTaxes;\r\n        \r\n        _buyTax=buyTax;\r\n        _sellTax=sellTax;\r\n        _transferTax=transferTax;\r\n    }\r\n\r\n    //How much of the staking tax should be allocated for marketing\r\n    function TeamChangeMarketingShare(uint8 newShare) public onlyOwner{\r\n        require(newShare<=100); \r\n        marketingShare=newShare;\r\n    }\r\n    //manually converts contract token to LP and staking BNB\r\n    function TeamCreateLPandBNB() public onlyOwner{\r\n    _swapContractToken();\r\n    }\r\n    \r\n     //Limits need to be at least target, to avoid setting value to 0(avoid potential Honeypot)\r\n    function TeamUpdateLimits(uint256 newBalanceLimit, uint256 newSellLimit) public onlyOwner{\r\n        //SellLimit needs to be below 1% to avoid a Large Price impact when generating auto LP\r\n        require(newSellLimit<_circulatingSupply/100);\r\n        //Adds decimals to limits\r\n        newBalanceLimit=newBalanceLimit*10**_decimals;\r\n        newSellLimit=newSellLimit*10**_decimals;\r\n        //Calculates the target Limits based on supply\r\n        uint256 targetBalanceLimit=_circulatingSupply/BalanceLimitDivider;\r\n        uint256 targetSellLimit=_circulatingSupply/SellLimitDivider;\r\n\r\n        require((newBalanceLimit>=targetBalanceLimit), \r\n        \"newBalanceLimit needs to be at least target\");\r\n        require((newSellLimit>=targetSellLimit), \r\n        \"newSellLimit needs to be at least target\");\r\n\r\n        balanceLimit = newBalanceLimit;\r\n        sellLimit = newSellLimit;     \r\n    }\r\n\r\n    \r\n    //Setup Functions///////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    bool public tradingEnabled;\r\n    address private _liquidityTokenAddress;\r\n    //Enables trading for everyone\r\n    function SetupEnableTrading() public onlyOwner{\r\n        tradingEnabled=true;\r\n    }\r\n    //Sets up the LP-Token Address required for LP Release\r\n    function SetupLiquidityTokenAddress(address liquidityTokenAddress) public onlyOwner{\r\n        _liquidityTokenAddress=liquidityTokenAddress;\r\n    }\r\n\r\n    //Liquidity Lock////////////////////////////////////////////////////////////////////////////////////////\r\n    //the timestamp when Liquidity unlocks\r\n    uint256 private _liquidityUnlockTime;\r\n\r\n    function TeamUnlockLiquidityInSeconds(uint256 secondsUntilUnlock) public onlyOwner{\r\n        _prolongLiquidityLock(secondsUntilUnlock+block.timestamp);\r\n    }\r\n    function _prolongLiquidityLock(uint256 newUnlockTime) private{\r\n        // require new unlock time to be longer than old one\r\n        require(newUnlockTime>_liquidityUnlockTime);\r\n        _liquidityUnlockTime=newUnlockTime;\r\n    }\r\n\r\n    //Release Liquidity Tokens once unlock time is over\r\n    function TeamReleaseLiquidity() public onlyOwner {\r\n        //Only callable if liquidity Unlock time is over\r\n        require(block.timestamp >= _liquidityUnlockTime, \"Not yet unlocked\");\r\n        \r\n        IPancakeERC20 liquidityToken = IPancakeERC20(_liquidityTokenAddress);\r\n        uint256 amount = liquidityToken.balanceOf(address(this));\r\n\r\n        //Liquidity release if something goes wrong at start\r\n        liquidityToken.transfer(TeamWallet, amount);\r\n        \r\n    }\r\n    //Removes Liquidity once unlock Time is over, \r\n    function TeamRemoveLiquidity(bool addToStaking) public onlyOwner{\r\n        //Only callable if liquidity Unlock time is over\r\n        require(block.timestamp >= _liquidityUnlockTime, \"Not yet unlocked\");\r\n        _liquidityUnlockTime=block.timestamp+DefaultLiquidityLockTime;\r\n        IPancakeERC20 liquidityToken = IPancakeERC20(_liquidityTokenAddress);\r\n        uint256 amount = liquidityToken.balanceOf(address(this));\r\n\r\n        liquidityToken.approve(address(_pancakeRouter),amount);\r\n        //Removes Liquidity and either distributes liquidity BNB to stakers, or \r\n        // adds them to marketing Balance\r\n        //Token will be converted\r\n        //to Liquidity and Staking BNB again\r\n        uint256 initialBNBBalance = address(this).balance;\r\n        _pancakeRouter.removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            address(this),\r\n            amount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n            );\r\n        uint256 newBNBBalance = address(this).balance-initialBNBBalance;\r\n        if(addToStaking){\r\n            _distributeStake(newBNBBalance);\r\n        }\r\n        else{\r\n            marketingBalance+=newBNBBalance;\r\n        }\r\n\r\n    }\r\n    //Releases all remaining BNB on the contract wallet, so BNB wont be burned\r\n    function TeamRemoveRemainingBNB() public onlyOwner{\r\n        require(block.timestamp >= _liquidityUnlockTime, \"Not yet unlocked\");\r\n        _liquidityUnlockTime=block.timestamp+DefaultLiquidityLockTime;\r\n        (bool sent,) =TeamWallet.call{value: (address(this).balance)}(\"\");\r\n        require(sent);\r\n    }\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //external//////////////////////////////////////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n    // IBEP20\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _circulatingSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address spender) external view override returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"Approve from zero\");\r\n        require(spender != address(0), \"Approve to zero\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"Transfer > allowance\");\r\n\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n        return true;\r\n    }\r\n\r\n    // IBEP20 - Helpers\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        uint256 currentAllowance = _allowances[msg.sender][spender];\r\n        require(currentAllowance >= subtractedValue, \"<0 allowance\");\r\n\r\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"OnWithdrawXRP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exclusionAdd\",\"type\":\"address\"}],\"name\":\"AddWalletExclusion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AddressResetBuyLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AddressResetSellLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BalanceLimitDivider\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"InitialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxBuyLockTime\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxSellLockTime\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SellLimitDivider\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SetupEnableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTokenAddress\",\"type\":\"address\"}],\"name\":\"SetupLiquidityTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAntiWhale\",\"type\":\"uint256\"}],\"name\":\"TeamChangeAntiWhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newShare\",\"type\":\"uint8\"}],\"name\":\"TeamChangeMarketingShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTeamWallet\",\"type\":\"address\"}],\"name\":\"TeamChangeTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWalletTwo\",\"type\":\"address\"}],\"name\":\"TeamChangeWalletTwo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamCreateLPandBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"name\":\"TeamDisableBuyLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"name\":\"TeamDisableSellLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamReleaseLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"addToStaking\",\"type\":\"bool\"}],\"name\":\"TeamRemoveLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamRemoveRemainingBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyLockSeconds\",\"type\":\"uint256\"}],\"name\":\"TeamSetBuyLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellLockSeconds\",\"type\":\"uint256\"}],\"name\":\"TeamSetSellLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"burnTaxes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"liquidityTaxes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"stakingTaxes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"transferTax\",\"type\":\"uint8\"}],\"name\":\"TeamSetTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"manual\",\"type\":\"bool\"}],\"name\":\"TeamSwitchManualBNBConversion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secondsUntilUnlock\",\"type\":\"uint256\"}],\"name\":\"TeamUnlockLiquidityInSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBalanceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellLimit\",\"type\":\"uint256\"}],\"name\":\"TeamUpdateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamWithdrawALLMarketingBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TeamWithdrawXMarketingBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLockDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"AddressToCheck\",\"type\":\"address\"}],\"name\":\"getAddressBuyLockTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"AddressToCheck\",\"type\":\"address\"}],\"name\":\"getAddressSellLockTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyLockTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getDividents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityReleaseTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellLockTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isExcludedFromStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualConversion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingShare\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLockDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTwo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CheemsInu", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://76312f0062010989c4f29857d78db321103ceea3fd272ceb09182b0adf7b7627"}