{"SourceCode": "{\"Gemt.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\nimport \\\"./RootPlan.sol\\\";\\r\\n\\r\\ncontract Base is RootPlan {\\r\\n  uint public basicRate;\\r\\n  uint public rewardStamp;\\r\\n  uint public timerewStep;\\r\\n  uint256 public blockReward;\\r\\n\\r\\n  constructor () public {\\r\\n    basicRate = 600;\\r\\n    rewardStamp = now;\\r\\n    timerewStep = 600;\\r\\n    blockReward = 60*PPT;\\r\\n  }\\r\\n}\\r\\n\\r\\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\ncontract Gemt is Base {\\r\\n  uint public START;\\r\\n  uint public STAGE;\\r\\n  uint256 public MX;\\r\\n\\r\\n  uint public randomKey;\\r\\n  uint public lastProof;\\r\\n\\r\\n  mapping (uint =\\u003e uint256) public blockPayouts;\\r\\n  mapping (uint =\\u003e uint256) public stampRewards;\\r\\n\\r\\n  uint constant MXPACK = 10*10**6;\\r\\n  uint constant ANNSEC = 365*24*60*60;\\r\\n\\r\\n  constructor () public {\\r\\n    START = now;\\r\\n    STAGE = now;\\r\\n    randomKey = 16**32;\\r\\n    lastProof = now+60;\\r\\n    balanceOf[address(0)] = 10**9*PPT;\\r\\n    author = \\\"ASINERUM INTERNATIONAL\\\";\\r\\n    name = \\\"ETHEREUM MINEABLE TOKEN WITH NO GOVERNANCE V9\\\";\\r\\n    symbol = \\\"GEMT9\\\";\\r\\n  }\\r\\n\\r\\n  function numgen (uint nonce)\\r\\n  internal view returns (uint num) {\\r\\n    return numgen (nonce, randomKey);\\r\\n  }\\r\\n\\r\\n  function keygen (uint nonce)\\r\\n  internal view returns (uint num) {\\r\\n    return keygen (nonce, randomKey);\\r\\n  }\\r\\n\\r\\n  function keymod (uint nonce)\\r\\n  internal view returns (uint num) {\\r\\n    num = keygen (nonce) % basicRate;\\r\\n  }\\r\\n\\r\\n  function VP2 (uint sec)\\r\\n  internal view returns (uint) {\\r\\n    uint tar = totalSupply**2*now;\\r\\n    uint max = (2*ANNSEC*PPT)**2*START;\\r\\n    return (tar\\u003emax?max:tar)/(max/sec)+60;\\r\\n  }\\r\\n\\r\\n  function rise (address to, uint256 value)\\r\\n  internal {\\r\\n    move (address(0), to, value);\\r\\n    totalSupply += value;\\r\\n  }\\r\\n\\r\\n  function mine (uint nonce) public returns (bool success) {\\r\\n    if (now-STAGE\\u003eANNSEC/3||totalSupply-MX\\u003eMXPACK*PPT/3) {\\r\\n      basicRate = basicRate*3;\\r\\n      blockReward = blockReward/3;\\r\\n      timerewStep = timerewStep*3;\\r\\n      MX = totalSupply;\\r\\n      STAGE = now;\\r\\n    }\\r\\n    if (rewardStamp\\u003cnow \\u0026\\u0026 stampRewards[rewardStamp]==0) {\\r\\n      stampRewards[rewardStamp] = blockReward*8/10;\\r\\n      rise (block.coinbase, blockReward/2);\\r\\n      rise (address(this), blockReward/5);\\r\\n      rise (msg.sender, blockReward/10);\\r\\n      rewardStamp = now+timerewStep;\\r\\n    }\\r\\n    uint256 reward;\\r\\n    if (blockPayouts[block.number]==0) {\\r\\n      if (keymod(nonce)==randomKey%basicRate) {\\r\\n        uint tpart = VP2 (3600);\\r\\n        uint timepast = now-lastProof;\\r\\n        reward = blockReward*timepast/tpart;\\r\\n        blockPayouts[block.number] = reward;\\r\\n        randomKey = numgen (nonce);\\r\\n        lastProof = now;\\r\\n      }\\r\\n    }\\r\\n    if (reward\\u003e0) rise (msg.sender, reward);\\r\\n    return true;\\r\\n  }\\r\\n}\"},\"Root.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\ncontract Root {\\r\\n  string public name;\\r\\n  string public symbol;\\r\\n  uint8 public decimals;\\r\\n  uint256 public totalSupply;\\r\\n  mapping (address =\\u003e uint256) public balanceOf;\\r\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) public allowance; //V2\\r\\n\\r\\n  string public author;\\r\\n  uint256 internal PPT;\\r\\n\\r\\n  mapping (address =\\u003e mapping (bytes32 =\\u003e uint[])) public refnosOf; //V9\\r\\n\\r\\n  mapping (uint =\\u003e Market) public markets;\\r\\n  struct Market {\\r\\n    bool buytoken;\\r\\n    address maker;\\r\\n    uint256 value;\\r\\n    uint256 ppe;\\r\\n    uint time; }\\r\\n\\r\\n  uint constant NOS = 25; //V9\\r\\n\\r\\n  event Transfer (address indexed fromAddress, address indexed toAddress, uint256 txPenny);\\r\\n  event Approval (address indexed ownerAddress, address indexed spenderAddress, uint256 txPenny); //V2\\r\\n  event Sale (uint refno, bool indexed buy, address indexed maker, uint256 indexed ppe, uint time);\\r\\n  event Get (uint indexed refno, address indexed taker, uint256 value); //\\u003cSale\\u003e\\r\\n\\r\\n  constructor () public {\\r\\n    decimals = 18;\\r\\n    PPT = 10**uint256(decimals);\\r\\n  }\\r\\n\\r\\n  function ethered (uint256 value)\\r\\n  internal view returns (bool) {\\r\\n    require (msg.value*value==0\\u0026\\u0026msg.value+value\\u003e0, \\\"#values\\\");\\r\\n    require (value\\u003c=totalSupply, \\\"#value\\\");\\r\\n    return msg.value\\u003e0?true:false;\\r\\n  }\\r\\n\\r\\n  function addNo (string key, uint refno)\\r\\n  internal {\\r\\n    require (refno\\u003e0);\\r\\n    bytes32 pid = keccak256(abi.encodePacked(key,msg.value\\u003e0?\\\"E\\\":\\\"T\\\"));\\r\\n    refnosOf[msg.sender][pid].push(refno);\\r\\n    refnosOf[0x0][pid].push(refno);\\r\\n  } //V8\\u00269\\r\\n\\r\\n  function move (address from, address to, uint256 value)\\r\\n  internal {\\r\\n    require (value\\u003c=balanceOf[from]);\\r\\n    require (balanceOf[to]+value\\u003ebalanceOf[to]);\\r\\n    uint256 sum = balanceOf[from]+balanceOf[to];\\r\\n    balanceOf[from] -= value;\\r\\n    balanceOf[to] += value;\\r\\n    assert (balanceOf[from]+balanceOf[to]==sum);\\r\\n    emit Transfer (from, to, value);\\r\\n  }\\r\\n\\r\\n  function transfer (address to, uint256 value) public returns (bool success) {\\r\\n    move (msg.sender, to, value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom (address from, address to, uint256 value) public returns (bool success) {\\r\\n    require (value \\u003c= allowance[from][msg.sender]);\\r\\n    allowance[from][msg.sender] -= value;\\r\\n    move (from, to, value);\\r\\n    return true;\\r\\n  } //V2\\r\\n\\r\\n  function approve (address spender, uint256 value) public returns (bool success) {\\r\\n    allowance[msg.sender][spender] = value;\\r\\n    emit Approval (msg.sender, spender, value);\\r\\n    return true;\\r\\n  } //V2\\r\\n\\r\\n  function post (uint refno, uint256 value, uint256 ppe, uint time) public payable returns (bool success) {\\r\\n    require (markets[refno].maker==0x0, \\\"#refno\\\");\\r\\n    require (ppe\\u003e0\\u0026\\u0026ppe\\u003ctotalSupply, \\\"#rate\\\");\\r\\n    require (time==0||time\\u003enow, \\\"#time\\\");\\r\\n    Market memory mi;\\r\\n    mi.buytoken = ethered (value);\\r\\n    mi.value = msg.value+value;\\r\\n    mi.maker = msg.sender;\\r\\n    mi.time = time;\\r\\n    mi.ppe = ppe;\\r\\n    markets[refno] = mi;\\r\\n    if (!mi.buytoken) move (msg.sender, address(this), value);\\r\\n    emit Sale (refno, mi.buytoken, mi.maker, mi.ppe, mi.time);\\r\\n    addNo (\\\"post\\\", refno); //V8\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function unpost (uint refno) public returns (bool success) {\\r\\n    Market storage mi = markets[refno];\\r\\n    require (mi.value\\u003e0, \\\"#data\\\");\\r\\n    require (mi.maker==msg.sender, \\\"#user\\\");\\r\\n    require (mi.time==0||mi.time\\u003cnow, \\\"#time\\\");\\r\\n    if (mi.buytoken) mi.maker.transfer (mi.value);\\r\\n    else move (address(this), mi.maker, mi.value);\\r\\n    mi.value = 0;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function acquire (uint refno, uint256 value) public payable returns (bool success) {\\r\\n    bool buytoken = ethered (value);\\r\\n    Market storage mi = markets[refno];\\r\\n    require (mi.maker!=0x0, \\\"#refno\\\");\\r\\n    require (mi.value\\u003e0\\u0026\\u0026mi.ppe\\u003e0, \\\"#data\\\");\\r\\n    require (mi.time==0||mi.time\\u003e=now, \\\"#time\\\");\\r\\n    require (mi.buytoken==!buytoken, \\\"#request\\\");\\r\\n    uint256 pre = mi.value;\\r\\n    uint256 remit;\\r\\n    if (buytoken) {\\r\\n      remit = msg.value*mi.ppe/PPT;\\r\\n      require (remit\\u003e0\\u0026\\u0026remit\\u003c=mi.value, \\\"#volume\\\");\\r\\n      move (address(this), msg.sender, remit);\\r\\n      mi.maker.transfer (msg.value);\\r\\n    } else {\\r\\n      remit = value*PPT/mi.ppe;\\r\\n      require (remit\\u003e0\\u0026\\u0026remit\\u003c=mi.value, \\\"#volume\\\");\\r\\n      move (msg.sender, mi.maker, value);\\r\\n      msg.sender.transfer (remit);\\r\\n    }\\r\\n    mi.value -= remit;\\r\\n    assert (mi.value+remit==pre);\\r\\n    emit Get (refno, msg.sender, remit);\\r\\n    addNo (\\\"acquire\\\", refno); //V8\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function b2i (bytes32 bstr)\\r\\n  internal pure returns (uint num) {\\r\\n    for (uint index=0; index\\u003cbstr.length; index++) {\\r\\n      num += uint(bstr[index])*(16**(index*2)+1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function keygen (uint nonce, uint key, uint256 uai) public pure returns (uint num) {\\r\\n    num = b2i (keccak256 (abi.encodePacked (uai, key, nonce))); //V6\\r\\n  }\\r\\n\\r\\n  function keygen (uint nonce, uint key)\\r\\n  internal view returns (uint num) {\\r\\n    num = keygen (nonce, key, uint256(uint160 (address (msg.sender)))); //V6\\r\\n  }\\r\\n\\r\\n  function numgen (uint nonce, uint key)\\r\\n  internal view returns (uint num) {\\r\\n    num = b2i (keccak256 (abi.encodePacked (key, nonce, block.number, blockhash(block.number-1), block.coinbase, msg.sender, gasleft(), now)));\\r\\n  }\\r\\n\\r\\n  function refnos (address ua, string key, string form, uint skip) public view returns (uint size, uint[NOS] nos) {\\r\\n    uint[] memory therefno = refnosOf[ua][keccak256(abi.encodePacked(key,form))];\\r\\n    size = therefno.length;\\r\\n    if (size\\u003c=skip) return;\\r\\n    uint start = size-skip;\\r\\n    start = start\\u003eNOS ? start-NOS : 0;\\r\\n    for (uint i=0; i\\u003cNOS \\u0026\\u0026 start+i\\u003csize-skip; i++) {\\r\\n      nos[i] = therefno[start+i];\\r\\n    }\\r\\n  } //V8\\u00269\\r\\n}\"},\"RootPlan.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\nimport \\\"./Root.sol\\\";\\r\\n\\r\\ncontract RootPlan is Root {\\r\\n  mapping (uint =\\u003e Case) public deposits;\\r\\n  struct Case {\\r\\n    bool eth;\\r\\n    address maker;\\r\\n    address taker;\\r\\n    uint256 value; }\\r\\n\\r\\n  mapping (uint =\\u003e Program) public programs;\\r\\n  struct Program {\\r\\n    bool eth;\\r\\n    address maker;\\r\\n    uint256 value;\\r\\n    uint petri;\\r\\n    uint open; }\\r\\n\\r\\n  mapping (uint =\\u003e mapping (address =\\u003e Invest)) public invests;\\r\\n  struct Invest {\\r\\n    uint256 amount;\\r\\n    uint start; }\\r\\n\\r\\n  event Bank (uint refno, bool indexed ETH, address indexed maker, address indexed taker, uint256 value);\\r\\n  event Pay (bytes32 ref, bool indexed ETH, address indexed maker, address indexed taker, uint256 value);\\r\\n  event Plan (uint refno, address indexed maker, uint indexed petri, uint indexed open);\\r\\n  event Put (uint indexed refno, address indexed taker, uint256 value);\\r\\n\\r\\n  function pay (bytes32 ref, address to, uint256 value, string note) public payable returns (bool success) {\\r\\n    note = \\\"\\\";\\r\\n    bool eth = ethered (value);\\r\\n    if (eth) to.transfer (msg.value);\\r\\n    else move (msg.sender, to, value);\\r\\n    emit Pay (ref, eth, msg.sender, to, msg.value+value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function deposit (uint refno, address to, uint256 value) public payable returns (bool success) {\\r\\n    require (deposits[refno].maker==0x0, \\\"#refno\\\");\\r\\n    Case memory ci;\\r\\n    ci.eth = ethered (value);\\r\\n    ci.maker = msg.sender;\\r\\n    ci.taker = to;\\r\\n    ci.value = msg.value+value;\\r\\n    deposits[refno] = ci;\\r\\n    if (!ci.eth) move (msg.sender, address(this), value);\\r\\n    emit Bank (refno, ci.eth, ci.maker, ci.taker, ci.value);\\r\\n    addNo (\\\"deposit\\\", refno); //V8\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function release (uint refno, bool cancel) public returns (bool success) {\\r\\n    Case storage ci = deposits[refno];\\r\\n    require (ci.value\\u003e0, \\\"#data\\\");\\r\\n    address to;\\r\\n    if (!cancel \\u0026\\u0026 msg.sender==ci.maker) {\\r\\n      to = ci.taker;\\r\\n    } else if (cancel \\u0026\\u0026 msg.sender==ci.taker) {\\r\\n      to = ci.maker;\\r\\n    } else {\\r\\n      revert(\\\"#user\\\");\\r\\n    }\\r\\n    if (ci.eth) to.transfer (ci.value);\\r\\n    else move (address(this), to, ci.value);\\r\\n    ci.value = 0;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function program (uint refno, uint petri, uint256 value) public payable returns (bool success) {\\r\\n    require (programs[refno].maker==0x0, \\\"#refno\\\");\\r\\n    require (petri\\u003e0\\u0026\\u0026petri\\u003c100000, \\\"#rate\\\"); //V8\\r\\n    Program memory pi;\\r\\n    pi.eth = ethered (value);\\r\\n    pi.maker = msg.sender;\\r\\n    pi.value = msg.value+value;\\r\\n    pi.petri = petri;\\r\\n    pi.open = now;\\r\\n    programs[refno] = pi;\\r\\n    if (!pi.eth) move (msg.sender, address(this), value);\\r\\n    emit Plan (refno, pi.maker, pi.petri, pi.open);\\r\\n    addNo (\\\"program\\\", refno); //V8\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function close (uint refno, bool half) public returns (bool success) {\\r\\n    Program storage pi = programs[refno];\\r\\n    require (pi.value\\u003e0, \\\"#data\\\");\\r\\n    require (pi.maker==msg.sender, \\\"#user\\\");\\r\\n    uint256 draw = half?pi.value/2:pi.value;\\r\\n    if (pi.eth) pi.maker.transfer (draw);\\r\\n    else move (address(this), pi.maker, draw);\\r\\n    pi.value -= draw;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function invest (uint refno, uint256 value) public payable returns (bool success) {\\r\\n    require (invests[refno][msg.sender].start==0, \\\"#invest\\\");\\r\\n    Program storage pi = programs[refno];\\r\\n    Invest memory ii;\\r\\n    bool eth = ethered (value);\\r\\n    require (pi.value\\u003e0, \\\"#data\\\");\\r\\n    require (pi.eth==eth, \\\"#request\\\");\\r\\n    ii.start = now;\\r\\n    ii.amount = msg.value+value;\\r\\n    invests[refno][msg.sender] = ii;\\r\\n    if (!pi.eth) move (msg.sender, address(this), value);\\r\\n    pi.value += ii.amount;\\r\\n    emit Put (refno, msg.sender, ii.amount);\\r\\n    addNo (\\\"invest\\\", refno); //V8\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function withdraw (uint refno) public returns (bool success) {\\r\\n    Program storage pi = programs[refno];\\r\\n    Invest storage ii = invests[refno][msg.sender];\\r\\n    uint256 cap = ii.amount+(ii.amount*pi.petri/10**9)*(now-ii.start);\\r\\n    require (cap\\u003e0\\u0026\\u0026cap\\u003cpi.value, \\\"#fund\\\");\\r\\n    if (pi.eth) msg.sender.transfer (cap);\\r\\n    else move (address(this), msg.sender, cap);\\r\\n    pi.value -= cap;\\r\\n    ii.amount = 0;\\r\\n    ii.start = 0;\\r\\n    return true;\\r\\n  }\\r\\n}\"}}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"basicRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refnosOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"bytes32\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"pay\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"invests\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stampRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomKey\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"petri\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"program\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"mine\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"acquire\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"cancel\",\"type\":\"bool\"}],\"name\":\"release\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastProof\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"}],\"name\":\"unpost\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timerewStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"half\",\"type\":\"bool\"}],\"name\":\"close\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"programs\",\"outputs\":[{\"name\":\"eth\",\"type\":\"bool\"},{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"petri\",\"type\":\"uint256\"},{\"name\":\"open\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"author\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"eth\",\"type\":\"bool\"},{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"taker\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"name\":\"buytoken\",\"type\":\"bool\"},{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"ppe\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"key\",\"type\":\"uint256\"},{\"name\":\"uai\",\"type\":\"uint256\"}],\"name\":\"keygen\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockPayouts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"ppe\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"post\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ua\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"form\",\"type\":\"string\"},{\"name\":\"skip\",\"type\":\"uint256\"}],\"name\":\"refnos\",\"outputs\":[{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"nos\",\"type\":\"uint256[25]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"refno\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"ETH\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Bank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"ETH\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"refno\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"petri\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"open\",\"type\":\"uint256\"}],\"name\":\"Plan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"refno\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Put\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"txPenny\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spenderAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"txPenny\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"refno\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buy\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ppe\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Sale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"refno\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Get\",\"type\":\"event\"}]", "ContractName": "Gemt", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://e0a2fd30f22aebb24dc877ddaad3ad9088bfb96bdba2790ad30c67f7eb72fd2a"}