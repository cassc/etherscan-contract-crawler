{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Wrapped Ether contract interface\\n */\\ninterface IWETH is IERC20 {\\n    /**\\n     * @dev `msg.value` of ETH sent to this contract grants caller account a matching increase in WETH token balance.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @dev Burn WETH token from caller account and withdraw matching ETH to the same.\\n     * @param wad Amount of WETH token to burn.\\n     */\\n    function withdraw(uint wad) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWowmaxRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\n/**\\n * @title IWowmaxRouter\\n * @notice Interface for the Wowmax Router, describes the functions that can be called from the router\\n * and corresponding data structures\\n */\\ninterface IWowmaxRouter {\\n    /**\\n     * @notice Swap operation details structure\\n     * @param to Target token address\\n     * @param part Part of the currently owned tokens to be swapped. Total number of parts\\n     * is defined in the ExchangeRoute structure\\n     * @param addr Contract address that performs the swap\\n     * @param family Contract DEX family\\n     * @param data Additional data that is required for a specific DEX protocol\\n     */\\n    struct Swap {\\n        address to;\\n        uint256 part;\\n        address addr;\\n        bytes32 family;\\n        bytes data;\\n    }\\n\\n    /**\\n     * @notice Exchange route details structure\\n     * @param from Source token address\\n     * @param parts Total number of parts of the currently owned tokens\\n     * @param swaps Array of swaps for a specified token\\n     */\\n    struct ExchangeRoute {\\n        address from;\\n        uint256 parts;\\n        Swap[] swaps;\\n    }\\n\\n    /**\\n     * @notice Exchange request details structure\\n     * @param from Source token address\\n     * @param amountIn Source token amount to swap\\n     * @param to Array of target token addresses\\n     * @param exchangeRoutes Array of exchange routes\\n     * @param slippage Array of slippage tolerance values for each target token\\n     * @param amountOutExpected Array fo expected output amounts for each target token\\n     */\\n    struct ExchangeRequest {\\n        address from;\\n        uint256 amountIn;\\n        address[] to;\\n        ExchangeRoute[] exchangeRoutes;\\n        uint256[] slippage;\\n        uint256[] amountOutExpected;\\n    }\\n\\n    /**\\n     * @notice Emitted when a swap is executed\\n     * @param account Account that initiated the swap\\n     * @param from Source token address\\n     * @param amountIn Source token amount that was swapped\\n     * @param to Array of target token addresses\\n     * @param amountOut Array of amounts that were received for each target token\\n     */\\n    event SwapExecuted(\\n        address indexed account,\\n        address indexed from,\\n        uint256 amountIn,\\n        address[] to,\\n        uint256[] amountOut\\n    );\\n\\n    /**\\n     * @notice Executes a token swap\\n     * @dev if from token is address(0) and amountIn is 0,\\n     * then chain native token is used as a source token, and value is used as an input amount\\n     * @param request Exchange request to be executed\\n     * @return amountsOut Array of output amounts that were received for each target token\\n     */\\n    function swap(ExchangeRequest calldata request) external payable returns (uint256[] memory amountsOut);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/AlgebraV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n/**\\n * @title Algebra V1 pool interface\\n */\\ninterface IAlgebraV1Pool {\\n    /**\\n     * @notice Swap token0 for token1, or token1 for token0\\n     * @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback# AlgebraSwapCallback\\n     * @param recipient The address to receive the output of the swap\\n     * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n     * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n     * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n     * value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n     * @param data Any data to be passed through to the callback. If using the Router it should contain\\n     * SwapRouter#SwapCallbackData\\n     * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n     * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n     */\\n    function swap(\\n        address recipient,\\n        bool zeroToOne,\\n        int256 amountSpecified,\\n        uint160 limitSqrtPrice,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /**\\n     * @dev Returns the address of the first token of the Uniswap v3 based pair\\n     * @return Address of the first token of the pair\\n     */\\n    function token0() external view returns (address);\\n\\n    /**\\n     * @dev Returns the address of the second token of the Uniswap v3 based pair\\n     * @return Address of the second token of the pair\\n     */\\n    function token1() external view returns (address);\\n}\\n\\n/**\\n * @title Algebra V1 library\\n * @notice Functions to swap tokens on Algebra V1 based protocols\\n */\\nlibrary AlgebraV1 {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Swaps tokens on a Algebra V1 based protocol contract\\n     * @param from Address of token to swap from\\n     * @param amountIn Amount of token to swap\\n     * @param swapData Swap operation details. The `data` field should contain two int128 values,\\n     * which are the indices of the tokens to swap from and to\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        bool zeroToOne = from == IAlgebraV1Pool(swapData.addr).token0();\\n        uint160 sqrtPriceLimitX96 = zeroToOne ? 4295128740 : 1461446703485210103287273052203988822378723970341;\\n        (int256 amount0, int256 amount1) = IAlgebraV1Pool(swapData.addr).swap(\\n            address(this),\\n            zeroToOne,\\n            int256(amountIn),\\n            sqrtPriceLimitX96,\\n            new bytes(0)\\n        );\\n        amountOut = uint(zeroToOne ? -amount1 : -amount0);\\n    }\\n\\n    /**\\n     * @dev Performs Algebra V1 callback, sends required amounts of tokens to the pair\\n     * @param amount0Delta Amount of the first token to send\\n     * @param amount1Delta Amount of the second token to send\\n     */\\n    function invokeCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata /*_data*/) internal {\\n        if (amount0Delta > 0 && amount1Delta < 0) {\\n            IERC20(IAlgebraV1Pool(msg.sender).token0()).safeTransfer(msg.sender, uint256(amount0Delta));\\n        } else if (amount0Delta < 0 && amount1Delta > 0) {\\n            IERC20(IAlgebraV1Pool(msg.sender).token1()).safeTransfer(msg.sender, uint256(amount1Delta));\\n        } else {\\n            revert(\\\"WOWMAX: Algebra V1 invariant violation\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Curve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n/**\\n * @title Curve pool interface\\n */\\ninterface ICurvePool {\\n    /**\\n     * @dev Swaps tokens on a Curve based protocol contract\\n     * @param i Index of token to swap from\\n     * @param j Index of token to swap to\\n     * @param dx Amount of token to swap\\n     * @param min_dy Minimum amount of tokens to receive\\n     */\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\\n}\\n\\n/**\\n * @title Curve library\\n * @notice Functions to swap tokens on Curve based protocols\\n */\\nlibrary Curve {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Swaps tokens on a Curve based protocol contract\\n     * @param from Address of token to swap from\\n     * @param amountIn Amount of token to swap\\n     * @param swapData Swap operation details. The `data` field should contain two int128 values,\\n     * which are the indices of the tokens to swap from and to\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        (int128 i, int128 j) = abi.decode(swapData.data, (int128, int128));\\n        uint256 balanceBefore = IERC20(swapData.to).balanceOf(address(this));\\n        //slither-disable-next-line unused-return //it's safe to ignore\\n        IERC20(from).safeIncreaseAllowance(swapData.addr, amountIn);\\n        ICurvePool(swapData.addr).exchange(i, j, amountIn, 0);\\n        amountOut = IERC20(swapData.to).balanceOf(address(this)) - balanceBefore;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/DODOV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n/**\\n * @title DODO v1 pool interface\\n */\\ninterface IDODOV1Pool {\\n    /**\\n     * @dev Sells base token for quote token\\n     * @param amount Amount of base token to sell\\n     * @param minReceiveQuote Minimum amount of quote token to receive\\n     * @param data Additional data to be used in callback hook\\n     * @return amountOut Amount of quote token received\\n     */\\n    function sellBaseToken(uint256 amount, uint256 minReceiveQuote, bytes calldata data) external returns (uint256);\\n\\n    /**\\n     * @dev Buys base token with quote token\\n     * @param amount Amount of base token to buy\\n     * @param maxPayQuote Maximum amount of quote token to pay\\n     * @param data Additional data to be used in callback hook\\n     * @return amountOut Amount of base token received\\n     */\\n    function buyBaseToken(uint256 amount, uint256 maxPayQuote, bytes calldata data) external returns (uint256);\\n}\\n\\n/**\\n * @title DODO v1 library\\n * @notice Functions to swap tokens on DODO v1 protocol\\n */\\nlibrary DODOV1 {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Swaps tokens on a Curve based protocol contract\\n     * @param from Address of token to swap from\\n     * @param amountIn Amount of token to swap\\n     * @param swapData Swap operation details. The `data` field should contain two int128 values, i and j,\\n     * which are the indexes of the tokens to swap\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        //slither-disable-next-line unused-return //it's safe to ignore\\n        IERC20(from).safeIncreaseAllowance(swapData.addr, amountIn);\\n        amountOut = IDODOV1Pool(swapData.addr).sellBaseToken(amountIn, 0, \\\"\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/DODOV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n/**\\n * @title DODO v2 pool interface\\n */\\ninterface IDODOV2Pool {\\n    /**\\n     * @dev Swaps tokens on a DODO v2 based protocol contract\\n     * @param to Address of token to swap to\\n     * @return amountOut Amount of tokens received\\n     */\\n    function sellBase(address to) external returns (uint256);\\n\\n    /**\\n     * @dev Swaps tokens on a DODO v2 based protocol contract\\n     * @param to Address of token to swap to\\n     * @return amountOut Amount of tokens received\\n     */\\n    function sellQuote(address to) external returns (uint256);\\n}\\n\\n/**\\n * @title DODO v2 library\\n * @notice Functions to swap tokens on DODO v2 protocol\\n */\\nlibrary DODOV2 {\\n    uint8 internal constant BASE_TO_QUOTE = 0;\\n\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Swaps tokens on a DODO v2 pool contract\\n     * @param from Address of token to swap from\\n     * @param amountIn Amount of tokens to swap\\n     * @param swapData Swap operation details. The `data` field should contain one uint8 value,\\n     * which is the direction of the swap\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        IERC20(from).safeTransfer(swapData.addr, amountIn);\\n        uint8 direction = abi.decode(swapData.data, (uint8));\\n\\n        if (direction == BASE_TO_QUOTE) {\\n            amountOut = IDODOV2Pool(swapData.addr).sellBase(address(this));\\n        } else {\\n            amountOut = IDODOV2Pool(swapData.addr).sellQuote(address(this));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/DODOV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n/**\\n * @title DODO v3 pool interface\\n */\\ninterface IDODOV3Pool {\\n\\n    /**\\n     * @dev Swaps tokens on a DODO v3 based protocol contract\\n     * @param to Address to send swapped tokens to\\n     * @param fromToken Address of a token to swap from\\n     * @param toToken Address of a token to swap to\\n     * @param fromAmount Amount of tokens to swap\\n     * @param minReceiveAmount Minimal amount of tokens to receive\\n     * @param data Data to be passed to the Dodo V3 Swap Callback contract\\n     * @return Amount of tokens received\\n     */\\n    function sellToken(\\n        address to,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minReceiveAmount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n}\\n\\n/**\\n * @title DODO v3 library\\n * @notice Functions to swap tokens on DODO v3 protocol\\n */\\nlibrary DODOV3 {\\n    uint8 internal constant BASE_TO_QUOTE = 0;\\n\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Swaps tokens on a DODO v3 pool contract\\n     * @param from Address of token to swap from\\n     * @param amountIn Amount of tokens to swap\\n     * @param swapData Swap operation details. The `data` field should be empty\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        return IDODOV3Pool(swapData.addr).sellToken(address(this), from, swapData.to, amountIn, 0, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Callback function to receive tokens from DODO v3 pool contract\\n     * @param token Address of token to receive\\n     * @param amount Amount of tokens to receive\\n     */\\n    function invokeCallback(address token, uint256 amount, bytes calldata /*data*/) internal {\\n        IERC20(token).safeTransfer(msg.sender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Elastic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n/**\\n * @title Elastic pool interface\\n */\\ninterface IElasticPool {\\n    /**\\n     * @notice Swap token0 -> token1, or vice versa\\n     * @dev This method's caller receives a callback in the form of ISwapCallback#swapCallback\\n     * @dev swaps will execute up to limitSqrtP or swapQty is fully used\\n     * @param recipient The address to receive the swap output\\n     * @param swapQty The swap quantity, which implicitly configures the swap as exact input (>0), or exact output (<0)\\n     * @param isToken0 Whether the swapQty is specified in token0 (true) or token1 (false)\\n     * @param limitSqrtP the limit of sqrt price after swapping\\n     * could be MAX_SQRT_RATIO-1 when swapping 1 -> 0 and MIN_SQRT_RATIO+1 when swapping 0 -> 1 for no limit swap\\n     * @param data Any data to be passed through to the callback\\n     * @return qty0 Exact token0 qty sent to recipient if < 0. Minimally received quantity if > 0.\\n     * @return qty1 Exact token1 qty sent to recipient if < 0. Minimally received quantity if > 0.\\n     */\\n    function swap(\\n        address recipient,\\n        int256 swapQty,\\n        bool isToken0,\\n        uint160 limitSqrtP,\\n        bytes calldata data\\n    ) external returns (int256 qty0, int256 qty1);\\n\\n    /**\\n     * @dev Returns the address of the first token of the Uniswap v3 based pair\\n     * @return Address of the first token of the pair\\n     */\\n    function token0() external view returns (address);\\n\\n    /**\\n     * @dev Returns the address of the second token of the Uniswap v3 based pair\\n     * @return Address of the second token of the pair\\n     */\\n    function token1() external view returns (address);\\n}\\n\\n/**\\n * @title Elastic library\\n * @notice Functions to swap tokens on Elastic based protocols\\n */\\nlibrary Elastic {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Swaps tokens on Elastic based protocol contract\\n     * @param from Address of token to swap from\\n     * @param amountIn Amount of token to swap\\n     * @param swapData Swap operation details. The `data` field should contain two int128 values,\\n     * which are the indices of the tokens to swap from and to\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        bool isToken0 = from == IElasticPool(swapData.addr).token0();\\n        uint160 sqrtPriceLimitX96 = isToken0 ? 4295128740 : 1461446703485210103287273052203988822378723970341;\\n        (int256 amount0, int256 amount1) = IElasticPool(swapData.addr).swap(\\n            address(this),\\n            int256(amountIn),\\n            isToken0,\\n            sqrtPriceLimitX96,\\n            new bytes(0)\\n        );\\n        amountOut = uint(isToken0 ? -amount1 : -amount0);\\n    }\\n\\n    /**\\n     * @dev Performs Elastic callback, sends required amounts of tokens to the pair\\n     * @param deltaQty0 Amount of the first token to send\\n     * @param deltaQty1 Amount of the second token to send\\n     */\\n    function invokeCallback(int256 deltaQty0, int256 deltaQty1, bytes calldata /*_data*/) internal {\\n        if (deltaQty0 > 0 && deltaQty1 < 0) {\\n            IERC20(IElasticPool(msg.sender).token0()).safeTransfer(msg.sender, uint256(deltaQty0));\\n        } else if (deltaQty0 < 0 && deltaQty1 > 0) {\\n            IERC20(IElasticPool(msg.sender).token1()).safeTransfer(msg.sender, uint256(deltaQty1));\\n        } else {\\n            revert(\\\"WOWMAX: Elastic invariant violation\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Fulcrom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n/**\\n * @title Fulcrom pool interface\\n */\\ninterface IFulcromPool {\\n    /**\\n     * @dev Swaps tokens on a Fulcrom based protocol contract\\n     * @param _tokenIn Address of a token to swap from\\n     * @param _tokenOut Address of a token to swap to\\n     * @param _receiver Address to send swapped tokens to\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n}\\n\\n/**\\n * @title Fulcrom library\\n * @notice Functions to swap tokens on Fulcrom protocol\\n */\\nlibrary Fulcrom {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Swaps tokens on a Fulcrom pool contract\\n     * @param from Address of a token to swap from\\n     * @param amountIn Amount of tokens to swap\\n     * @param swapData Swap operation details. The `data` field should be empty\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        IERC20(from).safeTransfer(swapData.addr, amountIn);\\n        amountOut = IFulcromPool(swapData.addr).swap(from, swapData.to, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Hashflow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n/**\\n * @title Hashflow Router interface\\n */\\ninterface IHashflowRouter {\\n    struct RFQTQuote {\\n        /// @notice The address of the HashflowPool to trade against.\\n        address pool;\\n        /**\\n         * @notice The external account linked to the HashflowPool.\\n         * If the HashflowPool holds funds, this should be address(0).\\n         */\\n        address externalAccount;\\n        /// @notice The recipient of the quoteToken at the end of the trade.\\n        address trader;\\n        /**\\n         * @notice The account \\\"effectively\\\" making the trade (ultimately receiving the funds).\\n         * This is commonly used by aggregators, where a proxy contract (the 'trader')\\n         * receives the quoteToken, and the effective trader is the user initiating the call.\\n         *\\n         * This field DOES NOT influence movement of funds. However, it is used to check against\\n         * quote replay.\\n         */\\n        address effectiveTrader;\\n        /// @notice The token that the trader sells.\\n        address baseToken;\\n        /// @notice The token that the trader buys.\\n        address quoteToken;\\n        /**\\n         * @notice The amount of baseToken sold in this trade. The exchange rate\\n         * is going to be preserved as the quoteTokenAmount / baseTokenAmount ratio.\\n         *\\n         * Most commonly, effectiveBaseTokenAmount will == baseTokenAmount.\\n         */\\n        uint256 effectiveBaseTokenAmount;\\n        /// @notice The max amount of baseToken sold.\\n        uint256 baseTokenAmount;\\n        /// @notice The amount of quoteToken bought when baseTokenAmount is sold.\\n        uint256 quoteTokenAmount;\\n        /// @notice The Unix timestamp (in seconds) when the quote expires.\\n        /// @dev This gets checked against block.timestamp.\\n        uint256 quoteExpiry;\\n        /// @notice The nonce used by this effectiveTrader. Nonces are used to protect against replay.\\n        uint256 nonce;\\n        /// @notice Unique identifier for the quote.\\n        /// @dev Generated off-chain via a distributed UUID generator.\\n        bytes32 txid;\\n        /// @notice Signature provided by the market maker (EIP-191).\\n        bytes signature;\\n    }\\n\\n    /**\\n     * @notice Executes an intra-chain RFQ-T trade.\\n     * @param quote The quote data to be executed.\\n     */\\n    function tradeRFQT(RFQTQuote memory quote) external payable;\\n}\\n\\n// @title Hashflow library\\n// @notice Functions to swap tokens on Hashflow protocol\\nlibrary Hashflow {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Swaps tokens on a Hashflow router contract\\n     * @param from Address of a token to swap from\\n     * @param amountIn Amount of tokens to swap\\n     * @param swapData Swap operation details. The `data` field should contain encoded RFQTQuote structure\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        IHashflowRouter.RFQTQuote memory quote = abi.decode(swapData.data, (IHashflowRouter.RFQTQuote));\\n        //slither-disable-next-line unused-return //it's safe to ignore\\n        IERC20(from).safeIncreaseAllowance(swapData.addr, amountIn);\\n        if (amountIn < quote.baseTokenAmount) {\\n            quote.effectiveBaseTokenAmount = amountIn;\\n        }\\n        uint256 balanceBefore = IERC20(swapData.to).balanceOf(address(this));\\n        IHashflowRouter(swapData.addr).tradeRFQT(quote);\\n        amountOut = IERC20(swapData.to).balanceOf(address(this)) - balanceBefore;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Iziswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n/**\\n * @title Iziswap pool interface\\n */\\ninterface IIziswapPool {\\n    /**\\n     * @notice Swap tokenX for tokenY, given max amount of tokenX user willing to pay.\\n     * @param recipient the address to receive tokenY\\n     * @param amount the max amount of tokenX user willing to pay\\n     * @param lowPt the lowest point(price) of x/y during swap\\n     * @param data any data to be passed through to the callback\\n     * @return amountX amount of tokenX acquired\\n     * @return amountY amount of tokenY payed\\n     */\\n    function swapX2Y(\\n        address recipient,\\n        uint128 amount,\\n        int24 lowPt,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    /**\\n     * @notice Swap tokenY for tokenX, given max amount of tokenY user willing to pay.\\n     * @param recipient the address to receive tokenX\\n     * @param amount the max amount of tokenY user willing to pay\\n     * @param highPt the highest point(price) of x/y during swap\\n     * @param data any data to be passed through to the callback\\n     * @return amountX amount of tokenX payed\\n     * @return amountY amount of tokenY acquired\\n     */\\n    function swapY2X(\\n        address recipient,\\n        uint128 amount,\\n        int24 highPt,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY);\\n}\\n\\n/**\\n * @title Iziswap library\\n * @notice Functions to swap tokens on Iziswap based protocols\\n */\\nlibrary Iziswap {\\n    uint256 constant X2Y = 0;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Swaps tokens on a Iziswap based protocol contract\\n     * @param from Address of token to swap from\\n     * @param amountIn Amount of token to swap\\n     * @param swapData Swap operation details. The `data` field should contain two int128 values,\\n     * which are the indices of the tokens to swap from and to\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        int24 pt = abi.decode(swapData.data, (int24));\\n        //slither-disable-next-line unused-return //it's safe to ignore\\n        bytes memory data = abi.encode(from);\\n\\n        if (from < swapData.to) {\\n            (, amountOut) = IIziswapPool(swapData.addr).swapX2Y(address(this), uint128(amountIn), pt, data);\\n        } else {\\n            (amountOut, ) = IIziswapPool(swapData.addr).swapY2X(address(this), uint128(amountIn), pt, data);\\n        }\\n    }\\n\\n    function transferTokens(uint256 amount, bytes calldata data) internal {\\n        address token = abi.decode(data, (address));\\n        IERC20(token).safeTransfer(msg.sender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Level.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n/**\\n * @title Level pool interface\\n */\\ninterface ILevelPool {\\n    /**\\n     * @dev Swaps tokens on a Level based protocol contract\\n     * @param _tokenIn Address of a token to swap from\\n     * @param _tokenOut Address of a token to swap to\\n     * @param _minOut Minimal amount of tokens to receive\\n     * @param _to Address to send swapped tokens to\\n     * @param extradata Data to be used in callback\\n     */\\n    function swap(address _tokenIn, address _tokenOut, uint256 _minOut, address _to, bytes calldata extradata) external;\\n}\\n\\n/**\\n * @title Level library\\n * @notice Functions to swap tokens on Level protocol\\n */\\nlibrary Level {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Swaps tokens on a Level pool contract\\n     * @param from Address of a token to swap from\\n     * @param amountIn Amount of tokens to swap\\n     * @param swapData Swap operation details. The `data` field should be empty\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        IERC20(from).safeTransfer(swapData.addr, amountIn);\\n        uint256 balanceBefore = IERC20(swapData.to).balanceOf(address(this));\\n        ILevelPool(swapData.addr).swap(from, swapData.to, 0, address(this), new bytes(0));\\n        amountOut = IERC20(swapData.to).balanceOf(address(this)) - balanceBefore;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/PancakeSwapStable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n/**\\n * @title PancakeSwap pool interface\\n */\\ninterface IPancakeStablePool {\\n    /**\\n     * @notice Exchange `dx` amount of `i` token to at least `min_dy` amount of `j` token\\n     * @dev Same as Curve but uses uint256 instead of int128\\n     * @param i Index of token to swap from\\n     * @param j Index of token to swap to\\n     * @param dx Amount of `i` token to swap from\\n     * @param min_dy Minimum amount of `j` token to receive\\n     */\\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external;\\n}\\n\\n/**\\n * @title PancakeSwap library\\n * @notice Functions to swap tokens on PancakeSwap like protocols\\n */\\nlibrary PancakeSwapStable {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Swaps tokens on a PancakeSwap Stable like protocol contract\\n     * @param from Address of token to swap from\\n     * @param amountIn Amount of token to swap\\n     * @param swapData Swap operation details. The `data` field should contain two int128 values,\\n     * which are the indices of the tokens to swap from and to\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        (int128 i, int128 j) = abi.decode(swapData.data, (int128, int128));\\n        uint256 balanceBefore = IERC20(swapData.to).balanceOf(address(this));\\n        //slither-disable-next-line unused-return //it's safe to ignore\\n        IERC20(from).safeIncreaseAllowance(swapData.addr, amountIn);\\n        IPancakeStablePool(swapData.addr).exchange(uint256(uint128(i)), uint256(uint128(j)), amountIn, 0);\\n        amountOut = IERC20(swapData.to).balanceOf(address(this)) - balanceBefore;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Saddle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n/**\\n * @title Saddle pool interface\\n */\\ninterface ISaddlePool {\\n    /**\\n     * @dev Swaps tokens on a Saddle based protocol contract\\n     * @param tokenIndexFrom Index of a token to swap from\\n     * @param tokenIndexTo Index of a token to swap to\\n     * @param dx Amount of tokens to swap\\n     * @param minDy Minimum amount of tokens to receive\\n     * @param deadline Timestamp after which transaction will revert\\n     */\\n    function swap(uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx, uint256 minDy, uint256 deadline) external;\\n}\\n\\n/**\\n * @title Saddle library\\n * @notice Functions to swap tokens on Saddle protocol\\n */\\nlibrary Saddle {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Swaps tokens on a Saddle pool contract\\n     * @param from Address of a token to swap from\\n     * @param amountIn Amount of tokens to swap\\n     * @param swapData Swap operation details. The `data` field should contain two uint8 values,\\n     * which are tokenIndexFrom and tokenIndexTo\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        (uint8 tokenIndexFrom, uint8 tokenIndexTo) = abi.decode(swapData.data, (uint8, uint8));\\n        uint256 balanceBefore = IERC20(swapData.to).balanceOf(address(this));\\n        //slither-disable-next-line unused-return //it's safe to ignore\\n        IERC20(from).safeIncreaseAllowance(swapData.addr, amountIn);\\n        ISaddlePool(swapData.addr).swap(tokenIndexFrom, tokenIndexTo, amountIn, 0, type(uint256).max);\\n        amountOut = IERC20(swapData.to).balanceOf(address(this)) - balanceBefore;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SyncSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n/**\\n * @title SyncSwap pool interface\\n */\\ninterface ISyncSwapPool {\\n    /**\\n     * @dev Token amount structure\\n     * @param token Address of a token\\n     * @param amount Amount of tokens\\n     */\\n    struct TokenAmount {\\n        address token;\\n        uint amount;\\n    }\\n\\n    /**\\n     * @dev Swaps between tokens.\\n     * @param data Swap operation details\\n     * @param sender Address of the sender\\n     * @param callback Callback address\\n     * @param callbackData Callback data\\n     * @return tokenAmount Amount of tokens received\\n     */\\n    function swap(\\n        bytes calldata data,\\n        address sender,\\n        address callback,\\n        bytes calldata callbackData\\n    ) external returns (TokenAmount memory tokenAmount);\\n\\n    /**\\n     * @dev Returns the address of the SyncSwap pool vault\\n     * @return Vault address\\n     */\\n    function vault() external view returns (address);\\n}\\n\\n/**\\n * @title SyncSwap vault interface\\n */\\ninterface ISyncSwapVault {\\n    /**\\n     * @dev Deposits tokens to the SyncSwap vault\\n     * @param token Address of a token to deposit\\n     * @param to SyncSwap pool address\\n     * @return amount Amount of tokens deposited\\n     */\\n    function deposit(address token, address to) external payable returns (uint amount);\\n}\\n\\n/**\\n * @title SyncSwap library\\n * @notice Functions to swap tokens on SyncSwap protocol\\n */\\nlibrary SyncSwap {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Swaps tokens on a SyncSwap pool contract\\n     * @param from Address of a token to swap from\\n     * @param amountIn Amount of tokens to swap\\n     * @param swapData Swap operation details. The `data` field should be empty\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        ISyncSwapVault vault = ISyncSwapVault(ISyncSwapPool(swapData.addr).vault());\\n        IERC20(from).safeTransfer(address(vault), amountIn);\\n        vault.deposit(from, swapData.addr);\\n        bytes memory data = abi.encode(from, address(this), uint8(2)); // from, to, withdrawMode (0 - default, 1 - unwrapped, 2 - wrapped)\\n        ISyncSwapPool.TokenAmount memory out = ISyncSwapPool(swapData.addr).swap(\\n            data,\\n            address(0x0),\\n            address(0x0),\\n            new bytes(0)\\n        );\\n        return out.amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/UniswapV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n/**\\n * @title Uniswap v2 pair interface\\n */\\ninterface IUniswapV2Pair {\\n    /**\\n     * @dev Returns the address of the first token of the Uniswap v2 based pair\\n     * @return Address of the first token of the pair\\n     */\\n    function token0() external view returns (address);\\n\\n    /**\\n     * @dev Returns the address of the second token of the Uniswap v2 based pair\\n     * @return Address of the second token of the pair\\n     */\\n    function token1() external view returns (address);\\n\\n    /**\\n     * @dev Returns the Uniswap v2 based pair reserves\\n     * @return _reserve0 Reserve of the first token in the pair\\n     * @return _reserve1 Reserve of the second token in the pair\\n     * @return _blockTimestampLast Block timestamp of the last reserve update\\n     */\\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n\\n    /**\\n     * @dev Swaps tokens on a Uniswap v2 based pair\\n     * @param amount0Out Amount of the first token to receive\\n     * @param amount1Out Amount of the second token to receive\\n     * @param to Address to send tokens to\\n     * @param data Data to be send in callback function, if any\\n     */\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns the address of the Uniswap v2 based pair router\\n     * @return Router address\\n     */\\n    function router() external returns (address);\\n}\\n\\n/**\\n * @title Uniswap v2 router interface\\n */\\ninterface IUniswapV2Router {\\n    /**\\n     * @dev Swaps tokens on a Uniswap v2 based router\\n     * @param amountIn Amount of tokens to swap\\n     * @param amountOutMin Minimal amount of tokens to receive\\n     * @param path Sequence of tokens to perform swap through\\n     * @param to Address to send swapped tokens to\\n     * @param deadline Timestamp after which the transaction will revert,\\n     * 0 if it is not defined\\n     * @return amounts Amounts of tokens received for each swap step\\n     */\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\\n/**\\n * @title Uniswap v2 library\\n * @notice Functions to swap tokens on Uniswap v2 and compatible protocols\\n */\\nlibrary UniswapV2 {\\n    /**\\n     * @dev Common fee denominator\\n     */\\n    uint256 private constant FEE_DENOMINATOR = 10000;\\n\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Performs a direct swap through a Uniswap v2 based pair\\n     * @param from Address of a token to swap from\\n     * @param amountIn Amount of tokens to swap\\n     * @param swapData Swap operation details. The `data` field should contain the fee value specific for the pair\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        IERC20(from).safeTransfer(swapData.addr, amountIn);\\n        uint256 fee = abi.decode(swapData.data, (uint256));\\n        bool directSwap = IUniswapV2Pair(swapData.addr).token0() == from;\\n        (uint112 reserveIn, uint112 reserveOut) = getReserves(swapData.addr, directSwap);\\n        amountOut = getAmountOut(amountIn, reserveIn, reserveOut, fee);\\n        if (amountOut > 0) {\\n            IUniswapV2Pair(swapData.addr).swap(\\n                directSwap ? 0 : amountOut,\\n                directSwap ? amountOut : 0,\\n                address(this),\\n                new bytes(0)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a swap through a Uniswap v2 based protocol using a router contract\\n     * @param from Address of a token to swap from\\n     * @param amountIn Amount of tokens to swap\\n     * @param swapData Swap operation details\\n     * data field should be empty\\n     * @return amountOut Amount of tokens received\\n     */\\n    function routerSwap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        IUniswapV2Router router = IUniswapV2Router(IUniswapV2Pair(swapData.addr).router());\\n        IERC20(from).safeIncreaseAllowance(address(router), amountIn);\\n        address[] memory path = new address[](2);\\n        path[0] = from;\\n        path[1] = swapData.to;\\n        return router.swapExactTokensForTokens(amountIn, 0, path, address(this), type(uint256).max)[1];\\n    }\\n\\n    /**\\n     * @dev Returns the reserves of a Uniswap v2 based pair ordered according to swap direction\\n     * @param pair Address of a Uniswap v2 based pair\\n     * @param directSwap True if the first token of the pair is the token to swap from, false otherwise\\n     * @return reserveIn Reserve of the token to swap from\\n     * @return reserveOut Reserve of the token to swap to\\n     */\\n    function getReserves(address pair, bool directSwap) private view returns (uint112 reserveIn, uint112 reserveOut) {\\n        (uint112 reserve0, uint112 reserve1, ) = IUniswapV2Pair(pair).getReserves();\\n        return directSwap ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens to be received for a given input amount and pair reserves\\n     * @param amountIn Amount of tokens to swap\\n     * @param reserveIn Reserve of the token to swap from\\n     * @param reserveOut Reserve of the token to swap to\\n     * @param fee Fee of the Uniswap v2 based pair. This value is specific for the pair\\n     * and/or it's DEX, and should be provided externally\\n     * @return amountOut Amount of tokens received\\n     */\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint112 reserveIn,\\n        uint112 reserveOut,\\n        uint256 fee\\n    ) private pure returns (uint256 amountOut) {\\n        uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - fee);\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * FEE_DENOMINATOR + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/UniswapV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n/**\\n * @title Uniswap v2 pair interface\\n */\\ninterface IUniswapV3Pool {\\n    /**\\n     * @dev Swaps tokens on a Uniswap v3 based pair\\n     * @param recipient Address to send swapped tokens to\\n     * @param zeroForOne Flag that indicates token direction. True for token0 to token1 direction,\\n     * false for token1 to token0\\n     * @param amountSpecified Amount of tokens to swap\\n     * @param sqrtPriceLimitX96 Price limit within which swap is processed\\n     * @param data Additional data to be send in callback function\\n     * @return amount0 Amount of the first token received\\n     * @return amount1 Amount of the second token received\\n     */\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /**\\n     * @dev Returns the address of the first token of the Uniswap v3 based pair\\n     * @return Address of the first token of the pair\\n     */\\n    function token0() external view returns (address);\\n\\n    /**\\n     * @dev Returns the address of the second token of the Uniswap v3 based pair\\n     * @return Address of the second token of the pair\\n     */\\n    function token1() external view returns (address);\\n}\\n\\n/**\\n * @title Uniswap v3 library\\n * @notice Functions to swap tokens on Uniswap v3 and compatible protocol\\n */\\nlibrary UniswapV3 {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Swaps tokens on a Uniswap v3 based pair\\n     * @param amountIn Amount of tokens to swap\\n     * @param swapData Swap data. The `data` field should contain zeroForOne flag\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(uint256 amountIn, IWowmaxRouter.Swap memory swapData) internal returns (uint256 amountOut) {\\n        bool zeroForOne = abi.decode(swapData.data, (bool));\\n        uint160 sqrtPriceLimitX96 = zeroForOne ? 4295128740 : 1461446703485210103287273052203988822378723970341;\\n        (int256 amount0, int256 amount1) = IUniswapV3Pool(swapData.addr).swap(\\n            address(this),\\n            zeroForOne,\\n            int256(amountIn),\\n            sqrtPriceLimitX96,\\n            new bytes(0)\\n        );\\n        amountOut = uint(zeroForOne ? -amount1 : -amount0);\\n    }\\n\\n    /**\\n     * @dev Performs Uniswap v3 callback, sends required amounts of tokens to the pair\\n     * @param amount0Delta Amount of the first token to send\\n     * @param amount1Delta Amount of the second token to send\\n     */\\n    function invokeCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata /*_data*/) internal {\\n        if (amount0Delta > 0 && amount1Delta < 0) {\\n            IERC20(IUniswapV3Pool(msg.sender).token0()).safeTransfer(msg.sender, uint256(amount0Delta));\\n        } else if (amount0Delta < 0 && amount1Delta > 0) {\\n            IERC20(IUniswapV3Pool(msg.sender).token1()).safeTransfer(msg.sender, uint256(amount1Delta));\\n        } else {\\n            revert(\\\"WOWMAX: Uniswap v3 invariant violation\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/VelocoreV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\n/**\\n * @title Velocore vault interface\\n */\\ninterface IVelocoreVault {\\n    /**\\n     * @dev Swaps tokens on a Velocore based protocol\\n     * @param pool Address of a Velocore pool contract\\n     * @param method Swap method\\n     * @param t1 Address of a token to swap from\\n     * @param m1 Swap method for the first token\\n     * @param a1 Amount of the first token to swap\\n     * @param t2 Address of a token to swap to\\n     * @param m2 Swap method for the second token\\n     * @param a2 Amount of the second token to swap\\n     * @param data Additional data to be used in swap\\n     * @return amounts Amounts of tokens received\\n     */\\n    function execute2(\\n        address pool,\\n        uint8 method,\\n        address t1,\\n        uint8 m1,\\n        int128 a1,\\n        address t2,\\n        uint8 m2,\\n        int128 a2,\\n        bytes memory data\\n    ) external payable returns (int128[] memory);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address);\\n}\\n\\n/**\\n * @title Velocore library\\n * @notice Functions to swap tokens on Velocore protocol\\n */\\nlibrary VelocoreV2 {\\n    uint8 constant SWAP = 0;\\n    uint8 constant EXACTLY = 0;\\n    uint8 constant AT_MOST = 1;\\n    address constant NATIVE_TOKEN = address(0x0);\\n\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Swaps tokens on a Velocore pool contract\\n     * @param wrappedNativeToken Address of a wrapped native token\\n     * @param from Address of a token to swap from\\n     * @param amountIn Amount of tokens to swap\\n     * @param swapData Swap operation details. The `data` field should contain vault address\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(\\n        address wrappedNativeToken,\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        address vaultAddress = abi.decode(swapData.data, (address));\\n        IVelocoreVault vault = IVelocoreVault(vaultAddress);\\n\\n        address fromToken = from == wrappedNativeToken ? NATIVE_TOKEN : from;\\n        address toToken = swapData.to == wrappedNativeToken ? NATIVE_TOKEN : swapData.to;\\n        int128[] memory result;\\n\\n        if (fromToken == NATIVE_TOKEN) {\\n            IWETH(wrappedNativeToken).withdraw(amountIn);\\n            result = vault.execute2{ value: amountIn }(\\n                swapData.addr,\\n                SWAP,\\n                fromToken,\\n                EXACTLY,\\n                int128(int256(amountIn)),\\n                toToken,\\n                AT_MOST,\\n                0,\\n                \\\"\\\"\\n            );\\n        } else {\\n            IERC20(fromToken).safeIncreaseAllowance(address(vault), amountIn);\\n            result = vault.execute2(\\n                swapData.addr,\\n                SWAP,\\n                fromToken,\\n                EXACTLY,\\n                int128(int256(amountIn)),\\n                toToken,\\n                AT_MOST,\\n                0,\\n                \\\"\\\"\\n            );\\n        }\\n\\n        amountOut = uint256(int256(result[1]));\\n\\n        if (toToken == NATIVE_TOKEN) {\\n            IWETH(wrappedNativeToken).deposit{ value: amountOut }();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Velodrome.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n/**\\n * @title Velodrome pair interface\\n */\\ninterface IVelodromePair {\\n    /**\\n     * @dev Returns the Velodrome based pair amount out\\n     * @param amountIn Amount to swap\\n     * @param from Address of the token to swap from\\n     * @return Amount of tokens to receive\\n     */\\n    function getAmountOut(uint256 amountIn, address from) external view returns (uint256);\\n\\n    /**\\n     * @dev Swaps tokens on a Velodrome based pair\\n     * @param amount0Out Amount of the first token to receive\\n     * @param amount1Out Amount of the second token to receive\\n     * @param to Address to send tokens to\\n     * @param data Data to be send in callback function, if any\\n     */\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n}\\n\\n/**\\n * @title Velodrome library\\n * @notice Functions to swap tokens on Velodrome and compatible protocols\\n */\\nlibrary Velodrome {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Performs a swap through a Velodrome based pair\\n     * @param from Address of a token to swap from\\n     * @param amountIn Amount of tokens to swap\\n     * @param swapData Swap operation details. The `data` field should contain from token index\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        uint256 fromIndex = abi.decode(swapData.data, (uint256));\\n        amountOut = IVelodromePair(swapData.addr).getAmountOut(amountIn, from);\\n        if (amountOut > 0) {\\n            IERC20(from).safeTransfer(swapData.addr, amountIn);\\n            IVelodromePair(swapData.addr).swap(\\n                fromIndex == 0 ? 0 : amountOut,\\n                fromIndex == 0 ? amountOut : 0,\\n                address(this),\\n                new bytes(0)\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Vooi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n/**\\n * @title Vooi pool interface\\n */\\ninterface IVooiPool {\\n    /**\\n     * @notice Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address\\n     * @dev This function assumes tax free token.\\n     * @param _fromID The token being inserted into Pool by user for swap\\n     * @param _toID The token wanted by user, leaving the Pool\\n     * @param _fromAmount The amount of from token inserted\\n     * @param _minToAmount The minimum amount that will be accepted by user as result\\n     * @param _to The user receiving the result of swap\\n     * @param _deadline The deadline to be respected\\n     */\\n    function swap(\\n        uint256 _fromID,\\n        uint256 _toID,\\n        uint256 _fromAmount,\\n        uint256 _minToAmount,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 actualToAmount, uint256 lpFeeAmount);\\n}\\n\\n/**\\n * @title Vooi library\\n * @notice Functions to swap tokens on Vooi protocol\\n */\\nlibrary Vooi {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Swaps tokens on a Vooi pool contract\\n     * @param from Address of a token to swap from\\n     * @param amountIn Amount of tokens to swap\\n     * @param swapData Swap operation details. The `data` field should be empty\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        (uint8 fromID, uint8 toID) = abi.decode(swapData.data, (uint8, uint8));\\n        IERC20(from).safeIncreaseAllowance(swapData.addr, amountIn);\\n        (amountOut, ) = IVooiPool(swapData.addr).swap(fromID, toID, amountIn, 0, address(this), type(uint256).max);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Wombat.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n/**\\n * @title Wombat pool interface\\n */\\ninterface IWombatPool {\\n    /**\\n     * @dev Swaps tokens on a Wombat based protocol contract\\n     * @param fromToken Address of a token to swap from\\n     * @param toToken Address of a token to swap to\\n     * @param fromAmount Amount of tokens to swap\\n     * @param minimumToAmount Minimal amount of tokens to receive\\n     * @param to Address to send swapped tokens to\\n     * @param deadline Timestamp after which the transaction will revert\\n     * @return actualToAmount Actual amount of tokens received\\n     * @return haircut Amount of tokens taken as fee\\n     */\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n}\\n\\n/**\\n * @title Wombat library\\n * @notice Functions to swap tokens on Wombat protocol\\n */\\nlibrary Wombat {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Swaps tokens on a Wombat pool contract\\n     * @param from Address of a token to swap from\\n     * @param amountIn Amount of tokens to swap\\n     * @param swapData Swap operation details. The `data` field should be empty\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        IERC20(from).safeIncreaseAllowance(swapData.addr, amountIn);\\n        (amountOut, ) = IWombatPool(swapData.addr).swap(\\n            from,\\n            swapData.to,\\n            amountIn,\\n            0,\\n            address(this),\\n            type(uint256).max\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/WooFi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n/**\\n * @title WooFi pool interface\\n */\\ninterface IWooFiPool {\\n    /**\\n     * @dev Swaps tokens on a WooFi based protocol contract\\n     * @param fromToken Address of a token to swap from\\n     * @param toToken Address of a token to swap to\\n     * @param fromAmount Amount of tokens to swap\\n     * @param minToAmount Minimal amount of tokens to receive\\n     * @param to Address to send swapped tokens to\\n     * @param rebateTo The rebate address (optional, can be address ZERO)\\n     * @return realToAmount Amount of tokens received\\n     */\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minToAmount,\\n        address to,\\n        address rebateTo\\n    ) external returns (uint256 realToAmount);\\n}\\n\\n/**\\n * @title WooFi library\\n * @notice Functions to swap tokens on WooFi protocol\\n */\\nlibrary WooFi {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Swaps tokens on a WooFi pool contract\\n     * @param from Address of a token to swap from\\n     * @param amountIn Amount of tokens to swap\\n     * @param swapData Swap operation details. The `data` field should be empty\\n     * @return amountOut Amount of tokens received\\n     */\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        IERC20(from).safeTransfer(swapData.addr, amountIn);\\n        amountOut = IWooFiPool(swapData.addr).swap(from, swapData.to, amountIn, 0, address(this), address(0x0));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WowmaxRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IWowmaxRouter.sol\\\";\\n\\nimport \\\"./libraries/UniswapV2.sol\\\";\\nimport \\\"./libraries/UniswapV3.sol\\\";\\nimport \\\"./libraries/Curve.sol\\\";\\nimport \\\"./libraries/PancakeSwapStable.sol\\\";\\nimport \\\"./libraries/DODOV2.sol\\\";\\nimport \\\"./libraries/DODOV1.sol\\\";\\nimport \\\"./libraries/DODOV3.sol\\\";\\nimport \\\"./libraries/Hashflow.sol\\\";\\nimport \\\"./libraries/Saddle.sol\\\";\\nimport \\\"./libraries/Wombat.sol\\\";\\nimport \\\"./libraries/Level.sol\\\";\\nimport \\\"./libraries/Fulcrom.sol\\\";\\nimport \\\"./libraries/WooFi.sol\\\";\\nimport \\\"./libraries/Elastic.sol\\\";\\nimport \\\"./libraries/AlgebraV1.sol\\\";\\nimport \\\"./libraries/SyncSwap.sol\\\";\\nimport \\\"./libraries/Vooi.sol\\\";\\nimport \\\"./libraries/VelocoreV2.sol\\\";\\nimport \\\"./libraries/Iziswap.sol\\\";\\nimport \\\"./libraries/Velodrome.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./WowmaxSwapReentrancyGuard.sol\\\";\\n\\n/**\\n * @title WOWMAX Router\\n * @notice Router for stateless execution of swaps against multiple DEX protocols.\\n *\\n * The WowmaxRouter contract encompasses three primary responsibilities:\\n * 1. Facilitating the exchange of user tokens based on a provided exchange route.\\n * 2. Ensuring validation of the received output amounts for users, guaranteeing their alignment\\n * within the designated slippage range.\\n * 3. Transferring any surplus amounts to the treasury, thereby functioning as a service fee.\\n *\\n * The WowmaxRouter contract does not hold any tokens between swap operations. Tokens should not be transferred directly\\n * to the contract. If, by any chance, tokens are transferred directly to the contract, they are most likely to be lost.\\n */\\ncontract WowmaxRouter is IWowmaxRouter, Ownable, WowmaxSwapReentrancyGuard {\\n    /**\\n     * @dev WETH contract\\n     */\\n    IWETH public WETH;\\n\\n    /**\\n     * @dev Treasury address\\n     */\\n    address public treasury;\\n\\n    /**\\n     * @dev Max fee percentage. All contract percentage values have two extra digits for precision. Default value is 1%\\n     */\\n    uint256 public maxFeePercentage = 100;\\n\\n    /**\\n     * @dev Max allowed slippage percentage, default value is 20%\\n     */\\n    uint256 public maxSlippage = 2000;\\n\\n    // Mapping of protocol names\\n    bytes32 internal constant UNISWAP_V2 = \\\"UNISWAP_V2\\\";\\n    bytes32 internal constant UNISWAP_V3 = \\\"UNISWAP_V3\\\";\\n    bytes32 internal constant UNISWAP_V2_ROUTER = \\\"UNISWAP_V2_ROUTER\\\";\\n    bytes32 internal constant CURVE = \\\"CURVE\\\";\\n    bytes32 internal constant DODO_V1 = \\\"DODO_V1\\\";\\n    bytes32 internal constant DODO_V2 = \\\"DODO_V2\\\";\\n    bytes32 internal constant DODO_V3 = \\\"DODO_V3\\\";\\n    bytes32 internal constant HASHFLOW = \\\"HASHFLOW\\\";\\n    bytes32 internal constant PANCAKESWAP_STABLE = \\\"PANCAKESWAP_STABLE\\\";\\n    bytes32 internal constant SADDLE = \\\"SADDLE\\\";\\n    bytes32 internal constant WOMBAT = \\\"WOMBAT\\\";\\n    bytes32 internal constant LEVEL = \\\"LEVEL\\\";\\n    bytes32 internal constant FULCROM = \\\"FULCROM\\\";\\n    bytes32 internal constant WOOFI = \\\"WOOFI\\\";\\n    bytes32 internal constant ELASTIC = \\\"ELASTIC\\\";\\n    bytes32 internal constant ALGEBRA_V1 = \\\"ALGEBRA_V1\\\";\\n    bytes32 internal constant ALGEBRA_V1_9 = \\\"ALGEBRA_V1_9\\\";\\n    bytes32 internal constant SYNCSWAP = \\\"SYNCSWAP\\\";\\n    bytes32 internal constant VOOI = \\\"VOOI\\\";\\n    bytes32 internal constant VELOCORE_V2 = \\\"VELOCORE_V2\\\";\\n    bytes32 internal constant IZISWAP = \\\"IZISWAP\\\";\\n    bytes32 internal constant VELODROME = \\\"VELODROME\\\";\\n\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev sets the WETH and treasury addresses\\n     */\\n    constructor(address _weth, address _treasury) {\\n        require(_weth != address(0), \\\"WOWMAX: Wrong WETH address\\\");\\n        require(_treasury != address(0), \\\"WOWMAX: Wrong treasury address\\\");\\n\\n        WETH = IWETH(_weth);\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n     * @dev fallback function to receive native tokens\\n     */\\n    receive() external payable {}\\n\\n    // Admin functions\\n\\n    /**\\n     * @dev withdraws tokens from a contract, in case of leftovers after a swap, invalid swap requests,\\n     * or direct transfers. Only callable by the owner.\\n     * @param token Token to be withdrawn\\n     * @param amount Amount to be withdrawn\\n     */\\n    function withdraw(address token, uint256 amount) external onlyOwner {\\n        IERC20(token).safeTransfer(treasury, amount);\\n    }\\n\\n    /**\\n     * @dev withdraws native tokens from a contract, in case of leftovers after a swap or invalid swap requests.\\n     * Only callable by the owner.\\n     * @param amount Amount to be withdrawn\\n     */\\n    function withdrawETH(uint256 amount) external onlyOwner {\\n        (bool sent, ) = payable(treasury).call{ value: amount }(\\\"\\\");\\n        require(sent, \\\"Wowmax: Failed to send native tokens\\\");\\n    }\\n\\n    /**\\n     * @dev sets the max fee percentage. Only callable by the owner.\\n     * @param _maxFeePercentage Max fee percentage\\n     */\\n    function setMaxFeePercentage(uint256 _maxFeePercentage) external onlyOwner {\\n        maxFeePercentage = _maxFeePercentage;\\n    }\\n\\n    /**\\n     * @dev sets the max allowed slippage. Only callable by the owner.\\n     * @param _maxSlippage Max allowed slippage percentage\\n     */\\n    function setMaxSlippage(uint256 _maxSlippage) external onlyOwner {\\n        maxSlippage = _maxSlippage;\\n    }\\n\\n    // Callbacks\\n\\n    /**\\n     * @dev callback for Uniswap v3 pairs. Not allowed to be executed outside of a swap operation\\n     * @param amount0Delta Amount of token0 to be transferred to the caller\\n     * @param amount1Delta Amount of token1 to be transferred to the caller\\n     * @param _data Additional data to be passed to the callback function\\n     */\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata _data\\n    ) external onlyDuringSwap {\\n        UniswapV3.invokeCallback(amount0Delta, amount1Delta, _data);\\n    }\\n\\n    /**\\n     * @dev callback for PancakeSwap v3 pairs. Not allowed to be executed outside of a swap operation\\n     * @param amount0Delta Amount of token0 to be transferred to the caller\\n     * @param amount1Delta Amount of token1 to be transferred to the caller\\n     * @param _data Additional data to be passed to the callback function\\n     */\\n    function pancakeV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata _data\\n    ) external onlyDuringSwap {\\n        UniswapV3.invokeCallback(amount0Delta, amount1Delta, _data);\\n    }\\n\\n    /**\\n     * @dev callback for EchoDEX v3 pairs. Not allowed to be executed outside of a swap operation\\n     * @param amount0Delta Amount of token0 to be transferred to the caller\\n     * @param amount1Delta Amount of token1 to be transferred to the caller\\n     * @param _data Additional data to be passed to the callback function\\n     */\\n    function echodexV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata _data\\n    ) external onlyDuringSwap {\\n        UniswapV3.invokeCallback(amount0Delta, amount1Delta, _data);\\n    }\\n\\n    /**\\n     * @dev callback for Elastic pairs. Not allowed to be executed outside of a swap operation\\n     * @param deltaQty0 Amount of token0 to be transferred to the caller\\n     * @param deltaQty1 Amount of token1 to be transferred to the caller\\n     * @param data Additional data to be passed to the callback function\\n     */\\n    function swapCallback(int256 deltaQty0, int256 deltaQty1, bytes calldata data) external onlyDuringSwap {\\n        Elastic.invokeCallback(deltaQty0, deltaQty1, data);\\n    }\\n\\n    /**\\n     * @dev callback for Algebra V1 pairs. Not allowed to be executed outside of a swap operation\\n     * @param amount0Delta Amount of token0 to be transferred to the caller\\n     * @param amount1Delta Amount of token1 to be transferred to the caller\\n     * @param data Additional data to be passed to the callback function\\n     */\\n    function algebraSwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external onlyDuringSwap {\\n        AlgebraV1.invokeCallback(amount0Delta, amount1Delta, data);\\n    }\\n\\n    /**\\n     * @notice Called to msg.sender in iZiSwapPool#swapX2Y(DesireY) call\\n     * @param x Amount of tokenX trader will pay\\n     * @param data Any dadta passed though by the msg.sender via the iZiSwapPool#swapX2Y(DesireY) call\\n     */\\n    function swapX2YCallback(uint256 x, uint256 /*y*/, bytes calldata data) external onlyDuringSwap {\\n        Iziswap.transferTokens(x, data);\\n    }\\n\\n    /**\\n     * @notice Called to msg.sender in iZiSwapPool#swapY2X(DesireX) call\\n     * @param y Amount of tokenY trader will pay\\n     * @param data Any dadta passed though by the msg.sender via the iZiSwapPool#swapY2X(DesireX) call\\n     */\\n    function swapY2XCallback(uint256 /*x*/, uint256 y, bytes calldata data) external onlyDuringSwap {\\n        Iziswap.transferTokens(y, data);\\n    }\\n\\n    /**\\n     * @notice Callback for DODO v3 Pools\\n     * @param token Token to be transferred to the caller\\n     * @param value Amount of tokens to be transferred to the caller\\n     * @param data Additional data to be passed to the callback function\\n     */\\n    function d3MMSwapCallBack(address token, uint256 value, bytes calldata data) external {\\n        DODOV3.invokeCallback(token, value, data);\\n    }\\n\\n    // Swap functions\\n\\n    /**\\n     * @inheritdoc IWowmaxRouter\\n     */\\n    function swap(\\n        ExchangeRequest calldata request\\n    ) external payable override reentrancyProtectedSwap returns (uint256[] memory amountsOut) {\\n        checkRequest(request);\\n        uint256 amountIn = receiveTokens(request);\\n        for (uint256 i = 0; i < request.exchangeRoutes.length; i++) {\\n            exchange(request.exchangeRoutes[i]);\\n        }\\n        amountsOut = sendTokens(request);\\n\\n        emit SwapExecuted(\\n            msg.sender,\\n            request.from == address(0) ? address(WETH) : request.from,\\n            amountIn,\\n            request.to,\\n            amountsOut\\n        );\\n    }\\n\\n    /**\\n     * @dev receives tokens from the caller\\n     * @param request Exchange request that contains the token to be received parameters.\\n     */\\n    function receiveTokens(ExchangeRequest calldata request) private returns (uint256) {\\n        uint256 amountIn;\\n        if (msg.value > 0 && request.from == address(0) && request.amountIn == 0) {\\n            amountIn = msg.value;\\n            WETH.deposit{ value: amountIn }();\\n        } else {\\n            if (request.amountIn > 0) {\\n                amountIn = request.amountIn;\\n                IERC20(request.from).safeTransferFrom(msg.sender, address(this), amountIn);\\n            }\\n        }\\n        return amountIn;\\n    }\\n\\n    /**\\n     * @dev sends swapped received tokens to the caller and treasury\\n     * @param request Exchange request that contains output tokens parameters\\n     */\\n    function sendTokens(ExchangeRequest calldata request) private returns (uint256[] memory amountsOut) {\\n        amountsOut = new uint256[](request.to.length);\\n        uint256 amountOut;\\n        IERC20 token;\\n        for (uint256 i = 0; i < request.to.length; i++) {\\n            token = IERC20(request.to[i]);\\n            amountOut = token.balanceOf(address(this));\\n\\n            uint256 feeAmount;\\n            if (amountOut > request.amountOutExpected[i]) {\\n                feeAmount = amountOut - request.amountOutExpected[i];\\n                uint256 maxFeeAmount = (amountOut * maxFeePercentage) / 10000;\\n                if (feeAmount > maxFeeAmount) {\\n                    feeAmount = maxFeeAmount;\\n                    amountsOut[i] = amountOut - feeAmount;\\n                } else {\\n                    amountsOut[i] = request.amountOutExpected[i];\\n                }\\n            } else {\\n                require(\\n                    amountOut >= (request.amountOutExpected[i] * (10000 - request.slippage[i])) / 10000,\\n                    \\\"WOWMAX: Insufficient output amount\\\"\\n                );\\n                amountsOut[i] = amountOut;\\n            }\\n\\n            if (address(token) == address(WETH)) {\\n                WETH.withdraw(amountOut);\\n            }\\n\\n            transfer(token, treasury, feeAmount);\\n            transfer(token, msg.sender, amountsOut[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev transfers token to the recipient\\n     * @param token Token to be transferred\\n     * @param to Recipient address\\n     * @param amount Amount to be transferred\\n     */\\n    function transfer(IERC20 token, address to, uint256 amount) private {\\n        //slither-disable-next-line incorrect-equality\\n        if (amount == 0) {\\n            return;\\n        }\\n        if (address(token) == address(WETH)) {\\n            //slither-disable-next-line arbitrary-send-eth //recipient is either a msg.sender or a treasury\\n            (bool sent, ) = payable(to).call{ value: amount }(\\\"\\\");\\n            require(sent, \\\"Wowmax: Failed to send native tokens\\\");\\n        } else {\\n            token.safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev executes an exchange operation according to the provided route\\n     * @param exchangeRoute Route to be executed\\n     */\\n    function exchange(ExchangeRoute calldata exchangeRoute) private returns (uint256) {\\n        uint256 amountIn = IERC20(exchangeRoute.from).balanceOf(address(this));\\n        uint256 amountOut;\\n        for (uint256 i = 0; i < exchangeRoute.swaps.length; i++) {\\n            amountOut += executeSwap(\\n                exchangeRoute.from,\\n                (amountIn * exchangeRoute.swaps[i].part) / exchangeRoute.parts,\\n                exchangeRoute.swaps[i]\\n            );\\n        }\\n        return amountOut;\\n    }\\n\\n    /**\\n     * @dev executes a swap operation according to the provided parameters\\n     * @param from Token to be swapped\\n     * @param amountIn Amount to be swapped\\n     * @param swapData Swap data that contains the swap parameters\\n     */\\n    function executeSwap(address from, uint256 amountIn, Swap calldata swapData) private returns (uint256) {\\n        if (swapData.family == UNISWAP_V3) {\\n            return UniswapV3.swap(amountIn, swapData);\\n        } else if (swapData.family == HASHFLOW) {\\n            return Hashflow.swap(from, amountIn, swapData);\\n        } else if (swapData.family == WOMBAT) {\\n            return Wombat.swap(from, amountIn, swapData);\\n        } else if (swapData.family == LEVEL) {\\n            return Level.swap(from, amountIn, swapData);\\n        } else if (swapData.family == DODO_V2) {\\n            return DODOV2.swap(from, amountIn, swapData);\\n        } else if (swapData.family == DODO_V3) {\\n            return DODOV3.swap(from, amountIn, swapData);\\n        } else if (swapData.family == WOOFI) {\\n            return WooFi.swap(from, amountIn, swapData);\\n        } else if (swapData.family == UNISWAP_V2) {\\n            return UniswapV2.swap(from, amountIn, swapData);\\n        } else if (swapData.family == CURVE) {\\n            return Curve.swap(from, amountIn, swapData);\\n        } else if (swapData.family == PANCAKESWAP_STABLE) {\\n            return PancakeSwapStable.swap(from, amountIn, swapData);\\n        } else if (swapData.family == DODO_V1) {\\n            return DODOV1.swap(from, amountIn, swapData);\\n        } else if (swapData.family == SADDLE) {\\n            return Saddle.swap(from, amountIn, swapData);\\n        } else if (swapData.family == FULCROM) {\\n            return Fulcrom.swap(from, amountIn, swapData);\\n        } else if (swapData.family == UNISWAP_V2_ROUTER) {\\n            return UniswapV2.routerSwap(from, amountIn, swapData);\\n        } else if (swapData.family == ELASTIC) {\\n            return Elastic.swap(from, amountIn, swapData);\\n        } else if (swapData.family == ALGEBRA_V1) {\\n            return AlgebraV1.swap(from, amountIn, swapData);\\n        } else if (swapData.family == ALGEBRA_V1_9) {\\n            return AlgebraV1.swap(from, amountIn, swapData);\\n        } else if (swapData.family == SYNCSWAP) {\\n            return SyncSwap.swap(from, amountIn, swapData);\\n        } else if (swapData.family == VOOI) {\\n            return Vooi.swap(from, amountIn, swapData);\\n        } else if (swapData.family == VELOCORE_V2) {\\n            return VelocoreV2.swap(address(WETH), from, amountIn, swapData);\\n        } else if (swapData.family == IZISWAP) {\\n            return Iziswap.swap(from, amountIn, swapData);\\n        } else if (swapData.family == VELODROME) {\\n            return Velodrome.swap(from, amountIn, swapData);\\n        } else {\\n            revert(\\\"WOWMAX: Unknown DEX family\\\");\\n        }\\n    }\\n\\n    // Checks and verifications\\n\\n    /**\\n     * @dev checks the swap request parameters\\n     * @param request Exchange request to be checked\\n     */\\n    function checkRequest(ExchangeRequest calldata request) private view {\\n        require(request.to.length > 0, \\\"WOWMAX: No output tokens specified\\\");\\n        require(request.to.length == request.amountOutExpected.length, \\\"WOWMAX: Wrong amountOutExpected length\\\");\\n        require(request.to.length == request.slippage.length, \\\"WOWMAX: Wrong slippage length\\\");\\n        for (uint256 i = 0; i < request.to.length; i++) {\\n            require(request.to[i] != address(0), \\\"WOWMAX: Wrong output token address\\\");\\n            require(request.amountOutExpected[i] > 0, \\\"WOWMAX: Wrong amountOutExpected value\\\");\\n            require(request.slippage[i] <= maxSlippage, \\\"WOWMAX: Slippage is too high\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WowmaxSwapReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.7;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant swaps. Based on OpenZeppelin Contracts (last updated v4.8.0)\\n * (security/ReentrancyGuard.sol)\\n */\\nabstract contract WowmaxSwapReentrancyGuard {\\n    uint256 private constant _SWAP_IN_PROGRESS = 1;\\n    uint256 private constant _SWAP_NOT_IN_PROGRESS = 2;\\n\\n    uint256 private _swapStatus;\\n\\n    /**\\n     * @dev Prevents a contract from calling swap function again from within swap\\n     */\\n    modifier reentrancyProtectedSwap() {\\n        _beforeSwap();\\n        _;\\n        _afterSwap();\\n    }\\n\\n    /**\\n     * @dev Prevents operation from being called outside of swap\\n     */\\n    modifier onlyDuringSwap() {\\n        require(_swapStatus == _SWAP_IN_PROGRESS, \\\"WOWMAX: not allowed outside of swap\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _swapStatus = _SWAP_NOT_IN_PROGRESS;\\n    }\\n\\n    /**\\n     * @dev checks if swap is in progress and prevents reentrant calls\\n     */\\n    function _beforeSwap() private {\\n        require(_swapStatus != _SWAP_IN_PROGRESS, \\\"WOWMAX: reentrant swap not allowed\\\");\\n        _swapStatus = _SWAP_IN_PROGRESS;\\n    }\\n\\n    /**\\n     * @dev sets swap status to not in progress\\n     */\\n    function _afterSwap() private {\\n        _swapStatus = _SWAP_NOT_IN_PROGRESS;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountOut\",\"type\":\"uint256[]\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"algebraSwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"d3MMSwapCallBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"echodexV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"pancakeV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setMaxFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSlippage\",\"type\":\"uint256\"}],\"name\":\"setMaxSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"family\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IWowmaxRouter.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IWowmaxRouter.ExchangeRoute[]\",\"name\":\"exchangeRoutes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"slippage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountOutExpected\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IWowmaxRouter.ExchangeRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"deltaQty0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"deltaQty1\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swapX2YCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swapY2XCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WowmaxRouter", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000bd4a0f12293c54e4e8ad221271cf0d395dd60a71", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}