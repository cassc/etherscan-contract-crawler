{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >0.5.7;\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n    function getPair(address,address) external view returns (address);    \r\n}\r\ninterface IUniswapV2Pair {\r\n    function getReserves() external view returns (uint,uint,uint);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\ninterface IPancakeRouter {\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountsIn(uint amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint[] memory amounts);\r\n}\r\ninterface TokenLike {\r\n    function balanceOf(address) external view returns(uint256);\r\n    function inviter(address) external view returns(address);\r\n    function count(address) external view returns(uint256);\r\n}\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function sqrt(uint x) internal pure returns (uint) {\r\n        uint z = (x+1)/2;\r\n        uint y = x;\r\n        while (z<y) {\r\n            y =z;\r\n            z = (x/z + z)/2;\r\n        }\r\n        return y;\r\n    }\r\n}\r\ncontract LYZSwap {\r\n    using SafeMath for uint256;\r\n    // --- Auth ---\r\n    mapping (address => uint) public wards;\r\n    function rely(address usr) external  auth { wards[usr] = 1; }\r\n    function deny(address usr) external  auth { wards[usr] = 0; }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"LYZSwap/not-authorized\");\r\n        _;\r\n    }\r\n    uint256                                           public  totalSupply = 10 ** 28;\r\n    mapping (address => uint256)                      public  balanceOf;\r\n    mapping (address => mapping (address => uint))    public  allowance;\r\n    string                                            public  symbol = \"LYZ\";\r\n    string                                            public  name = \"LYZSwap\";  \r\n    uint256                                           public  decimals = 18; \r\n\r\n    mapping (address => bool)                         public  freeoftax;\r\n    bool                                              public  tradinglock;\r\n    address                                           public  factory = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\r\n    address                                           public  v2Router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address                                           public  wbnb = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address                                           public  wbnbPair;\r\n    address                                           public  blackhole;\r\n    address                                           public  marketing;\r\n    address                                           public  shareholder;\r\n    mapping (address => uint256)                      public  lasttime;\r\n    mapping (address => uint256)                      public  count;\r\n    mapping (address => uint256)                      public  bnbtotal;\r\n    mapping (address => address)                      public  inviter;\r\n    TokenLike                                         public  OLDLYZ = TokenLike(0x02AA13E7A74E3777d2a20D855C576c046C857c51);\r\n\r\n\tconstructor() {    \r\n       balanceOf[msg.sender] = totalSupply;\r\n       wbnbPair = IUniswapV2Factory(factory).createPair(address(this), wbnb);\r\n       freeoftax[msg.sender] = true;\r\n       wards[msg.sender] = 1;\r\n    }\r\n    function setfreeAddress(address _usr) external auth {\r\n        if (freeoftax[_usr] == false) freeoftax[_usr] = true;\r\n        else freeoftax[_usr] = false;\r\n    }\r\n\r\n    function settradinglock() external auth {\r\n        if (tradinglock == false ) tradinglock = true;\r\n        else  tradinglock = false;\r\n    }\r\n    function setmarke(address _marketing) external auth returns(bool) {\r\n        marketing = _marketing;\r\n        return true;\r\n    }\r\n    function setshareholder(address _shareholder) external auth returns(bool) {\r\n        shareholder = _shareholder;\r\n        return true;\r\n    }\r\n\tfunction approve(address guy) external returns (bool) {\r\n        return approve(guy, ~uint(1));\r\n    }\r\n\r\n    function approve(address guy, uint wad) public  returns (bool){\r\n        allowance[msg.sender][guy] = wad;\r\n        emit Approval(msg.sender, guy, wad);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address dst, uint wad) external  returns (bool){\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n        public  returns (bool)\r\n    {\r\n        \r\n        require(!tradinglock || freeoftax[src] || freeoftax[dst] ,\"LYZSwap/Trading is still open\");\r\n        if (src != msg.sender && allowance[src][msg.sender] != ~uint(1)) {\r\n            require(allowance[src][msg.sender] >= wad, \"LYZSwap/insufficient-approval\");\r\n            allowance[src][msg.sender] = allowance[src][msg.sender].sub(wad);\r\n        }\r\n        require(balanceOf[src] >= wad, \"LYZSwap/insuff-balance\");\r\n        balanceOf[src] = balanceOf[src].sub(wad);\r\n\r\n        if (wad >= 10**17 && inviter[dst] == address(0) && !isV2Pair(src) && OLDLYZ.inviter(dst) == address(0)) {\r\n            inviter[dst] = src;\r\n            count[src] +=1;\r\n        }\r\n\r\n        if (src == wbnbPair) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = wbnb;\r\n            path[1] = address(this);\r\n            uint[] memory amounts = IPancakeRouter(v2Router).getAmountsIn(wad,path);\r\n            address up = inviter[dst];\r\n            if (up == address(0)) up = OLDLYZ.inviter(dst);\r\n            if (up != address(0)) bnbtotal[up] += amounts[0];\r\n        }\r\n        if (totalSupply.sub(balanceOf[blackhole]) > 10 **22){\r\n            if (src == wbnbPair && isBuy(src,wad) && !freeoftax[dst]) {\r\n                require(isBuywad(src,wad),\"LYZSwap/The quantity purchased does not meet the requirements\");\r\n                require(block.timestamp > lasttime[dst].add(86400),\"LYZSwap/You can only trade once in 24 hours\");\r\n                lasttime[dst] = block.timestamp;\r\n                referralbonuses(dst,wad);\r\n                uint256 tax12 = wad.mul(12)/100;\r\n                wad = wad.sub(tax12);  \r\n            }     \r\n            if (dst == wbnbPair && !isAddLiquidity(dst,wad) && !freeoftax[src]) {\r\n                require(block.timestamp > lasttime[src].add(86400),\"LYZSwap/You can only trade once in 24 hours\");\r\n                referralbonuses(src,wad);\r\n                uint256 tax12 = wad.mul(12)/100;  \r\n                wad = wad.sub(tax12);    \r\n            } \r\n            \r\n            if (src != wbnbPair && !isV2Pair(dst) && !freeoftax[src] && !freeoftax[dst]) {\r\n                    uint256 tax30 = wad.mul(30)/100;\r\n                    balanceOf[blackhole] = balanceOf[blackhole].add(tax30);      \r\n                    wad = wad.sub(tax30);     \r\n            } \r\n            if ( isV2Pair(dst) && dst != wbnbPair && !freeoftax[src]) {\r\n                    uint256 tax30 = wad.mul(30)/100;\r\n                    balanceOf[blackhole] = balanceOf[blackhole].add(tax30);      \r\n                    wad = wad.sub(tax30);     \r\n            }\r\n        } \r\n\r\n\r\n        balanceOf[dst] = balanceOf[dst].add(wad);\r\n        emit Transfer(src, dst, wad);\r\n        return true;\r\n    }\r\n\r\n    //Check whether an address is PancakePair \r\n    function isV2Pair(address _pair) public view returns (bool) {\r\n        bytes32 accountHash;\r\n        bytes32 codeHash;  \r\n        address pair = wbnbPair;  \r\n        assembly { accountHash := extcodehash(pair)}\r\n        assembly { codeHash := extcodehash(_pair) }\r\n        return (codeHash == accountHash);\r\n    }\r\n    //Decide whether to add liquidity or sell\r\n    function isAddLiquidity(address _pair,uint256 wad) internal view returns (bool) {\r\n        uint balance1 = TokenLike(wbnb).balanceOf(_pair);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(_pair).getReserves();\r\n        if (reserve0 ==0 || reserve1 ==0 ) return true;\r\n        address _token0 = IUniswapV2Pair(_pair).token0();\r\n        (uint spdreserve, uint assetreserve)= _token0 == address(this) ? (reserve0,reserve1) : (reserve1,reserve0);\r\n        uint assetamount = IPancakeRouter(v2Router).quote(wad, spdreserve, assetreserve);\r\n        return (balance1 > assetreserve + assetamount/2 );\r\n     }\r\n    function referralbonuses(address _referrer,uint256 wad) internal{\r\n        uint256 tax1 = wad.mul(1)/100; \r\n        uint256 tax2 = wad.mul(2)/100;\r\n        uint256 tax3 = wad.mul(3)/100;\r\n        uint256 tax7 = wad.mul(7)/100;\r\n        balanceOf[blackhole] = balanceOf[blackhole].add(tax3); \r\n        balanceOf[shareholder] = balanceOf[shareholder].add(tax2); \r\n        address _dst = _referrer;\r\n        for (uint i=0;i<5;++i) {\r\n            address referrer = getinviter(_dst);\r\n            if (i==0) {\r\n                if (referrer != address(0)) {\r\n                    balanceOf[referrer] = balanceOf[referrer].add(tax3);\r\n                    emit Transfer(_dst, referrer, tax3);\r\n                }\r\n                else {\r\n                    balanceOf[marketing] = balanceOf[marketing].add(tax7);\r\n                    i = 5;\r\n                }\r\n            }\r\n            else {\r\n                if (referrer != address(0)) {\r\n                    balanceOf[referrer] = balanceOf[referrer].add(tax1);\r\n                    emit Transfer(_dst, referrer, tax1);\r\n                }\r\n                else {\r\n                    balanceOf[marketing] = balanceOf[marketing].add((5-i).mul(tax1));\r\n                    i = 5;\r\n                }\r\n            }\r\n            _dst = referrer; \r\n        } \r\n     }\r\n    //Determine whether you are buying or remove liquidity\r\n    function isBuy(address _pair,uint256 wad) internal view returns (bool) {\r\n        if (!isV2Pair(_pair)) return false;\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(_pair).getReserves();\r\n        address _token0 = IUniswapV2Pair(_pair).token0();\r\n        (,uint assetreserve)= _token0 == address(this) ? (reserve0,reserve1) : (reserve1,reserve0);\r\n        address[] memory path = new address[](2);\r\n        path[0] = wbnb;\r\n        path[1] = address(this);\r\n        uint[] memory amounts = IPancakeRouter(v2Router).getAmountsIn(wad,path);\r\n        uint balance1 = TokenLike(wbnb).balanceOf(_pair);\r\n        return (balance1 > assetreserve + amounts[0]/2);\r\n    }\r\n    function getscore(address usr) public view returns (uint,uint) {\r\n        return (count[usr]+OLDLYZ.count(usr),bnbtotal[usr]);\r\n    }\r\n    function getinviter(address usr) public view returns (address) {\r\n        if (inviter[usr] != address(0)) return inviter[usr];\r\n        else return OLDLYZ.inviter(usr);\r\n    }\r\n    function isBuywad(address _pair,uint256 wad) internal view returns (bool) {\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(_pair).getReserves();\r\n        address _token0 = IUniswapV2Pair(_pair).token0();\r\n        (,uint wbnbreserve)= _token0 == address(this) ? (reserve0,reserve1) : (reserve1,reserve0);\r\n        address[] memory path = new address[](2);\r\n        path[0] = wbnb;\r\n        path[1] = address(this);\r\n        uint[] memory amounts = IPancakeRouter(v2Router).getAmountsIn(wad,path);\r\n        if (wbnbreserve >= 2*10**21) return true;\r\n        else if (wbnbreserve < 5*10**19 && amounts[0] <= 10**17) return true;\r\n        else if (wbnbreserve < 10**20 && wbnbreserve >= 5 * 10**19 && amounts[0] <= 2*10**17) return true;\r\n        else if (wbnbreserve < 5 *10**20 && wbnbreserve >= 10**20 && amounts[0] <= 3*10**17) return true;\r\n        else if (wbnbreserve < 10**21 && wbnbreserve >=5*10**20 && amounts[0] <= 5*10**17) return true;\r\n        else if (wbnbreserve < 2*10**21 && wbnbreserve >= 10**21 && amounts[0] <= 10**18) return true;\r\n        else return false;\r\n    }\r\n\tevent Transfer(\r\n\t\taddress indexed _from,\r\n\t\taddress indexed _to,\r\n\t\tuint _value\r\n\t\t);\r\n\tevent Approval(\r\n\t\taddress indexed _owner,\r\n\t\taddress indexed _spender,\r\n\t\tuint _value\r\n\t\t);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OLDLYZ\",\"outputs\":[{\"internalType\":\"contract TokenLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blackhole\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bnbtotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeoftax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getinviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getscore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"isV2Pair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lasttime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usr\",\"type\":\"address\"}],\"name\":\"setfreeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"}],\"name\":\"setmarke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shareholder\",\"type\":\"address\"}],\"name\":\"setshareholder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settradinglock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareholder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradinglock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LYZSwap", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5e16f93b3a33850be2b6fd788ce1bb14620df1d7acc11ea2dfe363873ceaa50e"}